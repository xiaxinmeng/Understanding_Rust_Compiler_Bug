{"sha": "87b0c9036f0557568cfc939542508e9adf874b83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YjBjOTAzNmYwNTU3NTY4Y2ZjOTM5NTQyNTA4ZTlhZGY4NzRiODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-10T12:19:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-10T12:19:41Z"}, "message": "Auto merge of #60387 - Goirad:test-expansion, r=ollie27\n\nAllow cross-compiling doctests\n\nThis PR allows doctest to receive a --runtool argument, as well as possibly many --runtool-arg arguments, which are then used to run cross compiled doctests.\nAlso, functionality has been added to rustdoc to allow it to skip testing doctests on a per-target basis, in the same way that compiletest does it. For example, tagging the doctest with \"ignore-sgx\" disables testing on any targets that contain \"sgx\". A plain \"ignore\" still skips testing on all targets.\n\nSee [here](https://github.com/rust-lang/cargo/pull/6892) for the companion PR in the cargo project that extends functionality in Cargo so that it passes the appropriate parameters to rustdoc when cross compiling and testing doctests.\n\nPart of [#6460](https://github.com/rust-lang/cargo/issues/6460)", "tree": {"sha": "5bd936742cecfc3a4e52d2b62f334432789ff8c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd936742cecfc3a4e52d2b62f334432789ff8c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b0c9036f0557568cfc939542508e9adf874b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b0c9036f0557568cfc939542508e9adf874b83", "html_url": "https://github.com/rust-lang/rust/commit/87b0c9036f0557568cfc939542508e9adf874b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b0c9036f0557568cfc939542508e9adf874b83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403c0def905c58f08e5a1ce48a430522df01abf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/403c0def905c58f08e5a1ce48a430522df01abf1", "html_url": "https://github.com/rust-lang/rust/commit/403c0def905c58f08e5a1ce48a430522df01abf1"}, {"sha": "4a2094c9f61836214d9e37fa042761948483c2d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2094c9f61836214d9e37fa042761948483c2d9", "html_url": "https://github.com/rust-lang/rust/commit/4a2094c9f61836214d9e37fa042761948483c2d9"}], "stats": {"total": 237, "additions": 190, "deletions": 47}, "files": [{"sha": "49d05b5038df74dd8ff7bd53545adc7fdfc123d9", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -471,3 +471,53 @@ Some methodology notes about what rustdoc counts in this metric:\n \n Public items that are not documented can be seen with the built-in `missing_docs` lint. Private\n items that are not documented can be seen with Clippy's `missing_docs_in_private_items` lint.\n+\n+### `--enable-per-target-ignores`: allow `ignore-foo` style filters for doctests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --enable-per-target-ignores\n+```\n+\n+This flag allows you to tag doctests with compiltest style `ignore-foo` filters that prevent\n+rustdoc from running that test if the target triple string contains foo. For example:\n+\n+```rust\n+///```ignore-foo,ignore-bar\n+///assert!(2 == 2);\n+///```\n+struct Foo;\n+```\n+\n+This will not be run when the build target is `super-awesome-foo` or `less-bar-awesome`.\n+If the flag is not enabled, then rustdoc will consume the filter, but do nothing with it, and\n+the above example will be run for all targets.\n+If you want to preserve backwards compatibility for older versions of rustdoc, you can use\n+\n+```rust\n+///```ignore,ignore-foo\n+///assert!(2 == 2);\n+///```\n+struct Foo;\n+```\n+\n+In older versions, this will be ignored on all targets, but on newer versions `ignore-gnu` will\n+override `ignore`.\n+\n+### `--runtool`, `--runtool-arg`: program to run tests with; args to pass to it\n+\n+Using thses options looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --runtool runner --runtool-arg --do-thing --runtool-arg --do-other-thing\n+```\n+\n+These options can be used to run the doctest under a program, and also pass arguments to\n+that program. For example, if you want to run your doctests under valgrind you might run\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --runtool valgrind\n+```\n+\n+Another use case would be to run a test inside an emulator, or through a Virtual Machine."}, {"sha": "995a340143f78bf6706298d2ecba2e3a30262429", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -9,7 +9,7 @@ use rustc::session;\n use rustc::session::config::{CrateType, parse_crate_types_from_list};\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n-                             get_cmd_lint_options, ExternEntry};\n+                             get_cmd_lint_options, host_triple, ExternEntry};\n use rustc::session::search_paths::SearchPath;\n use rustc_driver;\n use rustc_target::spec::TargetTriple;\n@@ -54,7 +54,7 @@ pub struct Options {\n     /// Debugging (`-Z`) options to pass to the compiler.\n     pub debugging_options: DebuggingOptions,\n     /// The target used to compile the crate against.\n-    pub target: Option<TargetTriple>,\n+    pub target: TargetTriple,\n     /// Edition used when reading the crate. Defaults to \"2015\". Also used by default when\n     /// compiling doctests from the crate.\n     pub edition: Edition,\n@@ -77,6 +77,14 @@ pub struct Options {\n     /// Optional path to persist the doctest executables to, defaults to a\n     /// temporary directory if not set.\n     pub persist_doctests: Option<PathBuf>,\n+    /// Runtool to run doctests with\n+    pub runtool: Option<String>,\n+    /// Arguments to pass to the runtool\n+    pub runtool_args: Vec<String>,\n+    /// Whether to allow ignoring doctests on a per-target basis\n+    /// For example, using ignore-foo to ignore running the doctest on any target that\n+    /// contains \"foo\" as a substring\n+    pub enable_per_target_ignores: bool,\n \n     // Options that affect the documentation process\n \n@@ -140,6 +148,9 @@ impl fmt::Debug for Options {\n             .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n+            .field(\"runtool\", &self.runtool)\n+            .field(\"runtool_args\", &self.runtool_args)\n+            .field(\"enable-per-target-ignores\", &self.enable_per_target_ignores)\n             .finish()\n     }\n }\n@@ -414,7 +425,9 @@ impl Options {\n             }\n         }\n \n-        let target = matches.opt_str(\"target\").map(|target| {\n+        let target = matches.opt_str(\"target\").map_or(\n+            TargetTriple::from_triple(host_triple()),\n+            |target| {\n             if target.ends_with(\".json\") {\n                 TargetTriple::TargetPath(PathBuf::from(target))\n             } else {\n@@ -466,6 +479,9 @@ impl Options {\n         let codegen_options_strs = matches.opt_strs(\"C\");\n         let lib_strs = matches.opt_strs(\"L\");\n         let extern_strs = matches.opt_strs(\"extern\");\n+        let runtool = matches.opt_str(\"runtool\");\n+        let runtool_args = matches.opt_strs(\"runtool-arg\");\n+        let enable_per_target_ignores = matches.opt_present(\"enable-per-target-ignores\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -496,6 +512,9 @@ impl Options {\n             show_coverage,\n             crate_version,\n             persist_doctests,\n+            runtool,\n+            runtool_args,\n+            enable_per_target_ignores,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "57b016a08c2fe2031799c0c6c055c96f4f3731ba", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -13,7 +13,6 @@ use rustc_interface::interface;\n use rustc_driver::abort_on_err;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n-use rustc_target::spec::TargetTriple;\n \n use syntax::source_map;\n use syntax::attr;\n@@ -294,7 +293,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         }\n     }).collect();\n \n-    let host_triple = TargetTriple::from_triple(config::host_triple());\n     let crate_types = if proc_macro_crate {\n         vec![config::CrateType::ProcMacro]\n     } else {\n@@ -313,7 +311,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         lint_cap: Some(lint_cap.unwrap_or_else(|| lint::Forbid)),\n         cg: codegen_options,\n         externs,\n-        target_triple: target.unwrap_or(host_triple),\n+        target_triple: target,\n         // Ensure that rustdoc works even if rustc is feature-staged\n         unstable_features: UnstableFeatures::Allow,\n         actually_rustdoc: true,"}, {"sha": "1a4fa38ff8db033f1990adbf9841e16c78d238f4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -199,7 +199,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         let ignore;\n         let edition;\n         if let Some(Event::Start(Tag::CodeBlock(lang))) = event {\n-            let parse_result = LangString::parse(&lang, self.check_error_codes);\n+            let parse_result = LangString::parse(&lang, self.check_error_codes, false);\n             if !parse_result.rust {\n                 return Some(Event::Start(Tag::CodeBlock(lang)));\n             }\n@@ -272,7 +272,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             ))\n         });\n \n-        let tooltip = if ignore {\n+        let tooltip = if ignore != Ignore::None {\n             Some((\"This example is not tested\".to_owned(), \"ignore\"))\n         } else if compile_fail {\n             Some((\"This example deliberately fails to compile\".to_owned(), \"compile_fail\"))\n@@ -286,7 +286,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             s.push_str(&highlight::render_with_highlighting(\n                 &text,\n                 Some(&format!(\"rust-example-rendered{}\",\n-                                if ignore { \" ignore\" }\n+                                if ignore != Ignore::None { \" ignore\" }\n                                 else if compile_fail { \" compile_fail\" }\n                                 else if explicit_edition { \" edition \" }\n                                 else { \"\" })),\n@@ -297,7 +297,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             s.push_str(&highlight::render_with_highlighting(\n                 &text,\n                 Some(&format!(\"rust-example-rendered{}\",\n-                                if ignore { \" ignore\" }\n+                                if ignore != Ignore::None { \" ignore\" }\n                                 else if compile_fail { \" compile_fail\" }\n                                 else if explicit_edition { \" edition \" }\n                                 else { \"\" })),\n@@ -551,7 +551,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n-pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes: ErrorCodes) {\n+pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes: ErrorCodes,\n+                                           enable_per_target_ignores: bool) {\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;\n     let mut nb_lines = 0;\n@@ -564,7 +565,7 @@ pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes\n                 let block_info = if s.is_empty() {\n                     LangString::all_false()\n                 } else {\n-                    LangString::parse(&*s, error_codes)\n+                    LangString::parse(&*s, error_codes, enable_per_target_ignores)\n                 };\n                 if !block_info.rust {\n                     continue;\n@@ -607,7 +608,7 @@ pub struct LangString {\n     original: String,\n     pub should_panic: bool,\n     pub no_run: bool,\n-    pub ignore: bool,\n+    pub ignore: Ignore,\n     pub rust: bool,\n     pub test_harness: bool,\n     pub compile_fail: bool,\n@@ -616,13 +617,20 @@ pub struct LangString {\n     pub edition: Option<Edition>\n }\n \n+#[derive(Eq, PartialEq, Clone, Debug)]\n+pub enum Ignore {\n+    All,\n+    None,\n+    Some(Vec<String>),\n+}\n+\n impl LangString {\n     fn all_false() -> LangString {\n         LangString {\n             original: String::new(),\n             should_panic: false,\n             no_run: false,\n-            ignore: false,\n+            ignore: Ignore::None,\n             rust: true,  // NB This used to be `notrust = false`\n             test_harness: false,\n             compile_fail: false,\n@@ -632,11 +640,16 @@ impl LangString {\n         }\n     }\n \n-    fn parse(string: &str, allow_error_code_check: ErrorCodes) -> LangString {\n+    fn parse(\n+        string: &str,\n+        allow_error_code_check: ErrorCodes,\n+        enable_per_target_ignores: bool\n+    ) -> LangString {\n         let allow_error_code_check = allow_error_code_check.as_bool();\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n+        let mut ignores = vec![];\n \n         data.original = string.to_owned();\n         let tokens = string.split(|c: char|\n@@ -651,7 +664,11 @@ impl LangString {\n                     seen_rust_tags = seen_other_tags == false;\n                 }\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n-                \"ignore\" => { data.ignore = true; seen_rust_tags = !seen_other_tags; }\n+                \"ignore\" => { data.ignore = Ignore::All; seen_rust_tags = !seen_other_tags; }\n+                x if x.starts_with(\"ignore-\") => if enable_per_target_ignores {\n+                    ignores.push(x.trim_start_matches(\"ignore-\").to_owned());\n+                    seen_rust_tags = !seen_other_tags;\n+                }\n                 \"allow_fail\" => { data.allow_fail = true; seen_rust_tags = !seen_other_tags; }\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; }\n                 \"test_harness\" => {\n@@ -679,6 +696,10 @@ impl LangString {\n                 _ => { seen_other_tags = true }\n             }\n         }\n+        // ignore-foo overrides ignore\n+        if !ignores.is_empty() {\n+            data.ignore = Ignore::Some(ignores);\n+        }\n \n         data.rust &= !seen_other_tags || seen_rust_tags;\n \n@@ -919,7 +940,7 @@ crate fn rust_code_blocks(md: &str) -> Vec<RustCodeBlock> {\n                 let lang_string = if syntax.is_empty() {\n                     LangString::all_false()\n                 } else {\n-                    LangString::parse(&*syntax, ErrorCodes::Yes)\n+                    LangString::parse(&*syntax, ErrorCodes::Yes, false)\n                 };\n \n                 if lang_string.rust {"}, {"sha": "5d6811a29a3eb7f94d8f7c7d7865e109957831b1", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -1,4 +1,4 @@\n-use super::{ErrorCodes, LangString, Markdown, MarkdownHtml, IdMap};\n+use super::{ErrorCodes, LangString, Markdown, MarkdownHtml, IdMap, Ignore};\n use super::plain_summary_line;\n use std::cell::RefCell;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n@@ -26,10 +26,10 @@ fn test_unique_id() {\n #[test]\n fn test_lang_string_parse() {\n     fn t(s: &str,\n-        should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n+        should_panic: bool, no_run: bool, ignore: Ignore, rust: bool, test_harness: bool,\n         compile_fail: bool, allow_fail: bool, error_codes: Vec<String>,\n-         edition: Option<Edition>) {\n-        assert_eq!(LangString::parse(s, ErrorCodes::Yes), LangString {\n+        edition: Option<Edition>) {\n+        assert_eq!(LangString::parse(s, ErrorCodes::Yes, true), LangString {\n             should_panic,\n             no_run,\n             ignore,\n@@ -42,6 +42,7 @@ fn test_lang_string_parse() {\n             edition,\n         })\n     }\n+    let ignore_foo = Ignore::Some(vec!(\"foo\".to_string()));\n \n     fn v() -> Vec<String> {\n         Vec::new()\n@@ -50,23 +51,24 @@ fn test_lang_string_parse() {\n     // ignore-tidy-linelength\n     // marker                | should_panic | no_run | ignore | rust | test_harness\n     //                       | compile_fail | allow_fail | error_codes | edition\n-    t(\"\",                      false,         false,   false,   true,  false, false, false, v(), None);\n-    t(\"rust\",                  false,         false,   false,   true,  false, false, false, v(), None);\n-    t(\"sh\",                    false,         false,   false,   false, false, false, false, v(), None);\n-    t(\"ignore\",                false,         false,   true,    true,  false, false, false, v(), None);\n-    t(\"should_panic\",          true,          false,   false,   true,  false, false, false, v(), None);\n-    t(\"no_run\",                false,         true,    false,   true,  false, false, false, v(), None);\n-    t(\"test_harness\",          false,         false,   false,   true,  true,  false, false, v(), None);\n-    t(\"compile_fail\",          false,         true,    false,   true,  false, true,  false, v(), None);\n-    t(\"allow_fail\",            false,         false,   false,   true,  false, false, true,  v(), None);\n-    t(\"{.no_run .example}\",    false,         true,    false,   true,  false, false, false, v(), None);\n-    t(\"{.sh .should_panic}\",   true,          false,   false,   false, false, false, false, v(), None);\n-    t(\"{.example .rust}\",      false,         false,   false,   true,  false, false, false, v(), None);\n-    t(\"{.test_harness .rust}\", false,         false,   false,   true,  true,  false, false, v(), None);\n-    t(\"text, no_run\",          false,         true,    false,   false, false, false, false, v(), None);\n-    t(\"text,no_run\",           false,         true,    false,   false, false, false, false, v(), None);\n-    t(\"edition2015\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2015));\n-    t(\"edition2018\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2018));\n+    t(\"\",                      false,         false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"rust\",                  false,         false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"sh\",                    false,         false,   Ignore::None,   false, false, false, false, v(), None);\n+    t(\"ignore\",                false,         false,   Ignore::All,    true,  false, false, false, v(), None);\n+    t(\"ignore-foo\",            false,         false,   ignore_foo,     true,  false, false, false, v(), None);\n+    t(\"should_panic\",          true,          false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"no_run\",                false,         true,    Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"test_harness\",          false,         false,   Ignore::None,   true,  true,  false, false, v(), None);\n+    t(\"compile_fail\",          false,         true,    Ignore::None,   true,  false, true,  false, v(), None);\n+    t(\"allow_fail\",            false,         false,   Ignore::None,   true,  false, false, true,  v(), None);\n+    t(\"{.no_run .example}\",    false,         true,    Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"{.sh .should_panic}\",   true,          false,   Ignore::None,   false, false, false, false, v(), None);\n+    t(\"{.example .rust}\",      false,         false,   Ignore::None,   true,  false, false, false, v(), None);\n+    t(\"{.test_harness .rust}\", false,         false,   Ignore::None,   true,  true,  false, false, v(), None);\n+    t(\"text, no_run\",          false,         true,    Ignore::None,   false, false, false, false, v(), None);\n+    t(\"text,no_run\",           false,         true,    Ignore::None,   false, false, false, false, v(), None);\n+    t(\"edition2015\",           false,         false,   Ignore::None,   true,  false, false, false, v(), Some(Edition::Edition2015));\n+    t(\"edition2018\",           false,         false,   Ignore::None,   true,  false, false, false, v(), Some(Edition::Edition2018));\n }\n \n #[test]"}, {"sha": "88da1b16686b0c8568afcfb1d08c46665353813b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -356,6 +356,23 @@ fn opts() -> Vec<RustcOptGroup> {\n                       \"show-coverage\",\n                       \"calculate percentage of public items with documentation\")\n         }),\n+        unstable(\"enable-per-target-ignores\", |o| {\n+            o.optflag(\"\",\n+                      \"enable-per-target-ignores\",\n+                      \"parse ignore-foo for ignoring doctests on a per-target basis\")\n+        }),\n+        unstable(\"runtool\", |o| {\n+            o.optopt(\"\",\n+                     \"runtool\",\n+                     \"\",\n+                     \"The tool to run tests with when building for a different target than host\")\n+        }),\n+        unstable(\"runtool-arg\", |o| {\n+            o.optmulti(\"\",\n+                       \"runtool-arg\",\n+                       \"\",\n+                       \"One (of possibly many) arguments to pass to the runtool\")\n+        }),\n     ]\n }\n "}, {"sha": "b06b368469fc1f55be780056efbb0037c90198ea", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -143,11 +143,12 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n     opts.no_crate_inject = true;\n     opts.display_warnings = options.display_warnings;\n     let mut collector = Collector::new(options.input.display().to_string(), options.clone(),\n-                                       true, opts, None, Some(options.input));\n+                                       true, opts, None, Some(options.input),\n+                                       options.enable_per_target_ignores);\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n \n-    find_testable_code(&input_str, &mut collector, codes);\n+    find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores);\n \n     options.test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&options.test_args, collector.tests,"}, {"sha": "14f8b16dc30679b2671ad729be9f89db21b2ba12", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -336,7 +336,7 @@ pub fn look_for_tests<'tcx>(\n         found_tests: 0,\n     };\n \n-    find_testable_code(&dox, &mut tests, ErrorCodes::No);\n+    find_testable_code(&dox, &mut tests, ErrorCodes::No, false);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n         let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());"}, {"sha": "6f1eb0394429f14ed6753e74e480b0148767c43b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b0c9036f0557568cfc939542508e9adf874b83/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=87b0c9036f0557568cfc939542508e9adf874b83", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::sync::Lrc;\n use rustc_interface::interface;\n+use rustc_target::spec::TargetTriple;\n use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, config, DiagnosticOutput};\n@@ -22,7 +23,7 @@ use testing;\n \n use crate::clean::Attributes;\n use crate::config::Options;\n-use crate::html::markdown::{self, ErrorCodes, LangString};\n+use crate::html::markdown::{self, ErrorCodes, LangString, Ignore};\n \n #[derive(Clone, Default)]\n pub struct TestOptions {\n@@ -57,6 +58,7 @@ pub fn run(options: Options) -> i32 {\n             ..config::basic_debugging_options()\n         },\n         edition: options.edition,\n+        target_triple: options.target.clone(),\n         ..config::Options::default()\n     };\n \n@@ -82,13 +84,15 @@ pub fn run(options: Options) -> i32 {\n \n         let mut opts = scrape_test_config(lower_to_hir.peek().0.borrow().krate());\n         opts.display_warnings |= options.display_warnings;\n+        let enable_per_target_ignores = options.enable_per_target_ignores;\n         let mut collector = Collector::new(\n             compiler.crate_name()?.peek().to_string(),\n             options,\n             false,\n             opts,\n             Some(compiler.source_map().clone()),\n             None,\n+            enable_per_target_ignores,\n         );\n \n         let mut global_ctxt = compiler.global_ctxt()?.take();\n@@ -181,6 +185,9 @@ fn run_test(\n     should_panic: bool,\n     no_run: bool,\n     as_test_harness: bool,\n+    runtool: Option<String>,\n+    runtool_args: Vec<String>,\n+    target: TargetTriple,\n     compile_fail: bool,\n     mut error_codes: Vec<String>,\n     opts: &TestOptions,\n@@ -270,6 +277,7 @@ fn run_test(\n     if no_run {\n         compiler.arg(\"--emit=metadata\");\n     }\n+    compiler.arg(\"--target\").arg(target.to_string());\n \n     compiler.arg(\"-\");\n     compiler.stdin(Stdio::piped());\n@@ -315,7 +323,15 @@ fn run_test(\n     }\n \n     // Run the code!\n-    let mut cmd = Command::new(output_file);\n+    let mut cmd;\n+\n+    if let Some(tool) = runtool {\n+        cmd = Command::new(tool);\n+        cmd.arg(output_file);\n+        cmd.args(runtool_args);\n+    } else {\n+        cmd = Command::new(output_file);\n+    }\n \n     match cmd.output() {\n         Err(e) => return Err(TestFailure::ExecutionError(e)),\n@@ -603,6 +619,7 @@ pub struct Collector {\n \n     options: Options,\n     use_headers: bool,\n+    enable_per_target_ignores: bool,\n     cratename: String,\n     opts: TestOptions,\n     position: Span,\n@@ -612,12 +629,14 @@ pub struct Collector {\n \n impl Collector {\n     pub fn new(cratename: String, options: Options, use_headers: bool, opts: TestOptions,\n-               source_map: Option<Lrc<SourceMap>>, filename: Option<PathBuf>,) -> Collector {\n+               source_map: Option<Lrc<SourceMap>>, filename: Option<PathBuf>,\n+               enable_per_target_ignores: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n             options,\n             use_headers,\n+            enable_per_target_ignores,\n             cratename,\n             opts,\n             position: DUMMY_SP,\n@@ -661,12 +680,22 @@ impl Tester for Collector {\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.options.edition.clone());\n         let options = self.options.clone();\n+        let runtool = self.options.runtool.clone();\n+        let runtool_args = self.options.runtool_args.clone();\n+        let target = self.options.target.clone();\n+        let target_str = target.to_string();\n \n         debug!(\"creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n-                name: testing::DynTestName(name),\n-                ignore: config.ignore,\n+                name: testing::DynTestName(name.clone()),\n+                ignore: match config.ignore {\n+                    Ignore::All => true,\n+                    Ignore::None => false,\n+                    Ignore::Some(ref ignores) => {\n+                        ignores.iter().any(|s| target_str.contains(s))\n+                    },\n+                },\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n                 allow_fail: config.allow_fail,\n@@ -681,6 +710,9 @@ impl Tester for Collector {\n                     config.should_panic,\n                     config.no_run,\n                     config.test_harness,\n+                    runtool,\n+                    runtool_args,\n+                    target,\n                     config.compile_fail,\n                     config.error_codes,\n                     &opts,\n@@ -827,7 +859,10 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         // anything else, this will combine them for us.\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             self.collector.set_position(attrs.span.unwrap_or(DUMMY_SP));\n-            markdown::find_testable_code(&doc, self.collector, self.codes);\n+            markdown::find_testable_code(&doc,\n+                                         self.collector,\n+                                         self.codes,\n+                                         self.collector.enable_per_target_ignores);\n         }\n \n         nested(self);"}]}