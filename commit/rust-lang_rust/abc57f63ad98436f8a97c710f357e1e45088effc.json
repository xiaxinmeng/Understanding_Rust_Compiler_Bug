{"sha": "abc57f63ad98436f8a97c710f357e1e45088effc", "node_id": "C_kwDOAAsO6NoAKGFiYzU3ZjYzYWQ5ODQzNmY4YTk3YzcxMGYzNTdlMWU0NTA4OGVmZmM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-12T09:33:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-29T21:16:48Z"}, "message": "Move body_owners to tcx.hir().", "tree": {"sha": "dae2fe24033f71a6635198c98594e0887a17e71c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae2fe24033f71a6635198c98594e0887a17e71c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc57f63ad98436f8a97c710f357e1e45088effc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc57f63ad98436f8a97c710f357e1e45088effc", "html_url": "https://github.com/rust-lang/rust/commit/abc57f63ad98436f8a97c710f357e1e45088effc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc57f63ad98436f8a97c710f357e1e45088effc/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9fea508a6db55075d7851211ea5d4b0485e322", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9fea508a6db55075d7851211ea5d4b0485e322", "html_url": "https://github.com/rust-lang/rust/commit/db9fea508a6db55075d7851211ea5d4b0485e322"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "ff8920863b1083441586af0b6ea795a28caddd7e", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -489,7 +489,7 @@ fn print_with_analysis(\n             let mut out = String::new();\n             abort_on_err(rustc_typeck::check_crate(tcx), tcx.sess);\n             debug!(\"pretty printing THIR tree\");\n-            for did in tcx.body_owners() {\n+            for did in tcx.hir().body_owners() {\n                 let _ = writeln!(\n                     out,\n                     \"{:?}:\\n{}\\n\","}, {"sha": "795fa19021c4ec58dca9c5a05c907e13a6ff97ab", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -886,9 +886,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n         parallel!(\n             {\n                 sess.time(\"match_checking\", || {\n-                    tcx.par_body_owners(|def_id| {\n-                        tcx.ensure().check_match(def_id.to_def_id());\n-                    });\n+                    tcx.hir().par_body_owners(|def_id| tcx.ensure().check_match(def_id.to_def_id()))\n                 });\n             },\n             {\n@@ -907,11 +905,11 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     });\n \n     sess.time(\"MIR_borrow_checking\", || {\n-        tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n+        tcx.hir().par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n     });\n \n     sess.time(\"MIR_effect_checking\", || {\n-        for def_id in tcx.body_owners() {\n+        for def_id in tcx.hir().body_owners() {\n             tcx.ensure().thir_check_unsafety(def_id);\n             if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n                 rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);"}, {"sha": "7d1c63c0645d86def615ee0ca0a5bda5ed92c8aa", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -491,6 +491,17 @@ impl<'hir> Map<'hir> {\n         Some(ccx)\n     }\n \n+    /// Returns an iterator of the `DefId`s for all body-owners in this\n+    /// crate. If you would prefer to iterate over the bodies\n+    /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n+    pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {\n+        self.krate().bodies.keys().map(move |&body_id| self.body_owner_def_id(body_id))\n+    }\n+\n+    pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n+        par_for_each_in(&self.krate().bodies, |(&body_id, _)| f(self.body_owner_def_id(body_id)));\n+    }\n+\n     pub fn ty_param_owner(&self, id: HirId) -> HirId {\n         match self.get(id) {\n             Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => id,"}, {"sha": "bcd0112f22610b31296f966d348a74e8757e6f31", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -29,10 +29,8 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::Discr;\n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n@@ -1660,18 +1658,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.typeck(self.hir().body_owner_def_id(body))\n     }\n \n-    /// Returns an iterator of the `DefId`s for all body-owners in this\n-    /// crate. If you would prefer to iterate over the bodies\n-    /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n-    pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + Captures<'tcx> + 'tcx {\n-        self.hir().krate().bodies.keys().map(move |&body_id| self.hir().body_owner_def_id(body_id))\n-    }\n-\n-    pub fn par_body_owners<F: Fn(LocalDefId) + sync::Sync + sync::Send>(self, f: F) {\n-        par_iter(&self.hir().krate().bodies)\n-            .for_each(|(&body_id, _)| f(self.hir().body_owner_def_id(body_id)));\n-    }\n-\n     pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {\n         self.associated_items(id)\n             .in_definition_order()"}, {"sha": "b1b31e0784cfe25a7bda8b84b086750a8b84890e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -133,7 +133,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     let mut set = FxHashSet::default();\n \n     // All body-owners have MIR associated with them.\n-    set.extend(tcx.body_owners());\n+    set.extend(tcx.hir().body_owners());\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately."}, {"sha": "8a55f7ebf87bfb5b5ae595b7ad361134f6639926", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -921,9 +921,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n }\n \n fn typeck_item_bodies(tcx: TyCtxt<'_>, (): ()) {\n-    tcx.par_body_owners(|body_owner_def_id| {\n-        tcx.ensure().typeck(body_owner_def_id);\n-    });\n+    tcx.hir().par_body_owners(|body_owner_def_id| tcx.ensure().typeck(body_owner_def_id));\n }\n \n fn fatally_break_rust(sess: &Session) {"}, {"sha": "7b5d782b0cb60f4f29cd12e36f1e8afcaf075f2b", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc57f63ad98436f8a97c710f357e1e45088effc/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=abc57f63ad98436f8a97c710f357e1e45088effc", "patch": "@@ -9,7 +9,7 @@ use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = FxHashSet::default();\n-    for item_def_id in tcx.body_owners() {\n+    for item_def_id in tcx.hir().body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());"}]}