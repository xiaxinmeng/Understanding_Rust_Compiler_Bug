{"sha": "281b79525b31affc7cdf5540e27c629a460cadab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MWI3OTUyNWIzMWFmZmM3Y2RmNTU0MGUyN2M2MjlhNDYwY2FkYWI=", "commit": {"author": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-07-30T01:12:20Z"}, "committer": {"name": "Palmer Cox", "email": "p@lmercox.com", "date": "2013-08-02T22:49:00Z"}, "message": "Crypto: Add large input tests for all Digests\n\nCreate a helper function in cryptoutil.rs which feeds 1,000,000 'a's into\na Digest with varying input sizes and then checks the result. This is\nessentially the same as one of Sha1's existing tests, so, that test was\nre-implemented using this method. New tests were added using this method for\nSha512 and Sha256.", "tree": {"sha": "409f602335a6179a98095d2849d91a391b99faaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/409f602335a6179a98095d2849d91a391b99faaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/281b79525b31affc7cdf5540e27c629a460cadab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/281b79525b31affc7cdf5540e27c629a460cadab", "html_url": "https://github.com/rust-lang/rust/commit/281b79525b31affc7cdf5540e27c629a460cadab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/281b79525b31affc7cdf5540e27c629a460cadab/comments", "author": null, "committer": null, "parents": [{"sha": "2cbe312343a31127de9d8e28f7b4ce04bc48768c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbe312343a31127de9d8e28f7b4ce04bc48768c", "html_url": "https://github.com/rust-lang/rust/commit/2cbe312343a31127de9d8e28f7b4ce04bc48768c"}], "stats": {"total": 84, "additions": 63, "deletions": 21}, "files": [{"sha": "33ab6a9bcb96db379cdb938134562ba01cc12bda", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/281b79525b31affc7cdf5540e27c629a460cadab/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281b79525b31affc7cdf5540e27c629a460cadab/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=281b79525b31affc7cdf5540e27c629a460cadab", "patch": "@@ -241,3 +241,36 @@ impl <T: FixedBuffer> StandardPadding for T {\n         self.zero_until(size - rem);\n     }\n }\n+\n+\n+#[cfg(test)]\n+mod test {\n+    use std::rand::IsaacRng;\n+    use std::rand::RngUtil;\n+    use std::vec;\n+\n+    use digest::Digest;\n+\n+    /// Feed 1,000,000 'a's into the digest with varying input sizes and check that the result is\n+    /// correct.\n+    pub fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: uint, expected: &str) {\n+        let total_size = 1000000;\n+        let buffer = vec::from_elem(blocksize * 2, 'a' as u8);\n+        let mut rng = IsaacRng::new_unseeded();\n+        let mut count = 0;\n+\n+        digest.reset();\n+\n+        while count < total_size {\n+            let next: uint = rng.gen_uint_range(0, 2 * blocksize + 1);\n+            let remaining = total_size - count;\n+            let size = if next > remaining { remaining } else { next };\n+            digest.input(buffer.slice_to(size));\n+            count += size;\n+        }\n+\n+        let result_str = digest.result_str();\n+\n+        assert!(expected == result_str);\n+    }\n+}"}, {"sha": "0172f6af18e8d095c7b6584aaf1a61551b3bb203", "filename": "src/libextra/crypto/sha1.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/281b79525b31affc7cdf5540e27c629a460cadab/src%2Flibextra%2Fcrypto%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281b79525b31affc7cdf5540e27c629a460cadab/src%2Flibextra%2Fcrypto%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha1.rs?ref=281b79525b31affc7cdf5540e27c629a460cadab", "patch": "@@ -240,7 +240,7 @@ impl Digest for Sha1 {\n \n #[cfg(test)]\n mod tests {\n-\n+    use cryptoutil::test::test_digest_1million_random;\n     use digest::Digest;\n     use sha1::Sha1;\n \n@@ -253,15 +253,6 @@ mod tests {\n \n     #[test]\n     fn test() {\n-        fn a_million_letter_a() -> ~str {\n-            let mut i = 0;\n-            let mut rs = ~\"\";\n-            while i < 100000 {\n-                rs.push_str(\"aaaaaaaaaa\");\n-                i += 1;\n-            }\n-            return rs;\n-        }\n         // Test messages from FIPS 180-1\n \n         let fips_180_1_tests = ~[\n@@ -289,17 +280,6 @@ mod tests {\n                 ],\n                 output_str: ~\"84983e441c3bd26ebaae4aa1f95129e5e54670f1\"\n             },\n-            Test {\n-                input: a_million_letter_a(),\n-                output: ~[\n-                    0x34u8, 0xAAu8, 0x97u8, 0x3Cu8,\n-                    0xD4u8, 0xC4u8, 0xDAu8, 0xA4u8,\n-                    0xF6u8, 0x1Eu8, 0xEBu8, 0x2Bu8,\n-                    0xDBu8, 0xADu8, 0x27u8, 0x31u8,\n-                    0x65u8, 0x34u8, 0x01u8, 0x6Fu8,\n-                ],\n-                output_str: ~\"34aa973cd4c4daa4f61eeb2bdbad27316534016f\"\n-            },\n         ];\n         // Examples from wikipedia\n \n@@ -366,6 +346,15 @@ mod tests {\n             sh.reset();\n         }\n     }\n+\n+    #[test]\n+    fn test_1million_random_sha1() {\n+        let mut sh = Sha1::new();\n+        test_digest_1million_random(\n+            &mut sh,\n+            64,\n+            \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\");\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "b91a54efc92845b3f5895630b9fe77e8a0433551", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/281b79525b31affc7cdf5540e27c629a460cadab/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281b79525b31affc7cdf5540e27c629a460cadab/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=281b79525b31affc7cdf5540e27c629a460cadab", "patch": "@@ -756,6 +756,7 @@ static H224: [u32, ..8] = [\n \n #[cfg(test)]\n mod tests {\n+    use cryptoutil::test::test_digest_1million_random;\n     use digest::Digest;\n     use sha2::{Sha512, Sha384, Sha512Trunc256, Sha512Trunc224, Sha256, Sha224};\n \n@@ -947,6 +948,25 @@ mod tests {\n \n         test_hash(sh, tests);\n     }\n+\n+    #[test]\n+    fn test_1million_random_sha512() {\n+        let mut sh = Sha512::new();\n+        test_digest_1million_random(\n+            &mut sh,\n+            128,\n+            \"e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973eb\" +\n+            \"de0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b\");\n+        }\n+\n+    #[test]\n+    fn test_1million_random_sha256() {\n+        let mut sh = Sha256::new();\n+        test_digest_1million_random(\n+            &mut sh,\n+            64,\n+            \"cdc76e5c9914fb9281a1c7e284d73e67f1809a48a497200e046d39ccc7112cd0\");\n+    }\n }\n \n "}]}