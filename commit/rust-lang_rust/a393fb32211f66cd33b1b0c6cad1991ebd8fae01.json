{"sha": "a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTNmYjMyMjExZjY2Y2QzM2IxYjBjNmNhZDE5OTFlYmQ4ZmFlMDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-14T07:18:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-14T19:24:09Z"}, "message": "rt: Maintain stack ptrs correctly when returning from stack switches", "tree": {"sha": "f7e08611083fe5ecec74d432c0f87fc5045a2985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e08611083fe5ecec74d432c0f87fc5045a2985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "html_url": "https://github.com/rust-lang/rust/commit/a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214cdd0deeab903df5b8b1b4b853a6f6f5e6cb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/214cdd0deeab903df5b8b1b4b853a6f6f5e6cb7d", "html_url": "https://github.com/rust-lang/rust/commit/214cdd0deeab903df5b8b1b4b853a6f6f5e6cb7d"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "13cede08c72879a5ea1a12720731401f8956617d", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "patch": "@@ -231,6 +231,7 @@ rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n     // Too expensive to check\n     // I(thread, on_rust_stack());\n \n+    uintptr_t prev_rust_sp = next_rust_sp;\n     next_rust_sp = get_sp();\n \n     bool borrowed_a_c_stack = false;\n@@ -251,6 +252,8 @@ rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n     if (borrowed_a_c_stack) {\n         return_c_stack();\n     }\n+\n+    next_rust_sp = prev_rust_sp;\n }\n \n inline void\n@@ -259,11 +262,14 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     // I(thread, !on_rust_stack());\n     I(thread, next_rust_sp);\n \n+    uintptr_t prev_c_sp = next_c_sp;\n     next_c_sp = get_sp();\n \n     uintptr_t sp = sanitize_next_sp(next_rust_sp);\n \n     __morestack(args, fn_ptr, sp);\n+\n+    next_c_sp = prev_c_sp;\n }\n \n inline void"}, {"sha": "b20e6c3fd7685367ca1c13784f334eb07535566e", "filename": "src/test/run-pass/crust-call-deep2.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/src%2Ftest%2Frun-pass%2Fcrust-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/src%2Ftest%2Frun-pass%2Fcrust-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-call-deep2.rs?ref=a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "patch": "@@ -0,0 +1,27 @@\n+native mod rustrt {\n+    fn rust_dbg_call(cb: *u8,\n+                     data: ctypes::uintptr_t) -> ctypes::uintptr_t;\n+}\n+\n+crust fn cb(data: ctypes::uintptr_t) -> ctypes::uintptr_t {\n+    if data == 1u {\n+        data\n+    } else {\n+        count(data - 1u) + 1u\n+    }\n+}\n+\n+fn count(n: uint) -> uint {\n+    #debug(\"n = %?\", n);\n+    rustrt::rust_dbg_call(cb, n)\n+}\n+\n+fn main() {\n+    // Make sure we're on a task with small Rust stacks (main currently\n+    // has a large stack)\n+    task::spawn {||\n+        let result = count(1000u);\n+        #debug(\"result = %?\", result);\n+        assert result == 1000u;\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "f3b01e6b29b42ca656516109470c7b79e7eec59b", "filename": "src/test/run-pass/crust-call-scrub.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/src%2Ftest%2Frun-pass%2Fcrust-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a393fb32211f66cd33b1b0c6cad1991ebd8fae01/src%2Ftest%2Frun-pass%2Fcrust-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-call-scrub.rs?ref=a393fb32211f66cd33b1b0c6cad1991ebd8fae01", "patch": "@@ -0,0 +1,31 @@\n+// This time we're testing repeatedly going up and down both stacks to\n+// make sure the stack pointers are maintained properly in both\n+// directions\n+\n+native mod rustrt {\n+    fn rust_dbg_call(cb: *u8,\n+                     data: ctypes::uintptr_t) -> ctypes::uintptr_t;\n+}\n+\n+crust fn cb(data: ctypes::uintptr_t) -> ctypes::uintptr_t {\n+    if data == 1u {\n+        data\n+    } else {\n+        count(data - 1u) + count(data - 1u)\n+    }\n+}\n+\n+fn count(n: uint) -> uint {\n+    #debug(\"n = %?\", n);\n+    rustrt::rust_dbg_call(cb, n)\n+}\n+\n+fn main() {\n+    // Make sure we're on a task with small Rust stacks (main currently\n+    // has a large stack)\n+    task::spawn {||\n+        let result = count(12u);\n+        #debug(\"result = %?\", result);\n+        assert result == 2048u;\n+    };\n+}\n\\ No newline at end of file"}]}