{"sha": "f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMTQwYTMzMTc2YTVmYjJlOTFlMjZlYTNhZTQyYTgzNGRkOWJmZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-08T23:02:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-08T23:02:30Z"}, "message": "Auto merge of #41515 - eddyb:non-static-assoc-const, r=nikomatsakis\n\nrustc: treat const bodies like fn bodies in middle::region.\n\nAllows `T::ASSOC_CONST` to be used without a `T: 'static` bound.\n\ncc @rust-lang/compiler @rust-lang/lang", "tree": {"sha": "34797e9c35707beed61b324b47d88c9dc182b17e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34797e9c35707beed61b324b47d88c9dc182b17e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "html_url": "https://github.com/rust-lang/rust/commit/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20de961226de41a18ca1d9b166c6bc607f3a597a", "url": "https://api.github.com/repos/rust-lang/rust/commits/20de961226de41a18ca1d9b166c6bc607f3a597a", "html_url": "https://github.com/rust-lang/rust/commit/20de961226de41a18ca1d9b166c6bc607f3a597a"}, {"sha": "90af729a97e8266ffa4453f9941e90dae22f8728", "url": "https://api.github.com/repos/rust-lang/rust/commits/90af729a97e8266ffa4453f9941e90dae22f8728", "html_url": "https://github.com/rust-lang/rust/commit/90af729a97e8266ffa4453f9941e90dae22f8728"}], "stats": {"total": 253, "additions": 103, "deletions": 150}, "files": [{"sha": "836d9775a3f69b7f5292897801ec0eb30b85310d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -140,23 +140,6 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'v> : Sized {\n-    /// Invokes the suitable visitor method for the given `Node`\n-    /// extracted from the hir map.\n-    fn visit_hir_map_node(&mut self, node: map::Node<'v>) {\n-        match node {\n-            map::NodeItem(a) => self.visit_item(a),\n-            map::NodeForeignItem(a) => self.visit_foreign_item(a),\n-            map::NodeTraitItem(a) => self.visit_trait_item(a),\n-            map::NodeImplItem(a) => self.visit_impl_item(a),\n-            map::NodeExpr(a) => self.visit_expr(a),\n-            map::NodeStmt(a) => self.visit_stmt(a),\n-            map::NodeTy(a) => self.visit_ty(a),\n-            map::NodePat(a) => self.visit_pat(a),\n-            map::NodeBlock(a) => self.visit_block(a),\n-            _ => bug!(\"Visitor::visit_hir_map_node() not yet impl for node `{:?}`\", node)\n-        }\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n "}, {"sha": "c715484a934df37afc1ed353c9cc0fd73cbff14b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -442,27 +442,36 @@ impl<'hir> Map<'hir> {\n         self.local_def_id(self.body_owner(id))\n     }\n \n-    /// Given a body owner's id, returns the `BodyId` associated with it.\n-    pub fn body_owned_by(&self, id: NodeId) -> BodyId {\n+    /// Given a node id, returns the `BodyId` associated with it,\n+    /// if the node is a body owner, otherwise returns `None`.\n+    pub fn maybe_body_owned_by(&self, id: NodeId) -> Option<BodyId> {\n         if let Some(entry) = self.find_entry(id) {\n             if let Some(body_id) = entry.associated_body() {\n                 // For item-like things and closures, the associated\n                 // body has its own distinct id, and that is returned\n                 // by `associated_body`.\n-                body_id\n+                Some(body_id)\n             } else {\n                 // For some expressions, the expression is its own body.\n                 if let EntryExpr(_, expr) = entry {\n-                    BodyId { node_id: expr.id }\n+                    Some(BodyId { node_id: expr.id })\n                 } else {\n-                    span_bug!(self.span(id), \"id `{}` has no associated body: {:?}\", id, entry);\n+                    None\n                 }\n             }\n         } else {\n             bug!(\"no entry for id `{}`\", id)\n         }\n     }\n \n+    /// Given a body owner's id, returns the `BodyId` associated with it.\n+    pub fn body_owned_by(&self, id: NodeId) -> BodyId {\n+        self.maybe_body_owned_by(id).unwrap_or_else(|| {\n+            span_bug!(self.span(id), \"body_owned_by: {} has no associated body\",\n+                      self.node_to_string(id));\n+        })\n+    }\n+\n     pub fn ty_param_owner(&self, id: NodeId) -> NodeId {\n         match self.get(id) {\n             NodeItem(&Item { node: ItemTrait(..), .. }) => id,"}, {"sha": "087ab4b94da3d254f2678bd6011748de0b197106", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 65, "deletions": 95, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -24,14 +24,16 @@ use std::mem;\n use std::rc::Rc;\n use serialize;\n use syntax::codemap;\n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax_pos::Span;\n use ty::TyCtxt;\n use ty::maps::Providers;\n \n-use hir; use hir::def_id::DefId;\n-use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n-use hir::{Block, Item, FnDecl, Arm, Pat, PatKind, Stmt, Expr, Local};\n+use hir;\n+use hir::def_id::DefId;\n+use hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use hir::{Block, Arm, Pat, PatKind, Stmt, Expr, Local};\n+use mir::transform::MirSource;\n \n pub type CodeExtent<'tcx> = &'tcx CodeExtentData;\n \n@@ -811,7 +813,17 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n         }\n     }\n \n-    intravisit::walk_expr(visitor, expr);\n+    match expr.node {\n+        // Manually recurse over closures, because they are the only\n+        // case of nested bodies that share the parent environment.\n+        hir::ExprClosure(.., body, _) => {\n+            let body = visitor.tcx.hir.body(body);\n+            visitor.visit_body(body);\n+        }\n+\n+        _ => intravisit::walk_expr(visitor, expr)\n+    }\n+\n     visitor.cx = prev_cx;\n }\n \n@@ -1041,74 +1053,6 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n     }\n }\n \n-fn resolve_item_like<'a, 'tcx, F>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, walk: F)\n-    where F: FnOnce(&mut RegionResolutionVisitor<'a, 'tcx>)\n-{\n-    // Items create a new outer block scope as far as we're concerned.\n-    let prev_cx = visitor.cx;\n-    let prev_ts = mem::replace(&mut visitor.terminating_scopes, NodeSet());\n-    visitor.cx = Context {\n-        root_id: None,\n-        var_parent: None,\n-        parent: None,\n-    };\n-    walk(visitor);\n-    visitor.cx = prev_cx;\n-    visitor.terminating_scopes = prev_ts;\n-}\n-\n-fn resolve_fn<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n-                        kind: FnKind<'tcx>,\n-                        decl: &'tcx hir::FnDecl,\n-                        body_id: hir::BodyId,\n-                        sp: Span,\n-                        id: ast::NodeId) {\n-    visitor.cx.parent = Some(visitor.new_code_extent(\n-        CodeExtentData::CallSiteScope { fn_id: id, body_id: body_id.node_id }));\n-\n-    debug!(\"region::resolve_fn(id={:?}, \\\n-            span={:?}, \\\n-            body.id={:?}, \\\n-            cx.parent={:?})\",\n-           id,\n-           visitor.tcx.sess.codemap().span_to_string(sp),\n-           body_id,\n-           visitor.cx.parent);\n-\n-    let fn_decl_scope = visitor.new_code_extent(\n-        CodeExtentData::ParameterScope { fn_id: id, body_id: body_id.node_id });\n-\n-    if let Some(root_id) = visitor.cx.root_id {\n-        visitor.region_maps.record_fn_parent(body_id.node_id, root_id);\n-    }\n-\n-    let outer_cx = visitor.cx;\n-    let outer_ts = mem::replace(&mut visitor.terminating_scopes, NodeSet());\n-    visitor.terminating_scopes.insert(body_id.node_id);\n-\n-    // The arguments and `self` are parented to the fn.\n-    visitor.cx = Context {\n-        root_id: Some(body_id.node_id),\n-        parent: None,\n-        var_parent: Some(fn_decl_scope),\n-    };\n-\n-    intravisit::walk_fn_decl(visitor, decl);\n-    intravisit::walk_fn_kind(visitor, kind);\n-\n-    // The body of the every fn is a root scope.\n-    visitor.cx = Context {\n-        root_id: Some(body_id.node_id),\n-        parent: Some(fn_decl_scope),\n-        var_parent: Some(fn_decl_scope),\n-    };\n-    visitor.visit_nested_body(body_id);\n-\n-    // Restore context we had at the start.\n-    visitor.cx = outer_cx;\n-    visitor.terminating_scopes = outer_ts;\n-}\n-\n impl<'a, 'tcx> RegionResolutionVisitor<'a, 'tcx> {\n     pub fn intern_code_extent(&mut self,\n                               data: CodeExtentData,\n@@ -1152,29 +1096,57 @@ impl<'a, 'tcx> RegionResolutionVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::OnlyBodies(&self.map)\n+        NestedVisitorMap::None\n     }\n \n     fn visit_block(&mut self, b: &'tcx Block) {\n         resolve_block(self, b);\n     }\n \n-    fn visit_item(&mut self, i: &'tcx Item) {\n-        resolve_item_like(self, |this| intravisit::walk_item(this, i));\n-    }\n+    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+        let body_id = body.id();\n+        let owner_id = self.map.body_owner(body_id);\n \n-    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n-        resolve_item_like(self, |this| intravisit::walk_impl_item(this, ii));\n-    }\n+        debug!(\"visit_body(id={:?}, span={:?}, body.id={:?}, cx.parent={:?})\",\n+               owner_id,\n+               self.tcx.sess.codemap().span_to_string(body.value.span),\n+               body_id,\n+               self.cx.parent);\n \n-    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n-        resolve_item_like(self, |this| intravisit::walk_trait_item(this, ti));\n-    }\n+        let outer_cx = self.cx;\n+        let outer_ts = mem::replace(&mut self.terminating_scopes, NodeSet());\n \n-    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx FnDecl,\n-                b: hir::BodyId, s: Span, n: NodeId) {\n-        resolve_fn(self, fk, fd, b, s, n);\n+        // Only functions have an outer terminating (drop) scope,\n+        // while temporaries in constant initializers are 'static.\n+        if let MirSource::Fn(_) = MirSource::from_node(self.tcx, owner_id) {\n+            self.terminating_scopes.insert(body_id.node_id);\n+        }\n+\n+        if let Some(root_id) = self.cx.root_id {\n+            self.region_maps.record_fn_parent(body_id.node_id, root_id);\n+        }\n+        self.cx.root_id = Some(body_id.node_id);\n+\n+        self.cx.parent = Some(self.new_code_extent(\n+            CodeExtentData::CallSiteScope { fn_id: owner_id, body_id: body_id.node_id }));\n+        self.cx.parent = Some(self.new_code_extent(\n+            CodeExtentData::ParameterScope { fn_id: owner_id, body_id: body_id.node_id }));\n+\n+        // The arguments and `self` are parented to the fn.\n+        self.cx.var_parent = self.cx.parent.take();\n+        for argument in &body.arguments {\n+            self.visit_pat(&argument.pat);\n+        }\n+\n+        // The body of the every fn is a root scope.\n+        self.cx.parent = self.cx.var_parent;\n+        self.visit_expr(&body.value);\n+\n+        // Restore context we had at the start.\n+        self.cx = outer_cx;\n+        self.terminating_scopes = outer_ts;\n     }\n+\n     fn visit_arm(&mut self, a: &'tcx Arm) {\n         resolve_arm(self, a);\n     }\n@@ -1192,21 +1164,18 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n     }\n }\n \n-fn region_maps<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_id: DefId)\n+fn region_maps<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     -> Rc<RegionMaps<'tcx>>\n {\n-    let closure_base_def_id = tcx.closure_base_def_id(fn_id);\n-    if closure_base_def_id != fn_id {\n+    let closure_base_def_id = tcx.closure_base_def_id(def_id);\n+    if closure_base_def_id != def_id {\n         return tcx.region_maps(closure_base_def_id);\n     }\n \n     let mut maps = RegionMaps::new();\n \n-    let fn_node_id = tcx.hir.as_local_node_id(fn_id)\n-                            .expect(\"fn DefId should be for LOCAL_CRATE\");\n-    let node = tcx.hir.get(fn_node_id);\n-\n-    {\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    if let Some(body) = tcx.hir.maybe_body_owned_by(id) {\n         let mut visitor = RegionResolutionVisitor {\n             tcx: tcx,\n             region_maps: &mut maps,\n@@ -1218,7 +1187,8 @@ fn region_maps<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_id: DefId)\n             },\n             terminating_scopes: NodeSet(),\n         };\n-        visitor.visit_hir_map_node(node);\n+\n+        visitor.visit_body(tcx.hir.body(body));\n     }\n \n     Rc::new(maps)"}, {"sha": "99a5f6325ac7515242f3c9322af7ded3fb295b8c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -1238,7 +1238,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n         match tcx.hir.find(id) {\n             Some(hir_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n-                    hir::ImplItemKind::Type(_) | hir::ImplItemKind::Const(..) => {\n+                    hir::ImplItemKind::Type(_) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the impl\n                         let impl_id = tcx.hir.get_parent(id);\n@@ -1247,7 +1247,8 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                                                             impl_def_id,\n                                                             Some(tcx.item_extent(id)))\n                     }\n-                    hir::ImplItemKind::Method(_, ref body) => {\n+                    hir::ImplItemKind::Const(_, body) |\n+                    hir::ImplItemKind::Method(_, body) => {\n                         tcx.construct_parameter_environment(\n                             impl_item.span,\n                             tcx.hir.local_def_id(id),\n@@ -1257,56 +1258,37 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(hir_map::NodeTraitItem(trait_item)) => {\n                 match trait_item.node {\n-                    hir::TraitItemKind::Type(..) | hir::TraitItemKind::Const(..) => {\n-                        // associated types don't have their own entry (for some reason),\n-                        // so for now just grab environment for the trait\n-                        let trait_id = tcx.hir.get_parent(id);\n-                        let trait_def_id = tcx.hir.local_def_id(trait_id);\n+                    hir::TraitItemKind::Type(..) |\n+                    hir::TraitItemKind::Const(_, None) |\n+                    hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))=> {\n                         tcx.construct_parameter_environment(trait_item.span,\n-                                                            trait_def_id,\n+                                                            tcx.hir.local_def_id(id),\n                                                             Some(tcx.item_extent(id)))\n                     }\n-                    hir::TraitItemKind::Method(_, ref body) => {\n-                        // Use call-site for extent (unless this is a\n-                        // trait method with no default; then fallback\n-                        // to the method id).\n-                        let extent = if let hir::TraitMethod::Provided(body_id) = *body {\n-                            // default impl: use call_site extent as free_id_outlive bound.\n-                            tcx.call_site_extent(id, body_id.node_id)\n-                        } else {\n-                            // no default impl: use item extent as free_id_outlive bound.\n-                            tcx.item_extent(id)\n-                        };\n+                    hir::TraitItemKind::Const(_, Some(body)) |\n+                    hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body)) => {\n                         tcx.construct_parameter_environment(\n                             trait_item.span,\n                             tcx.hir.local_def_id(id),\n-                            Some(extent))\n+                            Some(tcx.call_site_extent(id, body.node_id)))\n                     }\n                 }\n             }\n             Some(hir_map::NodeItem(item)) => {\n                 match item.node {\n-                    hir::ItemFn(.., body_id) => {\n-                        // We assume this is a function.\n-                        let fn_def_id = tcx.hir.local_def_id(id);\n-\n+                    hir::ItemConst(_, body) |\n+                    hir::ItemStatic(.., body) |\n+                    hir::ItemFn(.., body) => {\n                         tcx.construct_parameter_environment(\n                             item.span,\n-                            fn_def_id,\n-                            Some(tcx.call_site_extent(id, body_id.node_id)))\n+                            tcx.hir.local_def_id(id),\n+                            Some(tcx.call_site_extent(id, body.node_id)))\n                     }\n                     hir::ItemEnum(..) |\n                     hir::ItemStruct(..) |\n                     hir::ItemUnion(..) |\n                     hir::ItemTy(..) |\n                     hir::ItemImpl(..) |\n-                    hir::ItemConst(..) |\n-                    hir::ItemStatic(..) => {\n-                        let def_id = tcx.hir.local_def_id(id);\n-                        tcx.construct_parameter_environment(item.span,\n-                                                            def_id,\n-                                                            Some(tcx.item_extent(id)))\n-                    }\n                     hir::ItemTrait(..) => {\n                         let def_id = tcx.hir.local_def_id(id);\n                         tcx.construct_parameter_environment(item.span,"}, {"sha": "b276589f0c47b1ed0b4136853d07799664f34238", "filename": "src/test/run-pass/associated-const-type-parameters.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -27,6 +27,12 @@ impl Foo for Def {\n     const X: i32 = 97;\n }\n \n+struct Proxy<T>(T);\n+\n+impl<T: Foo> Foo for Proxy<T> {\n+    const X: i32 = T::X;\n+}\n+\n fn sub<A: Foo, B: Foo>() -> i32 {\n     A::X - B::X\n }\n@@ -38,4 +44,7 @@ fn main() {\n     assert_eq!(97, Def::get_x());\n     assert_eq!(-86, sub::<Abc, Def>());\n     assert_eq!(86, sub::<Def, Abc>());\n+    assert_eq!(-86, sub::<Proxy<Abc>, Def>());\n+    assert_eq!(-86, sub::<Abc, Proxy<Def>>());\n+    assert_eq!(86, sub::<Proxy<Def>, Proxy<Abc>>());\n }"}]}