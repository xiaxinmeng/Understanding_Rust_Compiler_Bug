{"sha": "abd64d7c054ece769abff0cd90374789f2ecf639", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDY0ZDdjMDU0ZWNlNzY5YWJmZjBjZDkwMzc0Nzg5ZjJlY2Y2Mzk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-10-28T13:45:21Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-10-28T22:35:11Z"}, "message": "add a couple of ICE testcases\n\nFixes #6250\nFixes #6251\nFixes #6252\nFixes #6255\nFixes #6256", "tree": {"sha": "6dcdc2cb06f00572a84a8b237ea8753e5fe8fc6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dcdc2cb06f00572a84a8b237ea8753e5fe8fc6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd64d7c054ece769abff0cd90374789f2ecf639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd64d7c054ece769abff0cd90374789f2ecf639", "html_url": "https://github.com/rust-lang/rust/commit/abd64d7c054ece769abff0cd90374789f2ecf639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd64d7c054ece769abff0cd90374789f2ecf639/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645ef505da378b6f810b1567806d1bcc2856395f", "url": "https://api.github.com/repos/rust-lang/rust/commits/645ef505da378b6f810b1567806d1bcc2856395f", "html_url": "https://github.com/rust-lang/rust/commit/645ef505da378b6f810b1567806d1bcc2856395f"}], "stats": {"total": 239, "additions": 239, "deletions": 0}, "files": [{"sha": "c33580ff6ab6aa52182c5527b70523b45904550e", "filename": "tests/ui/crashes/ice-6250.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6250.rs?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,16 @@\n+// originally from glacier/fixed/77218.rs\n+// ice while adjusting...\n+\n+pub struct Cache {\n+    data: Vec<i32>,\n+}\n+\n+pub fn list_data(cache: &Cache, key: usize) {\n+    for reference in vec![1, 2, 3] {\n+        if\n+        /* let */\n+        Some(reference) = cache.data.get(key) {\n+            unimplemented!()\n+        }\n+    }\n+}"}, {"sha": "8241dcd8feb7ba1d3a5142a900cc7bcb5ac478d6", "filename": "tests/ui/crashes/ice-6250.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6250.stderr?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,27 @@\n+error[E0601]: `main` function not found in crate `ice_6250`\n+  --> $DIR/ice-6250.rs:4:1\n+   |\n+LL | / pub struct Cache {\n+LL | |     data: Vec<i32>,\n+LL | | }\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/ice-6250.rs`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ice-6250.rs:12:9\n+   |\n+LL |         Some(reference) = cache.data.get(key) {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |         let Some(reference) = cache.data.get(key) {\n+   |         ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0601.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "6aa779aaeb3b660a18aaa6acefa9e70790628087", "filename": "tests/ui/crashes/ice-6251.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6251.rs?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,6 @@\n+// originally from glacier/fixed/77329.rs\n+// assertion failed: `(left == right) ; different DefIds\n+\n+fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+    std::iter::empty()\n+}"}, {"sha": "9a7cf4b0919f63bf7ca195bb240852dafd8a6880", "filename": "tests/ui/crashes/ice-6251.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,43 @@\n+error[E0601]: `main` function not found in crate `ice_6251`\n+  --> $DIR/ice-6251.rs:4:1\n+   |\n+LL | / fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+LL | |     std::iter::empty()\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/ice-6251.rs`\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/ice-6251.rs:4:45\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+   |                                             ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |&x: [u8]| x }]> {\n+   |                                             ^\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/ice-6251.rs:4:54\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+   |                                                      ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ice-6251.rs:4:44\n+   |\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n+   |                                            ^^^^^^^^^^^ expected `usize`, found closure\n+   |\n+   = note: expected type `usize`\n+           found closure `[closure@$DIR/ice-6251.rs:4:44: 4:55]`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308, E0601.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "2e3d9fd1e9240ed097512ca6216325968fa4c078", "filename": "tests/ui/crashes/ice-6252.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.rs?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,15 @@\n+// originally from glacier fixed/77919.rs\n+// encountered errors resolving bounds after type-checking\n+\n+trait TypeVal<T> {\n+    const VAL: T;\n+}\n+struct Five;\n+struct Multiply<N, M> {\n+    _n: PhantomData,\n+}\n+impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+\n+fn main() {\n+    [1; <Multiply<Five, Five>>::VAL];\n+}"}, {"sha": "440973e24398e15a7299e2a7d758b814b1673a12", "filename": "tests/ui/crashes/ice-6252.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,46 @@\n+error[E0412]: cannot find type `PhantomData` in this scope\n+  --> $DIR/ice-6252.rs:9:9\n+   |\n+LL |     _n: PhantomData,\n+   |         ^^^^^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::marker::PhantomData;\n+   |\n+\n+error[E0412]: cannot find type `VAL` in this scope\n+  --> $DIR/ice-6252.rs:11:63\n+   |\n+LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   |          -                                                    ^^^ not found in this scope\n+   |          |\n+   |          help: you might be missing a type parameter: `, VAL`\n+\n+error[E0046]: not all trait items implemented, missing: `VAL`\n+  --> $DIR/ice-6252.rs:11:1\n+   |\n+LL |     const VAL: T;\n+   |     ------------- `VAL` from trait\n+...\n+LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ice-6252.rs:5:5\n+   |\n+LL |     const VAL: T;\n+   |     ^^^^^^^^^^^^^ no MIR body is available for DefId(0:5 ~ ice_6252[317d]::TypeVal::VAL)\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ice-6252.rs:14:9\n+   |\n+LL |     [1; <Multiply<Five, Five>>::VAL];\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0046, E0080, E0412.\n+For more information about an error, try `rustc --explain E0046`."}, {"sha": "c19eca43884aa41ca412259f971fce4d357504bb", "filename": "tests/ui/crashes/ice-6254.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.rs?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,15 @@\n+// originally from ./src/test/ui/pattern/usefulness/consts-opaque.rs\n+// panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())',\n+// compiler/rustc_mir_build/src/thir/pattern/_match.rs:2030:5\n+\n+#[derive(PartialEq)]\n+struct Foo(i32);\n+const FOO_REF_REF: &&Foo = &&Foo(42);\n+\n+fn main() {\n+    // This used to cause an ICE (https://github.com/rust-lang/rust/issues/78071)\n+    match FOO_REF_REF {\n+        FOO_REF_REF => {},\n+        Foo(_) => {},\n+    }\n+}"}, {"sha": "95ebf23d81817a9fad386d3d254f5274be17dbef", "filename": "tests/ui/crashes/ice-6254.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,12 @@\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/ice-6254.rs:12:9\n+   |\n+LL |         FOO_REF_REF => {},\n+   |         ^^^^^^^^^^^\n+   |\n+   = note: `-D indirect-structural-match` implied by `-D warnings`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+\n+error: aborting due to previous error\n+"}, {"sha": "bd4a81d98e2e7c8b5a84e5329a2e2927acc83c18", "filename": "tests/ui/crashes/ice-6255.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.rs?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,15 @@\n+// originally from rustc ./src/test/ui/macros/issue-78325-inconsistent-resolution.rs\n+// inconsistent resolution for a macro\n+\n+macro_rules! define_other_core {\n+    ( ) => {\n+        extern crate std as core;\n+        //~^ ERROR macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+    };\n+}\n+\n+fn main() {\n+    core::panic!();\n+}\n+\n+define_other_core!();"}, {"sha": "d973ea1e23a259951b14e471c63bbee6f58fa3bf", "filename": "tests/ui/crashes/ice-6255.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.stderr?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,13 @@\n+error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+  --> $DIR/ice-6255.rs:6:9\n+   |\n+LL |         extern crate std as core;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | define_other_core!();\n+   | --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f60d45d68a8ee277123ab8f6a07dff260fe7ee7", "filename": "tests/ui/crashes/ice-6256.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.rs?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,13 @@\n+// originally from rustc ./src/test/ui/regions/issue-78262.rs\n+// ICE: to get the signature of a closure, use substs.as_closure().sig() not fn_sig()\n+\n+trait TT {}\n+\n+impl dyn TT {\n+    fn func(&self) {}\n+}\n+\n+fn main() {\n+    let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n+                                   //[nll]~^ ERROR: borrowed data escapes outside of closure\n+}"}, {"sha": "0e8353a418a87b002465bb435fe828acc664ebb3", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd64d7c054ece769abff0cd90374789f2ecf639/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=abd64d7c054ece769abff0cd90374789f2ecf639", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/ice-6256.rs:11:28\n+   |\n+LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n+   |                            ^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&(dyn TT + 'static)`\n+              found reference `&dyn TT`\n+note: the anonymous lifetime #1 defined on the body at 11:13...\n+  --> $DIR/ice-6256.rs:11:13\n+   |\n+LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}