{"sha": "4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTNjM2VlZGMxZjY1NzZkNTllMDBmMGRkZGUzYzcwYzk3YmUwNjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-06T10:52:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-06T10:52:57Z"}, "message": "Merge #4341\n\n4341: Move target to AssistLabel r=matklad a=matklad\n\nTarget is used for assists sorting, so we need it before we compute\nthe action.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7922dca3f7c4133e2616257be537428337e479d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7922dca3f7c4133e2616257be537428337e479d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJespcJCRBK7hj4Ov3rIwAAdHIIAAu/eB9JVULbnqz9xSmqTtTE\nOFXxaguEqqwacsKJ2UYL+3Yd648QbE+1yzeOJc4pbI3gLQHM+h1smdMVJxYZWCnu\nKHR/ieIEmoRNowOAvDrCMqcQvw9l0zwP1bDhWedo8lGoma9Zh/QzfK0sSI9otnxT\nq6Iy2IIOKJFWz6FK/wMIvhoT0013t26FxMW744+aUeWrxjjt4eyh9rWRTmjw9o5v\nI7hrMFJPUfcNRkL/m/Zp9ele+r3qx2oXY9ThC0czMqRnlkSN+0CvnIN5u2/n/Gwf\noli6ikF8lirmnDUDEhuz9uuddVfI+zOVjl+4NglBlLj4GXOysM8mLRbU60zs4H0=\n=0T9i\n-----END PGP SIGNATURE-----\n", "payload": "tree 7922dca3f7c4133e2616257be537428337e479d6\nparent ede8906844e206f252810d58533538cf1fb326d4\nparent 233f01c9ba555e5d06f336cb0ff64e7a83e4a23a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588762377 +0000\ncommitter GitHub <noreply@github.com> 1588762377 +0000\n\nMerge #4341\n\n4341: Move target to AssistLabel r=matklad a=matklad\n\nTarget is used for assists sorting, so we need it before we compute\nthe action.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "html_url": "https://github.com/rust-lang/rust/commit/4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede8906844e206f252810d58533538cf1fb326d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede8906844e206f252810d58533538cf1fb326d4", "html_url": "https://github.com/rust-lang/rust/commit/ede8906844e206f252810d58533538cf1fb326d4"}, {"sha": "233f01c9ba555e5d06f336cb0ff64e7a83e4a23a", "url": "https://api.github.com/repos/rust-lang/rust/commits/233f01c9ba555e5d06f336cb0ff64e7a83e4a23a", "html_url": "https://github.com/rust-lang/rust/commit/233f01c9ba555e5d06f336cb0ff64e7a83e4a23a"}], "stats": {"total": 548, "additions": 292, "deletions": 256}, "files": [{"sha": "600e5689cc698ff7c5a58cf948934a7728085a52", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -94,9 +94,10 @@ impl<'a> AssistCtx<'a> {\n         self,\n         id: AssistId,\n         label: impl Into<String>,\n+        target: TextRange,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) -> Option<Assist> {\n-        let label = AssistLabel::new(id, label.into(), None);\n+        let label = AssistLabel::new(id, label.into(), None, target);\n \n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n@@ -152,9 +153,10 @@ impl<'a> AssistGroup<'a> {\n         &mut self,\n         id: AssistId,\n         label: impl Into<String>,\n+        target: TextRange,\n         f: impl FnOnce(&mut ActionBuilder),\n     ) {\n-        let label = AssistLabel::new(id, label.into(), Some(self.group.clone()));\n+        let label = AssistLabel::new(id, label.into(), Some(self.group.clone()), target);\n \n         let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {\n@@ -181,7 +183,6 @@ impl<'a> AssistGroup<'a> {\n pub(crate) struct ActionBuilder<'a, 'b> {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextSize>,\n-    target: Option<TextRange>,\n     file: AssistFile,\n     ctx: &'a AssistCtx<'b>,\n }\n@@ -191,7 +192,6 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         Self {\n             edit: TextEditBuilder::default(),\n             cursor_position: None,\n-            target: None,\n             file: AssistFile::default(),\n             ctx,\n         }\n@@ -237,14 +237,6 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         self.cursor_position = Some(offset)\n     }\n \n-    /// Specify that the assist should be active withing the `target` range.\n-    ///\n-    /// Target ranges are used to sort assists: the smaller the target range,\n-    /// the more specific assist is, and so it should be sorted first.\n-    pub(crate) fn target(&mut self, target: TextRange) {\n-        self.target = Some(target)\n-    }\n-\n     /// Get access to the raw `TextEditBuilder`.\n     pub(crate) fn text_edit_builder(&mut self) -> &mut TextEditBuilder {\n         &mut self.edit\n@@ -267,7 +259,6 @@ impl<'a, 'b> ActionBuilder<'a, 'b> {\n         AssistAction {\n             edit: self.edit.finish(),\n             cursor_position: self.cursor_position,\n-            target: self.target,\n             file: self.file,\n         }\n     }"}, {"sha": "869d4dc045881e35547f59996541ac442d43be1f", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -48,9 +48,8 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n     let label =\n         format!(\"Add custom impl '{}' for '{}'\", trait_token.text().as_str(), annotated_name);\n \n-    ctx.add_assist(AssistId(\"add_custom_impl\"), label, |edit| {\n-        edit.target(attr.syntax().text_range());\n-\n+    let target = attr.syntax().text_range();\n+    ctx.add_assist(AssistId(\"add_custom_impl\"), label, target, |edit| {\n         let new_attr_input = input\n             .syntax()\n             .descendants_with_tokens()"}, {"sha": "2a6bb1caedfea40827e3c1b10dc644bae79a044e", "filename": "crates/ra_assists/src/handlers/add_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_derive.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -27,7 +27,8 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn add_derive(ctx: AssistCtx) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n-    ctx.add_assist(AssistId(\"add_derive\"), \"Add `#[derive]`\", |edit| {\n+    let target = nominal.syntax().text_range();\n+    ctx.add_assist(AssistId(\"add_derive\"), \"Add `#[derive]`\", target, |edit| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())\n@@ -41,7 +42,6 @@ pub(crate) fn add_derive(ctx: AssistCtx) -> Option<Assist> {\n             }\n             Some(tt) => tt.syntax().text_range().end() - TextSize::of(')'),\n         };\n-        edit.target(nominal.syntax().text_range());\n         edit.set_cursor(offset)\n     })\n }"}, {"sha": "a59ec16b2d9ff4b6a2da199c1e0426eed98db93c", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -62,8 +62,8 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n     ctx.add_assist(\n         AssistId(\"add_explicit_type\"),\n         format!(\"Insert explicit type '{}'\", new_type_string),\n+        pat_range,\n         |edit| {\n-            edit.target(pat_range);\n             if let Some(ascribed_ty) = ascribed_ty {\n                 edit.replace(ascribed_ty.syntax().text_range(), new_type_string);\n             } else {"}, {"sha": "81deb3dfa3b89828e56a22ac914c83cfe957dbe2", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -47,9 +47,11 @@ pub(crate) fn add_from_impl_for_enum(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n+    let target = variant.syntax().text_range();\n     ctx.add_assist(\n         AssistId(\"add_from_impl_for_enum\"),\n         \"Add From impl for this enum variant\",\n+        target,\n         |edit| {\n             let start_offset = variant.parent_enum().syntax().text_range().end();\n             let mut buf = String::new();"}, {"sha": "76c0f9783b51aea339f544c7c5e85a74d7e6aab8", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -57,9 +57,9 @@ pub(crate) fn add_function(ctx: AssistCtx) -> Option<Assist> {\n \n     let function_builder = FunctionBuilder::from_call(&ctx, &call, &path, target_module)?;\n \n-    ctx.add_assist(AssistId(\"add_function\"), \"Add function\", |edit| {\n-        edit.target(call.syntax().text_range());\n-\n+    let target = call.syntax().text_range();\n+    // TODO: assert here?\n+    ctx.add_assist(AssistId(\"add_function\"), \"Add function\", target, |edit| {\n         if let Some(function_template) = function_builder.render() {\n             edit.set_file(function_template.file);\n             edit.set_cursor(function_template.cursor_offset);"}, {"sha": "557344ebb808bafe03ef9d2df27711695b11f5a5", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -28,33 +28,40 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n-    ctx.add_assist(AssistId(\"add_impl\"), format!(\"Implement {}\", name.text().as_str()), |edit| {\n-        edit.target(nominal.syntax().text_range());\n-        let type_params = nominal.type_param_list();\n-        let start_offset = nominal.syntax().text_range().end();\n-        let mut buf = String::new();\n-        buf.push_str(\"\\n\\nimpl\");\n-        if let Some(type_params) = &type_params {\n-            format_to!(buf, \"{}\", type_params.syntax());\n-        }\n-        buf.push_str(\" \");\n-        buf.push_str(name.text().as_str());\n-        if let Some(type_params) = type_params {\n-            let lifetime_params = type_params\n-                .lifetime_params()\n-                .filter_map(|it| it.lifetime_token())\n-                .map(|it| it.text().clone());\n-            let type_params =\n-                type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n+    let target = nominal.syntax().text_range();\n+    ctx.add_assist(\n+        AssistId(\"add_impl\"),\n+        format!(\"Implement {}\", name.text().as_str()),\n+        target,\n+        |edit| {\n+            let type_params = nominal.type_param_list();\n+            let start_offset = nominal.syntax().text_range().end();\n+            let mut buf = String::new();\n+            buf.push_str(\"\\n\\nimpl\");\n+            if let Some(type_params) = &type_params {\n+                format_to!(buf, \"{}\", type_params.syntax());\n+            }\n+            buf.push_str(\" \");\n+            buf.push_str(name.text().as_str());\n+            if let Some(type_params) = type_params {\n+                let lifetime_params = type_params\n+                    .lifetime_params()\n+                    .filter_map(|it| it.lifetime_token())\n+                    .map(|it| it.text().clone());\n+                let type_params = type_params\n+                    .type_params()\n+                    .filter_map(|it| it.name())\n+                    .map(|it| it.text().clone());\n \n-            let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n-            format_to!(buf, \"<{}>\", generic_params)\n-        }\n-        buf.push_str(\" {\\n\");\n-        edit.set_cursor(start_offset + TextSize::of(&buf));\n-        buf.push_str(\"\\n}\");\n-        edit.insert(start_offset, buf);\n-    })\n+                let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n+                format_to!(buf, \"<{}>\", generic_params)\n+            }\n+            buf.push_str(\" {\\n\");\n+            edit.set_cursor(start_offset + TextSize::of(&buf));\n+            buf.push_str(\"\\n}\");\n+            edit.insert(start_offset, buf);\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "7df786590904a1516c9f52a7d90972890647c942", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -107,10 +107,10 @@ fn add_missing_impl_members_inner(\n     label: &'static str,\n ) -> Option<Assist> {\n     let _p = ra_prof::profile(\"add_missing_impl_members_inner\");\n-    let impl_node = ctx.find_node_at_offset::<ast::ImplDef>()?;\n-    let impl_item_list = impl_node.item_list()?;\n+    let impl_def = ctx.find_node_at_offset::<ast::ImplDef>()?;\n+    let impl_item_list = impl_def.item_list()?;\n \n-    let trait_ = resolve_target_trait(&ctx.sema, &impl_node)?;\n+    let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n     let def_name = |item: &ast::AssocItem| -> Option<SmolStr> {\n         match item {\n@@ -121,7 +121,7 @@ fn add_missing_impl_members_inner(\n         .map(|it| it.text().clone())\n     };\n \n-    let missing_items = get_missing_assoc_items(&ctx.sema, &impl_node)\n+    let missing_items = get_missing_assoc_items(&ctx.sema, &impl_def)\n         .iter()\n         .map(|i| match i {\n             hir::AssocItem::Function(i) => ast::AssocItem::FnDef(i.source(ctx.db).value),\n@@ -143,13 +143,13 @@ fn add_missing_impl_members_inner(\n     }\n \n     let sema = ctx.sema;\n-\n-    ctx.add_assist(AssistId(assist_id), label, |edit| {\n+    let target = impl_def.syntax().text_range();\n+    ctx.add_assist(AssistId(assist_id), label, target, |edit| {\n         let n_existing_items = impl_item_list.assoc_items().count();\n         let source_scope = sema.scope_for_def(trait_);\n         let target_scope = sema.scope(impl_item_list.syntax());\n         let ast_transform = QualifyPaths::new(&target_scope, &source_scope)\n-            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_node));\n+            .or(SubstituteTypeParams::for_trait_impl(&source_scope, trait_, impl_def));\n         let items = missing_items\n             .into_iter()\n             .map(|it| ast_transform::apply(&*ast_transform, it))"}, {"sha": "1c3f8435ab6c0f4fad3864e1c19225aa357d999b", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -41,9 +41,8 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n-    ctx.add_assist(AssistId(\"add_new\"), \"Add default constructor\", |edit| {\n-        edit.target(strukt.syntax().text_range());\n-\n+    let target = strukt.syntax().text_range();\n+    ctx.add_assist(AssistId(\"add_new\"), \"Add default constructor\", target, |edit| {\n         let mut buf = String::with_capacity(512);\n \n         if impl_def.is_some() {"}, {"sha": "a5b26e5b937655095aa7d323474fd5ee6c89ed0e", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -39,8 +39,7 @@ pub(crate) fn apply_demorgan(ctx: AssistCtx) -> Option<Assist> {\n     let rhs_range = rhs.syntax().text_range();\n     let not_rhs = invert_boolean_expression(rhs);\n \n-    ctx.add_assist(AssistId(\"apply_demorgan\"), \"Apply De Morgan's law\", |edit| {\n-        edit.target(op_range);\n+    ctx.add_assist(AssistId(\"apply_demorgan\"), \"Apply De Morgan's law\", op_range, |edit| {\n         edit.replace(op_range, opposite_op);\n         edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n         edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));"}, {"sha": "2224b9714bc2eeff4e9dc4af0ebc04820444ebc0", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -48,8 +48,7 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     let range = ctx.sema.original_range(&auto_import_assets.syntax_under_caret).range;\n     let mut group = ctx.add_assist_group(auto_import_assets.get_import_group_message());\n     for import in proposed_imports {\n-        group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n-            edit.target(range);\n+        group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), range, |edit| {\n             insert_use_statement(&auto_import_assets.syntax_under_caret, &import, edit);\n         });\n     }"}, {"sha": "489db83e6eff547c90f693ec3f50d64346a09e11", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -66,11 +66,15 @@ fn add_vis(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     };\n \n-    ctx.add_assist(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", |edit| {\n-        edit.target(target);\n-        edit.insert(offset, \"pub(crate) \");\n-        edit.set_cursor(offset);\n-    })\n+    ctx.add_assist(\n+        AssistId(\"change_visibility\"),\n+        \"Change visibility to pub(crate)\",\n+        target,\n+        |edit| {\n+            edit.insert(offset, \"pub(crate) \");\n+            edit.set_cursor(offset);\n+        },\n+    )\n }\n \n fn vis_offset(node: &SyntaxNode) -> TextSize {\n@@ -86,22 +90,28 @@ fn vis_offset(node: &SyntaxNode) -> TextSize {\n \n fn change_vis(ctx: AssistCtx, vis: ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n+        let target = vis.syntax().text_range();\n         return ctx.add_assist(\n             AssistId(\"change_visibility\"),\n             \"Change Visibility to pub(crate)\",\n+            target,\n             |edit| {\n-                edit.target(vis.syntax().text_range());\n                 edit.replace(vis.syntax().text_range(), \"pub(crate)\");\n                 edit.set_cursor(vis.syntax().text_range().start())\n             },\n         );\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        return ctx.add_assist(AssistId(\"change_visibility\"), \"Change visibility to pub\", |edit| {\n-            edit.target(vis.syntax().text_range());\n-            edit.replace(vis.syntax().text_range(), \"pub\");\n-            edit.set_cursor(vis.syntax().text_range().start());\n-        });\n+        let target = vis.syntax().text_range();\n+        return ctx.add_assist(\n+            AssistId(\"change_visibility\"),\n+            \"Change visibility to pub\",\n+            target,\n+            |edit| {\n+                edit.replace(vis.syntax().text_range(), \"pub\");\n+                edit.set_cursor(vis.syntax().text_range().start());\n+            },\n+        );\n     }\n     None\n }"}, {"sha": "4bd6040b2ad8dd99a99f97b49c04b83108d16164", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 82, "deletions": 77, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -95,89 +95,94 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n     let cursor_position = ctx.frange.range.start();\n \n-    ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"Convert to guarded return\", |edit| {\n-        let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n-        let new_block = match if_let_pat {\n-            None => {\n-                // If.\n-                let new_expr = {\n-                    let then_branch =\n-                        make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n-                    let cond = invert_boolean_expression(cond_expr);\n-                    let e = make::expr_if(make::condition(cond, None), then_branch);\n-                    if_indent_level.increase_indent(e)\n-                };\n-                replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n-            }\n-            Some((path, bound_ident)) => {\n-                // If-let.\n-                let match_expr = {\n-                    let happy_arm = {\n-                        let pat = make::tuple_struct_pat(\n-                            path,\n-                            once(make::bind_pat(make::name(\"it\")).into()),\n-                        );\n-                        let expr = {\n-                            let name_ref = make::name_ref(\"it\");\n-                            let segment = make::path_segment(name_ref);\n-                            let path = make::path_unqualified(segment);\n-                            make::expr_path(path)\n-                        };\n-                        make::match_arm(once(pat.into()), expr)\n+    let target = if_expr.syntax().text_range();\n+    ctx.add_assist(\n+        AssistId(\"convert_to_guarded_return\"),\n+        \"Convert to guarded return\",\n+        target,\n+        |edit| {\n+            let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n+            let new_block = match if_let_pat {\n+                None => {\n+                    // If.\n+                    let new_expr = {\n+                        let then_branch =\n+                            make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n+                        let cond = invert_boolean_expression(cond_expr);\n+                        let e = make::expr_if(make::condition(cond, None), then_branch);\n+                        if_indent_level.increase_indent(e)\n                     };\n+                    replace(new_expr.syntax(), &then_block, &parent_block, &if_expr)\n+                }\n+                Some((path, bound_ident)) => {\n+                    // If-let.\n+                    let match_expr = {\n+                        let happy_arm = {\n+                            let pat = make::tuple_struct_pat(\n+                                path,\n+                                once(make::bind_pat(make::name(\"it\")).into()),\n+                            );\n+                            let expr = {\n+                                let name_ref = make::name_ref(\"it\");\n+                                let segment = make::path_segment(name_ref);\n+                                let path = make::path_unqualified(segment);\n+                                make::expr_path(path)\n+                            };\n+                            make::match_arm(once(pat.into()), expr)\n+                        };\n \n-                    let sad_arm = make::match_arm(\n-                        // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n-                        once(make::placeholder_pat().into()),\n-                        early_expression,\n-                    );\n+                        let sad_arm = make::match_arm(\n+                            // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n+                            once(make::placeholder_pat().into()),\n+                            early_expression,\n+                        );\n \n-                    make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n-                };\n+                        make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n+                    };\n \n-                let let_stmt = make::let_stmt(\n-                    make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n-                    Some(match_expr),\n+                    let let_stmt = make::let_stmt(\n+                        make::bind_pat(make::name(&bound_ident.syntax().to_string())).into(),\n+                        Some(match_expr),\n+                    );\n+                    let let_stmt = if_indent_level.increase_indent(let_stmt);\n+                    replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n+                }\n+            };\n+            edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n+            edit.set_cursor(cursor_position);\n+\n+            fn replace(\n+                new_expr: &SyntaxNode,\n+                then_block: &ast::BlockExpr,\n+                parent_block: &ast::BlockExpr,\n+                if_expr: &ast::IfExpr,\n+            ) -> SyntaxNode {\n+                let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n+                let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n+                let end_of_then =\n+                    if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n+                        end_of_then.prev_sibling_or_token().unwrap()\n+                    } else {\n+                        end_of_then\n+                    };\n+                let mut then_statements = new_expr.children_with_tokens().chain(\n+                    then_block_items\n+                        .syntax()\n+                        .children_with_tokens()\n+                        .skip(1)\n+                        .take_while(|i| *i != end_of_then),\n                 );\n-                let let_stmt = if_indent_level.increase_indent(let_stmt);\n-                replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n+                replace_children(\n+                    &parent_block.syntax(),\n+                    RangeInclusive::new(\n+                        if_expr.clone().syntax().clone().into(),\n+                        if_expr.syntax().clone().into(),\n+                    ),\n+                    &mut then_statements,\n+                )\n             }\n-        };\n-        edit.target(if_expr.syntax().text_range());\n-        edit.replace_ast(parent_block, ast::BlockExpr::cast(new_block).unwrap());\n-        edit.set_cursor(cursor_position);\n-\n-        fn replace(\n-            new_expr: &SyntaxNode,\n-            then_block: &ast::BlockExpr,\n-            parent_block: &ast::BlockExpr,\n-            if_expr: &ast::IfExpr,\n-        ) -> SyntaxNode {\n-            let then_block_items = IndentLevel::from(1).decrease_indent(then_block.clone());\n-            let end_of_then = then_block_items.syntax().last_child_or_token().unwrap();\n-            let end_of_then =\n-                if end_of_then.prev_sibling_or_token().map(|n| n.kind()) == Some(WHITESPACE) {\n-                    end_of_then.prev_sibling_or_token().unwrap()\n-                } else {\n-                    end_of_then\n-                };\n-            let mut then_statements = new_expr.children_with_tokens().chain(\n-                then_block_items\n-                    .syntax()\n-                    .children_with_tokens()\n-                    .skip(1)\n-                    .take_while(|i| *i != end_of_then),\n-            );\n-            replace_children(\n-                &parent_block.syntax(),\n-                RangeInclusive::new(\n-                    if_expr.clone().syntax().clone().into(),\n-                    if_expr.syntax().clone().into(),\n-                ),\n-                &mut then_statements,\n-            )\n-        }\n-    })\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "7c8f8bdf24c395dc3c58ecc69c96abf665271ff3", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -92,10 +92,9 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill match arms\", |edit| {\n+    let target = match_expr.syntax().text_range();\n+    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |edit| {\n         let new_arm_list = match_arm_list.remove_placeholder().append_arms(missing_arms);\n-\n-        edit.target(match_expr.syntax().text_range());\n         edit.set_cursor(expr.syntax().text_range().start());\n         edit.replace_ast(match_arm_list, new_arm_list);\n     })"}, {"sha": "cb7264d7bb347e1830d4fbbcc32a80a87a9082b3", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -33,8 +33,7 @@ pub(crate) fn flip_binexpr(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"flip_binexpr\"), \"Flip binary expression\", |edit| {\n-        edit.target(op_range);\n+    ctx.add_assist(AssistId(\"flip_binexpr\"), \"Flip binary expression\", op_range, |edit| {\n         if let FlipAction::FlipAndReplaceOp(new_op) = action {\n             edit.replace(op_range, new_op);\n         }"}, {"sha": "24982ae22533c01e24b8eb0652a91986a8eba580", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -28,8 +28,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"flip_comma\"), \"Flip comma\", |edit| {\n-        edit.target(comma.text_range());\n+    ctx.add_assist(AssistId(\"flip_comma\"), \"Flip comma\", comma.text_range(), |edit| {\n         edit.replace(prev.text_range(), next.to_string());\n         edit.replace(next.text_range(), prev.to_string());\n     })"}, {"sha": "6a3b2df679dccec1f771c9737c460d3a3b6d1ea4", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -32,8 +32,8 @@ pub(crate) fn flip_trait_bound(ctx: AssistCtx) -> Option<Assist> {\n         non_trivia_sibling(plus.clone().into(), Direction::Next)?,\n     );\n \n-    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"Flip trait bounds\", |edit| {\n-        edit.target(plus.text_range());\n+    let target = plus.text_range();\n+    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"Flip trait bounds\", target, |edit| {\n         edit.replace(before.text_range(), after.to_string());\n         edit.replace(after.text_range(), before.to_string());\n     })"}, {"sha": "e5765c845eedfb18828b255237f33e6c8d429d30", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -106,9 +106,11 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n     let init_str = initializer_expr.syntax().text().to_string();\n     let init_in_paren = format!(\"({})\", &init_str);\n \n+    let target = bind_pat.syntax().text_range();\n     ctx.add_assist(\n         AssistId(\"inline_local_variable\"),\n         \"Inline variable\",\n+        target,\n         move |edit: &mut ActionBuilder| {\n             edit.delete(delete_range);\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {"}, {"sha": "3c340ff3b9786e9c87442b4035c088d1e4378a90", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -42,7 +42,8 @@ pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    ctx.add_assist(AssistId(\"introduce_variable\"), \"Extract into variable\", move |edit| {\n+    let target = expr.syntax().text_range();\n+    ctx.add_assist(AssistId(\"introduce_variable\"), \"Extract into variable\", target, move |edit| {\n         let mut buf = String::new();\n \n         let cursor_offset = if wrap_in_block {\n@@ -79,7 +80,6 @@ pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n                 buf.push_str(text);\n             }\n \n-            edit.target(expr.syntax().text_range());\n             edit.replace(expr.syntax().text_range(), \"var_name\".to_string());\n             edit.insert(anchor_stmt.text_range().start(), buf);\n             if wrap_in_block {"}, {"sha": "b16271443e5d650ec36fcd7eb84905970564c59d", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -47,8 +47,7 @@ pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n         let else_node = else_block.syntax();\n         let else_range = else_node.text_range();\n         let then_range = then_node.text_range();\n-        return ctx.add_assist(AssistId(\"invert_if\"), \"Invert if\", |edit| {\n-            edit.target(if_range);\n+        return ctx.add_assist(AssistId(\"invert_if\"), \"Invert if\", if_range, |edit| {\n             edit.replace(cond_range, flip_cond.syntax().text());\n             edit.replace(else_range, then_node.text());\n             edit.replace(then_range, else_node.text());"}, {"sha": "de74d83d8503aee5eae5469145085e4bed34a194", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -52,7 +52,8 @@ pub(crate) fn merge_imports(ctx: AssistCtx) -> Option<Assist> {\n         }\n     };\n \n-    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", |edit| {\n+    let target = tree.syntax().text_range();\n+    ctx.add_assist(AssistId(\"merge_imports\"), \"Merge imports\", target, |edit| {\n         edit.rewrite(rewriter);\n         // FIXME: we only need because our diff is imprecise\n         edit.set_cursor(offset);"}, {"sha": "7c4d9d55d78c27f9b7d7afa4f0e77d358675da2b", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -70,7 +70,7 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"merge_match_arms\"), \"Merge match arms\", |edit| {\n+    ctx.add_assist(AssistId(\"merge_match_arms\"), \"Merge match arms\", current_text_range, |edit| {\n         let pats = if arms_to_merge.iter().any(contains_placeholder) {\n             \"_\".into()\n         } else {\n@@ -87,7 +87,6 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n         let start = arms_to_merge.first().unwrap().syntax().text_range().start();\n         let end = arms_to_merge.last().unwrap().syntax().text_range().end();\n \n-        edit.target(current_text_range);\n         edit.set_cursor(match cursor_pos {\n             CursorPos::InExpr(back_offset) => start + TextSize::of(&arm) - back_offset,\n             CursorPos::InPat(offset) => offset,"}, {"sha": "44e50cb6e6642004edb628bf844ccb7fa3fd1a61", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -49,30 +49,37 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n         }\n     };\n \n-    ctx.add_assist(AssistId(\"move_bounds_to_where_clause\"), \"Move to where clause\", |edit| {\n-        let new_params = type_param_list\n-            .type_params()\n-            .filter(|it| it.type_bound_list().is_some())\n-            .map(|type_param| {\n-                let without_bounds = type_param.remove_bounds();\n-                (type_param, without_bounds)\n-            });\n-\n-        let new_type_param_list = type_param_list.replace_descendants(new_params);\n-        edit.replace_ast(type_param_list.clone(), new_type_param_list);\n-\n-        let where_clause = {\n-            let predicates = type_param_list.type_params().filter_map(build_predicate);\n-            make::where_clause(predicates)\n-        };\n-\n-        let to_insert = match anchor.prev_sibling_or_token() {\n-            Some(ref elem) if elem.kind() == WHITESPACE => format!(\"{} \", where_clause.syntax()),\n-            _ => format!(\" {}\", where_clause.syntax()),\n-        };\n-        edit.insert(anchor.text_range().start(), to_insert);\n-        edit.target(type_param_list.syntax().text_range());\n-    })\n+    let target = type_param_list.syntax().text_range();\n+    ctx.add_assist(\n+        AssistId(\"move_bounds_to_where_clause\"),\n+        \"Move to where clause\",\n+        target,\n+        |edit| {\n+            let new_params = type_param_list\n+                .type_params()\n+                .filter(|it| it.type_bound_list().is_some())\n+                .map(|type_param| {\n+                    let without_bounds = type_param.remove_bounds();\n+                    (type_param, without_bounds)\n+                });\n+\n+            let new_type_param_list = type_param_list.replace_descendants(new_params);\n+            edit.replace_ast(type_param_list.clone(), new_type_param_list);\n+\n+            let where_clause = {\n+                let predicates = type_param_list.type_params().filter_map(build_predicate);\n+                make::where_clause(predicates)\n+            };\n+\n+            let to_insert = match anchor.prev_sibling_or_token() {\n+                Some(ref elem) if elem.kind() == WHITESPACE => {\n+                    format!(\"{} \", where_clause.syntax())\n+                }\n+                _ => format!(\" {}\", where_clause.syntax()),\n+            };\n+            edit.insert(anchor.text_range().start(), to_insert);\n+        },\n+    )\n }\n \n fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {"}, {"sha": "29bc9a9ffb41ec90438851555a873e8c45767072", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -40,8 +40,8 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx) -> Option<Assist> {\n     let arm_expr = match_arm.expr()?;\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n-    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"Move guard to arm body\", |edit| {\n-        edit.target(guard.syntax().text_range());\n+    let target = guard.syntax().text_range();\n+    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"Move guard to arm body\", target, |edit| {\n         let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n             Some(tok) => {\n                 if ast::Whitespace::cast(tok.clone()).is_some() {\n@@ -108,11 +108,12 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n \n     let buf = format!(\" if {}\", cond.syntax().text());\n \n+    let target = if_expr.syntax().text_range();\n     ctx.add_assist(\n         AssistId(\"move_arm_cond_to_match_guard\"),\n         \"Move condition to match guard\",\n+        target,\n         |edit| {\n-            edit.target(if_expr.syntax().text_range());\n             let then_only_expr = then_block.statements().next().is_none();\n \n             match &then_block.expr() {"}, {"sha": "155c679b4b336ad6f96c276f987ef3449f1b7894", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -25,8 +25,8 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn make_raw_string(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n-    ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", |edit| {\n-        edit.target(token.syntax().text_range());\n+    let target = token.syntax().text_range();\n+    ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", target, |edit| {\n         let max_hash_streak = count_hashes(&value);\n         let mut hashes = String::with_capacity(max_hash_streak + 1);\n         for _ in 0..hashes.capacity() {\n@@ -54,8 +54,8 @@ pub(crate) fn make_raw_string(ctx: AssistCtx) -> Option<Assist> {\n pub(crate) fn make_usual_string(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n-    ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", |edit| {\n-        edit.target(token.syntax().text_range());\n+    let target = token.syntax().text_range();\n+    ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", target, |edit| {\n         // parse inside string to escape `\"`\n         let escaped = value.escape_default().to_string();\n         edit.replace(token.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n@@ -79,8 +79,8 @@ pub(crate) fn make_usual_string(ctx: AssistCtx) -> Option<Assist> {\n // ```\n pub(crate) fn add_hash(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n-    ctx.add_assist(AssistId(\"add_hash\"), \"Add # to raw string\", |edit| {\n-        edit.target(token.text_range());\n+    let target = token.text_range();\n+    ctx.add_assist(AssistId(\"add_hash\"), \"Add # to raw string\", target, |edit| {\n         edit.insert(token.text_range().start() + TextSize::of('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n     })\n@@ -108,8 +108,8 @@ pub(crate) fn remove_hash(ctx: AssistCtx) -> Option<Assist> {\n         // no hash to remove\n         return None;\n     }\n-    ctx.add_assist(AssistId(\"remove_hash\"), \"Remove hash from raw string\", |edit| {\n-        edit.target(token.text_range());\n+    let target = token.text_range();\n+    ctx.add_assist(AssistId(\"remove_hash\"), \"Remove hash from raw string\", target, |edit| {\n         let result = &text[2..text.len() - 1];\n         let result = if result.starts_with('\\\"') {\n             // FIXME: this logic is wrong, not only the last has has to handled specially"}, {"sha": "e6e02f2aec3dc6217057a02ef5baeb50f0ff66f8", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -57,8 +57,8 @@ pub(crate) fn remove_dbg(ctx: AssistCtx) -> Option<Assist> {\n         text.slice(without_parens).to_string()\n     };\n \n-    ctx.add_assist(AssistId(\"remove_dbg\"), \"Remove dbg!()\", |edit| {\n-        edit.target(macro_call.syntax().text_range());\n+    let target = macro_call.syntax().text_range();\n+    ctx.add_assist(AssistId(\"remove_dbg\"), \"Remove dbg!()\", target, |edit| {\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);\n     })"}, {"sha": "9f72f879d5e0a7cdea620adb30e57b6e6c791e32", "filename": "crates/ra_assists/src/handlers/remove_mut.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_mut.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -25,7 +25,8 @@ pub(crate) fn remove_mut(ctx: AssistCtx) -> Option<Assist> {\n         _ => mut_token.text_range().end(),\n     };\n \n-    ctx.add_assist(AssistId(\"remove_mut\"), \"Remove `mut` keyword\", |edit| {\n+    let target = mut_token.text_range();\n+    ctx.add_assist(AssistId(\"remove_mut\"), \"Remove `mut` keyword\", target, |edit| {\n         edit.set_cursor(delete_from);\n         edit.delete(TextRange::new(delete_from, delete_to));\n     })"}, {"sha": "0b930dea2153f055bbadced811919cf68e6a5723", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -50,11 +50,11 @@ fn reorder<R: AstNode>(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"reorder_fields\"), \"Reorder record fields\", |edit| {\n+    let target = record.syntax().text_range();\n+    ctx.add_assist(AssistId(\"reorder_fields\"), \"Reorder record fields\", target, |edit| {\n         for (old, new) in fields.iter().zip(&sorted_fields) {\n             algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n         }\n-        edit.target(record.syntax().text_range())\n     })\n }\n "}, {"sha": "2eb8348f826d4f8f9b5c949955fe501684660b0f", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -44,30 +44,35 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n     };\n \n     let sema = ctx.sema;\n-    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", move |edit| {\n-        let match_expr = {\n-            let then_arm = {\n-                let then_expr = unwrap_trivial_block(then_block);\n-                make::match_arm(vec![pat.clone()], then_expr)\n+    let target = if_expr.syntax().text_range();\n+    ctx.add_assist(\n+        AssistId(\"replace_if_let_with_match\"),\n+        \"Replace with match\",\n+        target,\n+        move |edit| {\n+            let match_expr = {\n+                let then_arm = {\n+                    let then_expr = unwrap_trivial_block(then_block);\n+                    make::match_arm(vec![pat.clone()], then_expr)\n+                };\n+                let else_arm = {\n+                    let pattern = sema\n+                        .type_of_pat(&pat)\n+                        .and_then(|ty| TryEnum::from_ty(sema, &ty))\n+                        .map(|it| it.sad_pattern())\n+                        .unwrap_or_else(|| make::placeholder_pat().into());\n+                    let else_expr = unwrap_trivial_block(else_block);\n+                    make::match_arm(vec![pattern], else_expr)\n+                };\n+                make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]))\n             };\n-            let else_arm = {\n-                let pattern = sema\n-                    .type_of_pat(&pat)\n-                    .and_then(|ty| TryEnum::from_ty(sema, &ty))\n-                    .map(|it| it.sad_pattern())\n-                    .unwrap_or_else(|| make::placeholder_pat().into());\n-                let else_expr = unwrap_trivial_block(else_block);\n-                make::match_arm(vec![pattern], else_expr)\n-            };\n-            make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]))\n-        };\n \n-        let match_expr = IndentLevel::from_node(if_expr.syntax()).increase_indent(match_expr);\n+            let match_expr = IndentLevel::from_node(if_expr.syntax()).increase_indent(match_expr);\n \n-        edit.target(if_expr.syntax().text_range());\n-        edit.set_cursor(if_expr.syntax().text_range().start());\n-        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n-    })\n+            edit.set_cursor(if_expr.syntax().text_range().start());\n+            edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "a5509a56735caff31ae09cec3e6da4638e9d0f92", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -47,7 +47,8 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n     let ty = ctx.sema.type_of_expr(&init)?;\n     let happy_variant = TryEnum::from_ty(ctx.sema, &ty).map(|it| it.happy_case());\n \n-    ctx.add_assist(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", |edit| {\n+    let target = let_kw.text_range();\n+    ctx.add_assist(AssistId(\"replace_let_with_if_let\"), \"Replace with if-let\", target, |edit| {\n         let with_placeholder: ast::Pat = match happy_variant {\n             None => make::placeholder_pat().into(),\n             Some(var_name) => make::tuple_struct_pat(\n@@ -67,7 +68,6 @@ pub(crate) fn replace_let_with_if_let(ctx: AssistCtx) -> Option<Assist> {\n         let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n \n         edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n-        edit.target(let_kw.text_range());\n         edit.set_cursor(target_offset);\n     })\n }"}, {"sha": "fd41da64b8d9b6624ae9e871bb7dfec9b714c0c9", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -33,9 +33,11 @@ pub(crate) fn replace_qualified_name_with_use(ctx: AssistCtx) -> Option<Assist>\n         return None;\n     }\n \n+    let target = path.syntax().text_range();\n     ctx.add_assist(\n         AssistId(\"replace_qualified_name_with_use\"),\n         \"Replace qualified path with use\",\n+        target,\n         |edit| {\n             let path_to_import = hir_path.mod_path().clone();\n             insert_use_statement(path.syntax(), &path_to_import, edit);"}, {"sha": "c6b73da67b086ffd26a9b815e38d2546a8b2cf69", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -38,26 +38,32 @@ pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n     let caller = method_call.expr()?;\n     let ty = ctx.sema.type_of_expr(&caller)?;\n     let happy_variant = TryEnum::from_ty(ctx.sema, &ty)?.happy_case();\n+    let target = method_call.syntax().text_range();\n+    ctx.add_assist(\n+        AssistId(\"replace_unwrap_with_match\"),\n+        \"Replace unwrap with match\",\n+        target,\n+        |edit| {\n+            let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n+            let it = make::bind_pat(make::name(\"a\")).into();\n+            let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n \n-    ctx.add_assist(AssistId(\"replace_unwrap_with_match\"), \"Replace unwrap with match\", |edit| {\n-        let ok_path = make::path_unqualified(make::path_segment(make::name_ref(happy_variant)));\n-        let it = make::bind_pat(make::name(\"a\")).into();\n-        let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n+            let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n+            let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n-        let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n-        let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+            let unreachable_call = make::unreachable_macro_call().into();\n+            let err_arm =\n+                make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n-        let unreachable_call = make::unreachable_macro_call().into();\n-        let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n+            let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n+            let match_expr = make::expr_match(caller.clone(), match_arm_list);\n+            let match_expr =\n+                IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n \n-        let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n-        let match_expr = make::expr_match(caller.clone(), match_arm_list);\n-        let match_expr = IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n-\n-        edit.target(method_call.syntax().text_range());\n-        edit.set_cursor(caller.syntax().text_range().start());\n-        edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n-    })\n+            edit.set_cursor(caller.syntax().text_range().start());\n+            edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n+        },\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "d49563974604286da9ee7173a429716654893927", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -28,8 +28,8 @@ pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n     }\n     let cursor = ctx.frange.range.start();\n \n-    ctx.add_assist(AssistId(\"split_import\"), \"Split import\", |edit| {\n-        edit.target(colon_colon.text_range());\n+    let target = colon_colon.text_range();\n+    ctx.add_assist(AssistId(\"split_import\"), \"Split import\", target, |edit| {\n         edit.replace_ast(use_tree, new_tree);\n         edit.set_cursor(cursor);\n     })"}, {"sha": "6df927abbdba879ef83334d22aa7560cbce6f0cc", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -57,9 +57,9 @@ pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n         }\n     };\n \n-    ctx.add_assist(AssistId(\"unwrap_block\"), \"Unwrap block\", |edit| {\n+    let target = expr_to_unwrap.syntax().text_range();\n+    ctx.add_assist(AssistId(\"unwrap_block\"), \"Unwrap block\", target, |edit| {\n         edit.set_cursor(expr.syntax().text_range().start());\n-        edit.target(expr_to_unwrap.syntax().text_range());\n \n         let pat_start: &[_] = &[' ', '{', '\\n'];\n         let expr_to_unwrap = expr_to_unwrap.to_string();"}, {"sha": "f4f37614ffed5b2afd9e2b477bddd3eb7f11bdd2", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -36,25 +36,31 @@ pub struct AssistLabel {\n     /// Short description of the assist, as shown in the UI.\n     pub label: String,\n     pub group: Option<GroupLabel>,\n+    /// Target ranges are used to sort assists: the smaller the target range,\n+    /// the more specific assist is, and so it should be sorted first.\n+    pub target: TextRange,\n }\n \n #[derive(Clone, Debug)]\n pub struct GroupLabel(pub String);\n \n impl AssistLabel {\n-    pub(crate) fn new(id: AssistId, label: String, group: Option<GroupLabel>) -> AssistLabel {\n+    pub(crate) fn new(\n+        id: AssistId,\n+        label: String,\n+        group: Option<GroupLabel>,\n+        target: TextRange,\n+    ) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        AssistLabel { id, label, group }\n+        AssistLabel { id, label, group, target }\n     }\n }\n \n #[derive(Debug, Clone)]\n pub struct AssistAction {\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextSize>,\n-    // FIXME: This belongs to `AssistLabel`\n-    pub target: Option<TextRange>,\n     pub file: AssistFile,\n }\n \n@@ -104,7 +110,7 @@ pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssi\n         .flat_map(|it| it.0)\n         .map(|it| it.into_resolved().unwrap())\n         .collect::<Vec<_>>();\n-    a.sort_by_key(|it| it.action.target.map_or(TextSize::from(!0u32), |it| it.len()));\n+    a.sort_by_key(|it| it.label.target.len());\n     a\n }\n "}, {"sha": "dd9026df616bc756f481cf30a08545b99b95c3c4", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de3c3eedc1f6576d59e00f0ddde3c70c97be066/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=4de3c3eedc1f6576d59e00f0ddde3c70c97be066", "patch": "@@ -118,8 +118,7 @@ fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n             assert_eq_text!(after, &actual);\n         }\n         (Some(assist), ExpectedResult::Target(target)) => {\n-            let action = assist.0[0].action.clone().unwrap();\n-            let range = action.target.expect(\"expected target on action\");\n+            let range = assist.0[0].label.target;\n             assert_eq_text!(&text_without_caret[range], target);\n         }\n         (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),"}]}