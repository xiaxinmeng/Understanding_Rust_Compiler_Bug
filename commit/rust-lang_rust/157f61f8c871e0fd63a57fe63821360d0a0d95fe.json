{"sha": "157f61f8c871e0fd63a57fe63821360d0a0d95fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1N2Y2MWY4Yzg3MWUwZmQ2M2E1N2ZlNjM4MjEzNjBkMGEwZDk1ZmU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-05T18:00:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T22:14:34Z"}, "message": "Change the setup so that rust_activate_glue returns to rust_exit_task_glue\nand rust_exit_task_glue calls the rust main.\n\nThis is simpler since we only need to setup one frame. It also matches\nwhat ld.so does, so gdb is happy and stops a backtrace at rust_exit_task_glue\ninstead of continuing past whatever function happened to be before\nrust_exit_task_glue is the object file.\n\nThis is only the rustc changes and should be merged first.", "tree": {"sha": "f4471566e8947da3c30b16518ab761acfce0ff94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4471566e8947da3c30b16518ab761acfce0ff94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157f61f8c871e0fd63a57fe63821360d0a0d95fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157f61f8c871e0fd63a57fe63821360d0a0d95fe", "html_url": "https://github.com/rust-lang/rust/commit/157f61f8c871e0fd63a57fe63821360d0a0d95fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157f61f8c871e0fd63a57fe63821360d0a0d95fe/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d9ccf3ae56ce8d403b66a3cb0a560161eb9cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9ccf3ae56ce8d403b66a3cb0a560161eb9cb03", "html_url": "https://github.com/rust-lang/rust/commit/2d9ccf3ae56ce8d403b66a3cb0a560161eb9cb03"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "6de655a7cdcc29b1bd287d00bec42932dde94669", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/157f61f8c871e0fd63a57fe63821360d0a0d95fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157f61f8c871e0fd63a57fe63821360d0a0d95fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=157f61f8c871e0fd63a57fe63821360d0a0d95fe", "patch": "@@ -7074,14 +7074,25 @@ fn trans_exit_task_glue(@glue_fns glues,\n     let vec[ValueRef] V_args = vec();\n \n     auto llfn = glues.exit_task_glue;\n-    let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 4u);\n \n     auto entrybb = llvm.LLVMAppendBasicBlock(llfn, _str.buf(\"entry\"));\n     auto build = new_builder(entrybb);\n-    auto tptr = build.PtrToInt(lltaskptr, T_int());\n-    auto V_args2 = vec(tptr) + V_args;\n-    trans_native_call(build, glues, lltaskptr,\n-                      externs, tn, llmod, \"upcall_exit\", true, V_args2);\n+\n+    let ValueRef arg1 = llvm.LLVMGetParam(llfn, 0u);\n+    let ValueRef arg2 = llvm.LLVMGetParam(llfn, 1u);\n+    let ValueRef arg3 = llvm.LLVMGetParam(llfn, 2u);\n+    let ValueRef arg4 = llvm.LLVMGetParam(llfn, 3u);\n+    let ValueRef arg5 = llvm.LLVMGetParam(llfn, 4u);\n+\n+    auto main_type = T_fn(vec(T_int(), T_int(), T_int(), T_int()), T_void());\n+\n+    auto fun = build.IntToPtr(arg1, T_ptr(main_type));\n+    auto call_args = vec(arg2, arg3, arg4, arg5);\n+    build.FastCall(fun, call_args);\n+\n+    trans_native_call(build, glues, arg3,\n+                      externs, tn, llmod, \"upcall_exit\", true, vec(arg3));\n+\n     build.RetVoid();\n }\n \n@@ -7524,22 +7535,12 @@ fn trans_vec_append_glue(@local_ctxt cx) {\n fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n     ret @rec(activate_glue = decl_glue(llmod, tn, abi.activate_glue_name()),\n              yield_glue = decl_glue(llmod, tn, abi.yield_glue_name()),\n-             /*\n-              * Note: the signature passed to decl_cdecl_fn here looks unusual\n-              * because it is. It corresponds neither to a native signature\n-              * nor a normal rust-ABI signature. In fact it is a fake\n-              * signature, that exists solely to acquire the task pointer as\n-              * an argument to the upcall. It so happens that the runtime sets\n-              * up the task pointer as the sole incoming argument to the frame\n-              * that we return into when returning to the exit task glue. So\n-              * this is the signature required to retrieve it.\n-              */\n              exit_task_glue = decl_cdecl_fn(llmod, abi.exit_task_glue_name(),\n                                             T_fn(vec(T_int(),\n                                                      T_int(),\n                                                      T_int(),\n                                                      T_int(),\n-                                                     T_taskptr(tn)),\n+                                                     T_int()),\n                                                  T_void())),\n \n              native_glues_rust ="}]}