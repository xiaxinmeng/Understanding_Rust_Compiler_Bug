{"sha": "8720281f15e20b9caaad30f20b609a234c18184d", "node_id": "C_kwDOAAsO6NoAKDg3MjAyODFmMTVlMjBiOWNhYWFkMzBmMjBiNjA5YTIzNGMxODE4NGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-04T17:13:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-04T17:13:33Z"}, "message": "Merge #10696\n\n10696: internal: Replace more Name::to_string usages with Name::to_smol_str r=Veykril a=Veykril\n\nGets rid of some more unnecessary string allocs\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "55b5953e9942216750ea3c032ba06745a0895817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55b5953e9942216750ea3c032ba06745a0895817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8720281f15e20b9caaad30f20b609a234c18184d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhhBS9CRBK7hj4Ov3rIwAAGjAIAAmiZXsTrE6HHuir5KRiN4QF\n9qSsh4M/qU7Y8rPNZcaoe+khchml0DaCFmf8Fxd2I7yvA1Y5aRXWQyy6hArECwZ7\nPrqOotoIdduPVi+rAa5BNpOb7ZNDNE1yTp4ITlkOi+w4ONQHNWR73qBZdEj++nwE\n09tVZDqLKzEAetlxugPPtqK/15tC5i/KzRXReR6VairTPKjZZnNI/L3gv6Bxe5Wi\nE7yj6LZUVWoxZ6EOCUaoUFn+l/jiaMYXjpBFdnT84l/EL49UnUXfUqSkIWyQP3Pu\nKqiRZ8Q4XS4urw/x13MQKn3qsVBeYApPa3zlxnm00ETmND468xxLdqfrfOUOsTs=\n=3NyX\n-----END PGP SIGNATURE-----\n", "payload": "tree 55b5953e9942216750ea3c032ba06745a0895817\nparent 962be380042c04d195d9c120d8445e8039d340ee\nparent 439a8194b0c498ee2ac12832c5d5d80316a6c0ab\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636046013 +0000\ncommitter GitHub <noreply@github.com> 1636046013 +0000\n\nMerge #10696\n\n10696: internal: Replace more Name::to_string usages with Name::to_smol_str r=Veykril a=Veykril\n\nGets rid of some more unnecessary string allocs\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8720281f15e20b9caaad30f20b609a234c18184d", "html_url": "https://github.com/rust-lang/rust/commit/8720281f15e20b9caaad30f20b609a234c18184d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8720281f15e20b9caaad30f20b609a234c18184d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962be380042c04d195d9c120d8445e8039d340ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/962be380042c04d195d9c120d8445e8039d340ee", "html_url": "https://github.com/rust-lang/rust/commit/962be380042c04d195d9c120d8445e8039d340ee"}, {"sha": "439a8194b0c498ee2ac12832c5d5d80316a6c0ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/439a8194b0c498ee2ac12832c5d5d80316a6c0ab", "html_url": "https://github.com/rust-lang/rust/commit/439a8194b0c498ee2ac12832c5d5d80316a6c0ab"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "2096c485e46c26d7654183aaf6d6d502c4d3e23e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -580,7 +580,7 @@ impl Module {\n                                     });\n                                 for token in tokens {\n                                     if token.kind() == SyntaxKind::IDENT\n-                                        && token.text() == derive_name.as_str()\n+                                        && token.text() == &**derive_name\n                                     {\n                                         precise_location = Some(token.text_range());\n                                         break 'outer;\n@@ -606,7 +606,12 @@ impl Module {\n                         }\n                     };\n                     acc.push(\n-                        UnresolvedProcMacro { node, precise_location, macro_name: name }.into(),\n+                        UnresolvedProcMacro {\n+                            node,\n+                            precise_location,\n+                            macro_name: name.map(Into::into),\n+                        }\n+                        .into(),\n                     );\n                 }\n \n@@ -2219,7 +2224,7 @@ impl Impl {\n             .attrs()\n             .filter_map(|it| {\n                 let path = ModPath::from_src(db.upcast(), it.path()?, &hygenic)?;\n-                if path.as_ident()?.to_string() == \"derive\" {\n+                if path.as_ident()?.to_smol_str() == \"derive\" {\n                     Some(it)\n                 } else {\n                     None"}, {"sha": "4f68c91cc97bb88a457a468db348e0e4bd714264", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -796,7 +796,7 @@ impl<'a> AttrQuery<'a> {\n         let key = self.key;\n         self.attrs\n             .iter()\n-            .filter(move |attr| attr.path.as_ident().map_or(false, |s| s.to_string() == key))\n+            .filter(move |attr| attr.path.as_ident().map_or(false, |s| s.to_smol_str() == key))\n     }\n }\n "}, {"sha": "f40eb2f9d41e38e8710e417637e2b30557cf73ee", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -282,7 +282,7 @@ mod tests {\n         let actual = scopes\n             .scope_chain(scope)\n             .flat_map(|scope| scopes.entries(scope))\n-            .map(|it| it.name().to_string())\n+            .map(|it| it.name().to_smol_str())\n             .collect::<Vec<_>>()\n             .join(\"\\n\");\n         let expected = expected.join(\"\\n\");"}, {"sha": "9381ca39f7e2a9153c5f875c1b66f7fd58126f8c", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -449,7 +449,7 @@ impl<'a> Ctx<'a> {\n \n     fn lower_const(&mut self, konst: &ast::Const) -> FileItemTreeId<Const> {\n         let mut name = konst.name().map(|it| it.as_name());\n-        if name.as_ref().map_or(false, |n| n.to_string().starts_with(\"_DERIVE_\")) {\n+        if name.as_ref().map_or(false, |n| n.to_smol_str().starts_with(\"_DERIVE_\")) {\n             // FIXME: this is a hack to treat consts generated by synstructure as unnamed\n             // remove this some time in the future\n             name = None;"}, {"sha": "5ddef48495b5a21880c7781e545b2b171e05b32e", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -764,7 +764,7 @@ fn derive_macro_as_call_id(\n         krate,\n         MacroCallKind::Derive {\n             ast_id: item_attr.ast_id,\n-            derive_name: last_segment.to_string(),\n+            derive_name: last_segment.to_string().into_boxed_str(),\n             derive_attr_index: derive_attr.ast_index,\n         },\n     );\n@@ -801,7 +801,7 @@ fn attr_macro_as_call_id(\n         krate,\n         MacroCallKind::Attr {\n             ast_id: item_attr.ast_id,\n-            attr_name: last_segment.to_string(),\n+            attr_name: last_segment.to_string().into_boxed_str(),\n             attr_args: arg,\n             invoc_attr_index: macro_attr.id.ast_index,\n         },"}, {"sha": "1c578dbdc265dfb050fe03f7c65d7d5af49f82fa", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -1759,7 +1759,7 @@ impl ModCollector<'_, '_> {\n     fn is_builtin_or_registered_attr(&self, path: &ModPath) -> bool {\n         if path.kind == PathKind::Plain {\n             if let Some(tool_module) = path.segments().first() {\n-                let tool_module = tool_module.to_string();\n+                let tool_module = tool_module.to_smol_str();\n                 let is_tool = builtin_attr::TOOL_MODULES\n                     .iter()\n                     .copied()\n@@ -1771,7 +1771,7 @@ impl ModCollector<'_, '_> {\n             }\n \n             if let Some(name) = path.as_ident() {\n-                let name = name.to_string();\n+                let name = name.to_smol_str();\n                 let is_inert = builtin_attr::INERT_ATTRIBUTES\n                     .iter()\n                     .chain(builtin_attr::EXTRA_ATTRIBUTES)"}, {"sha": "bd2588e592e551ecbb19a1ef0980150192f0f81c", "filename": "crates/hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -42,7 +42,7 @@ impl ModDir {\n         let path = match attr_path.map(|it| it.as_str()) {\n             None => {\n                 let mut path = self.dir_path.clone();\n-                path.push(&name.to_string());\n+                path.push(&name.to_smol_str());\n                 path\n             }\n             Some(attr_path) => {"}, {"sha": "d17e6b1834eec324df818dda1c0d1a20f72b8736", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -46,7 +46,7 @@ impl Display for ImportAlias {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ImportAlias::Underscore => f.write_str(\"_\"),\n-            ImportAlias::Alias(name) => f.write_str(&name.to_string()),\n+            ImportAlias::Alias(name) => f.write_str(&name.to_smol_str()),\n         }\n     }\n }"}, {"sha": "b6e8f58c2e44685cab58123b64ff471c17a4cac9", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -122,7 +122,7 @@ pub enum MacroCallKind {\n     },\n     Derive {\n         ast_id: AstId<ast::Item>,\n-        derive_name: String,\n+        derive_name: Box<str>,\n         /// Syntactical index of the invoking `#[derive]` attribute.\n         ///\n         /// Outer attributes are counted first, then inner attributes. This does not support\n@@ -131,7 +131,7 @@ pub enum MacroCallKind {\n     },\n     Attr {\n         ast_id: AstId<ast::Item>,\n-        attr_name: String,\n+        attr_name: Box<str>,\n         attr_args: (tt::Subtree, mbe::TokenMap),\n         /// Syntactical index of the invoking `#[attribute]`.\n         ///"}, {"sha": "95d272ba682db02917ca92e11e9fda4605c3e85d", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -84,7 +84,8 @@ impl Name {\n     }\n \n     /// Returns the textual representation of this name as a [`SmolStr`].\n-    /// Prefer using this over [`ToString::to_string`] if possible as this conversion is cheaper.\n+    /// Prefer using this over [`ToString::to_string`] if possible as this conversion is cheaper in\n+    /// the general case.\n     pub fn to_smol_str(&self) -> SmolStr {\n         match &self.0 {\n             Repr::Text(it) => it.clone(),"}, {"sha": "b21998e0d2293f1762c2c0fa814ad4b1b3dcb27c", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -90,7 +90,7 @@ impl NavigationTarget {\n     }\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n-        let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n+        let name = module.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n             let node = src.syntax();\n             let full_range = node.original_file_range(db);\n@@ -275,7 +275,7 @@ where\n impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n-        let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n+        let name = self.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n         let (syntax, focus) = match &src.value {\n             ModuleSource::SourceFile(node) => (node.syntax(), None),\n             ModuleSource::Module(node) => {\n@@ -399,7 +399,7 @@ impl ToNav for hir::Local {\n \n         let full_range = src.with_value(&node).original_file_range(db);\n         let name = match self.name(db) {\n-            Some(it) => it.to_string().into(),\n+            Some(it) => it.to_smol_str(),\n             None => \"\".into(),\n         };\n         let kind = if self.is_self(db) {\n@@ -429,7 +429,7 @@ impl ToNav for hir::Label {\n         let FileRange { file_id, range } = src.with_value(node).original_file_range(db);\n         let focus_range =\n             src.value.lifetime().and_then(|lt| lt.lifetime_ident_token()).map(|lt| lt.text_range());\n-        let name = self.name(db).to_string().into();\n+        let name = self.name(db).to_smol_str();\n         NavigationTarget {\n             file_id,\n             name,\n@@ -459,7 +459,7 @@ impl TryToNav for hir::TypeParam {\n         .map(|it| it.syntax().text_range());\n         Some(NavigationTarget {\n             file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_string().into(),\n+            name: self.name(db).to_smol_str(),\n             kind: Some(SymbolKind::TypeParam),\n             full_range,\n             focus_range,\n@@ -476,7 +476,7 @@ impl TryToNav for hir::LifetimeParam {\n         let full_range = src.value.syntax().text_range();\n         Some(NavigationTarget {\n             file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_string().into(),\n+            name: self.name(db).to_smol_str(),\n             kind: Some(SymbolKind::LifetimeParam),\n             full_range,\n             focus_range: Some(full_range),\n@@ -493,7 +493,7 @@ impl TryToNav for hir::ConstParam {\n         let full_range = src.value.syntax().text_range();\n         Some(NavigationTarget {\n             file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_string().into(),\n+            name: self.name(db).to_smol_str(),\n             kind: Some(SymbolKind::ConstParam),\n             full_range,\n             focus_range: src.value.name().map(|n| n.syntax().text_range()),"}, {"sha": "710d6b78821763f3a6f9eff5b4d25ecaae62cffc", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -344,7 +344,7 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir\n         enum_data\n             .variants(db)\n             .into_iter()\n-            .map(|variant| variant.name(db).to_string())\n+            .map(|variant| variant.name(db).to_smol_str())\n             .any(|enum_name| enum_name == pat_text)\n     } else {\n         false\n@@ -363,7 +363,7 @@ fn should_not_display_type_hint(\n     }\n \n     if let Some(hir::Adt::Struct(s)) = pat_ty.as_adt() {\n-        if s.fields(db).is_empty() && s.name(db).to_string() == bind_pat.to_string() {\n+        if s.fields(db).is_empty() && s.name(db).to_smol_str() == bind_pat.to_string() {\n             return true;\n         }\n     }\n@@ -419,7 +419,7 @@ fn should_hide_param_name_hint(\n     }\n \n     let fn_name = match callable.kind() {\n-        hir::CallableKind::Function(it) => Some(it.name(sema.db).to_string()),\n+        hir::CallableKind::Function(it) => Some(it.name(sema.db).to_smol_str()),\n         _ => None,\n     };\n     let fn_name = fn_name.as_deref();\n@@ -475,7 +475,9 @@ fn is_enum_name_similar_to_param_name(\n     param_name: &str,\n ) -> bool {\n     match sema.type_of_expr(argument).and_then(|t| t.original.as_adt()) {\n-        Some(hir::Adt::Enum(e)) => to_lower_snake_case(&e.name(sema.db).to_string()) == param_name,\n+        Some(hir::Adt::Enum(e)) => {\n+            to_lower_snake_case(&e.name(sema.db).to_smol_str()) == param_name\n+        }\n         _ => false,\n     }\n }"}, {"sha": "a7ebba82b03eaeb54f2efd7f0f61ff864e376d9b", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -159,7 +159,7 @@ fn find_definitions(\n                             // if the name differs from the definitions name it has to be an alias\n                             if def\n                                 .name(sema.db)\n-                                .map_or(false, |it| it.to_string() != name_ref.text())\n+                                .map_or(false, |it| it.to_smol_str() != name_ref.text().as_str())\n                             {\n                                 Err(format_err!(\"Renaming aliases is currently unsupported\"))\n                             } else {"}, {"sha": "47036f2e132cb7dd6eba790129b1a4b258ae192b", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -209,7 +209,7 @@ pub(crate) fn compute_fuzzy_completion_order_key(\n ) -> usize {\n     cov_mark::hit!(certain_fuzzy_order_test);\n     let import_name = match proposed_mod_path.segments().last() {\n-        Some(name) => name.to_string().to_lowercase(),\n+        Some(name) => name.to_smol_str().to_lowercase(),\n         None => return usize::MAX,\n     };\n     match import_name.match_indices(user_input_lowercased).next() {"}, {"sha": "f5308254346ed8ef24bd7531e777f63c35584d68", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n \n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n-            if param_lifetime != Some(&*name.to_string()) {\n+            if param_lifetime != Some(&*name.to_smol_str()) {\n                 acc.add_resolution(ctx, name, &res);\n             }\n         }"}, {"sha": "beef834581b9a0cf5bdfb518a38251005fd7b1f9", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -121,7 +121,7 @@ fn directory_to_look_for_submodules(\n     module_chain_to_containing_module_file(module, db)\n         .into_iter()\n         .filter_map(|module| module.name(db))\n-        .try_fold(base_directory, |path, name| path.join(&name.to_string()))\n+        .try_fold(base_directory, |path, name| path.join(&name.to_smol_str()))\n }\n \n fn module_chain_to_containing_module_file("}, {"sha": "d95bca515fb95755c8ef1d70c90b3cff559e31b7", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -404,7 +404,7 @@ impl NameRefClass {\n                             hir::AssocItem::TypeAlias(it) => Some(*it),\n                             _ => None,\n                         })\n-                        .find(|alias| alias.name(sema.db).to_string() == name_ref.text())\n+                        .find(|alias| alias.name(sema.db).to_smol_str() == name_ref.text().as_str())\n                     {\n                         return Some(NameRefClass::Definition(Definition::ModuleDef(\n                             ModuleDef::TypeAlias(ty),"}, {"sha": "5c5dbdfb5fe08f26d7678109ce782e3c2e9c8c5d", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -113,7 +113,7 @@ pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n     segments.extend(\n         path.segments()\n             .iter()\n-            .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n+            .map(|segment| make::path_segment(make::name_ref(&segment.to_smol_str()))),\n     );\n     make::path_from_segments(segments, is_abs)\n }"}, {"sha": "fd92c64f1740533fbc4a5728f5a9bf8e93928866", "filename": "crates/ide_db/src/helpers/famous_defs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -139,7 +139,7 @@ impl FamousDefs<'_, '_> {\n         let krate = self.1?;\n         let db = self.0.db;\n         let res =\n-            krate.dependencies(db).into_iter().find(|dep| dep.name.to_string() == name)?.krate;\n+            krate.dependencies(db).into_iter().find(|dep| dep.name.to_smol_str() == name)?.krate;\n         Some(res)\n     }\n \n@@ -153,15 +153,15 @@ impl FamousDefs<'_, '_> {\n         for segment in path {\n             module = module.children(db).find_map(|child| {\n                 let name = child.name(db)?;\n-                if name.to_string() == segment {\n+                if name.to_smol_str() == segment {\n                     Some(child)\n                 } else {\n                     None\n                 }\n             })?;\n         }\n         let def =\n-            module.scope(db, None).into_iter().find(|(name, _def)| name.to_string() == trait_)?.1;\n+            module.scope(db, None).into_iter().find(|(name, _def)| name.to_smol_str() == trait_)?.1;\n         Some(def)\n     }\n }"}, {"sha": "9a8adf167c8a05f0a9248291b695e872b892e5d7", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -410,7 +410,7 @@ fn find_import_for_segment(\n     unresolved_first_segment: &str,\n ) -> Option<ItemInNs> {\n     let segment_is_name = item_name(db, original_item)\n-        .map(|name| name.to_string() == unresolved_first_segment)\n+        .map(|name| name.to_smol_str() == unresolved_first_segment)\n         .unwrap_or(false);\n \n     Some(if segment_is_name {\n@@ -434,7 +434,7 @@ fn module_with_segment_name(\n     };\n     while let Some(module) = current_module {\n         if let Some(module_name) = module.name(db) {\n-            if module_name.to_string() == segment_name {\n+            if module_name.to_smol_str() == segment_name {\n                 return Some(module);\n             }\n         }"}, {"sha": "65deaf4d7df9069138035504a8fbcb7740f2ac05", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -385,7 +385,7 @@ impl<'a> FindUsages<'a> {\n             })\n         });\n         let name = match name {\n-            Some(name) => name.to_string(),\n+            Some(name) => name.to_smol_str(),\n             None => return,\n         };\n         let name = name.as_str();"}, {"sha": "2c6b00b1343b330a2fed635312eba3d56c6643c5", "filename": "crates/ide_db/src/ty_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_db%2Fsrc%2Fty_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fty_filter.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -26,7 +26,7 @@ impl TryEnum {\n             _ => return None,\n         };\n         TryEnum::ALL.iter().find_map(|&var| {\n-            if enum_.name(sema.db).to_string() == var.type_name() {\n+            if enum_.name(sema.db).to_smol_str() == var.type_name() {\n                 return Some(var);\n             }\n             None"}, {"sha": "8d17a7e714a6f373478b0580793a07afc88a67ef", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -76,7 +76,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n             Some(make::ext::expr_todo())\n         };\n         let field =\n-            make::record_expr_field(make::name_ref(&f.name(ctx.sema.db).to_string()), field_expr)\n+            make::record_expr_field(make::name_ref(&f.name(ctx.sema.db).to_smol_str()), field_expr)\n                 .clone_for_update();\n         new_field_list.add_field(field);\n     }"}, {"sha": "84e5f82604b55b77dd823beef4e5d27559960885", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8720281f15e20b9caaad30f20b609a234c18184d/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=8720281f15e20b9caaad30f20b609a234c18184d", "patch": "@@ -226,7 +226,7 @@ impl<'db> ResolutionScope<'db> {\n                 None,\n                 |_ty, assoc_item| {\n                     let item_name = assoc_item.name(self.scope.db)?;\n-                    if item_name.to_string().as_str() == name.text() {\n+                    if item_name.to_smol_str().as_str() == name.text() {\n                         Some(hir::PathResolution::AssocItem(assoc_item))\n                     } else {\n                         None"}]}