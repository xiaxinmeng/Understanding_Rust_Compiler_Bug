{"sha": "b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OGRiZjQzZjRiODhlOTRiN2I3ZjkwZjBjYmUxMDBlNTJhZmVhZTY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-02-13T18:02:58Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:49Z"}, "message": "Reuse type ascripted printing for type cast printing", "tree": {"sha": "d56b4838dcb8993283557c18fdca31505bf941bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56b4838dcb8993283557c18fdca31505bf941bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6", "html_url": "https://github.com/rust-lang/rust/commit/b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154f3f19ab10723ef3afd7b6166384356df631dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/154f3f19ab10723ef3afd7b6166384356df631dc", "html_url": "https://github.com/rust-lang/rust/commit/154f3f19ab10723ef3afd7b6166384356df631dc"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "230ddb2e72317d53f24ecd93764de4b756050227", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=b78dbf43f4b88e94b7b7f90f0cbe100e52afeae6", "patch": "@@ -211,15 +211,20 @@ pub trait PrettyPrinter<'tcx>:\n         Ok(self)\n     }\n \n-    /// Prints `{...}` around what `f` (and optionally `t`) print\n-    fn type_ascribed_value(\n+    /// Prints `{f: t}` or `{f as t}` depending on the `cast` argument\n+    fn typed_value(\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n         t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+        cast: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         self.write_str(\"{\")?;\n         self = f(self)?;\n-        self.write_str(\": \")?;\n+        if cast {\n+            self.write_str(\" as \")?;\n+        } else {\n+            self.write_str(\": \")?;\n+        }\n         self = t(self)?;\n         self.write_str(\"}\")?;\n         Ok(self)\n@@ -990,7 +995,14 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             // Raw pointers\n             (Scalar::Raw { data, .. }, ty::RawPtr(_)) => {\n-                p!(write(\"{{0x{:x} as \", data), print(ty), write(\"}}\"))\n+                self = self.typed_value(\n+                    |mut this| {\n+                        write!(this, \"0x{:x}\", data)?;\n+                        Ok(this)\n+                    },\n+                    |this| this.print_type(ty),\n+                    true,\n+                )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n                 let instance = {\n@@ -1025,7 +1037,7 @@ pub trait PrettyPrinter<'tcx>:\n                     Ok(this)\n                 };\n                 self = if print_ty {\n-                    self.type_ascribed_value(print, |this| this.print_type(ty))?\n+                    self.typed_value(print, |this| this.print_type(ty), false)?\n                 } else {\n                     print(self)?\n                 };\n@@ -1047,12 +1059,13 @@ pub trait PrettyPrinter<'tcx>:\n         print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         if print_ty {\n-            self.type_ascribed_value(\n+            self.typed_value(\n                 |mut this| {\n                     this.write_str(\"&_\")?;\n                     Ok(this)\n                 },\n                 |this| this.print_type(ty),\n+                false,\n             )\n         } else {\n             self.write_str(\"&_\")?;\n@@ -1449,14 +1462,19 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self.pretty_in_binder(value)\n     }\n \n-    fn type_ascribed_value(\n+    fn typed_value(\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n         t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+        cast: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         self.write_str(\"{\")?;\n         self = f(self)?;\n-        self.write_str(\": \")?;\n+        if cast {\n+            self.write_str(\" as \")?;\n+        } else {\n+            self.write_str(\": \")?;\n+        }\n         let was_in_value = std::mem::replace(&mut self.in_value, false);\n         self = t(self)?;\n         self.in_value = was_in_value;\n@@ -1537,7 +1555,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n             Ok(this)\n         };\n         if print_ty {\n-            self.type_ascribed_value(print, |this| this.print_type(ty))\n+            self.typed_value(print, |this| this.print_type(ty), false)\n         } else {\n             print(self)\n         }"}]}