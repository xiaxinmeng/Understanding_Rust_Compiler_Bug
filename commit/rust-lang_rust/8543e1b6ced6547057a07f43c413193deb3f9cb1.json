{"sha": "8543e1b6ced6547057a07f43c413193deb3f9cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NDNlMWI2Y2VkNjU0NzA1N2EwN2Y0M2M0MTMxOTNkZWIzZjljYjE=", "commit": {"author": {"name": "Alan Williams", "email": "mralert@gmail.com", "date": "2014-05-07T03:39:06Z"}, "committer": {"name": "Alan Williams", "email": "mralert@gmail.com", "date": "2014-05-07T03:39:06Z"}, "message": "Add documentation for Windows compatibility layer and remove unneeded attributes", "tree": {"sha": "81ce2514e81965ed558880a6f7303fbe6e8892d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ce2514e81965ed558880a6f7303fbe6e8892d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8543e1b6ced6547057a07f43c413193deb3f9cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8543e1b6ced6547057a07f43c413193deb3f9cb1", "html_url": "https://github.com/rust-lang/rust/commit/8543e1b6ced6547057a07f43c413193deb3f9cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8543e1b6ced6547057a07f43c413193deb3f9cb1/comments", "author": {"login": "MrAlert", "id": 148235, "node_id": "MDQ6VXNlcjE0ODIzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/148235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAlert", "html_url": "https://github.com/MrAlert", "followers_url": "https://api.github.com/users/MrAlert/followers", "following_url": "https://api.github.com/users/MrAlert/following{/other_user}", "gists_url": "https://api.github.com/users/MrAlert/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAlert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAlert/subscriptions", "organizations_url": "https://api.github.com/users/MrAlert/orgs", "repos_url": "https://api.github.com/users/MrAlert/repos", "events_url": "https://api.github.com/users/MrAlert/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAlert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MrAlert", "id": 148235, "node_id": "MDQ6VXNlcjE0ODIzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/148235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrAlert", "html_url": "https://github.com/MrAlert", "followers_url": "https://api.github.com/users/MrAlert/followers", "following_url": "https://api.github.com/users/MrAlert/following{/other_user}", "gists_url": "https://api.github.com/users/MrAlert/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrAlert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrAlert/subscriptions", "organizations_url": "https://api.github.com/users/MrAlert/orgs", "repos_url": "https://api.github.com/users/MrAlert/repos", "events_url": "https://api.github.com/users/MrAlert/events{/privacy}", "received_events_url": "https://api.github.com/users/MrAlert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073d7ffc2745386f42048847ec7209e47cbdab8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/073d7ffc2745386f42048847ec7209e47cbdab8f", "html_url": "https://github.com/rust-lang/rust/commit/073d7ffc2745386f42048847ec7209e47cbdab8f"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "0458b9135f6ba061460cfc2d48b6c72e17807e92", "filename": "src/libstd/os.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8543e1b6ced6547057a07f43c413193deb3f9cb1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8543e1b6ced6547057a07f43c413193deb3f9cb1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8543e1b6ced6547057a07f43c413193deb3f9cb1", "patch": "@@ -154,12 +154,14 @@ pub mod win32 {\n         use libc::types::os::arch::extra::{LPCWSTR, HMODULE, LPCSTR, LPVOID};\n         use os::win32::as_utf16_p;\n \n-        #[link_name=\"kernel32\"]\n         extern \"system\" {\n             fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n             fn GetProcAddress(hModule: HMODULE, lpProcName: LPCSTR) -> LPVOID;\n         }\n \n+        // store_func() is idempotent, so using relaxed ordering for the atomics should be enough.\n+        // This way, calling a function in this compatibility layer (after it's loaded) shouldn't\n+        // be any slower than a regular DLL call.\n         unsafe fn store_func<T: Copy>(ptr: *mut T, module: &str, symbol: &str, fallback: T) {\n             as_utf16_p(module, |module| {\n                 symbol.with_c_str(|symbol| {\n@@ -170,6 +172,17 @@ pub mod win32 {\n             })\n         }\n \n+        /// Macro for creating a compatibility fallback for a Windows function\n+        ///\n+        /// # Example\n+        /// ```\n+        /// compat_fn!(adll32::SomeFunctionW(_arg: LPCWSTR) {\n+        ///     // Fallback implementation\n+        /// })\n+        /// ```\n+        ///\n+        /// Note that arguments unused by the fallback implementation should not be called `_` as\n+        /// they are used to be passed to the real function if available.\n         macro_rules! compat_fn(\n             ($module:ident::$symbol:ident($($argname:ident: $argtype:ty),*)\n                                           -> $rettype:ty $fallback:block) => (\n@@ -198,11 +211,16 @@ pub mod win32 {\n             )\n         )\n \n+        /// Compatibility layer for functions in `kernel32.dll`\n+        ///\n+        /// Latest versions of Windows this is needed for:\n+        ///\n+        /// * `CreateSymbolicLinkW`: Windows XP, Windows Server 2003\n+        /// * `GetFinalPathNameByHandleW`: Windows XP, Windows Server 2003\n         pub mod kernel32 {\n             use libc::types::os::arch::extra::{DWORD, LPCWSTR, BOOLEAN, HANDLE};\n             use libc::consts::os::extra::ERROR_CALL_NOT_IMPLEMENTED;\n \n-            #[link_name=\"kernel32\"]\n             extern \"system\" {\n                 fn SetLastError(dwErrCode: DWORD);\n             }"}]}