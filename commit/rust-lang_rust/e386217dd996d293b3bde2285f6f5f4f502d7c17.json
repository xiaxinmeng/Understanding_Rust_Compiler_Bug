{"sha": "e386217dd996d293b3bde2285f6f5f4f502d7c17", "node_id": "C_kwDOAAsO6NoAKGUzODYyMTdkZDk5NmQyOTNiM2JkZTIyODVmNmY1ZjRmNTAyZDdjMTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-16T16:40:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-16T16:40:53Z"}, "message": "Auto merge of #107270 - cjgillot:remove-zst, r=oli-obk\n\nReplace ZST operands and debuginfo by constants.\n\nThis is work that ConstProp will not have to do.\nSplit from https://github.com/rust-lang/rust/pull/107267", "tree": {"sha": "87c77dc74c589e3e4fad16f37edfbcdbf4e6a8d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c77dc74c589e3e4fad16f37edfbcdbf4e6a8d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e386217dd996d293b3bde2285f6f5f4f502d7c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e386217dd996d293b3bde2285f6f5f4f502d7c17", "html_url": "https://github.com/rust-lang/rust/commit/e386217dd996d293b3bde2285f6f5f4f502d7c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e386217dd996d293b3bde2285f6f5f4f502d7c17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1203e0866e6c3659775efcb8aecad21dc13ef38b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1203e0866e6c3659775efcb8aecad21dc13ef38b", "html_url": "https://github.com/rust-lang/rust/commit/1203e0866e6c3659775efcb8aecad21dc13ef38b"}, {"sha": "e8afb080be84e2f6ec95e074cb9185fc5521497f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8afb080be84e2f6ec95e074cb9185fc5521497f", "html_url": "https://github.com/rust-lang/rust/commit/e8afb080be84e2f6ec95e074cb9185fc5521497f"}], "stats": {"total": 534, "additions": 325, "deletions": 209}, "files": [{"sha": "1f37f03cff1ca9c022e3a853e17fb7f35eb842f9", "filename": "compiler/rustc_mir_transform/src/remove_zsts.rs", "status": "modified", "additions": 107, "deletions": 29, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_zsts.rs?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -1,7 +1,9 @@\n-//! Removes assignments to ZST places.\n+//! Removes operations on ZST places, and convert ZST operands to constants.\n \n use crate::MirPass;\n-use rustc_middle::mir::{Body, StatementKind};\n+use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n pub struct RemoveZsts;\n@@ -16,38 +18,24 @@ impl<'tcx> MirPass<'tcx> for RemoveZsts {\n         if tcx.type_of(body.source.def_id()).subst_identity().is_generator() {\n             return;\n         }\n-        let param_env = tcx.param_env(body.source.def_id());\n-        let basic_blocks = body.basic_blocks.as_mut_preserves_cfg();\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         let local_decls = &body.local_decls;\n-        for block in basic_blocks {\n-            for statement in block.statements.iter_mut() {\n-                if let StatementKind::Assign(box (place, _)) | StatementKind::Deinit(box place) =\n-                    statement.kind\n-                {\n-                    let place_ty = place.ty(local_decls, tcx).ty;\n-                    if !maybe_zst(place_ty) {\n-                        continue;\n-                    }\n-                    let Ok(layout) = tcx.layout_of(param_env.and(place_ty)) else {\n-                        continue;\n-                    };\n-                    if !layout.is_zst() {\n-                        continue;\n-                    }\n-                    if tcx.consider_optimizing(|| {\n-                        format!(\n-                            \"RemoveZsts - Place: {:?} SourceInfo: {:?}\",\n-                            place, statement.source_info\n-                        )\n-                    }) {\n-                        statement.make_nop();\n-                    }\n-                }\n-            }\n+        let mut replacer = Replacer { tcx, param_env, local_decls };\n+        for var_debug_info in &mut body.var_debug_info {\n+            replacer.visit_var_debug_info(var_debug_info);\n+        }\n+        for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n+            replacer.visit_basic_block_data(bb, data);\n         }\n     }\n }\n \n+struct Replacer<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    local_decls: &'a LocalDecls<'tcx>,\n+}\n+\n /// A cheap, approximate check to avoid unnecessary `layout_of` calls.\n fn maybe_zst(ty: Ty<'_>) -> bool {\n     match ty.kind() {\n@@ -63,3 +51,93 @@ fn maybe_zst(ty: Ty<'_>) -> bool {\n         _ => false,\n     }\n }\n+\n+impl<'tcx> Replacer<'_, 'tcx> {\n+    fn known_to_be_zst(&self, ty: Ty<'tcx>) -> bool {\n+        if !maybe_zst(ty) {\n+            return false;\n+        }\n+        let Ok(layout) = self.tcx.layout_of(self.param_env.and(ty)) else {\n+            return false;\n+        };\n+        layout.is_zst()\n+    }\n+\n+    fn make_zst(&self, ty: Ty<'tcx>) -> Constant<'tcx> {\n+        debug_assert!(self.known_to_be_zst(ty));\n+        Constant {\n+            span: rustc_span::DUMMY_SP,\n+            user_ty: None,\n+            literal: ConstantKind::Val(ConstValue::ZeroSized, ty),\n+        }\n+    }\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_var_debug_info(&mut self, var_debug_info: &mut VarDebugInfo<'tcx>) {\n+        match var_debug_info.value {\n+            VarDebugInfoContents::Const(_) => {}\n+            VarDebugInfoContents::Place(place) => {\n+                let place_ty = place.ty(self.local_decls, self.tcx).ty;\n+                if self.known_to_be_zst(place_ty) {\n+                    var_debug_info.value = VarDebugInfoContents::Const(self.make_zst(place_ty))\n+                }\n+            }\n+            VarDebugInfoContents::Composite { ty, fragments: _ } => {\n+                if self.known_to_be_zst(ty) {\n+                    var_debug_info.value = VarDebugInfoContents::Const(self.make_zst(ty))\n+                }\n+            }\n+        }\n+    }\n+\n+    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n+        if let Operand::Constant(_) = operand {\n+            return;\n+        }\n+        let op_ty = operand.ty(self.local_decls, self.tcx);\n+        if self.known_to_be_zst(op_ty)\n+            && self.tcx.consider_optimizing(|| {\n+                format!(\"RemoveZsts - Operand: {:?} Location: {:?}\", operand, loc)\n+            })\n+        {\n+            *operand = Operand::Constant(Box::new(self.make_zst(op_ty)))\n+        }\n+    }\n+\n+    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, loc: Location) {\n+        let place_for_ty = match statement.kind {\n+            StatementKind::Assign(box (place, ref rvalue)) => {\n+                rvalue.is_safe_to_remove().then_some(place)\n+            }\n+            StatementKind::Deinit(box place)\n+            | StatementKind::SetDiscriminant { box place, variant_index: _ }\n+            | StatementKind::AscribeUserType(box (place, _), _)\n+            | StatementKind::Retag(_, box place)\n+            | StatementKind::PlaceMention(box place)\n+            | StatementKind::FakeRead(box (_, place)) => Some(place),\n+            StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n+                Some(local.into())\n+            }\n+            StatementKind::Coverage(_)\n+            | StatementKind::Intrinsic(_)\n+            | StatementKind::Nop\n+            | StatementKind::ConstEvalCounter => None,\n+        };\n+        if let Some(place_for_ty) = place_for_ty\n+            && let ty = place_for_ty.ty(self.local_decls, self.tcx).ty\n+            && self.known_to_be_zst(ty)\n+            && self.tcx.consider_optimizing(|| {\n+                format!(\"RemoveZsts - Place: {:?} SourceInfo: {:?}\", place_for_ty, statement.source_info)\n+            })\n+        {\n+            statement.make_nop();\n+        } else {\n+            self.super_statement(statement, loc);\n+        }\n+    }\n+}"}, {"sha": "c5ce044dd53f0ba8a4b5880347c6a046743fb325", "filename": "tests/debuginfo/type-names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Ftype-names.rs?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -175,7 +175,6 @@\n // 0-sized structs appear to be optimized away in some cases, so only check the structs that do\n // actually appear.\n // cdb-command:dv /t *_struct\n-// cdb-check:struct type_names::GenericStruct<enum2$<type_names::mod1::Enum2>,f64> mut_generic_struct = [...]\n \n // ENUMS\n // cdb-command:dv /t *_enum_*"}, {"sha": "7e77c18d5758ee8c5930c1c07c4e16f9245e69aa", "filename": "tests/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -14,7 +14,6 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n           _2 = begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL"}, {"sha": "85dedf68ce925efc94ea8ee96f28a97fcafc6743", "filename": "tests/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -12,12 +12,10 @@\n           let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n           scope 3 {\n               debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n-              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n               scope 5 {\n-                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n-                  let _7: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n                   scope 7 {\n-                      debug _non_utf8_str => _7; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                      debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n                   }\n               }\n               scope 6 {\n@@ -52,10 +50,6 @@\n +                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n           StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n           StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n-          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n-          StorageLive(_7);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n-          StorageDead(_7);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n-          StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n           StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n           return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2"}, {"sha": "e31c2bc39388be10c706214f6f33331f77ffd9c3", "filename": "tests/mir-opt/const_prop/invalid_constant.main.RemoveZsts.diff", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.RemoveZsts.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -0,0 +1,76 @@\n+- // MIR for `main` before RemoveZsts\n++ // MIR for `main` after RemoveZsts\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:+0:11: +0:11\n+      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:+6:34: +6:63\n+      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:+13:25: +13:59\n+      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:+13:34: +13:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:+20:35: +20:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:+20:44: +20:65\n+      scope 1 {\n+          debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          scope 3 {\n+              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:+13:9: +13:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+              scope 5 {\n+-                 debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n++                 debug _enum_without_variants => const [ZeroSized: Empty]; // in scope 5 at $DIR/invalid_constant.rs:+20:9: +20:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  scope 7 {\n+-                     debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n++                     debug _non_utf8_str => const Str::<\"\ufffd\ufffd\ufffd\">; // in scope 7 at $DIR/invalid_constant.rs:+24:9: +24:22\n+                  }\n+              }\n+              scope 6 {\n+              }\n+          }\n+          scope 4 {\n+          }\n+      }\n+      scope 2 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:+6:9: +6:22\n+          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          _2 = InvalidChar { int: const 1114113_u32 }; // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:63\n+          _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:+6:34: +6:67\n+          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:+6:69: +6:70\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:+13:9: +13:21\n+          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:25: +13:59\n+          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          _5 = InvalidTag { int: const 4_u32 }; // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:55\n+          _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:+13:34: +13:57\n+          _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:+13:24: +13:60\n+          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:+13:59: +13:60\n+          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:+13:60: +13:61\n+-         StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n+-         StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n++         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:9: +20:31\n++         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:35: +20:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+          _8 = NoVariants { int: const 0_u32 }; // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:65\n+-         _7 = (_8.1: Empty);              // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n+-         _6 = [move _7];                  // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n+-         StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n++         nop;                             // scope 6 at $DIR/invalid_constant.rs:+20:44: +20:71\n++         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:34: +20:74\n++         nop;                             // scope 3 at $DIR/invalid_constant.rs:+20:73: +20:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:+20:74: +20:75\n+-         StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n+-         _0 = const ();                   // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n+-         StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n+-         StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n++         nop;                             // scope 5 at $DIR/invalid_constant.rs:+24:9: +24:22\n++         nop;                             // scope 0 at $DIR/invalid_constant.rs:+0:11: +27:2\n++         nop;                             // scope 5 at $DIR/invalid_constant.rs:+27:1: +27:2\n++         nop;                             // scope 3 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:+27:1: +27:2\n+          return;                          // scope 0 at $DIR/invalid_constant.rs:+27:2: +27:2\n+      }\n+  }\n+  "}, {"sha": "eb6172cdff90f0cfaacef884a70240c4a99a6259", "filename": "tests/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -11,6 +11,7 @@ enum E { A, B, C }\n #[derive(Copy, Clone)]\n enum Empty {}\n \n+// EMIT_MIR invalid_constant.main.RemoveZsts.diff\n // EMIT_MIR invalid_constant.main.ConstProp.diff\n fn main() {\n     // An invalid char."}, {"sha": "a4f9003e1401eaa4ced15b9785ae05e90f172df0", "filename": "tests/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -5,14 +5,10 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue_66971.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n       let mut _2: ((), u8, u8);            // in scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-      let mut _3: ();                      // in scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          StorageLive(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:13: +1:15\n-          _2 = (move _3, const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n-          StorageDead(_3);                 // scope 0 at $DIR/issue_66971.rs:+1:21: +1:22\n+          _2 = (const (), const 0_u8, const 0_u8); // scope 0 at $DIR/issue_66971.rs:+1:12: +1:22\n           _1 = encode(move _2) -> bb1;     // scope 0 at $DIR/issue_66971.rs:+1:5: +1:23\n                                            // mir::Constant\n                                            // + span: $DIR/issue_66971.rs:17:5: 17:11\n@@ -21,7 +17,6 @@\n   \n       bb1: {\n           StorageDead(_2);                 // scope 0 at $DIR/issue_66971.rs:+1:22: +1:23\n-          StorageDead(_1);                 // scope 0 at $DIR/issue_66971.rs:+1:23: +1:24\n           return;                          // scope 0 at $DIR/issue_66971.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "f456a321204989d74c172b6aa781b4737f5bc741", "filename": "tests/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -8,7 +8,6 @@\n       let mut _3: (u8, u8);                // in scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue_67019.rs:+1:5: +1:20\n           StorageLive(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:10: +1:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n -         _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue_67019.rs:+1:11: +1:17\n@@ -23,7 +22,6 @@\n   \n       bb1: {\n           StorageDead(_2);                 // scope 0 at $DIR/issue_67019.rs:+1:19: +1:20\n-          StorageDead(_1);                 // scope 0 at $DIR/issue_67019.rs:+1:20: +1:21\n           return;                          // scope 0 at $DIR/issue_67019.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "1151caaabbc1275ee0481a8c3caed00049d70e58", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -12,7 +12,6 @@\n   \n       bb0: {\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n-          StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n -         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n +         _2 = consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n                                            // mir::Constant\n@@ -21,7 +20,6 @@\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:15: +2:16\n           return;                          // scope 0 at $DIR/scalar_literal_propagation.rs:+3:2: +3:2\n       }\n   }"}, {"sha": "d370abce45a473caef323513c9b3e3b01361c132", "filename": "tests/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -13,15 +13,13 @@\n       bb0: {\n -         _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n +         _1 = const (1_u32, 2_u32);       // scope 0 at $DIR/tuple_literal_propagation.rs:+1:13: +1:19\n-          StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n           _2 = consume(_1) -> bb1;         // scope 1 at $DIR/tuple_literal_propagation.rs:+3:5: +3:15\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:+3:15: +3:16\n           return;                          // scope 0 at $DIR/tuple_literal_propagation.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "ed290063a930545cba8d4bbd7e1adf4f20a5b262", "filename": "tests/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -7,7 +7,7 @@\n +     scope 1 (inlined foo) {              // at $DIR/asm_unwind.rs:21:5: 21:10\n +         let _2: D;                       // in scope 1 at $DIR/asm_unwind.rs:15:9: 15:11\n +         scope 2 {\n-+             debug _d => _2;              // in scope 2 at $DIR/asm_unwind.rs:15:9: 15:11\n++             debug _d => const D;         // in scope 2 at $DIR/asm_unwind.rs:15:9: 15:11\n +             scope 3 {\n +             }\n +         }\n@@ -19,21 +19,21 @@\n -                                          // mir::Constant\n -                                          // + span: $DIR/asm_unwind.rs:21:5: 21:8\n -                                          // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }\n-+         StorageLive(_2);                 // scope 1 at $DIR/asm_unwind.rs:15:9: 15:11\n-+         asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb3]; // scope 3 at $DIR/asm_unwind.rs:16:14: 16:54\n++         StorageLive(_2);                 // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n++         asm!(\"\", options(MAY_UNWIND)) -> [return: bb2, unwind: bb3]; // scope 3 at $DIR/asm_unwind.rs:16:14: 16:54\n       }\n   \n       bb1: {\n-+         drop(_2) -> bb2;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n-+     }\n-+ \n-+     bb2: {\n-+         StorageDead(_2);                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n++         StorageDead(_2);                 // scope 0 at $DIR/asm_unwind.rs:+1:5: +1:10\n           StorageDead(_1);                 // scope 0 at $DIR/asm_unwind.rs:+1:10: +1:11\n           _0 = const ();                   // scope 0 at $DIR/asm_unwind.rs:+0:15: +2:2\n           return;                          // scope 0 at $DIR/asm_unwind.rs:+2:2: +2:2\n +     }\n + \n++     bb2: {\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n++     }\n++ \n +     bb3 (cleanup): {\n +         drop(_2) -> bb4;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n +     }"}, {"sha": "20d313aecf5880f04a79381bf75aa7752078ccf9", "filename": "tests/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:8: +0:8\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {main};             // in scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -25,14 +25,16 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:12: +1:13\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:8: +2:2\n@@ -48,9 +50,8 @@\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }"}, {"sha": "dacc5f4be9d7fb5b47465586113f58c02cc77680", "filename": "tests/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -5,11 +5,11 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n       let _1: ();                          // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +     let mut _2: fn() {g};                // in scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -25,14 +25,16 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n++         StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:10\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +2:2\n@@ -48,9 +50,8 @@\n +     }\n + \n +     bb4: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }"}, {"sha": "dd1f253cb47dd46f15dec6ba20fcf89ad839bfea", "filename": "tests/mir-opt/inline/exponential_runtime.main.Inline.diff", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -18,9 +18,13 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n -         _1 = <() as G>::call() -> bb1;   // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n-+         StorageLive(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         StorageLive(_5);                 // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n-+         _5 = <() as E>::call() -> bb3;   // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n++         StorageLive(_2);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_3);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_4);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageLive(_5);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         StorageLive(_6);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         StorageLive(_7);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         _5 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n                                            // mir::Constant\n -                                          // + span: $DIR/exponential_runtime.rs:86:5: 86:20\n -                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n@@ -29,47 +33,43 @@\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:25: 74:26\n-+         StorageLive(_4);                 // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n-+         _4 = <() as F>::call() -> bb2;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n-+                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n-+     }\n-+ \n-+     bb2: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/exponential_runtime.rs:75:25: 75:26\n++         StorageDead(_4);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageDead(_3);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n++         StorageDead(_2);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n           StorageDead(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:22: +1:23\n           _0 = const ();                   // scope 0 at $DIR/exponential_runtime.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/exponential_runtime.rs:+2:2: +2:2\n +     }\n + \n++     bb2: {\n++         StorageDead(_7);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         StorageDead(_6);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         StorageDead(_5);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         _3 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++     }\n++ \n +     bb3: {\n-+         StorageDead(_5);                 // scope 2 at $DIR/exponential_runtime.rs:61:25: 61:26\n-+         StorageLive(_6);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n-+         _6 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         _4 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n-+                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb4: {\n-+         StorageDead(_6);                 // scope 2 at $DIR/exponential_runtime.rs:62:25: 62:26\n-+         StorageLive(_7);                 // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n-+         _7 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++         _6 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n++                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n +                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n +     }\n + \n +     bb5: {\n-+         StorageDead(_7);                 // scope 2 at $DIR/exponential_runtime.rs:63:25: 63:26\n-+         StorageDead(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:25: 73:26\n-+         StorageLive(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n-+         _3 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _7 = <() as E>::call() -> bb2;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n +                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n-+                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n++                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "0215b3d93f9e38ed4af14b181ac7644010a50f6a", "filename": "tests/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -5,10 +5,10 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +     let mut _2: fn() {f};                // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n++     let mut _4: ();                      // in scope 0 at $DIR/inline_cycle.rs:54:5: 54:8\n +     scope 1 (inlined call::<fn() {f}>) { // at $DIR/inline_cycle.rs:49:5: 49:12\n +         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n +         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         let mut _4: ();                  // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n +         }\n +     }\n@@ -24,14 +24,15 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline_cycle.rs:49:10: 49:11\n                                            // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageLive(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         _4 = const ();                   // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         _3 = move _2() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:7: 54:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:8: 54:9\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         StorageDead(_3);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n +         StorageDead(_2);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:12: +1:13\n           _0 = const ();                   // scope 0 at $DIR/inline_cycle.rs:+0:10: +2:2"}, {"sha": "4f22ad43700ac27e783bea4682f95e4e87abc22b", "filename": "tests/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -34,7 +34,7 @@\n       bb2: {\n           StorageLive(_6);                 // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n -         _6 = panic();                    // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n-+         StorageLive(_7);                 // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n++         StorageLive(_7);                 // scope 0 at $DIR/inline_diverging.rs:+4:9: +4:16\n +         _7 = begin_panic::<&str>(const \"explicit panic\"); // scope 1 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_diverging.rs:16:9: 16:14"}, {"sha": "31208e0052c6f65ebaac4daa12861a3e849a290a", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -5,19 +5,18 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n +     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++     let mut _8: ();                      // in scope 0 at $DIR/inline_diverging.rs:27:13: 27:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline_diverging.rs:22:5: 22:22\n +         debug f => _2;                   // in scope 1 at $DIR/inline_diverging.rs:26:36: 26:37\n +         let _3: !;                       // in scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n +         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n-+         let mut _5: ();                  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         let mut _7: ();                  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:16\n-+         let mut _8: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         let mut _9: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n++         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n++         let mut _6: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n++         let mut _7: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n +         scope 2 {\n +             debug a => _3;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10\n +             scope 3 {\n-+                 debug b => _9;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n++                 debug b => _7;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n +             }\n +         }\n +         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n@@ -35,21 +34,21 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline_diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         StorageLive(_9);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_7);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n +         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n-+         StorageLive(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         StorageLive(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n++         _8 = const ();                   // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n +         _3 = move (*_4)() -> [return: bb6, unwind: bb4]; // scope 4 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +     }\n + \n +     bb1: {\n-+         StorageDead(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n-+         StorageDead(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n-+         StorageLive(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _8 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _1 = (move _8, move _9);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n-+         StorageDead(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n++         StorageDead(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n++         StorageLive(_6);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _6 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _1 = (move _6, move _7);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         StorageDead(_6);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n +         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +         drop(_2) -> bb2;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n@@ -71,12 +70,11 @@\n +     }\n + \n +     bb6: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageDead(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n +         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n-+         StorageLive(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         _6 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         StorageLive(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n-+         _9 = <fn() -> ! {sleep} as Fn<()>>::call(move _6, move _7) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++         StorageLive(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         _5 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         _7 = <fn() -> ! {sleep} as Fn<()>>::call(move _5, const ()) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n +                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }"}, {"sha": "abe26bd8ce363a820e0ad2937e31801d9e4f89af", "filename": "tests/mir-opt/inline/inline_options.main.Inline.after.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_options.main.Inline.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -21,35 +21,35 @@ fn main() -> () {\n     bb1: {\n         StorageDead(_1);                 // scope 0 at $DIR/inline_options.rs:+1:18: +1:19\n         StorageLive(_2);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n-        StorageLive(_3);                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n-        _3 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n+        StorageLive(_3);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageLive(_4);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageLive(_5);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        _3 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:16:23: 16:26\n                                          // mir::Constant\n                                          // + span: $DIR/inline_options.rs:16:23: 16:24\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_3);                 // scope 1 at $DIR/inline_options.rs:16:26: 16:27\n-        StorageLive(_4);                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n-        _4 = g() -> bb3;                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n-                                         // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:28: 16:29\n-                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n+        StorageDead(_5);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageDead(_4);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageDead(_3);                 // scope 0 at $DIR/inline_options.rs:+2:5: +2:21\n+        StorageDead(_2);                 // scope 0 at $DIR/inline_options.rs:+2:21: +2:22\n+        _0 = const ();                   // scope 0 at $DIR/inline_options.rs:+0:11: +3:2\n+        return;                          // scope 0 at $DIR/inline_options.rs:+3:2: +3:2\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 1 at $DIR/inline_options.rs:16:31: 16:32\n-        StorageLive(_5);                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n-        _5 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+        _4 = g() -> bb4;                 // scope 1 at $DIR/inline_options.rs:16:28: 16:31\n                                          // mir::Constant\n-                                         // + span: $DIR/inline_options.rs:16:33: 16:34\n+                                         // + span: $DIR/inline_options.rs:16:28: 16:29\n                                          // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_5);                 // scope 1 at $DIR/inline_options.rs:16:36: 16:37\n-        StorageDead(_2);                 // scope 0 at $DIR/inline_options.rs:+2:21: +2:22\n-        _0 = const ();                   // scope 0 at $DIR/inline_options.rs:+0:11: +3:2\n-        return;                          // scope 0 at $DIR/inline_options.rs:+3:2: +3:2\n+        _5 = g() -> bb2;                 // scope 1 at $DIR/inline_options.rs:16:33: 16:36\n+                                         // mir::Constant\n+                                         // + span: $DIR/inline_options.rs:16:33: 16:34\n+                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n     }\n }"}, {"sha": "a98c294cacbe9ec8106570cb564f2dd347eb78c1", "filename": "tests/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -10,10 +10,9 @@ fn main() -> () {\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n         scope 2 (inlined main::{closure#0}) { // at $DIR/issue_76997_inline_scopes_parenting.rs:6:5: 6:10\n-            debug x => _5;               // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:14: +1:15\n-            let _6: ();                  // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n+            debug x => const ();         // in scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:14: +1:15\n             scope 3 {\n-                debug y => _6;           // in scope 3 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n+                debug y => const ();     // in scope 3 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n             }\n         }\n     }\n@@ -36,8 +35,6 @@ fn main() -> () {\n         _3 = (move _4,);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageLive(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         _5 = move (_3.0: ());            // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n-        StorageLive(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:23: +1:24\n-        StorageDead(_6);                 // scope 2 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:32: +1:33\n         StorageDead(_5);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:5: +2:10\n         StorageDead(_4);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10\n         StorageDead(_3);                 // scope 1 at $DIR/issue_76997_inline_scopes_parenting.rs:+2:9: +2:10"}, {"sha": "7031c3f3e6990835593b4719285d03d9f55038a9", "filename": "tests/mir-opt/intrinsic_asserts.generic.InstCombine.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -8,33 +8,33 @@\n       let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n           _1 = assert_inhabited::<T>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:25:5: 25:44\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:46: +1:47\n-          StorageLive(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:46: +1:47\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n           _2 = assert_zero_valid::<T>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:26:5: 26:45\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:47: +2:48\n-          StorageLive(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:47: +2:48\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n           _3 = assert_mem_uninitialized_valid::<T>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:27:5: 27:58\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<T>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:60: +3:61\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:60: +3:61\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:21: +4:2\n           return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2\n       }"}, {"sha": "4caa9971fef8076a6011f447ba9c3107f358215e", "filename": "tests/mir-opt/intrinsic_asserts.panics.InstCombine.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -8,7 +8,7 @@\n       let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n -         _1 = assert_inhabited::<Never>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n +         _1 = assert_inhabited::<Never>(); // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n                                            // mir::Constant\n@@ -17,8 +17,8 @@\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:50: +1:51\n-          StorageLive(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:50: +1:51\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n -         _2 = assert_zero_valid::<&u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n +         _2 = assert_zero_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n                                            // mir::Constant\n@@ -28,8 +28,8 @@\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:49: +2:50\n-          StorageLive(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:49: +2:50\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n -         _3 = assert_mem_uninitialized_valid::<&u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n +         _3 = assert_mem_uninitialized_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n                                            // mir::Constant\n@@ -39,7 +39,7 @@\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:62: +3:63\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:62: +3:63\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:17: +4:2\n           return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2\n       }"}, {"sha": "b0bec95736971b58fbf86ad907430aa71035d718", "filename": "tests/mir-opt/intrinsic_asserts.removable.InstCombine.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -8,7 +8,7 @@\n       let _3: ();                          // in scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n -         _1 = assert_inhabited::<()>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:7:5: 7:45\n@@ -17,8 +17,8 @@\n       }\n   \n       bb1: {\n-          StorageDead(_1);                 // scope 0 at $DIR/intrinsic_asserts.rs:+1:47: +1:48\n-          StorageLive(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:47: +1:48\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n -         _2 = assert_zero_valid::<u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:8:5: 8:46\n@@ -27,8 +27,8 @@\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/intrinsic_asserts.rs:+2:48: +2:49\n-          StorageLive(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:48: +2:49\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n -         _3 = assert_mem_uninitialized_valid::<u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:9:5: 9:59\n@@ -37,7 +37,7 @@\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 0 at $DIR/intrinsic_asserts.rs:+3:61: +3:62\n+          nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:61: +3:62\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+0:20: +4:2\n           return;                          // scope 0 at $DIR/intrinsic_asserts.rs:+4:2: +4:2\n       }"}, {"sha": "abb89b91dd36d71f29cc4aed88c82a025eb45f93", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -42,7 +42,6 @@\n       }\n   \n       bb1: {\n-          StorageLive(_15);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _15 = core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL"}, {"sha": "6e28fb61b6bd731551cd7d72edd76a2dc8ec329f", "filename": "tests/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -66,7 +66,6 @@ fn num_to_digit(_1: char) -> u32 {\n     }\n \n     bb6: {\n-        StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         _8 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL"}, {"sha": "adfc6b2731c1a545149cfe2683dd7cfcface1f50", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -12,15 +12,13 @@ fn f_u64() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n         _2 = f_non_zst::<u64>(const 0_u64) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:23:9: 23:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:21: 23:22\n         StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n         return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n     }"}, {"sha": "302ca09aac4b2efeb5c7a659429124a76b44a8b9", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -2,26 +2,21 @@\n \n fn f_unit() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:17: +0:17\n-    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:16: +1:18\n     scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics_e2e.rs:9:5: 9:19\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        debug t => const ();             // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n+        let _1: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n         scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:16: +1:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n-        _2 = f_zst::<()>(move _1) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        _1 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:17: 21:18\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:18: +1:19\n         return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n     }\n }"}, {"sha": "7713649c5b96b07ec58bbbc1f82aaf519cd9f1de", "filename": "tests/mir-opt/remove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -11,7 +11,7 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n+          nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n           _3 = move _1;                    // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n           drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n@@ -23,7 +23,7 @@\n   \n       bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:11: +1:12\n-          StorageDead(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n+          nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n           nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+0:32: +2:2\n           return;                          // scope 0 at $DIR/remove_unneeded_drops.rs:+2:2: +2:2\n       }"}, {"sha": "533db4051ef1fbcc64084e523ba255846fad31a7", "filename": "tests/mir-opt/remove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -11,7 +11,7 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n+          nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n           _3 = move _1;                    // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n           drop(_3) -> [return: bb2, unwind: bb1]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n@@ -23,7 +23,7 @@\n   \n       bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:11: +1:12\n-          StorageDead(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n+          nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n           nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+0:27: +2:2\n           return;                          // scope 0 at $DIR/remove_unneeded_drops.rs:+2:2: +2:2\n       }"}, {"sha": "04a2d54e9a19baaca5467b7543a5f3c63ccdaff2", "filename": "tests/mir-opt/remove_unneeded_drops.opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -11,15 +11,15 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n+-         nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n           _3 = _1;                         // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n -         drop(_3) -> bb1;                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n -     }\n - \n -     bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:11: +1:12\n-          StorageDead(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n+-         nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n -         nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+0:17: +2:2\n           return;                          // scope 0 at $DIR/remove_unneeded_drops.rs:+2:2: +2:2\n       }"}, {"sha": "782d0c6c5f267e6be877be922e0d6eeb2a890e1b", "filename": "tests/mir-opt/remove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -11,15 +11,15 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n+-         nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:5: +1:12\n           StorageLive(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n           _3 = _1;                         // scope 0 at $DIR/remove_unneeded_drops.rs:+1:10: +1:11\n -         drop(_3) -> bb1;                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n -     }\n - \n -     bb1: {\n           StorageDead(_3);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:11: +1:12\n-          StorageDead(_2);                 // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n+-         nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+1:12: +1:13\n -         nop;                             // scope 0 at $DIR/remove_unneeded_drops.rs:+0:36: +2:2\n           return;                          // scope 0 at $DIR/remove_unneeded_drops.rs:+2:2: +2:2\n       }"}, {"sha": "7ac9ef3d49013b631118e7f6d9412e863f02b065", "filename": "tests/mir-opt/remove_zsts.get_union.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_zsts.get_union.PreCodegen.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -2,12 +2,9 @@\n \n fn get_union() -> Foo {\n     let mut _0: Foo;                     // return place in scope 0 at $DIR/remove_zsts.rs:+0:19: +0:22\n-    let mut _1: ();                      // in scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n-        _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n-        StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n+        _0 = Foo { x: const () };        // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n         return;                          // scope 0 at $DIR/remove_zsts.rs:+2:2: +2:2\n     }\n }"}, {"sha": "edd86ef0aa97a5bfab4484492e8553eecd4f1edd", "filename": "tests/mir-opt/remove_zsts.get_union.RemoveZsts.diff", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fremove_zsts.get_union.RemoveZsts.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -6,11 +6,14 @@\n       let mut _1: ();                      // in scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n+-         StorageLive(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n -         _1 = ();                         // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n+-         _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n+-         StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n +         nop;                             // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n-          _0 = Foo { x: move _1 };         // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n-          StorageDead(_1);                 // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n++         nop;                             // scope 0 at $DIR/remove_zsts.rs:+1:14: +1:16\n++         _0 = Foo { x: const () };        // scope 0 at $DIR/remove_zsts.rs:+1:5: +1:18\n++         nop;                             // scope 0 at $DIR/remove_zsts.rs:+1:17: +1:18\n           return;                          // scope 0 at $DIR/remove_zsts.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "cae89fb177a7c2d63e02bcc5e85b9c9fda0a9015", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -3,47 +3,40 @@\n fn ezmap(_1: Option<i32>) -> Option<i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n     let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n-    let mut _2: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n     scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n         debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n-        debug f => _2;                   // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n-        let mut _3: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n-        let _4: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        let mut _5: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        debug f => const ZeroSized: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n+        let mut _2: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n+        let _3: i32;                     // in scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         scope 2 {\n-            debug x => _4;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+            debug x => _3;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n             scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-                debug n => _4;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n+                debug n => _3;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n-        _3 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n-        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n+        _2 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n+        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n     }\n \n     bb1: {\n         _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n-        goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+        return;                          // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n     }\n \n     bb2: {\n         unreachable;                     // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n     }\n \n     bb3: {\n-        _4 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n-        StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n-        _5 = Add(_4, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n-        _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n-        StorageDead(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n-        goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n-    }\n-\n-    bb4: {\n-        StorageDead(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:21: +1:22\n-        return;                          // scope 0 at $DIR/simple_option_map_e2e.rs:+2:2: +2:2\n+        _3 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        _4 = Add(_3, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n+        _0 = Option::<i32>::Some(move _4); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n+        return;                          // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n     }\n }"}, {"sha": "ac79e72701344366c3f82bee1054e23ebe664f0c", "filename": "tests/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e386217dd996d293b3bde2285f6f5f4f502d7c17/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=e386217dd996d293b3bde2285f6f5f4f502d7c17", "patch": "@@ -14,15 +14,13 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:+2:9: +2:15\n           _2 = noop() -> bb2;              // scope 0 at $DIR/simplify_if.rs:+2:9: +2:15\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_if.rs:+2:15: +2:16\n           goto -> bb4;                     // scope 0 at $DIR/simplify_if.rs:+1:5: +3:6\n       }\n   "}]}