{"sha": "fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjODc2NWQ2ZDg2MjNiMmI1YjRjYTFkNTI2ZWQxZDdiZWIzZmNlMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T01:02:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-18T01:02:20Z"}, "message": "Auto merge of #61708 - dlrobertson:or-patterns-0, r=centril\n\nInitial implementation of or-patterns\n\nAn incomplete implementation of or-patterns (e.g. `Some(0 | 1)` as a pattern). This patch set aims to implement initial parsing of `or-patterns`.\n\nRelated to: #54883\n\nCC @alexreg @varkor\nr? @Centril", "tree": {"sha": "8401657213f0b7a7805fb2915902396d424e02bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8401657213f0b7a7805fb2915902396d424e02bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "html_url": "https://github.com/rust-lang/rust/commit/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1da18b04afba5dfc09ad1b56df3285f1d039c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1da18b04afba5dfc09ad1b56df3285f1d039c3", "html_url": "https://github.com/rust-lang/rust/commit/bd1da18b04afba5dfc09ad1b56df3285f1d039c3"}, {"sha": "1870537f2701e5aa47080a879b63a4d6b391553b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1870537f2701e5aa47080a879b63a4d6b391553b", "html_url": "https://github.com/rust-lang/rust/commit/1870537f2701e5aa47080a879b63a4d6b391553b"}], "stats": {"total": 292, "additions": 241, "deletions": 51}, "files": [{"sha": "8ebacb44d37cc2151f4883020e499d23f9bab0ef", "filename": "src/doc/unstable-book/src/language-features/or-patterns.md", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -0,0 +1,36 @@\n+# `or_patterns`\n+\n+The tracking issue for this feature is: [#54883]\n+\n+[#54883]: https://github.com/rust-lang/rust/issues/54883\n+\n+------------------------\n+\n+The `or_pattern` language feature allows `|` to be arbitrarily nested within\n+a pattern, for example, `Some(A(0) | B(1 | 2))` becomes a valid pattern.\n+\n+## Examples\n+\n+```rust,ignore\n+#![feature(or_patterns)]\n+\n+pub enum Foo {\n+    Bar,\n+    Baz,\n+    Quux,\n+}\n+\n+pub fn example(maybe_foo: Option<Foo>) {\n+    match maybe_foo {\n+        Some(Foo::Bar | Foo::Baz) => {\n+            println!(\"The value contained `Bar` or `Baz`\");\n+        }\n+        Some(_) => {\n+            println!(\"The value did not contain `Bar` or `Baz`\");\n+        }\n+        None => {\n+            println!(\"The value was `None`\");\n+        }\n+    }\n+}\n+```"}, {"sha": "0dad2dda837b53f236a86499a3fa97db7af725cb", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -140,6 +140,11 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_ast_node(pat.hir_id.local_id, &[pats_exit])\n             }\n \n+            PatKind::Or(ref pats) => {\n+                let branches: Vec<_> = pats.iter().map(|p| self.pat(p, pred)).collect();\n+                self.add_ast_node(pat.hir_id.local_id, &branches)\n+            }\n+\n             PatKind::Slice(ref pre, ref vec, ref post) => {\n                 let pre_exit = self.pats_all(pre.iter(), pred);\n                 let vec_exit = self.pats_all(vec.iter(), pre_exit);"}, {"sha": "2c6373bdfa40d35732b1a2817f8e3e8e00a8d208", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -709,6 +709,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n                 visitor.visit_pat(&field.pat)\n             }\n         }\n+        PatKind::Or(ref pats) => walk_list!(visitor, visit_pat, pats),\n         PatKind::Tuple(ref tuple_elements, _) => {\n             walk_list!(visitor, visit_pat, tuple_elements);\n         }"}, {"sha": "d2ea485b5db8246d37a43d0ff0b54cc185dd1b2c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -2669,6 +2669,9 @@ impl<'a> LoweringContext<'a> {\n                 let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                 hir::PatKind::TupleStruct(qpath, pats, ddpos)\n             }\n+            PatKind::Or(ref pats) => {\n+                hir::PatKind::Or(pats.iter().map(|x| self.lower_pat(x)).collect())\n+            }\n             PatKind::Path(ref qself, ref path) => {\n                 let qpath = self.lower_qpath(\n                     p.id,"}, {"sha": "b469b7016beb7fecd46ba0c63dd14b1ac3e9cc87", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -881,6 +881,7 @@ impl Pat {\n             PatKind::TupleStruct(_, ref s, _) | PatKind::Tuple(ref s, _) => {\n                 s.iter().all(|p| p.walk_(it))\n             }\n+            PatKind::Or(ref pats) => pats.iter().all(|p| p.walk_(it)),\n             PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n                 s.walk_(it)\n             }\n@@ -975,6 +976,10 @@ pub enum PatKind {\n     /// `0 <= position <= subpats.len()`\n     TupleStruct(QPath, HirVec<P<Pat>>, Option<usize>),\n \n+    /// An or-pattern `A | B | C`.\n+    /// Invariant: `pats.len() >= 2`.\n+    Or(HirVec<P<Pat>>),\n+\n     /// A path pattern for an unit struct/variant or a (maybe-associated) constant.\n     Path(QPath),\n "}, {"sha": "632a13f9183b2c7c7f3b0feb172497cfd54f6972", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1687,6 +1687,9 @@ impl<'a> State<'a> {\n                 self.s.space();\n                 self.s.word(\"}\");\n             }\n+            PatKind::Or(ref pats) => {\n+                self.strsep(\"|\", true, Inconsistent, &pats[..], |s, p| s.print_pat(&p));\n+            }\n             PatKind::Tuple(ref elts, ddpos) => {\n                 self.popen();\n                 if let Some(ddpos) = ddpos {"}, {"sha": "73ca981bbe868513cebb0039080d23097c323509", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1290,6 +1290,12 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                 }\n             }\n \n+            PatKind::Or(ref pats) => {\n+                for pat in pats {\n+                    self.cat_pattern_(cmt.clone(), &pat, op)?;\n+                }\n+            }\n+\n             PatKind::Binding(.., Some(ref subpat)) => {\n                 self.cat_pattern_(cmt, &subpat, op)?;\n             }"}, {"sha": "94323b15b696fb3ba91aa1460317ea2eddec56b1", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -657,6 +657,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.visit_bindings(&subpattern.pattern, subpattern_user_ty, f);\n                 }\n             }\n+            PatternKind::Or { ref pats } => {\n+                for pat in pats {\n+                    self.visit_bindings(&pat, pattern_user_ty.clone(), f);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "8d049b53988a9197f78c2e4aedd4f839f7a079e9", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -195,6 +195,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 candidate.match_pairs.push(MatchPair::new(place, subpattern));\n                 Ok(())\n             }\n+\n+            PatternKind::Or { .. } => {\n+                Err(match_pair)\n+            }\n         }\n     }\n }"}, {"sha": "ec85daccd476eb49efa6a7c729dcea23c0a5ad17", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -87,6 +87,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatternKind::AscribeUserType { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n+            PatternKind::Or { .. } |\n             PatternKind::Binding { .. } |\n             PatternKind::Leaf { .. } |\n             PatternKind::Deref { .. } => {\n@@ -130,6 +131,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatternKind::Slice { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n+            PatternKind::Or { .. } |\n             PatternKind::Binding { .. } |\n             PatternKind::AscribeUserType { .. } |\n             PatternKind::Leaf { .. } |"}, {"sha": "222750e602df92f5ff30b37c5230b3c94086e105", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1359,6 +1359,9 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n                 Some(vec![Slice(pat_len)])\n             }\n         }\n+        PatternKind::Or { .. } => {\n+            bug!(\"support for or-patterns has not been fully implemented yet.\");\n+        }\n     }\n }\n \n@@ -1884,6 +1887,10 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n                     \"unexpected ctor {:?} for slice pat\", constructor)\n             }\n         }\n+\n+        PatternKind::Or { .. } => {\n+            bug!(\"support for or-patterns has not been fully implemented yet.\");\n+        }\n     };\n     debug!(\"specialize({:#?}, {:#?}) = {:#?}\", r[0], wild_patterns, head);\n "}, {"sha": "6caccfddfa422f6724180e8199b5d1824edae489", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -175,6 +175,12 @@ pub enum PatternKind<'tcx> {\n         slice: Option<Pattern<'tcx>>,\n         suffix: Vec<Pattern<'tcx>>,\n     },\n+\n+    /// An or-pattern, e.g. `p | q`.\n+    /// Invariant: `pats.len() >= 2`.\n+    Or {\n+        pats: Vec<Pattern<'tcx>>,\n+    },\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -186,6 +192,18 @@ pub struct PatternRange<'tcx> {\n \n impl<'tcx> fmt::Display for Pattern<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Printing lists is a chore.\n+        let mut first = true;\n+        let mut start_or_continue = |s| {\n+            if first {\n+                first = false;\n+                \"\"\n+            } else {\n+                s\n+            }\n+        };\n+        let mut start_or_comma = || start_or_continue(\", \");\n+\n         match *self.kind {\n             PatternKind::Wild => write!(f, \"_\"),\n             PatternKind::AscribeUserType { ref subpattern, .. } =>\n@@ -224,9 +242,6 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                     }\n                 };\n \n-                let mut first = true;\n-                let mut start_or_continue = || if first { first = false; \"\" } else { \", \" };\n-\n                 if let Some(variant) = variant {\n                     write!(f, \"{}\", variant.ident)?;\n \n@@ -241,12 +256,12 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                                 continue;\n                             }\n                             let name = variant.fields[p.field.index()].ident;\n-                            write!(f, \"{}{}: {}\", start_or_continue(), name, p.pattern)?;\n+                            write!(f, \"{}{}: {}\", start_or_comma(), name, p.pattern)?;\n                             printed += 1;\n                         }\n \n                         if printed < variant.fields.len() {\n-                            write!(f, \"{}..\", start_or_continue())?;\n+                            write!(f, \"{}..\", start_or_comma())?;\n                         }\n \n                         return write!(f, \" }}\");\n@@ -257,7 +272,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 if num_fields != 0 || variant.is_none() {\n                     write!(f, \"(\")?;\n                     for i in 0..num_fields {\n-                        write!(f, \"{}\", start_or_continue())?;\n+                        write!(f, \"{}\", start_or_comma())?;\n \n                         // Common case: the field is where we expect it.\n                         if let Some(p) = subpatterns.get(i) {\n@@ -305,25 +320,29 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n-                let mut first = true;\n-                let mut start_or_continue = || if first { first = false; \"\" } else { \", \" };\n                 write!(f, \"[\")?;\n                 for p in prefix {\n-                    write!(f, \"{}{}\", start_or_continue(), p)?;\n+                    write!(f, \"{}{}\", start_or_comma(), p)?;\n                 }\n                 if let Some(ref slice) = *slice {\n-                    write!(f, \"{}\", start_or_continue())?;\n+                    write!(f, \"{}\", start_or_comma())?;\n                     match *slice.kind {\n                         PatternKind::Wild => {}\n                         _ => write!(f, \"{}\", slice)?\n                     }\n                     write!(f, \"..\")?;\n                 }\n                 for p in suffix {\n-                    write!(f, \"{}{}\", start_or_continue(), p)?;\n+                    write!(f, \"{}{}\", start_or_comma(), p)?;\n                 }\n                 write!(f, \"]\")\n             }\n+            PatternKind::Or { ref pats } => {\n+                for pat in pats {\n+                    write!(f, \"{}{}\", start_or_continue(\" | \"), pat)?;\n+                }\n+                Ok(())\n+            }\n         }\n     }\n }\n@@ -655,6 +674,12 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 self.lower_variant_or_leaf(res, pat.hir_id, pat.span, ty, subpatterns)\n             }\n+\n+            PatKind::Or(ref pats) => {\n+                PatternKind::Or {\n+                    pats: pats.iter().map(|p| self.lower_pattern(p)).collect(),\n+                }\n+            }\n         };\n \n         Pattern {\n@@ -1436,6 +1461,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n                 slice: slice.fold_with(folder),\n                 suffix: suffix.fold_with(folder)\n             },\n+            PatternKind::Or { ref pats } => PatternKind::Or { pats: pats.fold_with(folder) },\n         }\n     }\n }"}, {"sha": "fc25eb44cbd888888c1b01b47622e16472754230", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -53,6 +53,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let is_non_ref_pat = match pat.node {\n             PatKind::Struct(..) |\n             PatKind::TupleStruct(..) |\n+            PatKind::Or(_) |\n             PatKind::Tuple(..) |\n             PatKind::Box(_) |\n             PatKind::Range(..) |\n@@ -309,6 +310,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::Struct(ref qpath, ref fields, etc) => {\n                 self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, discrim_span)\n             }\n+            PatKind::Or(ref pats) => {\n+                let expected_ty = self.structurally_resolved_type(pat.span, expected);\n+                for pat in pats {\n+                    self.check_pat_walk(pat, expected, def_bm, discrim_span);\n+                }\n+                expected_ty\n+            }\n             PatKind::Tuple(ref elements, ddpos) => {\n                 let mut expected_len = elements.len();\n                 if ddpos.is_some() {"}, {"sha": "023d22861defaee1322c4407dd57bcd9cf6fbc8f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -4107,6 +4107,9 @@ fn name_from_pat(p: &hir::Pat) -> String {\n                 if etc { \", ..\" } else { \"\" }\n             )\n         }\n+        PatKind::Or(ref pats) => {\n+            pats.iter().map(|p| name_from_pat(&**p)).collect::<Vec<String>>().join(\" | \")\n+        }\n         PatKind::Tuple(ref elts, _) => format!(\"({})\", elts.iter().map(|p| name_from_pat(&**p))\n                                             .collect::<Vec<String>>().join(\", \")),\n         PatKind::Box(ref p) => name_from_pat(&**p),"}, {"sha": "50e428ea0cca6ce1702303a1453033182e5a6922", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -572,9 +572,10 @@ impl Pat {\n         match &self.node {\n             PatKind::Ident(_, _, Some(p)) => p.walk(it),\n             PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.pat.walk(it)),\n-            PatKind::TupleStruct(_, s) | PatKind::Tuple(s) | PatKind::Slice(s) => {\n-                s.iter().all(|p| p.walk(it))\n-            }\n+            PatKind::TupleStruct(_, s)\n+            | PatKind::Tuple(s)\n+            | PatKind::Slice(s)\n+            | PatKind::Or(s) => s.iter().all(|p| p.walk(it)),\n             PatKind::Box(s) | PatKind::Ref(s, _) | PatKind::Paren(s) => s.walk(it),\n             PatKind::Wild\n             | PatKind::Rest\n@@ -648,6 +649,10 @@ pub enum PatKind {\n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     TupleStruct(Path, Vec<P<Pat>>),\n \n+    /// An or-pattern `A | B | C`.\n+    /// Invariant: `pats.len() >= 2`.\n+    Or(Vec<P<Pat>>),\n+\n     /// A possibly qualified path pattern.\n     /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants\n     /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can"}, {"sha": "bbc3ae28225587491bc700aa5633de2eb25736d8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -559,6 +559,9 @@ declare_features! (\n     // Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n+    // Allows the use of or-patterns, e.g. `0 | 1`.\n+    (active, or_patterns, \"1.38.0\", Some(54883), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -571,6 +574,7 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::impl_trait_in_bindings,\n     sym::generic_associated_types,\n     sym::const_generics,\n+    sym::or_patterns,\n     sym::let_chains,\n ];\n \n@@ -2443,6 +2447,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(let_chains_spans, let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure_spans, async_closure, \"async closures are unstable\");\n     gate_all!(yield_spans, generators, \"yield syntax is experimental\");\n+    gate_all!(or_pattern_spans, or_patterns, \"or-patterns syntax is experimental\");\n \n     let visitor = &mut PostExpansionVisitor {\n         context: &ctx,"}, {"sha": "9785f8e2de0980e2f4e5ebe9e3f95226d33da5c9", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1050,15 +1050,16 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n                 vis.visit_span(span);\n             };\n         }\n-        PatKind::Tuple(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n         PatKind::Box(inner) => vis.visit_pat(inner),\n         PatKind::Ref(inner, _mutbl) => vis.visit_pat(inner),\n         PatKind::Range(e1, e2, Spanned { span: _, node: _ }) => {\n             vis.visit_expr(e1);\n             vis.visit_expr(e2);\n             vis.visit_span(span);\n         }\n-        PatKind::Slice(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n+        PatKind::Tuple(elems)\n+        | PatKind::Slice(elems)\n+        | PatKind::Or(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n         PatKind::Paren(inner) => vis.visit_pat(inner),\n         PatKind::Mac(mac) => vis.visit_mac(mac),\n     }"}, {"sha": "b1f3612a839a2cb41bbe106053a9187257ef7ae6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -66,6 +66,8 @@ pub struct ParseSess {\n     // Places where `yield e?` exprs were used and should be feature gated.\n     pub yield_spans: Lock<Vec<Span>>,\n     pub injected_crate_name: Once<Symbol>,\n+    // Places where or-patterns e.g. `Some(Foo | Bar)` were used and should be feature gated.\n+    pub or_pattern_spans: Lock<Vec<Span>>,\n }\n \n impl ParseSess {\n@@ -96,6 +98,7 @@ impl ParseSess {\n             async_closure_spans: Lock::new(Vec::new()),\n             yield_spans: Lock::new(Vec::new()),\n             injected_crate_name: Once::new(),\n+            or_pattern_spans: Lock::new(Vec::new()),\n         }\n     }\n "}, {"sha": "fd458aec743315792463c1e3d0024734b6d3a5a3", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -14,7 +14,10 @@ use errors::{Applicability, DiagnosticBuilder};\n \n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n-    pub fn parse_pat(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n+    pub fn parse_pat(\n+        &mut self,\n+        expected: Option<&'static str>\n+    ) -> PResult<'a, P<Pat>> {\n         self.parse_pat_with_range_pat(true, expected)\n     }\n \n@@ -97,6 +100,34 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    /// Parses a pattern, that may be a or-pattern (e.g. `Some(Foo | Bar)`).\n+    fn parse_pat_with_or(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n+        // Parse the first pattern.\n+        let first_pat = self.parse_pat(expected)?;\n+\n+        // If the next token is not a `|`, this is not an or-pattern and\n+        // we should exit here.\n+        if !self.check(&token::BinOp(token::Or)) {\n+            return Ok(first_pat)\n+        }\n+\n+        let lo = first_pat.span;\n+\n+        let mut pats = vec![first_pat];\n+\n+        while self.eat(&token::BinOp(token::Or)) {\n+            pats.push(self.parse_pat_with_range_pat(\n+                true, expected\n+            )?);\n+        }\n+\n+        let or_pattern_span = lo.to(self.prev_span);\n+\n+        self.sess.or_pattern_spans.borrow_mut().push(or_pattern_span);\n+\n+        Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n+    }\n+\n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat(\n@@ -240,7 +271,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n+        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n+            p.parse_pat_with_or(None)\n+        })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -483,7 +516,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat(None))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -627,7 +660,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat(None)?;\n+            let pat = self.parse_pat_with_or(None)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "4dc00af486013c6973958a3d3eac9d9618eb1afa", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -436,18 +436,30 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n     fn print_ident(&mut self, ident: ast::Ident);\n     fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);\n \n-    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], mut op: F)\n+    fn strsep<T, F>(&mut self, sep: &'static str, space_before: bool,\n+                    b: Breaks, elts: &[T], mut op: F)\n         where F: FnMut(&mut Self, &T),\n     {\n         self.rbox(0, b);\n-        let mut first = true;\n-        for elt in elts {\n-            if first { first = false; } else { self.word_space(\",\"); }\n-            op(self, elt);\n+        if let Some((first, rest)) = elts.split_first() {\n+            op(self, first);\n+            for elt in rest {\n+                if space_before {\n+                    self.space();\n+                }\n+                self.word_space(sep);\n+                op(self, elt);\n+            }\n         }\n         self.end();\n     }\n \n+    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], op: F)\n+        where F: FnMut(&mut Self, &T),\n+    {\n+        self.strsep(\",\", false, b, elts, op)\n+    }\n+\n     fn maybe_print_comment(&mut self, pos: BytePos) {\n         while let Some(ref cmnt) = self.next_comment() {\n             if cmnt.pos < pos {\n@@ -2353,6 +2365,9 @@ impl<'a> State<'a> {\n                 self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n                 self.pclose();\n             }\n+            PatKind::Or(ref pats) => {\n+                self.strsep(\"|\", true, Inconsistent, &pats[..], |s, p| s.print_pat(p));\n+            }\n             PatKind::Path(None, ref path) => {\n                 self.print_path(path, true, 0);\n             }\n@@ -2429,16 +2444,7 @@ impl<'a> State<'a> {\n     }\n \n     fn print_pats(&mut self, pats: &[P<ast::Pat>]) {\n-        let mut first = true;\n-        for p in pats {\n-            if first {\n-                first = false;\n-            } else {\n-                self.s.space();\n-                self.word_space(\"|\");\n-            }\n-            self.print_pat(p);\n-        }\n+        self.strsep(\"|\", true, Inconsistent, pats, |s, p| s.print_pat(p));\n     }\n \n     fn print_arm(&mut self, arm: &ast::Arm) {"}, {"sha": "91b92d84a811fde2a3336ca6e4c2000bb1391264", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -447,9 +447,6 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n                 visitor.visit_pat(&field.pat)\n             }\n         }\n-        PatKind::Tuple(ref elems) => {\n-            walk_list!(visitor, visit_pat, elems);\n-        }\n         PatKind::Box(ref subpattern) |\n         PatKind::Ref(ref subpattern, _) |\n         PatKind::Paren(ref subpattern) => {\n@@ -465,7 +462,9 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n             visitor.visit_expr(upper_bound);\n         }\n         PatKind::Wild | PatKind::Rest => {},\n-        PatKind::Slice(ref elems) => {\n+        PatKind::Tuple(ref elems)\n+        | PatKind::Slice(ref elems)\n+        | PatKind::Or(ref elems) => {\n             walk_list!(visitor, visit_pat, elems);\n         }\n         PatKind::Mac(ref mac) => visitor.visit_mac(mac),"}, {"sha": "0b8f16bbc3b990859a99d426cf1f654443d0ce58", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -470,6 +470,7 @@ symbols! {\n         option_env,\n         opt_out_copy,\n         or,\n+        or_patterns,\n         Ord,\n         Ordering,\n         Output,"}, {"sha": "036a6095965bdd0c6689284b0db25d832d60d375", "filename": "src/test/ui/feature-gate/feature-gate-or_patterns.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -0,0 +1,9 @@\n+#![crate_type=\"lib\"]\n+\n+pub fn example(x: Option<usize>) {\n+    match x {\n+        Some(0 | 1 | 2) => {}\n+        //~^ ERROR: or-patterns syntax is experimental\n+        _ => {}\n+    }\n+}"}, {"sha": "aaabb54c1f017914a818f45d9f2f3516b51a8fa0", "filename": "src/test/ui/feature-gate/feature-gate-or_patterns.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-or_patterns.stderr?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: or-patterns syntax is experimental\n+  --> $DIR/feature-gate-or_patterns.rs:5:14\n+   |\n+LL |         Some(0 | 1 | 2) => {}\n+   |              ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n+   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f27caa5d78c8eaf42be834c1f8963dbadea97f53", "filename": "src/test/ui/parser/pat-lt-bracket-6.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -2,8 +2,9 @@ fn main() {\n     struct Test(&'static u8, [u8; 0]);\n     let x = Test(&0, []);\n \n-    let Test(&desc[..]) = x; //~ ERROR: expected one of `)`, `,`, or `@`, found `[`\n-    //~^ ERROR subslice patterns are unstable\n+    let Test(&desc[..]) = x;\n+    //~^ ERROR: expected one of `)`, `,`, `@`, or `|`, found `[`\n+    //~^^ ERROR subslice patterns are unstable\n }\n \n const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types"}, {"sha": "6f08f0a9d95ef117bf83899a3b28a08e725f7ada", "filename": "src/test/ui/parser/pat-lt-bracket-6.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-6.stderr?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `)`, `,`, or `@`, found `[`\n+error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-6.rs:5:19\n    |\n LL |     let Test(&desc[..]) = x;\n-   |                   ^ expected one of `)`, `,`, or `@` here\n+   |                   ^ expected one of `)`, `,`, `@`, or `|` here\n \n error[E0658]: subslice patterns are unstable\n   --> $DIR/pat-lt-bracket-6.rs:5:20\n@@ -14,7 +14,7 @@ LL |     let Test(&desc[..]) = x;\n    = help: add `#![feature(slice_patterns)]` to the crate attributes to enable\n \n error[E0308]: mismatched types\n-  --> $DIR/pat-lt-bracket-6.rs:9:30\n+  --> $DIR/pat-lt-bracket-6.rs:10:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer"}, {"sha": "327aef5ad15703cd16770ccdcd00dd8803c5e0ea", "filename": "src/test/ui/parser/pat-lt-bracket-7.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     struct Thing(u8, [u8; 0]);\n     let foo = core::iter::empty();\n \n-    for Thing(x[]) in foo {} //~ ERROR: expected one of `)`, `,`, or `@`, found `[`\n+    for Thing(x[]) in foo {}\n+    //~^ ERROR: expected one of `)`, `,`, `@`, or `|`, found `[`\n }\n \n const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types"}, {"sha": "196f1c0ae914f51b5f1a963e9bbd723277c8333c", "filename": "src/test/ui/parser/pat-lt-bracket-7.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-7.stderr?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1,11 +1,11 @@\n-error: expected one of `)`, `,`, or `@`, found `[`\n+error: expected one of `)`, `,`, `@`, or `|`, found `[`\n   --> $DIR/pat-lt-bracket-7.rs:5:16\n    |\n LL |     for Thing(x[]) in foo {}\n-   |                ^ expected one of `)`, `,`, or `@` here\n+   |                ^ expected one of `)`, `,`, `@`, or `|` here\n \n error[E0308]: mismatched types\n-  --> $DIR/pat-lt-bracket-7.rs:8:30\n+  --> $DIR/pat-lt-bracket-7.rs:9:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer"}, {"sha": "c6be2c90667c2626242fb4ea62b3dabd365023f5", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     let vec = vec![1, 2, 3];\n \n     for ( elem in vec ) {\n-        //~^ ERROR expected one of `)`, `,`, or `@`, found `in`\n+        //~^ ERROR expected one of `)`, `,`, `@`, or `|`, found `in`\n         //~| ERROR unexpected closing `)`\n         const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n     }"}, {"sha": "1b5b6cca09243a63f1746cf1d836933148611bd5", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=fc8765d6d8623b2b5b4ca1d526ed1d7beb3fce18", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `)`, `,`, or `@`, found `in`\n+error: expected one of `)`, `,`, `@`, or `|`, found `in`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:16\n    |\n LL |     for ( elem in vec ) {\n-   |                ^^ expected one of `)`, `,`, or `@` here\n+   |                ^^ expected one of `)`, `,`, `@`, or `|` here\n \n error: unexpected closing `)`\n   --> $DIR/recover-for-loop-parens-around-head.rs:10:23"}]}