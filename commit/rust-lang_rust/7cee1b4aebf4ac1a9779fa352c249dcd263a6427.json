{"sha": "7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "node_id": "C_kwDOAAsO6NoAKDdjZWUxYjRhZWJmNGFjMWE5Nzc5ZmEzNTJjMjQ5ZGNkMjYzYTY0Mjc", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-02-24T22:37:53Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-02-24T22:37:53Z"}, "message": "ARM: Only allow using d16-d31 with asm! when supported by the target\n\nSupport can be determined by checking for the \"d32\" LLVM feature.", "tree": {"sha": "fd30a57151208930076175c5c8b261e3cc9eb0aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd30a57151208930076175c5c8b261e3cc9eb0aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "html_url": "https://github.com/rust-lang/rust/commit/7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1204400ab8da9830f6f77a5e40e7ad3ea459676a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1204400ab8da9830f6f77a5e40e7ad3ea459676a", "html_url": "https://github.com/rust-lang/rust/commit/1204400ab8da9830f6f77a5e40e7ad3ea459676a"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "14045ad7ff52498c61a751959e3cd03a6261ef0f", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "patch": "@@ -36,6 +36,7 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // #[target_feature].\n     (\"thumb-mode\", Some(sym::arm_target_feature)),\n     (\"thumb2\", Some(sym::arm_target_feature)),\n+    (\"d32\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}, {"sha": "9d452131fa6ac5e5b4351b2585b33c8c8839fdc9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "patch": "@@ -539,6 +539,7 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         d,\n+        d32,\n         dbg_macro,\n         dead_code,\n         dealloc,"}, {"sha": "aaa632333db3808b993e4d714baa66425f771207", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cee1b4aebf4ac1a9779fa352c249dcd263a6427/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=7cee1b4aebf4ac1a9779fa352c249dcd263a6427", "patch": "@@ -50,9 +50,12 @@ impl ArmInlineAsmRegClass {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, F32; },\n             Self::sreg | Self::sreg_low16 => types! { vfp2: I32, F32; },\n-            Self::dreg | Self::dreg_low16 | Self::dreg_low8 => types! {\n+            Self::dreg_low16 | Self::dreg_low8 => types! {\n                 vfp2: I64, F64, VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2);\n             },\n+            Self::dreg => types! {\n+                d32: I64, F64, VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2);\n+            },\n             Self::qreg | Self::qreg_low8 | Self::qreg_low4 => types! {\n                 neon: VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4);\n             },"}]}