{"sha": "cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "node_id": "C_kwDOAAsO6NoAKGNiOGVhMDEwOTZmYjE0ZWEyNWJiZTY5ZmQwYjkyZjdlNzc1MmNiNzg", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2023-01-21T15:16:53Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-14T15:31:45Z"}, "message": "Port RefLongerThanData", "tree": {"sha": "78b684ad6694dc739921631086363e54c946d309", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b684ad6694dc739921631086363e54c946d309"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "html_url": "https://github.com/rust-lang/rust/commit/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58e901b6fd1163172149fd422565523b17eed5f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e901b6fd1163172149fd422565523b17eed5f0", "html_url": "https://github.com/rust-lang/rust/commit/58e901b6fd1163172149fd422565523b17eed5f0"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "c012973f1ddc3b7630c20524bb3ada7bca3916e6", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "patch": "@@ -150,6 +150,8 @@ infer_region_explanation = {$pref_kind ->\n     [lf_must_outlive] but lifetime parameter must outlive\n     [type_valid_for] the type is valid for\n     [borrow_lasts_for] but the borrow lasts for\n+    [pointer_valid_for] the pointer is valid for\n+    [data_valid_for] but the referenced data is only valid for\n     [empty] {\"\"}\n }{$pref_kind ->\n     [empty] {\"\"}\n@@ -175,6 +177,7 @@ infer_outlives_bound = lifetime of the source pointer does not outlive lifetime\n infer_fullfill_req_lifetime = the type `{$ty}` does not fulfill the required lifetime\n infer_lf_bound_not_satisfied = lifetime bound not satisfied\n infer_borrowed_too_long = a value of type `{$ty}` is borrowed for too long\n+infer_ref_longer_than_data = in type `{$ty}`, reference has a longer lifetime than the data it references\n \n infer_mismatched_static_lifetime = incompatible lifetime on type\n infer_does_not_outlive_static_from_impl = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`"}, {"sha": "7088be05ef78da10e20b60c94a911d9de7ce84aa", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "patch": "@@ -980,3 +980,13 @@ pub struct BorrowedTooLong<'a> {\n     #[subdiagnostic]\n     pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(infer_ref_longer_than_data, code = \"E0491\")]\n+pub struct RefLongerThanData<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ty: Ty<'a>,\n+    #[subdiagnostic]\n+    pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n+}"}, {"sha": "3516517dcc3ab33580c283035393f8e763610e98", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "patch": "@@ -131,6 +131,8 @@ pub enum PrefixKind {\n     LfMustOutlive,\n     TypeValidFor,\n     BorrowLastsFor,\n+    PointerValidFor,\n+    DataValidFor,\n }\n \n pub enum SuffixKind {\n@@ -153,6 +155,8 @@ impl IntoDiagnosticArg for PrefixKind {\n             Self::LfMustOutlive => \"lf_must_outlive\",\n             Self::TypeValidFor => \"type_valid_for\",\n             Self::BorrowLastsFor => \"borrow_lasts_for\",\n+            Self::PointerValidFor => \"pointer_valid_for\",\n+            Self::DataValidFor => \"data_valid_for\",\n         }\n         .into();\n         rustc_errors::DiagnosticArgValue::Str(kind)"}, {"sha": "4c07cc0b6a2529006b8a0ba2db5e5b781d87668e", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=cb8ea01096fb14ea25bbe69fd0b92f7e7752cb78", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{\n     note_and_explain, BorrowedTooLong, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound,\n-    OutlivesContent, RegionOriginNote,\n+    OutlivesContent, RefLongerThanData, RegionOriginNote,\n };\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n@@ -223,30 +223,26 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0491,\n-                    \"in type `{}`, reference has a longer lifetime than the data it references\",\n-                    self.ty_to_string(ty)\n-                );\n-                note_and_explain_region(\n+                let pointer_valid = note_and_explain::RegionExplanation::new(\n                     self.tcx,\n-                    &mut err,\n-                    \"the pointer is valid for \",\n                     sub,\n-                    \"\",\n                     None,\n+                    note_and_explain::PrefixKind::PointerValidFor,\n+                    note_and_explain::SuffixKind::Empty,\n                 );\n-                note_and_explain_region(\n+                let data_valid = note_and_explain::RegionExplanation::new(\n                     self.tcx,\n-                    &mut err,\n-                    \"but the referenced data is only valid for \",\n                     sup,\n-                    \"\",\n                     None,\n+                    note_and_explain::PrefixKind::DataValidFor,\n+                    note_and_explain::SuffixKind::Empty,\n                 );\n-                err\n+                RefLongerThanData {\n+                    span,\n+                    ty: self.resolve_vars_if_possible(ty),\n+                    notes: pointer_valid.into_iter().chain(data_valid).collect(),\n+                }\n+                .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n             infer::CompareImplItemObligation { span, impl_item_def_id, trait_item_def_id } => {\n                 let mut err = self.report_extra_impl_obligation("}]}