{"sha": "fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "node_id": "C_kwDOAAsO6NoAKGZkMjcxZmZlMjgwNTVjN2E4YTc2NGFkYTFiNTA4YWE1YTdiZDE0NTM", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-15T23:11:30Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:43Z"}, "message": "also handle it in evaluate", "tree": {"sha": "eb70b9a37439c30283080569dc1446fd46dd1528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb70b9a37439c30283080569dc1446fd46dd1528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "html_url": "https://github.com/rust-lang/rust/commit/fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd271ffe28055c7a8a764ada1b508aa5a7bd1453/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8", "html_url": "https://github.com/rust-lang/rust/commit/0ae3c5c60964bdfb95a524e86d7804e97ca6ceb8"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "daa3f2775e0698823e912b90f3eda26bfeac6fad", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fd271ffe28055c7a8a764ada1b508aa5a7bd1453/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271ffe28055c7a8a764ada1b508aa5a7bd1453/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=fd271ffe28055c7a8a764ada1b508aa5a7bd1453", "patch": "@@ -662,32 +662,59 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         tcx.features().generic_const_exprs,\n                         \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n                     );\n-                    debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n-                    // FIXME: we probably should only try to unify abstract constants\n-                    // if the constants depend on generic parameters.\n-                    //\n-                    // Let's just see where this breaks :shrug:\n-                    if let (ty::ConstKind::Unevaluated(_), ty::ConstKind::Unevaluated(_)) =\n-                        (c1.kind(), c2.kind())\n                     {\n-                        if let Ok(Some(a)) = tcx.expand_abstract_consts(c1)\n-                            && let Ok(Some(b)) = tcx.expand_abstract_consts(c2)\n-                            && a.ty() == b.ty() \n-                            && let Ok(new_obligations) = self\n-                                .infcx\n-                                .at(&obligation.cause, obligation.param_env)\n-                                .eq(a, b)\n-                        {\n-                            let mut obligations = new_obligations.obligations;\n-                            self.add_depth(\n-                                obligations.iter_mut(),\n-                                obligation.recursion_depth,\n-                            );\n-                            return self.evaluate_predicates_recursively(\n-                                previous_stack,\n-                                obligations.into_iter(),\n-                            );\n+                        let c1 =\n+                            if let Ok(Some(a)) = tcx.expand_abstract_consts(c1) { a } else { c1 };\n+                        let c2 =\n+                            if let Ok(Some(b)) = tcx.expand_abstract_consts(c2) { b } else { c2 };\n+                        debug!(\n+                            \"evalaute_predicate_recursively: equating consts:\\nc1= {:?}\\nc2= {:?}\",\n+                            c1, c2\n+                        );\n+\n+                        use rustc_hir::def::DefKind;\n+                        use ty::ConstKind::Unevaluated;\n+                        match (c1.kind(), c2.kind()) {\n+                            (Unevaluated(a), Unevaluated(b))\n+                                if a.def.did == b.def.did\n+                                    && tcx.def_kind(a.def.did) == DefKind::AssocConst =>\n+                            {\n+                                if let Ok(new_obligations) = self\n+                                    .infcx\n+                                    .at(&obligation.cause, obligation.param_env)\n+                                    .trace(c1, c2)\n+                                    .eq(a.substs, b.substs)\n+                                {\n+                                    let mut obligations = new_obligations.obligations;\n+                                    self.add_depth(\n+                                        obligations.iter_mut(),\n+                                        obligation.recursion_depth,\n+                                    );\n+                                    return self.evaluate_predicates_recursively(\n+                                        previous_stack,\n+                                        obligations.into_iter(),\n+                                    );\n+                                }\n+                            }\n+                            (_, Unevaluated(_)) | (Unevaluated(_), _) => (),\n+                            (_, _) => {\n+                                if let Ok(new_obligations) = self\n+                                    .infcx\n+                                    .at(&obligation.cause, obligation.param_env)\n+                                    .eq(c1, c2)\n+                                {\n+                                    let mut obligations = new_obligations.obligations;\n+                                    self.add_depth(\n+                                        obligations.iter_mut(),\n+                                        obligation.recursion_depth,\n+                                    );\n+                                    return self.evaluate_predicates_recursively(\n+                                        previous_stack,\n+                                        obligations.into_iter(),\n+                                    );\n+                                }\n+                            }\n                         }\n                     }\n "}]}