{"sha": "c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMWE5N2I3YTk4MWZiNWFlMDA4YmU3ZTA2ZGY0YmY2YTg1ZWJhNGY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-07T01:51:49Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T05:19:53Z"}, "message": "path2: Remove .with_display_str and friends\n\nRewrite these methods as methods on Display and FilenameDisplay. This\nturns\n\n  do path.with_display_str |s| { ... }\n\ninto\n\n  do path.display().with_str |s| { ... }", "tree": {"sha": "c7cba306ad49ecb103ac9674dfeb71025746a7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7cba306ad49ecb103ac9674dfeb71025746a7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "html_url": "https://github.com/rust-lang/rust/commit/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d9b926836b1f1c2b8b3fe4ab35dc63bec7ffcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d9b926836b1f1c2b8b3fe4ab35dc63bec7ffcd", "html_url": "https://github.com/rust-lang/rust/commit/d6d9b926836b1f1c2b8b3fe4ab35dc63bec7ffcd"}], "stats": {"total": 259, "additions": 132, "deletions": 127}, "files": [{"sha": "4956be3c95917b8caeea18a229a229f81ab78ca3", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -334,7 +334,7 @@ fn check_error_patterns(props: &TestProps,\n                         testfile: &Path,\n                         ProcRes: &ProcRes) {\n     if props.error_patterns.is_empty() {\n-        do testfile.with_display_str |s| {\n+        do testfile.display().with_str |s| {\n             fatal(~\"no error pattern specified in \" + s);\n         }\n     }"}, {"sha": "260f106906be1cd737a30efa1abfe31a9f2a2e3b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -454,7 +454,7 @@ impl<'self> SourceCollector<'self> {\n         let w = cur.open_writer(io::CreateOrTruncate);\n         let mut w = BufferedWriter::new(w);\n \n-        let title = cur.with_filename_display_str(|s| format!(\"{} -- source\", s.unwrap()));\n+        let title = cur.filename_display().with_str(|s| format!(\"{} -- source\", s));\n         let page = layout::Page {\n             title: title,\n             ty: \"source\","}, {"sha": "ecc0b7f07e240b2ef8bb8c6fed436795a0975931", "filename": "src/librustpkg/installed_packages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Finstalled_packages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Finstalled_packages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Finstalled_packages.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -40,7 +40,7 @@ pub fn list_installed_packages(f: &fn(&PkgId) -> bool) -> bool  {\n                     let rel_p = lib.path_relative_from(&parent).unwrap();\n                     debug2!(\"Rel: {}\", rel_p.display());\n                     let rel_path = rel_p.join(basename);\n-                    do rel_path.with_display_str |s| {\n+                    do rel_path.display().with_str |s| {\n                         debug2!(\"Rel name: {}\", s);\n                         f(&PkgId::new(s));\n                     }"}, {"sha": "0fc614d7f3ce8ed18fd5263109e4e616bc731b73", "filename": "src/librustpkg/package_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Fpackage_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Fpackage_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_id.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -88,7 +88,7 @@ impl PkgId {\n \n     pub fn hash(&self) -> ~str {\n         // FIXME (#9639): hash should take a &[u8] so we can hash the real path\n-        do self.path.with_display_str |s| {\n+        do self.path.display().with_str |s| {\n             let vers = self.version.to_str();\n             format!(\"{}-{}-{}\", s, hash(s + vers), vers)\n         }"}, {"sha": "5e242c5376a02bf4da8901bea4ab505b39af7137", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -114,7 +114,7 @@ impl PkgSrc {\n \n         }\n \n-        debug2!(\"Checking dirs: {:?}\", to_try.map(|p| p.to_display_str()).connect(\":\"));\n+        debug2!(\"Checking dirs: {:?}\", to_try.map(|p| p.display().to_str()).connect(\":\"));\n \n         let path = to_try.iter().find(|&d| os::path_exists(d));\n "}, {"sha": "e6b93e06073308e0cc461d0e519bfbf28f24d6e3", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -337,7 +337,7 @@ impl CtxMethods for BuildContext {\n             \"list\" => {\n                 io::println(\"Installed packages:\");\n                 do installed_packages::list_installed_packages |pkg_id| {\n-                    do pkg_id.path.with_display_str |s| {\n+                    do pkg_id.path.display().with_str |s| {\n                         println(s);\n                     }\n                     true\n@@ -564,7 +564,7 @@ impl CtxMethods for BuildContext {\n                                            &pkg_src.destination_workspace,\n                                            &id).map(|s| Path::new(*s));\n         debug2!(\"install: id = {}, about to call discover_outputs, {:?}\",\n-               id.to_str(), result.map(|p| p.to_display_str()));\n+               id.to_str(), result.map(|p| p.display().to_str()));\n         installed_files = installed_files + result;\n         note(format!(\"Installed package {} to {}\",\n                      id.to_str(),"}, {"sha": "a24767f1e6857fabbfa32ed3d032a0a419ff20f8", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -27,7 +27,7 @@ pub fn each_pkg_parent_workspace(cx: &Context, pkgid: &PkgId, action: &fn(&Path)\n         fail2!(\"Package {} not found in any of \\\n                     the following workspaces: {}\",\n                    pkgid.path.display(),\n-                   rust_path().map(|p| p.to_display_str()).to_str());\n+                   rust_path().map(|p| p.display().to_str()).to_str());\n     }\n     for ws in workspaces.iter() {\n         if action(ws) {"}, {"sha": "b92806d715f00c25347fa0d2da5f8550f8f4f207", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -65,6 +65,7 @@ use ptr;\n use result::{Result, Ok, Err};\n use str::{StrSlice, OwnedStr};\n use str;\n+use to_str::ToStr;\n use uint;\n use vec::{MutableVector, ImmutableVector, OwnedVector, OwnedCopyableVector, CopyableVector};\n use vec;\n@@ -1068,7 +1069,7 @@ pub fn file_reader(path: &Path) -> Result<@Reader, ~str> {\n     };\n \n     if f as uint == 0u {\n-        do path.with_display_str |p| {\n+        do path.display().with_str |p| {\n             Err(~\"error opening \" + p)\n         }\n     } else {\n@@ -1753,7 +1754,7 @@ pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n         if str::is_utf8(bytes) {\n             Ok(str::from_utf8(bytes))\n         } else {\n-            Err(file.to_display_str() + \" is not UTF-8\")\n+            Err(file.display().to_str() + \" is not UTF-8\")\n         }\n     }\n }"}, {"sha": "ff370e9d7c1dc841f5214919cb034b76585921f8", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 63, "deletions": 56, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -75,6 +75,7 @@ use iter::Iterator;\n use option::{Option, None, Some};\n use str;\n use str::{OwnedStr, Str, StrSlice};\n+use to_str::ToStr;\n use vec;\n use vec::{CopyableVector, OwnedCopyableVector, OwnedVector, Vector};\n use vec::{ImmutableEqVector, ImmutableVector};\n@@ -190,59 +191,6 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Converts the Path into an owned byte vector\n     fn into_vec(self) -> ~[u8];\n \n-    /// Provides the path as a string\n-    ///\n-    /// If the path is not UTF-8, invalid sequences will be replaced with the unicode\n-    /// replacement char. This involves allocation.\n-    #[inline]\n-    fn with_display_str<T>(&self, f: &fn(&str) -> T) -> T {\n-        match self.as_str() {\n-            Some(s) => f(s),\n-            None => {\n-                let s = self.to_display_str();\n-                f(s.as_slice())\n-            }\n-        }\n-    }\n-\n-    /// Returns the path as a string\n-    ///\n-    /// If the path is not UTF-8, invalid sequences will be replaced with the unicode\n-    /// replacement char. This involves allocation.\n-    ///\n-    /// This is similar to `with_display_str()` except it will always allocate a new ~str.\n-    fn to_display_str(&self) -> ~str {\n-        from_utf8_with_replacement(self.as_vec())\n-    }\n-\n-    /// Provides the filename as a string\n-    ///\n-    /// If the filename is not UTF-8, invalid sequences will be replaced with the unicode\n-    /// replacement char. This involves allocation.\n-    #[inline]\n-    fn with_filename_display_str<T>(&self, f: &fn(Option<&str>) -> T) -> T {\n-        match self.filename_str() {\n-            s@Some(_) => f(s),\n-            None => {\n-                let o = self.to_filename_display_str();\n-                f(o.map(|s|s.as_slice()))\n-            }\n-        }\n-    }\n-\n-    /// Returns the filename as a string\n-    ///\n-    /// If the filename is not UTF-8, invalid sequences will be replaced with the unicode\n-    /// replacement char. This involves allocation.\n-    ///\n-    /// This is similar to `to_filename_display_str` except it will always allocate a new ~str.\n-    fn to_filename_display_str(&self) -> Option<~str> {\n-        match self.filename() {\n-            None => None,\n-            Some(v) => Some(from_utf8_with_replacement(v))\n-        }\n-    }\n-\n     /// Returns an object that implements `fmt::Default` for printing paths\n     ///\n     /// This will print the equivalent of `to_display_str()` when used with a {} format parameter.\n@@ -764,16 +712,75 @@ pub struct FilenameDisplay<'self, P> {\n \n impl<'self, P: GenericPath> fmt::Default for Display<'self, P> {\n     fn fmt(d: &Display<P>, f: &mut fmt::Formatter) {\n-        do d.path.with_display_str |s| {\n+        do d.with_str |s| {\n             f.pad(s)\n         }\n     }\n }\n \n+impl<'self, P: GenericPath> ToStr for Display<'self, P> {\n+    /// Returns the path as a string\n+    ///\n+    /// If the path is not UTF-8, invalid sequences with be replaced with the\n+    /// unicode replacement char. This involves allocation.\n+    fn to_str(&self) -> ~str {\n+        from_utf8_with_replacement(self.path.as_vec())\n+    }\n+}\n+\n+impl<'self, P: GenericPath> Display<'self, P> {\n+    /// Provides the path as a string to a closure\n+    ///\n+    /// If the path is not UTF-8, invalid sequences will be replaced with the\n+    /// unicode replacement char. This involves allocation.\n+    #[inline]\n+    pub fn with_str<T>(&self, f: &fn(&str) -> T) -> T {\n+        match self.path.as_str() {\n+            Some(s) => f(s),\n+            None => {\n+                let s = self.to_str();\n+                f(s.as_slice())\n+            }\n+        }\n+    }\n+}\n+\n impl<'self, P: GenericPath> fmt::Default for FilenameDisplay<'self, P> {\n     fn fmt(d: &FilenameDisplay<P>, f: &mut fmt::Formatter) {\n-        do d.path.with_filename_display_str |s| {\n-            f.pad(s.unwrap_or(\"\"))\n+        do d.with_str |s| {\n+            f.pad(s)\n+        }\n+    }\n+}\n+\n+impl<'self, P: GenericPath> ToStr for FilenameDisplay<'self, P> {\n+    /// Returns the filename as a string. If there is no filename, ~\"\" will be\n+    /// returned.\n+    ///\n+    /// If the filename is not UTF-8, invalid sequences will be replaced with\n+    /// the unicode replacement char. This involves allocation.\n+    fn to_str(&self) -> ~str {\n+        match self.path.filename() {\n+            None => ~\"\",\n+            Some(v) => from_utf8_with_replacement(v)\n+        }\n+    }\n+}\n+\n+impl<'self, P: GenericPath> FilenameDisplay<'self, P> {\n+    /// Provides the filename as a string to a closure. If there is no\n+    /// filename, \"\" will be provided.\n+    ///\n+    /// If the filename is not UTF-8, invalid sequences will be replaced with\n+    /// the unicode replacement char. This involves allocation.\n+    #[inline]\n+    pub fn with_str<T>(&self, f: &fn(&str) -> T) -> T {\n+        match self.path.filename_str() {\n+            Some(s) => f(s),\n+            None => {\n+                let s = self.to_str();\n+                f(s.as_slice())\n+            }\n         }\n     }\n }"}, {"sha": "8acc1346bcc2f067e86a45b2941a335a877aaaac", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 47, "deletions": 44, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -745,50 +745,53 @@ mod tests {\n \n     #[test]\n     fn test_display_str() {\n-        assert_eq!(Path::new(\"foo\").to_display_str(), ~\"foo\");\n-        assert_eq!(Path::new(b!(\"foo\", 0x80)).to_display_str(), ~\"foo\\uFFFD\");\n-        assert_eq!(Path::new(b!(\"foo\", 0xff, \"bar\")).to_display_str(), ~\"foo\\uFFFDbar\");\n-        assert_eq!(Path::new(b!(\"foo\", 0xff, \"/bar\")).to_filename_display_str(), Some(~\"bar\"));\n-        assert_eq!(Path::new(b!(\"foo/\", 0xff, \"bar\")).to_filename_display_str(),\n-                   Some(~\"\\uFFFDbar\"));\n-        assert_eq!(Path::new(b!(\"/\")).to_filename_display_str(), None);\n-\n-        let mut called = false;\n-        do Path::new(\"foo\").with_display_str |s| {\n-            assert_eq!(s, \"foo\");\n-            called = true;\n-        };\n-        assert!(called);\n-        called = false;\n-        do Path::new(b!(\"foo\", 0x80)).with_display_str |s| {\n-            assert_eq!(s, \"foo\\uFFFD\");\n-            called = true;\n-        };\n-        assert!(called);\n-        called = false;\n-        do Path::new(b!(\"foo\", 0xff, \"bar\")).with_display_str |s| {\n-            assert_eq!(s, \"foo\\uFFFDbar\");\n-            called = true;\n-        };\n-        assert!(called);\n-        called = false;\n-        do Path::new(b!(\"foo\", 0xff, \"/bar\")).with_filename_display_str |s| {\n-            assert_eq!(s, Some(\"bar\"));\n-            called = true;\n-        }\n-        assert!(called);\n-        called = false;\n-        do Path::new(b!(\"foo/\", 0xff, \"bar\")).with_filename_display_str |s| {\n-            assert_eq!(s, Some(\"\\uFFFDbar\"));\n-            called = true;\n-        }\n-        assert!(called);\n-        called = false;\n-        do Path::new(b!(\"/\")).with_filename_display_str |s| {\n-            assert!(s.is_none());\n-            called = true;\n-        }\n-        assert!(called);\n+        macro_rules! t(\n+            ($path:expr, $disp:ident, $exp:expr) => (\n+                {\n+                    let path = Path::new($path);\n+                    assert_eq!(path.$disp().to_str(), ~$exp);\n+                }\n+            )\n+        )\n+        t!(\"foo\", display, \"foo\");\n+        t!(b!(\"foo\", 0x80), display, \"foo\\uFFFD\");\n+        t!(b!(\"foo\", 0xff, \"bar\"), display, \"foo\\uFFFDbar\");\n+        t!(b!(\"foo\", 0xff, \"/bar\"), filename_display, \"bar\");\n+        t!(b!(\"foo/\", 0xff, \"bar\"), filename_display, \"\\uFFFDbar\");\n+        t!(b!(\"/\"), filename_display, \"\");\n+\n+        macro_rules! t(\n+            ($path:expr, $exp:expr) => (\n+                {\n+                    let mut called = false;\n+                    let path = Path::new($path);\n+                    do path.display().with_str |s| {\n+                        assert_eq!(s, $exp);\n+                        called = true;\n+                    };\n+                    assert!(called);\n+                }\n+            );\n+            ($path:expr, $exp:expr, filename) => (\n+                {\n+                    let mut called = false;\n+                    let path = Path::new($path);\n+                    do path.filename_display().with_str |s| {\n+                        assert_eq!(s, $exp);\n+                        called = true;\n+\n+                    };\n+                    assert!(called);\n+                }\n+            )\n+        )\n+\n+        t!(\"foo\", \"foo\");\n+        t!(b!(\"foo\", 0x80), \"foo\\uFFFD\");\n+        t!(b!(\"foo\", 0xff, \"bar\"), \"foo\\uFFFDbar\");\n+        t!(b!(\"foo\", 0xff, \"/bar\"), \"bar\", filename);\n+        t!(b!(\"foo/\", 0xff, \"bar\"), \"\\uFFFDbar\", filename);\n+        t!(b!(\"/\"), \"\", filename);\n     }\n \n     #[test]"}, {"sha": "86c4bb6f8a37069222393e8a6c0d5de2a3feed4f", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -350,16 +350,6 @@ impl GenericPath for Path {\n         self.repr.into_bytes()\n     }\n \n-    #[inline]\n-    fn with_display_str<T>(&self, f: &fn(&str) -> T) -> T {\n-        f(self.repr.as_slice())\n-    }\n-\n-    #[inline]\n-    fn to_display_str(&self) -> ~str {\n-        self.repr.clone()\n-    }\n-\n     #[inline]\n     fn dirname<'a>(&'a self) -> &'a [u8] {\n         self.dirname_str().unwrap().as_bytes()\n@@ -1462,18 +1452,22 @@ mod tests {\n \n     #[test]\n     fn test_display_str() {\n-        assert_eq!(Path::new(\"foo\").to_display_str(), ~\"foo\");\n-        assert_eq!(Path::new(b!(\"\\\\\")).to_filename_display_str(), None);\n+        let path = Path::new(\"foo\");\n+        assert_eq!(path.display().to_str(), ~\"foo\");\n+        let path = Path::new(b!(\"\\\\\"));\n+        assert_eq!(path.filename_display().to_str(), ~\"\");\n \n         let mut called = false;\n-        do Path::new(\"foo\").with_display_str |s| {\n+        let path = Path::new(\"foo\");\n+        do path.display().with_str |s| {\n             assert_eq!(s, \"foo\");\n             called = true;\n         };\n         assert!(called);\n         called = false;\n-        do Path::new(b!(\"\\\\\")).with_filename_display_str |s| {\n-            assert!(s.is_none());\n+        let path = Path::new(b!(\"\\\\\"));\n+        do path.filename_display().with_str |s| {\n+            assert_eq!(s, \"\");\n             called = true;\n         }\n         assert!(called);"}, {"sha": "3e1a008f6ca642e7fced0c6d7d5d3f33d7bf60ef", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01a97b7a981fb5ae008be7e06df4bf6a85eba4f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c01a97b7a981fb5ae008be7e06df4bf6a85eba4f", "patch": "@@ -4038,12 +4038,12 @@ impl Parser {\n                 let stack = &self.sess.included_mod_stack;\n                 let mut err = ~\"circular modules: \";\n                 for p in stack.slice(i, stack.len()).iter() {\n-                    do p.with_display_str |s| {\n+                    do p.display().with_str |s| {\n                         err.push_str(s);\n                     }\n                     err.push_str(\" -> \");\n                 }\n-                do path.with_display_str |s| {\n+                do path.display().with_str |s| {\n                     err.push_str(s);\n                 }\n                 self.span_fatal(id_sp, err);"}]}