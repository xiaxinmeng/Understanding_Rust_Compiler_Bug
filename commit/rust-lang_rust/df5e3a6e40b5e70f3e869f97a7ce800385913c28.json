{"sha": "df5e3a6e40b5e70f3e869f97a7ce800385913c28", "node_id": "C_kwDOAAsO6NoAKGRmNWUzYTZlNDBiNWU3MGYzZTg2OWY5N2E3Y2U4MDAzODU5MTNjMjg", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-09-21T22:49:36Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T02:45:25Z"}, "message": "Change serialized format to use DefPathHash instead of custom String\n\nMove test to rustdoc-ui\n\nFix test writing to wrong directory\n\nFormatting\n\nFix test\n\nAdd FIXME\n\nRemove raw multiline strings", "tree": {"sha": "b7d16a97452cf2e35ccac68cd369d952fa304a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7d16a97452cf2e35ccac68cd369d952fa304a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5e3a6e40b5e70f3e869f97a7ce800385913c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5e3a6e40b5e70f3e869f97a7ce800385913c28", "html_url": "https://github.com/rust-lang/rust/commit/df5e3a6e40b5e70f3e869f97a7ce800385913c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5e3a6e40b5e70f3e869f97a7ce800385913c28/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c05b3c03da5d37e544589e42fe9738728b27b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c05b3c03da5d37e544589e42fe9738728b27b40", "html_url": "https://github.com/rust-lang/rust/commit/5c05b3c03da5d37e544589e42fe9738728b27b40"}], "stats": {"total": 68, "additions": 27, "deletions": 41}, "files": [{"sha": "8ef5fabb9017f0e48fe3bf0b8afb9eb5e92762c1", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -258,11 +258,7 @@ impl Iterator for PeekIter<'a> {\n     type Item = (TokenKind, &'a str);\n     fn next(&mut self) -> Option<Self::Item> {\n         self.peek_pos = 0;\n-        if let Some(first) = self.stored.pop_front() {\n-            Some(first)\n-        } else {\n-            self.iter.next()\n-        }\n+        if let Some(first) = self.stored.pop_front() { Some(first) } else { self.iter.next() }\n     }\n }\n "}, {"sha": "3fa386dded9b3494530b6d3b54aac437e9929a2a", "filename": "src/librustdoc/html/highlight/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight%2Ftests.rs?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -60,7 +60,7 @@ fn test_union_highlighting() {\n     create_default_session_globals_then(|| {\n         let src = include_str!(\"fixtures/union.rs\");\n         let mut html = Buffer::new();\n-        write_code(&mut html, src, Edition::Edition2018, None);\n+        write_code(&mut html, src, Edition::Edition2018, None, None);\n         expect_file![\"fixtures/union.html\"].assert_eq(&html.into_inner());\n     });\n }"}, {"sha": "2454ae492b21313c849955bde77683cf1660f593", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -2465,7 +2465,7 @@ const MAX_FULL_EXAMPLES: usize = 5;\n /// Generates the HTML for example call locations generated via the --scrape-examples flag.\n fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item: &clean::Item) {\n     let tcx = cx.tcx();\n-    let key = crate::scrape_examples::def_id_call_key(tcx, def_id);\n+    let key = tcx.def_path_hash(def_id);\n     let call_locations = match cx.shared.call_locations.get(&key) {\n         Some(call_locations) => call_locations,\n         _ => {\n@@ -2474,13 +2474,14 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n     };\n \n     // Generate a unique ID so users can link to this section for a given method\n+    // FIXME: this should use init_id_map instead of derive\n     let id = cx.id_map.borrow_mut().derive(\"scraped-examples\");\n     write!(\n         w,\n-        r##\"<div class=\"docblock scraped-example-list\">\n-          <h1 id=\"scraped-examples\" class=\"small-section-header\">\n-             <a href=\"#{}\">Examples found in repository</a>\n-          </h1>\"##,\n+        \"<div class=\\\"docblock scraped-example-list\\\">\\\n+          <h1 id=\\\"scraped-examples\\\" class=\\\"small-section-header\\\">\\\n+             <a href=\\\"#{}\\\">Examples found in repository</a>\\\n+          </h1>\",\n         id\n     );\n \n@@ -2533,11 +2534,11 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n \n         write!(\n             w,\n-            r#\"<div class=\"scraped-example\" data-locs=\"{locations}\" data-offset=\"{offset}\">\n-                <div class=\"scraped-example-title\">\n-                   {name} (<a href=\"{root}{url}\" target=\"_blank\">{line_range}</a>)\n-                </div>\n-                <div class=\"code-wrapper\">\"#,\n+            \"<div class=\\\"scraped-example\\\" data-locs=\\\"{locations}\\\" data-offset=\\\"{offset}\\\">\\\n+                <div class=\\\"scraped-example-title\\\">\\\n+                   {name} (<a href=\\\"{root}{url}\\\" target=\\\"_blank\\\">{line_range}</a>)\\\n+                </div>\\\n+                <div class=\\\"code-wrapper\\\">\",\n             root = cx.root_path(),\n             url = call_data.url,\n             name = call_data.display_name,\n@@ -2625,14 +2626,13 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n     if it.peek().is_some() {\n         write!(\n             w,\n-            r#\"<details class=\"rustdoc-toggle more-examples-toggle\">\n-                  <summary class=\"hideme\">\n-                     <span>More examples</span>\n-                  </summary>\n-                  <div class=\"more-scraped-examples\">\n-                    <div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div>\n-                    <div class=\"more-scraped-examples-inner\">\n-\"#\n+            \"<details class=\\\"rustdoc-toggle more-examples-toggle\\\">\\\n+                  <summary class=\\\"hideme\\\">\\\n+                     <span>More examples</span>\\\n+                  </summary>\\\n+                  <div class=\\\"more-scraped-examples\\\">\\\n+                    <div class=\\\"toggle-line\\\"><div class=\\\"toggle-line-inner\\\"></div></div>\\\n+                    <div class=\\\"more-scraped-examples-inner\\\">\"\n         );\n \n         // Only generate inline code for MAX_FULL_EXAMPLES number of examples. Otherwise we could\n@@ -2643,10 +2643,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, def_id: DefId, item:\n \n         // For the remaining examples, generate a <ul> containing links to the source files.\n         if it.peek().is_some() {\n-            write!(\n-                w,\n-                r#\"<div class=\"example-links\">Additional examples can be found in:<br /><ul>\"#\n-            );\n+            write!(w, r#\"<div class=\"example-links\">Additional examples can be found in:<br><ul>\"#);\n             it.for_each(|(_, call_data)| {\n                 write!(\n                     w,"}, {"sha": "bb3cb016e2edb505452aeba8a729683af2b08a75", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -22,7 +22,7 @@ use rustc_serialize::{\n };\n use rustc_session::getopts;\n use rustc_span::{\n-    def_id::{CrateNum, DefId},\n+    def_id::{CrateNum, DefPathHash},\n     edition::Edition,\n     BytePos, FileName, SourceFile,\n };\n@@ -108,7 +108,7 @@ crate struct CallData {\n }\n \n crate type FnCallLocations = FxHashMap<PathBuf, CallData>;\n-crate type AllCallLocations = FxHashMap<String, FnCallLocations>;\n+crate type AllCallLocations = FxHashMap<DefPathHash, FnCallLocations>;\n \n /// Visitor for traversing a crate and finding instances of function calls.\n struct FindCalls<'a, 'tcx> {\n@@ -119,14 +119,6 @@ struct FindCalls<'a, 'tcx> {\n     calls: &'a mut AllCallLocations,\n }\n \n-crate fn def_id_call_key(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n-    format!(\n-        \"{}{}\",\n-        tcx.crate_name(def_id.krate).to_ident_string(),\n-        tcx.def_path(def_id).to_string_no_crate_verbose()\n-    )\n-}\n-\n impl<'a, 'tcx> Visitor<'tcx> for FindCalls<'a, 'tcx>\n where\n     'tcx: 'a,\n@@ -185,7 +177,7 @@ where\n                     CallData { locations: Vec::new(), url, display_name, edition }\n                 };\n \n-                let fn_key = def_id_call_key(tcx, *def_id);\n+                let fn_key = tcx.def_path_hash(*def_id);\n                 let fn_entries = self.calls.entry(fn_key).or_default();\n \n                 let location = CallLocation::new(tcx, span, ex.hir_id, &file);"}, {"sha": "9903c87be23bc24c5e38d2fbc5dc393ead224902", "filename": "src/test/run-make/rustdoc-scrape-examples-remap/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-scrape-examples-remap%2FMakefile?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -7,7 +7,7 @@ all:\n \t$(RUSTC) src/lib.rs --crate-name foobar --crate-type lib --emit=metadata\n \n # 2. scrape examples from the reverse-dependency into an ex.calls file\n-\t$(RUSTDOC) examples/ex.rs --crate-name ex --crate-type bin \\\n+\t$(RUSTDOC) examples/ex.rs --crate-name ex --crate-type bin --output $(OUTPUT_DIR) \\\n \t  --extern foobar=$(TMPDIR)/libfoobar.rmeta \\\n \t\t-Z unstable-options \\\n \t\t--scrape-examples-output-path $(TMPDIR)/ex.calls \\"}, {"sha": "b18d4715453e60acfe39b9fb1015918140689a6b", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.rs?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -1,2 +1 @@\n-// should-fail\n // compile-flags: --scrape-examples-target-crate foobar", "previous_filename": "src/test/rustdoc/scrape-examples-wrong-options.rs"}, {"sha": "b4ad28f92dad5270535d0f46fa7a8554ca996fbb", "filename": "src/test/rustdoc-ui/scrape-examples-wrong-options.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df5e3a6e40b5e70f3e869f97a7ce800385913c28/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-wrong-options.stderr?ref=df5e3a6e40b5e70f3e869f97a7ce800385913c28", "patch": "@@ -0,0 +1,2 @@\n+error: the `-Z unstable-options` flag must also be passed to enable the flag `scrape-examples-target-crate`\n+"}]}