{"sha": "7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNTJlNTFkNzk2OTZhZTk5ZTRmODQ5OWJiNTFmODFiNDY0ZDVhMWE=", "commit": {"author": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-04-06T18:07:57Z"}, "committer": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-04-18T06:09:54Z"}, "message": "Added basic lint and tests", "tree": {"sha": "d21f6d0d93bb08b99b4c1bdf374c8d131ad902fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d21f6d0d93bb08b99b4c1bdf374c8d131ad902fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "html_url": "https://github.com/rust-lang/rust/commit/7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/comments", "author": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0e4e5b97f05d6f397bf941b16e1e826310a5ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0e4e5b97f05d6f397bf941b16e1e826310a5ed", "html_url": "https://github.com/rust-lang/rust/commit/1c0e4e5b97f05d6f397bf941b16e1e826310a5ed"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "e513787a53a659edc2cbfc0c5241c12dd92c7568", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "patch": "@@ -1293,6 +1293,7 @@ Released 2018-09-13\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n+[`implicit_saturating_sub`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub\n [`imprecise_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#imprecise_flops\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing"}, {"sha": "e2dff92834d5a1abb91e98a0dfd7164420f75ab9", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "patch": "@@ -0,0 +1,90 @@\n+use crate::utils::{higher, in_macro, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, QPath, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for implicit saturating subtraction.\n+    ///\n+    /// **Why is this bad?** Simplicity and readability. Instead we can easily use an inbuilt function.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let end = 10;\n+    /// let start = 5;\n+    ///\n+    /// let mut i = end - start;\n+    ///\n+    /// // Bad\n+    /// if i != 0 {\n+    ///     i -= 1;\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let end = 10;\n+    /// let start = 5;\n+    ///\n+    /// let mut i = end - start;\n+    ///\n+    /// // Good\n+    /// i.saturating_sub(1);\n+    /// ```\n+    pub IMPLICIT_SATURATING_SUB,\n+    pedantic,\n+    \"Perform saturating subtraction instead of implicitly checking lower bound of data type\"\n+}\n+\n+declare_lint_pass!(ImplicitSaturatingSub => [IMPLICIT_SATURATING_SUB]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitSaturatingSub {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+        if_chain! {\n+            if let Some((ref cond, ref then, None)) = higher::if_block(&expr);\n+            // Check if the conditional expression is a binary operation\n+            if let ExprKind::Binary(ref op, ref left, ref right) = cond.kind;\n+            // Ensure that the binary operator is > or !=\n+            if BinOpKind::Ne == op.node || BinOpKind::Gt == op.node;\n+            if let ExprKind::Path(ref cond_path) = left.kind;\n+            // Get the literal on the right hand side\n+            if let ExprKind::Lit(ref lit) = right.kind;\n+            if let LitKind::Int(0, _) = lit.node;\n+            // Check if the true condition block has only one statement\n+            if let ExprKind::Block(ref block, _) = then.kind;\n+            if block.stmts.len() == 1;\n+            // Check if assign operation is done\n+            if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n+            if let ExprKind::AssignOp(ref op1, ref target, ref value) = e.kind;\n+            if BinOpKind::Sub == op1.node;\n+            if let ExprKind::Path(ref assign_path) = target.kind;\n+            // Check if the variable in the condition and assignment statement are the same\n+            if let (QPath::Resolved(_, ref cres_path), QPath::Resolved(_, ref ares_path)) = (cond_path, assign_path);\n+            if cres_path.res == ares_path.res;\n+            if let ExprKind::Lit(ref lit1) = value.kind;\n+            if let LitKind::Int(assign_lit, _) = lit1.node;\n+            then {\n+                // Get the variable name\n+                let var_name = ares_path.segments[0].ident.name.as_str();\n+                let applicability = Applicability::MaybeIncorrect;\n+                span_lint_and_sugg(\n+                    cx,\n+                    IMPLICIT_SATURATING_SUB,\n+                    expr.span,\n+                    \"Implicitly performing saturating subtraction\",\n+                    \"try\",\n+                    format!(\"{}.saturating_sub({});\", var_name, assign_lit.to_string()),\n+                    applicability\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "b8415fa3af12506f8d2cef72caff81a32d80856f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "patch": "@@ -225,6 +225,7 @@ mod identity_op;\n mod if_let_some_result;\n mod if_not_else;\n mod implicit_return;\n+mod implicit_saturating_sub;\n mod indexing_slicing;\n mod infinite_iter;\n mod inherent_impl;\n@@ -574,6 +575,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &if_let_some_result::IF_LET_SOME_RESULT,\n         &if_not_else::IF_NOT_ELSE,\n         &implicit_return::IMPLICIT_RETURN,\n+        &implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n         &indexing_slicing::INDEXING_SLICING,\n         &indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         &infinite_iter::INFINITE_ITER,\n@@ -888,6 +890,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box unicode::Unicode);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n+    store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n     store.register_late_pass(|| box methods::Methods);\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box shadow::Shadow);\n@@ -1111,6 +1114,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&functions::MUST_USE_CANDIDATE),\n         LintId::of(&functions::TOO_MANY_LINES),\n         LintId::of(&if_not_else::IF_NOT_ELSE),\n+        LintId::of(&implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n         LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),"}, {"sha": "213d054e403dac1814d8953342aebd2fa5523b65", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "patch": "@@ -773,6 +773,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"implicit_return\",\n     },\n+    Lint {\n+        name: \"implicit_saturating_sub\",\n+        group: \"pedantic\",\n+        desc: \"Perform saturating subtraction instead of implicitly checking lower bound of data type\",\n+        deprecation: None,\n+        module: \"implicit_saturating_sub\",\n+    },\n     Lint {\n         name: \"imprecise_flops\",\n         group: \"nursery\","}, {"sha": "c1cc00bb68563115fdca5682eb808bee4d5fe2a1", "filename": "tests/ui/implicit_saturating_sub.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/tests%2Fui%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c52e51d79696ae99e4f8499bb51f81b464d5a1a/tests%2Fui%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_saturating_sub.rs?ref=7c52e51d79696ae99e4f8499bb51f81b464d5a1a", "patch": "@@ -0,0 +1,21 @@\n+#![warn(clippy::implicit_saturating_sub)]\n+\n+fn main() {\n+    let mut end = 10;\n+    let mut start = 5;\n+    let mut i: u32 = end - start;\n+\n+    if i > 0 {\n+        i -= 1;\n+    }\n+\n+    match end {\n+        10 => {\n+            if i > 0 {\n+                i -= 1;\n+            }\n+        },\n+        11 => i += 1,\n+        _ => i = 0,\n+    }\n+}"}]}