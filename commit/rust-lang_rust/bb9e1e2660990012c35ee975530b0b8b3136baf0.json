{"sha": "bb9e1e2660990012c35ee975530b0b8b3136baf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWUxZTI2NjA5OTAwMTJjMzVlZTk3NTUzMGIwYjhiMzEzNmJhZjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-03-20T19:49:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-03-20T20:48:57Z"}, "message": "core: add Reader, Writer, ReaderUtil, WriterUtil to prelude. Close #4182.", "tree": {"sha": "0a8cc702c70c00aa14ab32e3f7f4408d97010843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8cc702c70c00aa14ab32e3f7f4408d97010843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9e1e2660990012c35ee975530b0b8b3136baf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9e1e2660990012c35ee975530b0b8b3136baf0", "html_url": "https://github.com/rust-lang/rust/commit/bb9e1e2660990012c35ee975530b0b8b3136baf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9e1e2660990012c35ee975530b0b8b3136baf0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0847d52a8677a39525b7cf7a09571851b6deb8b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0847d52a8677a39525b7cf7a09571851b6deb8b9", "html_url": "https://github.com/rust-lang/rust/commit/0847d52a8677a39525b7cf7a09571851b6deb8b9"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "0879d1bd9006c7f6f175a3b9b9ca246c8490a2b9", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=bb9e1e2660990012c35ee975530b0b8b3136baf0", "patch": "@@ -21,7 +21,9 @@ use libc;\n use libc::{c_int, c_long, c_uint, c_void, size_t, ssize_t};\n use libc::consts::os::posix88::*;\n use os;\n-use prelude::*;\n+use cast;\n+use path::Path;\n+use ops::Drop;\n use ptr;\n use result;\n use str;"}, {"sha": "430195741aba847b87236b5849f4b56b67baba5b", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=bb9e1e2660990012c35ee975530b0b8b3136baf0", "patch": "@@ -43,6 +43,7 @@ pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector};\n+pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n \n /* Reexported runtime types */\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};"}, {"sha": "6cb840fb93770c1e6016c27bab153a429e50d134", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=bb9e1e2660990012c35ee975530b0b8b3136baf0", "patch": "@@ -127,7 +127,7 @@ fn write_page(ctxt: &Ctxt, page: &doc::Page) {\n         write_item_no_header(ctxt, doc);\n       }\n     }\n-    ctxt.w.write_done();\n+    ctxt.w.put_done();\n }\n \n #[test]\n@@ -146,8 +146,8 @@ fn should_request_new_writer_for_each_page() {\n }\n \n fn write_title(ctxt: &Ctxt, page: doc::Page) {\n-    ctxt.w.write_line(fmt!(\"%% %s\", make_title(page)));\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(fmt!(\"%% %s\", make_title(page)));\n+    ctxt.w.put_line(~\"\");\n }\n \n fn make_title(page: doc::Page) -> ~str {\n@@ -198,8 +198,8 @@ fn write_header(ctxt: &Ctxt, lvl: Hlvl, doc: doc::ItemTag) {\n \n fn write_header_(ctxt: &Ctxt, lvl: Hlvl, title: ~str) {\n     let hashes = str::from_chars(vec::from_elem(lvl as uint, '#'));\n-    ctxt.w.write_line(fmt!(\"%s %s\", hashes, title));\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(fmt!(\"%s %s\", hashes, title));\n+    ctxt.w.put_line(~\"\");\n }\n \n pub fn header_kind(doc: doc::ItemTag) -> ~str {\n@@ -332,8 +332,8 @@ fn write_desc(\n ) {\n     match desc {\n         Some(desc) => {\n-            ctxt.w.write_line(desc);\n-            ctxt.w.write_line(~\"\");\n+            ctxt.w.put_line(desc);\n+            ctxt.w.put_line(~\"\");\n         }\n         None => ()\n     }\n@@ -347,8 +347,8 @@ fn write_sections(ctxt: &Ctxt, sections: &[doc::Section]) {\n \n fn write_section(ctxt: &Ctxt, section: doc::Section) {\n     write_header_(ctxt, H4, copy section.header);\n-    ctxt.w.write_line(copy section.body);\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(copy section.body);\n+    ctxt.w.put_line(~\"\");\n }\n \n #[test]\n@@ -398,7 +398,7 @@ fn write_item_(ctxt: &Ctxt, doc: doc::ItemTag, write_header: bool) {\n       doc::TraitTag(TraitDoc) => write_trait(ctxt, TraitDoc),\n       doc::ImplTag(ImplDoc) => write_impl(ctxt, ImplDoc),\n       doc::TyTag(TyDoc) => write_type(ctxt, TyDoc),\n-      doc::StructTag(StructDoc) => write_struct(ctxt, StructDoc),\n+      doc::StructTag(StructDoc) => put_struct(ctxt, StructDoc),\n     }\n }\n \n@@ -428,13 +428,13 @@ fn write_index(ctxt: &Ctxt, index: doc::Index) {\n         let header = header_text_(entry.kind, entry.name);\n         let id = copy entry.link;\n         if entry.brief.is_some() {\n-            ctxt.w.write_line(fmt!(\"* [%s](%s) - %s\",\n+            ctxt.w.put_line(fmt!(\"* [%s](%s) - %s\",\n                                    header, id, (&entry.brief).get()));\n         } else {\n-            ctxt.w.write_line(fmt!(\"* [%s](%s)\", header, id));\n+            ctxt.w.put_line(fmt!(\"* [%s](%s)\", header, id));\n         }\n     }\n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(~\"\");\n }\n \n #[test]\n@@ -526,8 +526,8 @@ fn write_fnlike(\n fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n     match sig {\n       Some(sig) => {\n-        ctxt.w.write_line(code_block_indent(sig));\n-        ctxt.w.write_line(~\"\");\n+        ctxt.w.put_line(code_block_indent(sig));\n+        ctxt.w.put_line(~\"\");\n       }\n       None => fail!(~\"unimplemented\")\n     }\n@@ -641,18 +641,18 @@ fn write_variants(\n         write_variant(ctxt, copy *variant);\n     }\n \n-    ctxt.w.write_line(~\"\");\n+    ctxt.w.put_line(~\"\");\n }\n \n fn write_variant(ctxt: &Ctxt, doc: doc::VariantDoc) {\n     fail_unless!(doc.sig.is_some());\n     let sig = (&doc.sig).get();\n     match copy doc.desc {\n       Some(desc) => {\n-        ctxt.w.write_line(fmt!(\"* `%s` - %s\", sig, desc));\n+        ctxt.w.put_line(fmt!(\"* `%s` - %s\", sig, desc));\n       }\n       None => {\n-        ctxt.w.write_line(fmt!(\"* `%s`\", sig));\n+        ctxt.w.put_line(fmt!(\"* `%s`\", sig));\n       }\n     }\n }\n@@ -804,7 +804,7 @@ fn should_write_type_signature() {\n     fail_unless!(str::contains(markdown, ~\"\\n\\n    type t = int\\n\\n\"));\n }\n \n-fn write_struct(\n+fn put_struct(\n     ctxt: &Ctxt,\n     doc: doc::StructDoc\n ) {\n@@ -813,7 +813,7 @@ fn write_struct(\n }\n \n #[test]\n-fn should_write_struct_header() {\n+fn should_put_struct_header() {\n     let markdown = test::render(~\"struct S { field: () }\");\n     fail_unless!(str::contains(markdown, ~\"## Struct `S`\\n\\n\"));\n }"}, {"sha": "f83897324145209448274415e8c0b52ed4d509de", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9e1e2660990012c35ee975530b0b8b3136baf0/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=bb9e1e2660990012c35ee975530b0b8b3136baf0", "patch": "@@ -34,21 +34,21 @@ pub type Writer = ~fn(v: WriteInstr);\n pub type WriterFactory = ~fn(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n-    fn write_str(&self, +str: ~str);\n-    fn write_line(&self, +str: ~str);\n-    fn write_done(&self);\n+    fn put_str(&self, +str: ~str);\n+    fn put_line(&self, +str: ~str);\n+    fn put_done(&self);\n }\n \n impl WriterUtils for Writer {\n-    fn write_str(&self, str: ~str) {\n+    fn put_str(&self, str: ~str) {\n         (*self)(Write(str));\n     }\n \n-    fn write_line(&self, str: ~str) {\n-        self.write_str(str + ~\"\\n\");\n+    fn put_line(&self, str: ~str) {\n+        self.put_str(str + ~\"\\n\");\n     }\n \n-    fn write_done(&self) {\n+    fn put_done(&self) {\n         (*self)(Done)\n     }\n }"}]}