{"sha": "ffbba8550a9fb02528638307c93235f758dcf78c", "node_id": "C_kwDOAAsO6NoAKGZmYmJhODU1MGE5ZmIwMjUyODYzODMwN2M5MzIzNWY3NThkY2Y3OGM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T14:43:02Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T17:03:08Z"}, "message": "Move `SelfAssignment` into `Operators` lint pass", "tree": {"sha": "cefbb86e8814ae20c4341d78b8e5ee6bd7e020fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cefbb86e8814ae20c4341d78b8e5ee6bd7e020fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffbba8550a9fb02528638307c93235f758dcf78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffbba8550a9fb02528638307c93235f758dcf78c", "html_url": "https://github.com/rust-lang/rust/commit/ffbba8550a9fb02528638307c93235f758dcf78c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffbba8550a9fb02528638307c93235f758dcf78c/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92891a01a1a8c9a703dd6323567ed8d9914e562f", "url": "https://api.github.com/repos/rust-lang/rust/commits/92891a01a1a8c9a703dd6323567ed8d9914e562f", "html_url": "https://github.com/rust-lang/rust/commit/92891a01a1a8c9a703dd6323567ed8d9914e562f"}], "stats": {"total": 134, "additions": 65, "deletions": 69}, "files": [{"sha": "27acdd7c726e1e9611899e8e23dacb76b9f80343", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=ffbba8550a9fb02528638307c93235f758dcf78c", "patch": "@@ -261,6 +261,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::MODULO_ONE),\n     LintId::of(operators::OP_REF),\n     LintId::of(operators::PTR_EQ),\n+    LintId::of(operators::SELF_ASSIGNMENT),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n@@ -286,7 +287,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(repeat_once::REPEAT_ONCE),\n     LintId::of(returns::LET_AND_RETURN),\n     LintId::of(returns::NEEDLESS_RETURN),\n-    LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n     LintId::of(serde_api::SERDE_API_MISUSE),\n     LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),"}, {"sha": "7d5e65cb27a1f709177d69e5b2105d16a69cb581", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=ffbba8550a9fb02528638307c93235f758dcf78c", "patch": "@@ -51,13 +51,13 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(operators::ERASING_OP),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MODULO_ONE),\n+    LintId::of(operators::SELF_ASSIGNMENT),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n     LintId::of(ptr::MUT_FROM_REF),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n     LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n     LintId::of(regex::INVALID_REGEX),\n-    LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(serde_api::SERDE_API_MISUSE),\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(swap::ALMOST_SWAPPED),"}, {"sha": "af7226f242f3cb35f328f5e8a10f8944bc56cb67", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=ffbba8550a9fb02528638307c93235f758dcf78c", "patch": "@@ -437,6 +437,7 @@ store.register_lints(&[\n     operators::NEEDLESS_BITWISE_BOOL,\n     operators::OP_REF,\n     operators::PTR_EQ,\n+    operators::SELF_ASSIGNMENT,\n     operators::VERBOSE_BIT_MASK,\n     option_env_unwrap::OPTION_ENV_UNWRAP,\n     option_if_let_else::OPTION_IF_LET_ELSE,\n@@ -483,7 +484,6 @@ store.register_lints(&[\n     returns::LET_AND_RETURN,\n     returns::NEEDLESS_RETURN,\n     same_name_method::SAME_NAME_METHOD,\n-    self_assignment::SELF_ASSIGNMENT,\n     self_named_constructors::SELF_NAMED_CONSTRUCTORS,\n     semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n     serde_api::SERDE_API_MISUSE,"}, {"sha": "172fdf8c85269c4944122c81f9e55ad7fcf905b1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ffbba8550a9fb02528638307c93235f758dcf78c", "patch": "@@ -355,7 +355,6 @@ mod repeat_once;\n mod return_self_not_must_use;\n mod returns;\n mod same_name_method;\n-mod self_assignment;\n mod self_named_constructors;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n@@ -829,7 +828,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(stable_sort_primitive::StableSortPrimitive));\n     store.register_late_pass(|| Box::new(repeat_once::RepeatOnce));\n     store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n-    store.register_late_pass(|| Box::new(self_assignment::SelfAssignment));\n     store.register_late_pass(|| Box::new(manual_ok_or::ManualOkOr));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n     store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));"}, {"sha": "35fe405bcf14fa052fcb77949ce4f687b4d6ec13", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=ffbba8550a9fb02528638307c93235f758dcf78c", "patch": "@@ -22,6 +22,7 @@ mod needless_bitwise_bool;\n mod numeric_arithmetic;\n mod op_ref;\n mod ptr_eq;\n+mod self_assignment;\n mod verbose_bit_mask;\n \n declare_clippy_lint! {\n@@ -701,6 +702,45 @@ declare_clippy_lint! {\n     \"use `std::ptr::eq` when comparing raw pointers\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for explicit self-assignments.\n+    ///\n+    /// ### Why is this bad?\n+    /// Self-assignments are redundant and unlikely to be\n+    /// intentional.\n+    ///\n+    /// ### Known problems\n+    /// If expression contains any deref coercions or\n+    /// indexing operations they are assumed not to have any side effects.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Event {\n+    ///     x: i32,\n+    /// }\n+    ///\n+    /// fn copy_position(a: &mut Event, b: &Event) {\n+    ///     a.x = a.x;\n+    /// }\n+    /// ```\n+    ///\n+    /// Should be:\n+    /// ```rust\n+    /// struct Event {\n+    ///     x: i32,\n+    /// }\n+    ///\n+    /// fn copy_position(a: &mut Event, b: &Event) {\n+    ///     a.x = b.x;\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.48.0\"]\n+    pub SELF_ASSIGNMENT,\n+    correctness,\n+    \"explicit self-assignment\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -730,6 +770,7 @@ impl_lint_pass!(Operators => [\n     MODULO_ARITHMETIC,\n     NEEDLESS_BITWISE_BOOL,\n     PTR_EQ,\n+    SELF_ASSIGNMENT,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -775,6 +816,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n             },\n             ExprKind::Assign(lhs, rhs, _) => {\n                 assign_op_pattern::check(cx, e, lhs, rhs);\n+                self_assignment::check(cx, e, lhs, rhs);\n             },\n             ExprKind::Unary(op, arg) => {\n                 if op == UnOp::Neg {"}, {"sha": "9d6bec05bf095d15327032512d2b2f8d2bb11666", "filename": "clippy_lints/src/operators/self_assignment.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbba8550a9fb02528638307c93235f758dcf78c/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs?ref=ffbba8550a9fb02528638307c93235f758dcf78c", "patch": "@@ -0,0 +1,20 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::eq_expr_value;\n+use clippy_utils::source::snippet;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+\n+use super::SELF_ASSIGNMENT;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, lhs: &'tcx Expr<'_>, rhs: &'tcx Expr<'_>) {\n+    if eq_expr_value(cx, lhs, rhs) {\n+        let lhs = snippet(cx, lhs.span, \"<lhs>\");\n+        let rhs = snippet(cx, rhs.span, \"<rhs>\");\n+        span_lint(\n+            cx,\n+            SELF_ASSIGNMENT,\n+            e.span,\n+            &format!(\"self-assignment of `{}` to `{}`\", rhs, lhs),\n+        );\n+    }\n+}"}, {"sha": "af7f5c9b681bb26c0bcfd4041c7c0fb1b700b305", "filename": "clippy_lints/src/self_assignment.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_assignment.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -1,64 +0,0 @@\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::eq_expr_value;\n-use clippy_utils::source::snippet;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for explicit self-assignments.\n-    ///\n-    /// ### Why is this bad?\n-    /// Self-assignments are redundant and unlikely to be\n-    /// intentional.\n-    ///\n-    /// ### Known problems\n-    /// If expression contains any deref coercions or\n-    /// indexing operations they are assumed not to have any side effects.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// struct Event {\n-    ///     x: i32,\n-    /// }\n-    ///\n-    /// fn copy_position(a: &mut Event, b: &Event) {\n-    ///     a.x = a.x;\n-    /// }\n-    /// ```\n-    ///\n-    /// Should be:\n-    /// ```rust\n-    /// struct Event {\n-    ///     x: i32,\n-    /// }\n-    ///\n-    /// fn copy_position(a: &mut Event, b: &Event) {\n-    ///     a.x = b.x;\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.48.0\"]\n-    pub SELF_ASSIGNMENT,\n-    correctness,\n-    \"explicit self-assignment\"\n-}\n-\n-declare_lint_pass!(SelfAssignment => [SELF_ASSIGNMENT]);\n-\n-impl<'tcx> LateLintPass<'tcx> for SelfAssignment {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Assign(lhs, rhs, _) = &expr.kind {\n-            if eq_expr_value(cx, lhs, rhs) {\n-                let lhs = snippet(cx, lhs.span, \"<lhs>\");\n-                let rhs = snippet(cx, rhs.span, \"<rhs>\");\n-                span_lint(\n-                    cx,\n-                    SELF_ASSIGNMENT,\n-                    expr.span,\n-                    &format!(\"self-assignment of `{}` to `{}`\", rhs, lhs),\n-                );\n-            }\n-        }\n-    }\n-}"}]}