{"sha": "ae8ae650fcf8fcdc178fb839b9dbdd67b5864816", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOGFlNjUwZmNmOGZjZGMxNzhmYjgzOWI5ZGJkZDY3YjU4NjQ4MTY=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-15T15:50:07Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-15T15:50:07Z"}, "message": "Fixed bug that allowed for completion in a nested method.", "tree": {"sha": "29d950ab40cab17a798eb42a99fc796b98f79e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d950ab40cab17a798eb42a99fc796b98f79e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8ae650fcf8fcdc178fb839b9dbdd67b5864816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8ae650fcf8fcdc178fb839b9dbdd67b5864816", "html_url": "https://github.com/rust-lang/rust/commit/ae8ae650fcf8fcdc178fb839b9dbdd67b5864816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8ae650fcf8fcdc178fb839b9dbdd67b5864816/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc13b7fc9a9944f33170a8f1ce13782dc5bde781", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc13b7fc9a9944f33170a8f1ce13782dc5bde781", "html_url": "https://github.com/rust-lang/rust/commit/fc13b7fc9a9944f33170a8f1ce13782dc5bde781"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "83b97eb76e4c8da1c163ee22a73fa0e233812634", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ae8ae650fcf8fcdc178fb839b9dbdd67b5864816/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8ae650fcf8fcdc178fb839b9dbdd67b5864816/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=ae8ae650fcf8fcdc178fb839b9dbdd67b5864816", "patch": "@@ -17,7 +17,10 @@ use crate::{\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     let trigger = ctx.token.ancestors().find(|p| match p.kind() {\n-        SyntaxKind::FN_DEF | SyntaxKind::TYPE_ALIAS_DEF | SyntaxKind::CONST_DEF => true,\n+        SyntaxKind::FN_DEF\n+        | SyntaxKind::TYPE_ALIAS_DEF\n+        | SyntaxKind::CONST_DEF\n+        | SyntaxKind::BLOCK_EXPR => true,\n         _ => false,\n     });\n \n@@ -98,10 +101,9 @@ fn add_function_impl(\n \n     let snippet = format!(\"{} {{}}\", display);\n \n-    builder\n-        .text_edit(TextEdit::replace(fn_def_node.text_range(), snippet))\n-        .kind(completion_kind)\n-        .add_to(acc);\n+    let range = TextRange::from_to(fn_def_node.text_range().start(), ctx.source_range().end());\n+\n+    builder.text_edit(TextEdit::replace(range, snippet)).kind(completion_kind).add_to(acc);\n }\n \n fn add_type_alias_impl(\n@@ -114,8 +116,10 @@ fn add_type_alias_impl(\n \n     let snippet = format!(\"type {} = \", alias_name);\n \n+    let range = TextRange::from_to(type_def_node.text_range().start(), ctx.source_range().end());\n+\n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n-        .text_edit(TextEdit::replace(type_def_node.text_range(), snippet))\n+        .text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n         .kind(CompletionItemKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db))\n@@ -133,8 +137,11 @@ fn add_const_impl(\n     if let Some(const_name) = const_name {\n         let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n \n+        let range =\n+            TextRange::from_to(const_def_node.text_range().start(), ctx.source_range().end());\n+\n         CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n-            .text_edit(TextEdit::replace(const_def_node.text_range(), snippet))\n+            .text_edit(TextEdit::replace(range, snippet))\n             .lookup_by(const_name)\n             .kind(CompletionItemKind::Const)\n             .set_documentation(const_.docs(ctx.db))\n@@ -235,6 +242,28 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn completes_only_on_top_level() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn foo();\n+\n+                fn foo_bar();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                fn foo() {\n+                    <|>\n+                }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"[]\"###);\n+    }\n+\n     #[test]\n     fn generic_fn() {\n         let completions = complete("}]}