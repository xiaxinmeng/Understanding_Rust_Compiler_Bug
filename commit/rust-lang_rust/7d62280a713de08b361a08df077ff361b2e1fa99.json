{"sha": "7d62280a713de08b361a08df077ff361b2e1fa99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNjIyODBhNzEzZGUwOGIzNjFhMDhkZjA3N2ZmMzYxYjJlMWZhOTk=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-04-05T15:25:47Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-04-05T18:06:47Z"}, "message": "Hide unit fn return types", "tree": {"sha": "a39fbb5d654a5626ce66c11446776c739b462d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39fbb5d654a5626ce66c11446776c739b462d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d62280a713de08b361a08df077ff361b2e1fa99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d62280a713de08b361a08df077ff361b2e1fa99", "html_url": "https://github.com/rust-lang/rust/commit/7d62280a713de08b361a08df077ff361b2e1fa99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d62280a713de08b361a08df077ff361b2e1fa99/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3431312418ea255e98d3f94536344d396b9b07d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3431312418ea255e98d3f94536344d396b9b07d6", "html_url": "https://github.com/rust-lang/rust/commit/3431312418ea255e98d3f94536344d396b9b07d6"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "1665e25e4f8192b915e4a6c5f1b1c8255108f44a", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=7d62280a713de08b361a08df077ff361b2e1fa99", "patch": "@@ -155,7 +155,11 @@ impl HirDisplay for ApplicationTy {\n                 let sig = FnSig::from_fn_ptr_substs(&self.parameters);\n                 write!(f, \"fn(\")?;\n                 f.write_joined(sig.params(), \", \")?;\n-                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n+                write!(f, \")\")?;\n+                let ret = sig.ret();\n+                if *ret != Ty::unit() {\n+                    write!(f, \" -> {}\", ret.display(f.db))?;\n+                }\n             }\n             TypeCtor::FnDef(def) => {\n                 let sig = f.db.callable_item_signature(def).subst(&self.parameters);\n@@ -180,7 +184,11 @@ impl HirDisplay for ApplicationTy {\n                 }\n                 write!(f, \"(\")?;\n                 f.write_joined(sig.params(), \", \")?;\n-                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n+                write!(f, \")\")?;\n+                let ret = sig.ret();\n+                if *ret != Ty::unit() {\n+                    write!(f, \" -> {}\", ret.display(f.db))?;\n+                }\n             }\n             TypeCtor::Adt(def_id) => {\n                 let name = match def_id {\n@@ -242,16 +250,16 @@ impl HirDisplay for ApplicationTy {\n                 let sig = self.parameters[0]\n                     .callable_sig(f.db)\n                     .expect(\"first closure parameter should contain signature\");\n-                let return_type_hint = sig.ret().display(f.db);\n                 if sig.params().is_empty() {\n-                    write!(f, \"|| -> {}\", return_type_hint)?;\n+                    write!(f, \"||\")?;\n                 } else if f.omit_verbose_types() {\n-                    write!(f, \"|{}| -> {}\", TYPE_HINT_TRUNCATION, return_type_hint)?;\n+                    write!(f, \"|{}|\", TYPE_HINT_TRUNCATION)?;\n                 } else {\n                     write!(f, \"|\")?;\n                     f.write_joined(sig.params(), \", \")?;\n-                    write!(f, \"| -> {}\", return_type_hint)?;\n+                    write!(f, \"|\")?;\n                 };\n+                write!(f, \" -> {}\", sig.ret().display(f.db))?;\n             }\n         }\n         Ok(())"}, {"sha": "b2c971f0241ddf57640e66138c0e9d522f19187b", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=7d62280a713de08b361a08df077ff361b2e1fa99", "patch": "@@ -407,16 +407,16 @@ fn test() {\n     [30; 31) 'x': &Foo\n     [39; 41) '{}': ()\n     [52; 133) '{     ...oo); }': ()\n-    [58; 71) 'takes_ref_foo': fn takes_ref_foo(&Foo) -> ()\n+    [58; 71) 'takes_ref_foo': fn takes_ref_foo(&Foo)\n     [58; 77) 'takes_...(&Foo)': ()\n     [72; 76) '&Foo': &Foo\n     [73; 76) 'Foo': Foo\n-    [83; 96) 'takes_ref_foo': fn takes_ref_foo(&Foo) -> ()\n+    [83; 96) 'takes_ref_foo': fn takes_ref_foo(&Foo)\n     [83; 103) 'takes_...&&Foo)': ()\n     [97; 102) '&&Foo': &&Foo\n     [98; 102) '&Foo': &Foo\n     [99; 102) 'Foo': Foo\n-    [109; 122) 'takes_ref_foo': fn takes_ref_foo(&Foo) -> ()\n+    [109; 122) 'takes_ref_foo': fn takes_ref_foo(&Foo)\n     [109; 130) 'takes_...&&Foo)': ()\n     [123; 129) '&&&Foo': &&&Foo\n     [124; 129) '&&Foo': &&Foo\n@@ -484,7 +484,7 @@ fn test() {\n     [171; 178) 'loop {}': !\n     [176; 178) '{}': ()\n     [191; 236) '{     ... }); }': ()\n-    [197; 210) 'takes_ref_str': fn takes_ref_str(&str) -> ()\n+    [197; 210) 'takes_ref_str': fn takes_ref_str(&str)\n     [197; 233) 'takes_...g() })': ()\n     [211; 232) '&{ ret...ng() }': &String\n     [212; 232) '{ retu...ng() }': String"}, {"sha": "3402e0cb5aa49a4ae2e814d46e60e06a3f42f605", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=7d62280a713de08b361a08df077ff361b2e1fa99", "patch": "@@ -376,7 +376,7 @@ fn issue_2669() {\n         ),\n         @r###\"\n     [147; 262) '{     ...     }': ()\n-    [161; 164) 'end': fn end<{unknown}>() -> ()\n+    [161; 164) 'end': fn end<{unknown}>()\n     [161; 166) 'end()': ()\n     [199; 252) '{     ...     }': ()\n     [221; 223) '_x': !"}, {"sha": "c2f1ded2f4d55377eb74e4864cd10a284481c4db", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=7d62280a713de08b361a08df077ff361b2e1fa99", "patch": "@@ -521,7 +521,7 @@ fn test() -> &mut &f64 {\n     [88; 89) 'a': u32\n     [92; 108) 'unknow...nction': {unknown}\n     [92; 110) 'unknow...tion()': u32\n-    [116; 125) 'takes_u32': fn takes_u32(u32) -> ()\n+    [116; 125) 'takes_u32': fn takes_u32(u32)\n     [116; 128) 'takes_u32(a)': ()\n     [126; 127) 'a': u32\n     [138; 139) 'b': i32\n@@ -1749,9 +1749,9 @@ fn main() {\n     [67; 91) 'Vtable...| {} }': Vtable\n     [84; 89) '|| {}': || -> ()\n     [87; 89) '{}': ()\n-    [101; 102) 'm': fn() -> ()\n+    [101; 102) 'm': fn()\n     [105; 111) 'vtable': Vtable\n-    [105; 118) 'vtable.method': fn() -> ()\n+    [105; 118) 'vtable.method': fn()\n     \"###\n     );\n }"}, {"sha": "081aa943a4e9f6a13731409b69a3f305178b971b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d62280a713de08b361a08df077ff361b2e1fa99/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=7d62280a713de08b361a08df077ff361b2e1fa99", "patch": "@@ -263,7 +263,7 @@ fn test() {\n     [119; 120) 'S': S<u32>(u32) -> S<u32>\n     [119; 129) 'S(unknown)': S<u32>\n     [121; 128) 'unknown': u32\n-    [135; 138) 'foo': fn foo<S<u32>>(S<u32>) -> ()\n+    [135; 138) 'foo': fn foo<S<u32>>(S<u32>)\n     [135; 141) 'foo(s)': ()\n     [139; 140) 's': S<u32>\n     \"###\n@@ -962,7 +962,7 @@ fn test(x: impl Trait<u64>, y: &impl Trait<u32>) {\n     [224; 225) 'S': S<u16>(u16) -> S<u16>\n     [224; 228) 'S(1)': S<u16>\n     [226; 227) '1': u16\n-    [234; 237) 'bar': fn bar(S<u16>) -> ()\n+    [234; 237) 'bar': fn bar(S<u16>)\n     [234; 240) 'bar(z)': ()\n     [238; 239) 'z': S<u16>\n     [246; 247) 'x': impl Trait<u64>\n@@ -1108,8 +1108,8 @@ fn test() {\n     [40; 47) 'loop {}': !\n     [45; 47) '{}': ()\n     [91; 124) '{     ...foo; }': ()\n-    [101; 102) 'f': fn(S) -> ()\n-    [118; 121) 'foo': fn foo(S) -> ()\n+    [101; 102) 'f': fn(S)\n+    [118; 121) 'foo': fn foo(S)\n     \"###\n     );\n }\n@@ -1962,7 +1962,7 @@ fn test() -> impl Trait<i32> {\n     [229; 241) 'S(default())': S<u32>\n     [231; 238) 'default': fn default<u32>() -> u32\n     [231; 240) 'default()': u32\n-    [247; 250) 'foo': fn foo(S<u32>) -> ()\n+    [247; 250) 'foo': fn foo(S<u32>)\n     [247; 254) 'foo(s1)': ()\n     [251; 253) 's1': S<u32>\n     [264; 265) 'x': i32\n@@ -2012,7 +2012,7 @@ fn main() {\n     [147; 149) '_v': F\n     [192; 195) '{ }': ()\n     [207; 238) '{     ... }); }': ()\n-    [213; 223) 'f::<(), _>': fn f<(), |&()| -> ()>(|&()| -> ()) -> ()\n+    [213; 223) 'f::<(), _>': fn f<(), |&()| -> ()>(|&()| -> ())\n     [213; 235) 'f::<()... z; })': ()\n     [224; 234) '|z| { z; }': |&()| -> ()\n     [225; 226) 'z': &()"}]}