{"sha": "aaa505af02bd7f449690e3febce342e96cc192a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYTUwNWFmMDJiZDdmNDQ5NjkwZTNmZWJjZTM0MmU5NmNjMTkyYTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-20T06:26:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-28T10:33:33Z"}, "message": "remove some unused CTFE error variants", "tree": {"sha": "12463fe44ac6ce40861b9a34490c2f605ab25283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12463fe44ac6ce40861b9a34490c2f605ab25283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaa505af02bd7f449690e3febce342e96cc192a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa505af02bd7f449690e3febce342e96cc192a8", "html_url": "https://github.com/rust-lang/rust/commit/aaa505af02bd7f449690e3febce342e96cc192a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaa505af02bd7f449690e3febce342e96cc192a8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a42382f64d77d4a7121b4f25f537c574639e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a42382f64d77d4a7121b4f25f537c574639e89", "html_url": "https://github.com/rust-lang/rust/commit/02a42382f64d77d4a7121b4f25f537c574639e89"}], "stats": {"total": 97, "additions": 1, "deletions": 96}, "files": [{"sha": "8f837327ddb151d5dbf2891fa8c7f0abeb8f83a9", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aaa505af02bd7f449690e3febce342e96cc192a8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa505af02bd7f449690e3febce342e96cc192a8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=aaa505af02bd7f449690e3febce342e96cc192a8", "patch": "@@ -597,48 +597,6 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n                 required.hash_stable(hcx, hasher);\n                 has.hash_stable(hcx, hasher)\n             },\n-            MemoryLockViolation {\n-                ptr,\n-                len,\n-                frame,\n-                access,\n-                ref lock,\n-            } =>  {\n-                ptr.hash_stable(hcx, hasher);\n-                len.hash_stable(hcx, hasher);\n-                frame.hash_stable(hcx, hasher);\n-                access.hash_stable(hcx, hasher);\n-                lock.hash_stable(hcx, hasher)\n-            },\n-            MemoryAcquireConflict {\n-                ptr,\n-                len,\n-                kind,\n-                ref lock,\n-            } =>  {\n-                ptr.hash_stable(hcx, hasher);\n-                len.hash_stable(hcx, hasher);\n-                kind.hash_stable(hcx, hasher);\n-                lock.hash_stable(hcx, hasher)\n-            },\n-            InvalidMemoryLockRelease {\n-                ptr,\n-                len,\n-                frame,\n-                ref lock,\n-            } =>  {\n-                ptr.hash_stable(hcx, hasher);\n-                len.hash_stable(hcx, hasher);\n-                frame.hash_stable(hcx, hasher);\n-                lock.hash_stable(hcx, hasher)\n-            },\n-            DeallocatedLockedMemory {\n-                ptr,\n-                ref lock,\n-            } => {\n-                ptr.hash_stable(hcx, hasher);\n-                lock.hash_stable(hcx, hasher)\n-            },\n             ValidationFailure(ref s) => s.hash_stable(hcx, hasher),\n             TypeNotPrimitive(ty) => ty.hash_stable(hcx, hasher),\n             ReallocatedWrongMemoryKind(ref a, ref b) => {"}, {"sha": "4e44587a672ac61f714547c362571e5503191b5c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/aaa505af02bd7f449690e3febce342e96cc192a8/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa505af02bd7f449690e3febce342e96cc192a8/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=aaa505af02bd7f449690e3febce342e96cc192a8", "patch": "@@ -15,9 +15,7 @@ use ty::{Ty, layout};\n use ty::layout::{Size, Align, LayoutError};\n use rustc_target::spec::abi::Abi;\n \n-use super::{\n-    Pointer, Lock, AccessKind\n-};\n+use super::Pointer;\n \n use backtrace::Backtrace;\n \n@@ -274,29 +272,6 @@ pub enum EvalErrorKind<'tcx, O> {\n         required: Align,\n         has: Align,\n     },\n-    MemoryLockViolation {\n-        ptr: Pointer,\n-        len: u64,\n-        frame: usize,\n-        access: AccessKind,\n-        lock: Lock,\n-    },\n-    MemoryAcquireConflict {\n-        ptr: Pointer,\n-        len: u64,\n-        kind: AccessKind,\n-        lock: Lock,\n-    },\n-    InvalidMemoryLockRelease {\n-        ptr: Pointer,\n-        len: u64,\n-        frame: usize,\n-        lock: Lock,\n-    },\n-    DeallocatedLockedMemory {\n-        ptr: Pointer,\n-        lock: Lock,\n-    },\n     ValidationFailure(String),\n     CalledClosureAsFunction,\n     VtableForArgumentlessMethod,\n@@ -360,16 +335,8 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"pointer offset outside bounds of allocation\",\n             InvalidNullPointerUsage =>\n                 \"invalid use of NULL pointer\",\n-            MemoryLockViolation { .. } =>\n-                \"memory access conflicts with lock\",\n-            MemoryAcquireConflict { .. } =>\n-                \"new memory lock conflicts with existing lock\",\n             ValidationFailure(..) =>\n                 \"type validation failed\",\n-            InvalidMemoryLockRelease { .. } =>\n-                \"invalid attempt to release write lock\",\n-            DeallocatedLockedMemory { .. } =>\n-                \"tried to deallocate memory in conflict with a lock\",\n             ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             ReadBytesAsPointer =>\n@@ -495,22 +462,6 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n                        if access { \"memory access\" } else { \"pointer computed\" },\n                        ptr.offset.bytes(), ptr.alloc_id, allocation_size.bytes())\n             },\n-            MemoryLockViolation { ptr, len, frame, access, ref lock } => {\n-                write!(f, \"{:?} access by frame {} at {:?}, size {}, is in conflict with lock {:?}\",\n-                       access, frame, ptr, len, lock)\n-            }\n-            MemoryAcquireConflict { ptr, len, kind, ref lock } => {\n-                write!(f, \"new {:?} lock at {:?}, size {}, is in conflict with lock {:?}\",\n-                       kind, ptr, len, lock)\n-            }\n-            InvalidMemoryLockRelease { ptr, len, frame, ref lock } => {\n-                write!(f, \"frame {} tried to release memory write lock at {:?}, size {}, but \\\n-                       cannot release lock {:?}\", frame, ptr, len, lock)\n-            }\n-            DeallocatedLockedMemory { ptr, ref lock } => {\n-                write!(f, \"tried to deallocate memory at {:?} in conflict with lock {:?}\",\n-                       ptr, lock)\n-            }\n             ValidationFailure(ref err) => {\n                 write!(f, \"type validation failed: {}\", err)\n             }"}, {"sha": "8ee009db023f0beb304ebedb23e43130aa31b587", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaa505af02bd7f449690e3febce342e96cc192a8/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa505af02bd7f449690e3febce342e96cc192a8/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=aaa505af02bd7f449690e3febce342e96cc192a8", "patch": "@@ -183,11 +183,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     | InvalidDiscriminant(..)\n                     | PointerOutOfBounds { .. }\n                     | InvalidNullPointerUsage\n-                    | MemoryLockViolation { .. }\n-                    | MemoryAcquireConflict { .. }\n                     | ValidationFailure(..)\n-                    | InvalidMemoryLockRelease { .. }\n-                    | DeallocatedLockedMemory { .. }\n                     | InvalidPointerMath\n                     | ReadUndefBytes(_)\n                     | DeadLocal"}]}