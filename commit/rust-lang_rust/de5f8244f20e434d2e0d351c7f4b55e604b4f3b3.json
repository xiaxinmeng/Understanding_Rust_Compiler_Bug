{"sha": "de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWY4MjQ0ZjIwZTQzNGQyZTBkMzUxYzdmNGI1NWU2MDRiNGYzYjM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-25T17:35:40Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:51Z"}, "message": "trans: Use llvm::Attributes directly in ArgTy.", "tree": {"sha": "d128ccce17da925c734aa525bd011170c80d75a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d128ccce17da925c734aa525bd011170c80d75a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "html_url": "https://github.com/rust-lang/rust/commit/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7172a9935771601a67cdcbedcd2a8cda87367e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7172a9935771601a67cdcbedcd2a8cda87367e9", "html_url": "https://github.com/rust-lang/rust/commit/c7172a9935771601a67cdcbedcd2a8cda87367e9"}], "stats": {"total": 158, "additions": 80, "deletions": 78}, "files": [{"sha": "b8377916efe6b595b92aaf5b600440a70a4a2b5f", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -185,7 +185,7 @@ bitflags! {\n     }\n }\n \n-#[derive(Copy, Clone, Default)]\n+#[derive(Copy, Clone, Default, Debug)]\n pub struct Attributes {\n     regular: Attribute,\n     dereferenceable_bytes: u64"}, {"sha": "ccd276457ce648fa79e98ba1155ab1efff5bb092", "filename": "src/librustc_trans/trans/abi.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fabi.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::ArgKind::*;\n-\n use llvm;\n use trans::common::{return_type_is_void, type_is_fat_ptr};\n use trans::context::CrateContext;\n@@ -43,7 +41,7 @@ pub const FAT_PTR_ADDR: usize = 0;\n pub const FAT_PTR_EXTRA: usize = 1;\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n-pub enum ArgKind {\n+enum ArgKind {\n     /// Pass the argument directly using the normal converted\n     /// LLVM type or by coercing to another specified type\n     Direct,\n@@ -59,7 +57,7 @@ pub enum ArgKind {\n /// This is borrowed from clang's ABIInfo.h\n #[derive(Clone, Copy, Debug)]\n pub struct ArgType {\n-    pub kind: ArgKind,\n+    kind: ArgKind,\n     /// Original LLVM type\n     pub original_ty: Type,\n     /// Sizing LLVM type (pointers are opaque).\n@@ -81,28 +79,48 @@ pub struct ArgType {\n     pub cast: Option<Type>,\n     /// Dummy argument, which is emitted before the real argument\n     pub pad: Option<Type>,\n-    /// LLVM attribute of argument\n-    pub attr: Option<llvm::Attribute>\n+    /// LLVM attributes of argument\n+    pub attrs: llvm::Attributes\n }\n \n impl ArgType {\n     fn new(original_ty: Type, ty: Type) -> ArgType {\n         ArgType {\n-            kind: Direct,\n+            kind: ArgKind::Direct,\n             original_ty: original_ty,\n             ty: ty,\n             cast: None,\n             pad: None,\n-            attr: None\n+            attrs: llvm::Attributes::default()\n         }\n     }\n \n+    pub fn make_indirect(&mut self, ccx: &CrateContext) {\n+        // Wipe old attributes, likely not valid through indirection.\n+        self.attrs = llvm::Attributes::default();\n+\n+        let llarg_sz = llsize_of_real(ccx, self.ty);\n+\n+        // For non-immediate arguments the callee gets its own copy of\n+        // the value on the stack, so there are no aliases. It's also\n+        // program-invisible so can't possibly capture\n+        self.attrs.set(llvm::Attribute::NoAlias)\n+                  .set(llvm::Attribute::NoCapture)\n+                  .set_dereferenceable(llarg_sz);\n+\n+        self.kind = ArgKind::Indirect;\n+    }\n+\n+    pub fn ignore(&mut self) {\n+        self.kind = ArgKind::Ignore;\n+    }\n+\n     pub fn is_indirect(&self) -> bool {\n-        self.kind == Indirect\n+        self.kind == ArgKind::Indirect\n     }\n \n     pub fn is_ignore(&self) -> bool {\n-        self.kind == Ignore\n+        self.kind == ArgKind::Ignore\n     }\n }\n \n@@ -178,7 +196,7 @@ impl FnType {\n             if ty.is_bool() {\n                 let llty = Type::i1(ccx);\n                 let mut arg = ArgType::new(llty, llty);\n-                arg.attr = Some(llvm::Attribute::ZExt);\n+                arg.attrs.set(llvm::Attribute::ZExt);\n                 arg\n             } else {\n                 ArgType::new(type_of::type_of(ccx, ty),\n@@ -221,7 +239,7 @@ impl FnType {\n                 }\n                 let size = llsize_of_alloc(ccx, arg.ty);\n                 if size > llsize_of_alloc(ccx, ccx.int_type()) {\n-                    arg.kind = Indirect;\n+                    arg.make_indirect(ccx);\n                 } else if size > 0 {\n                     // We want to pass small aggregates as immediates, but using\n                     // a LLVM aggregate type for this leads to bad optimizations,\n@@ -238,6 +256,9 @@ impl FnType {\n             for arg in &mut fty.args {\n                 fixup(arg);\n             }\n+            if fty.ret.is_indirect() {\n+                fty.ret.attrs.set(llvm::Attribute::StructRet);\n+            }\n             return fty;\n         }\n \n@@ -264,6 +285,10 @@ impl FnType {\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n \n+        if fty.ret.is_indirect() {\n+            fty.ret.attrs.set(llvm::Attribute::StructRet);\n+        }\n+\n         fty\n     }\n \n@@ -302,43 +327,18 @@ impl FnType {\n         }\n     }\n \n-    pub fn llvm_attrs(&self, ccx: &CrateContext) -> llvm::AttrBuilder {\n+    pub fn llvm_attrs(&self) -> llvm::AttrBuilder {\n         let mut attrs = llvm::AttrBuilder::new();\n         let mut i = if self.ret.is_indirect() { 1 } else { 0 };\n-\n-        // Add attributes that are always applicable, independent of the concrete foreign ABI\n-        if self.ret.is_indirect() {\n-            let llret_sz = llsize_of_real(ccx, self.ret.ty);\n-\n-            // The outptr can be noalias and nocapture because it's entirely\n-            // invisible to the program. We also know it's nonnull as well\n-            // as how many bytes we can dereference\n-            attrs.arg(i).set(llvm::Attribute::StructRet)\n-                        .set(llvm::Attribute::NoAlias)\n-                        .set(llvm::Attribute::NoCapture)\n-                        .set_dereferenceable(llret_sz);\n-        };\n-\n-        // Add attributes that depend on the concrete foreign ABI\n-        if let Some(attr) = self.ret.attr {\n-            attrs.arg(i).set(attr);\n-        }\n-\n+        *attrs.arg(i) = self.ret.attrs;\n         i += 1;\n         for arg in &self.args {\n-            if arg.is_ignore() {\n-                continue;\n-            }\n-            // skip padding\n-            if arg.pad.is_some() { i += 1; }\n-\n-            if let Some(attr) = arg.attr {\n-                attrs.arg(i).set(attr);\n+            if !arg.is_ignore() {\n+                if arg.pad.is_some() { i += 1; }\n+                *attrs.arg(i) = arg.attrs;\n+                i += 1;\n             }\n-\n-            i += 1;\n         }\n-\n         attrs\n     }\n }"}, {"sha": "4398e14fdcc541b315a3931e83b56cfc8764c6e2", "filename": "src/librustc_trans/trans/cabi_aarch64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use trans::abi::{FnType, ArgType, Indirect};\n+use trans::abi::{FnType, ArgType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -185,7 +185,7 @@ fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n         ret.cast = Some(llty);\n         return;\n     }\n-    ret.kind = Indirect;\n+    ret.make_indirect(ccx);\n }\n \n fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n@@ -214,7 +214,7 @@ fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n         arg.cast = Some(llty);\n         return;\n     }\n-    arg.kind = Indirect;\n+    arg.make_indirect(ccx);\n }\n \n fn is_reg_ty(ty: Type) -> bool {"}, {"sha": "2146a9c5e21310f64d203dbb808de917fd2e77f8", "filename": "src/librustc_trans/trans/cabi_arm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use trans::abi::{FnType, ArgType, Indirect};\n+use trans::abi::{FnType, ArgType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -145,7 +145,7 @@ fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType, align_fn: TyAlignFn) {\n         ret.cast = Some(llty);\n         return;\n     }\n-    ret.kind = Indirect;\n+    ret.make_indirect(ccx);\n }\n \n fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, align_fn: TyAlignFn) {"}, {"sha": "4ec547c3640f144e11ff776b6744bb7492228de1", "filename": "src/librustc_trans/trans/cabi_asmjs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_asmjs.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_upper_case_globals)]\n \n use llvm::{Struct, Array, Attribute};\n-use trans::abi::{FnType, ArgType, Indirect};\n+use trans::abi::{FnType, ArgType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -20,36 +20,36 @@ use trans::type_::Type;\n // See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n // The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n \n-fn classify_ret_ty(ret: &mut ArgType) {\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n     match ret.ty.kind() {\n         Struct => {\n             let field_types = ret.ty.field_types();\n             if field_types.len() == 1 {\n                 ret.cast = Some(field_types[0]);\n             } else {\n-                ret.kind = Indirect;\n+                ret.make_indirect(ccx);\n             }\n         }\n         Array => {\n-            ret.kind = Indirect;\n+            ret.make_indirect(ccx);\n         }\n         _ => {}\n     }\n }\n \n-fn classify_arg_ty(arg: &mut ArgType) {\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n     if arg.ty.is_aggregate() {\n-        arg.kind = Indirect;\n-        arg.attr = Some(Attribute::ByVal);\n+        arg.make_indirect(ccx);\n+        arg.attrs.set(Attribute::ByVal);\n     }\n }\n \n pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n     if fty.ret.ty != Type::void(ccx) {\n-        classify_ret_ty(&mut fty.ret);\n+        classify_ret_ty(ccx, &mut fty.ret);\n     }\n \n     for arg in &mut fty.args {\n-        classify_arg_ty(arg);\n+        classify_arg_ty(ccx, arg);\n     }\n }"}, {"sha": "b4fe00f8d690339709b4e026d48be86cf625f891", "filename": "src/librustc_trans/trans/cabi_mips.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_mips.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -14,7 +14,7 @@ use libc::c_uint;\n use std::cmp;\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array, Vector};\n-use trans::abi::{ArgType, FnType, Indirect};\n+use trans::abi::{ArgType, FnType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -148,7 +148,7 @@ fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n     if fty.ret.ty != Type::void(ccx) {\n         if !is_reg_ty(fty.ret.ty) {\n-            fty.ret.kind = Indirect;\n+            fty.ret.make_indirect(ccx);\n         }\n     }\n "}, {"sha": "8d9c6e8e1f80f1751a6ef8685bec0d8a97035755", "filename": "src/librustc_trans/trans/cabi_powerpc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -11,7 +11,7 @@\n use libc::c_uint;\n use llvm;\n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n-use trans::abi::{FnType, ArgType, Indirect};\n+use trans::abi::{FnType, ArgType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -143,7 +143,7 @@ fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n     if fty.ret.ty != Type::void(ccx) {\n         if !is_reg_ty(fty.ret.ty) {\n-            fty.ret.kind = Indirect;\n+            fty.ret.make_indirect(ccx);\n         }\n     }\n "}, {"sha": "77858398f37c83ab60bf5f116ae72a2fd4f26582", "filename": "src/librustc_trans/trans/cabi_powerpc64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_powerpc64.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -16,7 +16,7 @@\n // need to be fixed when PowerPC vector support is added.\n \n use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n-use trans::abi::{FnType, ArgType, Indirect};\n+use trans::abi::{FnType, ArgType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -158,7 +158,7 @@ fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n \n     // The PowerPC64 big endian ABI doesn't return aggregates in registers\n     if ccx.sess().target.target.target_endian == \"big\" {\n-        ret.kind = Indirect;\n+        ret.make_indirect(ccx);\n     }\n \n     if let Some((base_ty, members)) = is_homogenous_aggregate_ty(ret.ty) {\n@@ -182,7 +182,7 @@ fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n         return;\n     }\n \n-    ret.kind = Indirect;\n+    ret.make_indirect(ccx);\n }\n \n fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {"}, {"sha": "af194e8e5d7b1d77b31c5725eba2adde0444e5ea", "filename": "src/librustc_trans/trans/cabi_x86.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::*;\n-use trans::abi::{FnType, Indirect, Ignore};\n+use trans::abi::FnType;\n use trans::type_::Type;\n use super::common::*;\n use super::machine::*;\n@@ -30,20 +30,20 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n                 2 => fty.ret.cast = Some(Type::i16(ccx)),\n                 4 => fty.ret.cast = Some(Type::i32(ccx)),\n                 8 => fty.ret.cast = Some(Type::i64(ccx)),\n-                _ => fty.ret.kind = Indirect\n+                _ => fty.ret.make_indirect(ccx)\n             }\n         } else {\n-            fty.ret.kind = Indirect;\n+            fty.ret.make_indirect(ccx);\n         }\n     }\n \n     for arg in &mut fty.args {\n         if arg.ty.kind() == Struct {\n             if llsize_of_alloc(ccx, arg.ty) == 0 {\n-                arg.kind = Ignore;\n+                arg.ignore();\n             } else {\n-                arg.kind = Indirect;\n-                arg.attr = Some(Attribute::ByVal);\n+                arg.make_indirect(ccx);\n+                arg.attrs.set(Attribute::ByVal);\n             }\n         }\n     }"}, {"sha": "c6f1dc9e671389c00615a7ad30780d78825b8af1", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -16,7 +16,7 @@ use self::RegClass::*;\n \n use llvm::{Integer, Pointer, Float, Double};\n use llvm::{Struct, Array, Attribute, Vector};\n-use trans::abi::{ArgType, FnType, Indirect};\n+use trans::abi::{ArgType, FnType};\n use trans::context::CrateContext;\n use trans::type_::Type;\n \n@@ -393,8 +393,10 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n         if !arg.ty.is_reg_ty() {\n             let cls = classify_ty(arg.ty);\n             if is_mem_cls(&cls) {\n-                arg.kind = Indirect;\n-                arg.attr = ind_attr;\n+                arg.make_indirect(ccx);\n+                if let Some(attr) = ind_attr {\n+                    arg.attrs.set(attr);\n+                }\n             } else {\n                 arg.cast = Some(llreg_ty(ccx, &cls));\n             }"}, {"sha": "448789530a54f89884cb818a8b89627f1c3d56df", "filename": "src/librustc_trans/trans/cabi_x86_win64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_win64.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -11,7 +11,7 @@\n use llvm::*;\n use super::common::*;\n use super::machine::*;\n-use trans::abi::{ArgType, FnType, Indirect};\n+use trans::abi::{ArgType, FnType};\n use trans::type_::Type;\n \n // Win64 ABI: http://msdn.microsoft.com/en-us/library/zthk2dkh.aspx\n@@ -24,7 +24,7 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n                 2 => a.cast = Some(Type::i16(ccx)),\n                 4 => a.cast = Some(Type::i32(ccx)),\n                 8 => a.cast = Some(Type::i64(ccx)),\n-                _ => a.kind = Indirect\n+                _ => a.make_indirect(ccx)\n             }\n         }\n     };"}, {"sha": "6d21a90bb0dff401bcda79715936cbd692863ab9", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -113,7 +113,7 @@ pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n         attributes::from_fn_type(ccx, fn_type)\n     } else {\n         attributes::unwind(llfn, false);\n-        fty.llvm_attrs(ccx)\n+        fty.llvm_attrs()\n     };\n \n     attrs.apply_llfn(llfn);"}, {"sha": "ac316d18940a9a32e98b9ac2de0f976c6eeb0fa7", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5f8244f20e434d2e0d351c7f4b55e604b4f3b3/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=de5f8244f20e434d2e0d351c7f4b55e604b4f3b3", "patch": "@@ -253,7 +253,7 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                         llfn,\n                                         &llargs_foreign[..],\n                                         fn_type.cconv,\n-                                        Some(fn_type.llvm_attrs(ccx)),\n+                                        Some(fn_type.llvm_attrs()),\n                                         call_debug_loc);\n \n     // If the function we just called does not use an outpointer,"}]}