{"sha": "438c430c765ca531f17dfed300c1ff4b35ca3cce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOGM0MzBjNzY1Y2E1MzFmMTdkZmVkMzAwYzFmZjRiMzVjYTNjY2U=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-27T18:49:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-08T16:57:25Z"}, "message": "Make can_reconstruct_query_key a function pointer.", "tree": {"sha": "0f34e01ec49c556e8d11305ee9376144aa5af5ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f34e01ec49c556e8d11305ee9376144aa5af5ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438c430c765ca531f17dfed300c1ff4b35ca3cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438c430c765ca531f17dfed300c1ff4b35ca3cce", "html_url": "https://github.com/rust-lang/rust/commit/438c430c765ca531f17dfed300c1ff4b35ca3cce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438c430c765ca531f17dfed300c1ff4b35ca3cce/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5027f1c6ea777b0e7485f997b2aed94852c7174f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5027f1c6ea777b0e7485f997b2aed94852c7174f", "html_url": "https://github.com/rust-lang/rust/commit/5027f1c6ea777b0e7485f997b2aed94852c7174f"}], "stats": {"total": 96, "additions": 61, "deletions": 35}, "files": [{"sha": "0d58ac7ae4930f92bb3ef98c37cbf0b0b841a8f0", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 56, "deletions": 31, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/438c430c765ca531f17dfed300c1ff4b35ca3cce/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438c430c765ca531f17dfed300c1ff4b35ca3cce/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=438c430c765ca531f17dfed300c1ff4b35ca3cce", "patch": "@@ -88,6 +88,12 @@ pub struct DepKindStruct {\n     /// their inputs have not changed since the last compiler invocation. The result is still\n     /// cached within one compiler invocation.\n     pub(super) is_eval_always: bool,\n+\n+    /// Whether the query key can be recovered from the hashed fingerprint.\n+    /// See [DepNodeParams] trait for the behaviour of each key type.\n+    // FIXME: Make this a simple boolean once DepNodeParams::can_reconstruct_query_key\n+    // can be made a specialized associated const.\n+    can_reconstruct_query_key: fn() -> bool,\n }\n \n impl std::ops::Deref for DepKind {\n@@ -97,6 +103,19 @@ impl std::ops::Deref for DepKind {\n     }\n }\n \n+impl DepKind {\n+    #[inline(always)]\n+    pub fn can_reconstruct_query_key(&self) -> bool {\n+        // Only fetch the DepKindStruct once.\n+        let data: &DepKindStruct = &**self;\n+        if data.is_anon {\n+            return false;\n+        }\n+\n+        (data.can_reconstruct_query_key)()\n+    }\n+}\n+\n // erase!() just makes tokens go away. It's used to specify which macro argument\n // is repeated (i.e., which sub-expression of the macro we are in) but don't need\n // to actually use any of the arguments.\n@@ -133,20 +152,41 @@ macro_rules! contains_eval_always_attr {\n #[allow(non_upper_case_globals)]\n pub mod dep_kind {\n     use super::*;\n+    use crate::ty::query::query_keys;\n \n     // We use this for most things when incr. comp. is turned off.\n-    pub const Null: DepKindStruct =\n-        DepKindStruct { has_params: false, is_anon: false, is_eval_always: false };\n+    pub const Null: DepKindStruct = DepKindStruct {\n+        has_params: false,\n+        is_anon: false,\n+        is_eval_always: false,\n+\n+        can_reconstruct_query_key: || true,\n+    };\n \n     // Represents metadata from an extern crate.\n-    pub const CrateMetadata: DepKindStruct =\n-        DepKindStruct { has_params: true, is_anon: false, is_eval_always: true };\n+    pub const CrateMetadata: DepKindStruct = DepKindStruct {\n+        has_params: true,\n+        is_anon: false,\n+        is_eval_always: true,\n+\n+        can_reconstruct_query_key: || true,\n+    };\n+\n+    pub const TraitSelect: DepKindStruct = DepKindStruct {\n+        has_params: false,\n+        is_anon: true,\n+        is_eval_always: false,\n \n-    pub const TraitSelect: DepKindStruct =\n-        DepKindStruct { has_params: false, is_anon: true, is_eval_always: false };\n+        can_reconstruct_query_key: || false,\n+    };\n+\n+    pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {\n+        has_params: true,\n+        is_anon: false,\n+        is_eval_always: false,\n \n-    pub const CompileCodegenUnit: DepKindStruct =\n-        DepKindStruct { has_params: true, is_anon: false, is_eval_always: false };\n+        can_reconstruct_query_key: || false,\n+    };\n \n     macro_rules! define_query_dep_kinds {\n         ($(\n@@ -158,10 +198,18 @@ pub mod dep_kind {\n                 const is_anon: bool = contains_anon_attr!($($attrs)*);\n                 const is_eval_always: bool = contains_eval_always_attr!($($attrs)*);\n \n+                #[inline(always)]\n+                fn can_reconstruct_query_key() -> bool {\n+                    !is_anon &&\n+                    <query_keys::$variant<'_> as DepNodeParams<TyCtxt<'_>>>\n+                        ::can_reconstruct_query_key()\n+                }\n+\n                 DepKindStruct {\n                     has_params,\n                     is_anon,\n                     is_eval_always,\n+                    can_reconstruct_query_key,\n                 }\n             };)*\n         );\n@@ -186,29 +234,6 @@ macro_rules! define_dep_nodes {\n             $($variant),*\n         }\n \n-        impl DepKind {\n-            #[allow(unreachable_code)]\n-            pub fn can_reconstruct_query_key<$tcx>(&self) -> bool {\n-                if self.is_anon {\n-                    return false;\n-                }\n-\n-                match *self {\n-                    $(\n-                        DepKind :: $variant => {\n-                            // tuple args\n-                            $({\n-                                return <$tuple_arg_ty as DepNodeParams<TyCtxt<'_>>>\n-                                    ::can_reconstruct_query_key();\n-                            })*\n-\n-                            true\n-                        }\n-                    )*\n-                }\n-            }\n-        }\n-\n         pub struct DepConstructor;\n \n         #[allow(non_camel_case_types)]"}, {"sha": "d4cbbfa86ae2bc0b1828f32694d4447a027cb0fa", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/438c430c765ca531f17dfed300c1ff4b35ca3cce/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438c430c765ca531f17dfed300c1ff4b35ca3cce/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=438c430c765ca531f17dfed300c1ff4b35ca3cce", "patch": "@@ -26,6 +26,11 @@ pub type SerializedDepGraph = rustc_query_system::dep_graph::SerializedDepGraph<\n impl rustc_query_system::dep_graph::DepKind for DepKind {\n     const NULL: Self = DepKind::Null;\n \n+    #[inline(always)]\n+    fn can_reconstruct_query_key(&self) -> bool {\n+        DepKind::can_reconstruct_query_key(self)\n+    }\n+\n     #[inline(always)]\n     fn is_eval_always(&self) -> bool {\n         self.is_eval_always\n@@ -83,10 +88,6 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n             op(icx.task_deps)\n         })\n     }\n-\n-    fn can_reconstruct_query_key(&self) -> bool {\n-        DepKind::can_reconstruct_query_key(self)\n-    }\n }\n \n impl<'tcx> DepContext for TyCtxt<'tcx> {"}]}