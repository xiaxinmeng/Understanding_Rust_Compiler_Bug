{"sha": "91312a9ff98d1f82313c42a2387df49fbdf09ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzEyYTlmZjk4ZDFmODIzMTNjNDJhMjM4N2RmNDlmYmRmMDlhYzY=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-05T14:53:17Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-05T14:53:17Z"}, "message": "Add resolve_local_name to resolve names in a function scope", "tree": {"sha": "b09d89eb522394be12c5b522e7b96f3882f9db82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b09d89eb522394be12c5b522e7b96f3882f9db82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91312a9ff98d1f82313c42a2387df49fbdf09ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91312a9ff98d1f82313c42a2387df49fbdf09ac6", "html_url": "https://github.com/rust-lang/rust/commit/91312a9ff98d1f82313c42a2387df49fbdf09ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91312a9ff98d1f82313c42a2387df49fbdf09ac6/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bf190f7aca4cadec5394c397bd7c084b53b9f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bf190f7aca4cadec5394c397bd7c084b53b9f5", "html_url": "https://github.com/rust-lang/rust/commit/81bf190f7aca4cadec5394c397bd7c084b53b9f5"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "03f9df0945171d38a3a239d67b15ceacb8cd758d", "filename": "crates/ra_editor/src/scope/fn_scope.rs", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/91312a9ff98d1f82313c42a2387df49fbdf09ac6/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91312a9ff98d1f82313c42a2387df49fbdf09ac6/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=91312a9ff98d1f82313c42a2387df49fbdf09ac6", "patch": "@@ -241,6 +241,18 @@ struct ScopeData {\n     entries: Vec<ScopeEntry>\n }\n \n+pub fn resolve_local_name<'a>(name_ref: ast::NameRef, scopes: &'a FnScopes) -> Option<ast::Name<'a>> {\n+    use std::collections::HashSet;\n+\n+    let mut shadowed = HashSet::new();\n+    let names = scopes.scope_chain(name_ref.syntax())\n+        .flat_map(|scope| scopes.entries(scope).iter())\n+        .filter(|entry| shadowed.insert(entry.name()))\n+        .filter(|entry| entry.name() == name_ref.text())\n+        .nth(0)?;\n+    names.ast().name()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -265,7 +277,7 @@ mod tests {\n             .flat_map(|scope| scopes.entries(scope))\n             .map(|it| it.name())\n             .collect::<Vec<_>>();\n-        assert_eq!(expected, actual.as_slice());\n+        assert_eq!(actual.as_slice(), expected);\n     }\n \n     #[test]\n@@ -326,4 +338,69 @@ mod tests {\n             &[\"x\"],\n         );\n     }\n-}\n+\n+    #[test]\n+    fn test_shadow_variable() {\n+        do_check(r\"\n+            fn foo(x: String) {\n+                let x : &str = &x<|>;\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    fn do_check_local_name(code: &str, expected_offset: u32) {\n+        let (off, code) = extract_offset(code);\n+        let code = {\n+            let mut buf = String::new();\n+            let off = u32::from(off) as usize;\n+            buf.push_str(&code[..off]);\n+            buf.push_str(&code[off..]);\n+            buf\n+        };\n+\n+        let file = File::parse(&code);\n+        let fn_def: ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n+        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n+\n+        let scopes = FnScopes::new(fn_def);\n+\n+        let local_name = resolve_local_name(name_ref, &scopes).unwrap();\n+\n+        let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into()).unwrap();\n+        assert_eq!(local_name.syntax().range(), expected_name.syntax().range());\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name() {\n+        do_check_local_name(r#\"\n+            fn foo(x: i32, y: u32) {\n+                {\n+                    let z = x * 2;\n+                }\n+                {\n+                    let t = x<|> * 3;\n+                }\n+            }\"#,\n+            21);\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name_declaration() {\n+        do_check_local_name(r#\"\n+            fn foo(x: String) {\n+                let x : &str = &x<|>;\n+            }\"#,\n+            21);\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name_shadow() {\n+        do_check_local_name(r\"\n+        fn foo(x: String) {\n+            let x : &str = &x;\n+            x<|>\n+        }\",\n+        46);\n+    }\n+}\n\\ No newline at end of file"}]}