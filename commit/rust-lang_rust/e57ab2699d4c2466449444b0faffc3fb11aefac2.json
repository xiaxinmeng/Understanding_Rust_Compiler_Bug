{"sha": "e57ab2699d4c2466449444b0faffc3fb11aefac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1N2FiMjY5OWQ0YzI0NjY0NDk0NDRiMGZhZmZjM2ZiMTFhZWZhYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T03:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T03:04:14Z"}, "message": "Auto merge of #56926 - alexcrichton:update-stdsimd, r=TimNN\n\nUpdate the stdsimd submodule\n\nThis brings in a few updates:\n\n* Update wasm intrinsic naming for atomics\n* Update and reimplement most simd128 wasm intrinsics\n* Other misc improvements here and there, including a small start to\n  AVX-512 intrinsics", "tree": {"sha": "262c6d9f1f412a85af7b67eae3e21b4b0583a096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/262c6d9f1f412a85af7b67eae3e21b4b0583a096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57ab2699d4c2466449444b0faffc3fb11aefac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57ab2699d4c2466449444b0faffc3fb11aefac2", "html_url": "https://github.com/rust-lang/rust/commit/e57ab2699d4c2466449444b0faffc3fb11aefac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57ab2699d4c2466449444b0faffc3fb11aefac2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad781a065ac874e402e15927a22faa080e97fe94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad781a065ac874e402e15927a22faa080e97fe94", "html_url": "https://github.com/rust-lang/rust/commit/ad781a065ac874e402e15927a22faa080e97fe94"}, {"sha": "5e5823c67b7d6ec25e8140e037c83115bf1321e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5823c67b7d6ec25e8140e037c83115bf1321e7", "html_url": "https://github.com/rust-lang/rust/commit/5e5823c67b7d6ec25e8140e037c83115bf1321e7"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "b558cacad5981a47ec8cd93b9d344541d72e70a5", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e57ab2699d4c2466449444b0faffc3fb11aefac2", "patch": "@@ -119,6 +119,7 @@\n #![feature(mips_target_feature)]\n #![feature(aarch64_target_feature)]\n #![feature(wasm_target_feature)]\n+#![feature(avx512_target_feature)]\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]"}, {"sha": "4b6d57f12e26f28d7caa225dcbcea5dde497ca18", "filename": "src/libstd/sys/wasm/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Falloc.rs?ref=e57ab2699d4c2466449444b0faffc3fb11aefac2", "patch": "@@ -74,7 +74,7 @@ mod lock {\n                 return DropLock\n             }\n             unsafe {\n-                let r = wasm32::atomic::wait_i32(\n+                let r = wasm32::i32_atomic_wait(\n                     &LOCKED as *const AtomicI32 as *mut i32,\n                     1,  // expected value\n                     -1, // timeout\n@@ -89,7 +89,7 @@ mod lock {\n             let r = LOCKED.swap(0, SeqCst);\n             debug_assert_eq!(r, 1);\n             unsafe {\n-                wasm32::atomic::wake(\n+                wasm32::atomic_notify(\n                     &LOCKED as *const AtomicI32 as *mut i32,\n                     1, // only one thread\n                 );"}, {"sha": "c2b524dc153ad6d593708e267ddde23340dba6e3", "filename": "src/libstd/sys/wasm/condvar_atomics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fcondvar_atomics.rs?ref=e57ab2699d4c2466449444b0faffc3fb11aefac2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use arch::wasm32::atomic;\n+use arch::wasm32;\n use cmp;\n use mem;\n use sync::atomic::{AtomicUsize, Ordering::SeqCst};\n@@ -52,13 +52,13 @@ impl Condvar {\n \n     pub unsafe fn notify_one(&self) {\n         self.cnt.fetch_add(1, SeqCst);\n-        atomic::wake(self.ptr(), 1);\n+        wasm32::atomic_notify(self.ptr(), 1);\n     }\n \n     #[inline]\n     pub unsafe fn notify_all(&self) {\n         self.cnt.fetch_add(1, SeqCst);\n-        atomic::wake(self.ptr(), -1); // -1 == \"wake everyone\"\n+        wasm32::atomic_notify(self.ptr(), u32::max_value()); // -1 == \"wake everyone\"\n     }\n \n     pub unsafe fn wait(&self, mutex: &Mutex) {\n@@ -72,7 +72,7 @@ impl Condvar {\n         // wake us up once we're asleep.\n         let ticket = self.cnt.load(SeqCst) as i32;\n         mutex.unlock();\n-        let val = atomic::wait_i32(self.ptr(), ticket, -1);\n+        let val = wasm32::i32_atomic_wait(self.ptr(), ticket, -1);\n         // 0 == woken, 1 == not equal to `ticket`, 2 == timeout (shouldn't happen)\n         debug_assert!(val == 0 || val == 1);\n         mutex.lock();\n@@ -86,7 +86,7 @@ impl Condvar {\n \n         // If the return value is 2 then a timeout happened, so we return\n         // `false` as we weren't actually notified.\n-        let ret = atomic::wait_i32(self.ptr(), ticket, nanos as i64) != 2;\n+        let ret = wasm32::i32_atomic_wait(self.ptr(), ticket, nanos as i64) != 2;\n         mutex.lock();\n         return ret\n     }"}, {"sha": "7216f1c82d1ccf184b29191046b5b12f7924206f", "filename": "src/libstd/sys/wasm/mutex_atomics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmutex_atomics.rs?ref=e57ab2699d4c2466449444b0faffc3fb11aefac2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use arch::wasm32::atomic;\n+use arch::wasm32;\n use cell::UnsafeCell;\n use mem;\n use sync::atomic::{AtomicUsize, AtomicU32, Ordering::SeqCst};\n@@ -36,7 +36,7 @@ impl Mutex {\n \n     pub unsafe fn lock(&self) {\n         while !self.try_lock() {\n-            let val = atomic::wait_i32(\n+            let val = wasm32::i32_atomic_wait(\n                 self.ptr(),\n                 1,  // we expect our mutex is locked\n                 -1, // wait infinitely\n@@ -50,7 +50,7 @@ impl Mutex {\n     pub unsafe fn unlock(&self) {\n         let prev = self.locked.swap(0, SeqCst);\n         debug_assert_eq!(prev, 1);\n-        atomic::wake(self.ptr(), 1); // wake up one waiter, if any\n+        wasm32::atomic_notify(self.ptr(), 1); // wake up one waiter, if any\n     }\n \n     #[inline]\n@@ -104,7 +104,7 @@ impl ReentrantMutex {\n     pub unsafe fn lock(&self) {\n         let me = thread::my_id();\n         while let Err(owner) = self._try_lock(me) {\n-            let val = atomic::wait_i32(self.ptr(), owner as i32, -1);\n+            let val = wasm32::i32_atomic_wait(self.ptr(), owner as i32, -1);\n             debug_assert!(val == 0 || val == 1);\n         }\n     }\n@@ -143,7 +143,7 @@ impl ReentrantMutex {\n         match *self.recursions.get() {\n             0 => {\n                 self.owner.swap(0, SeqCst);\n-                atomic::wake(self.ptr() as *mut i32, 1); // wake up one waiter, if any\n+                wasm32::atomic_notify(self.ptr() as *mut i32, 1); // wake up one waiter, if any\n             }\n             ref mut n => *n -= 1,\n         }"}, {"sha": "cca0fe2f282d40565ce51f36cfe0862c691645cd", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57ab2699d4c2466449444b0faffc3fb11aefac2/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=e57ab2699d4c2466449444b0faffc3fb11aefac2", "patch": "@@ -41,7 +41,7 @@ impl Thread {\n \n     #[cfg(target_feature = \"atomics\")]\n     pub fn sleep(dur: Duration) {\n-        use arch::wasm32::atomic;\n+        use arch::wasm32;\n         use cmp;\n \n         // Use an atomic wait to block the current thread artificially with a\n@@ -53,7 +53,7 @@ impl Thread {\n         while nanos > 0 {\n             let amt = cmp::min(i64::max_value() as u128, nanos);\n             let mut x = 0;\n-            let val = unsafe { atomic::wait_i32(&mut x, 0, amt as i64) };\n+            let val = unsafe { wasm32::i32_atomic_wait(&mut x, 0, amt as i64) };\n             debug_assert_eq!(val, 2);\n             nanos -= amt;\n         }\n@@ -107,7 +107,7 @@ cfg_if! {\n             panic!(\"thread local data not implemented on wasm with atomics yet\")\n         }\n \n-        pub fn tcb_set(ptr: *mut u8) {\n+        pub fn tcb_set(_ptr: *mut u8) {\n             panic!(\"thread local data not implemented on wasm with atomics yet\")\n         }\n     } else {"}, {"sha": "513e067908f3e2eb8b31ad1c12b2e0a62817e557", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=e57ab2699d4c2466449444b0faffc3fb11aefac2", "patch": "@@ -1 +1 @@\n-Subproject commit 3c0503db8439928e42c1175f0009c506fc874ae9\n+Subproject commit 513e067908f3e2eb8b31ad1c12b2e0a62817e557"}]}