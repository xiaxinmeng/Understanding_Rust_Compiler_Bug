{"sha": "f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MWRiYmI0NGZjOWU5ZmRkOWY0YWVmZTVlMGY0MzVhNDM4ZGFhNDY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-21T12:10:33Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-22T11:49:42Z"}, "message": "Improved documentation of functions in new module.", "tree": {"sha": "6b65207a1fe589394aa4cf2789a0d767bda9157b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b65207a1fe589394aa4cf2789a0d767bda9157b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltUb1YACgkQAXYLT59T\n8VRy3A/4wvsGULsp67GiaK4/kaznqFvy2s3wrtUbcbFgiY0cfb9o/rJjHnNl0o5f\nCqDeljGX9Ge8N97OMoUAAEXPAAvKQ5+QqoeuCMHaK6PIyYxqGTSrL9kvD5nlZXJ1\nR6E0yfcuSkRCvV1hy9Vsqua+plKWplsO6JfJQFvCxBV2PVDHn+XsrcmOrdJaxGO4\neVn0MXuydkgluYWhiH1neRIK+FEPUM30A86iw9NETB3X+NUfTThZJWMdV67xkV2I\ncbysXvFMKsUSkCPGuzKKqwxCmRfLyL/0gzwTPburEzvydU4LVVgwOr/UvgI/IbbZ\nQBeQAD8ijiSakhA3tcSJGln/b1Enjzgl8EsPu/HCPECnNSZuf1IGR2EHVAyzDYDs\nmyJkkbqcFJrqsyDkOCR5TnmlIWQey0u9LQGeAZcpXf91x0hGOjQA32r+5vl7bni2\ncdbOkLNIMeb+OXXSxq4eob37PDkwnZDWn8+7BDa2JWq9UgT2NMVJEeCS6GDoZNZm\nKXALtJsdJJY5gNWGjKjDg6gpo79n4udPAawbylncsafenT5M0+iIdkYNG4Fdpl5a\n2VeqnV60rBSSy9ylfUavWBKe6p11gjEX8SPv34ejEwhr6XWLc1FyV3Is+koIUkNU\n7xN/Zc5FHq6LVbzVQALKPA4/EdSvFA3LAA4FrYsqHZpSWFDzsw==\n=dfVC\n-----END PGP SIGNATURE-----", "payload": "tree 6b65207a1fe589394aa4cf2789a0d767bda9157b\nparent 571eec627c63cea40ea9fba16b86cfafb1446c34\nauthor David Wood <david@davidtw.co> 1532175033 +0100\ncommitter David Wood <david@davidtw.co> 1532260182 +0100\n\nImproved documentation of functions in new module.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "html_url": "https://github.com/rust-lang/rust/commit/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "571eec627c63cea40ea9fba16b86cfafb1446c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/571eec627c63cea40ea9fba16b86cfafb1446c34", "html_url": "https://github.com/rust-lang/rust/commit/571eec627c63cea40ea9fba16b86cfafb1446c34"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "c0eca026331ba3891b2cef0b85d1e58f0db485b9", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "patch": "@@ -430,10 +430,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         diag.span_label(\n             upvar_span,\n-            format!(\n-                \"lifetime `{}` appears in the type of `{}`\",\n-                region_name, upvar_name.unwrap(),\n-            ),\n+            format!(\"lifetime `{}` appears in the type of `{}`\", region_name, upvar_name),\n         );\n \n         Some(region_name)"}, {"sha": "ba572de0de7efd69542acd12529cd4217cfcaa2e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=f71dbbb44fc9e9fdd9f4aefe5e0f435a438daa46", "patch": "@@ -28,7 +28,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         debug!(\"get_var_name_and_span_for_region: attempting upvar\");\n         self.get_upvar_index_for_region(tcx, fr)\n-            .map(|index| self.get_upvar_name_and_span_for_region(tcx, mir, index))\n+            .map(|index| {\n+                let (name, span) = self.get_upvar_name_and_span_for_region(tcx, mir, index);\n+                (Some(name), span)\n+            })\n             .or_else(|| {\n                 debug!(\"get_var_name_and_span_for_region: attempting argument\");\n                 self.get_argument_index_for_region(tcx, fr)\n@@ -37,7 +40,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .unwrap_or_else(|| span_bug!(mir.span, \"can't find var name for free region {:?}\", fr))\n     }\n \n-    /// Get upvar index for a region.\n+    /// Search the upvars (if any) to find one that references fr. Return its index.\n     crate fn get_upvar_index_for_region(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n@@ -69,13 +72,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         Some(upvar_index)\n     }\n \n-    /// Get upvar name and span for a region.\n+    /// Given the index of an upvar, finds its name and the span from where it was\n+    /// declared.\n     crate fn get_upvar_name_and_span_for_region(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         upvar_index: usize,\n-    ) -> (Option<Symbol>, Span) {\n+    ) -> (Symbol, Span) {\n         let upvar_hir_id = mir.upvar_decls[upvar_index].var_hir_id.assert_crate_local();\n         let upvar_node_id = tcx.hir.hir_to_node_id(upvar_hir_id);\n         debug!(\"get_upvar_name_and_span_for_region: upvar_node_id={:?}\", upvar_node_id);\n@@ -85,10 +89,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"get_upvar_name_and_span_for_region: upvar_name={:?} upvar_span={:?}\",\n                upvar_name, upvar_span);\n \n-        (Some(upvar_name), upvar_span)\n+        (upvar_name, upvar_span)\n     }\n \n-    /// Get argument index for a region.\n+    /// Search the argument types for one that references fr (which should be a free region).\n+    /// Returns Some(_) with the index of the input if one is found.\n+    ///\n+    /// NB: In the case of a closure, the index is indexing into the signature as seen by the\n+    /// user - in particular, index 0 is not the implicit self parameter.\n     crate fn get_argument_index_for_region(\n         &self,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n@@ -116,7 +124,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         Some(argument_index)\n     }\n \n-    /// Get argument name and span for a region.\n+    /// Given the index of an argument, finds its name (if any) and the span from where it was\n+    /// declared.\n     crate fn get_argument_name_and_span_for_region(\n         &self,\n         mir: &Mir<'tcx>,"}]}