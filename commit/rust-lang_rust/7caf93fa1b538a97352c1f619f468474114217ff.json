{"sha": "7caf93fa1b538a97352c1f619f468474114217ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYWY5M2ZhMWI1MzhhOTczNTJjMWY2MTlmNDY4NDc0MTE0MjE3ZmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-05-26T04:31:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T04:31:07Z"}, "message": "Rollup merge of #85672 - CDirkx:ip, r=Mark-Simulacrum\n\nMove stability attribute for items under the `ip` feature\n\nThe `#[unstable]` attribute for items under the `ip` feature is currently located on the `std::net::ip` module itself. This is unusual, and less readable. This has sidetracked discussion about these items numerous times (https://github.com/rust-lang/rust/pull/60145#issuecomment-498016572, https://github.com/rust-lang/rust/pull/76098#discussion_r530463543, https://github.com/rust-lang/rust/pull/76098#discussion_r558067755, https://github.com/rust-lang/rust/pull/75019#discussion_r467464300, https://github.com/rust-lang/rust/pull/75019#issuecomment-672888727) and lead to incorrect assumptions about which items are actually stable (https://github.com/rust-lang/rust/pull/60145#issuecomment-485970669, https://github.com/rust-lang/rust/pull/76098#discussion_r530444275).\n\nThis PR moves the attribute from the module to the items themselves.", "tree": {"sha": "498d4e751f28fe671f6a7e61c261cacb45cce003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/498d4e751f28fe671f6a7e61c261cacb45cce003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7caf93fa1b538a97352c1f619f468474114217ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrc8LCRBK7hj4Ov3rIwAAu2gIABd9eWsmrdtA3gCpUQmoY6TW\nFKhOTvFroi/dRIBOye2OhRnRtymwLxX8EuYu3NtP/T28aFKXqJs0atqcIPVRuV+V\nbbshNWmBy6/s+/ZOVWdXQGKMgpbcLWr7qRZt73xTbmZGVlK+Ih5zhgwSF9fxShwX\nnICJf3+Mxu0oszaBASfVwr8B3Db4jMZlctS8vvlceLv1nj5iMz2GhkiKqlZMLArY\nP5Hu/iF+gRa1lmprsCVCUyDO9N8BNV1oxm7+Pzl0kURl64rF+qBoT8pL+9OcEavJ\njYINEfXaQFNTY0LinfdGTkdeWbn5I/s7C+1cpvTyFy9amjuX5OhOgH1WEof9sew=\n=5cKL\n-----END PGP SIGNATURE-----\n", "payload": "tree 498d4e751f28fe671f6a7e61c261cacb45cce003\nparent 1e51afa9bad9340cd4dc7add9ba64d5fd5042a12\nparent 87cf2d472646f49245e6a50f04d50ea833796151\nauthor Yuki Okushi <jtitor@2k36.org> 1622003467 +0900\ncommitter GitHub <noreply@github.com> 1622003467 +0900\n\nRollup merge of #85672 - CDirkx:ip, r=Mark-Simulacrum\n\nMove stability attribute for items under the `ip` feature\n\nThe `#[unstable]` attribute for items under the `ip` feature is currently located on the `std::net::ip` module itself. This is unusual, and less readable. This has sidetracked discussion about these items numerous times (https://github.com/rust-lang/rust/pull/60145#issuecomment-498016572, https://github.com/rust-lang/rust/pull/76098#discussion_r530463543, https://github.com/rust-lang/rust/pull/76098#discussion_r558067755, https://github.com/rust-lang/rust/pull/75019#discussion_r467464300, https://github.com/rust-lang/rust/pull/75019#issuecomment-672888727) and lead to incorrect assumptions about which items are actually stable (https://github.com/rust-lang/rust/pull/60145#issuecomment-485970669, https://github.com/rust-lang/rust/pull/76098#discussion_r530444275).\n\nThis PR moves the attribute from the module to the items themselves.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7caf93fa1b538a97352c1f619f468474114217ff", "html_url": "https://github.com/rust-lang/rust/commit/7caf93fa1b538a97352c1f619f468474114217ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7caf93fa1b538a97352c1f619f468474114217ff/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e51afa9bad9340cd4dc7add9ba64d5fd5042a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e51afa9bad9340cd4dc7add9ba64d5fd5042a12", "html_url": "https://github.com/rust-lang/rust/commit/1e51afa9bad9340cd4dc7add9ba64d5fd5042a12"}, {"sha": "87cf2d472646f49245e6a50f04d50ea833796151", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cf2d472646f49245e6a50f04d50ea833796151", "html_url": "https://github.com/rust-lang/rust/commit/87cf2d472646f49245e6a50f04d50ea833796151"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "a8261709cea9f0d15034cad249f2ec702396057c", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7caf93fa1b538a97352c1f619f468474114217ff/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7caf93fa1b538a97352c1f619f468474114217ff/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=7caf93fa1b538a97352c1f619f468474114217ff", "patch": "@@ -1,11 +1,3 @@\n-#![unstable(\n-    feature = \"ip\",\n-    reason = \"extra functionality has not been \\\n-                                      scrutinized to the level that it should \\\n-                                      be to be stable\",\n-    issue = \"27709\"\n-)]\n-\n // Tests for this module\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;\n@@ -126,6 +118,7 @@ pub struct Ipv6Addr {\n \n #[allow(missing_docs)]\n #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]\n+#[unstable(feature = \"ip\", issue = \"27709\")]\n pub enum Ipv6MulticastScope {\n     InterfaceLocal,\n     LinkLocal,\n@@ -199,6 +192,7 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self {\n@@ -249,6 +243,7 @@ impl IpAddr {\n     /// );\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         match self {\n@@ -549,6 +544,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(80, 9, 12, 3).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two\n@@ -587,6 +583,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(100, 128, 0, 0).is_shared(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_shared(&self) -> bool {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n@@ -620,6 +617,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_ietf_protocol_assignment(&self) -> bool {\n         self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n@@ -644,6 +642,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(198, 20, 0, 0).is_benchmarking(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_benchmarking(&self) -> bool {\n         self.octets()[0] == 198 && (self.octets()[1] & 0xfe) == 18\n@@ -677,6 +676,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(255, 255, 255, 255).is_reserved(), false);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_reserved(&self) -> bool {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n@@ -1234,6 +1234,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n@@ -1260,6 +1261,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -1315,6 +1317,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_link_local_strict(&self) -> bool {\n         matches!(self.segments(), [0xfe80, 0, 0, 0, ..])\n@@ -1369,6 +1372,7 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -1409,6 +1413,7 @@ impl Ipv6Addr {\n     ///\n     /// [RFC 3879]: https://tools.ietf.org/html/rfc3879\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n@@ -1432,6 +1437,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -1468,6 +1474,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n@@ -1494,6 +1501,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n@@ -1555,6 +1563,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {"}]}