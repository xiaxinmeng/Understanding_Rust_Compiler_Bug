{"sha": "49c2279ef658d8732597c4da93897d84838f3df5", "node_id": "C_kwDOAAsO6NoAKDQ5YzIyNzllZjY1OGQ4NzMyNTk3YzRkYTkzODk3ZDg0ODM4ZjNkZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T09:08:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T09:08:07Z"}, "message": "Auto merge of #105820 - matthiaskrgr:rollup-uzm1l8f, r=matthiaskrgr\n\nRollup of 2 pull requests\n\nSuccessful merges:\n\n - #105770 (Rename ConstS to ConstData)\n - #105785 (Add regression test for #55976)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "701b370d9d7b0e4e8da5699036e7321ece85418d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701b370d9d7b0e4e8da5699036e7321ece85418d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c2279ef658d8732597c4da93897d84838f3df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c2279ef658d8732597c4da93897d84838f3df5", "html_url": "https://github.com/rust-lang/rust/commit/49c2279ef658d8732597c4da93897d84838f3df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c2279ef658d8732597c4da93897d84838f3df5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fde300029933d20140550458b1a90420d2f55163", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde300029933d20140550458b1a90420d2f55163", "html_url": "https://github.com/rust-lang/rust/commit/fde300029933d20140550458b1a90420d2f55163"}, {"sha": "905caed79ee9d804a7fc1fdde311af6a31a278ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/905caed79ee9d804a7fc1fdde311af6a31a278ed", "html_url": "https://github.com/rust-lang/rust/commit/905caed79ee9d804a7fc1fdde311af6a31a278ed"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "75282f958b53b3b738c6498f16600f59209f2698", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -93,7 +93,7 @@ macro_rules! arena_types {\n             // Interned types\n             [] tys: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::TyKind<'tcx>>,\n             [] predicates: rustc_type_ir::WithCachedTypeInfo<rustc_middle::ty::PredicateKind<'tcx>>,\n-            [] consts: rustc_middle::ty::ConstS<'tcx>,\n+            [] consts: rustc_middle::ty::ConstData<'tcx>,\n \n             // Note that this deliberately duplicates items in the `rustc_hir::arena`,\n             // since we need to allocate this type on both the `rustc_hir` arena"}, {"sha": "8cc8286c1dbe67ea25fba051aab058f27ba18d2b", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -310,7 +310,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> RefDecodable<'tcx, D>\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::Const<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        let consts: ty::ConstS<'tcx> = Decodable::decode(decoder);\n+        let consts: ty::ConstData<'tcx> = Decodable::decode(decoder);\n         decoder.interner().mk_const(consts.kind, consts.ty)\n     }\n }"}, {"sha": "e5abc38046ced9003709e43ee04b419ba6f1f63a", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -14,10 +14,10 @@ pub use int::*;\n pub use kind::*;\n pub use valtree::*;\n \n-/// Use this rather than `ConstS`, whenever possible.\n+/// Use this rather than `ConstData, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_pass_by_value]\n-pub struct Const<'tcx>(pub Interned<'tcx, ConstS<'tcx>>);\n+pub struct Const<'tcx>(pub(super) Interned<'tcx, ConstData<'tcx>>);\n \n impl<'tcx> fmt::Debug for Const<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -30,13 +30,13 @@ impl<'tcx> fmt::Debug for Const<'tcx> {\n \n /// Typed constant value.\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, HashStable, TyEncodable, TyDecodable)]\n-pub struct ConstS<'tcx> {\n+pub struct ConstData<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub kind: ConstKind<'tcx>,\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-static_assert_size!(ConstS<'_>, 40);\n+static_assert_size!(ConstData<'_>, 40);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]"}, {"sha": "8f4d56c65b98575a3161cd4ef73f01f56e6c4585", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -17,7 +17,7 @@ use crate::thir::Thir;\n use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n-    self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstS, DefIdTree, FloatTy, FloatVar,\n+    self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, DefIdTree, FloatTy, FloatVar,\n     FloatVid, GenericParamDefKind, ImplPolarity, InferTy, IntTy, IntVar, IntVid, List, ParamConst,\n     ParamTy, PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, Region, RegionKind,\n     ReprOptions, TraitObjectVisitor, Ty, TyKind, TyVar, TyVid, TypeAndMut, TypeckResults, UintTy,\n@@ -140,7 +140,7 @@ pub struct CtxtInterners<'tcx> {\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n-    const_: InternedSet<'tcx, ConstS<'tcx>>,\n+    const_: InternedSet<'tcx, ConstData<'tcx>>,\n     const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, LayoutS<VariantIdx>>,\n@@ -331,7 +331,7 @@ impl<'tcx> CommonConsts<'tcx> {\n         };\n \n         CommonConsts {\n-            unit: mk_const(ty::ConstS {\n+            unit: mk_const(ty::ConstData {\n                 kind: ty::ConstKind::Value(ty::ValTree::zst()),\n                 ty: types.unit,\n             }),\n@@ -1601,7 +1601,7 @@ macro_rules! direct_interners {\n \n direct_interners! {\n     region: mk_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n-    const_: mk_const_internal(ConstS<'tcx>): Const -> Const<'tcx>,\n+    const_: mk_const_internal(ConstData<'tcx>): Const -> Const<'tcx>,\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: intern_layout(LayoutS<VariantIdx>): Layout -> Layout<'tcx>,\n     adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n@@ -1976,7 +1976,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const_internal(ty::ConstS { kind: kind.into(), ty })\n+        self.mk_const_internal(ty::ConstData { kind: kind.into(), ty })\n     }\n \n     #[inline]"}, {"sha": "a8e1253e67057bdc504be706707f10cc29f119d5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -80,7 +80,7 @@ pub use self::closure::{\n     CAPTURE_STRUCT_LOCAL,\n };\n pub use self::consts::{\n-    Const, ConstInt, ConstKind, ConstS, Expr, InferConst, ScalarInt, UnevaluatedConst, ValTree,\n+    Const, ConstData, ConstInt, ConstKind, Expr, InferConst, ScalarInt, UnevaluatedConst, ValTree,\n };\n pub use self::context::{\n     tls, CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GlobalCtxt, Lift, OnDiskCache, TyCtxt,\n@@ -945,7 +945,7 @@ impl<'tcx> Term<'tcx> {\n                     &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyKind<'tcx>>),\n                 ))),\n                 CONST_TAG => TermKind::Const(ty::Const(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),\n+                    &*((ptr & !TAG_MASK) as *const ty::ConstData<'tcx>),\n                 ))),\n                 _ => core::intrinsics::unreachable(),\n             }\n@@ -991,7 +991,7 @@ impl<'tcx> TermKind<'tcx> {\n             TermKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(&*ct.0.0) & TAG_MASK, 0);\n-                (CONST_TAG, ct.0.0 as *const ty::ConstS<'tcx> as usize)\n+                (CONST_TAG, ct.0.0 as *const ty::ConstData<'tcx> as usize)\n             }\n         };\n "}, {"sha": "a04b15f8cf13c52385a886956a9d07229c31bd02", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(&*ct.0.0) & TAG_MASK, 0);\n-                (CONST_TAG, ct.0.0 as *const ty::ConstS<'tcx> as usize)\n+                (CONST_TAG, ct.0.0 as *const ty::ConstData<'tcx> as usize)\n             }\n         };\n \n@@ -166,7 +166,7 @@ impl<'tcx> GenericArg<'tcx> {\n                     &*((ptr & !TAG_MASK) as *const WithCachedTypeInfo<ty::TyKind<'tcx>>),\n                 ))),\n                 CONST_TAG => GenericArgKind::Const(ty::Const(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),\n+                    &*((ptr & !TAG_MASK) as *const ty::ConstData<'tcx>),\n                 ))),\n                 _ => intrinsics::unreachable(),\n             }"}, {"sha": "3142704b78cf6ea72fd9cc66f11b8fa4bd2e5d13", "filename": "src/test/ui/codegen/issue-55976.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49c2279ef658d8732597c4da93897d84838f3df5/src%2Ftest%2Fui%2Fcodegen%2Fissue-55976.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c2279ef658d8732597c4da93897d84838f3df5/src%2Ftest%2Fui%2Fcodegen%2Fissue-55976.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-55976.rs?ref=49c2279ef658d8732597c4da93897d84838f3df5", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// ^-- The above is needed as this issue is related to LLVM/codegen.\n+// min-llvm-version:15.0.0\n+// ^-- The above is needed as this issue is fixed by the opaque pointers.\n+\n+fn main() {\n+    type_error(|x| &x);\n+}\n+\n+fn type_error<T>(\n+    _selector: for<'a> fn(&'a Vec<Box<dyn for<'b> Fn(&'b u8)>>) -> &'a Vec<Box<dyn Fn(T)>>,\n+) {\n+}"}]}