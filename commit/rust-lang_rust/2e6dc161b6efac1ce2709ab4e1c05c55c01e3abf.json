{"sha": "2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNmRjMTYxYjZlZmFjMWNlMjcwOWFiNGUxYzA1YzU1YzAxZTNhYmY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-30T23:20:59Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-31T18:37:22Z"}, "message": "Give tasks useful names. #2891", "tree": {"sha": "0d1425329ceab3ed0e4062355955de3060e685fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1425329ceab3ed0e4062355955de3060e685fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "html_url": "https://github.com/rust-lang/rust/commit/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389aba09523f805e3b493a5089c6397749b06b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/389aba09523f805e3b493a5089c6397749b06b67", "html_url": "https://github.com/rust-lang/rust/commit/389aba09523f805e3b493a5089c6397749b06b67"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "c38b929a6cea0c67ab86381be3615b26a57dc6c4", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "patch": "@@ -316,12 +316,14 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n             // Just put an unpinned task onto one of the default schedulers.\n             let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool, main);\n             main_task.death.on_exit = Some(on_exit);\n+            main_task.name = Some(~\"main\");\n             scheds[0].enqueue_task(main_task);\n         }\n         Some(ref mut main_sched) => {\n             let home = Sched(main_sched.make_handle());\n             let mut main_task = ~Task::new_root_homed(&mut scheds[0].stack_pool, home, main);\n             main_task.death.on_exit = Some(on_exit);\n+            main_task.name = Some(~\"main\");\n             main_sched.enqueue_task(main_task);\n         }\n     };"}, {"sha": "c1b799796d1587e067d9a3a2192141c6de02636e", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "patch": "@@ -40,7 +40,9 @@ pub struct Task {\n     taskgroup: Option<Taskgroup>,\n     death: Death,\n     destroyed: bool,\n-    coroutine: Option<~Coroutine>\n+    coroutine: Option<~Coroutine>,\n+    // FIXME(#6874/#7599) use StringRef to save on allocations\n+    name: Option<~str>,\n }\n \n pub struct Coroutine {\n@@ -90,7 +92,8 @@ impl Task {\n             taskgroup: None,\n             death: Death::new(),\n             destroyed: false,\n-            coroutine: Some(~Coroutine::new(stack_pool, start))\n+            coroutine: Some(~Coroutine::new(stack_pool, start)),\n+            name: None,\n         }\n     }\n \n@@ -109,7 +112,8 @@ impl Task {\n             // FIXME(#7544) make watching optional\n             death: self.death.new_child(),\n             destroyed: false,\n-            coroutine: Some(~Coroutine::new(stack_pool, start))\n+            coroutine: Some(~Coroutine::new(stack_pool, start)),\n+            name: None,\n         }\n     }\n "}, {"sha": "4ca5d82265fbf7e6911cc21412e7546eeb61d38e", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "patch": "@@ -137,12 +137,13 @@ impl FailWithCause for &'static str {\n \n // FIXME #4427: Temporary until rt::rt_fail_ goes away\n pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n-    use cell::Cell;\n     use either::Left;\n+    use option::{Some, None};\n     use rt::{context, OldTaskContext, TaskContext};\n     use rt::task::Task;\n     use rt::local::Local;\n     use rt::logging::Logger;\n+    use str::Str;\n \n     let context = context();\n     match context {\n@@ -159,20 +160,26 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n                 let msg = str::raw::from_c_str(msg);\n                 let file = str::raw::from_c_str(file);\n \n-                let outmsg = fmt!(\"task failed at '%s', %s:%i\",\n-                                  msg, file, line as int);\n-\n                 // XXX: Logging doesn't work correctly in non-task context because it\n                 // invokes the local heap\n                 if context == TaskContext {\n                     // XXX: Logging doesn't work here - the check to call the log\n                     // function never passes - so calling the log function directly.\n-                    let outmsg = Cell::new(outmsg);\n                     do Local::borrow::<Task, ()> |task| {\n-                        task.logger.log(Left(outmsg.take()));\n+                        let msg = match task.name {\n+                            Some(ref name) =>\n+                                fmt!(\"task '%s' failed at '%s', %s:%i\",\n+                                     name.as_slice(), msg, file, line as int),\n+                            None =>\n+                                fmt!(\"task <unnamed> failed at '%s', %s:%i\",\n+                                     msg, file, line as int)\n+                        };\n+\n+                        task.logger.log(Left(msg));\n                     }\n                 } else {\n-                    rterrln!(\"%s\", outmsg);\n+                    rterrln!(\"failed in non-task context at '%s', %s:%i\",\n+                             msg, file, line as int);\n                 }\n \n                 gc::cleanup_stack_for_failure();"}, {"sha": "29a0dc9e337d03134f850a86959a84e64d6c4185", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "patch": "@@ -120,6 +120,8 @@ pub struct SchedOpts {\n  *\n  * * notify_chan - Enable lifecycle notifications on the given channel\n  *\n+ * * name - A name for the task-to-be, for identification in failure messages.\n+ *\n  * * sched - Specify the configuration of a new scheduler to create the task\n  *           in\n  *\n@@ -139,6 +141,7 @@ pub struct TaskOpts {\n     watched: bool,\n     indestructible: bool,\n     notify_chan: Option<Chan<TaskResult>>,\n+    name: Option<~str>,\n     sched: SchedOpts\n }\n \n@@ -185,23 +188,23 @@ impl TaskBuilder {\n         self.consumed = true;\n         let gen_body = self.gen_body.take();\n         let notify_chan = self.opts.notify_chan.take();\n+        let name = self.opts.name.take();\n         TaskBuilder {\n             opts: TaskOpts {\n                 linked: self.opts.linked,\n                 supervised: self.opts.supervised,\n                 watched: self.opts.watched,\n                 indestructible: self.opts.indestructible,\n                 notify_chan: notify_chan,\n+                name: name,\n                 sched: self.opts.sched\n             },\n             gen_body: gen_body,\n             can_not_copy: None,\n             consumed: false\n         }\n     }\n-}\n \n-impl TaskBuilder {\n     /// Decouple the child task's failure from the parent's. If either fails,\n     /// the other will not be killed.\n     pub fn unlinked(&mut self) {\n@@ -281,6 +284,12 @@ impl TaskBuilder {\n         self.opts.notify_chan = Some(notify_pipe_ch);\n     }\n \n+    /// Name the task-to-be. Currently the name is used for identification\n+    /// only in failure messages.\n+    pub fn name(&mut self, name: ~str) {\n+        self.opts.name = Some(name);\n+    }\n+\n     /// Configure a custom scheduler mode for the task.\n     pub fn sched_mode(&mut self, mode: SchedMode) {\n         self.opts.sched.mode = mode;\n@@ -333,13 +342,15 @@ impl TaskBuilder {\n     pub fn spawn(&mut self, f: ~fn()) {\n         let gen_body = self.gen_body.take();\n         let notify_chan = self.opts.notify_chan.take();\n+        let name = self.opts.name.take();\n         let x = self.consume();\n         let opts = TaskOpts {\n             linked: x.opts.linked,\n             supervised: x.opts.supervised,\n             watched: x.opts.watched,\n             indestructible: x.opts.indestructible,\n             notify_chan: notify_chan,\n+            name: name,\n             sched: x.opts.sched\n         };\n         let f = match gen_body {\n@@ -408,6 +419,7 @@ pub fn default_task_opts() -> TaskOpts {\n         watched: true,\n         indestructible: false,\n         notify_chan: None,\n+        name: None,\n         sched: SchedOpts {\n             mode: DefaultScheduler,\n         }\n@@ -507,6 +519,21 @@ pub fn try<T:Send>(f: ~fn() -> T) -> Result<T,()> {\n \n /* Lifecycle functions */\n \n+/// Read the name of the current task.\n+pub fn with_task_name<U>(blk: &fn(Option<&str>) -> U) -> U {\n+    use rt::task::Task;\n+\n+    match context() {\n+        TaskContext => do Local::borrow::<Task, U> |task| {\n+            match task.name {\n+                Some(ref name) => blk(Some(name.as_slice())),\n+                None => blk(None)\n+            }\n+        },\n+        _ => fail!(\"no task name exists in %?\", context()),\n+    }\n+}\n+\n pub fn yield() {\n     //! Yield control to the task scheduler\n \n@@ -805,6 +832,34 @@ fn test_spawn_linked_sup_propagate_sibling() {\n     fail!();\n }\n \n+#[test]\n+fn test_unnamed_task() {\n+    use rt::test::run_in_newsched_task;\n+\n+    do run_in_newsched_task {\n+        do spawn {\n+            do with_task_name |name| {\n+                assert!(name.is_none());\n+            }\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_named_task() {\n+    use rt::test::run_in_newsched_task;\n+\n+    do run_in_newsched_task {\n+        let mut t = task();\n+        t.name(~\"ada lovelace\");\n+        do t.spawn {\n+            do with_task_name |name| {\n+                assert!(name.get() == \"ada lovelace\");\n+            }\n+        }\n+    }\n+}\n+\n #[test]\n fn test_run_basic() {\n     let (po, ch) = stream::<()>();"}, {"sha": "7a42cc5c8b5d8e8ec68f8d57ac97b0fd70e94ec8", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=2e6dc161b6efac1ce2709ab4e1c05c55c01e3abf", "patch": "@@ -726,6 +726,8 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n         task.death.on_exit = Some(on_exit);\n     }\n \n+    task.name = opts.name.take();\n+\n     rtdebug!(\"spawn about to take scheduler\");\n \n     let sched = Local::take::<Scheduler>();"}]}