{"sha": "a5f66689203cff8f96f110bf10926c2d911f6811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZjY2Njg5MjAzY2ZmOGY5NmYxMTBiZjEwOTI2YzJkOTExZjY4MTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-22T09:26:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T09:26:06Z"}, "message": "Rollup merge of #82228 - ijackson:nonzero-cint, r=KodrAus\n\nProvide NonZero_c_* integers\n\nI'm pretty sure I am going want this for #73125 and it seems like an\nomission that would be in any case good to remedy.\n\n<strike>Because the raw C types are in `std`, not `core`, to achieve this we\nmust export the relevant macros from `core` so that `std` can use\nthem.  That's done with a new `num_internals` perma-unstable feature.\n\nThe macros need to take more parameters for the module to get the\ntypes from and feature attributes to use.\n\nI have eyeballed the docs output for core, to check that my changes to\nthese macros have made no difference to the core docs output.</strike>", "tree": {"sha": "46dce12f0df0f7ac14998dbc9812fd076c4ed4fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46dce12f0df0f7ac14998dbc9812fd076c4ed4fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f66689203cff8f96f110bf10926c2d911f6811", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM3iuCRBK7hj4Ov3rIwAAdHIIAFT/Tcc9FxRyLuL6oZhJZVYv\n+iEY1QgRO/Fk4+C9fgPeK9in1YpLt4I0iF+uX5vLClV9Qyg2Eg7LdWEco8X+Y0Ut\nHbrE9kYA5oX04n6lB/WTk0lokfnB1+/uaEWXkLK/y0KhFM5cqHfheG8gY27za8At\nrN01n5V97d4sI1R2hp/a+YQrh1kRhtZgzKTkOiAsa3g/rXaCu98yJzF1AHomZMCD\nCpRn+Kt+31L06nVmyPu0zlAnDB6vXxNXfqKHyhiKu5CmsZeaMNJtGMsdQIY2YEmv\neOVoJGcsyrfRVaUndfiDBEgtuilY86q2k7jjcSPwBaB+k/ZITk4E7QZkXNXGfZU=\n=Gkag\n-----END PGP SIGNATURE-----\n", "payload": "tree 46dce12f0df0f7ac14998dbc9812fd076c4ed4fb\nparent 3cf201fb81458ab6d9181849fd2823fd6d2a4e37\nparent 60a9dcc4e3a98362bc4c4a3bfa4918c1f4f639b1\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613985966 +0900\ncommitter GitHub <noreply@github.com> 1613985966 +0900\n\nRollup merge of #82228 - ijackson:nonzero-cint, r=KodrAus\n\nProvide NonZero_c_* integers\n\nI'm pretty sure I am going want this for #73125 and it seems like an\nomission that would be in any case good to remedy.\n\n<strike>Because the raw C types are in `std`, not `core`, to achieve this we\nmust export the relevant macros from `core` so that `std` can use\nthem.  That's done with a new `num_internals` perma-unstable feature.\n\nThe macros need to take more parameters for the module to get the\ntypes from and feature attributes to use.\n\nI have eyeballed the docs output for core, to check that my changes to\nthese macros have made no difference to the core docs output.</strike>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f66689203cff8f96f110bf10926c2d911f6811", "html_url": "https://github.com/rust-lang/rust/commit/a5f66689203cff8f96f110bf10926c2d911f6811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f66689203cff8f96f110bf10926c2d911f6811/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf201fb81458ab6d9181849fd2823fd6d2a4e37", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf201fb81458ab6d9181849fd2823fd6d2a4e37", "html_url": "https://github.com/rust-lang/rust/commit/3cf201fb81458ab6d9181849fd2823fd6d2a4e37"}, {"sha": "60a9dcc4e3a98362bc4c4a3bfa4918c1f4f639b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a9dcc4e3a98362bc4c4a3bfa4918c1f4f639b1", "html_url": "https://github.com/rust-lang/rust/commit/60a9dcc4e3a98362bc4c4a3bfa4918c1f4f639b1"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "5e46d2c17c941a17168bd4c43165eb701ae81e45", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5f66689203cff8f96f110bf10926c2d911f6811/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f66689203cff8f96f110bf10926c2d911f6811/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a5f66689203cff8f96f110bf10926c2d911f6811", "patch": "@@ -263,6 +263,7 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n+#![feature(extended_key_value_attributes)]\n #![feature(external_doc)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]"}, {"sha": "22c98d7ade99240e3a0b5961f84ec597c69c82d9", "filename": "library/std/src/os/raw/mod.rs", "status": "modified", "additions": 56, "deletions": 54, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a5f66689203cff8f96f110bf10926c2d911f6811/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f66689203cff8f96f110bf10926c2d911f6811/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fmod.rs?ref=a5f66689203cff8f96f110bf10926c2d911f6811", "patch": "@@ -11,7 +11,41 @@\n #[cfg(test)]\n mod tests;\n \n-#[doc(include = \"char.md\")]\n+use core::num::*;\n+\n+macro_rules! type_alias_no_nz {\n+    {\n+      $Docfile:tt, $Alias:ident = $Real:ty;\n+      $( $Cfg:tt )*\n+    } => {\n+        #[doc(include = $Docfile)]\n+        $( $Cfg )*\n+        #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+        pub type $Alias = $Real;\n+    }\n+}\n+\n+// To verify that the NonZero types in this file's macro invocations correspond\n+//\n+//  perl -n < library/std/src/os/raw/mod.rs -e 'next unless m/type_alias\\!/; die \"$_ ?\" unless m/, (c_\\w+) = (\\w+), NonZero_(\\w+) = NonZero(\\w+)/; die \"$_ ?\" unless $3 eq $1 and $4 eq ucfirst $2'\n+//\n+// NB this does not check that the main c_* types are right.\n+\n+macro_rules! type_alias {\n+    {\n+      $Docfile:tt, $Alias:ident = $Real:ty, $NZAlias:ident = $NZReal:ty;\n+      $( $Cfg:tt )*\n+    } => {\n+        type_alias_no_nz! { $Docfile, $Alias = $Real; $( $Cfg )* }\n+\n+        #[doc = concat!(\"Type alias for `NonZero` version of [`\", stringify!($Alias), \"`]\")]\n+        #[unstable(feature = \"raw_os_nonzero\", issue = \"82363\")]\n+        $( $Cfg )*\n+        pub type $NZAlias = $NZReal;\n+    }\n+}\n+\n+type_alias! { \"char.md\", c_char = u8, NonZero_c_char = NonZeroU8;\n #[cfg(any(\n     all(\n         target_os = \"linux\",\n@@ -52,10 +86,8 @@ mod tests;\n         )\n     ),\n     all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n-))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_char = u8;\n-#[doc(include = \"char.md\")]\n+))]}\n+type_alias! { \"char.md\", c_char = i8, NonZero_c_char = NonZeroI8;\n #[cfg(not(any(\n     all(\n         target_os = \"linux\",\n@@ -96,55 +128,25 @@ pub type c_char = u8;\n         )\n     ),\n     all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n-)))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_char = i8;\n-#[doc(include = \"schar.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_schar = i8;\n-#[doc(include = \"uchar.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_uchar = u8;\n-#[doc(include = \"short.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_short = i16;\n-#[doc(include = \"ushort.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_ushort = u16;\n-#[doc(include = \"int.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_int = i32;\n-#[doc(include = \"uint.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_uint = u32;\n-#[doc(include = \"long.md\")]\n-#[cfg(any(target_pointer_width = \"32\", windows))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_long = i32;\n-#[doc(include = \"ulong.md\")]\n-#[cfg(any(target_pointer_width = \"32\", windows))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_ulong = u32;\n-#[doc(include = \"long.md\")]\n-#[cfg(all(target_pointer_width = \"64\", not(windows)))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_long = i64;\n-#[doc(include = \"ulong.md\")]\n-#[cfg(all(target_pointer_width = \"64\", not(windows)))]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_ulong = u64;\n-#[doc(include = \"longlong.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_longlong = i64;\n-#[doc(include = \"ulonglong.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_ulonglong = u64;\n-#[doc(include = \"float.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_float = f32;\n-#[doc(include = \"double.md\")]\n-#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub type c_double = f64;\n+)))]}\n+type_alias! { \"schar.md\", c_schar = i8, NonZero_c_schar = NonZeroI8; }\n+type_alias! { \"uchar.md\", c_uchar = u8, NonZero_c_uchar = NonZeroU8; }\n+type_alias! { \"short.md\", c_short = i16, NonZero_c_short = NonZeroI16; }\n+type_alias! { \"ushort.md\", c_ushort = u16, NonZero_c_ushort = NonZeroU16; }\n+type_alias! { \"int.md\", c_int = i32, NonZero_c_int = NonZeroI32; }\n+type_alias! { \"uint.md\", c_uint = u32, NonZero_c_uint = NonZeroU32; }\n+type_alias! { \"long.md\", c_long = i32, NonZero_c_long = NonZeroI32;\n+#[cfg(any(target_pointer_width = \"32\", windows))] }\n+type_alias! { \"ulong.md\", c_ulong = u32, NonZero_c_ulong = NonZeroU32;\n+#[cfg(any(target_pointer_width = \"32\", windows))] }\n+type_alias! { \"long.md\", c_long = i64, NonZero_c_long = NonZeroI64;\n+#[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n+type_alias! { \"ulong.md\", c_ulong = u64, NonZero_c_ulong = NonZeroU64;\n+#[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n+type_alias! { \"longlong.md\", c_longlong = i64, NonZero_c_longlong = NonZeroI64; }\n+type_alias! { \"ulonglong.md\", c_ulonglong = u64, NonZero_c_ulonglong = NonZeroU64; }\n+type_alias_no_nz! { \"float.md\", c_float = f32; }\n+type_alias_no_nz! { \"double.md\", c_double = f64; }\n \n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n #[doc(no_inline)]"}]}