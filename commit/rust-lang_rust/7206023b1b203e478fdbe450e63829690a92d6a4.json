{"sha": "7206023b1b203e478fdbe450e63829690a92d6a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDYwMjNiMWIyMDNlNDc4ZmRiZTQ1MGU2MzgyOTY5MGE5MmQ2YTQ=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2017-10-17T16:09:10Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2017-10-21T00:47:51Z"}, "message": "Change to `TryFrom`", "tree": {"sha": "c446e478def40d94bfc1d2b9adc0714eb6fbf166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c446e478def40d94bfc1d2b9adc0714eb6fbf166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7206023b1b203e478fdbe450e63829690a92d6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7206023b1b203e478fdbe450e63829690a92d6a4", "html_url": "https://github.com/rust-lang/rust/commit/7206023b1b203e478fdbe450e63829690a92d6a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7206023b1b203e478fdbe450e63829690a92d6a4/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5076d06dbb767a3bd17b4bf70f03c2e5d1221d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5076d06dbb767a3bd17b4bf70f03c2e5d1221d9", "html_url": "https://github.com/rust-lang/rust/commit/e5076d06dbb767a3bd17b4bf70f03c2e5d1221d9"}], "stats": {"total": 234, "additions": 117, "deletions": 117}, "files": [{"sha": "bdcda99124c62a77d70fd2f26c937b9085b06374", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "renamed", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7206023b1b203e478fdbe450e63829690a92d6a4/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7206023b1b203e478fdbe450e63829690a92d6a4/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=7206023b1b203e478fdbe450e63829690a92d6a4", "patch": "@@ -3,12 +3,11 @@ use rustc::hir;\n use rustc::ty;\n use syntax_pos::Span;\n use utils::{method_chain_args, match_def_path, span_lint_and_then, walk_ptrs_ty};\n-use utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT, STRING};\n+use utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n \n-/// **What it does:** Checks for impls of `From<&str>` and `From<String>` that contain `panic!()` or\n-/// `unwrap()`\n+/// **What it does:** Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`\n ///\n-/// **Why is this bad?** `FromStr` should be used if there's a possibility of failure.\n+/// **Why is this bad?** `TryFrom` should be used if there's a possibility of failure.\n ///\n /// **Known problems:** None.\n ///\n@@ -22,19 +21,19 @@ use utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT, STR\n /// }\n /// ```\n declare_lint! {\n-    pub IMPL_FROM_STR, Warn,\n-    \"Warn on impls of `From<&str>` and `From<String>` that contain `panic!()` or `unwrap()`\"\n+    pub FALLIBLE_IMPL_FROM, Allow,\n+    \"Warn on impls of `From<..>` that contain `panic!()` or `unwrap()`\"\n }\n \n-pub struct ImplFromStr;\n+pub struct FallibleImplFrom;\n \n-impl LintPass for ImplFromStr {\n+impl LintPass for FallibleImplFrom {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(IMPL_FROM_STR)\n+        lint_array!(FALLIBLE_IMPL_FROM)\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplFromStr {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir.local_def_id(item.id);\n@@ -43,15 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplFromStr {\n             let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id),\n             match_def_path(cx.tcx, impl_trait_ref.def_id, &FROM_TRAIT),\n         ], {\n-            // check if the type parameter is `str` or `String`\n-            let from_ty_param = impl_trait_ref.substs.type_at(1);\n-            let base_from_ty_param =\n-                walk_ptrs_ty(cx.tcx.normalize_associated_type(&from_ty_param));\n-            if base_from_ty_param.sty == ty::TyStr ||\n-                match_type(cx.tcx, base_from_ty_param, &STRING)\n-            {\n-                lint_impl_body(cx, item.span, impl_items);\n-            }\n+            lint_impl_body(cx, item.span, impl_items);\n         }}\n     }\n }\n@@ -117,10 +108,13 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             if !fpu.result.is_empty() {\n                 span_lint_and_then(\n                     cx,\n-                    IMPL_FROM_STR,\n+                    FALLIBLE_IMPL_FROM,\n                     impl_span,\n-                    \"consider implementing `FromStr` instead\",\n+                    \"consider implementing `TryFrom` instead\",\n                     move |db| {\n+                        db.help(\n+                            \"`From` is intended for infallible conversions only. \\\n+                             Use `TryFrom` if there's a possibility for the conversion to fail.\");\n                         db.span_note(fpu.result, \"potential failure(s)\");\n                     });\n             }", "previous_filename": "clippy_lints/src/impl_from_str.rs"}, {"sha": "81839b92cd53a4349ba4bd7701a2d7f2a3fc7a00", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7206023b1b203e478fdbe450e63829690a92d6a4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7206023b1b203e478fdbe450e63829690a92d6a4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7206023b1b203e478fdbe450e63829690a92d6a4", "patch": "@@ -100,7 +100,7 @@ pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n-pub mod impl_from_str;\n+pub mod fallible_impl_from;\n pub mod infinite_iter;\n pub mod int_plus_one;\n pub mod invalid_ref;\n@@ -342,7 +342,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box const_static_lifetime::StaticConst);\n-    reg.register_late_lint_pass(box impl_from_str::ImplFromStr);\n+    reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -448,7 +448,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n-        impl_from_str::IMPL_FROM_STR,\n+        fallible_impl_from::FALLIBLE_IMPL_FROM,\n         infinite_iter::INFINITE_ITER,\n         invalid_ref::INVALID_REF,\n         is_unit_expr::UNIT_EXPR,"}, {"sha": "eb1cd4c5e9ada59413ed5b4302c0df870d585802", "filename": "tests/ui/fallible_impl_from.rs", "status": "renamed", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7206023b1b203e478fdbe450e63829690a92d6a4/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7206023b1b203e478fdbe450e63829690a92d6a4/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=7206023b1b203e478fdbe450e63829690a92d6a4", "patch": "@@ -1,3 +1,5 @@\n+#![deny(fallible_impl_from)]\n+\n // docs example\n struct Foo(i32);\n impl From<String> for Foo {\n@@ -14,34 +16,27 @@ impl<'a> From<&'a str> for Valid {\n         Valid(s.to_owned().into_bytes())\n     }\n }\n-impl From<String> for Valid {\n-    fn from(s: String) -> Valid {\n-        Valid(s.into_bytes())\n-    }\n-}\n impl From<usize> for Valid {\n     fn from(i: usize) -> Valid {\n-        if i == 0 {\n-            panic!();\n-        }\n         Valid(Vec::with_capacity(i))\n     }\n }\n \n \n struct Invalid;\n \n-impl<'a> From<&'a str> for Invalid {\n-    fn from(s: &'a str) -> Invalid {\n-        if !s.is_empty() {\n+impl From<usize> for Invalid {\n+    fn from(i: usize) -> Invalid {\n+        if i != 42 {\n             panic!();\n         }\n         Invalid\n     }\n }\n \n-impl From<String> for Invalid {\n-    fn from(s: String) -> Invalid {\n+impl From<Option<String>> for Invalid {\n+    fn from(s: Option<String>) -> Invalid {\n+        let s = s.unwrap();\n         if !s.is_empty() {\n             panic!(42);\n         } else if s.parse::<u32>().unwrap() != 42 {", "previous_filename": "tests/ui/impl_from_str.rs"}, {"sha": "89dfaf623ed83d4a67b4b78eca8cd4e318abccb5", "filename": "tests/ui/fallible_impl_from.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/7206023b1b203e478fdbe450e63829690a92d6a4/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7206023b1b203e478fdbe450e63829690a92d6a4/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=7206023b1b203e478fdbe450e63829690a92d6a4", "patch": "@@ -0,0 +1,91 @@\n+error: consider implementing `TryFrom` instead\n+ --> $DIR/fallible_impl_from.rs:5:1\n+  |\n+5 | / impl From<String> for Foo {\n+6 | |     fn from(s: String) -> Self {\n+7 | |         Foo(s.parse().unwrap())\n+8 | |     }\n+9 | | }\n+  | |_^\n+  |\n+note: lint level defined here\n+ --> $DIR/fallible_impl_from.rs:1:9\n+  |\n+1 | #![deny(fallible_impl_from)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+  = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+note: potential failure(s)\n+ --> $DIR/fallible_impl_from.rs:7:13\n+  |\n+7 |         Foo(s.parse().unwrap())\n+  |             ^^^^^^^^^^^^^^^^^^\n+\n+error: consider implementing `TryFrom` instead\n+  --> $DIR/fallible_impl_from.rs:28:1\n+   |\n+28 | / impl From<usize> for Invalid {\n+29 | |     fn from(i: usize) -> Invalid {\n+30 | |         if i != 42 {\n+31 | |             panic!();\n+...  |\n+34 | |     }\n+35 | | }\n+   | |_^\n+   |\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+note: potential failure(s)\n+  --> $DIR/fallible_impl_from.rs:31:13\n+   |\n+31 |             panic!();\n+   |             ^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: consider implementing `TryFrom` instead\n+  --> $DIR/fallible_impl_from.rs:37:1\n+   |\n+37 | / impl From<Option<String>> for Invalid {\n+38 | |     fn from(s: Option<String>) -> Invalid {\n+39 | |         let s = s.unwrap();\n+40 | |         if !s.is_empty() {\n+...  |\n+46 | |     }\n+47 | | }\n+   | |_^\n+   |\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+note: potential failure(s)\n+  --> $DIR/fallible_impl_from.rs:39:17\n+   |\n+39 |         let s = s.unwrap();\n+   |                 ^^^^^^^^^^\n+40 |         if !s.is_empty() {\n+41 |             panic!(42);\n+   |             ^^^^^^^^^^^\n+42 |         } else if s.parse::<u32>().unwrap() != 42 {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n+43 |             panic!(\"{:?}\", s);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: consider implementing `TryFrom` instead\n+  --> $DIR/fallible_impl_from.rs:55:1\n+   |\n+55 | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n+56 | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n+57 | |         if s.parse::<u32>().ok().unwrap() != 42 {\n+58 | |             panic!(\"{:?}\", s);\n+...  |\n+61 | |     }\n+62 | | }\n+   | |_^\n+   |\n+   = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail.\n+note: potential failure(s)\n+  --> $DIR/fallible_impl_from.rs:57:12\n+   |\n+57 |         if s.parse::<u32>().ok().unwrap() != 42 {\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+58 |             panic!(\"{:?}\", s);\n+   |             ^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro outside of the current crate\n+"}, {"sha": "b394df153e2860865829aebf7d7b77ece5799789", "filename": "tests/ui/impl_from_str.stderr", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e5076d06dbb767a3bd17b4bf70f03c2e5d1221d9/tests%2Fui%2Fimpl_from_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5076d06dbb767a3bd17b4bf70f03c2e5d1221d9/tests%2Fui%2Fimpl_from_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_from_str.stderr?ref=e5076d06dbb767a3bd17b4bf70f03c2e5d1221d9", "patch": "@@ -1,80 +0,0 @@\n-error: consider implementing `FromStr` instead\n- --> $DIR/impl_from_str.rs:3:1\n-  |\n-3 | / impl From<String> for Foo {\n-4 | |     fn from(s: String) -> Self {\n-5 | |         Foo(s.parse().unwrap())\n-6 | |     }\n-7 | | }\n-  | |_^\n-  |\n-  = note: `-D impl-from-str` implied by `-D warnings`\n-note: potential failure(s)\n- --> $DIR/impl_from_str.rs:5:13\n-  |\n-5 |         Foo(s.parse().unwrap())\n-  |             ^^^^^^^^^^^^^^^^^^\n-\n-error: consider implementing `FromStr` instead\n-  --> $DIR/impl_from_str.rs:34:1\n-   |\n-34 | / impl<'a> From<&'a str> for Invalid {\n-35 | |     fn from(s: &'a str) -> Invalid {\n-36 | |         if !s.is_empty() {\n-37 | |             panic!();\n-...  |\n-40 | |     }\n-41 | | }\n-   | |_^\n-   |\n-note: potential failure(s)\n-  --> $DIR/impl_from_str.rs:37:13\n-   |\n-37 |             panic!();\n-   |             ^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: consider implementing `FromStr` instead\n-  --> $DIR/impl_from_str.rs:43:1\n-   |\n-43 | / impl From<String> for Invalid {\n-44 | |     fn from(s: String) -> Invalid {\n-45 | |         if !s.is_empty() {\n-46 | |             panic!(42);\n-...  |\n-51 | |     }\n-52 | | }\n-   | |_^\n-   |\n-note: potential failure(s)\n-  --> $DIR/impl_from_str.rs:46:13\n-   |\n-46 |             panic!(42);\n-   |             ^^^^^^^^^^^\n-47 |         } else if s.parse::<u32>().unwrap() != 42 {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n-48 |             panic!(\"{:?}\", s);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: consider implementing `FromStr` instead\n-  --> $DIR/impl_from_str.rs:60:1\n-   |\n-60 | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n-61 | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n-62 | |         if s.parse::<u32>().ok().unwrap() != 42 {\n-63 | |             panic!(\"{:?}\", s);\n-...  |\n-66 | |     }\n-67 | | }\n-   | |_^\n-   |\n-note: potential failure(s)\n-  --> $DIR/impl_from_str.rs:62:12\n-   |\n-62 |         if s.parse::<u32>().ok().unwrap() != 42 {\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-63 |             panic!(\"{:?}\", s);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate\n-"}]}