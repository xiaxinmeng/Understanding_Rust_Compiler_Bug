{"sha": "cbb418ebb87309a798ca16408c1dfb09cd638a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYjQxOGViYjg3MzA5YTc5OGNhMTY0MDhjMWRmYjA5Y2Q2MzhhOWI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-21T21:29:12Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-21T21:29:12Z"}, "message": "Rename name field to ctor as well", "tree": {"sha": "8298b4c130452808efad219ebae169d3eec90a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8298b4c130452808efad219ebae169d3eec90a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbb418ebb87309a798ca16408c1dfb09cd638a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb418ebb87309a798ca16408c1dfb09cd638a9b", "html_url": "https://github.com/rust-lang/rust/commit/cbb418ebb87309a798ca16408c1dfb09cd638a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbb418ebb87309a798ca16408c1dfb09cd638a9b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97be0e6c46196552607aa0121b32a41a3515873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97be0e6c46196552607aa0121b32a41a3515873d", "html_url": "https://github.com/rust-lang/rust/commit/97be0e6c46196552607aa0121b32a41a3515873d"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "5cd766b85d1a87296c0e14f583f58b5d8869b119", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=cbb418ebb87309a798ca16408c1dfb09cd638a9b", "patch": "@@ -93,7 +93,7 @@ pub enum TypeCtor {\n /// several other things.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct ApplicationTy {\n-    pub name: TypeCtor,\n+    pub ctor: TypeCtor,\n     pub parameters: Substs,\n }\n \n@@ -201,14 +201,14 @@ impl FnSig {\n }\n \n impl Ty {\n-    pub fn simple(name: TypeCtor) -> Ty {\n-        Ty::Apply(ApplicationTy { name, parameters: Substs::empty() })\n+    pub fn simple(ctor: TypeCtor) -> Ty {\n+        Ty::Apply(ApplicationTy { ctor, parameters: Substs::empty() })\n     }\n-    pub fn apply_one(name: TypeCtor, param: Ty) -> Ty {\n-        Ty::Apply(ApplicationTy { name, parameters: Substs::single(param) })\n+    pub fn apply_one(ctor: TypeCtor, param: Ty) -> Ty {\n+        Ty::Apply(ApplicationTy { ctor, parameters: Substs::single(param) })\n     }\n-    pub fn apply(name: TypeCtor, parameters: Substs) -> Ty {\n-        Ty::Apply(ApplicationTy { name, parameters })\n+    pub fn apply(ctor: TypeCtor, parameters: Substs) -> Ty {\n+        Ty::Apply(ApplicationTy { ctor, parameters })\n     }\n     pub fn unit() -> Self {\n         Ty::apply(TypeCtor::Tuple, Substs::empty())\n@@ -246,7 +246,7 @@ impl Ty {\n \n     pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n         match self {\n-            Ty::Apply(ApplicationTy { name: TypeCtor::Ref(mutability), parameters }) => {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Ref(mutability), parameters }) => {\n                 Some((parameters.as_single(), *mutability))\n             }\n             _ => None,\n@@ -255,7 +255,7 @@ impl Ty {\n \n     pub fn as_adt(&self) -> Option<(AdtDef, &Substs)> {\n         match self {\n-            Ty::Apply(ApplicationTy { name: TypeCtor::Adt(adt_def), parameters }) => {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_def), parameters }) => {\n                 Some((*adt_def, parameters))\n             }\n             _ => None,\n@@ -264,14 +264,14 @@ impl Ty {\n \n     pub fn as_tuple(&self) -> Option<&Substs> {\n         match self {\n-            Ty::Apply(ApplicationTy { name: TypeCtor::Tuple, parameters }) => Some(parameters),\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Tuple, parameters }) => Some(parameters),\n             _ => None,\n         }\n     }\n \n     fn builtin_deref(&self) -> Option<Ty> {\n         match self {\n-            Ty::Apply(a_ty) => match a_ty.name {\n+            Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::Ref(..) => Some(Ty::clone(a_ty.parameters.as_single())),\n                 TypeCtor::RawPtr(..) => Some(Ty::clone(a_ty.parameters.as_single())),\n                 _ => None,\n@@ -286,8 +286,8 @@ impl Ty {\n     /// `Option<u32>` afterwards.)\n     pub fn apply_substs(self, substs: Substs) -> Ty {\n         match self {\n-            Ty::Apply(ApplicationTy { name, .. }) => {\n-                Ty::Apply(ApplicationTy { name, parameters: substs })\n+            Ty::Apply(ApplicationTy { ctor, .. }) => {\n+                Ty::Apply(ApplicationTy { ctor, parameters: substs })\n             }\n             _ => self,\n         }\n@@ -327,7 +327,7 @@ impl HirDisplay for &Ty {\n \n impl HirDisplay for ApplicationTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n-        match self.name {\n+        match self.ctor {\n             TypeCtor::Bool => write!(f, \"bool\")?,\n             TypeCtor::Char => write!(f, \"char\")?,\n             TypeCtor::Int(t) => write!(f, \"{}\", t)?,"}, {"sha": "be74b9fa6c4f9f967bf5a202d415cfa81956d0c3", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=cbb418ebb87309a798ca16408c1dfb09cd638a9b", "patch": "@@ -237,7 +237,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         match (&*ty1, &*ty2) {\n             (Ty::Unknown, ..) => true,\n             (.., Ty::Unknown) => true,\n-            (Ty::Apply(a_ty1), Ty::Apply(a_ty2)) if a_ty1.name == a_ty2.name => {\n+            (Ty::Apply(a_ty1), Ty::Apply(a_ty2)) if a_ty1.ctor == a_ty2.ctor => {\n                 self.unify_substs(&a_ty1.parameters, &a_ty2.parameters, depth + 1)\n             }\n             (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2)))\n@@ -278,11 +278,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         match ty {\n             Ty::Unknown => self.new_type_var(),\n             Ty::Apply(ApplicationTy {\n-                name: TypeCtor::Int(primitive::UncertainIntTy::Unknown),\n+                ctor: TypeCtor::Int(primitive::UncertainIntTy::Unknown),\n                 ..\n             }) => self.new_integer_var(),\n             Ty::Apply(ApplicationTy {\n-                name: TypeCtor::Float(primitive::UncertainFloatTy::Unknown),\n+                ctor: TypeCtor::Float(primitive::UncertainFloatTy::Unknown),\n                 ..\n             }) => self.new_float_var(),\n             _ => ty,\n@@ -776,7 +776,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Call { callee, args } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n-                    Ty::Apply(a_ty) => match a_ty.name {\n+                    Ty::Apply(a_ty) => match a_ty.ctor {\n                         TypeCtor::FnPtr => {\n                             let sig = FnSig::from_fn_ptr_substs(&a_ty.parameters);\n                             (sig.params().to_vec(), sig.ret().clone())\n@@ -823,7 +823,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let method_ty = method_ty.apply_substs(substs);\n                 let method_ty = self.insert_type_vars(method_ty);\n                 let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {\n-                    Ty::Apply(a_ty) => match a_ty.name {\n+                    Ty::Apply(a_ty) => match a_ty.ctor {\n                         TypeCtor::FnPtr => {\n                             let sig = FnSig::from_fn_ptr_substs(&a_ty.parameters);\n                             if !sig.params().is_empty() {\n@@ -932,7 +932,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = receiver_ty\n                     .autoderef(self.db)\n                     .find_map(|derefed_ty| match derefed_ty {\n-                        Ty::Apply(a_ty) => match a_ty.name {\n+                        Ty::Apply(a_ty) => match a_ty.ctor {\n                             TypeCtor::Tuple => {\n                                 let i = name.to_string().parse::<usize>().ok();\n                                 i.and_then(|i| a_ty.parameters.0.get(i).cloned())\n@@ -988,7 +988,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     }\n                     UnaryOp::Neg => {\n                         match &inner_ty {\n-                            Ty::Apply(a_ty) => match a_ty.name {\n+                            Ty::Apply(a_ty) => match a_ty.ctor {\n                                 TypeCtor::Int(primitive::UncertainIntTy::Unknown)\n                                 | TypeCtor::Int(primitive::UncertainIntTy::Signed(..))\n                                 | TypeCtor::Float(..) => inner_ty,\n@@ -1003,7 +1003,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     }\n                     UnaryOp::Not => {\n                         match &inner_ty {\n-                            Ty::Apply(a_ty) => match a_ty.name {\n+                            Ty::Apply(a_ty) => match a_ty.ctor {\n                                 TypeCtor::Bool | TypeCtor::Int(_) => inner_ty,\n                                 _ => Ty::Unknown,\n                             },\n@@ -1043,7 +1043,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Array { exprs } => {\n                 let elem_ty = match &expected.ty {\n-                    Ty::Apply(a_ty) => match a_ty.name {\n+                    Ty::Apply(a_ty) => match a_ty.ctor {\n                         TypeCtor::Slice | TypeCtor::Array => {\n                             Ty::clone(&a_ty.parameters.as_single())\n                         }"}, {"sha": "ed75bfaee394e7b60818d548da978e8bc917c33d", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=cbb418ebb87309a798ca16408c1dfb09cd638a9b", "patch": "@@ -27,7 +27,7 @@ impl TyFingerprint {\n     /// `impl &S`. Hence, this will return `None` for reference types and such.\n     fn for_impl(ty: &Ty) -> Option<TyFingerprint> {\n         match ty {\n-            Ty::Apply(a_ty) => Some(TyFingerprint::Apply(a_ty.name)),\n+            Ty::Apply(a_ty) => Some(TyFingerprint::Apply(a_ty.ctor)),\n             _ => None,\n         }\n     }\n@@ -111,7 +111,7 @@ impl CrateImplBlocks {\n \n fn def_crate(db: &impl HirDatabase, ty: &Ty) -> Option<Crate> {\n     match ty {\n-        Ty::Apply(a_ty) => match a_ty.name {\n+        Ty::Apply(a_ty) => match a_ty.ctor {\n             TypeCtor::Adt(def_id) => def_id.krate(db),\n             _ => None,\n         },"}, {"sha": "235661a5d81b3792ff4252544cfc7e5fd4ac1c89", "filename": "crates/ra_hir/src/ty/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs?ref=cbb418ebb87309a798ca16408c1dfb09cd638a9b", "patch": "@@ -32,7 +32,7 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n         | BinaryOp::BitwiseAnd\n         | BinaryOp::BitwiseOr\n         | BinaryOp::BitwiseXor => match rhs_ty {\n-            Ty::Apply(ApplicationTy { name, .. }) => match name {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..) | TypeCtor::Float(..) => rhs_ty,\n                 _ => Ty::Unknown,\n             },\n@@ -47,7 +47,7 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::BooleanAnd | BinaryOp::BooleanOr => Ty::simple(TypeCtor::Bool),\n         BinaryOp::Assignment | BinaryOp::EqualityTest => match lhs_ty {\n-            Ty::Apply(ApplicationTy { name, .. }) => match name {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..)\n                 | TypeCtor::Float(..)\n                 | TypeCtor::Str\n@@ -82,7 +82,7 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n         | BinaryOp::BitwiseAnd\n         | BinaryOp::BitwiseOr\n         | BinaryOp::BitwiseXor => match lhs_ty {\n-            Ty::Apply(ApplicationTy { name, .. }) => match name {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..) | TypeCtor::Float(..) => lhs_ty,\n                 _ => Ty::Unknown,\n             },"}, {"sha": "31d5374ba0872d5973f7480bbcec5160ecb7cb14", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbb418ebb87309a798ca16408c1dfb09cd638a9b/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=cbb418ebb87309a798ca16408c1dfb09cd638a9b", "patch": "@@ -24,7 +24,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     for receiver in receiver.autoderef(ctx.db) {\n         match receiver {\n-            Ty::Apply(a_ty) => match a_ty.name {\n+            Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::Adt(AdtDef::Struct(s)) => {\n                     for field in s.fields(ctx.db) {\n                         acc.add_field(ctx, field, &a_ty.parameters);"}]}