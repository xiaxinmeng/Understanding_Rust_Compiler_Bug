{"sha": "804fa66a027a5813a30197bef9da5afb1dc104a9", "node_id": "C_kwDOAAsO6NoAKDgwNGZhNjZhMDI3YTU4MTNhMzAxOTdiZWY5ZGE1YWZiMWRjMTA0YTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-29T21:43:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T21:43:18Z"}, "message": "Rollup merge of #105002 - zertosh:acp-140, r=dtolnay\n\nAdd `PathBuf::as_mut_os_string` and `Path::as_mut_os_str`\n\nImplements rust-lang/libs-team#140 (tracking issue #105021).", "tree": {"sha": "75957360601fb0403309929dca9d021a8995b182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75957360601fb0403309929dca9d021a8995b182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/804fa66a027a5813a30197bef9da5afb1dc104a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhnz2CRBK7hj4Ov3rIwAAK8oIABO/RWzEPlN00La+sHBotDlo\nhhEenqkWaYafrAI19qHrEuRBTd9YPZSuynLr/Twn6cV8QG+O7/cYpkYdrnx3kLHj\nL2wkxc1nKu8fWxN0Hq23ExNzdvQM+xBkVxslvBori0MT9KFImjj5RhoOyzjpL8uZ\ns+4T5mrWWtKhVuuWhisVhsbqqcX+9pF/cF4dRopfw2ptX6HC/qpsJRAYNo0sDaZ1\nBUSiNYXxACBdpU7UW7bE7p1oO+y700U5if8vEDtkY8aTXCBr6ifiCFIyOmpga0z0\nR3XSwgL7w6jgvG140EiNIEVy5hPwbTLkYVVkwiSD5c5zyC6hQGZXqXDU64nfmF4=\n=oGY1\n-----END PGP SIGNATURE-----\n", "payload": "tree 75957360601fb0403309929dca9d021a8995b182\nparent ca8f4c8d72f78c0e691a4cdf862be7cd0992ccbc\nparent 9d66ab0f9dea6d8203ceeb29e7da0fd48945ddb7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669758198 +0100\ncommitter GitHub <noreply@github.com> 1669758198 +0100\n\nRollup merge of #105002 - zertosh:acp-140, r=dtolnay\n\nAdd `PathBuf::as_mut_os_string` and `Path::as_mut_os_str`\n\nImplements rust-lang/libs-team#140 (tracking issue #105021).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/804fa66a027a5813a30197bef9da5afb1dc104a9", "html_url": "https://github.com/rust-lang/rust/commit/804fa66a027a5813a30197bef9da5afb1dc104a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/804fa66a027a5813a30197bef9da5afb1dc104a9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8f4c8d72f78c0e691a4cdf862be7cd0992ccbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8f4c8d72f78c0e691a4cdf862be7cd0992ccbc", "html_url": "https://github.com/rust-lang/rust/commit/ca8f4c8d72f78c0e691a4cdf862be7cd0992ccbc"}, {"sha": "9d66ab0f9dea6d8203ceeb29e7da0fd48945ddb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d66ab0f9dea6d8203ceeb29e7da0fd48945ddb7", "html_url": "https://github.com/rust-lang/rust/commit/9d66ab0f9dea6d8203ceeb29e7da0fd48945ddb7"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "6c957c2fa90eb517088f085687474dbc3b6d702a", "filename": "library/std/src/path.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/804fa66a027a5813a30197bef9da5afb1dc104a9/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/804fa66a027a5813a30197bef9da5afb1dc104a9/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=804fa66a027a5813a30197bef9da5afb1dc104a9", "patch": "@@ -1463,6 +1463,30 @@ impl PathBuf {\n         true\n     }\n \n+    /// Yields a mutable reference to the underlying [`OsString`] instance.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(path_as_mut_os_str)]\n+    /// use std::path::{Path, PathBuf};\n+    ///\n+    /// let mut path = PathBuf::from(\"/foo\");\n+    ///\n+    /// path.push(\"bar\");\n+    /// assert_eq!(path, Path::new(\"/foo/bar\"));\n+    ///\n+    /// // OsString's `push` does not add a separator.\n+    /// path.as_mut_os_string().push(\"baz\");\n+    /// assert_eq!(path, Path::new(\"/foo/barbaz\"));\n+    /// ```\n+    #[unstable(feature = \"path_as_mut_os_str\", issue = \"105021\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_mut_os_string(&mut self) -> &mut OsString {\n+        &mut self.inner\n+    }\n+\n     /// Consumes the `PathBuf`, yielding its internal [`OsString`] storage.\n     ///\n     /// # Examples\n@@ -1993,6 +2017,28 @@ impl Path {\n         &self.inner\n     }\n \n+    /// Yields a mutable reference to the underlying [`OsStr`] slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(path_as_mut_os_str)]\n+    /// use std::path::{Path, PathBuf};\n+    ///\n+    /// let mut path = PathBuf::from(\"/Foo.TXT\").into_boxed_path();\n+    ///\n+    /// assert_ne!(&*path, Path::new(\"/foo.txt\"));\n+    ///\n+    /// path.as_mut_os_str().make_ascii_lowercase();\n+    /// assert_eq!(&*path, Path::new(\"/foo.txt\"));\n+    /// ```\n+    #[unstable(feature = \"path_as_mut_os_str\", issue = \"105021\")]\n+    #[must_use]\n+    #[inline]\n+    pub fn as_mut_os_str(&mut self) -> &mut OsStr {\n+        &mut self.inner\n+    }\n+\n     /// Yields a [`&str`] slice if the `Path` is valid unicode.\n     ///\n     /// This conversion may entail doing a check for UTF-8 validity."}]}