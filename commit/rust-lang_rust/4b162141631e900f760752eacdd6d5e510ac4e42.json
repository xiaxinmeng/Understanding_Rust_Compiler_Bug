{"sha": "4b162141631e900f760752eacdd6d5e510ac4e42", "node_id": "C_kwDOAAsO6NoAKDRiMTYyMTQxNjMxZTkwMGY3NjA3NTJlYWNkZDZkNWU1MTBhYzRlNDI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-13T16:39:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-13T16:53:33Z"}, "message": "Ban references to `Self` in trait object substs for projection predicates too.", "tree": {"sha": "15191dea433098610289e23cf162709cea7664f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15191dea433098610289e23cf162709cea7664f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b162141631e900f760752eacdd6d5e510ac4e42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b162141631e900f760752eacdd6d5e510ac4e42", "html_url": "https://github.com/rust-lang/rust/commit/4b162141631e900f760752eacdd6d5e510ac4e42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b162141631e900f760752eacdd6d5e510ac4e42/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "ff81747cafe6f1eeeabab54fa58583f69794d2c0", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4b162141631e900f760752eacdd6d5e510ac4e42/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b162141631e900f760752eacdd6d5e510ac4e42/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=4b162141631e900f760752eacdd6d5e510ac4e42", "patch": "@@ -35,7 +35,7 @@ use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECT\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n@@ -1458,16 +1458,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             if ty == dummy_self {\n                                 let param = &generics.params[index];\n                                 missing_type_params.push(param.name);\n-                                tcx.ty_error().into()\n+                                return tcx.ty_error().into();\n                             } else if ty.walk().any(|arg| arg == dummy_self.into()) {\n                                 references_self = true;\n-                                tcx.ty_error().into()\n-                            } else {\n-                                arg\n+                                return tcx.ty_error().into();\n                             }\n-                        } else {\n-                            arg\n                         }\n+                        arg\n                     })\n                     .collect();\n                 let substs = tcx.intern_substs(&substs[..]);\n@@ -1506,13 +1503,36 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n \n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n-            bound.map_bound(|b| {\n-                if b.projection_ty.self_ty() != dummy_self {\n-                    tcx.sess.delay_span_bug(\n-                        DUMMY_SP,\n-                        &format!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", b),\n-                    );\n+            bound.map_bound(|mut b| {\n+                assert_eq!(b.projection_ty.self_ty(), dummy_self);\n+\n+                // Like for trait refs, verify that `dummy_self` did not leak inside default type\n+                // parameters.\n+                let references_self = b.projection_ty.substs.iter().skip(1).any(|arg| {\n+                    if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n+                        if ty == dummy_self || ty.walk().any(|arg| arg == dummy_self.into()) {\n+                            return true;\n+                        }\n+                    }\n+                    false\n+                });\n+                if references_self {\n+                    tcx.sess\n+                        .delay_span_bug(span, \"trait object projection bounds reference `Self`\");\n+                    let substs: Vec<_> = b\n+                        .projection_ty\n+                        .substs\n+                        .iter()\n+                        .map(|arg| {\n+                            if let ty::GenericArgKind::Type(_) = arg.unpack() {\n+                                return tcx.ty_error().into();\n+                            }\n+                            arg\n+                        })\n+                        .collect();\n+                    b.projection_ty.substs = tcx.intern_substs(&substs[..]);\n                 }\n+\n                 ty::ExistentialProjection::erase_self_ty(tcx, b)\n             })\n         });"}, {"sha": "0bb6335f91e4b249e61f280413d23a7284fa22d6", "filename": "src/test/ui/traits/alias/self-in-generics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b162141631e900f760752eacdd6d5e510ac4e42/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b162141631e900f760752eacdd6d5e510ac4e42/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs?ref=4b162141631e900f760752eacdd6d5e510ac4e42", "patch": "@@ -1,3 +1,10 @@\n+// astconv uses `FreshTy(0)` as a dummy `Self` type when instanciating trait objects.\n+// This `FreshTy(0)` can leak into substs, causing ICEs in several places.\n+// Using `save-analysis` triggers type-checking `f` that would be normally skipped\n+// as `type_of` emitted an error.\n+//\n+// compile-flags: -Zsave-analysis\n+\n #![feature(trait_alias)]\n \n pub trait SelfInput = Fn(&mut Self);"}, {"sha": "110d60e6e9116127e6f49e82e756d5ab51e53790", "filename": "src/test/ui/traits/alias/self-in-generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b162141631e900f760752eacdd6d5e510ac4e42/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b162141631e900f760752eacdd6d5e510ac4e42/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr?ref=4b162141631e900f760752eacdd6d5e510ac4e42", "patch": "@@ -1,5 +1,5 @@\n error[E0038]: the trait alias `SelfInput` cannot be made into an object\n-  --> $DIR/self-in-generics.rs:5:19\n+  --> $DIR/self-in-generics.rs:12:19\n    |\n LL | pub fn f(_f: &dyn SelfInput) {}\n    |                   ^^^^^^^^^"}]}