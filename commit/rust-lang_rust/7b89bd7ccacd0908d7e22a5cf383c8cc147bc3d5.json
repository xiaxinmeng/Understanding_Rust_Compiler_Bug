{"sha": "7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiODliZDdjY2FjZDA5MDhkN2UyMmE1Y2YzODNjOGNjMTQ3YmMzZDU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-03-31T12:52:46Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-04-03T00:36:56Z"}, "message": "Add ptr::offset_to", "tree": {"sha": "f07ae40b18015742cbd15859b22ec37f5b4d9aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07ae40b18015742cbd15859b22ec37f5b4d9aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "html_url": "https://github.com/rust-lang/rust/commit/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82f1325cfb5f3fd5028225f692cb134517016f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82f1325cfb5f3fd5028225f692cb134517016f1", "html_url": "https://github.com/rust-lang/rust/commit/c82f1325cfb5f3fd5028225f692cb134517016f1"}], "stats": {"total": 104, "additions": 93, "deletions": 11}, "files": [{"sha": "0c3b7990c93b86163159b705243a5941dfde9f32", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "patch": "@@ -123,6 +123,7 @@\n - [no_debug](no-debug.md)\n - [non_ascii_idents](non-ascii-idents.md)\n - [nonzero](nonzero.md)\n+- [offset_to](offset-to.md)\n - [omit_gdb_pretty_printer_section](omit-gdb-pretty-printer-section.md)\n - [on_unimplemented](on-unimplemented.md)\n - [once_poison](once-poison.md)"}, {"sha": "376f3ff5d2199ccc226e5bd13f3d48a8a859de31", "filename": "src/doc/unstable-book/src/offset-to.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Fdoc%2Funstable-book%2Fsrc%2Foffset-to.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Fdoc%2Funstable-book%2Fsrc%2Foffset-to.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foffset-to.md?ref=7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "patch": "@@ -0,0 +1,7 @@\n+# `offset_to`\n+\n+The tracking issue for this feature is: [#0]\n+\n+[#0]: https://github.com/rust-lang/rust/issues/0\n+\n+------------------------"}, {"sha": "2b345e3d0a59ffb632bbafa862c23aa33c4c3780", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "patch": "@@ -61,6 +61,7 @@\n #![feature(unique)]\n #![feature(untagged_unions)]\n #![cfg_attr(test, feature(rand, test))]\n+#![feature(offset_to)]\n \n #![no_std]\n "}, {"sha": "f12380a9ea535f57729d474198bcb1e393c0e4d0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "patch": "@@ -2073,14 +2073,10 @@ impl<T> Iterator for IntoIter<T> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let diff = (self.end as usize) - (self.ptr as usize);\n-        let size = mem::size_of::<T>();\n-        let exact = diff /\n-                    (if size == 0 {\n-                         1\n-                     } else {\n-                         size\n-                     });\n+        let exact = match self.ptr.offset_to(self.end) {\n+            Some(x) => x as usize,\n+            None => (self.end as usize).wrapping_sub(self.ptr as usize),\n+        };\n         (exact, Some(exact))\n     }\n "}, {"sha": "6bcce76af04e39e9a91a36062ff8729a3a5ffcd4", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "patch": "@@ -500,6 +500,44 @@ impl<T: ?Sized> *const T {\n             intrinsics::arith_offset(self, count)\n         }\n     }\n+\n+    /// Calculates the distance between two pointers. The returned value is in\n+    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n+    ///\n+    /// If the address different between the two pointers ia not a multiple of\n+    /// `mem::size_of::<T>()` then the result of the division is rounded towards\n+    /// zero.\n+    ///\n+    /// This function returns `None` if `T` is a zero-sized typed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(offset_to)]\n+    ///\n+    /// fn main() {\n+    ///     let a = [0; 5];\n+    ///     let ptr1: *const i32 = &a[1];\n+    ///     let ptr2: *const i32 = &a[3];\n+    ///     assert_eq!(ptr1.offset_to(ptr2), Some(2));\n+    ///     assert_eq!(ptr2.offset_to(ptr1), Some(-2));\n+    ///     assert_eq!(unsafe { ptr1.offset(2) }, ptr2);\n+    ///     assert_eq!(unsafe { ptr2.offset(-2) }, ptr1);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"offset_to\", issue = \"0\")]\n+    #[inline]\n+    pub fn offset_to(self, other: *const T) -> Option<isize> where T: Sized {\n+        let size = mem::size_of::<T>();\n+        if size == 0 {\n+            None\n+        } else {\n+            let diff = (other as isize).wrapping_sub(self as isize);\n+            Some(diff / size as isize)\n+        }\n+    }\n }\n \n #[lang = \"mut_ptr\"]\n@@ -653,6 +691,44 @@ impl<T: ?Sized> *mut T {\n             Some(&mut *self)\n         }\n     }\n+\n+    /// Calculates the distance between two pointers. The returned value is in\n+    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n+    ///\n+    /// If the address different between the two pointers ia not a multiple of\n+    /// `mem::size_of::<T>()` then the result of the division is rounded towards\n+    /// zero.\n+    ///\n+    /// This function returns `None` if `T` is a zero-sized typed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(offset_to)]\n+    ///\n+    /// fn main() {\n+    ///     let mut a = [0; 5];\n+    ///     let ptr1: *mut i32 = &mut a[1];\n+    ///     let ptr2: *mut i32 = &mut a[3];\n+    ///     assert_eq!(ptr1.offset_to(ptr2), Some(2));\n+    ///     assert_eq!(ptr2.offset_to(ptr1), Some(-2));\n+    ///     assert_eq!(unsafe { ptr1.offset(2) }, ptr2);\n+    ///     assert_eq!(unsafe { ptr2.offset(-2) }, ptr1);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"offset_to\", issue = \"0\")]\n+    #[inline]\n+    pub fn offset_to(self, other: *const T) -> Option<isize> where T: Sized {\n+        let size = mem::size_of::<T>();\n+        if size == 0 {\n+            None\n+        } else {\n+            let diff = (other as isize).wrapping_sub(self as isize);\n+            Some(diff / size as isize)\n+        }\n+    }\n }\n \n // Equality for pointers"}, {"sha": "5a978ccc74153777762c775eec57065cc5c7b1eb", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=7b89bd7ccacd0908d7e22a5cf383c8cc147bc3d5", "patch": "@@ -1502,9 +1502,10 @@ unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n // Return the arithmetic difference if `T` is zero size.\n #[inline(always)]\n fn ptrdistance<T>(start: *const T, end: *const T) -> usize {\n-    let diff = (end as usize).wrapping_sub(start as usize);\n-    let size = mem::size_of::<T>();\n-    diff / (if size == 0 { 1 } else { size })\n+    match start.offset_to(end) {\n+        Some(x) => x as usize,\n+        None => (end as usize).wrapping_sub(start as usize),\n+    }\n }\n \n // Extension methods for raw pointers, used by the iterators"}]}