{"sha": "b5f40df95cf975feba9871346e67e0bc6799ed0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZjQwZGY5NWNmOTc1ZmViYTk4NzEzNDZlNjdlMGJjNjc5OWVkMGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T11:30:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T11:30:58Z"}, "message": "Rollup merge of #84923 - estebank:as_cache_key-once, r=petrochenkov\n\nOnly compute Obligation `cache_key` once  in `register_obligation_at`", "tree": {"sha": "988e959512e214dc64cddf32a493026d9e9073c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/988e959512e214dc64cddf32a493026d9e9073c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5f40df95cf975feba9871346e67e0bc6799ed0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgk9NyCRBK7hj4Ov3rIwAApeUIAIaMyRdvhFnaMcZscbvni2dB\nX1Zxo5vqwb84EmINGg1y4uGajOE6uIY18YATQA4+oPk+ML0xmS3Fv7/s6B04qGxO\nqqfw4WCW0lbrptkYbOwglAYnBxznDP9fDJbfCJE8eKlj+sWSBOk/f9roaLByApbj\ntVfVxzSiBdw47H6wFGfrfopdxVCJ85108bArhZmux7je/PRknev5FOz+yQFarrdU\ntkBQzOFElLnsbCt6vFO9/WjgPy4jgJ4P3Ljq+2zpG7LyAIfo5+y8JXHIIudvUURm\nFLdo70mIy0sl3iJIs1gd5tBC/GXoqZO6RtxU0A/uHfq/nyfaA0lYKccs6Rp298c=\n=Dwhx\n-----END PGP SIGNATURE-----\n", "payload": "tree 988e959512e214dc64cddf32a493026d9e9073c8\nparent ae409558e7ec0a9944b879017fd827b57aa34522\nparent 4bd5505718696a1ec76e156b91561428468371bb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620300658 +0200\ncommitter GitHub <noreply@github.com> 1620300658 +0200\n\nRollup merge of #84923 - estebank:as_cache_key-once, r=petrochenkov\n\nOnly compute Obligation `cache_key` once  in `register_obligation_at`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f40df95cf975feba9871346e67e0bc6799ed0e", "html_url": "https://github.com/rust-lang/rust/commit/b5f40df95cf975feba9871346e67e0bc6799ed0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5f40df95cf975feba9871346e67e0bc6799ed0e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae409558e7ec0a9944b879017fd827b57aa34522", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae409558e7ec0a9944b879017fd827b57aa34522", "html_url": "https://github.com/rust-lang/rust/commit/ae409558e7ec0a9944b879017fd827b57aa34522"}, {"sha": "4bd5505718696a1ec76e156b91561428468371bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd5505718696a1ec76e156b91561428468371bb", "html_url": "https://github.com/rust-lang/rust/commit/4bd5505718696a1ec76e156b91561428468371bb"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "29d685ab530d63f035f889d0b007a1a6751d7dae", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5f40df95cf975feba9871346e67e0bc6799ed0e/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5f40df95cf975feba9871346e67e0bc6799ed0e/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=b5f40df95cf975feba9871346e67e0bc6799ed0e", "patch": "@@ -336,12 +336,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     // Returns Err(()) if we already know this obligation failed.\n     fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {\n-        if self.done_cache.contains(&obligation.as_cache_key()) {\n+        let cache_key = obligation.as_cache_key();\n+        if self.done_cache.contains(&cache_key) {\n             debug!(\"register_obligation_at: ignoring already done obligation: {:?}\", obligation);\n             return Ok(());\n         }\n \n-        match self.active_cache.entry(obligation.as_cache_key()) {\n+        match self.active_cache.entry(cache_key.clone()) {\n             Entry::Occupied(o) => {\n                 let node = &mut self.nodes[*o.get()];\n                 if let Some(parent_index) = parent {\n@@ -365,7 +366,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     && self\n                         .error_cache\n                         .get(&obligation_tree_id)\n-                        .map(|errors| errors.contains(&obligation.as_cache_key()))\n+                        .map(|errors| errors.contains(&cache_key))\n                         .unwrap_or(false);\n \n                 if already_failed {"}]}