{"sha": "4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZmMyYmZiZDQ2NWI2ZDk1MTBkODJjMzUxOThjY2I2YTZhMmQ2ZDc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-11T04:11:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-11T04:11:09Z"}, "message": "Merge pull request #1778 from topecongiro/rfc/match-arm-multiline-pattern\n\nRfc: fix up match arm pattern", "tree": {"sha": "433686304c559e2218d3bba0c774ed47a2041dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/433686304c559e2218d3bba0c774ed47a2041dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "html_url": "https://github.com/rust-lang/rust/commit/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5350f71f41d65d30417b71209da945e31106a640", "url": "https://api.github.com/repos/rust-lang/rust/commits/5350f71f41d65d30417b71209da945e31106a640", "html_url": "https://github.com/rust-lang/rust/commit/5350f71f41d65d30417b71209da945e31106a640"}, {"sha": "7cbc48ae3269eb85639c56f82302c04929a111fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbc48ae3269eb85639c56f82302c04929a111fa", "html_url": "https://github.com/rust-lang/rust/commit/7cbc48ae3269eb85639c56f82302c04929a111fa"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "19b7f8b734ece7cc1bcd1db286986848d5942428", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "patch": "@@ -1701,25 +1701,20 @@ impl Rewrite for ast::Arm {\n         };\n         let pats_str = try_opt!(write_list(&items, &fmt));\n \n-        let guard_shape = if pats_str.contains('\\n') {\n-            shape.with_max_width(context.config)\n-        } else {\n-            shape\n-        };\n-\n         let guard_str = try_opt!(rewrite_guard(\n             context,\n             guard,\n-            guard_shape,\n+            shape,\n             trimmed_last_line_width(&pats_str),\n         ));\n \n+        let pats_len = pats_str.len();\n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n \n         let (mut extend, body) = match body.node {\n             ast::ExprKind::Block(ref block)\n                 if !is_unsafe_block(block) && is_simple_block(block, context.codemap) &&\n-                       context.config.wrap_match_arms() => {\n+                    context.config.wrap_match_arms() => {\n                 if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n                     (false, &**expr)\n                 } else {\n@@ -1761,11 +1756,15 @@ impl Rewrite for ast::Arm {\n             match rewrite {\n                 Some(ref body_str)\n                     if (!body_str.contains('\\n') && body_str.len() <= arm_shape.width) ||\n-                           !context.config.wrap_match_arms() ||\n-                           (extend && first_line_width(body_str) <= arm_shape.width) ||\n-                           is_block => {\n+                        !context.config.wrap_match_arms() ||\n+                        (extend && first_line_width(body_str) <= arm_shape.width) ||\n+                        is_block =>\n+                {\n                     let block_sep = match context.config.control_brace_style() {\n                         ControlBraceStyle::AlwaysNextLine if is_block => alt_block_sep.as_str(),\n+                        _ if guard.is_some() && pats_str.contains('\\n') && is_block &&\n+                            body_str != \"{}\" &&\n+                            pats_len > context.config.tab_spaces() => alt_block_sep.as_str(),\n                         _ => \" \",\n                     };\n \n@@ -1848,33 +1847,30 @@ fn rewrite_guard(\n         // First try to fit the guard string on the same line as the pattern.\n         // 4 = ` if `, 5 = ` => {`\n         if let Some(cond_shape) = shape\n-            .shrink_left(pattern_width + 4)\n+            .offset_left(pattern_width + 4)\n             .and_then(|s| s.sub_width(5))\n         {\n             if let Some(cond_str) = guard\n                 .rewrite(context, cond_shape)\n                 .and_then(|s| s.rewrite(context, cond_shape))\n             {\n-                if !cond_str.contains('\\n') {\n+                if !cond_str.contains('\\n') || pattern_width <= context.config.tab_spaces() {\n                     return Some(format!(\" if {}\", cond_str));\n                 }\n             }\n         }\n \n         // Not enough space to put the guard after the pattern, try a newline.\n-        // 3 == `if `\n-        if let Some(cond_shape) = Shape::indented(\n-            shape.indent.block_indent(context.config) + 3,\n-            context.config,\n-        ).sub_width(3)\n+        // 3 = `if `, 5 = ` => {`\n+        if let Some(cond_shape) =\n+            Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                .offset_left(3)\n+                .and_then(|s| s.sub_width(5))\n         {\n             if let Some(cond_str) = guard.rewrite(context, cond_shape) {\n                 return Some(format!(\n                     \"\\n{}if {}\",\n-                    shape\n-                        .indent\n-                        .block_indent(context.config)\n-                        .to_string(context.config),\n+                    cond_shape.indent.to_string(context.config),\n                     cond_str\n                 ));\n             }\n@@ -1920,7 +1916,6 @@ fn rewrite_pat_expr(\n \n     // The expression won't fit on the current line, jump to next.\n     let nested_shape = shape\n-        .block()\n         .block_indent(context.config.tab_spaces())\n         .with_max_width(context.config);\n     let nested_indent_str = nested_shape.indent.to_string(context.config);"}, {"sha": "6fd070291af461f38d14d30ff4d11eb959324e28", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "patch": "@@ -210,7 +210,8 @@ fn rewrite_segment(\n         match **params {\n             ast::PathParameters::AngleBracketed(ref data)\n                 if !data.lifetimes.is_empty() || !data.types.is_empty() ||\n-                       !data.bindings.is_empty() => {\n+                    !data.bindings.is_empty() =>\n+            {\n                 let param_list = data.lifetimes\n                     .iter()\n                     .map(SegmentParam::LifeTime)"}, {"sha": "bc5c9deef68a5b636dc1efa49fdc9f8622f8fd93", "filename": "tests/source/long-match-arms-brace-newline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Fsource%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Fsource%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Flong-match-arms-brace-newline.rs?ref=4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-format_strings: true\n+// rustfmt-force_format_strings: true\n // rustfmt-max_width: 80\n // rustfmt-control_brace_style: AlwaysNextLine\n "}, {"sha": "417c33c59f8a0b65252e8dfcbbbf3ccbb6d69585", "filename": "tests/target/configs-control_style-rfc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-control_style-rfc.rs?ref=4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "patch": "@@ -28,9 +28,10 @@ fn issue1656() {\n             match rewrite {\n                 Some(ref body_str)\n                     if (!body_str.contains('\\n') && body_str.len() <= arm_shape.width) ||\n-                           !context.config.wrap_match_arms() ||\n-                           (extend && first_line_width(body_str) <= arm_shape.width) ||\n-                           is_block => {\n+                        !context.config.wrap_match_arms() ||\n+                        (extend && first_line_width(body_str) <= arm_shape.width) ||\n+                        is_block =>\n+                {\n                     return None;\n                 }\n                 _ => {}"}, {"sha": "2a956e5b4d0c1cce927fdea96b169748d0f386ac", "filename": "tests/target/long-match-arms-brace-newline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Ftarget%2Flong-match-arms-brace-newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong-match-arms-brace-newline.rs?ref=4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "patch": "@@ -1,4 +1,5 @@\n // rustfmt-format_strings: true\n+// rustfmt-force_format_strings: true\n // rustfmt-max_width: 80\n // rustfmt-control_brace_style: AlwaysNextLine\n "}, {"sha": "f08c5acc9be1fa726f315fbad92521c56a7fdd94", "filename": "tests/target/match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=4cfc2bfbd465b6d9510d82c35198ccb6a6a2d6d7", "patch": "@@ -324,8 +324,8 @@ fn guards() {\n             if foooooooooooooo && barrrrrrrrrrrr => {}\n         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n             if fooooooooooooooooooooo &&\n-                   (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb ||\n-                        cccccccccccccccccccccccccccccccccccccccc) => {}\n+                (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb ||\n+                    cccccccccccccccccccccccccccccccccccccccc) => {}\n     }\n }\n "}]}