{"sha": "ae79ce3f030db27aa7d35d1b22307fb4eba14f36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNzljZTNmMDMwZGIyN2FhN2QzNWQxYjIyMzA3ZmI0ZWJhMTRmMzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-14T23:56:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-15T17:13:43Z"}, "message": "std: Change String::truncate to panic less\n\nThe `Vec::truncate` method does not panic if the length argument is greater than\nthe vector's current length, but `String::truncate` will indeed panic. This\nsemantic difference can be a bit jarring (e.g. #32717), and after some\ndiscussion the libs team concluded that although this can technically be a\nbreaking change it is almost undoubtedly not so in practice.\n\nThis commit changes the semantics of `String::truncate` to be a noop if\n`new_len` is greater than the length of the current string.\n\nCloses #32717", "tree": {"sha": "e35bca3694409c208d2b1e7709583851fbabceef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e35bca3694409c208d2b1e7709583851fbabceef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae79ce3f030db27aa7d35d1b22307fb4eba14f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae79ce3f030db27aa7d35d1b22307fb4eba14f36", "html_url": "https://github.com/rust-lang/rust/commit/ae79ce3f030db27aa7d35d1b22307fb4eba14f36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae79ce3f030db27aa7d35d1b22307fb4eba14f36/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073a09fd63c9b4ec3bb4709986a2517ca4c3cdf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/073a09fd63c9b4ec3bb4709986a2517ca4c3cdf1", "html_url": "https://github.com/rust-lang/rust/commit/073a09fd63c9b4ec3bb4709986a2517ca4c3cdf1"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "306fad2328b628854c3efe740a57a5f090ce18b3", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae79ce3f030db27aa7d35d1b22307fb4eba14f36/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae79ce3f030db27aa7d35d1b22307fb4eba14f36/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=ae79ce3f030db27aa7d35d1b22307fb4eba14f36", "patch": "@@ -992,10 +992,12 @@ impl String {\n \n     /// Shortens this `String` to the specified length.\n     ///\n+    /// If `new_len` is greater than the string's current length, this has no\n+    /// effect.\n+    ///\n     /// # Panics\n     ///\n-    /// Panics if `new_len` > current length, or if `new_len` does not lie on a\n-    /// [`char`] boundary.\n+    /// Panics if `new_len` does not lie on a [`char`] boundary.\n     ///\n     /// [`char`]: ../../std/primitive.char.html\n     ///\n@@ -1013,8 +1015,10 @@ impl String {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, new_len: usize) {\n-        assert!(self.is_char_boundary(new_len));\n-        self.vec.truncate(new_len)\n+        if new_len <= self.len() {\n+            assert!(self.is_char_boundary(new_len));\n+            self.vec.truncate(new_len)\n+        }\n     }\n \n     /// Removes the last character from the string buffer and returns it."}, {"sha": "d71529023f4f7636862cc037cef2e03e8c2310b2", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae79ce3f030db27aa7d35d1b22307fb4eba14f36/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae79ce3f030db27aa7d35d1b22307fb4eba14f36/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=ae79ce3f030db27aa7d35d1b22307fb4eba14f36", "patch": "@@ -248,10 +248,10 @@ fn test_str_truncate() {\n }\n \n #[test]\n-#[should_panic]\n fn test_str_truncate_invalid_len() {\n     let mut s = String::from(\"12345\");\n     s.truncate(6);\n+    assert_eq!(s, \"12345\");\n }\n \n #[test]"}]}