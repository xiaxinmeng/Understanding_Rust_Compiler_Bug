{"sha": "c6107c53d72250d8c1d41f161ce54648bef4d9d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MTA3YzUzZDcyMjUwZDhjMWQ0MWYxNjFjZTU0NjQ4YmVmNGQ5ZDI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-29T03:51:57Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-29T03:51:57Z"}, "message": "Don't fire `const_item_mutation` lint on writes through a pointer\n\nFixes #77321", "tree": {"sha": "d52ac4c22deb59568e9a25a746c9a8cef09af7c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52ac4c22deb59568e9a25a746c9a8cef09af7c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6107c53d72250d8c1d41f161ce54648bef4d9d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9yr28ACgkQtAh+UQ6Y\nsWTTkQ//UxWflCGiHAyHeDLXajQB8wL+vrSGjY75pD9IeZO/eamaTqZRK+jWqtPh\nx7e81wVNwXZyc64SkXYnDPhmXJDzJByDe3rZjdwiMJhm0j2E7NVlOi0OMwMDJong\np/IoxIb+uJcWHakmb6jZfraZ4ARa7Zzd3mHQdSWZtkC8JcOn1VEdn/hkE+CA2u7L\nvO6NgmRdlGppaLvnxeGLP577CcQnULaORRx9oBFddyrECb8zyhja6tYudT3se8l7\nGVrGyLssGURWG+lpgLz80lv04H4UlfLXT/n2Co6tZfBGCmmOnv73zVWfIxi+XOjl\nvkKYxP4lx5x/7u6beaaz5/dEEELLipwPlG5RlvatZ4Bw7a2VPdS0lx6Litluvzc2\n15qlo9SKSMkT7CXpv+BHWzIZyeCj2hKrvFJ/rxagPAQADFsF2IX4gXvyxqQ+d0Ek\nFgrFqQJjBGUCbWpWStJhyIt+JAFJepKlLE5gTzWzL0nmNYbxt/jlFZNHlqq2RT16\n2YUJM1BpQc4FhGXR+QYBsJQcWXFjpeHHn9NINRLvrC6qjMUhxnZYnm3hihAXktTI\n5zzonSiHJIkQUwdy6Gh0ipQhvH9Guj3AUg/gj8PuCLNYT08fLP6gHuaB+rWnePUw\noGDTM0nOisdntWPMTYLvTJSG/dDkcqRbgqMyvxj0f7gBoL0NWSA=\n=Yfjq\n-----END PGP SIGNATURE-----", "payload": "tree d52ac4c22deb59568e9a25a746c9a8cef09af7c1\nparent fc2daaae610b5515438b551a2f3706196a997f35\nauthor Aaron Hill <aa1ronham@gmail.com> 1601351517 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601351517 -0400\n\nDon't fire `const_item_mutation` lint on writes through a pointer\n\nFixes #77321\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6107c53d72250d8c1d41f161ce54648bef4d9d2", "html_url": "https://github.com/rust-lang/rust/commit/c6107c53d72250d8c1d41f161ce54648bef4d9d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6107c53d72250d8c1d41f161ce54648bef4d9d2/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2daaae610b5515438b551a2f3706196a997f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2daaae610b5515438b551a2f3706196a997f35", "html_url": "https://github.com/rust-lang/rust/commit/fc2daaae610b5515438b551a2f3706196a997f35"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "0281c478a6ca06fbee0bb8331bada6183114ae54", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6107c53d72250d8c1d41f161ce54648bef4d9d2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6107c53d72250d8c1d41f161ce54648bef4d9d2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=c6107c53d72250d8c1d41f161ce54648bef4d9d2", "patch": "@@ -60,11 +60,15 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n             // so emitting a lint would be redundant.\n             if !lhs.projection.is_empty() {\n                 if let Some(def_id) = self.is_const_item(lhs.local) {\n-                    self.lint_const_item_usage(def_id, loc, |lint| {\n-                        let mut lint = lint.build(\"attempting to modify a `const` item\");\n-                        lint.note(\"each usage of a `const` item creates a new temporary - the original `const` item will not be modified\");\n-                        lint\n-                    })\n+                    // Don't lint on writes through a pointer\n+                    // (e.g. `unsafe { *FOO = 0; *BAR.field = 1; }`)\n+                    if !matches!(lhs.projection.last(), Some(PlaceElem::Deref)) {\n+                        self.lint_const_item_usage(def_id, loc, |lint| {\n+                            let mut lint = lint.build(\"attempting to modify a `const` item\");\n+                            lint.note(\"each usage of a `const` item creates a new temporary - the original `const` item will not be modified\");\n+                            lint\n+                        })\n+                    }\n                 }\n             }\n             // We are looking for MIR of the form:"}, {"sha": "43371560e02c1d3e4eaae76ffd0f05727daf25b5", "filename": "src/test/ui/lint/lint-const-item-mutation.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6107c53d72250d8c1d41f161ce54648bef4d9d2/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6107c53d72250d8c1d41f161ce54648bef4d9d2/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs?ref=c6107c53d72250d8c1d41f161ce54648bef4d9d2", "patch": "@@ -3,13 +3,15 @@\n struct MyStruct {\n     field: bool,\n     inner_array: [char; 1],\n+    raw_ptr: *mut u8\n }\n impl MyStruct {\n     fn use_mut(&mut self) {}\n }\n \n const ARRAY: [u8; 1] = [25];\n-const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n+const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n+const RAW_PTR: *mut u8 = 1 as *mut u8;\n \n fn main() {\n     ARRAY[0] = 5; //~ WARN attempting to modify\n@@ -18,4 +20,13 @@ fn main() {\n     MY_STRUCT.use_mut(); //~ WARN taking\n     &mut MY_STRUCT; //~ WARN taking\n     (&mut MY_STRUCT).use_mut(); //~ WARN taking\n+\n+    // Test that we don't warn when writing through\n+    // a raw pointer\n+    // This is U.B., but this test is check-pass,\n+    // so this never actually executes\n+    unsafe {\n+        *RAW_PTR = 0;\n+        *MY_STRUCT.raw_ptr = 0;\n+    }\n }"}, {"sha": "c5a221128ffaba262590a7d29e3b6224ae4a5fce", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c6107c53d72250d8c1d41f161ce54648bef4d9d2/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6107c53d72250d8c1d41f161ce54648bef4d9d2/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=c6107c53d72250d8c1d41f161ce54648bef4d9d2", "patch": "@@ -1,89 +1,89 @@\n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:15:5\n+  --> $DIR/lint-const-item-mutation.rs:17:5\n    |\n LL |     ARRAY[0] = 5;\n    |     ^^^^^^^^^^^^\n    |\n    = note: `#[warn(const_item_mutation)]` on by default\n    = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:11:1\n+  --> $DIR/lint-const-item-mutation.rs:12:1\n    |\n LL | const ARRAY: [u8; 1] = [25];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:16:5\n+  --> $DIR/lint-const-item-mutation.rs:18:5\n    |\n LL |     MY_STRUCT.field = false;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:12:1\n+  --> $DIR/lint-const-item-mutation.rs:13:1\n    |\n-LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:17:5\n+  --> $DIR/lint-const-item-mutation.rs:19:5\n    |\n LL |     MY_STRUCT.inner_array[0] = 'b';\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary - the original `const` item will not be modified\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:12:1\n+  --> $DIR/lint-const-item-mutation.rs:13:1\n    |\n-LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:18:5\n+  --> $DIR/lint-const-item-mutation.rs:20:5\n    |\n LL |     MY_STRUCT.use_mut();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: mutable reference created due to call to this method\n-  --> $DIR/lint-const-item-mutation.rs:8:5\n+  --> $DIR/lint-const-item-mutation.rs:9:5\n    |\n LL |     fn use_mut(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:12:1\n+  --> $DIR/lint-const-item-mutation.rs:13:1\n    |\n-LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:19:5\n+  --> $DIR/lint-const-item-mutation.rs:21:5\n    |\n LL |     &mut MY_STRUCT;\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:12:1\n+  --> $DIR/lint-const-item-mutation.rs:13:1\n    |\n-LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:20:5\n+  --> $DIR/lint-const-item-mutation.rs:22:5\n    |\n LL |     (&mut MY_STRUCT).use_mut();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: each usage of a `const` item creates a new temporary\n    = note: the mutable reference will refer to this temporary, not the original `const` item\n note: `const` item defined here\n-  --> $DIR/lint-const-item-mutation.rs:12:1\n+  --> $DIR/lint-const-item-mutation.rs:13:1\n    |\n-LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'] };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw_ptr: 2 as *mut u8 };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: 6 warnings emitted\n "}]}