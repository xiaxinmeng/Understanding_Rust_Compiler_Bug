{"sha": "63c192b34a54e826afebc735ca6225b44a876eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYzE5MmIzNGE1NGU4MjZhZmViYzczNWNhNjIyNWI0NGE4NzZlYWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:48:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:48:33Z"}, "message": "Simplify from_source", "tree": {"sha": "57167d0232b55ebcca43b7894d709cfdf1bded25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57167d0232b55ebcca43b7894d709cfdf1bded25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c192b34a54e826afebc735ca6225b44a876eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c192b34a54e826afebc735ca6225b44a876eab", "html_url": "https://github.com/rust-lang/rust/commit/63c192b34a54e826afebc735ca6225b44a876eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c192b34a54e826afebc735ca6225b44a876eab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e9b245587046d2a1ed432225b19023adbe3245", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e9b245587046d2a1ed432225b19023adbe3245", "html_url": "https://github.com/rust-lang/rust/commit/82e9b245587046d2a1ed432225b19023adbe3245"}], "stats": {"total": 83, "additions": 34, "deletions": 49}, "files": [{"sha": "091349d49dbc6411bbe91100263056b3ef919bd7", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 34, "deletions": 49, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/63c192b34a54e826afebc735ca6225b44a876eab/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c192b34a54e826afebc735ca6225b44a876eab/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=63c192b34a54e826afebc735ca6225b44a876eab", "patch": "@@ -44,16 +44,16 @@ impl FromSource for Enum {\n impl FromSource for Trait {\n     type Ast = ast::TraitDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        // XXX: use `.parent()` to avoid finding ourselves\n-        let parent = src.value.syntax().parent()?;\n-        let container = Container::find(db, src.with_value(parent).as_ref())?;\n-        container.child_by_source(db)[keys::TRAIT].get(&src).copied().map(Trait::from)\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::TRAIT]\n+            .get(&src)\n+            .copied()\n+            .map(Trait::from)\n     }\n }\n impl FromSource for Function {\n     type Ast = ast::FnDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)[keys::FUNCTION]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::FUNCTION]\n             .get(&src)\n             .copied()\n             .map(Function::from)\n@@ -63,7 +63,7 @@ impl FromSource for Function {\n impl FromSource for Const {\n     type Ast = ast::ConstDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)[keys::CONST]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::CONST]\n             .get(&src)\n             .copied()\n             .map(Const::from)\n@@ -72,7 +72,7 @@ impl FromSource for Const {\n impl FromSource for Static {\n     type Ast = ast::StaticDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)[keys::STATIC]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::STATIC]\n             .get(&src)\n             .copied()\n             .map(Static::from)\n@@ -82,8 +82,7 @@ impl FromSource for Static {\n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        Container::find(db, src.as_ref().map(|it| it.syntax()))?.child_by_source(db)\n-            [keys::TYPE_ALIAS]\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::TYPE_ALIAS]\n             .get(&src)\n             .copied()\n             .map(TypeAlias::from)\n@@ -109,10 +108,10 @@ impl FromSource for MacroDef {\n impl FromSource for ImplBlock {\n     type Ast = ast::ImplBlock;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        // XXX: use `.parent()` to avoid finding ourselves\n-        let parent = src.value.syntax().parent()?;\n-        let container = Container::find(db, src.with_value(parent).as_ref())?;\n-        container.child_by_source(db)[keys::IMPL].get(&src).copied().map(ImplBlock::from)\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::IMPL]\n+            .get(&src)\n+            .copied()\n+            .map(ImplBlock::from)\n     }\n }\n \n@@ -262,44 +261,30 @@ where\n     Some(DEF::from_ast_id(ctx, item_id))\n }\n \n-enum Container {\n-    Trait(Trait),\n-    ImplBlock(ImplBlock),\n-    Module(Module),\n+fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n+    _analyze_container(db, src).unwrap_or_default()\n }\n \n-impl Container {\n-    fn find(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<Container> {\n-        // FIXME: this doesn't try to handle nested declarations\n-        for container in src.value.ancestors() {\n-            let res = match_ast! {\n-                match container {\n-                    ast::TraitDef(it) => {\n-                        let c = Trait::from_source(db, src.with_value(it))?;\n-                        Container::Trait(c)\n-                    },\n-                    ast::ImplBlock(it) => {\n-                        let c = ImplBlock::from_source(db, src.with_value(it))?;\n-                        Container::ImplBlock(c)\n-                     },\n-                    _ => { continue },\n-                }\n-            };\n-            return Some(res);\n-        }\n-\n-        let module_source = ModuleSource::from_child_node(db, src);\n-        let c = Module::from_definition(db, src.with_value(module_source))?;\n-        Some(Container::Module(c))\n+fn _analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n+    // FIXME: this doesn't try to handle nested declarations\n+    for container in src.value.ancestors().skip(1) {\n+        let res = match_ast! {\n+            match container {\n+                ast::TraitDef(it) => {\n+                    let c = Trait::from_source(db, src.with_value(it))?;\n+                    c.id.child_by_source(db)\n+                },\n+                ast::ImplBlock(it) => {\n+                    let c = ImplBlock::from_source(db, src.with_value(it))?;\n+                    c.id.child_by_source(db)\n+                 },\n+                _ => { continue },\n+            }\n+        };\n+        return Some(res);\n     }\n-}\n \n-impl ChildBySource for Container {\n-    fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n-        match self {\n-            Container::Trait(it) => it.id.child_by_source(db),\n-            Container::ImplBlock(it) => it.id.child_by_source(db),\n-            Container::Module(it) => it.id.child_by_source(db),\n-        }\n-    }\n+    let module_source = ModuleSource::from_child_node(db, src);\n+    let c = Module::from_definition(db, src.with_value(module_source))?;\n+    Some(c.id.child_by_source(db))\n }"}]}