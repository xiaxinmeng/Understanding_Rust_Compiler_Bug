{"sha": "eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNjllYjM2ZjhjOTRkOTc1NDZmMjkzN2UxMzRlOTNkMmYwZGNiNTU=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-03-10T23:17:46Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-03-14T13:57:31Z"}, "message": "Added support for type placeholders (explicit requested type\ninference in a type with `_` ). This enables partial type inference.", "tree": {"sha": "20da050fec8ddaa7020aaf90bd70e0de7dcdadaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20da050fec8ddaa7020aaf90bd70e0de7dcdadaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "html_url": "https://github.com/rust-lang/rust/commit/eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c895d1d588e6cb7ae3f308f709272a11e8278da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c895d1d588e6cb7ae3f308f709272a11e8278da", "html_url": "https://github.com/rust-lang/rust/commit/6c895d1d588e6cb7ae3f308f709272a11e8278da"}], "stats": {"total": 247, "additions": 236, "deletions": 11}, "files": [{"sha": "8336fa2d6b5ea620d8de99baf9ad35db41fa1983", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -640,13 +640,11 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                 tcx.sess.span_bug(ast_ty.span, \"typeof is reserved but unimplemented\");\n             }\n             ast::TyInfer => {\n-                // ty_infer should only appear as the type of arguments or return\n-                // values in a fn_expr, or as the type of local variables.  Both of\n-                // these cases are handled specially and should not descend into this\n-                // routine.\n-                this.tcx().sess.span_bug(\n-                    ast_ty.span,\n-                    \"found `ty_infer` in unexpected place\");\n+                // TyInfer also appears as the type of arguments or return\n+                // values in a ExprFnBlock or ExprProc, or as the type of\n+                // local variables. Both of these cases are handled specially\n+                // and will not descend into this routine.\n+                this.ty_infer(ast_ty.span)\n             }\n         });\n "}, {"sha": "0c6aeda4258303cc211442f082c8b3ee11f276ea", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -132,7 +132,9 @@ impl AstConv for CrateCtxt {\n     }\n \n     fn ty_infer(&self, span: Span) -> ty::t {\n-        self.tcx.sess.span_bug(span, \"found `ty_infer` in unexpected place\");\n+        self.tcx.sess.span_err(span, \"the type placeholder `_` is not \\\n+                                      allowed within types on item signatures.\");\n+        ty::mk_err()\n     }\n }\n "}, {"sha": "3e600249a7df3d027836a496c699525ccadd8d0f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -830,8 +830,7 @@ pub enum Ty_ {\n     TyPath(Path, Option<OptVec<TyParamBound>>, NodeId), // for #7264; see above\n     TyTypeof(@Expr),\n     // TyInfer means the type should be inferred instead of it having been\n-    // specified. This should only appear at the \"top level\" of a type and not\n-    // nested in one.\n+    // specified. This can appear anywhere in a type.\n     TyInfer,\n }\n "}, {"sha": "b4f7238c9c78554448a142d9b139d0469e9730f0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -1274,6 +1274,9 @@ impl Parser {\n                 bounds\n             } = self.parse_path(LifetimeAndTypesAndBounds);\n             TyPath(path, bounds, ast::DUMMY_NODE_ID)\n+        } else if self.eat(&token::UNDERSCORE) {\n+            // TYPE TO BE INFERRED\n+            TyInfer\n         } else {\n             let msg = format!(\"expected type, found token {:?}\", self.token);\n             self.fatal(msg);"}, {"sha": "36c3922048367534b0a83d12031e241d6b95c3a3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -504,7 +504,7 @@ pub fn print_type(s: &mut State, ty: &ast::Ty) -> io::IoResult<()> {\n             try!(word(&mut s.s, \")\"));\n         }\n         ast::TyInfer => {\n-            fail!(\"print_type shouldn't see a ty_infer\");\n+            try!(word(&mut s.s, \"_\"));\n         }\n     }\n     end(s)"}, {"sha": "67300f9bb9be4767402a97cdf7f3009a2bafc0e1", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -0,0 +1,119 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks that it is not possible to enable global type\n+// inference by using the `_` type placeholder.\n+\n+fn test() -> _ { 5 }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+fn test2() -> (_, _) { (5u, 5u) }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+static TEST3: _ = \"test\";\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+static TEST4: _ = 145u16;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+static TEST5: (_, _) = (1, 2);\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+fn test6(_: _) { }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+fn test7(x: _) { let _x: uint = x; }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+fn test8(_f: fn() -> _) { }\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+struct Test9;\n+\n+impl Test9 {\n+    fn test9(&self) -> _ { () }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    fn test10(&self, _x : _) { }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+}\n+\n+impl Clone for Test9 {\n+    fn clone(&self) -> _ { Test9 }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    fn clone_from(&mut self, other: _) { *self = Test9; }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+}\n+\n+struct Test10 {\n+    a: _,\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    b: (_, _),\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+}\n+\n+pub fn main() {\n+    fn fn_test() -> _ { 5 }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    fn fn_test2() -> (_, _) { (5u, 5u) }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    static FN_TEST3: _ = \"test\";\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    static FN_TEST4: _ = 145u16;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    static FN_TEST5: (_, _) = (1, 2);\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    fn fn_test6(_: _) { }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    fn fn_test7(x: _) { let _x: uint = x; }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    fn fn_test8(_f: fn() -> _) { }\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+    struct FnTest9;\n+\n+    impl FnTest9 {\n+        fn fn_test9(&self) -> _ { () }\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+        fn fn_test10(&self, _x : _) { }\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    }\n+\n+    impl Clone for FnTest9 {\n+        fn clone(&self) -> _ { FnTest9 }\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+\n+        fn clone_from(&mut self, other: _) { *self = FnTest9; }\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    }\n+\n+    struct FnTest10 {\n+        a: _,\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        b: (_, _),\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+        //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures.\n+    }\n+\n+}"}, {"sha": "fae4f541b1790f829a156dfe42f804f912141cf2", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks that the `_` type placeholder does not react\n+// badly if put as a lifetime parameter.\n+\n+struct Foo<'a, T> {\n+    r: &'a T\n+}\n+\n+pub fn main() {\n+    let c: Foo<_, _> = Foo { r: &5u };\n+    //~^ ERROR wrong number of type arguments: expected 1 but found 2\n+}"}, {"sha": "e879ddb951fb7cb7e806cfd800a33f8ef18da935", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_2.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks that the `_` type placeholder does not react\n+// badly if put as a lifetime parameter.\n+\n+struct Foo<'a, T> {\n+    r: &'a T\n+}\n+\n+pub fn main() {\n+    let c: Foo<_, uint> = Foo { r: &5 };\n+    //~^ ERROR wrong number of type arguments: expected 1 but found 2\n+}"}, {"sha": "492a0afff3003bc1fe5a08ba6b4d81685a0cf86e", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks that genuine type errors with partial\n+// type hints are understandable.\n+\n+struct Foo<T>;\n+struct Bar<U>;\n+\n+pub fn main() {\n+}\n+\n+fn test1() {\n+    let x: Foo<_> = Bar::<uint>;\n+    //~^ ERROR mismatched types: expected `Foo<<generic #0>>` but found `Bar<uint>`\n+    let y: Foo<uint> = x;\n+}\n+\n+fn test2() {\n+    let x: Foo<_> = Bar::<uint>;\n+    //~^ ERROR mismatched types: expected `Foo<<generic #0>>` but found `Bar<uint>`\n+    //~^^ ERROR cannot determine a type for this local variable: unconstrained type\n+}"}, {"sha": "789a95dd6e5daf041125a4e43cb113eddad7ba12", "filename": "src/test/run-pass/typeck_type_placeholder_1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb69eb36f8c94d97546f2937e134e93d2f0dcb55/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck_type_placeholder_1.rs?ref=eb69eb36f8c94d97546f2937e134e93d2f0dcb55", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks that the `_` type placeholder works\n+// correctly for enabling type inference.\n+\n+static CONSTEXPR: *int = &'static 413 as *_;\n+\n+pub fn main() {\n+    use std::vec_ng::Vec;\n+\n+    let x: Vec<_> = range(0u, 5).collect();\n+    assert_eq!(x.as_slice(), &[0u,1,2,3,4]);\n+\n+    let x = range(0u, 5).collect::<Vec<_>>();\n+    assert_eq!(x.as_slice(), &[0u,1,2,3,4]);\n+\n+    let y: _ = \"hello\";\n+    assert_eq!(y.len(), 5);\n+\n+    let ptr = &5u;\n+    let ptr2 = ptr as *_;\n+\n+    assert_eq!(ptr as *uint as uint, ptr2 as uint);\n+}"}]}