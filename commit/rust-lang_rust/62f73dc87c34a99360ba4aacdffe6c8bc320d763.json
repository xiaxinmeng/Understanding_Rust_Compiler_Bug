{"sha": "62f73dc87c34a99360ba4aacdffe6c8bc320d763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZjczZGM4N2MzNGE5OTM2MGJhNGFhY2RmZmU2YzhiYzMyMGQ3NjM=", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-26T03:36:58Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2018-07-26T03:36:58Z"}, "message": "Refactor is_external_tool into source_type", "tree": {"sha": "b45d877c1e13db4d416a640575eef1e3a26370e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b45d877c1e13db4d416a640575eef1e3a26370e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f73dc87c34a99360ba4aacdffe6c8bc320d763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f73dc87c34a99360ba4aacdffe6c8bc320d763", "html_url": "https://github.com/rust-lang/rust/commit/62f73dc87c34a99360ba4aacdffe6c8bc320d763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f73dc87c34a99360ba4aacdffe6c8bc320d763/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7", "html_url": "https://github.com/rust-lang/rust/commit/a89f8e1340d90de68bf2dd91f7a95c52273bd5f7"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "8838cdeed8687c1a488fc938a1eabdf47807844c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=62f73dc87c34a99360ba4aacdffe6c8bc320d763", "patch": "@@ -12,7 +12,7 @@\n \n use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n use builder::{RunConfig, Builder, ShouldRun, Step};\n-use tool::{self, prepare_tool_cargo};\n+use tool::{self, prepare_tool_cargo, SourceType};\n use {Compiler, Mode};\n use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n@@ -223,7 +223,7 @@ impl Step for Rustdoc {\n                                            target,\n                                            \"check\",\n                                            \"src/tools/rustdoc\",\n-                                           false);\n+                                           SourceType::InTree);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", compiler.stage));\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);"}, {"sha": "fd3730ffc78de984c8063640c951812aba36fc2c", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=62f73dc87c34a99360ba4aacdffe6c8bc320d763", "patch": "@@ -28,7 +28,7 @@ use build_helper::up_to_date;\n \n use util::symlink_dir;\n use builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n-use tool::{self, prepare_tool_cargo, Tool};\n+use tool::{self, prepare_tool_cargo, Tool, SourceType};\n use compile;\n use cache::{INTERNER, Interned};\n use config::Config;\n@@ -814,7 +814,7 @@ impl Step for Rustdoc {\n             target,\n             \"doc\",\n             \"src/tools/rustdoc\",\n-            false\n+            SourceType::InTree,\n         );\n \n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");"}, {"sha": "7c69197885cf2eaac1f2256809bc35bed9cd0594", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=62f73dc87c34a99360ba4aacdffe6c8bc320d763", "patch": "@@ -30,7 +30,7 @@ use compile;\n use dist;\n use flags::Subcommand;\n use native;\n-use tool::{self, Tool};\n+use tool::{self, Tool, SourceType};\n use toolstate::ToolState;\n use util::{self, dylib_path, dylib_path_var};\n use Crate as CargoCrate;\n@@ -228,7 +228,7 @@ impl Step for Cargo {\n                                                  self.host,\n                                                  \"test\",\n                                                  \"src/tools/cargo\",\n-                                                 true);\n+                                                 SourceType::Submodule);\n \n         if !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n@@ -288,7 +288,7 @@ impl Step for Rls {\n                                                  host,\n                                                  \"test\",\n                                                  \"src/tools/rls\",\n-                                                 true);\n+                                                 SourceType::Submodule);\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n@@ -341,7 +341,7 @@ impl Step for Rustfmt {\n                                                  host,\n                                                  \"test\",\n                                                  \"src/tools/rustfmt\",\n-                                                 true);\n+                                                 SourceType::Submodule);\n \n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n@@ -396,7 +396,7 @@ impl Step for Miri {\n                                                  host,\n                                                  \"test\",\n                                                  \"src/tools/miri\",\n-                                                 true);\n+                                                 SourceType::Submodule);\n \n             // miri tests need to know about the stage sysroot\n             cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n@@ -455,7 +455,7 @@ impl Step for Clippy {\n                                                  host,\n                                                  \"test\",\n                                                  \"src/tools/clippy\",\n-                                                 true);\n+                                                 SourceType::Submodule);\n \n             // clippy tests need to know about the stage sysroot\n             cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n@@ -1740,7 +1740,7 @@ impl Step for CrateRustdoc {\n                                                  target,\n                                                  test_kind.subcommand(),\n                                                  \"src/tools/rustdoc\",\n-                                                 false);\n+                                                 SourceType::InTree);\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }"}, {"sha": "5e68b797b3d54fe4a80b7e8a5724e410e29e6a12", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f73dc87c34a99360ba4aacdffe6c8bc320d763/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=62f73dc87c34a99360ba4aacdffe6c8bc320d763", "patch": "@@ -75,6 +75,12 @@ impl Step for CleanTools {\n     }\n }\n \n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n+pub enum SourceType {\n+    InTree,\n+    Submodule,\n+}\n+\n #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n struct ToolBuild {\n     compiler: Compiler,\n@@ -83,7 +89,7 @@ struct ToolBuild {\n     path: &'static str,\n     mode: Mode,\n     is_optional_tool: bool,\n-    is_external_tool: bool,\n+    source_type: SourceType,\n     extra_features: Vec<String>,\n }\n \n@@ -123,7 +129,7 @@ impl Step for ToolBuild {\n             target,\n             \"build\",\n             path,\n-            self.is_external_tool,\n+            self.source_type,\n         );\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n@@ -247,7 +253,7 @@ pub fn prepare_tool_cargo(\n     target: Interned<String>,\n     command: &'static str,\n     path: &'static str,\n-    is_external_tool: bool,\n+    source_type: SourceType,\n ) -> Command {\n     let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n@@ -257,7 +263,7 @@ pub fn prepare_tool_cargo(\n     // stages and such and it's just easier if they're not dynamically linked.\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n \n-    if is_external_tool {\n+    if source_type == SourceType::Submodule {\n         cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n     }\n \n@@ -289,7 +295,7 @@ pub fn prepare_tool_cargo(\n \n macro_rules! tool {\n     ($($name:ident, $path:expr, $tool_name:expr, $mode:expr\n-        $(,llvm_tools = $llvm:expr)* $(,external_tool = $external:expr)*;)+) => {\n+        $(,llvm_tools = $llvm:expr)* $(,is_external_tool = $external:expr)*;)+) => {\n         #[derive(Copy, PartialEq, Eq, Clone)]\n         pub enum Tool {\n             $(\n@@ -367,7 +373,11 @@ macro_rules! tool {\n                     mode: $mode,\n                     path: $path,\n                     is_optional_tool: false,\n-                    is_external_tool: false $(|| $external)*,\n+                    source_type: if false $(|| $external)* {\n+                        SourceType::Submodule\n+                    } else {\n+                        SourceType::InTree\n+                    },\n                     extra_features: Vec::new(),\n                 }).expect(\"expected to build -- essential tool\")\n             }\n@@ -387,7 +397,7 @@ tool!(\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n-        external_tool = true;\n+        is_external_tool = true;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolBootstrap;\n );\n \n@@ -419,7 +429,7 @@ impl Step for RemoteTestServer {\n             mode: Mode::ToolStd,\n             path: \"src/tools/remote-test-server\",\n             is_optional_tool: false,\n-            is_external_tool: false,\n+            source_type: SourceType::InTree,\n             extra_features: Vec::new(),\n         }).expect(\"expected to build -- essential tool\")\n     }\n@@ -474,7 +484,7 @@ impl Step for Rustdoc {\n             target,\n             \"build\",\n             \"src/tools/rustdoc\",\n-            false,\n+            SourceType::InTree,\n         );\n \n         // Most tools don't get debuginfo, but rustdoc should.\n@@ -547,7 +557,7 @@ impl Step for Cargo {\n             mode: Mode::ToolRustc,\n             path: \"src/tools/cargo\",\n             is_optional_tool: false,\n-            is_external_tool: true,\n+            source_type: SourceType::Submodule,\n             extra_features: Vec::new(),\n         }).expect(\"expected to build -- essential tool\")\n     }\n@@ -597,7 +607,7 @@ macro_rules! tool_extended {\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_optional_tool: true,\n-                    is_external_tool: true,\n+                    source_type: SourceType::Submodule,\n                 })\n             }\n         }"}]}