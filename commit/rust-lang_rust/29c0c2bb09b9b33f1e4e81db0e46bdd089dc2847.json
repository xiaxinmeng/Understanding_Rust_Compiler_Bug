{"sha": "29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YzBjMmJiMDliOWIzM2YxZTRlODFkYjBlNDZiZGQwODlkYzI4NDc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-21T19:11:32Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:50:46Z"}, "message": "Start implementing a configuration file", "tree": {"sha": "2af30fb3daa64de1e73e2b2fd64371f0b0d6e594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2af30fb3daa64de1e73e2b2fd64371f0b0d6e594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "html_url": "https://github.com/rust-lang/rust/commit/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba41430ce04ef64689acd1b991610076a3305db", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba41430ce04ef64689acd1b991610076a3305db", "html_url": "https://github.com/rust-lang/rust/commit/eba41430ce04ef64689acd1b991610076a3305db"}], "stats": {"total": 230, "additions": 229, "deletions": 1}, "files": [{"sha": "a10164b5fcfbd93f345a10df977aa0dc60e4927f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -21,6 +21,7 @@ plugin = true\n regex-syntax = \"0.2.2\"\n regex_macros = { version = \"0.1.28\", optional = true }\n semver = \"0.2.1\"\n+toml = \"0.1\"\n unicode-normalization = \"0.1\"\n \n [dev-dependencies]"}, {"sha": "e275bd701bd5380eabd7adb676c72f70fa62a49b", "filename": "src/conf.rs", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/src%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/src%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconf.rs?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -0,0 +1,184 @@\n+use std::{fmt, fs, io};\n+use std::io::Read;\n+use syntax::{ast, codemap, ptr};\n+use syntax::parse::token;\n+use toml;\n+\n+/// Get the configuration file from arguments.\n+pub fn conf_file(args: &[ptr::P<ast::MetaItem>]) -> Result<Option<token::InternedString>, (&'static str, codemap::Span)> {\n+    for arg in args {\n+        match arg.node {\n+            ast::MetaItemKind::Word(ref name) | ast::MetaItemKind::List(ref name, _) => {\n+                if name == &\"conf_file\" {\n+                    return Err((\"`conf_file` must be a named value\", arg.span));\n+                }\n+            }\n+            ast::MetaItemKind::NameValue(ref name, ref value) => {\n+                if name == &\"conf_file\" {\n+                    return if let ast::LitKind::Str(ref file, _) = value.node {\n+                        Ok(Some(file.clone()))\n+                    } else {\n+                        Err((\"`conf_file` value must be a string\", value.span))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    Ok(None)\n+}\n+\n+/// Error from reading a configuration file.\n+#[derive(Debug)]\n+pub enum ConfError {\n+    IoError(io::Error),\n+    TomlError(Vec<toml::ParserError>),\n+    TypeError(&'static str, &'static str, &'static str),\n+    UnknownKey(String),\n+}\n+\n+impl fmt::Display for ConfError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+        match *self {\n+            ConfError::IoError(ref err) => {\n+                err.fmt(f)\n+            }\n+            ConfError::TomlError(ref errs) => {\n+                let mut first = true;\n+                for err in errs {\n+                    if !first {\n+                        try!(\", \".fmt(f));\n+                        first = false;\n+                    }\n+\n+                    try!(err.fmt(f));\n+                }\n+\n+                Ok(())\n+            }\n+            ConfError::TypeError(ref key, ref expected, ref got) => {\n+                write!(f, \"`{}` is expected to be a `{}` but is a `{}`\", key, expected, got)\n+            }\n+            ConfError::UnknownKey(ref key) => {\n+                write!(f, \"unknown key `{}`\", key)\n+            }\n+        }\n+    }\n+}\n+\n+impl From<io::Error> for ConfError {\n+    fn from(e: io::Error) -> Self {\n+        ConfError::IoError(e)\n+    }\n+}\n+\n+macro_rules! define_Conf {\n+    ($(($toml_name: tt, $rust_name: ident, $default: expr, $ty: ident),)+) => {\n+        /// Type used to store lint configuration.\n+        pub struct Conf {\n+            $(pub $rust_name: $ty,)+\n+        }\n+\n+        impl Default for Conf {\n+            fn default() -> Conf {\n+                Conf {\n+                    $($rust_name: $default,)+\n+                }\n+            }\n+        }\n+\n+        impl Conf {\n+            /// Set the property `name` (which must be the `toml` name) to the given value\n+            #[allow(cast_sign_loss)]\n+            fn set(&mut self, name: String, value: toml::Value) -> Result<(), ConfError> {\n+                match name.as_str() {\n+                    $(\n+                        define_Conf!(PAT $toml_name) => {\n+                            if let Some(value) = define_Conf!(CONV $ty, value) {\n+                                self.$rust_name = value;\n+                            }\n+                            else {\n+                                return Err(ConfError::TypeError(define_Conf!(EXPR $toml_name),\n+                                                                stringify!($ty),\n+                                                                value.type_str()));\n+                            }\n+                        },\n+                    )+\n+                    _ => {\n+                        return Err(ConfError::UnknownKey(name));\n+                    }\n+                }\n+\n+                Ok(())\n+            }\n+        }\n+    };\n+\n+    // hack to convert tts\n+    (PAT $pat: pat) => { $pat };\n+    (EXPR $e: expr) => { $e };\n+\n+    // how to read the value?\n+    (CONV i64, $value: expr) => { $value.as_integer() };\n+    (CONV u64, $value: expr) => { $value.as_integer().iter().filter_map(|&i| if i >= 0 { Some(i as u64) } else { None }).next() };\n+    (CONV String, $value: expr) => { $value.as_str().map(Into::into) };\n+    (CONV StringVec, $value: expr) => {{\n+        let slice = $value.as_slice();\n+\n+        if let Some(slice) = slice {\n+            if slice.iter().any(|v| v.as_str().is_none()) {\n+                None\n+            }\n+            else {\n+                Some(slice.iter().map(|v| v.as_str().unwrap_or_else(|| unreachable!()).to_owned()).collect())\n+            }\n+        }\n+        else {\n+            None\n+        }\n+    }};\n+}\n+\n+/// To keep the `define_Conf!` macro simple\n+pub type StringVec = Vec<String>;\n+\n+define_Conf! {\n+    (\"blacklisted-names\", blacklisted_names, vec![\"foo\".to_owned(), \"bar\".to_owned(), \"baz\".to_owned()], StringVec),\n+    (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25, u64),\n+    (\"too-many-arguments-threshold\", too_many_arguments_threshold, 6, u64),\n+    (\"type-complexity-threshold\", type_complexity_threshold, 250, u64),\n+}\n+\n+/// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif\n+/// `!must_exist`, in which case, it will return the default configuration.\n+pub fn read_conf(path: &str, must_exist: bool) -> Result<Conf, ConfError> {\n+    let mut conf = Conf::default();\n+\n+    let file = match fs::File::open(path) {\n+        Ok(mut file) => {\n+            let mut buf = String::new();\n+            try!(file.read_to_string(&mut buf));\n+            buf\n+        }\n+        Err(ref err) if !must_exist && err.kind() == io::ErrorKind::NotFound => {\n+            return Ok(conf);\n+        }\n+        Err(err) => {\n+            return Err(err.into());\n+        }\n+    };\n+\n+    let mut parser = toml::Parser::new(&file);\n+    let toml = if let Some(toml) = parser.parse() {\n+        toml\n+    }\n+    else {\n+        return Err(ConfError::TomlError(parser.errors));\n+    };\n+\n+    for (key, value) in toml {\n+        try!(conf.set(key, value));\n+    }\n+\n+    Ok(conf)\n+}"}, {"sha": "f3c3564796acdf7928c4b4a9ab5f114640a3dd2d", "filename": "src/lib.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -18,6 +18,8 @@ extern crate rustc;\n #[macro_use]\n extern crate rustc_front;\n \n+extern crate toml;\n+\n // Only for the compile time checking of paths\n extern crate core;\n extern crate collections;\n@@ -35,6 +37,7 @@ extern crate rustc_plugin;\n \n use rustc_plugin::Registry;\n \n+mod conf;\n pub mod consts;\n #[macro_use]\n pub mod utils;\n@@ -107,6 +110,27 @@ mod reexport {\n #[plugin_registrar]\n #[cfg_attr(rustfmt, rustfmt_skip)]\n pub fn plugin_registrar(reg: &mut Registry) {\n+    let conferr = match conf::conf_file(reg.args()) {\n+        Ok(Some(file_name)) => {\n+            conf::read_conf(&file_name, true)\n+        }\n+        Ok(None) => {\n+            conf::read_conf(\"Clippy.toml\", false)\n+        }\n+        Err((err, span)) => {\n+            reg.sess.struct_span_err(span, err).emit();\n+            return;\n+        }\n+    };\n+\n+    let conf = match conferr {\n+        Ok(conf) => conf,\n+        Err(err) => {\n+            reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", err)).emit();\n+            return;\n+        }\n+    };\n+\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box misc::TopLevelRefPass);\n     reg.register_late_lint_pass(box misc::CmpNan);\n@@ -157,7 +181,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box map_clone::MapClonePass);\n     reg.register_late_lint_pass(box temporary_assignment::TemporaryAssignmentPass);\n     reg.register_late_lint_pass(box transmute::UselessTransmute);\n-    reg.register_late_lint_pass(box cyclomatic_complexity::CyclomaticComplexity::new(25));\n+    reg.register_late_lint_pass(box cyclomatic_complexity::CyclomaticComplexity::new(conf.cyclomatic_complexity_threshold));\n     reg.register_late_lint_pass(box escape::EscapePass);\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n     reg.register_late_lint_pass(box misc::UsedUnderscoreBinding);"}, {"sha": "68b902719f6e72da3818773877284bcc9f4eeaae", "filename": "tests/compile-fail/conf_bad_arg.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_bad_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_bad_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_bad_arg.rs?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: `conf_file` must be a named value\n+\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file))]\n+\n+fn main() {}"}, {"sha": "13ab7f6cebfd4a38d3089e31753ffb78731e21d4", "filename": "tests/compile-fail/conf_non_existant.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_non_existant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_non_existant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_non_existant.rs?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: error reading Clippy's configuration file: No such file or directory\n+\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/compile-fail/non_existant_conf.toml\"))]\n+\n+fn main() {}"}, {"sha": "02131d94d527f5cb4840fe752c9a2331c39eac4c", "filename": "tests/compile-fail/conf_unknown_key.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_unknown_key.rs?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: error reading Clippy's configuration file: unknown key `foobar`\n+\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_unknown_key.toml\"))]\n+\n+fn main() {}"}, {"sha": "df298ea78d49f773c8b225c3b46f03468e22c1cc", "filename": "tests/compile-fail/conf_unknown_key.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_unknown_key.toml", "raw_url": "https://github.com/rust-lang/rust/raw/29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847/tests%2Fcompile-fail%2Fconf_unknown_key.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_unknown_key.toml?ref=29c0c2bb09b9b33f1e4e81db0e46bdd089dc2847", "patch": "@@ -0,0 +1 @@\n+foobar = 42"}]}