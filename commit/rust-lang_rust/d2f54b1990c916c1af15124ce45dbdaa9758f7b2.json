{"sha": "d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "node_id": "C_kwDOAAsO6NoAKGQyZjU0YjE5OTBjOTE2YzFhZjE1MTI0Y2U0NWRiZGFhOTc1OGY3YjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-18T12:16:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "Adjust messages, address some nits", "tree": {"sha": "39b7ad46e98b2b6ec313140191e53fce38e18870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39b7ad46e98b2b6ec313140191e53fce38e18870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "html_url": "https://github.com/rust-lang/rust/commit/d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "html_url": "https://github.com/rust-lang/rust/commit/2a16a127a0ed1bf961ca7bce40499f6c407d53e2"}], "stats": {"total": 176, "additions": 91, "deletions": 85}, "files": [{"sha": "803f0dadc020f5f6ec26692825e343f7014951ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -973,6 +973,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     || ref_inner_ty_satisfies_pred\n                 {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        // We don't want a borrowing suggestion on the fields in structs,\n+                        // ```\n+                        // struct Foo {\n+                        //  the_foos: Vec<Foo>\n+                        // }\n+                        // ```\n+                        if !matches!(\n+                            span.ctxt().outer_expn_data().kind,\n+                            ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n+                        ) {\n+                            return false;\n+                        }\n+                        if snippet.starts_with('&') {\n+                            // This is already a literal borrow and the obligation is failing\n+                            // somewhere else in the obligation chain. Do not suggest non-sense.\n+                            return false;\n+                        }\n                         // We have a very specific type of error, where just borrowing this argument\n                         // might solve the problem. In cases like this, the important part is the\n                         // original type obligation, not the last one that failed, which is arbitrary.\n@@ -986,50 +1003,33 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.message =\n                                 vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n                         }\n-                        if snippet.starts_with('&') {\n-                            // This is already a literal borrow and the obligation is failing\n-                            // somewhere else in the obligation chain. Do not suggest non-sense.\n-                            return false;\n-                        }\n                         err.span_label(\n                             span,\n-                            &format!(\n-                                \"expected an implementor of trait `{}`\",\n+                            format!(\n+                                \"the trait `{}` is not implemented for `{}`\",\n                                 old_pred.print_modifiers_and_trait_path(),\n+                                old_pred.self_ty().skip_binder(),\n                             ),\n                         );\n \n-                        // This if is to prevent a special edge-case\n-                        if matches!(\n-                            span.ctxt().outer_expn_data().kind,\n-                            ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n-                        ) {\n-                            // We don't want a borrowing suggestion on the fields in structs,\n-                            // ```\n-                            // struct Foo {\n-                            //  the_foos: Vec<Foo>\n-                            // }\n-                            // ```\n-\n-                            if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n-                                err.span_suggestions(\n-                                    span.shrink_to_lo(),\n-                                    \"consider borrowing here\",\n-                                    [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    &format!(\n-                                        \"consider{} borrowing here\",\n-                                        if is_mut { \" mutably\" } else { \"\" }\n-                                    ),\n-                                    format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n+                        if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n+                            err.span_suggestions(\n+                                span.shrink_to_lo(),\n+                                \"consider borrowing here\",\n+                                [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                &format!(\n+                                    \"consider{} borrowing here\",\n+                                    if is_mut { \" mutably\" } else { \"\" }\n+                                ),\n+                                format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                         }\n                         return true;\n                     }"}, {"sha": "41314644a817009d0ca95f9a47e13aa19b1a45c9", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -1753,9 +1753,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     for param in\n                         [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                        .into_iter()\n+                        .flatten()\n                     {\n-                        if let Some(param) = param\n-                            && self.point_at_arg_if_possible(\n+                        if self.point_at_arg_if_possible(\n                                 error,\n                                 def_id,\n                                 param,\n@@ -1784,17 +1785,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ..\n             }) => {\n                 for param in [param_to_point_at, fallback_param_to_point_at, self_param_to_point_at]\n+                    .into_iter()\n+                    .flatten()\n                 {\n-                    if let Some(param) = param\n-                        && self.point_at_arg_if_possible(\n-                            error,\n-                            def_id,\n-                            param,\n-                            hir_id,\n-                            segment.ident.span,\n-                            args,\n-                        )\n-                    {\n+                    if self.point_at_arg_if_possible(\n+                        error,\n+                        def_id,\n+                        param,\n+                        hir_id,\n+                        segment.ident.span,\n+                        args,\n+                    ) {\n                         return true;\n                     }\n                 }\n@@ -1903,6 +1904,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self.tcx.adjust_ident(expr_field.ident, variant_def_id) == field.ident(self.tcx)\n                 {\n                     error.obligation.cause.span = expr_field\n+                        .expr\n                         .span\n                         .find_ancestor_in_same_ctxt(error.obligation.cause.span)\n                         .unwrap_or(expr_field.span);"}, {"sha": "6e8daf635175fbf62fe080c81445cc5b73245a92", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `{float}: Foo` is not satisfied\n-  --> $DIR/type_wf.rs:19:9\n+  --> $DIR/type_wf.rs:19:12\n    |\n LL |         x: 5.0,\n-   |         ^^^^^^ the trait `Foo` is not implemented for `{float}`\n+   |            ^^^ the trait `Foo` is not implemented for `{float}`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `S`"}, {"sha": "b9c4d8866bf9deeabbb1c025521bd0eb78508895", "filename": "src/test/ui/consts/const-block-const-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: can't drop `UnconstDrop` in const contexts\n   --> $DIR/const-block-const-bound.rs:20:11\n    |\n LL |         f(UnconstDrop);\n-   |         - ^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |         - ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `UnconstDrop`\n    |         |\n    |         required by a bound introduced by this call\n    |\n@@ -23,7 +23,7 @@ error[E0277]: can't drop `NonDrop` in const contexts\n   --> $DIR/const-block-const-bound.rs:22:11\n    |\n LL |         f(NonDrop);\n-   |         - ^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |         - ^^^^^^^ the trait `~const Destruct` is not implemented for `NonDrop`\n    |         |\n    |         required by a bound introduced by this call\n    |"}, {"sha": "80e2dd7fedefd196d52cf0218a42a1ddcb3e7f34", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `B<C>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL |     is_copy(B { a: 1, b: C });\n-   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Copy`\n+   |     ------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `B<C>`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -26,7 +26,7 @@ error[E0277]: the trait bound `B<C>: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL |     is_clone(B { a: 1, b: C });\n-   |     -------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Clone`\n+   |     -------- ^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `B<C>`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -50,7 +50,7 @@ error[E0277]: the trait bound `B<D>: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL |     is_copy(B { a: 1, b: D });\n-   |     ------- ^^^^^^^^^^^^^^^^ expected an implementor of trait `Copy`\n+   |     ------- ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `B<D>`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "e1858b63989326593855ab1a44d9062af4ce7681", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `dyn Iterator<Item = &'a mut u8>` cann\n   --> $DIR/issue-20605.rs:2:17\n    |\n LL |     for item in *things { *item = 0 }\n-   |                 ^^^^^^^ expected an implementor of trait `IntoIterator`\n+   |                 ^^^^^^^ the trait `IntoIterator` is not implemented for `dyn Iterator<Item = &'a mut u8>`\n    |\n    = note: the trait bound `dyn Iterator<Item = &'a mut u8>: IntoIterator` is not satisfied\n    = note: required for `dyn Iterator<Item = &'a mut u8>` to implement `IntoIterator`"}, {"sha": "8950fc51e643c67993dd28cf442211d89b588202", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -11,5 +11,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = Box::new(3);\n     take_param(&x);\n-    //~^ ERROR the trait bound `Box<{integer}>: Foo` is not satisfied\n+    //~^ ERROR the trait bound `Box<{integer}>: Copy` is not satisfied\n }"}, {"sha": "930d96375bff48b07d741e135aec26ca3156fbc2", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n+error[E0277]: the trait bound `Box<{integer}>: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL |     take_param(&x);"}, {"sha": "e81d2441e6ef8de972a004e10657efb52ce35b18", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n+error[E0277]: the trait bound `Box<{integer}>: Copy` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL |     take_param(&x);"}, {"sha": "2380533b9c3ef4bba5357c434bfd11da99ad0b67", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n+error[E0277]: the trait bound `Box<{integer}>: Copy` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL |     take_param(&x);"}, {"sha": "2295a822fa48b7be4b4680ba1ae38dc576f687f1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -5,7 +5,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n@@ -52,7 +52,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n   --> $DIR/const-drop-fail.rs:28:25"}, {"sha": "2295a822fa48b7be4b4680ba1ae38dc576f687f1", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -5,7 +5,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     NonTrivialDrop,\n-   |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n@@ -52,7 +52,7 @@ LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n ...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Destruct`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n   --> $DIR/const-drop-fail.rs:28:25"}, {"sha": "e01102e3864ea4a6182f8fa19eaeca57ca2bd7fe", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -21,7 +21,7 @@ error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7\n    |\n LL |   foo(s);\n-   |   --- ^ expected an implementor of trait `Trait`\n+   |   --- ^ the trait `Trait` is not implemented for `S`\n    |   |\n    |   required by a bound introduced by this call\n    |"}, {"sha": "62f0943d4c9d99f1466df7eab512747d0eaed232", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                           ---- ^^^^^^^ expected an implementor of trait `Pattern<'_>`\n+   |                           ---- ^^^^^^^ the trait `Pattern<'_>` is not implemented for `String`\n    |                           |\n    |                           required by a bound introduced by this call\n    |"}, {"sha": "513bf28fb5878f34e9a4e67606f29345c17335cc", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-2.rs:11:9\n    |\n LL |     foo(a);\n-   |     --- ^ expected an implementor of trait `Tr`\n+   |     --- ^ the trait `Tr` is not implemented for `i32`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "ce838bce09e7b94af11ce989a9c22a083aac8158", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -17,7 +17,7 @@ error[E0277]: the trait bound `f32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:11:9\n    |\n LL |     bar(b);\n-   |     --- ^ expected an implementor of trait `Tr`\n+   |     --- ^ the trait `Tr` is not implemented for `f32`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "ae2bf5aac40b01e1715d9114f8f064198d847692", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n   --> $DIR/issue-84973.rs:6:24\n    |\n LL |     let o = Other::new(f);\n-   |             ---------- ^ expected an implementor of trait `SomeTrait`\n+   |             ---------- ^ the trait `SomeTrait` is not implemented for `Fancy`\n    |             |\n    |             required by a bound introduced by this call\n    |"}, {"sha": "84ecd749b0dda8af53422429fa48f93c4af8032f", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ expected an implementor of trait `IntoIterator`\n+   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -17,7 +17,7 @@ error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n-   |            ^^^^^^ expected an implementor of trait `IntoIterator`\n+   |            ^^^^^^ the trait `IntoIterator` is not implemented for `[i32]`\n    |\n    = note: the trait bound `[i32]: IntoIterator` is not satisfied\n    = note: required for `[i32]` to implement `IntoIterator`\n@@ -32,7 +32,7 @@ error[E0277]: the size for values of type `[K]` cannot be known at compilation t\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n+   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`\n@@ -47,7 +47,7 @@ error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n-   |             ^^^^^^^ expected an implementor of trait `IntoIterator`\n+   |             ^^^^^^^ the trait `IntoIterator` is not implemented for `[K]`\n    |\n    = note: the trait bound `[K]: IntoIterator` is not satisfied\n    = note: required for `[K]` to implement `IntoIterator`"}, {"sha": "f2eb651eaa426af11e62ec8bf2933e725b1a5737", "filename": "src/test/ui/suggestions/suggest-imm-mut-trait-implementations.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-imm-mut-trait-implementations.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: Trait` is not satisfied\n   --> $DIR/suggest-imm-mut-trait-implementations.rs:20:9\n    |\n LL |     foo(a);\n-   |     --- ^ expected an implementor of trait `Trait`\n+   |     --- ^ the trait `Trait` is not implemented for `A`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -22,7 +22,7 @@ error[E0277]: the trait bound `B: Trait` is not satisfied\n   --> $DIR/suggest-imm-mut-trait-implementations.rs:21:9\n    |\n LL |     foo(b);\n-   |     --- ^ expected an implementor of trait `Trait`\n+   |     --- ^ the trait `Trait` is not implemented for `B`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -40,7 +40,7 @@ error[E0277]: the trait bound `C: Trait` is not satisfied\n   --> $DIR/suggest-imm-mut-trait-implementations.rs:22:9\n    |\n LL |     foo(c);\n-   |     --- ^ expected an implementor of trait `Trait`\n+   |     --- ^ the trait `Trait` is not implemented for `C`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "20bbe69c059f84e1e42341aeffe3c14495edebe0", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -11,10 +11,10 @@ LL | struct Foo<T:Trait> {\n    |              ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n-  --> $DIR/on-structs-and-enums-locals.rs:11:9\n+  --> $DIR/on-structs-and-enums-locals.rs:11:12\n    |\n LL |         x: 3\n-   |         ^^^^ the trait `Trait` is not implemented for `{integer}`\n+   |            ^ the trait `Trait` is not implemented for `{integer}`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/on-structs-and-enums-locals.rs:5:14"}, {"sha": "3fb5decb723ea5838c776b55a98f7aa7aae056e7", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -11,10 +11,10 @@ LL | pub enum Bar<T:Trait> {\n    |                ^^^^^ required by this bound in `Bar`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n-  --> $DIR/on-structs-and-enums-xc1.rs:9:9\n+  --> $DIR/on-structs-and-enums-xc1.rs:9:12\n    |\n LL |         x: 3\n-   |         ^^^^ the trait `Trait` is not implemented for `{integer}`\n+   |            ^ the trait `Trait` is not implemented for `{integer}`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18"}, {"sha": "f541733929d360521e551aafd98a9e05f78c12a4", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -1,14 +1,18 @@\n-error[E0277]: the trait bound `Vec<Foo>: Clone` is not satisfied\n+error[E0277]: the trait bound `Foo: Clone` is not satisfied\n   --> $DIR/issue-71136.rs:5:5\n    |\n LL | #[derive(Clone)]\n    |          ----- in this derive macro expansion\n LL | struct FooHolster {\n LL |     the_foos: Vec<Foo>,\n-   |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Clone`\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Foo`\n    |\n    = note: required for `Vec<Foo>` to implement `Clone`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "41fc3600fcd54e295148bce95c0602fa20068f81", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f54b1990c916c1af15124ce45dbdaa9758f7b2/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=d2f54b1990c916c1af15124ce45dbdaa9758f7b2", "patch": "@@ -61,7 +61,7 @@ error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL |     is_send(Box::new(TestType));\n-   |     ------- ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `Send`\n+   |     ------- ^^^^^^^^^^^^^^^^^^ the trait `Send` is not implemented for `Unique<dummy2::TestType>`\n    |     |\n    |     required by a bound introduced by this call\n    |"}]}