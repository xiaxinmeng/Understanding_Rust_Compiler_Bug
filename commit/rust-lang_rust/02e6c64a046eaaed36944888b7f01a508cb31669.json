{"sha": "02e6c64a046eaaed36944888b7f01a508cb31669", "node_id": "C_kwDOAAsO6NoAKDAyZTZjNjRhMDQ2ZWFhZWQzNjk0NDg4OGI3ZjAxYTUwOGNiMzE2Njk", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-12T17:51:32Z"}, "message": "Migrate inline assembly incremental tests to asm!", "tree": {"sha": "2aa74159fd3b95b2795af8f8ba42ef96efa311fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa74159fd3b95b2795af8f8ba42ef96efa311fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02e6c64a046eaaed36944888b7f01a508cb31669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02e6c64a046eaaed36944888b7f01a508cb31669", "html_url": "https://github.com/rust-lang/rust/commit/02e6c64a046eaaed36944888b7f01a508cb31669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02e6c64a046eaaed36944888b7f01a508cb31669/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc20dd49deb2e1e0611ef0897f5cbbf6b9f56abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc20dd49deb2e1e0611ef0897f5cbbf6b9f56abc", "html_url": "https://github.com/rust-lang/rust/commit/cc20dd49deb2e1e0611ef0897f5cbbf6b9f56abc"}], "stats": {"total": 130, "additions": 53, "deletions": 77}, "files": [{"sha": "bb836f203f5c060f1f2e0ac5dbc801bc3b8e305c", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 53, "deletions": 77, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/02e6c64a046eaaed36944888b7f01a508cb31669/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02e6c64a046eaaed36944888b7f01a508cb31669/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=02e6c64a046eaaed36944888b7f01a508cb31669", "patch": "@@ -18,23 +18,19 @@\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![feature(llvm_asm)]\n #![crate_type=\"rlib\"]\n \n-\n+use std::arch::asm;\n \n // Change template\n #[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn change_template(a: i32) -> i32 {\n+pub fn change_template(_a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(c)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, 1\",\n+             out(reg) c\n+             );\n     }\n     c\n }\n@@ -45,15 +41,12 @@ pub fn change_template(a: i32) -> i32 {\n #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn change_template(a: i32) -> i32 {\n+pub fn change_template(_a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        llvm_asm!(\"add 2, $0\"\n-                  : \"=r\"(c)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, 2\",\n+             out(reg) c\n+             );\n     }\n     c\n }\n@@ -67,12 +60,10 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out1)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out1,\n+             in(reg) a\n+             );\n     }\n     _out1\n }\n@@ -87,12 +78,10 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out2)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out2,\n+             in(reg) a\n+             );\n     }\n     _out1\n }\n@@ -105,12 +94,10 @@ pub fn change_output(a: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a\n+             );\n     }\n     _out\n }\n@@ -124,12 +111,10 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_b)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _b\n+             );\n     }\n     _out\n }\n@@ -142,12 +127,10 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a), \"r\"(_b)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             in(\"eax\") _b);\n     }\n     _out\n }\n@@ -161,30 +144,26 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"r\"(_a), \"0\"(_b)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             in(\"ecx\") _b);\n     }\n     _out\n }\n \n \n-\n // Change clobber\n #[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :/*--*/\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             lateout(\"ecx\") _\n+             );\n     }\n     _out\n }\n@@ -198,12 +177,11 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  : \"eax\"\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             lateout(\"edx\") _\n+             );\n     }\n     _out\n }\n@@ -216,12 +194,11 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :\n-                  :/*-------*/\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             options(readonly),\n+             );\n     }\n     _out\n }\n@@ -235,12 +212,11 @@ pub fn change_options(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :\n-                  : \"volatile\"\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             options(nomem   ),\n+             );\n     }\n     _out\n }"}]}