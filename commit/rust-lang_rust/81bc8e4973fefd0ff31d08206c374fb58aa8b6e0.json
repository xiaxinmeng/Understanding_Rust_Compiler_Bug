{"sha": "81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYmM4ZTQ5NzNmZWZkMGZmMzFkMDgyMDZjMzc0ZmI1OGFhOGI2ZTA=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-11T08:47:31Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-14T12:55:49Z"}, "message": "don't try to treat arrays and tuples as literals", "tree": {"sha": "08c6df5a8b97cf7fb03d46b8ca8859b0be7a5de6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c6df5a8b97cf7fb03d46b8ca8859b0be7a5de6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "html_url": "https://github.com/rust-lang/rust/commit/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1574715be5d3fc7e07160708810dcbc9c1b01733", "url": "https://api.github.com/repos/rust-lang/rust/commits/1574715be5d3fc7e07160708810dcbc9c1b01733", "html_url": "https://github.com/rust-lang/rust/commit/1574715be5d3fc7e07160708810dcbc9c1b01733"}], "stats": {"total": 84, "additions": 27, "deletions": 57}, "files": [{"sha": "52af2af4517f9632384ce4633f790ec4d1dbad33", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "patch": "@@ -115,8 +115,6 @@ pub enum Literal {\n     Bool(bool),\n     Int(u64, UncertainIntTy),\n     Float(u64, UncertainFloatTy), // FIXME: f64 is not Eq\n-    Tuple { values: Vec<ExprId> },\n-    Array { values: Vec<ExprId> },\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -322,14 +320,7 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n-            Expr::Literal(l) => match l {\n-                Literal::Array { values } | Literal::Tuple { values } => {\n-                    for &val in values {\n-                        f(val);\n-                    }\n-                }\n-                _ => {}\n-            },\n+            Expr::Literal(_) => {}\n         }\n     }\n }\n@@ -720,14 +711,6 @@ impl ExprCollector {\n                             let text = c.text().to_string();\n                             Literal::String(text)\n                         }\n-                        SyntaxKind::ARRAY_EXPR => {\n-                            // TODO: recursively call to self\n-                            Literal::Array { values: vec![] }\n-                        }\n-                        SyntaxKind::PAREN_EXPR => {\n-                            // TODO: recursively call to self\n-                            Literal::Tuple { values: vec![] }\n-                        }\n                         SyntaxKind::TRUE_KW => Literal::Bool(true),\n                         SyntaxKind::FALSE_KW => Literal::Bool(false),\n                         SyntaxKind::BYTE_STRING => {"}, {"sha": "de5ec5b46dd1c713adbc2f3be5421658b0c66c4f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "patch": "@@ -107,9 +107,9 @@ impl UnifyValue for TypeVarValue {\n     }\n }\n \n-/// The kinds of placeholders we need during type inference. Currently, we only\n-/// have type variables; in the future, we will probably also need int and float\n-/// variables, for inference of literal values (e.g. `100` could be one of\n+/// The kinds of placeholders we need during type inference. There's seperate\n+/// values for general types, and for integer and float variables. The latter\n+/// two are used for inference of literal values (e.g. `100` could be one of\n /// several integer types).\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum InferTy {\n@@ -118,6 +118,20 @@ pub enum InferTy {\n     FloatVar(TypeVarId),\n }\n \n+impl InferTy {\n+    fn fallback_value(self) -> Ty {\n+        match self {\n+            InferTy::TypeVar(..) => Ty::Unknown,\n+            InferTy::IntVar(..) => {\n+                Ty::Int(primitive::UncertainIntTy::Signed(primitive::IntTy::I32))\n+            }\n+            InferTy::FloatVar(..) => {\n+                Ty::Float(primitive::UncertainFloatTy::Known(primitive::FloatTy::F64))\n+            }\n+        }\n+    }\n+}\n+\n /// When inferring an expression, we propagate downward whatever type hint we\n /// are able in the form of an `Expectation`.\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -156,8 +170,6 @@ pub enum Ty {\n     /// A primitive integer type. For example, `i32`.\n     Int(primitive::UncertainIntTy),\n \n-    // /// A primitive unsigned integer type. For example, `u32`.\n-    // Uint(primitive::UintTy),\n     /// A primitive floating-point type. For example, `f64`.\n     Float(primitive::UncertainFloatTy),\n \n@@ -199,8 +211,9 @@ pub enum Ty {\n     // above function pointer type. Once we implement generics, we will probably\n     // need this as well.\n \n-    // A trait, defined with `dyn trait`.\n+    // A trait, defined with `dyn Trait`.\n     // Dynamic(),\n+\n     // The anonymous type of a closure. Used to represent the type of\n     // `|a| a`.\n     // Closure(DefId, ClosureSubsts<'tcx>),\n@@ -824,11 +837,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     // known_ty may contain other variables that are known by now\n                     self.resolve_ty_completely(known_ty.clone())\n                 } else {\n-                    match i {\n-                        InferTy::TypeVar(..) => Ty::Unknown,\n-                        InferTy::IntVar(..) => Ty::Int(primitive::UncertainIntTy::Unknown),\n-                        InferTy::FloatVar(..) => Ty::Float(primitive::UncertainFloatTy::Unknown),\n-                    }\n+                    i.fallback_value()\n                 }\n             }\n             _ => ty,\n@@ -1111,24 +1120,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Ty::Ref(slice_type, Mutability::Shared)\n                 }\n                 Literal::Char(..) => Ty::Char,\n-                Literal::Tuple { values } => {\n-                    let mut inner_tys = Vec::new();\n-                    for &expr in values {\n-                        let inner_ty = self.infer_expr(expr, &Expectation::none())?;\n-                        inner_tys.push(inner_ty);\n-                    }\n-                    Ty::Tuple(Arc::from(inner_tys))\n-                }\n-                Literal::Array { values } => {\n-                    // simply take the type of the first element for now\n-                    let inner_ty = match values.get(0) {\n-                        Some(&expr) => self.infer_expr(expr, &Expectation::none())?,\n-                        None => Ty::Unknown,\n-                    };\n-                    // TODO: we should return a Ty::Array when it becomes\n-                    // available\n-                    Ty::Slice(Arc::new(inner_ty))\n-                }\n                 Literal::Int(_v, ty) => Ty::Int(*ty),\n                 Literal::Float(_v, ty) => Ty::Float(*ty),\n             },"}, {"sha": "53ea998741acf3aa44f39b8e1aa04c8ce643da8c", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "patch": "@@ -144,9 +144,7 @@ fn test() {\n     b'b';\n     3.14;\n     5000;\n-    (0u32, -5isize);\n     false;\n-    [true, true, false]\n }\n \"#,\n         \"literals.txt\","}, {"sha": "8d6079c98c95e286cc53bafb21d10c5fbb45f7d2", "filename": "crates/ra_hir/src/ty/tests/data/literals.txt", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fliterals.txt", "raw_url": "https://github.com/rust-lang/rust/raw/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fliterals.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fliterals.txt?ref=81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "patch": "@@ -1,11 +1,9 @@\n-[11; 146) '{     ...lse] }': ()\n+[11; 101) '{     ...lse; }': ()\n [17; 21) '5i32': i32\n [27; 34) '\"hello\"': &str\n [40; 48) 'b\"bytes\"': &[u8]\n [54; 57) ''c'': char\n [63; 67) 'b'b'': u8\n-[73; 77) '3.14': {float}\n-[83; 87) '5000': {integer}\n-[93; 108) '(0u32, -5isize)': [unknown]\n-[114; 119) 'false': bool\n-[125; 144) '[true,...false]': ()\n+[73; 77) '3.14': f64\n+[83; 87) '5000': i32\n+[93; 98) 'false': bool"}, {"sha": "be9e12d024ac44f96f37e2c65ad792ed0b3cd0c6", "filename": "crates/ra_hir/src/ty/tests/data/struct.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fstruct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/81bc8e4973fefd0ff31d08206c374fb58aa8b6e0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fstruct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fstruct.txt?ref=81bc8e4973fefd0ff31d08206c374fb58aa8b6e0", "patch": "@@ -2,14 +2,14 @@\n [82; 83) 'c': [unknown]\n [86; 87) 'C': [unknown]\n [86; 90) 'C(1)': [unknown]\n-[88; 89) '1': {integer}\n+[88; 89) '1': i32\n [96; 97) 'B': [unknown]\n [107; 108) 'a': A\n [114; 133) 'A { b:...C(1) }': A\n [121; 122) 'B': B\n [127; 128) 'C': [unknown]\n [127; 131) 'C(1)': C\n-[129; 130) '1': {integer}\n+[129; 130) '1': i32\n [139; 140) 'a': A\n [139; 142) 'a.b': B\n [148; 149) 'a': A"}]}