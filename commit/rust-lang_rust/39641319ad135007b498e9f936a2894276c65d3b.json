{"sha": "39641319ad135007b498e9f936a2894276c65d3b", "node_id": "C_kwDOAAsO6NoAKDM5NjQxMzE5YWQxMzUwMDdiNDk4ZTlmOTM2YTI4OTQyNzZjNjVkM2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-02T21:16:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-02T21:16:13Z"}, "message": "Rollup merge of #91410 - ecstatic-morse:const-precise-live-drops-take-2, r=oli-obk\n\nMove `#![feature(const_precise_live_drops)]` checks earlier in the pipeline\n\nShould mitigate the issues found during MCP on #73255.\n\nOnce this is done, we should clean up the queries a bit, since I think `mir_drops_elaborated_and_const_checked` can be merged back into `mir_promoted`.\n\nFixes #90770.\n\ncc ``@rust-lang/wg-const-eval``\nr? ``@nikomatsakis`` (since they reviewed #71824)", "tree": {"sha": "6ee2f38fd052c500d23577c7628a5171ad9f8a03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ee2f38fd052c500d23577c7628a5171ad9f8a03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39641319ad135007b498e9f936a2894276c65d3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqTedCRBK7hj4Ov3rIwAA/hgIAEy7C/Tmq7vFs72461eoZDSj\n41I0e+qZ/Phq9Gj1FTKBp1H0+PSLGfv9ZtYaDHqZQkTODiMpHtjghQ57X7bmckBz\nk0IVyx40FigeKy5gFCo119vGn/+SA6qXugG9A6OkNUojitKpR5Eg1hMQPdXoUmu1\nnyFsqZ7a1wUa/Zjn4eMPMJiMHYPwTjHrHkTqyhfdNSRbdZnEsNmT5UdghaVyvByO\nrmDLLrUzXyGntlK/UJsPuy146+G3ZvdG4L4JIt10svm1ea9acde1KuZZt60h/Fi8\n6IvqpHMDHWm3FLfKc89rSOM0gN7zek3GnjDvXesxvgNs7+HMtoUzkhloMXu1aJM=\n=Of7o\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ee2f38fd052c500d23577c7628a5171ad9f8a03\nparent b269213b35f102a22b5a9645de48814fa255f7a2\nparent 37fa92552586a9f91fefd92518b66dfde4c64771\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638479773 +0100\ncommitter GitHub <noreply@github.com> 1638479773 +0100\n\nRollup merge of #91410 - ecstatic-morse:const-precise-live-drops-take-2, r=oli-obk\n\nMove `#![feature(const_precise_live_drops)]` checks earlier in the pipeline\n\nShould mitigate the issues found during MCP on #73255.\n\nOnce this is done, we should clean up the queries a bit, since I think `mir_drops_elaborated_and_const_checked` can be merged back into `mir_promoted`.\n\nFixes #90770.\n\ncc ``@rust-lang/wg-const-eval``\nr? ``@nikomatsakis`` (since they reviewed #71824)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39641319ad135007b498e9f936a2894276c65d3b", "html_url": "https://github.com/rust-lang/rust/commit/39641319ad135007b498e9f936a2894276c65d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39641319ad135007b498e9f936a2894276c65d3b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b269213b35f102a22b5a9645de48814fa255f7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b269213b35f102a22b5a9645de48814fa255f7a2", "html_url": "https://github.com/rust-lang/rust/commit/b269213b35f102a22b5a9645de48814fa255f7a2"}, {"sha": "37fa92552586a9f91fefd92518b66dfde4c64771", "url": "https://api.github.com/repos/rust-lang/rust/commits/37fa92552586a9f91fefd92518b66dfde4c64771", "html_url": "https://github.com/rust-lang/rust/commit/37fa92552586a9f91fefd92518b66dfde4c64771"}], "stats": {"total": 307, "additions": 275, "deletions": 32}, "files": [{"sha": "c1d47baa405311685cde2c10cd5da9c6dbd282ee", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -80,7 +80,8 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n         trace!(\"visit_terminator: terminator={:?} location={:?}\", terminator, location);\n \n         match &terminator.kind {\n-            mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n+            mir::TerminatorKind::Drop { place: dropped_place, .. }\n+            | mir::TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n                 if !NeedsNonConstDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n                     // Instead of throwing a bug, we just return here. This is because we have to\n@@ -104,11 +105,6 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n                 }\n             }\n \n-            mir::TerminatorKind::DropAndReplace { .. } => span_bug!(\n-                terminator.source_info.span,\n-                \"`DropAndReplace` should be removed by drop elaboration\",\n-            ),\n-\n             mir::TerminatorKind::Abort\n             | mir::TerminatorKind::Call { .. }\n             | mir::TerminatorKind::Assert { .. }"}, {"sha": "9fc12ad4a0b915f43f6e8b36c56e862ca16e54a8", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1803,6 +1803,16 @@ impl<V, T> ProjectionElem<V, T> {\n             | Self::Downcast(_, _) => false,\n         }\n     }\n+\n+    /// Returns `true` if this is a `Downcast` projection with the given `VariantIdx`.\n+    pub fn is_downcast_to(&self, v: VariantIdx) -> bool {\n+        matches!(*self, Self::Downcast(_, x) if x == v)\n+    }\n+\n+    /// Returns `true` if this is a `Field` projection with the given index.\n+    pub fn is_field_to(&self, f: Field) -> bool {\n+        matches!(*self, Self::Field(x, _) if x == f)\n+    }\n }\n \n /// Alias for projections as they appear in places, where the base is a place"}, {"sha": "acbea9bda11e4317b15528445ed5634a022f6daf", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -60,8 +60,10 @@ mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n mod nrvo;\n+mod remove_false_edges;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n+mod remove_uninit_drops;\n mod remove_unneeded_drops;\n mod remove_zsts;\n mod required_consts;\n@@ -75,7 +77,7 @@ mod simplify_try;\n mod uninhabited_enum_branching;\n mod unreachable_prop;\n \n-use rustc_const_eval::transform::check_consts;\n+use rustc_const_eval::transform::check_consts::{self, ConstCx};\n use rustc_const_eval::transform::promote_consts;\n use rustc_const_eval::transform::validate;\n use rustc_mir_dataflow::rustc_peek;\n@@ -444,8 +446,20 @@ fn mir_drops_elaborated_and_const_checked<'tcx>(\n     let (body, _) = tcx.mir_promoted(def);\n     let mut body = body.steal();\n \n+    // IMPORTANT\n+    remove_false_edges::RemoveFalseEdges.run_pass(tcx, &mut body);\n+\n+    // Do a little drop elaboration before const-checking if `const_precise_live_drops` is enabled.\n+    //\n+    // FIXME: Can't use `run_passes` for these, since `run_passes` SILENTLY DOES NOTHING IF THE MIR\n+    // PHASE DOESN'T CHANGE.\n+    if check_consts::post_drop_elaboration::checking_enabled(&ConstCx::new(tcx, &body)) {\n+        simplify::SimplifyCfg::new(\"remove-false-edges\").run_pass(tcx, &mut body);\n+        remove_uninit_drops::RemoveUninitDrops.run_pass(tcx, &mut body);\n+        check_consts::post_drop_elaboration::check_live_drops(tcx, &body);\n+    }\n+\n     run_post_borrowck_cleanup_passes(tcx, &mut body);\n-    check_consts::post_drop_elaboration::check_live_drops(tcx, &body);\n     tcx.alloc_steal_mir(body)\n }\n \n@@ -455,7 +469,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n \n     let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n         // Remove all things only needed by analysis\n-        &simplify_branches::SimplifyBranches::new(\"initial\"),\n+        &simplify_branches::SimplifyConstCondition::new(\"initial\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &cleanup_post_borrowck::CleanupNonCodegenStatements,\n         &simplify::SimplifyCfg::new(\"early-opt\"),\n@@ -514,13 +528,13 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &instcombine::InstCombine,\n         &separate_const_switch::SeparateConstSwitch,\n         &const_prop::ConstProp,\n-        &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        &simplify_branches::SimplifyConstCondition::new(\"after-const-prop\"),\n         &early_otherwise_branch::EarlyOtherwiseBranch,\n         &simplify_comparison_integral::SimplifyComparisonIntegral,\n         &simplify_try::SimplifyArmIdentity,\n         &simplify_try::SimplifyBranchSame,\n         &dest_prop::DestinationPropagation,\n-        &simplify_branches::SimplifyBranches::new(\"final\"),\n+        &simplify_branches::SimplifyConstCondition::new(\"final\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &simplify::SimplifyCfg::new(\"final\"),\n         &nrvo::RenameReturnPlace,"}, {"sha": "71f5ccf7e2465330252f0f48a69ee033f109c86e", "filename": "compiler/rustc_mir_transform/src/remove_false_edges.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_false_edges.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -0,0 +1,29 @@\n+use rustc_middle::mir::{Body, TerminatorKind};\n+use rustc_middle::ty::TyCtxt;\n+\n+use crate::MirPass;\n+\n+/// Removes `FalseEdge` and `FalseUnwind` terminators from the MIR.\n+///\n+/// These are only needed for borrow checking, and can be removed afterwards.\n+///\n+/// FIXME: This should probably have its own MIR phase.\n+pub struct RemoveFalseEdges;\n+\n+impl<'tcx> MirPass<'tcx> for RemoveFalseEdges {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        for block in body.basic_blocks_mut() {\n+            let terminator = block.terminator_mut();\n+            terminator.kind = match terminator.kind {\n+                TerminatorKind::FalseEdge { real_target, .. } => {\n+                    TerminatorKind::Goto { target: real_target }\n+                }\n+                TerminatorKind::FalseUnwind { real_target, .. } => {\n+                    TerminatorKind::Goto { target: real_target }\n+                }\n+\n+                _ => continue,\n+            }\n+        }\n+    }\n+}"}, {"sha": "c219f2673244144721a172cd4486de71716457a4", "filename": "compiler/rustc_mir_transform/src/remove_uninit_drops.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_uninit_drops.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -0,0 +1,171 @@\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::{Body, Field, Rvalue, Statement, StatementKind, TerminatorKind};\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, VariantDef};\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n+use rustc_mir_dataflow::{self, move_path_children_matching, Analysis, MoveDataParamEnv};\n+\n+use crate::MirPass;\n+\n+/// Removes `Drop` and `DropAndReplace` terminators whose target is known to be uninitialized at\n+/// that point.\n+///\n+/// This is redundant with drop elaboration, but we need to do it prior to const-checking, and\n+/// running const-checking after drop elaboration makes it opimization dependent, causing issues\n+/// like [#90770].\n+///\n+/// [#90770]: https://github.com/rust-lang/rust/issues/90770\n+pub struct RemoveUninitDrops;\n+\n+impl<'tcx> MirPass<'tcx> for RemoveUninitDrops {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let param_env = tcx.param_env(body.source.def_id());\n+        let Ok(move_data) = MoveData::gather_moves(body, tcx, param_env) else {\n+            // We could continue if there are move errors, but there's not much point since our\n+            // init data isn't complete.\n+            return;\n+        };\n+\n+        let mdpe = MoveDataParamEnv { move_data, param_env };\n+        let mut maybe_inits = MaybeInitializedPlaces::new(tcx, body, &mdpe)\n+            .into_engine(tcx, body)\n+            .pass_name(\"remove_uninit_drops\")\n+            .iterate_to_fixpoint()\n+            .into_results_cursor(body);\n+\n+        let mut to_remove = vec![];\n+        for (bb, block) in body.basic_blocks().iter_enumerated() {\n+            let terminator = block.terminator();\n+            let (TerminatorKind::Drop { place, .. } | TerminatorKind::DropAndReplace { place, .. })\n+                = &terminator.kind\n+            else { continue };\n+\n+            maybe_inits.seek_before_primary_effect(body.terminator_loc(bb));\n+\n+            // If there's no move path for the dropped place, it's probably a `Deref`. Let it alone.\n+            let LookupResult::Exact(mpi) = mdpe.move_data.rev_lookup.find(place.as_ref()) else {\n+                continue;\n+            };\n+\n+            let should_keep = is_needs_drop_and_init(\n+                tcx,\n+                param_env,\n+                maybe_inits.get(),\n+                &mdpe.move_data,\n+                place.ty(body, tcx).ty,\n+                mpi,\n+            );\n+            if !should_keep {\n+                to_remove.push(bb)\n+            }\n+        }\n+\n+        for bb in to_remove {\n+            let block = &mut body.basic_blocks_mut()[bb];\n+\n+            let (TerminatorKind::Drop { target, .. } | TerminatorKind::DropAndReplace { target, .. })\n+                = &block.terminator().kind\n+            else { unreachable!() };\n+\n+            // Replace block terminator with `Goto`.\n+            let target = *target;\n+            let old_terminator_kind = std::mem::replace(\n+                &mut block.terminator_mut().kind,\n+                TerminatorKind::Goto { target },\n+            );\n+\n+            // If this is a `DropAndReplace`, we need to emulate the assignment to the return place.\n+            if let TerminatorKind::DropAndReplace { place, value, .. } = old_terminator_kind {\n+                block.statements.push(Statement {\n+                    source_info: block.terminator().source_info,\n+                    kind: StatementKind::Assign(Box::new((place, Rvalue::Use(value)))),\n+                });\n+            }\n+        }\n+    }\n+}\n+\n+fn is_needs_drop_and_init(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    maybe_inits: &BitSet<MovePathIndex>,\n+    move_data: &MoveData<'tcx>,\n+    ty: Ty<'tcx>,\n+    mpi: MovePathIndex,\n+) -> bool {\n+    // No need to look deeper if the root is definitely uninit or if it has no `Drop` impl.\n+    if !maybe_inits.contains(mpi) || !ty.needs_drop(tcx, param_env) {\n+        return false;\n+    }\n+\n+    let field_needs_drop_and_init = |(f, f_ty, mpi)| {\n+        let child = move_path_children_matching(move_data, mpi, |x| x.is_field_to(f));\n+        let Some(mpi) = child else {\n+            return f_ty.needs_drop(tcx, param_env);\n+        };\n+\n+        is_needs_drop_and_init(tcx, param_env, maybe_inits, move_data, f_ty, mpi)\n+    };\n+\n+    // This pass is only needed for const-checking, so it doesn't handle as many cases as\n+    // `DropCtxt::open_drop`, since they aren't relevant in a const-context.\n+    match ty.kind() {\n+        ty::Adt(adt, substs) => {\n+            let dont_elaborate = adt.is_union() || adt.is_manually_drop() || adt.has_dtor(tcx);\n+            if dont_elaborate {\n+                return true;\n+            }\n+\n+            // Look at all our fields, or if we are an enum all our variants and their fields.\n+            //\n+            // If a field's projection *is not* present in `MoveData`, it has the same\n+            // initializedness as its parent (maybe init).\n+            //\n+            // If its projection *is* present in `MoveData`, then the field may have been moved\n+            // from separate from its parent. Recurse.\n+            adt.variants.iter_enumerated().any(|(vid, variant)| {\n+                // Enums have multiple variants, which are discriminated with a `Downcast` projection.\n+                // Structs have a single variant, and don't use a `Downcast` projection.\n+                let mpi = if adt.is_enum() {\n+                    let downcast =\n+                        move_path_children_matching(move_data, mpi, |x| x.is_downcast_to(vid));\n+                    let Some(dc_mpi) = downcast else {\n+                        return variant_needs_drop(tcx, param_env, substs, variant);\n+                    };\n+\n+                    dc_mpi\n+                } else {\n+                    mpi\n+                };\n+\n+                variant\n+                    .fields\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(f, field)| (Field::from_usize(f), field.ty(tcx, substs), mpi))\n+                    .any(field_needs_drop_and_init)\n+            })\n+        }\n+\n+        ty::Tuple(_) => ty\n+            .tuple_fields()\n+            .enumerate()\n+            .map(|(f, f_ty)| (Field::from_usize(f), f_ty, mpi))\n+            .any(field_needs_drop_and_init),\n+\n+        _ => true,\n+    }\n+}\n+\n+fn variant_needs_drop(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+    variant: &VariantDef,\n+) -> bool {\n+    variant.fields.iter().any(|field| {\n+        let f_ty = field.ty(tcx, substs);\n+        f_ty.needs_drop(tcx, param_env)\n+    })\n+}"}, {"sha": "39f78e9555e2f6a0d660624dd0094901c0c99d28", "filename": "compiler/rustc_mir_transform/src/remove_unneeded_drops.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1,4 +1,8 @@\n-//! This pass replaces a drop of a type that does not need dropping, with a goto\n+//! This pass replaces a drop of a type that does not need dropping, with a goto.\n+//!\n+//! When the MIR is built, we check `needs_drop` before emitting a `Drop` for a place. This pass is\n+//! useful because (unlike MIR building) it runs after type checking, so it can make use of\n+//! `Reveal::All` to provide more precies type information.\n \n use crate::MirPass;\n use rustc_middle::mir::*;"}, {"sha": "4b261334f3e545d7d4718de15b106861abed1c24", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1,22 +1,21 @@\n-//! A pass that simplifies branches when their condition is known.\n-\n use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n use std::borrow::Cow;\n \n-pub struct SimplifyBranches {\n+/// A pass that replaces a branch with a goto when its condition is known.\n+pub struct SimplifyConstCondition {\n     label: String,\n }\n \n-impl SimplifyBranches {\n+impl SimplifyConstCondition {\n     pub fn new(label: &str) -> Self {\n-        SimplifyBranches { label: format!(\"SimplifyBranches-{}\", label) }\n+        SimplifyConstCondition { label: format!(\"SimplifyConstCondition-{}\", label) }\n     }\n }\n \n-impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n+impl<'tcx> MirPass<'tcx> for SimplifyConstCondition {\n     fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n@@ -53,12 +52,6 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n                     Some(v) if v == expected => TerminatorKind::Goto { target },\n                     _ => continue,\n                 },\n-                TerminatorKind::FalseEdge { real_target, .. } => {\n-                    TerminatorKind::Goto { target: real_target }\n-                }\n-                TerminatorKind::FalseUnwind { real_target, .. } => {\n-                    TerminatorKind::Goto { target: real_target }\n-                }\n                 _ => continue,\n             };\n         }"}, {"sha": "f2b02551146ebff5c1ed98cecdff76a3cb8731cf", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyConstCondition-after-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyConstCondition-after-const-prop.diff?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `main` before SimplifyBranches-after-const-prop\n-+ // MIR for `main` after SimplifyBranches-after-const-prop\n+- // MIR for `main` before SimplifyConstCondition-after-const-prop\n++ // MIR for `main` after SimplifyConstCondition-after-const-prop\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/switch_int.rs:6:11: 6:11", "previous_filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyBranches-after-const-prop.diff"}, {"sha": "d7319eca18e2d107b913812a77ae5bfa1a996768", "filename": "src/test/mir-opt/const_prop/switch_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -2,7 +2,7 @@\n fn foo(_: i32) { }\n \n // EMIT_MIR switch_int.main.ConstProp.diff\n-// EMIT_MIR switch_int.main.SimplifyBranches-after-const-prop.diff\n+// EMIT_MIR switch_int.main.SimplifyConstCondition-after-const-prop.diff\n fn main() {\n     match 1 {\n         1 => foo(0),"}, {"sha": "ca298e9211d4864400aa0116975c4c86ad5c9f04", "filename": "src/test/mir-opt/early_otherwise_branch_68867.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -11,7 +11,7 @@ pub enum ViewportPercentageLength {\n }\n \n // EMIT_MIR early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff\n-// EMIT_MIR early_otherwise_branch_68867.try_sum EarlyOtherwiseBranch.before SimplifyBranches-final.after\n+// EMIT_MIR early_otherwise_branch_68867.try_sum EarlyOtherwiseBranch.before SimplifyConstCondition-final.after\n #[no_mangle]\n pub extern \"C\" fn try_sum(\n     x: &ViewportPercentageLength,"}, {"sha": "44294030439f3a23b550f771e3405d8a142f90be", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1,5 +1,5 @@\n - // MIR for `try_sum` before EarlyOtherwiseBranch\n-+ // MIR for `try_sum` after SimplifyBranches-final\n++ // MIR for `try_sum` after SimplifyConstCondition-final\n   \n   fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n       debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:17:5: 17:6", "previous_filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff"}, {"sha": "d11c70b1efec66a8fd19e41a4b9f472df219d2b4", "filename": "src/test/mir-opt/simplify_if.main.SimplifyConstCondition-after-const-prop.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyConstCondition-after-const-prop.diff?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `main` before SimplifyBranches-after-const-prop\n-+ // MIR for `main` after SimplifyBranches-after-const-prop\n+- // MIR for `main` before SimplifyConstCondition-after-const-prop\n++ // MIR for `main` after SimplifyConstCondition-after-const-prop\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/simplify_if.rs:5:11: 5:11", "previous_filename": "src/test/mir-opt/simplify_if.main.SimplifyBranches-after-const-prop.diff"}, {"sha": "2d093d9266bb516667a19505621b36a27aedfcdb", "filename": "src/test/mir-opt/simplify_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -1,7 +1,7 @@\n #[inline(never)]\n fn noop() {}\n \n-// EMIT_MIR simplify_if.main.SimplifyBranches-after-const-prop.diff\n+// EMIT_MIR simplify_if.main.SimplifyConstCondition-after-const-prop.diff\n fn main() {\n     if false {\n         noop();"}, {"sha": "f7c70d3978b7f24922e45e7ef2f0bee815bafcce", "filename": "src/test/ui/consts/drop_zst.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.rs?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -0,0 +1,17 @@\n+// check-fail\n+\n+#![feature(const_precise_live_drops)]\n+\n+struct S;\n+\n+impl Drop for S {\n+    fn drop(&mut self) {\n+        println!(\"Hello!\");\n+    }\n+}\n+\n+const fn foo() {\n+    let s = S; //~ destructor\n+}\n+\n+fn main() {}"}, {"sha": "d4be5aa56d9af00fda3dccc9899c418d1e0cad35", "filename": "src/test/ui/consts/drop_zst.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39641319ad135007b498e9f936a2894276c65d3b/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr?ref=39641319ad135007b498e9f936a2894276c65d3b", "patch": "@@ -0,0 +1,9 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/drop_zst.rs:14:9\n+   |\n+LL |     let s = S;\n+   |         ^ constant functions cannot evaluate destructors\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0493`."}]}