{"sha": "5424f21d5dd054e57113ca7814b813ba2d09fa15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MjRmMjFkNWRkMDU0ZTU3MTEzY2E3ODE0YjgxM2JhMmQwOWZhMTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T02:00:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T02:00:13Z"}, "message": "docs: Give all tutorials consistent titles and intro sections", "tree": {"sha": "06b722428233af929835d6b6c91c0136e30be73e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b722428233af929835d6b6c91c0136e30be73e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5424f21d5dd054e57113ca7814b813ba2d09fa15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5424f21d5dd054e57113ca7814b813ba2d09fa15", "html_url": "https://github.com/rust-lang/rust/commit/5424f21d5dd054e57113ca7814b813ba2d09fa15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5424f21d5dd054e57113ca7814b813ba2d09fa15/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e", "html_url": "https://github.com/rust-lang/rust/commit/ae1a73029ce422ccd52c3c659a32c19ac60d0d4e"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "92ba09856b0df744694af9ed8bcb788f30bf4385", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5424f21d5dd054e57113ca7814b813ba2d09fa15/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/5424f21d5dd054e57113ca7814b813ba2d09fa15/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=5424f21d5dd054e57113ca7814b813ba2d09fa15", "patch": "@@ -1,4 +1,6 @@\n-# Interacting with foreign code\n+% Rust Foreign Function Interface Tutorial\n+\n+# Introduction\n \n One of Rust's aims, as a system programming language, is to\n interoperate well with C code.\n@@ -38,7 +40,7 @@ fn main(args: ~[~str]) {\n }\n ~~~~\n \n-## Foreign modules\n+# Foreign modules\n \n Before we can call `SHA1`, we have to declare it. That is what this\n part of the program is responsible for:\n@@ -68,7 +70,7 @@ extern mod something {\n }\n ~~~~\n \n-## Foreign calling conventions\n+# Foreign calling conventions\n \n Most foreign code will be C code, which usually uses the `cdecl` calling\n convention, so that is what Rust uses by default when calling foreign\n@@ -88,7 +90,7 @@ The `\"abi\"` attribute applies to a foreign module (it can not be applied\n to a single function within a module), and must be either `\"cdecl\"`\n or `\"stdcall\"`. Other conventions may be defined in the future.\n \n-## Unsafe pointers\n+# Unsafe pointers\n \n The foreign `SHA1` function is declared to take three arguments, and\n return a pointer.\n@@ -118,7 +120,7 @@ caution\u2014unlike Rust's other pointer types, unsafe pointers are\n completely unmanaged, so they might point at invalid memory, or be\n null pointers.\n \n-## Unsafe blocks\n+# Unsafe blocks\n \n The `sha1` function is the most obscure part of the program.\n \n@@ -159,7 +161,7 @@ unsafe fn kaboom() { ~\"I'm harmless!\"; }\n This function can only be called from an unsafe block or another\n unsafe function.\n \n-## Pointer fiddling\n+# Pointer fiddling\n \n The standard library defines a number of helper functions for dealing\n with unsafe data, casting between types, and generally subverting\n@@ -202,7 +204,7 @@ unsafe pointer that was returned by `SHA1`. SHA1 digests are always\n twenty bytes long, so we can pass `20u` for the length of the new\n vector.\n \n-## Passing structures\n+# Passing structures\n \n C functions often take pointers to structs as arguments. Since Rust\n structs are binary-compatible with C structs, Rust programs can call"}, {"sha": "5cd5d79bd29795c29f7a2b71bf7ed5034ea6816d", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5424f21d5dd054e57113ca7814b813ba2d09fa15/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/5424f21d5dd054e57113ca7814b813ba2d09fa15/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=5424f21d5dd054e57113ca7814b813ba2d09fa15", "patch": "@@ -1,4 +1,6 @@\n-# Macros\n+% Rust Macros Tutorial\n+\n+# Introduction\n \n Functions are the programmer's primary tool of abstraction, but there are\n cases in which they are insufficient, because the programmer wants to\n@@ -50,7 +52,7 @@ early_return!(input_2 special_b);\n \n Macros are defined in pattern-matching style:\n \n-## Invocation syntax\n+# Invocation syntax\n \n On the left-hand-side of the `=>` is the macro invocation syntax. It is\n free-form, excepting the following rules:\n@@ -69,7 +71,7 @@ rules of tokenization apply,\n So `($x:ident => (($e:expr)))`, though excessively fancy, would create a macro\n that could be invoked like `my_macro!(i=>(( 2+2 )))`.\n \n-## Transcription syntax\n+# Transcription syntax\n \n The right-hand side of the `=>` follows the same rules as the left-hand side,\n except that `$` need only be followed by the name of the syntactic fragment\n@@ -80,9 +82,9 @@ an expression; currently, user-defined macros can only be invoked in\n expression position (even though `macro_rules!` itself can be in item\n position).\n \n-## Multiplicity\n+# Multiplicity\n \n-### Invocation\n+## Invocation\n \n Going back to the motivating example, suppose that we wanted each invocation\n of `early_return` to potentially accept multiple \"special\" identifiers. The"}, {"sha": "195f3d0bcc80f42c57033a098f0b72967f7fd10a", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5424f21d5dd054e57113ca7814b813ba2d09fa15/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/5424f21d5dd054e57113ca7814b813ba2d09fa15/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=5424f21d5dd054e57113ca7814b813ba2d09fa15", "patch": "@@ -1,4 +1,6 @@\n-% Tasks and communication in Rust\n+% Rust Tasks and Communication Tutorial\n+\n+# Introduction\n \n Rust supports a system of lightweight tasks, similar to what is found\n in Erlang or other actor systems. Rust tasks communicate via messages"}]}