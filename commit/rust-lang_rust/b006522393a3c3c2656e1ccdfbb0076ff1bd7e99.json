{"sha": "b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMDY1MjIzOTNhM2MzYzI2NTZlMWNjZGZiYjAwNzZmZjFiZDdlOTk=", "commit": {"author": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-08-27T23:55:23Z"}, "committer": {"name": "Vali Schneider", "email": "eval@fb.com", "date": "2020-08-27T23:55:23Z"}, "message": "added lint for todo and removed option", "tree": {"sha": "2e71e6d1345e8237b646d941b92c38d329034667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e71e6d1345e8237b646d941b92c38d329034667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "html_url": "https://github.com/rust-lang/rust/commit/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/comments", "author": null, "committer": null, "parents": [{"sha": "b2d8ca9a766703469178ea37d4d46067bb6fa926", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d8ca9a766703469178ea37d4d46067bb6fa926", "html_url": "https://github.com/rust-lang/rust/commit/b2d8ca9a766703469178ea37d4d46067bb6fa926"}], "stats": {"total": 110, "additions": 32, "deletions": 78}, "files": [{"sha": "2901f393fc65bdcd30e72677ead054e6441f5a17", "filename": "clippy_lints/src/panic_in_result.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/clippy_lints%2Fsrc%2Fpanic_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/clippy_lints%2Fsrc%2Fpanic_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result.rs?ref=b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "patch": "@@ -7,24 +7,24 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `panic!`, `unimplemented!` or `unreachable!` in a function of type result/option.\n+    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!` or `unreachable!` in a function of type result.\n     ///\n-    /// **Why is this bad?** For some codebases, it is desirable for functions of type option/result to return an error instead of crashing. Hence unimplemented, panic and unreachable should be avoided.\n+    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence unimplemented, panic and unreachable should be avoided.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// fn option_with_panic() -> Option<bool>\n+    /// fn result_with_panic() -> Result<bool, String>\n     /// {\n     ///     panic!(\"error\");\n     /// }\n     /// ```\n \n     pub PANIC_IN_RESULT,\n     restriction,\n-    \"functions of type `Result<..>` / `Option`<...> that contain `panic!()` or `unreachable()` or `unimplemented()` \"\n+    \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n }\n \n declare_lint_pass!(PanicInResult => [PANIC_IN_RESULT]);\n@@ -35,8 +35,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(result_type))\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(option_type));\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(result_type));\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }\n@@ -55,14 +54,13 @@ impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if is_expn_of(expr.span, \"unimplemented\").is_some() {\n-            self.result.push(expr.span);\n-        } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n-            self.result.push(expr.span);\n-        } else if is_expn_of(expr.span, \"panic\").is_some() {\n+        if is_expn_of(expr.span, \"unimplemented\").is_some()\n+            || is_expn_of(expr.span, \"unreachable\").is_some()\n+            || is_expn_of(expr.span, \"panic\").is_some()\n+            || is_expn_of(expr.span, \"todo\").is_some()\n+        {\n             self.result.push(expr.span);\n         }\n-\n         // and check sub-expressions\n         intravisit::walk_expr(self, expr);\n     }\n@@ -88,10 +86,10 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tc\n                     cx,\n                     PANIC_IN_RESULT,\n                     impl_span,\n-                    \"used unimplemented, unreachable or panic in a function that returns result or option\",\n+                    \"used unimplemented, unreachable, todo or panic in a function that returns result\",\n                     move |diag| {\n                         diag.help(\n-                            \"unimplemented, unreachable or panic should not be used in a function that returns result or option\" );\n+                            \"unimplemented, unreachable, todo or panic should not be used in a function that returns result\" );\n                         diag.span_note(fpu.result, \"will cause the application to crash.\");\n                     });\n             }"}, {"sha": "1f56c56f081d3cda00c27c6407d8cdd02bf5e2e5", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "patch": "@@ -1707,7 +1707,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"panic_in_result\",\n         group: \"restriction\",\n-        desc: \"functions of type `Result<..>` / `Option`<...> that contain `panic!()` or `unreachable()` or `unimplemented()` \",\n+        desc: \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \",\n         deprecation: None,\n         module: \"panic_in_result\",\n     },"}, {"sha": "056778995a4ca9e13a76e4e92464e6e6ae95200c", "filename": "tests/ui/panic_in_result.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/tests%2Fui%2Fpanic_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/tests%2Fui%2Fpanic_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result.rs?ref=b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "patch": "@@ -18,19 +18,9 @@ impl A {\n         unreachable!();\n     }\n \n-    fn option_with_unreachable() -> Option<bool> // should emit lint\n+    fn result_with_todo() -> Result<bool, String> // should emit lint\n     {\n-        unreachable!();\n-    }\n-\n-    fn option_with_unimplemented() -> Option<bool> // should emit lint\n-    {\n-        unimplemented!();\n-    }\n-\n-    fn option_with_panic() -> Option<bool> // should emit lint\n-    {\n-        panic!(\"error\");\n+        todo!(\"Finish this\");\n     }\n \n     fn other_with_panic() // should not emit lint\n@@ -48,14 +38,14 @@ impl A {\n         unimplemented!();\n     }\n \n-    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    fn other_with_todo() // should not emit lint\n     {\n-        Ok(true)\n+        todo!(\"finish this\")\n     }\n \n-    fn option_without_banned_functions() -> Option<bool> // should not emit lint\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n     {\n-        Some(true)\n+        Ok(true)\n     }\n }\n "}, {"sha": "3b9ac69f20dd6821d30b8a0db6b4ab7863911ce3", "filename": "tests/ui/panic_in_result.stderr", "status": "modified", "additions": 13, "deletions": 47, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/tests%2Fui%2Fpanic_in_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b006522393a3c3c2656e1ccdfbb0076ff1bd7e99/tests%2Fui%2Fpanic_in_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result.stderr?ref=b006522393a3c3c2656e1ccdfbb0076ff1bd7e99", "patch": "@@ -1,4 +1,4 @@\n-error: used unimplemented, unreachable or panic in a function that returns result or option\n+error: used unimplemented, unreachable, todo or panic in a function that returns result\n   --> $DIR/panic_in_result.rs:6:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n@@ -8,15 +8,15 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::panic-in-result` implied by `-D warnings`\n-   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n note: will cause the application to crash.\n   --> $DIR/panic_in_result.rs:8:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used unimplemented, unreachable or panic in a function that returns result or option\n+error: used unimplemented, unreachable, todo or panic in a function that returns result\n   --> $DIR/panic_in_result.rs:11:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n@@ -25,15 +25,15 @@ LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n    |\n-   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n note: will cause the application to crash.\n   --> $DIR/panic_in_result.rs:13:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used unimplemented, unreachable or panic in a function that returns result or option\n+error: used unimplemented, unreachable, todo or panic in a function that returns result\n   --> $DIR/panic_in_result.rs:16:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n@@ -42,64 +42,30 @@ LL | |         unreachable!();\n LL | |     }\n    | |_____^\n    |\n-   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n note: will cause the application to crash.\n   --> $DIR/panic_in_result.rs:18:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used unimplemented, unreachable or panic in a function that returns result or option\n+error: used unimplemented, unreachable, todo or panic in a function that returns result\n   --> $DIR/panic_in_result.rs:21:5\n    |\n-LL | /     fn option_with_unreachable() -> Option<bool> // should emit lint\n+LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n LL | |     {\n-LL | |         unreachable!();\n+LL | |         todo!(\"Finish this\");\n LL | |     }\n    | |_____^\n    |\n-   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n+   = help: unimplemented, unreachable, todo or panic should not be used in a function that returns result\n note: will cause the application to crash.\n   --> $DIR/panic_in_result.rs:23:9\n    |\n-LL |         unreachable!();\n-   |         ^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: used unimplemented, unreachable or panic in a function that returns result or option\n-  --> $DIR/panic_in_result.rs:26:5\n-   |\n-LL | /     fn option_with_unimplemented() -> Option<bool> // should emit lint\n-LL | |     {\n-LL | |         unimplemented!();\n-LL | |     }\n-   | |_____^\n-   |\n-   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n-note: will cause the application to crash.\n-  --> $DIR/panic_in_result.rs:28:9\n-   |\n-LL |         unimplemented!();\n-   |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: used unimplemented, unreachable or panic in a function that returns result or option\n-  --> $DIR/panic_in_result.rs:31:5\n-   |\n-LL | /     fn option_with_panic() -> Option<bool> // should emit lint\n-LL | |     {\n-LL | |         panic!(\"error\");\n-LL | |     }\n-   | |_____^\n-   |\n-   = help: unimplemented, unreachable or panic should not be used in a function that returns result or option\n-note: will cause the application to crash.\n-  --> $DIR/panic_in_result.rs:33:9\n-   |\n-LL |         panic!(\"error\");\n-   |         ^^^^^^^^^^^^^^^^\n+LL |         todo!(\"Finish this\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}]}