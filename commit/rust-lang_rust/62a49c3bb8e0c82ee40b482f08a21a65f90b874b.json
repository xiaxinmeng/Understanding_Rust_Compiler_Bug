{"sha": "62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYTQ5YzNiYjhlMGM4MmVlNDBiNDgyZjA4YTIxYTY1ZjkwYjg3NGI=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-05T20:51:33Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-31T14:13:57Z"}, "message": "Add tcx lifetime to Binder", "tree": {"sha": "35da25c3bfb39faed59aca40682867e4f16a147a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35da25c3bfb39faed59aca40682867e4f16a147a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "html_url": "https://github.com/rust-lang/rust/commit/62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "html_url": "https://github.com/rust-lang/rust/commit/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf"}], "stats": {"total": 502, "additions": 274, "deletions": 228}, "files": [{"sha": "392553a80f969188588911df722e1df4b77bb993", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -293,7 +293,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T>(&mut self, t: ty::Binder<T>) -> ty::Binder<T>\n+    fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "debf108253793964800bbadce78277f02d66ca06", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -545,9 +545,9 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {\n@@ -840,9 +840,9 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "45ba50bb6349cc9d177d81f6534601508bebdf87", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -124,9 +124,9 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "a91bd9ce2ff7474c085d5e189401fcc9e76f9e6f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -514,7 +514,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             fn print_dyn_existential(\n                 self,\n-                _predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+                _predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n             ) -> Result<Self::DynExistential, Self::Error> {\n                 Err(NonTrivialPath)\n             }"}, {"sha": "02662043dba798088284696de403c25f30476984", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -85,9 +85,9 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "d460222df8ad0f82508f7ae52cdd6fa9f63c029d", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -11,10 +11,10 @@ use rustc_middle::ty::{self, Binder, TypeFoldable};\n impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n     pub fn higher_ranked_sub<T>(\n         &mut self,\n-        a: Binder<T>,\n-        b: Binder<T>,\n+        a: Binder<'tcx, T>,\n+        b: Binder<'tcx, T>,\n         a_is_expected: bool,\n-    ) -> RelateResult<'tcx, Binder<T>>\n+    ) -> RelateResult<'tcx, Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {\n@@ -69,7 +69,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n-    pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<T>) -> T\n+    pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "4fa8f2f1a6a426c82ec5bb6f9348a54a2e23f164", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -85,9 +85,9 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "eaec6b46bcd1456c30b15262808f3c684e1a0b7a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -1406,7 +1406,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,\n-        value: ty::Binder<T>,\n+        value: ty::Binder<'tcx, T>,\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "fc9ea07866c214bdb1c56a4a2e23563f9c478dce", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -157,7 +157,7 @@ where\n \n     fn create_scope(\n         &mut self,\n-        value: ty::Binder<impl Relate<'tcx>>,\n+        value: ty::Binder<'tcx, impl Relate<'tcx>>,\n         universally_quantified: UniversallyQuantified,\n     ) -> BoundRegionScope<'tcx> {\n         let mut scope = BoundRegionScope::default();\n@@ -608,9 +608,9 @@ where\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {\n@@ -744,7 +744,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n-        t: &ty::Binder<T>,\n+        t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n         self.target_index.shift_in(1);\n         t.super_visit_with(self);\n@@ -997,9 +997,9 @@ where\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        _: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        _: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "bf5f328233dfd7832ba421924214d53fec58df8d", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -162,9 +162,9 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "a33234a91faff47333f0c07dd49e7e7398d5ab52", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> FulfillmentError<'tcx> {\n }\n \n impl<'tcx> TraitObligation<'tcx> {\n-    pub fn self_ty(&self) -> ty::Binder<Ty<'tcx>> {\n+    pub fn self_ty(&self) -> ty::Binder<'tcx, Ty<'tcx>> {\n         self.predicate.map_bound(|p| p.self_ty())\n     }\n }"}, {"sha": "14bd823ea226662059f5a449fa13287a0c21d05e", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -909,7 +909,7 @@ impl<'tcx> LateContext<'tcx> {\n \n             fn print_dyn_existential(\n                 self,\n-                _predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+                _predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n             ) -> Result<Self::DynExistential, Self::Error> {\n                 Ok(())\n             }"}, {"sha": "60b1564d4c537770408ffc0c399b3584f3c6a923", "filename": "compiler/rustc_middle/src/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_ty.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -118,7 +118,7 @@ impl<'tcx> HashStable<StableHashingContext<'tcx>> for ty::BoundVar {\n     }\n }\n \n-impl<'a, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n+impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<'tcx, T>\n where\n     T: HashStable<StableHashingContext<'a>>,\n {"}, {"sha": "5d0987193fac9ad09ce199bba102e5022ced6287", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -277,7 +277,7 @@ impl<'tcx, V> Canonical<'tcx, V> {\n }\n \n pub type QueryOutlivesConstraint<'tcx> =\n-    ty::Binder<ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n+    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n \n TrivialTypeFoldableAndLiftImpls! {\n     for <'tcx> {"}, {"sha": "8e2c79701af90d76d48d6979e23a08c4f7fd35ea", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -112,9 +112,9 @@ impl TypeRelation<'tcx> for Match<'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "3a38f0c8521692acd8b4a8a2007238a07dbbb845", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -120,7 +120,7 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<ty::PredicateKind<'tcx>> {\n+impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {\n     fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n         encode_with_shorthand(e, &self.skip_binder(), TyEncoder::predicate_shorthands)\n     }\n@@ -226,8 +226,8 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<ty::PredicateKind<'tcx>> {\n-    fn decode(decoder: &mut D) -> Result<ty::Binder<ty::PredicateKind<'tcx>>, D::Error> {\n+impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {\n+    fn decode(decoder: &mut D) -> Result<ty::Binder<'tcx, ty::PredicateKind<'tcx>>, D::Error> {\n         // Handle shorthands first, if we have an usize > 0x80.\n         Ok(ty::Binder::bind(if decoder.positioned_at_shorthand() {\n             let pos = decoder.read_usize()?;\n@@ -319,7 +319,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n }\n \n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>\n-    for ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>\n+    for ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n@@ -382,7 +382,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [mir::abstract_const::N\n impl_decodable_via_ref! {\n     &'tcx ty::TypeckResults<'tcx>,\n     &'tcx ty::List<Ty<'tcx>>,\n-    &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+    &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     &'tcx Allocation,\n     &'tcx mir::Body<'tcx>,\n     &'tcx mir::UnsafetyCheckResult,\n@@ -488,12 +488,12 @@ macro_rules! implement_ty_decoder {\n macro_rules! impl_binder_encode_decode {\n     ($($t:ty),+ $(,)?) => {\n         $(\n-            impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<$t> {\n+            impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, $t> {\n                 fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n                     self.as_ref().skip_binder().encode(e)\n                 }\n             }\n-            impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<$t> {\n+            impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, $t> {\n                 fn decode(decoder: &mut D) -> Result<Self, D::Error> {\n                     Ok(ty::Binder::bind(Decodable::decode(decoder)?))\n                 }"}, {"sha": "a7c05b4275503cc056305ced0487469dc5735e00", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -87,7 +87,8 @@ pub struct CtxtInterners<'tcx> {\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind>,\n-    poly_existential_predicates: InternedSet<'tcx, List<ty::Binder<ExistentialPredicate<'tcx>>>>,\n+    poly_existential_predicates:\n+        InternedSet<'tcx, List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>>,\n     predicate: InternedSet<'tcx, PredicateInner<'tcx>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n@@ -136,7 +137,10 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     #[inline(never)]\n-    fn intern_predicate(&self, kind: Binder<PredicateKind<'tcx>>) -> &'tcx PredicateInner<'tcx> {\n+    fn intern_predicate(\n+        &self,\n+        kind: Binder<'tcx, PredicateKind<'tcx>>,\n+    ) -> &'tcx PredicateInner<'tcx> {\n         self.predicate\n             .intern(kind, |kind| {\n                 let flags = super::flags::FlagComputation::for_predicate(kind);\n@@ -449,7 +453,7 @@ pub struct TypeckResults<'tcx> {\n \n     /// Stores the type, expression, span and optional scope span of all types\n     /// that are live across the yield of this generator (if a generator).\n-    pub generator_interior_types: ty::Binder<Vec<GeneratorInteriorTypeCause<'tcx>>>,\n+    pub generator_interior_types: ty::Binder<'tcx, Vec<GeneratorInteriorTypeCause<'tcx>>>,\n \n     /// We sometimes treat byte string literals (which are of type `&[u8; N]`)\n     /// as `&[u8]`, depending on the pattern  in which they are used.\n@@ -1616,7 +1620,7 @@ nop_lift! {allocation; &'a Allocation => &'tcx Allocation}\n nop_lift! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n \n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n-nop_list_lift! {poly_existential_predicates; ty::Binder<ExistentialPredicate<'a>> => ty::Binder<ExistentialPredicate<'tcx>>}\n+nop_list_lift! {poly_existential_predicates; ty::Binder<'a, ExistentialPredicate<'a>> => ty::Binder<'tcx, ExistentialPredicate<'tcx>>}\n nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n nop_list_lift! {canonical_var_infos; CanonicalVarInfo<'a> => CanonicalVarInfo<'tcx>}\n nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n@@ -1965,8 +1969,8 @@ impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {\n     }\n }\n \n-impl<'tcx> Borrow<Binder<PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a Binder<PredicateKind<'tcx>> {\n+impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {\n         &self.0.kind\n     }\n }\n@@ -2072,7 +2076,7 @@ slice_interners!(\n     substs: _intern_substs(GenericArg<'tcx>),\n     canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),\n     poly_existential_predicates:\n-        _intern_poly_existential_predicates(ty::Binder<ExistentialPredicate<'tcx>>),\n+        _intern_poly_existential_predicates(ty::Binder<'tcx, ExistentialPredicate<'tcx>>),\n     predicates: _intern_predicates(Predicate<'tcx>),\n     projs: _intern_projs(ProjectionKind),\n     place_elems: _intern_place_elems(PlaceElem<'tcx>),\n@@ -2158,7 +2162,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_predicate(self, binder: Binder<PredicateKind<'tcx>>) -> Predicate<'tcx> {\n+    pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {\n         let inner = self.interners.intern_predicate(binder);\n         Predicate { inner }\n     }\n@@ -2167,7 +2171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn reuse_or_mk_predicate(\n         self,\n         pred: Predicate<'tcx>,\n-        binder: Binder<PredicateKind<'tcx>>,\n+        binder: Binder<'tcx, PredicateKind<'tcx>>,\n     ) -> Predicate<'tcx> {\n         if pred.kind() != binder { self.mk_predicate(binder) } else { pred }\n     }\n@@ -2334,7 +2338,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_dynamic(\n         self,\n-        obj: &'tcx List<ty::Binder<ExistentialPredicate<'tcx>>>,\n+        obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n         reg: ty::Region<'tcx>,\n     ) -> Ty<'tcx> {\n         self.mk_ty(Dynamic(obj, reg))\n@@ -2361,7 +2365,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_generator_witness(self, types: ty::Binder<&'tcx List<Ty<'tcx>>>) -> Ty<'tcx> {\n+    pub fn mk_generator_witness(self, types: ty::Binder<'tcx, &'tcx List<Ty<'tcx>>>) -> Ty<'tcx> {\n         self.mk_ty(GeneratorWitness(types))\n     }\n \n@@ -2466,8 +2470,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn intern_poly_existential_predicates(\n         self,\n-        eps: &[ty::Binder<ExistentialPredicate<'tcx>>],\n-    ) -> &'tcx List<ty::Binder<ExistentialPredicate<'tcx>>> {\n+        eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],\n+    ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n         assert!(!eps.is_empty());\n         assert!(\n             eps.array_windows()\n@@ -2533,8 +2537,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn mk_poly_existential_predicates<\n         I: InternAs<\n-            [ty::Binder<ExistentialPredicate<'tcx>>],\n-            &'tcx List<ty::Binder<ExistentialPredicate<'tcx>>>,\n+            [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],\n+            &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n         >,\n     >(\n         self,"}, {"sha": "79e88662f652d6966bedca0402c6cf3004408812", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -43,7 +43,7 @@ impl TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n         if ty.needs_infer() { ty.super_fold_with(self) } else { self.tcx.erase_regions_ty(ty) }\n     }\n \n-    fn fold_binder<T>(&mut self, t: ty::Binder<T>) -> ty::Binder<T>\n+    fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "4767e5743c22e4dc9e2dae017b86132c4ce06762", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -57,7 +57,9 @@ pub enum TypeError<'tcx> {\n     CyclicTy(Ty<'tcx>),\n     CyclicConst(&'tcx ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n-    ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>>),\n+    ExistentialMismatch(\n+        ExpectedFound<&'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>>,\n+    ),\n     ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n "}, {"sha": "01bc5cc761ca67275c4fe9bf64e23cf6982b570d", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -22,7 +22,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate(binder: ty::Binder<ty::PredicateKind<'_>>) -> FlagComputation {\n+    pub fn for_predicate(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_predicate(binder);\n         result\n@@ -53,7 +53,7 @@ impl FlagComputation {\n \n     /// Adds the flags/depth from a set of types that appear within the current type, but within a\n     /// region binder.\n-    fn bound_computation<T, F>(&mut self, value: ty::Binder<T>, f: F)\n+    fn bound_computation<T, F>(&mut self, value: ty::Binder<'_, T>, f: F)\n     where\n         F: FnOnce(&mut Self, T),\n     {\n@@ -204,7 +204,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_predicate(&mut self, binder: ty::Binder<ty::PredicateKind<'_>>) {\n+    fn add_predicate(&mut self, binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) {\n         self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));\n     }\n "}, {"sha": "fe26314ae2ffcac4d9acc805e8dfc0be396281bb", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -161,7 +161,7 @@ impl TypeFoldable<'tcx> for hir::Constness {\n pub trait TypeFolder<'tcx>: Sized {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n-    fn fold_binder<T>(&mut self, t: Binder<T>) -> Binder<T>\n+    fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -184,7 +184,10 @@ pub trait TypeFolder<'tcx>: Sized {\n pub trait TypeVisitor<'tcx>: Sized {\n     type BreakTy = !;\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         t.super_visit_with(self)\n     }\n \n@@ -322,7 +325,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             fn visit_binder<T: TypeFoldable<'tcx>>(\n                 &mut self,\n-                t: &Binder<T>,\n+                t: &Binder<'tcx, T>,\n             ) -> ControlFlow<Self::BreakTy> {\n                 self.outer_index.shift_in(1);\n                 let result = t.as_ref().skip_binder().visit_with(self);\n@@ -400,7 +403,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: ty::Binder<T>) -> ty::Binder<T> {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n         self.current_index.shift_in(1);\n         let t = t.super_fold_with(self);\n         self.current_index.shift_out(1);\n@@ -460,7 +466,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: ty::Binder<T>) -> ty::Binder<T> {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n         self.current_index.shift_in(1);\n         let t = t.super_fold_with(self);\n         self.current_index.shift_out(1);\n@@ -538,7 +547,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// contain escaping bound types.\n     pub fn replace_late_bound_regions<T, F>(\n         self,\n-        value: Binder<T>,\n+        value: Binder<'tcx, T>,\n         mut fld_r: F,\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n     where\n@@ -588,7 +597,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// types.\n     pub fn replace_bound_vars<T, F, G, H>(\n         self,\n-        value: Binder<T>,\n+        value: Binder<'tcx, T>,\n         mut fld_r: F,\n         fld_t: G,\n         fld_c: H,\n@@ -607,7 +616,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Replaces any late-bound regions bound in `value` with\n     /// free variants attached to `all_outlive_scope`.\n-    pub fn liberate_late_bound_regions<T>(self, all_outlive_scope: DefId, value: ty::Binder<T>) -> T\n+    pub fn liberate_late_bound_regions<T>(\n+        self,\n+        all_outlive_scope: DefId,\n+        value: ty::Binder<'tcx, T>,\n+    ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -626,7 +639,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// variables will also be equated.\n     pub fn collect_constrained_late_bound_regions<T>(\n         self,\n-        value: &Binder<T>,\n+        value: &Binder<'tcx, T>,\n     ) -> FxHashSet<ty::BoundRegionKind>\n     where\n         T: TypeFoldable<'tcx>,\n@@ -637,7 +650,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns a set of all late-bound regions that appear in `value` anywhere.\n     pub fn collect_referenced_late_bound_regions<T>(\n         self,\n-        value: &Binder<T>,\n+        value: &Binder<'tcx, T>,\n     ) -> FxHashSet<ty::BoundRegionKind>\n     where\n         T: TypeFoldable<'tcx>,\n@@ -647,7 +660,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     fn collect_late_bound_regions<T>(\n         self,\n-        value: &Binder<T>,\n+        value: &Binder<'tcx, T>,\n         just_constraint: bool,\n     ) -> FxHashSet<ty::BoundRegionKind>\n     where\n@@ -661,7 +674,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also\n     /// method lookup and a few other places where precise region relationships are not required.\n-    pub fn erase_late_bound_regions<T>(self, value: Binder<T>) -> T\n+    pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -676,7 +689,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become\n     /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and\n     /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.\n-    pub fn anonymize_late_bound_regions<T>(self, sig: Binder<T>) -> Binder<T>\n+    pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -719,7 +732,10 @@ impl TypeFolder<'tcx> for Shifter<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: ty::Binder<T>) -> ty::Binder<T> {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n         self.current_index.shift_in(1);\n         let t = t.super_fold_with(self);\n         self.current_index.shift_out(1);\n@@ -828,7 +844,10 @@ struct HasEscapingVarsVisitor {\n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.outer_index.shift_out(1);\n@@ -898,7 +917,10 @@ crate struct CountBoundVars {\n impl<'tcx> TypeVisitor<'tcx> for CountBoundVars {\n     type BreakTy = ();\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.outer_index.shift_out(1);\n@@ -1022,7 +1044,10 @@ impl LateBoundRegionsCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.current_index.shift_out(1);"}, {"sha": "29f82b47305ce98a70b7b3dc6af556a0a0a3bbc4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -359,7 +359,7 @@ impl ty::EarlyBoundRegion {\n \n #[derive(Debug)]\n crate struct PredicateInner<'tcx> {\n-    kind: Binder<PredicateKind<'tcx>>,\n+    kind: Binder<'tcx, PredicateKind<'tcx>>,\n     flags: TypeFlags,\n     /// See the comment for the corresponding field of [TyS].\n     outer_exclusive_binder: ty::DebruijnIndex,\n@@ -389,9 +389,9 @@ impl Hash for Predicate<'_> {\n impl<'tcx> Eq for Predicate<'tcx> {}\n \n impl<'tcx> Predicate<'tcx> {\n-    /// Gets the inner `Binder<PredicateKind<'tcx>>`.\n+    /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.\n     #[inline]\n-    pub fn kind(self) -> Binder<PredicateKind<'tcx>> {\n+    pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {\n         self.inner.kind\n     }\n }\n@@ -556,7 +556,7 @@ pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n }\n \n-pub type PolyTraitPredicate<'tcx> = ty::Binder<TraitPredicate<'tcx>>;\n+pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n     pub fn def_id(self) -> DefId {\n@@ -574,7 +574,7 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n         self.skip_binder().def_id()\n     }\n \n-    pub fn self_ty(self) -> ty::Binder<Ty<'tcx>> {\n+    pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {\n         self.map_bound(|trait_ref| trait_ref.self_ty())\n     }\n }\n@@ -584,8 +584,8 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;\n pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;\n-pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<RegionOutlivesPredicate<'tcx>>;\n-pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<TypeOutlivesPredicate<'tcx>>;\n+pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;\n+pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n@@ -594,7 +594,7 @@ pub struct SubtypePredicate<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n }\n-pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n+pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;\n \n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n@@ -615,7 +615,7 @@ pub struct ProjectionPredicate<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-pub type PolyProjectionPredicate<'tcx> = Binder<ProjectionPredicate<'tcx>>;\n+pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;\n \n impl<'tcx> PolyProjectionPredicate<'tcx> {\n     /// Returns the `DefId` of the trait of the associated item being projected.\n@@ -637,7 +637,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n         self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))\n     }\n \n-    pub fn ty(&self) -> Binder<Ty<'tcx>> {\n+    pub fn ty(&self) -> Binder<'tcx, Ty<'tcx>> {\n         self.map_bound(|predicate| predicate.ty)\n     }\n \n@@ -671,7 +671,7 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n-impl ToPredicate<'tcx> for Binder<PredicateKind<'tcx>> {\n+impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n@@ -694,11 +694,11 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        ConstnessAnd {\n-            value: self.value.map_bound(|trait_ref| ty::TraitPredicate { trait_ref }),\n-            constness: self.constness,\n-        }\n-        .to_predicate(tcx)\n+        self.value\n+            .map_bound(|trait_ref| {\n+                PredicateKind::Trait(ty::TraitPredicate { trait_ref }, self.constness)\n+            })\n+            .to_predicate(tcx)\n     }\n }\n "}, {"sha": "3b0cb8d421551702c3ca55393af89220c0c03ef5", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -38,7 +38,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// If you have a `Binder<T>`, you can do this to strip out the\n+    /// If you have a `Binder<'tcx, T>`, you can do this to strip out the\n     /// late-bound regions and then normalize the result, yielding up\n     /// a `T` (with regions erased). This is appropriate when the\n     /// binder is being instantiated at the call site.\n@@ -49,7 +49,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn normalize_erasing_late_bound_regions<T>(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: ty::Binder<T>,\n+        value: ty::Binder<'tcx, T>,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "13e2122a619dcf3bd097c8ad56cfd207c385c5bc", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -63,7 +63,7 @@ pub trait Printer<'tcx>: Sized {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error>;\n \n     fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error>;\n@@ -346,7 +346,7 @@ impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for Ty<'tcx> {\n }\n \n impl<'tcx, P: Printer<'tcx>> Print<'tcx, P>\n-    for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>\n+    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n {\n     type Output = P::DynExistential;\n     type Error = P::Error;"}, {"sha": "acb5c4741645ec0e936f99587dc547e845617498", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -202,7 +202,7 @@ pub trait PrettyPrinter<'tcx>:\n         self.print_def_path(def_id, substs)\n     }\n \n-    fn in_binder<T>(self, value: &ty::Binder<T>) -> Result<Self, Self::Error>\n+    fn in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, Self::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n     {\n@@ -211,7 +211,7 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn wrap_binder<T, F: Fn(&T, Self) -> Result<Self, fmt::Error>>(\n         self,\n-        value: &ty::Binder<T>,\n+        value: &ty::Binder<'tcx, T>,\n         f: F,\n     ) -> Result<Self, Self::Error>\n     where\n@@ -765,7 +765,7 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn pretty_print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         // Generate the main trait ref, including associated types.\n         let mut first = true;\n@@ -1432,7 +1432,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n     fn print_dyn_existential(\n         self,\n-        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         self.pretty_print_dyn_existential(predicates)\n     }\n@@ -1571,7 +1571,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         Ok(self)\n     }\n \n-    fn in_binder<T>(self, value: &ty::Binder<T>) -> Result<Self, Self::Error>\n+    fn in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, Self::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = Self::Error> + TypeFoldable<'tcx>,\n     {\n@@ -1580,7 +1580,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n     fn wrap_binder<T, C: Fn(&T, Self) -> Result<Self, Self::Error>>(\n         self,\n-        value: &ty::Binder<T>,\n+        value: &ty::Binder<'tcx, T>,\n         f: C,\n     ) -> Result<Self, Self::Error>\n     where\n@@ -1763,7 +1763,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     pub fn name_all_regions<T>(\n         mut self,\n-        value: &ty::Binder<T>,\n+        value: &ty::Binder<'tcx, T>,\n     ) -> Result<(Self, (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)), fmt::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n@@ -1830,7 +1830,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         Ok((self, new_value))\n     }\n \n-    pub fn pretty_in_binder<T>(self, value: &ty::Binder<T>) -> Result<Self, fmt::Error>\n+    pub fn pretty_in_binder<T>(self, value: &ty::Binder<'tcx, T>) -> Result<Self, fmt::Error>\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n@@ -1844,7 +1844,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n \n     pub fn pretty_wrap_binder<T, C: Fn(&T, Self) -> Result<Self, fmt::Error>>(\n         self,\n-        value: &ty::Binder<T>,\n+        value: &ty::Binder<'tcx, T>,\n         f: C,\n     ) -> Result<Self, fmt::Error>\n     where\n@@ -1858,7 +1858,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         Ok(inner)\n     }\n \n-    fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<T>)\n+    fn prepare_late_bound_region_info<T>(&mut self, value: &ty::Binder<'tcx, T>)\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -1879,7 +1879,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     }\n }\n \n-impl<'tcx, T, P: PrettyPrinter<'tcx>> Print<'tcx, P> for ty::Binder<T>\n+impl<'tcx, T, P: PrettyPrinter<'tcx>> Print<'tcx, P> for ty::Binder<'tcx, T>\n where\n     T: Print<'tcx, P, Output = P, Error = P::Error> + TypeFoldable<'tcx>,\n {\n@@ -1966,28 +1966,28 @@ impl ty::TraitRef<'tcx> {\n     }\n }\n \n-impl ty::Binder<ty::TraitRef<'tcx>> {\n-    pub fn print_only_trait_path(self) -> ty::Binder<TraitRefPrintOnlyTraitPath<'tcx>> {\n+impl ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n+    pub fn print_only_trait_path(self) -> ty::Binder<'tcx, TraitRefPrintOnlyTraitPath<'tcx>> {\n         self.map_bound(|tr| tr.print_only_trait_path())\n     }\n }\n \n forward_display_to_print! {\n     Ty<'tcx>,\n-    &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+    &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     &'tcx ty::Const<'tcx>,\n \n     // HACK(eddyb) these are exhaustive instead of generic,\n     // because `for<'tcx>` isn't possible yet.\n-    ty::Binder<ty::ExistentialPredicate<'tcx>>,\n-    ty::Binder<ty::TraitRef<'tcx>>,\n-    ty::Binder<TraitRefPrintOnlyTraitPath<'tcx>>,\n-    ty::Binder<ty::FnSig<'tcx>>,\n-    ty::Binder<ty::TraitPredicate<'tcx>>,\n-    ty::Binder<ty::SubtypePredicate<'tcx>>,\n-    ty::Binder<ty::ProjectionPredicate<'tcx>>,\n-    ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>>,\n-    ty::Binder<ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>>,\n+    ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>,\n+    ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+    ty::Binder<'tcx, TraitRefPrintOnlyTraitPath<'tcx>>,\n+    ty::Binder<'tcx, ty::FnSig<'tcx>>,\n+    ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n+    ty::Binder<'tcx, ty::SubtypePredicate<'tcx>>,\n+    ty::Binder<'tcx, ty::ProjectionPredicate<'tcx>>,\n+    ty::Binder<'tcx, ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>>,\n+    ty::Binder<'tcx, ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>>,\n \n     ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>,\n     ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>"}, {"sha": "ca60339da0d00b9d138030dcf8c444994e52eba8", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -93,9 +93,9 @@ pub trait TypeRelation<'tcx>: Sized {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>;\n }\n@@ -594,7 +594,7 @@ fn check_const_value_eq<R: TypeRelation<'tcx>>(\n     })\n }\n \n-impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>> {\n+impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Self,\n@@ -684,12 +684,12 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<T> {\n+impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>> {\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {\n         relation.binders(a, b)\n     }\n }"}, {"sha": "dd4bb029747213aa025e98707be0ab26dbf9e7b8", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -454,10 +454,14 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n     }\n }\n \n-impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n-    type Lifted = ty::Binder<T::Lifted>;\n+impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<'a, T>\n+where\n+    <T as Lift<'tcx>>::Lifted: TypeFoldable<'tcx>,\n+{\n+    type Lifted = ty::Binder<'tcx, T::Lifted>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        self.map_bound(|v| tcx.lift(v)).transpose()\n+        // FIXME: need to lift inner values\n+        tcx.lift(self.skip_binder()).map(|v| ty::Binder::bind(v))\n     }\n }\n \n@@ -749,7 +753,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.map_bound(|ty| ty.fold_with(folder))\n     }\n@@ -767,7 +771,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>> {\n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }"}, {"sha": "c6d72e78df83501f7ad1d5c9529f9194b9387ae8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -161,7 +161,7 @@ pub enum TyKind<'tcx> {\n     FnPtr(PolyFnSig<'tcx>),\n \n     /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.\n-    Dynamic(&'tcx List<Binder<ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n+    Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),\n \n     /// The anonymous type of a closure. Used to represent the type of\n     /// `|a| a`.\n@@ -173,7 +173,7 @@ pub enum TyKind<'tcx> {\n \n     /// A type representing the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors.\n-    GeneratorWitness(Binder<&'tcx List<Ty<'tcx>>>),\n+    GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),\n \n     /// The never type `!`.\n     Never,\n@@ -747,7 +747,7 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n+impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {\n         use crate::ty::ToPredicate;\n         match self.skip_binder() {\n@@ -768,7 +768,7 @@ impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> List<ty::Binder<ExistentialPredicate<'tcx>>> {\n+impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n     /// Returns the \"principal `DefId`\" of this set of existential predicates.\n     ///\n     /// A Rust trait object type consists (in addition to a lifetime bound)\n@@ -794,7 +794,7 @@ impl<'tcx> List<ty::Binder<ExistentialPredicate<'tcx>>> {\n     /// is `{Send, Sync}`, while there is no principal. These trait objects\n     /// have a \"trivial\" vtable consisting of just the size, alignment,\n     /// and destructor.\n-    pub fn principal(&self) -> Option<ty::Binder<ExistentialTraitRef<'tcx>>> {\n+    pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {\n         self[0]\n             .map_bound(|this| match this {\n                 ExistentialPredicate::Trait(tr) => Some(tr),\n@@ -810,7 +810,7 @@ impl<'tcx> List<ty::Binder<ExistentialPredicate<'tcx>>> {\n     #[inline]\n     pub fn projection_bounds<'a>(\n         &'a self,\n-    ) -> impl Iterator<Item = ty::Binder<ExistentialProjection<'tcx>>> + 'a {\n+    ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {\n         self.iter().filter_map(|predicate| {\n             predicate\n                 .map_bound(|pred| match pred {\n@@ -875,10 +875,10 @@ impl<'tcx> TraitRef<'tcx> {\n     }\n }\n \n-pub type PolyTraitRef<'tcx> = Binder<TraitRef<'tcx>>;\n+pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;\n \n impl<'tcx> PolyTraitRef<'tcx> {\n-    pub fn self_ty(&self) -> Binder<Ty<'tcx>> {\n+    pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {\n         self.map_bound_ref(|tr| tr.self_ty())\n     }\n \n@@ -931,7 +931,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n     }\n }\n \n-pub type PolyExistentialTraitRef<'tcx> = Binder<ExistentialTraitRef<'tcx>>;\n+pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;\n \n impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     pub fn def_id(&self) -> DefId {\n@@ -950,30 +950,30 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n /// Binder is a binder for higher-ranked lifetimes or types. It is part of the\n /// compiler's representation for things like `for<'a> Fn(&'a isize)`\n /// (which would be represented by the type `PolyTraitRef ==\n-/// Binder<TraitRef>`). Note that when we instantiate,\n+/// Binder<'tcx, TraitRef>`). Note that when we instantiate,\n /// erase, or otherwise \"discharge\" these bound vars, we change the\n-/// type from `Binder<T>` to just `T` (see\n+/// type from `Binder<'tcx, T>` to just `T` (see\n /// e.g., `liberate_late_bound_regions`).\n ///\n /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-pub struct Binder<T>(T, u32);\n+pub struct Binder<'tcx, T>(T, u32, std::marker::PhantomData<&'tcx ()>);\n \n-impl<'tcx, T> Binder<T>\n+impl<'tcx, T> Binder<'tcx, T>\n where\n     T: TypeFoldable<'tcx>,\n {\n     /// Wraps `value` in a binder, asserting that `value` does not\n     /// contain any bound vars that would be bound by the\n     /// binder. This is commonly used to 'inject' a value T into a\n     /// different binding level.\n-    pub fn dummy(value: T) -> Binder<T> {\n+    pub fn dummy(value: T) -> Binder<'tcx, T> {\n         debug_assert!(!value.has_escaping_bound_vars());\n-        Binder(value, 0)\n+        Binder(value, 0, std::marker::PhantomData)\n     }\n \n     /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n-    pub fn bind(value: T) -> Binder<T> {\n+    pub fn bind(value: T) -> Binder<'tcx, T> {\n         use crate::ty::fold::CountBoundVars;\n         use rustc_data_structures::fx::FxHashSet;\n         let mut counter = CountBoundVars {\n@@ -1006,11 +1006,11 @@ where\n         let bound_consts = counter.bound_consts.len();\n \n         let bound_vars = bound_tys + bound_regions + bound_consts;\n-        Binder(value, bound_vars as u32)\n+        Binder(value, bound_vars as u32, std::marker::PhantomData)\n     }\n }\n \n-impl<T> Binder<T> {\n+impl<'tcx, T> Binder<'tcx, T> {\n     /// Skips the binder and returns the \"bound\" value. This is a\n     /// risky thing to do because it's easy to get confused about\n     /// De Bruijn indices and the like. It is usually better to\n@@ -1035,22 +1035,22 @@ impl<T> Binder<T> {\n         self.1\n     }\n \n-    pub fn as_ref(&self) -> Binder<&T> {\n-        Binder(&self.0, self.1)\n+    pub fn as_ref(&self) -> Binder<'tcx, &T> {\n+        Binder(&self.0, self.1, std::marker::PhantomData)\n     }\n \n-    pub fn map_bound_ref<F, U>(&self, f: F) -> Binder<U>\n+    pub fn map_bound_ref<F, U>(&self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(&T) -> U,\n     {\n         self.as_ref().map_bound(f)\n     }\n \n-    pub fn map_bound<F, U>(self, f: F) -> Binder<U>\n+    pub fn map_bound<F, U>(self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(T) -> U,\n     {\n-        Binder(f(self.0), self.1)\n+        Binder(f(self.0), self.1, std::marker::PhantomData)\n     }\n \n     /// Wraps a `value` in a binder, using the same bound variables as the\n@@ -1062,8 +1062,8 @@ impl<T> Binder<T> {\n     /// don't actually track bound vars. However, semantically, it is different\n     /// because bound vars aren't allowed to change here, whereas they are\n     /// in `bind`. This may be (debug) asserted in the future.\n-    pub fn rebind<U>(&self, value: U) -> Binder<U> {\n-        Binder(value, self.1)\n+    pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U> {\n+        Binder(value, self.1, std::marker::PhantomData)\n     }\n \n     /// Unwraps and returns the value within, but only if it contains\n@@ -1076,7 +1076,7 @@ impl<T> Binder<T> {\n     /// binders, but that would require adjusting the debruijn\n     /// indices, and given the shallow binding structure we often use,\n     /// would not be that useful.)\n-    pub fn no_bound_vars<'tcx>(self) -> Option<T>\n+    pub fn no_bound_vars(self) -> Option<T>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -1090,11 +1090,11 @@ impl<T> Binder<T> {\n     /// `f` should consider bound regions at depth 1 to be free, and\n     /// anything it produces with bound regions at depth 1 will be\n     /// bound in the resulting return value.\n-    pub fn fuse<U, F, R>(self, u: Binder<U>, f: F) -> Binder<R>\n+    pub fn fuse<U, F, R>(self, u: Binder<'tcx, U>, f: F) -> Binder<'tcx, R>\n     where\n         F: FnOnce(T, U) -> R,\n     {\n-        Binder(f(self.0, u.0), self.1)\n+        Binder(f(self.0, u.0), self.1, std::marker::PhantomData)\n     }\n \n     /// Splits the contents into two things that share the same binder\n@@ -1103,19 +1103,19 @@ impl<T> Binder<T> {\n     /// `f` should consider bound regions at depth 1 to be free, and\n     /// anything it produces with bound regions at depth 1 will be\n     /// bound in the resulting return values.\n-    pub fn split<U, V, F>(self, f: F) -> (Binder<U>, Binder<V>)\n+    pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)\n     where\n         F: FnOnce(T) -> (U, V),\n     {\n         let (u, v) = f(self.0);\n-        (Binder(u, self.1), Binder(v, self.1))\n+        (Binder(u, self.1, std::marker::PhantomData), Binder(v, self.1, std::marker::PhantomData))\n     }\n }\n \n-impl<T> Binder<Option<T>> {\n-    pub fn transpose(self) -> Option<Binder<T>> {\n+impl<'tcx, T> Binder<'tcx, Option<T>> {\n+    pub fn transpose(self) -> Option<Binder<'tcx, T>> {\n         let bound_vars = self.1;\n-        self.0.map(|v| Binder(v, bound_vars))\n+        self.0.map(|v| Binder(v, bound_vars, std::marker::PhantomData))\n     }\n }\n \n@@ -1178,7 +1178,7 @@ pub struct GenSig<'tcx> {\n     pub return_ty: Ty<'tcx>,\n }\n \n-pub type PolyGenSig<'tcx> = Binder<GenSig<'tcx>>;\n+pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;\n \n /// Signature of a function type, which we have arbitrarily\n /// decided to use to refer to the input/output types.\n@@ -1216,22 +1216,22 @@ impl<'tcx> FnSig<'tcx> {\n     }\n }\n \n-pub type PolyFnSig<'tcx> = Binder<FnSig<'tcx>>;\n+pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;\n \n impl<'tcx> PolyFnSig<'tcx> {\n     #[inline]\n-    pub fn inputs(&self) -> Binder<&'tcx [Ty<'tcx>]> {\n+    pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs())\n     }\n     #[inline]\n-    pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> {\n+    pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])\n     }\n-    pub fn inputs_and_output(&self) -> ty::Binder<&'tcx List<Ty<'tcx>>> {\n+    pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {\n         self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)\n     }\n     #[inline]\n-    pub fn output(&self) -> ty::Binder<Ty<'tcx>> {\n+    pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {\n         self.map_bound_ref(|fn_sig| fn_sig.output())\n     }\n     pub fn c_variadic(&self) -> bool {\n@@ -1245,7 +1245,7 @@ impl<'tcx> PolyFnSig<'tcx> {\n     }\n }\n \n-pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n+pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n@@ -1489,7 +1489,7 @@ pub struct ExistentialProjection<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-pub type PolyExistentialProjection<'tcx> = Binder<ExistentialProjection<'tcx>>;\n+pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;\n \n impl<'tcx> ExistentialProjection<'tcx> {\n     /// Extracts the underlying existential trait reference from this projection."}, {"sha": "8352e8b4918f0db45e8ba9095b5d5947e2088ffd", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -448,7 +448,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: ty::Binder<T>) -> ty::Binder<T> {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: ty::Binder<'tcx, T>,\n+    ) -> ty::Binder<'tcx, T> {\n         self.binders_passed += 1;\n         let t = t.super_fold_with(self);\n         self.binders_passed -= 1;"}, {"sha": "be9ba56f0979873314462adbd93e6a5131c5df24", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n-    ) -> Option<ty::Binder<Ty<'tcx>>> {\n+    ) -> Option<ty::Binder<'tcx, Ty<'tcx>>> {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n         let br = ty::BoundRegion { kind: ty::BrEnv };\n         let env_region = ty::ReLateBound(ty::INNERMOST, br);"}, {"sha": "f295693781e75b1542dc52cafc51960d9486f17a", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -589,7 +589,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         &self,\n         indices: &UniversalRegionIndices<'tcx>,\n         defining_ty: DefiningTy<'tcx>,\n-    ) -> ty::Binder<&'tcx ty::List<Ty<'tcx>>> {\n+    ) -> ty::Binder<'tcx, &'tcx ty::List<Ty<'tcx>>> {\n         let tcx = self.infcx.tcx;\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n@@ -657,7 +657,7 @@ trait InferCtxtExt<'tcx> {\n         &self,\n         origin: NllRegionVariableOrigin,\n         all_outlive_scope: LocalDefId,\n-        value: ty::Binder<T>,\n+        value: ty::Binder<'tcx, T>,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) -> T\n     where\n@@ -686,7 +686,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         &self,\n         origin: NllRegionVariableOrigin,\n         all_outlive_scope: LocalDefId,\n-        value: ty::Binder<T>,\n+        value: ty::Binder<'tcx, T>,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) -> T\n     where"}, {"sha": "ae5e78ee33f472ef04eec379c512cb5997154fea", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         let mut first = true;\n         for p in predicates {"}, {"sha": "7d186c330ba3f51ad6eab2970ec77afed2771c1c", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -230,7 +230,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         let mut first = true;\n         for p in predicates {"}, {"sha": "0bb5dd117a02e9219586acdf460bb91e5d79c398", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -181,7 +181,7 @@ impl SymbolMangler<'tcx> {\n \n     fn in_binder<T>(\n         mut self,\n-        value: &ty::Binder<T>,\n+        value: &ty::Binder<'tcx, T>,\n         print_value: impl FnOnce(Self, &T) -> Result<Self, !>,\n     ) -> Result<Self, !>\n     where\n@@ -483,7 +483,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n \n     fn print_dyn_existential(\n         mut self,\n-        predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         for predicate in predicates {\n             self = self.in_binder(&predicate, |mut cx, predicate| {"}, {"sha": "b6c3768d8876a3a4e1cbbfccdd97eeb66c180971", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -697,7 +697,7 @@ where\n {\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n-        t: &ty::Binder<T>,\n+        t: &ty::Binder<'tcx, T>,\n     ) -> ControlFlow<Self::BreakTy> {\n         t.as_ref().skip_binder().visit_with(self);\n         ControlFlow::CONTINUE"}, {"sha": "326b85e1013d66c39fb2d2c5fb4105f519b80be6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -65,15 +65,15 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     );\n \n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool;\n@@ -82,14 +82,14 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     );\n \n     fn suggest_change_mut(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     );\n \n@@ -98,7 +98,7 @@ pub trait InferCtxtExt<'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         span: Span,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     );\n \n     fn return_type_span(&self, obligation: &PredicateObligation<'tcx>) -> Option<Span>;\n@@ -108,7 +108,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         span: Span,\n         obligation: &PredicateObligation<'tcx>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     ) -> bool;\n \n     fn point_at_returns_when_relevant(\n@@ -170,7 +170,7 @@ pub trait InferCtxtExt<'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         obligation: &PredicateObligation<'tcx>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         span: Span,\n     );\n }\n@@ -583,7 +583,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     ) {\n         let self_ty = match trait_ref.self_ty().no_bound_vars() {\n@@ -676,7 +676,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: &ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n         has_custom_message: bool,\n     ) -> bool {\n@@ -761,7 +761,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     ) {\n         let span = obligation.cause.span;\n \n@@ -824,7 +824,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     ) {\n         let span = obligation.cause.span;\n@@ -896,10 +896,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         obligation: &PredicateObligation<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         span: Span,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     ) {\n         let is_empty_tuple =\n-            |ty: ty::Binder<Ty<'_>>| *ty.skip_binder().kind() == ty::Tuple(ty::List::empty());\n+            |ty: ty::Binder<'tcx, Ty<'_>>| *ty.skip_binder().kind() == ty::Tuple(ty::List::empty());\n \n         let hir = self.tcx.hir();\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n@@ -948,7 +948,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         span: Span,\n         obligation: &PredicateObligation<'tcx>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     ) -> bool {\n         match obligation.cause.code.peel_derives() {\n             // Only suggest `impl Trait` if the return type is unsized because it is `dyn Trait`.\n@@ -2190,7 +2190,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         obligation: &PredicateObligation<'tcx>,\n-        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n         span: Span,\n     ) {\n         debug!("}, {"sha": "31685a012ca2f03dd290c9be9c93b1a6d524a9a4", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -272,7 +272,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         trait_def_id: DefId,\n-        nested: ty::Binder<Vec<Ty<'tcx>>>,\n+        nested: ty::Binder<'tcx, Vec<Ty<'tcx>>>,\n     ) -> ImplSourceAutoImplData<PredicateObligation<'tcx>> {\n         debug!(?nested, \"vtable_auto_impl\");\n         ensure_sufficient_stack(|| {"}, {"sha": "1c51597fff2a86f90a1207ed4646638f35a73673", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -204,7 +204,7 @@ struct EvaluatedCandidate<'tcx> {\n /// When does the builtin impl for `T: Trait` apply?\n enum BuiltinImplConditions<'tcx> {\n     /// The impl is conditional on `T1, T2, ...: Trait`.\n-    Where(ty::Binder<Vec<Ty<'tcx>>>),\n+    Where(ty::Binder<'tcx, Vec<Ty<'tcx>>>),\n     /// There is no built-in impl. There may be some other\n     /// candidate (a where-clause or user-defined impl).\n     None,\n@@ -1673,7 +1673,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]\n     /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]\n     /// ```\n-    fn constituent_types_for_ty(&self, t: ty::Binder<Ty<'tcx>>) -> ty::Binder<Vec<Ty<'tcx>>> {\n+    fn constituent_types_for_ty(\n+        &self,\n+        t: ty::Binder<'tcx, Ty<'tcx>>,\n+    ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {\n         match *t.skip_binder().kind() {\n             ty::Uint(_)\n             | ty::Int(_)\n@@ -1746,7 +1749,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         trait_def_id: DefId,\n-        types: ty::Binder<Vec<Ty<'tcx>>>,\n+        types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,\n     ) -> Vec<PredicateObligation<'tcx>> {\n         // Because the types were potentially derived from\n         // higher-ranked obligations they may reference late-bound\n@@ -1767,7 +1770,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .skip_binder() // binder moved -\\\n             .iter()\n             .flat_map(|ty| {\n-                let ty: ty::Binder<Ty<'tcx>> = types.rebind(ty); // <----/\n+                let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/\n \n                 self.infcx.commit_unconditionally(|_| {\n                     let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);"}, {"sha": "fd94f9f799847496580e1d330d1349555a195308", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -328,7 +328,7 @@ pub fn closure_trait_ref_and_return_type(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyFnSig<'tcx>,\n     tuple_arguments: TupleArgumentsFlag,\n-) -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>)> {\n+) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>)> {\n     let arguments_tuple = match tuple_arguments {\n         TupleArgumentsFlag::No => sig.skip_binder().inputs()[0],\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n@@ -346,7 +346,7 @@ pub fn generator_trait_ref_and_outputs(\n     fn_trait_def_id: DefId,\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n-) -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n+) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n     let trait_ref = ty::TraitRef {\n         def_id: fn_trait_def_id,"}, {"sha": "f592cf1cd249d0169a63c3fa8cebdc9c931811b1", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -704,7 +704,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n     fn from_object_ty(\n         &mut self,\n         ty: Ty<'tcx>,\n-        data: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        data: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n         region: ty::Region<'tcx>,\n     ) {\n         // Imagine a type like this:\n@@ -767,7 +767,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n /// `infer::required_region_bounds`, see that for more information.\n pub fn object_region_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    existential_predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+    existential_predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n ) -> Vec<ty::Region<'tcx>> {\n     // Since we don't actually *know* the self type for an object,\n     // this \"open(err)\" serves as a kind of dummy standin -- basically"}, {"sha": "f9de41ee8935e424fa86766fa8b64e79dbface85", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -606,7 +606,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n }\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<RustInterner<'tcx>>>>\n-    for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>\n+    for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>\n {\n     fn lower_into(\n         self,\n@@ -677,7 +677,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n     }\n }\n \n-impl<'tcx> LowerInto<'tcx, chalk_ir::FnSig<RustInterner<'tcx>>> for ty::Binder<ty::FnSig<'tcx>> {\n+impl<'tcx> LowerInto<'tcx, chalk_ir::FnSig<RustInterner<'tcx>>>\n+    for ty::Binder<'tcx, ty::FnSig<'tcx>>\n+{\n     fn lower_into(self, _interner: &RustInterner<'_>) -> FnSig<RustInterner<'tcx>> {\n         chalk_ir::FnSig {\n             abi: self.abi(),\n@@ -801,7 +803,7 @@ impl<'tcx> LowerInto<'tcx, chalk_solve::rust_ir::AliasEqBound<RustInterner<'tcx>\n crate fn collect_bound_vars<'tcx, T: TypeFoldable<'tcx>>(\n     interner: &RustInterner<'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    ty: Binder<T>,\n+    ty: Binder<'tcx, T>,\n ) -> (T, chalk_ir::VariableKinds<RustInterner<'tcx>>, BTreeMap<DefId, u32>) {\n     let mut bound_vars_collector = BoundVarsCollector::new();\n     ty.as_ref().skip_binder().visit_with(&mut bound_vars_collector);\n@@ -849,7 +851,10 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(\n+        &mut self,\n+        t: &Binder<'tcx, T>,\n+    ) -> ControlFlow<Self::BreakTy> {\n         self.binder_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.binder_index.shift_out(1);\n@@ -931,7 +936,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: Binder<T>) -> Binder<T> {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T> {\n         self.binder_index.shift_in(1);\n         let result = t.super_fold_with(self);\n         self.binder_index.shift_out(1);\n@@ -987,7 +992,7 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n         self.tcx\n     }\n \n-    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: Binder<T>) -> Binder<T> {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T> {\n         self.binder_index.shift_in(1);\n         let result = t.super_fold_with(self);\n         self.binder_index.shift_out(1);"}, {"sha": "1e19477170934e89161af0f5e97095636ea2749d", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -2450,7 +2450,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn compute_object_lifetime_bound(\n         &self,\n         span: Span,\n-        existential_predicates: &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'tcx>>>,\n+        existential_predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Option<ty::Region<'tcx>> // if None, use the default\n     {\n         let tcx = self.tcx();"}, {"sha": "5d2006407226304530509df458aa6819b374beb8", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -26,7 +26,7 @@ pub struct Bounds<'tcx> {\n     /// A list of region bounds on the (implicit) self type. So if you\n     /// had `T: 'a + 'b` this might would be a list `['a, 'b]` (but\n     /// the `T` is not explicitly included).\n-    pub region_bounds: Vec<(ty::Binder<ty::Region<'tcx>>, Span)>,\n+    pub region_bounds: Vec<(ty::Binder<'tcx, ty::Region<'tcx>>, Span)>,\n \n     /// A list of trait bounds. So if you had `T: Debug` this would be\n     /// `T: Debug`. Note that the self-type is explicit here."}, {"sha": "de6336b254b3f49c643b3a3dae72a387d076a1a2", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -354,9 +354,9 @@ impl TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n \n     fn binders<T>(\n         &mut self,\n-        a: ty::Binder<T>,\n-        b: ty::Binder<T>,\n-    ) -> RelateResult<'tcx, ty::Binder<T>>\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n     where\n         T: Relate<'tcx>,\n     {"}, {"sha": "901a874980ddfa6c64b1015263f70765ec397f8b", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         upcast_trait_refs.into_iter().next().unwrap()\n     }\n \n-    fn replace_bound_vars_with_fresh_vars<T>(&self, value: ty::Binder<T>) -> T\n+    fn replace_bound_vars_with_fresh_vars<T>(&self, value: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {"}, {"sha": "bfaf36e702fdbcbcca1f4b17e845a26abe52fe22", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62a49c3bb8e0c82ee40b482f08a21a65f90b874b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=62a49c3bb8e0c82ee40b482f08a21a65f90b874b", "patch": "@@ -1753,7 +1753,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///    region got replaced with the same variable, which requires a bit more coordination\n     ///    and/or tracking the substitution and\n     ///    so forth.\n-    fn erase_late_bound_regions<T>(&self, value: ty::Binder<T>) -> T\n+    fn erase_late_bound_regions<T>(&self, value: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {"}]}