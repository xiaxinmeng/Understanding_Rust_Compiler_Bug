{"sha": "25b7f10c781fae5682523c59a73c4c6b49c97091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YjdmMTBjNzgxZmFlNTY4MjUyM2M1OWE3M2M0YzZiNDljOTcwOTE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-15T05:35:19Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-15T05:38:39Z"}, "message": "Address review comments", "tree": {"sha": "a62b3d77530dc5113cb2b50f26aade5dfe277967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a62b3d77530dc5113cb2b50f26aade5dfe277967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b7f10c781fae5682523c59a73c4c6b49c97091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b7f10c781fae5682523c59a73c4c6b49c97091", "html_url": "https://github.com/rust-lang/rust/commit/25b7f10c781fae5682523c59a73c4c6b49c97091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b7f10c781fae5682523c59a73c4c6b49c97091/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0cb2796b99ea72fefd7d5759e097a6c529274a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0cb2796b99ea72fefd7d5759e097a6c529274a", "html_url": "https://github.com/rust-lang/rust/commit/0d0cb2796b99ea72fefd7d5759e097a6c529274a"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "827d902de02d1492ad6747b96d4d5434646b3bd1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25b7f10c781fae5682523c59a73c4c6b49c97091/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b7f10c781fae5682523c59a73c4c6b49c97091/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=25b7f10c781fae5682523c59a73c4c6b49c97091", "patch": "@@ -1195,11 +1195,9 @@ pub struct Resolver<'a> {\n     pub whitelisted_legacy_custom_derives: Vec<Name>,\n     pub found_unresolved_macro: bool,\n \n-    // List of macros that we need to warn about as being unused.\n-    // The bool is true if the macro is unused, and false if its used.\n-    // Setting a bool to false should be much faster than removing a single\n-    // element from a FxHashSet.\n-    unused_macros: FxHashMap<DefId, bool>,\n+    // List of crate local macros that we need to warn about as being unused.\n+    // Right now this only includes macro_rules! macros.\n+    unused_macros: FxHashSet<DefId>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n@@ -1406,7 +1404,7 @@ impl<'a> Resolver<'a> {\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n             found_unresolved_macro: false,\n-            unused_macros: FxHashMap(),\n+            unused_macros: FxHashSet(),\n         }\n     }\n "}, {"sha": "231d30cd2a22decfdd8729f4f68f46dfa16fe305", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25b7f10c781fae5682523c59a73c4c6b49c97091/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b7f10c781fae5682523c59a73c4c6b49c97091/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=25b7f10c781fae5682523c59a73c4c6b49c97091", "patch": "@@ -291,24 +291,24 @@ impl<'a> base::Resolver for Resolver<'a> {\n             },\n         };\n         self.macro_defs.insert(invoc.expansion_data.mark, def.def_id());\n-        self.unused_macros.get_mut(&def.def_id()).map(|m| *m = false);\n+        self.unused_macros.remove(&def.def_id());\n         Ok(Some(self.get_macro(def)))\n     }\n \n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {\n         self.resolve_macro_to_def(scope, path, kind, force).map(|def| {\n-            self.unused_macros.get_mut(&def.def_id()).map(|m| *m = false);\n+            self.unused_macros.remove(&def.def_id());\n             self.get_macro(def)\n         })\n     }\n \n     fn check_unused_macros(&self) {\n-        for (did, _) in self.unused_macros.iter().filter(|&(_, b)| *b) {\n+        for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n-                           SyntaxExtension::NormalTT(_, isp, _) => isp,\n-                           _ => None\n-                       };\n+                SyntaxExtension::NormalTT(_, isp, _) => isp,\n+                _ => None,\n+            };\n             if let Some((id, span)) = id_span {\n                 let lint = lint::builtin::UNUSED_MACROS;\n                 let msg = \"unused macro definition\".to_string();\n@@ -708,7 +708,7 @@ impl<'a> Resolver<'a> {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             self.macro_exports.push(Export { name: ident.name, def: def, span: item.span });\n         } else {\n-            self.unused_macros.insert(def_id, true);\n+            self.unused_macros.insert(def_id);\n         }\n     }\n "}, {"sha": "39a60e5c0801062f7d7e635dd9af84343f636df6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25b7f10c781fae5682523c59a73c4c6b49c97091/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b7f10c781fae5682523c59a73c4c6b49c97091/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=25b7f10c781fae5682523c59a73c4c6b49c97091", "patch": "@@ -252,11 +252,9 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         valid: valid,\n     });\n \n-    NormalTT(\n-             exp,\n+    NormalTT(exp,\n              Some((def.id, def.span)),\n-             attr::contains_name(&def.attrs, \"allow_internal_unstable\")\n-    )\n+             attr::contains_name(&def.attrs, \"allow_internal_unstable\"))\n }\n \n fn check_lhs_nt_follows(sess: &ParseSess,"}]}