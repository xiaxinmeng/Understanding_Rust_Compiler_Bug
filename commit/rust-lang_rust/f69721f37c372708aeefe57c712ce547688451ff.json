{"sha": "f69721f37c372708aeefe57c712ce547688451ff", "node_id": "C_kwDOAAsO6NoAKGY2OTcyMWYzN2MzNzI3MDhhZWVmZTU3YzcxMmNlNTQ3Njg4NDUxZmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T19:14:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-09T19:14:24Z"}, "message": "Auto merge of #7950 - Serial-ATA:issue-7920, r=llogiq\n\nFix `explicit_counter_loop` suggestion for non-usize types\n\nchangelog: Add a new suggestion for non-usize types in [`explicit_counter_loop`]\n\ncloses: #7920", "tree": {"sha": "b2c5e5519539dc4eb85ec63d7b731c4729bce38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c5e5519539dc4eb85ec63d7b731c4729bce38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69721f37c372708aeefe57c712ce547688451ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69721f37c372708aeefe57c712ce547688451ff", "html_url": "https://github.com/rust-lang/rust/commit/f69721f37c372708aeefe57c712ce547688451ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69721f37c372708aeefe57c712ce547688451ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94d62b15379217afb23bb02eed736c8048943f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94d62b15379217afb23bb02eed736c8048943f1", "html_url": "https://github.com/rust-lang/rust/commit/c94d62b15379217afb23bb02eed736c8048943f1"}, {"sha": "680923491a85044c79a66e1727116ad474ccb8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/680923491a85044c79a66e1727116ad474ccb8cb", "html_url": "https://github.com/rust-lang/rust/commit/680923491a85044c79a66e1727116ad474ccb8cb"}], "stats": {"total": 180, "additions": 145, "deletions": 35}, "files": [{"sha": "bf9326b2901dc2a7c970047aff7083fa626ad058", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f69721f37c372708aeefe57c712ce547688451ff/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69721f37c372708aeefe57c712ce547688451ff/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=f69721f37c372708aeefe57c712ce547688451ff", "patch": "@@ -1,14 +1,15 @@\n use super::{\n     get_span_of_entire_for_loop, make_iterator_snippet, IncrementVisitor, InitializeVisitor, EXPLICIT_COUNTER_LOOP,\n };\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{get_enclosing_block, is_integer_const};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr};\n use rustc_hir::{Expr, Pat};\n use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, UintTy};\n \n // To trigger the EXPLICIT_COUNTER_LOOP lint, a variable must be\n // incremented exactly once in the loop body, and initialized to zero\n@@ -32,26 +33,61 @@ pub(super) fn check<'tcx>(\n             walk_block(&mut initialize_visitor, block);\n \n             if_chain! {\n-                if let Some((name, initializer)) = initialize_visitor.get_result();\n+                if let Some((name, ty, initializer)) = initialize_visitor.get_result();\n                 if is_integer_const(cx, initializer, 0);\n                 then {\n                     let mut applicability = Applicability::MachineApplicable;\n \n                     let for_span = get_span_of_entire_for_loop(expr);\n \n-                    span_lint_and_sugg(\n+                    let int_name = match ty.map(ty::TyS::kind) {\n+                        // usize or inferred\n+                        Some(ty::Uint(UintTy::Usize)) | None => {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                EXPLICIT_COUNTER_LOOP,\n+                                for_span.with_hi(arg.span.hi()),\n+                                &format!(\"the variable `{}` is used as a loop counter\", name),\n+                                \"consider using\",\n+                                format!(\n+                                    \"for ({}, {}) in {}.enumerate()\",\n+                                    name,\n+                                    snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n+                                    make_iterator_snippet(cx, arg, &mut applicability),\n+                                ),\n+                                applicability,\n+                            );\n+                            return;\n+                        }\n+                        Some(ty::Int(int_ty)) => int_ty.name_str(),\n+                        Some(ty::Uint(uint_ty)) => uint_ty.name_str(),\n+                        _ => return,\n+                    };\n+\n+                    span_lint_and_then(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n                         for_span.with_hi(arg.span.hi()),\n                         &format!(\"the variable `{}` is used as a loop counter\", name),\n-                        \"consider using\",\n-                        format!(\n-                            \"for ({}, {}) in {}.enumerate()\",\n-                            name,\n-                            snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                            make_iterator_snippet(cx, arg, &mut applicability),\n-                        ),\n-                        applicability,\n+                        |diag| {\n+                            diag.span_suggestion(\n+                                for_span.with_hi(arg.span.hi()),\n+                                \"consider using\",\n+                                format!(\n+                                    \"for ({}, {}) in (0_{}..).zip({})\",\n+                                    name,\n+                                    snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n+                                    int_name,\n+                                    make_iterator_snippet(cx, arg, &mut applicability),\n+                                ),\n+                                applicability,\n+                            );\n+\n+                            diag.note(&format!(\n+                                \"`{}` is of type `{}`, making it ineligible for `Iterator::enumerate`\",\n+                                name, int_name\n+                            ));\n+                        },\n                     );\n                 }\n             }"}, {"sha": "f6a673f71355a622fa27e8a38d29b9a5f032d9b5", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f69721f37c372708aeefe57c712ce547688451ff/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69721f37c372708aeefe57c712ce547688451ff/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=f69721f37c372708aeefe57c712ce547688451ff", "patch": "@@ -442,7 +442,7 @@ fn get_loop_counters<'a, 'tcx>(\n                 let mut initialize_visitor = InitializeVisitor::new(cx, expr, var_id);\n                 walk_block(&mut initialize_visitor, block);\n \n-                initialize_visitor.get_result().map(|(_, initializer)| Start {\n+                initialize_visitor.get_result().map(|(_, _, initializer)| Start {\n                     id: var_id,\n                     kind: StartKind::Counter { initializer },\n                 })"}, {"sha": "c1e367b344ade71ff8c01377e3a122939f2bdcc0", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 52, "deletions": 22, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f69721f37c372708aeefe57c712ce547688451ff/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69721f37c372708aeefe57c712ce547688451ff/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=f69721f37c372708aeefe57c712ce547688451ff", "patch": "@@ -1,14 +1,17 @@\n use clippy_utils::ty::{has_iter_method, implements_trait};\n use clippy_utils::{get_parent_expr, is_integer_const, path_to_local, path_to_local_id, sugg};\n use if_chain::if_chain;\n+use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n-use rustc_hir::intravisit::{walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n-use rustc_hir::HirIdMap;\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, Stmt, StmtKind};\n+use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::ty::Ty;\n use rustc_span::source_map::Span;\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_typeck::hir_ty_to_ty;\n use std::iter::Iterator;\n \n #[derive(Debug, PartialEq)]\n@@ -106,10 +109,11 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n }\n \n enum InitializeVisitorState<'hir> {\n-    Initial,          // Not examined yet\n-    Declared(Symbol), // Declared but not (yet) initialized\n+    Initial,                            // Not examined yet\n+    Declared(Symbol, Option<Ty<'hir>>), // Declared but not (yet) initialized\n     Initialized {\n         name: Symbol,\n+        ty: Option<Ty<'hir>>,\n         initializer: &'hir Expr<'hir>,\n     },\n     DontWarn,\n@@ -138,9 +142,9 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub(super) fn get_result(&self) -> Option<(Symbol, &'tcx Expr<'tcx>)> {\n-        if let InitializeVisitorState::Initialized { name, initializer } = self.state {\n-            Some((name, initializer))\n+    pub(super) fn get_result(&self) -> Option<(Symbol, Option<Ty<'tcx>>, &'tcx Expr<'tcx>)> {\n+        if let InitializeVisitorState::Initialized { name, ty, initializer } = self.state {\n+            Some((name, ty, initializer))\n         } else {\n             None\n         }\n@@ -150,22 +154,25 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n+    fn visit_local(&mut self, l: &'tcx Local<'_>) {\n         // Look for declarations of the variable\n         if_chain! {\n-            if let StmtKind::Local(local) = stmt.kind;\n-            if local.pat.hir_id == self.var_id;\n-            if let PatKind::Binding(.., ident, _) = local.pat.kind;\n+            if l.pat.hir_id == self.var_id;\n+            if let PatKind::Binding(.., ident, _) = l.pat.kind;\n             then {\n-                self.state = local.init.map_or(InitializeVisitorState::Declared(ident.name), |init| {\n+                let ty = l.ty.map(|ty| hir_ty_to_ty(self.cx.tcx, ty));\n+\n+                self.state = l.init.map_or(InitializeVisitorState::Declared(ident.name, ty), |init| {\n                     InitializeVisitorState::Initialized {\n                         initializer: init,\n+                        ty,\n                         name: ident.name,\n                     }\n                 })\n             }\n         }\n-        walk_stmt(self, stmt);\n+\n+        walk_local(self, l);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n@@ -195,15 +202,38 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                         self.state = InitializeVisitorState::DontWarn;\n                     },\n                     ExprKind::Assign(lhs, rhs, _) if lhs.hir_id == expr.hir_id => {\n-                        self.state = if_chain! {\n-                            if self.depth == 0;\n-                            if let InitializeVisitorState::Declared(name)\n-                                | InitializeVisitorState::Initialized { name, ..} = self.state;\n-                            then {\n-                                InitializeVisitorState::Initialized { initializer: rhs, name }\n-                            } else {\n-                                InitializeVisitorState::DontWarn\n+                        self.state = if self.depth == 0 {\n+                            match self.state {\n+                                InitializeVisitorState::Declared(name, mut ty) => {\n+                                    if ty.is_none() {\n+                                        if let ExprKind::Lit(Spanned {\n+                                            node: LitKind::Int(_, LitIntType::Unsuffixed),\n+                                            ..\n+                                        }) = rhs.kind\n+                                        {\n+                                            ty = None;\n+                                        } else {\n+                                            ty = self.cx.typeck_results().expr_ty_opt(rhs);\n+                                        }\n+                                    }\n+\n+                                    InitializeVisitorState::Initialized {\n+                                        initializer: rhs,\n+                                        ty,\n+                                        name,\n+                                    }\n+                                },\n+                                InitializeVisitorState::Initialized { ty, name, .. } => {\n+                                    InitializeVisitorState::Initialized {\n+                                        initializer: rhs,\n+                                        ty,\n+                                        name,\n+                                    }\n+                                },\n+                                _ => InitializeVisitorState::DontWarn,\n                             }\n+                        } else {\n+                            InitializeVisitorState::DontWarn\n                         }\n                     },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {"}, {"sha": "aa966761febdf949406deb52b388dd12441c28dd", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f69721f37c372708aeefe57c712ce547688451ff/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69721f37c372708aeefe57c712ce547688451ff/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=f69721f37c372708aeefe57c712ce547688451ff", "patch": "@@ -158,3 +158,33 @@ mod issue_4677 {\n         }\n     }\n }\n+\n+mod issue_7920 {\n+    pub fn test() {\n+        let slice = &[1, 2, 3];\n+\n+        let index_usize: usize = 0;\n+        let mut idx_usize: usize = 0;\n+\n+        // should suggest `enumerate`\n+        for _item in slice {\n+            if idx_usize == index_usize {\n+                break;\n+            }\n+\n+            idx_usize += 1;\n+        }\n+\n+        let index_u32: u32 = 0;\n+        let mut idx_u32: u32 = 0;\n+\n+        // should suggest `zip`\n+        for _item in slice {\n+            if idx_u32 == index_u32 {\n+                break;\n+            }\n+\n+            idx_u32 += 1;\n+        }\n+    }\n+}"}, {"sha": "9edddea651c26f01c12b1a7f774dafa0098d77ec", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f69721f37c372708aeefe57c712ce547688451ff/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f69721f37c372708aeefe57c712ce547688451ff/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=f69721f37c372708aeefe57c712ce547688451ff", "patch": "@@ -42,5 +42,19 @@ error: the variable `count` is used as a loop counter\n LL |         for _i in 3..10 {\n    |         ^^^^^^^^^^^^^^^ help: consider using: `for (count, _i) in (3..10).enumerate()`\n \n-error: aborting due to 7 previous errors\n+error: the variable `idx_usize` is used as a loop counter\n+  --> $DIR/explicit_counter_loop.rs:170:9\n+   |\n+LL |         for _item in slice {\n+   |         ^^^^^^^^^^^^^^^^^^ help: consider using: `for (idx_usize, _item) in slice.into_iter().enumerate()`\n+\n+error: the variable `idx_u32` is used as a loop counter\n+  --> $DIR/explicit_counter_loop.rs:182:9\n+   |\n+LL |         for _item in slice {\n+   |         ^^^^^^^^^^^^^^^^^^ help: consider using: `for (idx_u32, _item) in (0_u32..).zip(slice.into_iter())`\n+   |\n+   = note: `idx_u32` is of type `u32`, making it ineligible for `Iterator::enumerate`\n+\n+error: aborting due to 9 previous errors\n "}]}