{"sha": "d76daf5c616f7969752e5370287f4495b95fe00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NmRhZjVjNjE2Zjc5Njk3NTJlNTM3MDI4N2Y0NDk1Yjk1ZmUwMGM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-15T21:43:11Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-04-04T04:08:00Z"}, "message": "rebased", "tree": {"sha": "286e9101deb35000ee966d53d43f1fad140a26aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/286e9101deb35000ee966d53d43f1fad140a26aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d76daf5c616f7969752e5370287f4495b95fe00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d76daf5c616f7969752e5370287f4495b95fe00c", "html_url": "https://github.com/rust-lang/rust/commit/d76daf5c616f7969752e5370287f4495b95fe00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d76daf5c616f7969752e5370287f4495b95fe00c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccdbb31a4773fcb44d046f02a822e54dfe132970", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccdbb31a4773fcb44d046f02a822e54dfe132970", "html_url": "https://github.com/rust-lang/rust/commit/ccdbb31a4773fcb44d046f02a822e54dfe132970"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "44615071a56a71eb87e495b03b3907ddb91bcc30", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d76daf5c616f7969752e5370287f4495b95fe00c/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d76daf5c616f7969752e5370287f4495b95fe00c/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d76daf5c616f7969752e5370287f4495b95fe00c", "patch": "@@ -125,6 +125,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         match item.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Fn);\n+                filter!(self.span_utils, sub_span, item.span, None);\n                 Some(Data::FunctionData(FunctionData {\n                     id: item.id,\n                     name: item.ident.to_string(),\n@@ -137,11 +138,13 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base_extern(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ForeignItemKind::Static(ref ty, m) => {\n                 let keyword = if m { keywords::Mut } else { keywords::Static };\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keyword);\n+                filter!(self.span_utils, sub_span, item.span, None);\n                 Some(Data::VariableData(VariableData {\n                     id: item.id,\n                     kind: VariableKind::Static,\n@@ -155,6 +158,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base_extern(item)),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n         }\n@@ -797,7 +801,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let ident_start = text.find(&name).expect(\"Name not in signature?\");\n         let ident_end = ident_start + name.len();\n         Signature {\n-            span: mk_sp(item.span.lo, item.span.lo + BytePos(text.len() as u32)),\n+            span: Span { hi: item.span.lo + BytePos(text.len() as u32), ..item.span },\n             text: text,\n             ident_start: ident_start,\n             ident_end: ident_end,"}]}