{"sha": "d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZmEwMTFmNjJlZTBjM2IyNTZkMGJlOWE2OTM2OWNiY2ViM2M0NWI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-30T01:15:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-08-08T02:02:45Z"}, "message": "Remove some unnecessary uses of `Option`.\n\nThese arguments are never `None`.", "tree": {"sha": "2e20bc8af49756a1c5d2115d4b672c05b85a109e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e20bc8af49756a1c5d2115d4b672c05b85a109e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "html_url": "https://github.com/rust-lang/rust/commit/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a9de9b08659e20ce7c282ed77bc43ddd149107", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a9de9b08659e20ce7c282ed77bc43ddd149107", "html_url": "https://github.com/rust-lang/rust/commit/f3a9de9b08659e20ce7c282ed77bc43ddd149107"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "ddf8fc23779db56b45777a1cddd0c92449779d74", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "patch": "@@ -86,7 +86,7 @@ pub enum UnwindAttr {\n }\n \n /// Determine what `#[unwind]` attribute is present in `attrs`, if any.\n-pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Option<UnwindAttr> {\n+pub fn find_unwind_attr(diagnostic: &Handler, attrs: &[Attribute]) -> Option<UnwindAttr> {\n     attrs.iter().fold(None, |ia, attr| {\n         if attr.check_name(sym::unwind) {\n             if let Some(meta) = attr.meta() {\n@@ -99,19 +99,22 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n                         }\n                     }\n \n-                    if let Some(d) = diagnostic {\n-                        struct_span_err!(d, attr.span, E0633, \"malformed `unwind` attribute input\")\n-                            .span_label(attr.span, \"invalid argument\")\n-                            .span_suggestions(\n-                                attr.span,\n-                                \"the allowed arguments are `allowed` and `aborts`\",\n-                                (vec![\"allowed\", \"aborts\"])\n-                                    .into_iter()\n-                                    .map(|s| format!(\"#[unwind({})]\", s)),\n-                                Applicability::MachineApplicable,\n-                            )\n-                            .emit();\n-                    };\n+                    struct_span_err!(\n+                        diagnostic,\n+                        attr.span,\n+                        E0633,\n+                        \"malformed `unwind` attribute input\"\n+                    )\n+                    .span_label(attr.span, \"invalid argument\")\n+                    .span_suggestions(\n+                        attr.span,\n+                        \"the allowed arguments are `allowed` and `aborts`\",\n+                        (vec![\"allowed\", \"aborts\"])\n+                            .into_iter()\n+                            .map(|s| format!(\"#[unwind({})]\", s)),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n                 }\n             }\n         }"}, {"sha": "cc954cee9077d8df50e6cd1e52810f42506a15f5", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "patch": "@@ -677,7 +677,7 @@ impl RustcDefaultCalls {\n                     let t_outputs = rustc_interface::util::build_output_filenames(\n                         input, odir, ofile, attrs, sess,\n                     );\n-                    let id = rustc_session::output::find_crate_name(Some(sess), attrs, input);\n+                    let id = rustc_session::output::find_crate_name(sess, attrs, input);\n                     if *req == PrintRequest::CrateName {\n                         println!(\"{}\", id);\n                         continue;"}, {"sha": "4ee8cb34cc0e672b3dc5536ed4617015a73e5894", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "patch": "@@ -159,7 +159,7 @@ impl<'tcx> Queries<'tcx> {\n                 None => {\n                     let parse_result = self.parse()?;\n                     let krate = parse_result.peek();\n-                    find_crate_name(Some(self.session()), &krate.attrs, &self.compiler.input)\n+                    find_crate_name(self.session(), &krate.attrs, &self.compiler.input)\n                 }\n             })\n         })"}, {"sha": "16748c42d300f8335cd1a3b04314c1d1d9f75edf", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "patch": "@@ -895,7 +895,7 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 let name = match orig_name {\n                     Some(orig_name) => {\n-                        validate_crate_name(Some(self.sess), &orig_name.as_str(), Some(item.span));\n+                        validate_crate_name(self.sess, &orig_name.as_str(), Some(item.span));\n                         orig_name\n                     }\n                     None => item.ident.name,"}, {"sha": "3894472e7d503ad2b50005842e7731013648f6f6", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "patch": "@@ -537,7 +537,7 @@ macro_rules! unpack {\n fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, _abi: Abi) -> bool {\n     // Validate `#[unwind]` syntax regardless of platform-specific panic strategy.\n     let attrs = &tcx.get_attrs(fn_def_id.to_def_id());\n-    let unwind_attr = attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs);\n+    let unwind_attr = attr::find_unwind_attr(tcx.sess.diagnostic(), attrs);\n \n     // We never unwind, so it's not relevant to stop an unwind.\n     if tcx.sess.panic_strategy() != PanicStrategy::Unwind {"}, {"sha": "994f06a7c6e03c81ca93743a04cac3314ab5885a", "filename": "src/librustc_session/output.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_session%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fa011f62ee0c3b256d0be9a69369cbceb3c45b/src%2Flibrustc_session%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foutput.rs?ref=d6fa011f62ee0c3b256d0be9a69369cbceb3c45b", "patch": "@@ -45,7 +45,7 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input: &Input) -> String {\n+pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n         validate_crate_name(sess, &s, span);\n         s\n@@ -58,25 +58,24 @@ pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input:\n     let attr_crate_name =\n         attr::find_by_name(attrs, sym::crate_name).and_then(|at| at.value_str().map(|s| (at, s)));\n \n-    if let Some(sess) = sess {\n-        if let Some(ref s) = sess.opts.crate_name {\n-            if let Some((attr, name)) = attr_crate_name {\n-                if name.as_str() != *s {\n-                    let msg = format!(\n-                        \"`--crate-name` and `#[crate_name]` are \\\n-                                       required to match, but `{}` != `{}`\",\n-                        s, name\n-                    );\n-                    sess.span_err(attr.span, &msg);\n-                }\n+    if let Some(ref s) = sess.opts.crate_name {\n+        if let Some((attr, name)) = attr_crate_name {\n+            if name.as_str() != *s {\n+                let msg = format!(\n+                    \"`--crate-name` and `#[crate_name]` are \\\n+                                   required to match, but `{}` != `{}`\",\n+                    s, name\n+                );\n+                sess.span_err(attr.span, &msg);\n             }\n-            return validate(s.clone(), None);\n         }\n+        return validate(s.clone(), None);\n     }\n \n     if let Some((attr, s)) = attr_crate_name {\n         return validate(s.to_string(), Some(attr.span));\n     }\n+\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n@@ -85,9 +84,7 @@ pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input:\n                                    `{}` has a leading hyphen\",\n                     s\n                 );\n-                if let Some(sess) = sess {\n-                    sess.err(&msg);\n-                }\n+                sess.err(&msg);\n             } else {\n                 return validate(s.replace(\"-\", \"_\"), None);\n             }\n@@ -97,14 +94,13 @@ pub fn find_crate_name(sess: Option<&Session>, attrs: &[ast::Attribute], input:\n     \"rust_out\".to_string()\n }\n \n-pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n+pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n     let mut err_count = 0;\n     {\n         let mut say = |s: &str| {\n-            match (sp, sess) {\n-                (_, None) => panic!(\"{}\", s),\n-                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-                (None, Some(sess)) => sess.err(s),\n+            match sp {\n+                Some(sp) => sess.span_err(sp, s),\n+                None => sess.err(s),\n             }\n             err_count += 1;\n         };\n@@ -123,7 +119,7 @@ pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n     }\n \n     if err_count > 0 {\n-        sess.unwrap().abort_if_errors();\n+        sess.abort_if_errors();\n     }\n }\n "}]}