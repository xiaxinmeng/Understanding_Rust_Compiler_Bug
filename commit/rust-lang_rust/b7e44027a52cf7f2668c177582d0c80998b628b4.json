{"sha": "b7e44027a52cf7f2668c177582d0c80998b628b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTQ0MDI3YTUyY2Y3ZjI2NjhjMTc3NTgyZDBjODA5OThiNjI4YjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T03:27:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-01T03:27:42Z"}, "message": "Auto merge of #53762 - flip1995:tool_lints, r=Manishearth\n\nBackwards compatibility for tool/clippy lints\n\ncc #44690\ncc https://github.com/rust-lang-nursery/rust-clippy/pull/2977#issuecomment-409706557\n\nThis is the next step towards `tool_lints`.\n\nThis makes Clippy lints still work without scoping, but will warn and suggest the new scoped name. This warning will only appear if the code is checked with Clippy itself.\n\nThere is still an issue with using the old lint name in inner attributes. For inner attributes the warning gets emitted twice. I'm currently not really sure why this happens, but will try to fix this ASAP.\n\nr? @Manishearth", "tree": {"sha": "545360d16dc67d8d6fc506dd937ef54e5c143a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/545360d16dc67d8d6fc506dd937ef54e5c143a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e44027a52cf7f2668c177582d0c80998b628b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e44027a52cf7f2668c177582d0c80998b628b4", "html_url": "https://github.com/rust-lang/rust/commit/b7e44027a52cf7f2668c177582d0c80998b628b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e44027a52cf7f2668c177582d0c80998b628b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a59da5af0cadf478d8ab9e1725fa367fb19cd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a59da5af0cadf478d8ab9e1725fa367fb19cd2", "html_url": "https://github.com/rust-lang/rust/commit/06a59da5af0cadf478d8ab9e1725fa367fb19cd2"}, {"sha": "9cbe5182168e3240234ab368b6d26242cfb42029", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbe5182168e3240234ab368b6d26242cfb42029", "html_url": "https://github.com/rust-lang/rust/commit/9cbe5182168e3240234ab368b6d26242cfb42029"}], "stats": {"total": 282, "additions": 231, "deletions": 51}, "files": [{"sha": "d5247b4ce9de85b68b7543ed19dafa09e656cc46", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 81, "deletions": 19, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -67,9 +67,10 @@ pub struct LintStore {\n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n \n-    /// Map of registered lint groups to what lints they expand to. The bool\n-    /// is true if the lint group was added by a plugin.\n-    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool)>,\n+    /// Map of registered lint groups to what lints they expand to. The first\n+    /// bool is true if the lint group was added by a plugin. The optional string\n+    /// is used to store the new names of deprecated lint group names.\n+    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool, Option<&'static str>)>,\n \n     /// Extra info for future incompatibility lints, describing the\n     /// issue or RFC that caused the incompatibility.\n@@ -138,7 +139,7 @@ pub enum CheckLintNameResult<'a> {\n     /// compiled with the tool and therefore the lint was never\n     /// added to the `LintStore`. Otherwise the `LintId` will be\n     /// returned as if it where a rustc lint.\n-    Tool(Option<&'a [LintId]>),\n+    Tool(Result<&'a [LintId], (Option<&'a [LintId]>, String)>),\n }\n \n impl LintStore {\n@@ -221,7 +222,7 @@ impl LintStore {\n             let lints = lints.iter().filter(|f| f.edition == Some(*edition)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {\n-                self.register_group(sess, false, edition.lint_name(), lints)\n+                self.register_group(sess, false, edition.lint_name(), None, lints)\n             }\n         }\n \n@@ -231,19 +232,35 @@ impl LintStore {\n             self.future_incompatible.insert(lint.id, lint);\n         }\n \n-        self.register_group(sess, false, \"future_incompatible\", future_incompatible);\n-\n-\n+        self.register_group(\n+            sess,\n+            false,\n+            \"future_incompatible\",\n+            None,\n+            future_incompatible,\n+        );\n     }\n \n     pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n         self.future_incompatible.get(&id)\n     }\n \n-    pub fn register_group(&mut self, sess: Option<&Session>,\n-                          from_plugin: bool, name: &'static str,\n-                          to: Vec<LintId>) {\n-        let new = self.lint_groups.insert(name, (to, from_plugin)).is_none();\n+    pub fn register_group(\n+        &mut self,\n+        sess: Option<&Session>,\n+        from_plugin: bool,\n+        name: &'static str,\n+        deprecated_name: Option<&'static str>,\n+        to: Vec<LintId>,\n+    ) {\n+        let new = self\n+            .lint_groups\n+            .insert(name, (to, from_plugin, None))\n+            .is_none();\n+        if let Some(deprecated) = deprecated_name {\n+            self.lint_groups\n+                .insert(deprecated, (vec![], from_plugin, Some(name)));\n+        }\n \n         if !new {\n             let msg = format!(\"duplicate specification of lint group {}\", name);\n@@ -336,34 +353,79 @@ impl LintStore {\n         } else {\n             lint_name.to_string()\n         };\n+        // If the lint was scoped with `tool::` check if the tool lint exists\n         if let Some(_) = tool_name {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n-                    None => return CheckLintNameResult::Tool(None),\n-                    Some(ids) => return CheckLintNameResult::Tool(Some(&ids.0)),\n+                    None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n+                    Some(ids) => return CheckLintNameResult::Tool(Ok(&ids.0)),\n                 },\n-                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Some(slice::from_ref(id))),\n+                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Ok(slice::from_ref(id))),\n                 // If the lint was registered as removed or renamed by the lint tool, we don't need\n                 // to treat tool_lints and rustc lints different and can use the code below.\n                 _ => {}\n             }\n         }\n         match self.by_name.get(&complete_name) {\n             Some(&Renamed(ref new_name, _)) => CheckLintNameResult::Warning(\n-                format!(\"lint `{}` has been renamed to `{}`\", lint_name, new_name),\n+                format!(\n+                    \"lint `{}` has been renamed to `{}`\",\n+                    complete_name, new_name\n+                ),\n                 Some(new_name.to_owned()),\n             ),\n             Some(&Removed(ref reason)) => CheckLintNameResult::Warning(\n-                format!(\"lint `{}` has been removed: `{}`\", lint_name, reason),\n+                format!(\"lint `{}` has been removed: `{}`\", complete_name, reason),\n                 None,\n             ),\n             None => match self.lint_groups.get(&*complete_name) {\n-                None => CheckLintNameResult::NoLint,\n-                Some(ids) => CheckLintNameResult::Ok(&ids.0),\n+                // If neither the lint, nor the lint group exists check if there is a `clippy::`\n+                // variant of this lint\n+                None => self.check_tool_name_for_backwards_compat(&complete_name, \"clippy\"),\n+                Some(ids) => {\n+                    // Check if the lint group name is deprecated\n+                    if let Some(new_name) = ids.2 {\n+                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n+                        return CheckLintNameResult::Tool(Err((\n+                            Some(&lint_ids.0),\n+                            new_name.to_string(),\n+                        )));\n+                    }\n+                    CheckLintNameResult::Ok(&ids.0)\n+                }\n             },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n         }\n     }\n+\n+    fn check_tool_name_for_backwards_compat(\n+        &self,\n+        lint_name: &str,\n+        tool_name: &str,\n+    ) -> CheckLintNameResult {\n+        let complete_name = format!(\"{}::{}\", tool_name, lint_name);\n+        match self.by_name.get(&complete_name) {\n+            None => match self.lint_groups.get(&*complete_name) {\n+                // Now we are sure, that this lint exists nowhere\n+                None => CheckLintNameResult::NoLint,\n+                Some(ids) => {\n+                    // Reaching this would be weird, but lets cover this case anyway\n+                    if let Some(new_name) = ids.2 {\n+                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n+                        return CheckLintNameResult::Tool(Err((\n+                            Some(&lint_ids.0),\n+                            new_name.to_string(),\n+                        )));\n+                    }\n+                    CheckLintNameResult::Tool(Err((Some(&ids.0), complete_name)))\n+                }\n+            },\n+            Some(&Id(ref id)) => {\n+                CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n+            }\n+            _ => CheckLintNameResult::NoLint,\n+        }\n+    }\n }\n \n /// Context for lint checking after type checking."}, {"sha": "336ebe79d33abd7276eb6d20f6f427be9f82b04b", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -231,12 +231,13 @@ impl<'a> LintLevelsBuilder<'a> {\n                     let gate_feature = !self.sess.features_untracked().tool_lints;\n                     let known_tool = attr::is_known_lint_tool(lint_tool);\n                     if gate_feature {\n-                        feature_gate::emit_feature_err(&sess.parse_sess,\n-                                                       \"tool_lints\",\n-                                                       word.span,\n-                                                       feature_gate::GateIssue::Language,\n-                                                       &format!(\"scoped lint `{}` is experimental\",\n-                                                                word.ident));\n+                        feature_gate::emit_feature_err(\n+                            &sess.parse_sess,\n+                            \"tool_lints\",\n+                            word.span,\n+                            feature_gate::GateIssue::Language,\n+                            &format!(\"scoped lint `{}` is experimental\", word.ident),\n+                        );\n                     }\n                     if !known_tool {\n                         span_err!(\n@@ -249,7 +250,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                     }\n \n                     if gate_feature || !known_tool {\n-                        continue\n+                        continue;\n                     }\n \n                     Some(lint_tool.as_str())\n@@ -266,17 +267,52 @@ impl<'a> LintLevelsBuilder<'a> {\n                     }\n \n                     CheckLintNameResult::Tool(result) => {\n-                        if let Some(ids) = result {\n-                            let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n-                            let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n-                            for id in ids {\n-                                specs.insert(*id, (level, src));\n+                        match result {\n+                            Ok(ids) => {\n+                                let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                                let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n+                                for id in ids {\n+                                    specs.insert(*id, (level, src));\n+                                }\n+                            }\n+                            Err((Some(ids), new_lint_name)) => {\n+                                let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n+                                let (lvl, src) =\n+                                    self.sets\n+                                        .get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                                let msg = format!(\n+                                    \"lint name `{}` is deprecated \\\n+                                     and may not have an effect in the future. \\\n+                                     Also `cfg_attr(cargo-clippy)` won't be necessary anymore\",\n+                                    name\n+                                );\n+                                let mut err = lint::struct_lint_level(\n+                                    self.sess,\n+                                    lint,\n+                                    lvl,\n+                                    src,\n+                                    Some(li.span.into()),\n+                                    &msg,\n+                                );\n+                                err.span_suggestion_with_applicability(\n+                                    li.span,\n+                                    \"change it to\",\n+                                    new_lint_name.to_string(),\n+                                    Applicability::MachineApplicable,\n+                                ).emit();\n+\n+                                let src = LintSource::Node(Symbol::intern(&new_lint_name), li.span);\n+                                for id in ids {\n+                                    specs.insert(*id, (level, src));\n+                                }\n+                            }\n+                            Err((None, _)) => {\n+                                // If Tool(Err(None, _)) is returned, then either the lint does not\n+                                // exist in the tool or the code was not compiled with the tool and\n+                                // therefore the lint was never added to the `LintStore`. To detect\n+                                // this is the responsibility of the lint tool.\n                             }\n                         }\n-                        // If Tool(None) is returned, then either the lint does not exist in the\n-                        // tool or the code was not compiled with the tool and therefore the lint\n-                        // was never added to the `LintStore`. To detect this is the responsibility\n-                        // of the lint tool.\n                     }\n \n                     _ if !self.warn_about_weird_lints => {}"}, {"sha": "c6344cb921044fa9d7e8e76687130fb6fda4fa61", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -924,8 +924,8 @@ where\n             ls.register_late_pass(Some(sess), true, pass);\n         }\n \n-        for (name, to) in lint_groups {\n-            ls.register_group(Some(sess), true, name, to);\n+        for (name, (to, deprecated_name)) in lint_groups {\n+            ls.register_group(Some(sess), true, name, deprecated_name, to);\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;"}, {"sha": "46c5b0092a271e8d0caba276bc8ed45a4767c36a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -105,7 +105,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     macro_rules! add_lint_group {\n         ($sess:ident, $name:expr, $($lint:ident),*) => (\n-            store.register_group($sess, false, $name, vec![$(LintId::of($lint)),*]);\n+            store.register_group($sess, false, $name, None, vec![$(LintId::of($lint)),*]);\n             )\n     }\n "}, {"sha": "6c10ac7ea5ceaf230f7b449f877237a37b9785ca", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -53,7 +53,7 @@ pub struct Registry<'a> {\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n     #[doc(hidden)]\n-    pub lint_groups: FxHashMap<&'static str, Vec<LintId>>,\n+    pub lint_groups: FxHashMap<&'static str, (Vec<LintId>, Option<&'static str>)>,\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n@@ -170,8 +170,15 @@ impl<'a> Registry<'a> {\n         self.late_lint_passes.push(lint_pass);\n     }\n     /// Register a lint group.\n-    pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) {\n-        self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n+    pub fn register_lint_group(\n+        &mut self,\n+        name: &'static str,\n+        deprecated_name: Option<&'static str>,\n+        to: Vec<&'static Lint>\n+    ) {\n+        self.lint_groups.insert(name,\n+                                (to.into_iter().map(|x| LintId::of(x)).collect(),\n+                                 deprecated_name));\n     }\n \n     /// Register an LLVM pass."}, {"sha": "082f15a39dd955254c7b94b62ef41ef0eeb9f295", "filename": "src/test/compile-fail-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -49,5 +49,5 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box Pass);\n-    reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n+    reg.register_lint_group(\"lint_me\", None, vec![TEST_LINT, PLEASE_LINT]);\n }"}, {"sha": "082f15a39dd955254c7b94b62ef41ef0eeb9f295", "filename": "src/test/ui-fulldeps/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_group_plugin_test.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -49,5 +49,5 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box Pass);\n-    reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n+    reg.register_lint_group(\"lint_me\", None, vec![TEST_LINT, PLEASE_LINT]);\n }"}, {"sha": "e184c0919d0ecf333fc94177986d761eeb128bb2", "filename": "src/test/ui-fulldeps/auxiliary/lint_tool_test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -25,12 +25,13 @@ use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n use rustc_plugin::Registry;\n use syntax::ast;\n declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n+declare_tool_lint!(pub clippy::TEST_GROUP, Warn, \"Warn about other stuff\");\n \n struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(TEST_LINT)\n+        lint_array!(TEST_LINT, TEST_GROUP)\n     }\n }\n \n@@ -39,10 +40,14 @@ impl EarlyLintPass for Pass {\n         if it.ident.name == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n         }\n+        if it.ident.name == \"lintmetoo\" {\n+            cx.span_lint(TEST_GROUP, it.span, \"item is named 'lintmetoo'\");\n+        }\n     }\n }\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box Pass);\n+    reg.register_lint_group(\"clippy::group\", Some(\"clippy_group\"), vec![TEST_LINT, TEST_GROUP]);\n }"}, {"sha": "ebe10b3714f20fecf91988379b59d6d24e8f6710", "filename": "src/test/ui-fulldeps/lint_tool_test.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -8,17 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-pass\n // aux-build:lint_tool_test.rs\n // ignore-stage1\n+// compile-flags: --cfg foo\n #![feature(plugin)]\n #![feature(tool_lints)]\n #![plugin(lint_tool_test)]\n #![allow(dead_code)]\n+#![cfg_attr(foo, warn(test_lint))]\n+//~^ WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n+//~^^ WARNING lint name `test_lint` is deprecated and may not have an effect in the future\n+#![deny(clippy_group)]\n+//~^ WARNING lint name `clippy_group` is deprecated and may not have an effect in the future\n \n-fn lintme() { } //~ WARNING item is named 'lintme'\n+fn lintme() { } //~ ERROR item is named 'lintme'\n+\n+#[allow(clippy::group)]\n+fn lintmetoo() {}\n \n #[allow(clippy::test_lint)]\n pub fn main() {\n     fn lintme() { }\n+    fn lintmetoo() { } //~ ERROR item is named 'lintmetoo'\n+}\n+\n+#[allow(test_group)]\n+//~^ WARNING lint name `test_group` is deprecated and may not have an effect in the future\n+#[deny(this_lint_does_not_exist)] //~ WARNING unknown lint: `this_lint_does_not_exist`\n+fn hello() {\n+    fn lintmetoo() { }\n }"}, {"sha": "ab0c317e1cd0f4ef78ab86e203c5a00bd6f3f791", "filename": "src/test/ui-fulldeps/lint_tool_test.stderr", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7e44027a52cf7f2668c177582d0c80998b628b4/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -1,8 +1,62 @@\n-warning: item is named 'lintme'\n-  --> $DIR/lint_tool_test.rs:19:1\n+warning: lint name `test_lint` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint_tool_test.rs:18:23\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | #![cfg_attr(foo, warn(test_lint))]\n+   |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n+   |\n+   = note: #[warn(renamed_and_removed_lints)] on by default\n+\n+warning: lint name `clippy_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint_tool_test.rs:21:9\n+   |\n+LL | #![deny(clippy_group)]\n+   |         ^^^^^^^^^^^^ help: change it to: `clippy::group`\n+\n+warning: lint name `test_group` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint_tool_test.rs:35:9\n+   |\n+LL | #[allow(test_group)]\n+   |         ^^^^^^^^^^ help: change it to: `clippy::test_group`\n+\n+warning: unknown lint: `this_lint_does_not_exist`\n+  --> $DIR/lint_tool_test.rs:37:8\n+   |\n+LL | #[deny(this_lint_does_not_exist)] //~ WARNING unknown lint: `this_lint_does_not_exist`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(unknown_lints)] on by default\n+\n+warning: lint name `test_lint` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n+  --> $DIR/lint_tool_test.rs:18:23\n+   |\n+LL | #![cfg_attr(foo, warn(test_lint))]\n+   |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n+\n+error: item is named 'lintme'\n+  --> $DIR/lint_tool_test.rs:24:1\n+   |\n+LL | fn lintme() { } //~ ERROR item is named 'lintme'\n    | ^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(clippy::test_lint)] on by default\n+note: lint level defined here\n+  --> $DIR/lint_tool_test.rs:21:9\n+   |\n+LL | #![deny(clippy_group)]\n+   |         ^^^^^^^^^^^^\n+   = note: #[deny(clippy::test_lint)] implied by #[deny(clippy::group)]\n+\n+error: item is named 'lintmetoo'\n+  --> $DIR/lint_tool_test.rs:32:5\n+   |\n+LL |     fn lintmetoo() { } //~ ERROR item is named 'lintmetoo'\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint_tool_test.rs:21:9\n+   |\n+LL | #![deny(clippy_group)]\n+   |         ^^^^^^^^^^^^\n+   = note: #[deny(clippy::test_group)] implied by #[deny(clippy::group)]\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "9abf6fca9c7288cb3bb99c0f7627f94b7930ee98", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=b7e44027a52cf7f2668c177582d0c80998b628b4", "patch": "@@ -1 +1 @@\n-Subproject commit d99cea0f16633556871a59500c610782b07233b9\n+Subproject commit 9abf6fca9c7288cb3bb99c0f7627f94b7930ee98"}]}