{"sha": "16dd5737b07dca728d5b16a1722fd72fc9f9880d", "node_id": "C_kwDOAAsO6NoAKDE2ZGQ1NzM3YjA3ZGNhNzI4ZDViMTZhMTcyMmZkNzJmYzlmOTg4MGQ", "commit": {"author": {"name": "Ryan Lopopolo", "email": "rjl@hyperbo.la", "date": "2022-09-01T05:14:40Z"}, "committer": {"name": "Ryan Lopopolo", "email": "rjl@hyperbo.la", "date": "2022-10-20T02:17:32Z"}, "message": "Add default trait implementations for \"c-unwind\" ABI function pointers\n\nFollowing up on #92964, only add default trait implementations for the\n`c-unwind` family of function pointers. The previous attempt in #92964\nadded trait implementations for many more ABIs and ran into concerns\nregarding the increase in size of the libcore rlib.\n\nAn attempt to abstract away function pointer types behind a unified\ntrait to reduce the duplication of trait impls is being discussed in #99531\nbut this change looks to be blocked on a lang MCP.\n\nFollowing @RalfJung's suggestion in\nhttps://github.com/rust-lang/rust/pull/99531#issuecomment-1233440142,\nthis commit is another cut at #92964 but it _only_ adds the impls for\n`extern \"C-unwind\" fn` and `unsafe extern \"C-unwind\" fn`.\n\nI am interested in landing this patch to unblock the stabilization of\nthe `c_unwind` feature.\n\nRFC: https://github.com/rust-lang/rfcs/pull/2945\nTracking Issue: https://github.com/rust-lang/rust/issues/74990", "tree": {"sha": "57715aa1467944f145caa3f90d1a19db42a5a654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57715aa1467944f145caa3f90d1a19db42a5a654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16dd5737b07dca728d5b16a1722fd72fc9f9880d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEtUt7P6UGaZlFry5uRgR9c5tq4LEFAmNQr7wACgkQRgR9c5tq\n4LHySw//WK6sbtj3mtVLw6qez9sBNyflhHmLpjQ5B3LLzpRjMGWtOAV6HyzjYJB4\nqjxOj1dhA+JzLbF0Mlr2XPyIt+PLOG21WyRq/IDIX/n5vkhjrUuK2ThfFUTlIQJl\ncAAzZcpWSrEFdW5RCEGXDQgYALGicI/h0jyrumODYztOE5Ak1LFhmEhBv3c8rUUZ\nZJJk8BSzXWzyRxTpbWBb15rQGl99ShVyo0U28DyES0S32XjwjcR4lRgDx/v9v1Cc\nBIikChYWGVuIyw8bTZwJHDEXdFQ4gfTW2qRIuqSzrwBKa6XYd9jZmvyiW/fH9AEh\nNgkNgEGmsUafh4AS2+CDsjFHZXSdLqijBHs2TOwsxq1Cpphw1PIRh2mITqEl5l0Q\n2e+wSjx2lpCx8eNXnoUR7fQB2Cb/e0oUohycBlUB1yphstDelZUA+WhYqTP6UQ6v\nRgBNlI5hF51Sgv6qxkv6huUBzbZm6u1RfvaDu0gibPMcXdMIX12FdljEgbx8S2kr\nkgoRdJCsQ3ZGJ2f7GvsQvIadfbHeqdJ5fFgLth8d6+4CsaPPkYS4JGNiKByHdy39\n5VOXAEhh1dFIpGtXpW1c2ngbcKaf1cYEyJIp45uPbiSeMzsyEuR3KwP/6lkbIapL\nH7285rAFSiBTTtxmC/GZMm7Y28cega54nVSRF152R1CC58nXUik=\n=pvkd\n-----END PGP SIGNATURE-----", "payload": "tree 57715aa1467944f145caa3f90d1a19db42a5a654\nparent 57781b24c54f9548722927ba88c343ff28da94ce\nauthor Ryan Lopopolo <rjl@hyperbo.la> 1662009280 -0700\ncommitter Ryan Lopopolo <rjl@hyperbo.la> 1666232252 -0700\n\nAdd default trait implementations for \"c-unwind\" ABI function pointers\n\nFollowing up on #92964, only add default trait implementations for the\n`c-unwind` family of function pointers. The previous attempt in #92964\nadded trait implementations for many more ABIs and ran into concerns\nregarding the increase in size of the libcore rlib.\n\nAn attempt to abstract away function pointer types behind a unified\ntrait to reduce the duplication of trait impls is being discussed in #99531\nbut this change looks to be blocked on a lang MCP.\n\nFollowing @RalfJung's suggestion in\nhttps://github.com/rust-lang/rust/pull/99531#issuecomment-1233440142,\nthis commit is another cut at #92964 but it _only_ adds the impls for\n`extern \"C-unwind\" fn` and `unsafe extern \"C-unwind\" fn`.\n\nI am interested in landing this patch to unblock the stabilization of\nthe `c_unwind` feature.\n\nRFC: https://github.com/rust-lang/rfcs/pull/2945\nTracking Issue: https://github.com/rust-lang/rust/issues/74990\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16dd5737b07dca728d5b16a1722fd72fc9f9880d", "html_url": "https://github.com/rust-lang/rust/commit/16dd5737b07dca728d5b16a1722fd72fc9f9880d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16dd5737b07dca728d5b16a1722fd72fc9f9880d/comments", "author": {"login": "lopopolo", "id": 860434, "node_id": "MDQ6VXNlcjg2MDQzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/860434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopopolo", "html_url": "https://github.com/lopopolo", "followers_url": "https://api.github.com/users/lopopolo/followers", "following_url": "https://api.github.com/users/lopopolo/following{/other_user}", "gists_url": "https://api.github.com/users/lopopolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopopolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopopolo/subscriptions", "organizations_url": "https://api.github.com/users/lopopolo/orgs", "repos_url": "https://api.github.com/users/lopopolo/repos", "events_url": "https://api.github.com/users/lopopolo/events{/privacy}", "received_events_url": "https://api.github.com/users/lopopolo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lopopolo", "id": 860434, "node_id": "MDQ6VXNlcjg2MDQzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/860434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lopopolo", "html_url": "https://github.com/lopopolo", "followers_url": "https://api.github.com/users/lopopolo/followers", "following_url": "https://api.github.com/users/lopopolo/following{/other_user}", "gists_url": "https://api.github.com/users/lopopolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lopopolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lopopolo/subscriptions", "organizations_url": "https://api.github.com/users/lopopolo/orgs", "repos_url": "https://api.github.com/users/lopopolo/repos", "events_url": "https://api.github.com/users/lopopolo/events{/privacy}", "received_events_url": "https://api.github.com/users/lopopolo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57781b24c54f9548722927ba88c343ff28da94ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/57781b24c54f9548722927ba88c343ff28da94ce", "html_url": "https://github.com/rust-lang/rust/commit/57781b24c54f9548722927ba88c343ff28da94ce"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "9cbfbbb9f399c67432f8243d2dd218509d3eec21", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16dd5737b07dca728d5b16a1722fd72fc9f9880d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dd5737b07dca728d5b16a1722fd72fc9f9880d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=16dd5737b07dca728d5b16a1722fd72fc9f9880d", "patch": "@@ -174,6 +174,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n+#![feature(c_unwind)]\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]"}, {"sha": "eb95651973738ec0072d640ec42961f05929ea94", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16dd5737b07dca728d5b16a1722fd72fc9f9880d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16dd5737b07dca728d5b16a1722fd72fc9f9880d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=16dd5737b07dca728d5b16a1722fd72fc9f9880d", "patch": "@@ -1938,16 +1938,22 @@ macro_rules! fnptr_impls_args {\n         fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n     };\n     () => {\n         // No variadic functions with 0 parameters\n         fnptr_impls_safety_abi! { extern \"Rust\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { extern \"C\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { extern \"C-unwind\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { unsafe extern \"C-unwind\" fn() -> Ret, }\n     };\n }\n "}]}