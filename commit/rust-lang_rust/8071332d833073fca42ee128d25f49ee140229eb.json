{"sha": "8071332d833073fca42ee128d25f49ee140229eb", "node_id": "C_kwDOAAsO6NoAKDgwNzEzMzJkODMzMDczZmNhNDJlZTEyOGQyNWY0OWVlMTQwMjI5ZWI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-03-29T10:09:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-03-29T10:09:42Z"}, "message": "Merge ItemKind::TyMethodItem branch with ItemKind::FunctionItem and ItemKind::MethodItem in fn_header function", "tree": {"sha": "740241175ee3906deb3f4b41585bcc6ac90e6bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740241175ee3906deb3f4b41585bcc6ac90e6bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8071332d833073fca42ee128d25f49ee140229eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8071332d833073fca42ee128d25f49ee140229eb", "html_url": "https://github.com/rust-lang/rust/commit/8071332d833073fca42ee128d25f49ee140229eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8071332d833073fca42ee128d25f49ee140229eb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd48ea02af40768f4ee9a3656c6a4c1d10e381f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd48ea02af40768f4ee9a3656c6a4c1d10e381f3", "html_url": "https://github.com/rust-lang/rust/commit/fd48ea02af40768f4ee9a3656c6a4c1d10e381f3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "957faec30e1fc1a38c4fca76dcae34f3cd9ece50", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8071332d833073fca42ee128d25f49ee140229eb/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8071332d833073fca42ee128d25f49ee140229eb/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8071332d833073fca42ee128d25f49ee140229eb", "patch": "@@ -646,6 +646,20 @@ impl Item {\n \n     /// Returns a `FnHeader` if `self` is a function item, otherwise returns `None`.\n     crate fn fn_header(&self, tcx: TyCtxt<'_>) -> Option<hir::FnHeader> {\n+        fn build_fn_header(\n+            def_id: DefId,\n+            tcx: TyCtxt<'_>,\n+            asyncness: hir::IsAsync,\n+        ) -> hir::FnHeader {\n+            let sig = tcx.fn_sig(def_id);\n+            let constness =\n+                if tcx.is_const_fn(def_id) && is_unstable_const_fn(tcx, def_id).is_none() {\n+                    hir::Constness::Const\n+                } else {\n+                    hir::Constness::NotConst\n+                };\n+            hir::FnHeader { unsafety: sig.unsafety(), abi: sig.abi(), constness, asyncness }\n+        }\n         let header = match *self.kind {\n             ItemKind::ForeignFunctionItem(_) => {\n                 let abi = tcx.fn_sig(self.def_id.as_def_id().unwrap()).abi();\n@@ -662,24 +676,10 @@ impl Item {\n             }\n             ItemKind::FunctionItem(_) | ItemKind::MethodItem(_, _) => {\n                 let def_id = self.def_id.as_def_id().unwrap();\n-                let sig = tcx.fn_sig(def_id);\n-                let constness =\n-                    if tcx.is_const_fn(def_id) && is_unstable_const_fn(tcx, def_id).is_none() {\n-                        hir::Constness::Const\n-                    } else {\n-                        hir::Constness::NotConst\n-                    };\n-                let asyncness = tcx.asyncness(def_id);\n-                hir::FnHeader { unsafety: sig.unsafety(), abi: sig.abi(), constness, asyncness }\n+                build_fn_header(def_id, tcx, tcx.asyncness(def_id))\n             }\n             ItemKind::TyMethodItem(_) => {\n-                let sig = tcx.fn_sig(self.def_id.as_def_id().unwrap());\n-                hir::FnHeader {\n-                    unsafety: sig.unsafety(),\n-                    abi: sig.abi(),\n-                    constness: hir::Constness::NotConst,\n-                    asyncness: hir::IsAsync::NotAsync,\n-                }\n+                build_fn_header(self.def_id.as_def_id().unwrap(), tcx, hir::IsAsync::NotAsync)\n             }\n             _ => return None,\n         };"}]}