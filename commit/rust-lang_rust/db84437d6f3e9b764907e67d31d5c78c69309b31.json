{"sha": "db84437d6f3e9b764907e67d31d5c78c69309b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODQ0MzdkNmYzZTliNzY0OTA3ZTY3ZDMxZDVjNzhjNjkzMDliMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T11:27:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T11:27:15Z"}, "message": "qualify ast types with `ast::`\n\nBy convention, ast nodes should always be used as `ast::FnDef`. This\nis to avoid confusion with similarly-named hir types.", "tree": {"sha": "983a31a82fdc2e9e7694ff718dbfd434c4196587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983a31a82fdc2e9e7694ff718dbfd434c4196587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db84437d6f3e9b764907e67d31d5c78c69309b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db84437d6f3e9b764907e67d31d5c78c69309b31", "html_url": "https://github.com/rust-lang/rust/commit/db84437d6f3e9b764907e67d31d5c78c69309b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db84437d6f3e9b764907e67d31d5c78c69309b31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6dce23a7d1a87617939fb9bd61a4d65933cef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6dce23a7d1a87617939fb9bd61a4d65933cef5", "html_url": "https://github.com/rust-lang/rust/commit/df6dce23a7d1a87617939fb9bd61a4d65933cef5"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "735f3166c5669ddeba6de581c0fca0936c8dab2b", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db84437d6f3e9b764907e67d31d5c78c69309b31/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db84437d6f3e9b764907e67d31d5c78c69309b31/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=db84437d6f3e9b764907e67d31d5c78c69309b31", "patch": "@@ -2,11 +2,8 @@ use crate::{db::RootDatabase, FileId};\n use hir::{HirDisplay, SourceAnalyzer, Ty};\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    ast::{\n-        self, AstNode, ForExpr, IfExpr, LambdaExpr, LetStmt, MatchArmList, SourceFile,\n-        TypeAscriptionOwner, WhileExpr,\n-    },\n-    SmolStr, SyntaxKind, SyntaxNode, TextRange,\n+    ast::{self, AstNode, TypeAscriptionOwner},\n+    SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -35,15 +32,15 @@ fn get_inlay_hints(\n     node: &SyntaxNode,\n ) -> Option<Vec<InlayHint>> {\n     visitor()\n-        .visit(|let_statement: LetStmt| {\n+        .visit(|let_statement: ast::LetStmt| {\n             if let_statement.ascribed_type().is_some() {\n                 return None;\n             }\n             let pat = let_statement.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, let_statement.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n-        .visit(|closure_parameter: LambdaExpr| {\n+        .visit(|closure_parameter: ast::LambdaExpr| {\n             let analyzer = SourceAnalyzer::new(db, file_id, closure_parameter.syntax(), None);\n             closure_parameter.param_list().map(|param_list| {\n                 param_list\n@@ -55,22 +52,22 @@ fn get_inlay_hints(\n                     .collect()\n             })\n         })\n-        .visit(|for_expression: ForExpr| {\n+        .visit(|for_expression: ast::ForExpr| {\n             let pat = for_expression.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, for_expression.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n-        .visit(|if_expr: IfExpr| {\n+        .visit(|if_expr: ast::IfExpr| {\n             let pat = if_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, if_expr.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n-        .visit(|while_expr: WhileExpr| {\n+        .visit(|while_expr: ast::WhileExpr| {\n             let pat = while_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, while_expr.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n-        .visit(|match_arm_list: MatchArmList| {\n+        .visit(|match_arm_list: ast::MatchArmList| {\n             let analyzer = SourceAnalyzer::new(db, file_id, match_arm_list.syntax(), None);\n             Some(\n                 match_arm_list"}]}