{"sha": "a61ebac367a5021c95a69d823a156318a88516e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MWViYWMzNjdhNTAyMWM5NWE2OWQ4MjNhMTU2MzE4YTg4NTE2ZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-12T09:55:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-12T09:55:02Z"}, "message": "Rollup merge of #57417 - QuietMisdreavus:semi-revert-doctest-parsing, r=GuillaumeGomez\n\nrustdoc: use text-based doctest parsing if a macro is wrapping main\n\nThis is a \"forward-port\" of https://github.com/rust-lang/rust/pull/57019, intended to get https://github.com/rust-lang/rust/issues/56898 on nightly, since it's now fixed on beta (and already worked on stable).\n\nTo recap:\n\n* The libsyntax-based doctest parsing now checks to see whether there is a top-level macro invocation in the doctest while it's checking for `fn main` and an `extern crate` statement.\n* If it finds a macro invocation and *didn't* find `fn main`, then it performs the older text-based scan to allow doctests like the ones in `allocator_api` to still compile.\n\nA \"proper\" fix will involve changing how `make_test` works to call it later in the `run_test` function, after the initial steps of compilation have completed. I've filed [a separate issue](https://github.com/rust-lang/rust/issues/57415) for that, though.", "tree": {"sha": "7d47ef66a8733aff99cc460a125a97698e89de70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d47ef66a8733aff99cc460a125a97698e89de70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61ebac367a5021c95a69d823a156318a88516e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcObl2CRBK7hj4Ov3rIwAAdHIIAKSv7vpaB0TycQy5QqKF1q7F\n0Fwn8IJqFmPEa6rUb9BhXaNtuPHlC/gnZfkVghk8x2nNzr3ZeIHhXkbAI7EEk1z0\nMlK9StTVYVDfJbRHZ4dpUpEtzzDFL990nL2iOT8KNjYbUtm0neyIFzPvU03Igm/I\nvFR8EJNUbayzmVWHe55g36BsE7N9rT5aaC/DJvxrJLqEuSKG1ZkrO/NPSHQ3Tzid\n4Nh8vAu/UEUHIvYTTbKkdbb69gJ01s5wZ2QQztUIGqkzoGG1Ev6hHhM/r4aAg3OP\nxRfAmeiNuEm0ARtJObYTCOnnNxF0MMuHG9gfgf2NyxSjJgiBrzKS4I19/X3yeM8=\n=Sp7c\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d47ef66a8733aff99cc460a125a97698e89de70\nparent 7be2ff3d48a5f34f85c40542a665df818d94ffa8\nparent dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547286902 +0100\ncommitter GitHub <noreply@github.com> 1547286902 +0100\n\nRollup merge of #57417 - QuietMisdreavus:semi-revert-doctest-parsing, r=GuillaumeGomez\n\nrustdoc: use text-based doctest parsing if a macro is wrapping main\n\nThis is a \"forward-port\" of https://github.com/rust-lang/rust/pull/57019, intended to get https://github.com/rust-lang/rust/issues/56898 on nightly, since it's now fixed on beta (and already worked on stable).\n\nTo recap:\n\n* The libsyntax-based doctest parsing now checks to see whether there is a top-level macro invocation in the doctest while it's checking for `fn main` and an `extern crate` statement.\n* If it finds a macro invocation and *didn't* find `fn main`, then it performs the older text-based scan to allow doctests like the ones in `allocator_api` to still compile.\n\nA \"proper\" fix will involve changing how `make_test` works to call it later in the `run_test` function, after the initial steps of compilation have completed. I've filed [a separate issue](https://github.com/rust-lang/rust/issues/57415) for that, though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61ebac367a5021c95a69d823a156318a88516e6", "html_url": "https://github.com/rust-lang/rust/commit/a61ebac367a5021c95a69d823a156318a88516e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61ebac367a5021c95a69d823a156318a88516e6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be2ff3d48a5f34f85c40542a665df818d94ffa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be2ff3d48a5f34f85c40542a665df818d94ffa8", "html_url": "https://github.com/rust-lang/rust/commit/7be2ff3d48a5f34f85c40542a665df818d94ffa8"}, {"sha": "dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5", "html_url": "https://github.com/rust-lang/rust/commit/dac6eeca92e08a252fa952a1e89f6cd9cb6ba6f5"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "1f19fa2e7f598fbd8315fd62a6baba1170400264", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a61ebac367a5021c95a69d823a156318a88516e6/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61ebac367a5021c95a69d823a156318a88516e6/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a61ebac367a5021c95a69d823a156318a88516e6", "patch": "@@ -394,7 +394,7 @@ pub fn make_test(s: &str,\n \n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n-    let (already_has_main, already_has_extern_crate) = crate::syntax::with_globals(|| {\n+    let (already_has_main, already_has_extern_crate, found_macro) = crate::syntax::with_globals(|| {\n         use crate::syntax::{ast, parse::{self, ParseSess}, source_map::FilePathMapping};\n         use crate::syntax_pos::FileName;\n         use errors::emitter::EmitterWriter;\n@@ -412,6 +412,7 @@ pub fn make_test(s: &str,\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();\n+        let mut found_macro = false;\n \n         let mut parser = match parse::maybe_new_parser_from_source_str(&sess, filename, source) {\n             Ok(p) => p,\n@@ -420,7 +421,7 @@ pub fn make_test(s: &str,\n                     err.cancel();\n                 }\n \n-                return (found_main, found_extern_crate);\n+                return (found_main, found_extern_crate, found_macro);\n             }\n         };\n \n@@ -448,6 +449,12 @@ pub fn make_test(s: &str,\n                         }\n                     }\n \n+                    if !found_macro {\n+                        if let ast::ItemKind::Mac(..) = item.node {\n+                            found_macro = true;\n+                        }\n+                    }\n+\n                     if found_main && found_extern_crate {\n                         break;\n                     }\n@@ -460,9 +467,28 @@ pub fn make_test(s: &str,\n             }\n         }\n \n-        (found_main, found_extern_crate)\n+        (found_main, found_extern_crate, found_macro)\n     });\n \n+    // If a doctest's `fn main` is being masked by a wrapper macro, the parsing loop above won't\n+    // see it. In that case, run the old text-based scan to see if they at least have a main\n+    // function written inside a macro invocation. See\n+    // https://github.com/rust-lang/rust/issues/56898\n+    let already_has_main = if found_macro && !already_has_main {\n+        s.lines()\n+            .map(|line| {\n+                let comment = line.find(\"//\");\n+                if let Some(comment_begins) = comment {\n+                    &line[0..comment_begins]\n+                } else {\n+                    line\n+                }\n+            })\n+            .any(|code| code.contains(\"fn main\"))\n+    } else {\n+        already_has_main\n+    };\n+\n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n     if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n@@ -1143,4 +1169,23 @@ assert_eq!(asdf::foo, 4);\n         let output = make_test(input, Some(\"asdf\"), false, &opts);\n         assert_eq!(output, (expected, 3));\n     }\n+\n+    #[test]\n+    fn make_test_main_in_macro() {\n+        let opts = TestOptions::default();\n+        let input =\n+\"#[macro_use] extern crate my_crate;\n+test_wrapper! {\n+    fn main() {}\n+}\";\n+        let expected =\n+\"#![allow(unused)]\n+#[macro_use] extern crate my_crate;\n+test_wrapper! {\n+    fn main() {}\n+}\".to_string();\n+\n+        let output = make_test(input, Some(\"my_crate\"), false, &opts);\n+        assert_eq!(output, (expected, 1));\n+    }\n }"}]}