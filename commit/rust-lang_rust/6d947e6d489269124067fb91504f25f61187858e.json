{"sha": "6d947e6d489269124067fb91504f25f61187858e", "node_id": "C_kwDOAAsO6NoAKDZkOTQ3ZTZkNDg5MjY5MTI0MDY3ZmI5MTUwNGYyNWY2MTE4Nzg1OGU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-16T08:51:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-16T08:56:39Z"}, "message": "Account for hygiene when suggesting typos.", "tree": {"sha": "fe60d0e1d4ef91a2c4832d3c635f045f5cda8e79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe60d0e1d4ef91a2c4832d3c635f045f5cda8e79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d947e6d489269124067fb91504f25f61187858e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d947e6d489269124067fb91504f25f61187858e", "html_url": "https://github.com/rust-lang/rust/commit/6d947e6d489269124067fb91504f25f61187858e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d947e6d489269124067fb91504f25f61187858e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0a099dfc9a97ecd10adb319396c731c4b2d169", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0a099dfc9a97ecd10adb319396c731c4b2d169", "html_url": "https://github.com/rust-lang/rust/commit/9b0a099dfc9a97ecd10adb319396c731c4b2d169"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "5d868ebec94482d0fdfef0d50dc700c41b56f2b4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -24,7 +24,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, SyntaxContext};\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};\n@@ -47,13 +47,15 @@ pub(crate) type Suggestion = (Vec<(Span, String)>, String, Applicability);\n /// similarly named label and whether or not it is reachable.\n pub(crate) type LabelSuggestion = (Ident, bool);\n \n+#[derive(Debug)]\n pub(crate) enum SuggestionTarget {\n     /// The target has a similar name as the name used by the programmer (probably a typo)\n     SimilarlyNamed,\n     /// The target is the only valid item that can be used in the corresponding context\n     SingleItem,\n }\n \n+#[derive(Debug)]\n pub(crate) struct TypoSuggestion {\n     pub candidate: Symbol,\n     pub res: Res,\n@@ -482,11 +484,12 @@ impl<'a> Resolver<'a> {\n         module: Module<'a>,\n         names: &mut Vec<TypoSuggestion>,\n         filter_fn: &impl Fn(Res) -> bool,\n+        ctxt: Option<SyntaxContext>,\n     ) {\n         for (key, resolution) in self.resolutions(module).borrow().iter() {\n             if let Some(binding) = resolution.borrow().binding {\n                 let res = binding.res();\n-                if filter_fn(res) {\n+                if filter_fn(res) && ctxt.map_or(true, |ctxt| ctxt == key.ident.span.ctxt()) {\n                     names.push(TypoSuggestion::typo_from_res(key.ident.name, res));\n                 }\n             }\n@@ -1181,10 +1184,10 @@ impl<'a> Resolver<'a> {\n                 Scope::CrateRoot => {\n                     let root_ident = Ident::new(kw::PathRoot, ident.span);\n                     let root_module = this.resolve_crate_root(root_ident);\n-                    this.add_module_candidates(root_module, &mut suggestions, filter_fn);\n+                    this.add_module_candidates(root_module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::Module(module, _) => {\n-                    this.add_module_candidates(module, &mut suggestions, filter_fn);\n+                    this.add_module_candidates(module, &mut suggestions, filter_fn, None);\n                 }\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(\n@@ -1221,7 +1224,7 @@ impl<'a> Resolver<'a> {\n                 Scope::StdLibPrelude => {\n                     if let Some(prelude) = this.prelude {\n                         let mut tmp_suggestions = Vec::new();\n-                        this.add_module_candidates(prelude, &mut tmp_suggestions, filter_fn);\n+                        this.add_module_candidates(prelude, &mut tmp_suggestions, filter_fn, None);\n                         suggestions.extend(\n                             tmp_suggestions\n                                 .into_iter()"}, {"sha": "3c82c760ed7a3e41a0e5dd6ebf92cbf211f57292", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -131,6 +131,7 @@ pub(super) enum LifetimeElisionCandidate {\n }\n \n /// Only used for diagnostics.\n+#[derive(Debug)]\n struct BaseError {\n     msg: String,\n     fallback_label: String,\n@@ -1584,19 +1585,35 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     ) -> Option<TypoSuggestion> {\n         let mut names = Vec::new();\n         if path.len() == 1 {\n+            let mut ctxt = path.last().unwrap().ident.span.ctxt();\n+\n             // Search in lexical scope.\n             // Walk backwards up the ribs in scope and collect candidates.\n             for rib in self.ribs[ns].iter().rev() {\n+                let rib_ctxt = if rib.kind.contains_params() {\n+                    ctxt.normalize_to_macros_2_0()\n+                } else {\n+                    ctxt.normalize_to_macro_rules()\n+                };\n+\n                 // Locals and type parameters\n                 for (ident, &res) in &rib.bindings {\n-                    if filter_fn(res) {\n+                    if filter_fn(res) && ident.span.ctxt() == rib_ctxt {\n                         names.push(TypoSuggestion::typo_from_res(ident.name, res));\n                     }\n                 }\n+\n+                if let RibKind::MacroDefinition(def) = rib.kind && def == self.r.macro_def(ctxt) {\n+                    // If an invocation of this macro created `ident`, give up on `ident`\n+                    // and switch to `ident`'s source from the macro definition.\n+                    ctxt.remove_mark();\n+                    continue;\n+                }\n+\n                 // Items in scope\n                 if let RibKind::ModuleRibKind(module) = rib.kind {\n                     // Items from this module\n-                    self.r.add_module_candidates(module, &mut names, &filter_fn);\n+                    self.r.add_module_candidates(module, &mut names, &filter_fn, Some(ctxt));\n \n                     if let ModuleKind::Block = module.kind {\n                         // We can see through blocks\n@@ -1622,7 +1639,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             }));\n \n                             if let Some(prelude) = self.r.prelude {\n-                                self.r.add_module_candidates(prelude, &mut names, &filter_fn);\n+                                self.r.add_module_candidates(prelude, &mut names, &filter_fn, None);\n                             }\n                         }\n                         break;\n@@ -1641,7 +1658,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             if let PathResult::Module(ModuleOrUniformRoot::Module(module)) =\n                 self.resolve_path(mod_path, Some(TypeNS), None)\n             {\n-                self.r.add_module_candidates(module, &mut names, &filter_fn);\n+                self.r.add_module_candidates(module, &mut names, &filter_fn, None);\n             }\n         }\n "}, {"sha": "1f2a96a4c411a62bb1c016d41bf478da67cdf201", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -1,9 +1,16 @@\n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:22:9\n    |\n+LL |     pub fn g() {}\n+   |     ---------- similarly named function `g` defined here\n+...\n LL |         f();\n-   |         ^ not found in this scope\n+   |         ^\n+   |\n+help: a function with a similar name exists\n    |\n+LL |         g();\n+   |         ~\n help: consider importing this function\n    |\n LL | use foo::f;\n@@ -12,8 +19,11 @@ LL | use foo::f;\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/globs.rs:15:5\n    |\n+LL |       pub fn f() {}\n+   |       ---------- similarly named function `f` defined here\n+...\n LL |       g();\n-   |       ^ not found in this scope\n+   |       ^\n ...\n LL | /     m! {\n LL | |         use bar::*;\n@@ -23,6 +33,10 @@ LL | |     }\n    | |_____- in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: a function with a similar name exists\n+   |\n+LL |     f();\n+   |     ~\n help: consider importing this function\n    |\n LL | use bar::g;"}, {"sha": "1d2a1e1249864041dd6141a4c70b261bd309f1d6", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -19,14 +19,8 @@ LL |     semitransparent;\n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n-LL |     struct Opaque;\n-   |     -------------- similarly named unit struct `Opaque` defined here\n-...\n LL |     opaque;\n-   |     ^^^^^^\n-   |     |\n-   |     not a value\n-   |     help: a unit struct with a similar name exists (notice the capitalization): `Opaque`\n+   |     ^^^^^^ not a value\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f597c398b7c17f87d5ba9dcc7cfe1a16abb9dc31", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -57,7 +57,7 @@ error[E0425]: cannot find value `i` in this scope\n   --> $DIR/macro-context.rs:3:13\n    |\n LL |     () => ( i ; typeof );\n-   |             ^ help: a local variable with a similar name exists: `a`\n+   |             ^ not found in this scope\n ...\n LL |     let i = m!();\n    |             ---- in this macro invocation"}, {"sha": "df7c4f72eb0b63b863a6e3c97dd44b1eb11d666f", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -13,7 +13,7 @@ error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:12:1\n    |\n LL | gen_macro_rules!();\n-   | ^^^^^^^^^^^^^^^^^^ not found in this scope\n+   | ^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `local_def`\n ...\n LL |         generated!();\n    |         ------------ in this macro invocation\n@@ -24,7 +24,7 @@ error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:21:9\n    |\n LL |         local_def;\n-   |         ^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^ help: a local variable with a similar name exists: `local_use`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "13786080124645079e0bf251350a2a27b0210932", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d947e6d489269124067fb91504f25f61187858e/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=6d947e6d489269124067fb91504f25f61187858e", "patch": "@@ -10,15 +10,15 @@ error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/mixed-site-span.rs:13:9\n    |\n LL |         proc_macro_rules!();\n-   |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `local_def`\n    |\n    = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/mixed-site-span.rs:17:9\n    |\n LL |         local_def;\n-   |         ^^^^^^^^^ not found in this scope\n+   |         ^^^^^^^^^ help: a local variable with a similar name exists: `local_use`\n \n error[E0412]: cannot find type `ItemUse` in crate `$crate`\n   --> $DIR/mixed-site-span.rs:24:1"}]}