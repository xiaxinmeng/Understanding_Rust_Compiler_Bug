{"sha": "78c892d8659ae1cf1717b9a8a4bb407d8667f672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Yzg5MmQ4NjU5YWUxY2YxNzE3YjlhOGE0YmI0MDdkODY2N2Y2NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-10T06:50:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-10T06:50:59Z"}, "message": "Auto merge of #38138 - rkruppe:no_std-no_loop, r=steveklabnik\n\nbook: use abort() over loop {} for panic\n\nDue to #28728 `loop {}` is very risky and can lead to fun debugging experiences such as #38136. Besides, aborting is probably better behavior than an infinite loop.\n\nr? @steveklabnik", "tree": {"sha": "0a27becbef4ae12a18f01390607e28ce63e5faf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a27becbef4ae12a18f01390607e28ce63e5faf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c892d8659ae1cf1717b9a8a4bb407d8667f672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c892d8659ae1cf1717b9a8a4bb407d8667f672", "html_url": "https://github.com/rust-lang/rust/commit/78c892d8659ae1cf1717b9a8a4bb407d8667f672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c892d8659ae1cf1717b9a8a4bb407d8667f672/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa9feb37a06abf96f4aeee7d92888135319d546", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa9feb37a06abf96f4aeee7d92888135319d546", "html_url": "https://github.com/rust-lang/rust/commit/2fa9feb37a06abf96f4aeee7d92888135319d546"}, {"sha": "893f42a83466cf02b6fd6d3c82d5419cdad47474", "url": "https://api.github.com/repos/rust-lang/rust/commits/893f42a83466cf02b6fd6d3c82d5419cdad47474", "html_url": "https://github.com/rust-lang/rust/commit/893f42a83466cf02b6fd6d3c82d5419cdad47474"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "0d6a142ca4f724c178f07987cc50e72f7a9dc962", "filename": "src/doc/book/lang-items.md", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78c892d8659ae1cf1717b9a8a4bb407d8667f672/src%2Fdoc%2Fbook%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/78c892d8659ae1cf1717b9a8a4bb407d8667f672/src%2Fdoc%2Fbook%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flang-items.md?ref=78c892d8659ae1cf1717b9a8a4bb407d8667f672", "patch": "@@ -16,15 +16,12 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```rust,ignore\n-#![feature(lang_items, box_syntax, start, libc)]\n+#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n #![no_std]\n+use core::intrinsics;\n \n extern crate libc;\n \n-extern {\n-    fn abort() -> !;\n-}\n-\n #[lang = \"owned_box\"]\n pub struct Box<T>(*mut T);\n \n@@ -34,7 +31,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n \n     // Check if `malloc` failed:\n     if p as usize == 0 {\n-        abort();\n+        intrinsics::abort();\n     }\n \n     p\n@@ -58,7 +55,7 @@ fn main(argc: isize, argv: *const *const u8) -> isize {\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { loop {} }\n+#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n # #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n # #[no_mangle] pub extern fn rust_eh_register_frames () {}\n # #[no_mangle] pub extern fn rust_eh_unregister_frames () {}"}, {"sha": "79f0593be1780cffa167d3bb0cc95cd0a2fe0a8e", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78c892d8659ae1cf1717b9a8a4bb407d8667f672/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/78c892d8659ae1cf1717b9a8a4bb407d8667f672/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=78c892d8659ae1cf1717b9a8a4bb407d8667f672", "patch": "@@ -37,9 +37,10 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```rust,ignore\n-#![feature(lang_items)]\n+#![feature(lang_items, core_intrinsics)]\n #![feature(start)]\n #![no_std]\n+use core::intrinsics;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -69,7 +70,7 @@ pub extern fn rust_eh_unwind_resume() {\n pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n                                _file: &'static str,\n                                _line: u32) -> ! {\n-    loop {}\n+    unsafe { intrinsics::abort() }\n }\n ```\n \n@@ -79,10 +80,11 @@ correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n ```rust,ignore\n-#![feature(lang_items)]\n+#![feature(lang_items, core_intrinsics)]\n #![feature(start)]\n #![no_std]\n #![no_main]\n+use core::intrinsics;\n \n // Pull in the system libc library for what crt0.o likely requires.\n extern crate libc;\n@@ -112,7 +114,7 @@ pub extern fn rust_eh_unwind_resume() {\n pub extern fn rust_begin_panic(_msg: core::fmt::Arguments,\n                                _file: &'static str,\n                                _line: u32) -> ! {\n-    loop {}\n+    unsafe { intrinsics::abort() }\n }\n ```\n "}]}