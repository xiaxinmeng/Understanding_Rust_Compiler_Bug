{"sha": "147d173d02ea030af23fad07c7e99b2900e710f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0N2QxNzNkMDJlYTAzMGFmMjNmYWQwN2M3ZTk5YjI5MDBlNzEwZjI=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-02-08T21:15:20Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-02-08T21:15:20Z"}, "message": "rustdoc: Show attributes on all item types\n\nCurrently attributes are only shown for structs, unions and enums but\nthey should be shown for all items. For example it is useful to know if a\nfunction is `#[no_mangle]`.", "tree": {"sha": "09ee8af3816cc72d6b9c2ad3017435df560ebe85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ee8af3816cc72d6b9c2ad3017435df560ebe85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147d173d02ea030af23fad07c7e99b2900e710f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147d173d02ea030af23fad07c7e99b2900e710f2", "html_url": "https://github.com/rust-lang/rust/commit/147d173d02ea030af23fad07c7e99b2900e710f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147d173d02ea030af23fad07c7e99b2900e710f2/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc02736d59252fe408dd6c2f7e2c4b6f229e4443", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc02736d59252fe408dd6c2f7e2c4b6f229e4443", "html_url": "https://github.com/rust-lang/rust/commit/fc02736d59252fe408dd6c2f7e2c4b6f229e4443"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "fe397e980bdcc1ee98fc19b533c148f2cab9ef32", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/147d173d02ea030af23fad07c7e99b2900e710f2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147d173d02ea030af23fad07c7e99b2900e710f2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=147d173d02ea030af23fad07c7e99b2900e710f2", "patch": "@@ -1936,7 +1936,9 @@ impl<'a> fmt::Display for Initializer<'a> {\n \n fn item_constant(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  c: &clean::Constant) -> fmt::Result {\n-    write!(w, \"<pre class='rust const'>{vis}const \\\n+    write!(w, \"<pre class='rust const'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{vis}const \\\n                {name}: {typ}{init}</pre>\",\n            vis = VisSpace(&it.visibility),\n            name = it.name.as_ref().unwrap(),\n@@ -1947,7 +1949,9 @@ fn item_constant(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                s: &clean::Static) -> fmt::Result {\n-    write!(w, \"<pre class='rust static'>{vis}static {mutability}\\\n+    write!(w, \"<pre class='rust static'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{vis}static {mutability}\\\n                {name}: {typ}{init}</pre>\",\n            vis = VisSpace(&it.visibility),\n            mutability = MutableSpace(s.mutability),\n@@ -1971,7 +1975,9 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                          AbiSpace(f.abi),\n                          it.name.as_ref().unwrap(),\n                          f.generics).len();\n-    write!(w, \"<pre class='rust fn'>{vis}{constness}{unsafety}{abi}fn \\\n+    write!(w, \"<pre class='rust fn'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{vis}{constness}{unsafety}{abi}fn \\\n                {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(&it.visibility),\n            constness = ConstnessSpace(vis_constness),\n@@ -2006,7 +2012,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n \n     // Output the trait definition\n-    write!(w, \"<pre class='rust trait'>{}{}trait {}{}{}{} \",\n+    write!(w, \"<pre class='rust trait'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{}{}trait {}{}{}{} \",\n            VisSpace(&it.visibility),\n            UnsafetySpace(t.unsafety),\n            it.name.as_ref().unwrap(),\n@@ -2987,7 +2995,9 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n     let indent = format!(\"type {}{:#} \", it.name.as_ref().unwrap(), t.generics).len();\n-    write!(w, \"<pre class='rust typedef'>type {}{}{where_clause} = {type_};</pre>\",\n+    write!(w, \"<pre class='rust typedef'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"type {}{}{where_clause} = {type_};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n            where_clause = WhereClause(&t.generics, indent),"}, {"sha": "22e509001137e947052d76643e3aca7170d76c4d", "filename": "src/test/rustdoc/attributes.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/147d173d02ea030af23fad07c7e99b2900e710f2/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147d173d02ea030af23fad07c7e99b2900e710f2/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=147d173d02ea030af23fad07c7e99b2900e710f2", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.f.html '//*[@class=\"docblock attributes\"]' '#[no_mangle]'\n+#[no_mangle]\n+pub extern \"C\" fn f() {}\n+\n+// @has foo/fn.g.html '//*[@class=\"docblock attributes\"]' '#[export_name = \"bar\"]'\n+#[export_name = \"bar\"]\n+pub extern \"C\" fn g() {}\n+\n+// @has foo/enum.Foo.html '//*[@class=\"docblock attributes\"]' '#[repr(i64)]'\n+// @has foo/enum.Foo.html '//*[@class=\"docblock attributes\"]' '#[must_use]'\n+#[repr(i64)]\n+#[must_use]\n+pub enum Foo {\n+    Bar,\n+}"}]}