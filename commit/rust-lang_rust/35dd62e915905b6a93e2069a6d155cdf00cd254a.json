{"sha": "35dd62e915905b6a93e2069a6d155cdf00cd254a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZGQ2MmU5MTU5MDViNmE5M2UyMDY5YTZkMTU1Y2RmMDBjZDI1NGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-24T12:41:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-24T12:56:20Z"}, "message": "Properly infer tuple patterns when encountering ellipsis", "tree": {"sha": "ebaf611da8e52f8df0c2d308b18bb9b6368fe3ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebaf611da8e52f8df0c2d308b18bb9b6368fe3ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35dd62e915905b6a93e2069a6d155cdf00cd254a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35dd62e915905b6a93e2069a6d155cdf00cd254a", "html_url": "https://github.com/rust-lang/rust/commit/35dd62e915905b6a93e2069a6d155cdf00cd254a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35dd62e915905b6a93e2069a6d155cdf00cd254a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6294286fee6e53c29e8ad563f476721ad85ef266", "url": "https://api.github.com/repos/rust-lang/rust/commits/6294286fee6e53c29e8ad563f476721ad85ef266", "html_url": "https://github.com/rust-lang/rust/commit/6294286fee6e53c29e8ad563f476721ad85ef266"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "b3fd74eab706c1463c5992ef51641bdc15bda543", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/35dd62e915905b6a93e2069a6d155cdf00cd254a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dd62e915905b6a93e2069a6d155cdf00cd254a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=35dd62e915905b6a93e2069a6d155cdf00cd254a", "patch": "@@ -111,20 +111,29 @@ impl<'a> InferenceContext<'a> {\n         let expected = expected;\n \n         let ty = match &body[pat] {\n-            Pat::Tuple { ref args, .. } => {\n+            Pat::Tuple { ref args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n                     Some(parameters) => &*parameters.0,\n                     _ => &[],\n                 };\n-                let expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n \n-                let inner_tys = args\n-                    .iter()\n-                    .zip(expectations_iter)\n-                    .map(|(&pat, ty)| self.infer_pat(pat, ty, default_bm))\n-                    .collect();\n+                let (pre, post) = match ellipsis {\n+                    &Some(idx) => args.split_at(idx),\n+                    None => (&args[..], &[][..]),\n+                };\n+                let uncovered_range = pre.len()..expectations.len().saturating_sub(post.len());\n+                let mut expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n+                let mut infer_pat = |(&pat, ty)| self.infer_pat(pat, ty, default_bm);\n+\n+                let mut inner_tys = Vec::with_capacity(expectations.len());\n+                inner_tys.extend(pre.iter().zip(expectations_iter.by_ref()).map(&mut infer_pat));\n+                inner_tys.extend(expectations_iter.by_ref().take(uncovered_range.len()).cloned());\n+                inner_tys.extend(post.iter().zip(expectations_iter).map(infer_pat));\n \n-                Ty::apply(TypeCtor::Tuple { cardinality: args.len() as u16 }, Substs(inner_tys))\n+                Ty::apply(\n+                    TypeCtor::Tuple { cardinality: inner_tys.len() as u16 },\n+                    Substs(inner_tys.into()),\n+                )\n             }\n             Pat::Or(ref pats) => {\n                 if let Some((first_pat, rest)) = pats.split_first() {"}, {"sha": "5776de2807971f18c2c821ad26231bf5e6ee1b31", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/35dd62e915905b6a93e2069a6d155cdf00cd254a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dd62e915905b6a93e2069a6d155cdf00cd254a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=35dd62e915905b6a93e2069a6d155cdf00cd254a", "patch": "@@ -679,3 +679,50 @@ fn box_pattern() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn tuple_ellipsis_pattern() {\n+    check_infer(\n+        r#\"\n+fn foo(tuple: (u8, i16, f32)) {\n+    match tuple {\n+        (.., b, c) => {},\n+        (a, .., c) => {},\n+        (a, b, ..) => {},\n+        (a, b) => {/*too short*/}\n+        (a, b, c, d) => {/*too long*/}\n+        _ => {}\n+    }\n+}\"#,\n+        expect![[r#\"\n+            7..12 'tuple': (u8, i16, f32)\n+            30..224 '{     ...   } }': ()\n+            36..222 'match ...     }': ()\n+            42..47 'tuple': (u8, i16, f32)\n+            58..68 '(.., b, c)': (u8, i16, f32)\n+            63..64 'b': i16\n+            66..67 'c': f32\n+            72..74 '{}': ()\n+            84..94 '(a, .., c)': (u8, i16, f32)\n+            85..86 'a': u8\n+            92..93 'c': f32\n+            98..100 '{}': ()\n+            110..120 '(a, b, ..)': (u8, i16, f32)\n+            111..112 'a': u8\n+            114..115 'b': i16\n+            124..126 '{}': ()\n+            136..142 '(a, b)': (u8, i16, f32)\n+            137..138 'a': u8\n+            140..141 'b': i16\n+            146..161 '{/*too short*/}': ()\n+            170..182 '(a, b, c, d)': (u8, i16, f32, {unknown})\n+            171..172 'a': u8\n+            174..175 'b': i16\n+            177..178 'c': f32\n+            180..181 'd': {unknown}\n+            186..200 '{/*too long*/}': ()\n+            209..210 '_': (u8, i16, f32)\n+            214..216 '{}': ()\n+        \"#]],\n+    );\n+}"}]}