{"sha": "efb6587664f7fc38d06932af620aeb765bacc3d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYjY1ODc2NjRmN2ZjMzhkMDY5MzJhZjYyMGFlYjc2NWJhY2MzZDY=", "commit": {"author": {"name": "Kevin DeLorey", "email": "kdelorey.dev@gmail.com", "date": "2021-07-23T00:59:31Z"}, "committer": {"name": "Kevin DeLorey", "email": "kdelorey.dev@gmail.com", "date": "2021-07-23T01:35:47Z"}, "message": "Added tests to ensure config behavior.", "tree": {"sha": "641d2b95af48ca1eae405f70e4030fe19dc3cfca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/641d2b95af48ca1eae405f70e4030fe19dc3cfca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb6587664f7fc38d06932af620aeb765bacc3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb6587664f7fc38d06932af620aeb765bacc3d6", "html_url": "https://github.com/rust-lang/rust/commit/efb6587664f7fc38d06932af620aeb765bacc3d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb6587664f7fc38d06932af620aeb765bacc3d6/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75e0e7bb13e25341a22d4b8113dba9dcbadb865", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75e0e7bb13e25341a22d4b8113dba9dcbadb865", "html_url": "https://github.com/rust-lang/rust/commit/b75e0e7bb13e25341a22d4b8113dba9dcbadb865"}], "stats": {"total": 192, "additions": 190, "deletions": 2}, "files": [{"sha": "c7f2dd95f5e4016e932e3f99ee1449c86311dc86", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 190, "deletions": 2, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/efb6587664f7fc38d06932af620aeb765bacc3d6/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb6587664f7fc38d06932af620aeb765bacc3d6/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=efb6587664f7fc38d06932af620aeb765bacc3d6", "patch": "@@ -272,15 +272,20 @@ mod tests {\n     use super::*;\n \n     fn check(ra_fixture: &str) {\n-        let (analysis, pos, annotations) = fixture::annotations(ra_fixture);\n         let config = HighlightRelatedConfig {\n             break_points: true,\n             exit_points: true,\n             references: true,\n             yield_points: true,\n         };\n \n-        let hls = analysis.highlight_related(config, pos).unwrap().unwrap();\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    fn check_with_config(ra_fixture: &str, config: HighlightRelatedConfig) {\n+        let (analysis, pos, annotations) = fixture::annotations(ra_fixture);\n+\n+        let hls = analysis.highlight_related(config, pos).unwrap().unwrap_or(Vec::default());\n \n         let mut expected = annotations\n             .into_iter()\n@@ -745,4 +750,187 @@ fn foo() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_hl_disabled_ref_local() {\n+        let config = HighlightRelatedConfig {\n+            references: false,\n+            break_points: true,\n+            exit_points: true,\n+            yield_points: true,\n+        };\n+\n+        let ra_fixture = r#\"\n+fn foo() {\n+    let x$0 = 5;\n+    let y = x * 2;\n+}\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    #[test]\n+    fn test_hl_disabled_ref_local_preserved_break() {\n+        let config = HighlightRelatedConfig {\n+            references: false,\n+            break_points: true,\n+            exit_points: true,\n+            yield_points: true,\n+        };\n+\n+        let ra_fixture = r#\"\n+fn foo() {\n+    let x$0 = 5;\n+    let y = x * 2;\n+\n+    loop {\n+        break;\n+    }\n+}\"#;\n+\n+        check_with_config(ra_fixture, config.clone());\n+\n+        let ra_fixture = r#\"\n+fn foo() {\n+    let x = 5;\n+    let y = x * 2;\n+\n+    loop$0 {\n+//  ^^^^\n+        break;\n+//      ^^^^^\n+    }\n+}\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    #[test]\n+    fn test_hl_disabled_ref_local_preserved_yield() {\n+        let config = HighlightRelatedConfig {\n+            references: false,\n+            break_points: true,\n+            exit_points: true,\n+            yield_points: true,\n+        };\n+\n+        let ra_fixture = r#\"\n+async fn foo() {\n+    let x$0 = 5;\n+    let y = x * 2;\n+\n+    0.await;\n+}\"#;\n+\n+        check_with_config(ra_fixture, config.clone());\n+\n+        let ra_fixture = r#\"\n+    async fn foo() {\n+//  ^^^^^\n+        let x = 5;\n+        let y = x * 2;\n+\n+        0.await$0;\n+//        ^^^^^\n+}\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    #[test]\n+    fn test_hl_disabled_ref_local_preserved_exit() {\n+        let config = HighlightRelatedConfig {\n+            references: false,\n+            break_points: true,\n+            exit_points: true,\n+            yield_points: true,\n+        };\n+\n+        let ra_fixture = r#\"\n+fn foo() -> i32 {\n+    let x$0 = 5;\n+    let y = x * 2;\n+\n+    if true {\n+        return y;\n+    }\n+\n+    0?\n+}\"#;\n+\n+        check_with_config(ra_fixture, config.clone());\n+\n+        let ra_fixture = r#\"\n+fn foo() ->$0 i32 {\n+    let x = 5;\n+    let y = x * 2;\n+\n+    if true {\n+        return y;\n+//      ^^^^^^\n+    }\n+\n+    0?\n+//   ^\n+\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    #[test]\n+    fn test_hl_disabled_break() {\n+        let config = HighlightRelatedConfig {\n+            references: true,\n+            break_points: false,\n+            exit_points: true,\n+            yield_points: true,\n+        };\n+\n+        let ra_fixture = r#\"\n+fn foo() {\n+    loop {\n+        break$0;\n+    }\n+}\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    #[test]\n+    fn test_hl_disabled_yield() {\n+        let config = HighlightRelatedConfig {\n+            references: true,\n+            break_points: true,\n+            exit_points: true,\n+            yield_points: false,\n+        };\n+\n+        let ra_fixture = r#\"\n+async$0 fn foo() {\n+    0.await;\n+}\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n+\n+    #[test]\n+    fn test_hl_disabled_exit() {\n+        let config = HighlightRelatedConfig {\n+            references: true,\n+            break_points: true,\n+            exit_points: false,\n+            yield_points: true,\n+        };\n+\n+        let ra_fixture = r#\"\n+fn foo() ->$0 i32 {\n+    if true {\n+        return -1;\n+    }\n+\n+    42\n+}\"#;\n+\n+        check_with_config(ra_fixture, config);\n+    }\n }"}]}