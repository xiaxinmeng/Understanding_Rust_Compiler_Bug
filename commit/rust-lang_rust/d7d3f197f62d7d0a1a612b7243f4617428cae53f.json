{"sha": "d7d3f197f62d7d0a1a612b7243f4617428cae53f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZDNmMTk3ZjYyZDdkMGExYTYxMmI3MjQzZjQ2MTc0MjhjYWU1M2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T13:52:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T14:02:06Z"}, "message": "introduce ability to if we have typeck-tables for a given def-id\n\nAnd use this in save-analysis, which used to read the map directly.\nThis is an attempt to sidestep the failure occuring on homu that I\ncannot reproduce.", "tree": {"sha": "e51cc43bfb613271978ea5b8eb842abdeadd1d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e51cc43bfb613271978ea5b8eb842abdeadd1d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7d3f197f62d7d0a1a612b7243f4617428cae53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d3f197f62d7d0a1a612b7243f4617428cae53f", "html_url": "https://github.com/rust-lang/rust/commit/d7d3f197f62d7d0a1a612b7243f4617428cae53f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7d3f197f62d7d0a1a612b7243f4617428cae53f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cca2567d9a39f159e392c47c8be6d94087242c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cca2567d9a39f159e392c47c8be6d94087242c9", "html_url": "https://github.com/rust-lang/rust/commit/2cca2567d9a39f159e392c47c8be6d94087242c9"}], "stats": {"total": 137, "additions": 84, "deletions": 53}, "files": [{"sha": "1749c90b5892ac7c4f784a918aee59f16a5fe573", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=d7d3f197f62d7d0a1a612b7243f4617428cae53f", "patch": "@@ -537,6 +537,8 @@ define_maps! { <'tcx>\n \n     [] typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n \n+    [] has_typeck_tables: TypeckTables(DefId) -> bool,\n+\n     [] coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n     [] borrowck: BorrowCheck(DefId) -> (),"}, {"sha": "4d75206ed9c7c35496fa2f0cd0ea7648466b9109", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d7d3f197f62d7d0a1a612b7243f4617428cae53f", "patch": "@@ -114,11 +114,15 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         where F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, D>)\n     {\n         let item_def_id = self.tcx.hir.local_def_id(item_id);\n-        let tables = self.tcx.typeck_tables_of(item_def_id);\n-        let old_tables = self.save_ctxt.tables;\n-        self.save_ctxt.tables = tables;\n-        f(self);\n-        self.save_ctxt.tables = old_tables;\n+        if self.tcx.has_typeck_tables(item_def_id) {\n+            let tables = self.tcx.typeck_tables_of(item_def_id);\n+            let old_tables = self.save_ctxt.tables;\n+            self.save_ctxt.tables = tables;\n+            f(self);\n+            self.save_ctxt.tables = old_tables;\n+        } else {\n+            f(self)\n+        }\n     }\n \n     pub fn dump_crate_info(&mut self, name: &str, krate: &ast::Crate) {"}, {"sha": "0186755e30a624ba889201f27a61964760e843b5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 72, "deletions": 45, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d7d3f197f62d7d0a1a612b7243f4617428cae53f", "patch": "@@ -637,6 +637,7 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         typeck_item_bodies,\n         typeck_tables_of,\n+        has_typeck_tables,\n         closure_type,\n         closure_kind,\n         adt_destructor,\n@@ -664,55 +665,49 @@ fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n }\n \n-fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           def_id: DefId)\n-                           -> &'tcx ty::TypeckTables<'tcx> {\n-    // Closures' tables come from their outermost function,\n-    // as they are part of the same \"inference environment\".\n-    let outer_def_id = tcx.closure_base_def_id(def_id);\n-    if outer_def_id != def_id {\n-        return tcx.typeck_tables_of(outer_def_id);\n-    }\n-\n-    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let span = tcx.hir.span(id);\n-    let unsupported = || {\n-        span_bug!(span, \"can't type-check body of {:?}\", def_id);\n-    };\n-\n-    // Figure out what primary body this item has.\n-    let mut fn_decl = None;\n-    let body_id = match tcx.hir.get(id) {\n+/// If this def-id is a \"primary tables entry\", returns `Some((body_id, decl))`\n+/// with information about it's body-id and fn-decl (if any). Otherwise,\n+/// returns `None`.\n+///\n+/// If this function returns \"some\", then `typeck_tables(def_id)` will\n+/// succeed; if it returns `None`, then `typeck_tables(def_id)` may or\n+/// may not succeed.  In some cases where this function returns `None`\n+/// (notably closures), `typeck_tables(def_id)` would wind up\n+/// redirecting to the owning function.\n+fn primary_body_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             id: ast::NodeId)\n+                             -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)>\n+{\n+    match tcx.hir.get(id) {\n         hir::map::NodeItem(item) => {\n             match item.node {\n                 hir::ItemConst(_, body) |\n-                hir::ItemStatic(_, _, body) => body,\n-                hir::ItemFn(ref decl, .., body) => {\n-                    fn_decl = Some(decl);\n-                    body\n-                }\n-                _ => unsupported()\n+                hir::ItemStatic(_, _, body) =>\n+                    Some((body, None)),\n+                hir::ItemFn(ref decl, .., body) =>\n+                    Some((body, Some(decl))),\n+                _ =>\n+                    None,\n             }\n         }\n         hir::map::NodeTraitItem(item) => {\n             match item.node {\n-                hir::TraitItemKind::Const(_, Some(body)) => body,\n-                hir::TraitItemKind::Method(ref sig,\n-                    hir::TraitMethod::Provided(body)) => {\n-                        fn_decl = Some(&sig.decl);\n-                        body\n-                    }\n-                _ => unsupported()\n+                hir::TraitItemKind::Const(_, Some(body)) =>\n+                    Some((body, None)),\n+                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n+                    Some((body, Some(&sig.decl))),\n+                _ =>\n+                    None,\n             }\n         }\n         hir::map::NodeImplItem(item) => {\n             match item.node {\n-                hir::ImplItemKind::Const(_, body) => body,\n-                hir::ImplItemKind::Method(ref sig, body) => {\n-                    fn_decl = Some(&sig.decl);\n-                    body\n-                }\n-                _ => unsupported()\n+                hir::ImplItemKind::Const(_, body) =>\n+                    Some((body, None)),\n+                hir::ImplItemKind::Method(ref sig, body) =>\n+                    Some((body, Some(&sig.decl))),\n+                _ =>\n+                    None,\n             }\n         }\n         hir::map::NodeExpr(expr) => {\n@@ -723,15 +718,47 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // Assume that everything other than closures\n             // is a constant \"initializer\" expression.\n             match expr.node {\n-                hir::ExprClosure(..) => {\n-                    // We should've bailed out above for closures.\n-                    span_bug!(expr.span, \"unexpected closure\")\n-                }\n-                _ => hir::BodyId { node_id: expr.id }\n+                hir::ExprClosure(..) =>\n+                    None,\n+                _ =>\n+                    Some((hir::BodyId { node_id: expr.id }, None)),\n             }\n         }\n-        _ => unsupported()\n-    };\n+        _ => None,\n+    }\n+}\n+\n+fn has_typeck_tables<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                               def_id: DefId)\n+                               -> bool {\n+    // Closures' tables come from their outermost function,\n+    // as they are part of the same \"inference environment\".\n+    let outer_def_id = tcx.closure_base_def_id(def_id);\n+    if outer_def_id != def_id {\n+        return tcx.has_typeck_tables(outer_def_id);\n+    }\n+\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    primary_body_of(tcx, id).is_some()\n+}\n+\n+fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              def_id: DefId)\n+                              -> &'tcx ty::TypeckTables<'tcx> {\n+    // Closures' tables come from their outermost function,\n+    // as they are part of the same \"inference environment\".\n+    let outer_def_id = tcx.closure_base_def_id(def_id);\n+    if outer_def_id != def_id {\n+        return tcx.typeck_tables_of(outer_def_id);\n+    }\n+\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let span = tcx.hir.span(id);\n+\n+    // Figure out what primary body this item has.\n+    let (body_id, fn_decl) = primary_body_of(tcx, id).unwrap_or_else(|| {\n+        span_bug!(span, \"can't type-check body of {:?}\", def_id);\n+    });\n     let body = tcx.hir.body(body_id);\n \n     Inherited::build(tcx, id).enter(|inh| {"}, {"sha": "1af55d4d840d9b0fa852923539632a75a896c1b6", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7d3f197f62d7d0a1a612b7243f4617428cae53f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=d7d3f197f62d7d0a1a612b7243f4617428cae53f", "patch": "@@ -63,9 +63,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CheckVisitor<'a, 'tcx> {\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut used_trait_imports = DefIdSet();\n     for &body_id in tcx.hir.krate().bodies.keys() {\n-        let item_id = tcx.hir.body_owner(body_id);\n-        let item_def_id = tcx.hir.local_def_id(item_id);\n-\n+        let item_def_id = tcx.hir.body_owner_def_id(body_id);\n         let tables = tcx.typeck_tables_of(item_def_id);\n         let imports = &tables.used_trait_imports;\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);"}]}