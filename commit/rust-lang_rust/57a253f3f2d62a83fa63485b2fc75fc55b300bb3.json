{"sha": "57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTI1M2YzZjJkNjJhODNmYTYzNDg1YjJmYzc1ZmM1NWIzMDBiYjM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-18T13:34:46Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-18T13:34:46Z"}, "message": "Merge #232\n\n232: Add id assignment infrastructure r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0ae3a1f3c92ce9e308934e023d6a24385b4260d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae3a1f3c92ce9e308934e023d6a24385b4260d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "html_url": "https://github.com/rust-lang/rust/commit/57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f1d8558cd5fe20a351496c39dbb8e15aa028803c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d8558cd5fe20a351496c39dbb8e15aa028803c", "html_url": "https://github.com/rust-lang/rust/commit/f1d8558cd5fe20a351496c39dbb8e15aa028803c"}, {"sha": "4e48917c00d24e1e1785e1959a2f3495a902410b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e48917c00d24e1e1785e1959a2f3495a902410b", "html_url": "https://github.com/rust-lang/rust/commit/4e48917c00d24e1e1785e1959a2f3495a902410b"}], "stats": {"total": 154, "additions": 143, "deletions": 11}, "files": [{"sha": "c6ed5107cb4b1f93da7b5e0a429b4fcb4dd10403", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -600,6 +600,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "b4a1a09b522c9fb0654ff174609573545254bf34", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -11,6 +11,7 @@ rayon = \"1.0.2\"\n fst = \"0.3.1\"\n salsa = \"0.8.0\"\n rustc-hash = \"1.0\"\n+parking_lot = \"0.6.4\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "d78b6afb944bdef64cee47f3d015f365b76ea5b5", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -12,12 +12,14 @@ use crate::{\n     },\n     symbol_index::SymbolIndex,\n     syntax_ptr::SyntaxPtr,\n+    loc2id::{IdMaps, IdDatabase},\n     Cancelable, Canceled, FileId,\n };\n \n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n+    id_maps: IdMaps,\n }\n \n impl salsa::Database for RootDatabase {\n@@ -29,7 +31,8 @@ impl salsa::Database for RootDatabase {\n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n-            runtime: Default::default(),\n+            runtime: salsa::Runtime::default(),\n+            id_maps: IdMaps::default(),\n         };\n         db.query_mut(crate::input::SourceRootQuery)\n             .set(crate::input::WORKSPACE, Default::default());\n@@ -53,10 +56,17 @@ impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n             runtime: self.runtime.snapshot(self),\n+            id_maps: self.id_maps.clone(),\n         })\n     }\n }\n \n+impl IdDatabase for RootDatabase {\n+    fn id_maps(&self) -> &IdMaps {\n+        &self.id_maps\n+    }\n+}\n+\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl crate::input::FilesDatabase {"}, {"sha": "a7257acf9a16c4bcf5de06a740290d7d1d369556", "filename": "crates/ra_analysis/src/descriptors/function/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -8,9 +8,9 @@ use crate::descriptors::{\n };\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`\n-/// TODO: this should return something more type-safe then `SyntaxNode`\n pub(crate) fn fn_syntax(db: &impl DescriptorDatabase, fn_id: FnId) -> FnDefNode {\n-    let syntax = db.resolve_syntax_ptr(fn_id.0);\n+    let ptr = db.id_maps().fn_ptr(fn_id);\n+    let syntax = db.resolve_syntax_ptr(ptr);\n     FnDef::cast(syntax.borrowed()).unwrap().owned()\n }\n "}, {"sha": "86eee5e93c2c8dc5af9e6ba06499bd5230f42fa0", "filename": "crates/ra_analysis/src/descriptors/function/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -8,17 +8,18 @@ use ra_syntax::{\n     TextRange, TextUnit,\n };\n \n-use crate::{syntax_ptr::SyntaxPtr, FileId};\n+use crate::{\n+    syntax_ptr::SyntaxPtr, FileId,\n+    loc2id::IdDatabase,\n+};\n \n pub(crate) use self::scope::{resolve_local_name, FnScopes};\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct FnId(SyntaxPtr);\n+pub(crate) use crate::loc2id::FnId;\n \n impl FnId {\n-    pub(crate) fn new(file_id: FileId, fn_def: ast::FnDef) -> FnId {\n+    pub(crate) fn get(db: &impl IdDatabase, file_id: FileId, fn_def: ast::FnDef) -> FnId {\n         let ptr = SyntaxPtr::new(file_id, fn_def.syntax());\n-        FnId(ptr)\n+        db.id_maps().fn_id(ptr)\n     }\n }\n "}, {"sha": "d602c4e04ea2d909c45c54fd9c6242c74557343c", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -13,12 +13,13 @@ use crate::{\n     descriptors::function::{resolve_local_name, FnId, FnScopes},\n     descriptors::module::{ModuleId, ModuleScope, ModuleTree, ModuleSource},\n     input::SourceRootId,\n+    loc2id::IdDatabase,\n     syntax_ptr::LocalSyntaxPtr,\n     Cancelable,\n };\n \n salsa::query_group! {\n-    pub(crate) trait DescriptorDatabase: SyntaxDatabase {\n+    pub(crate) trait DescriptorDatabase: SyntaxDatabase + IdDatabase {\n         fn module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n             type ModuleTreeQuery;\n             use fn module::imp::module_tree;"}, {"sha": "055a56b54de2e7ec7fe318d85744e24fa3cca0bc", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -58,6 +58,15 @@ enum ModuleSourceNode {\n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n pub(crate) struct ModuleId(u32);\n \n+impl crate::loc2id::NumericId for ModuleId {\n+    fn from_u32(id: u32) -> Self {\n+        ModuleId(id)\n+    }\n+    fn to_u32(self) -> u32 {\n+        self.0\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n pub(crate) struct LinkId(u32);\n "}, {"sha": "812fed32d93d55b7869be6dcab65aec062874352", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -621,7 +621,7 @@ fn resolve_local_name(\n     name_ref: ast::NameRef,\n ) -> Option<(SmolStr, TextRange)> {\n     let fn_def = name_ref.syntax().ancestors().find_map(ast::FnDef::cast)?;\n-    let fn_id = FnId::new(file_id, fn_def);\n+    let fn_id = FnId::get(db, file_id, fn_def);\n     let scopes = db.fn_scopes(fn_id);\n     let scope_entry = crate::descriptors::function::resolve_local_name(name_ref, &scopes)?;\n     let syntax = db.resolve_syntax_ptr(scope_entry.ptr().into_global(file_id));"}, {"sha": "eccda84a7f23e2387e94508ba7a54fd750b16e70", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -10,6 +10,7 @@ extern crate rustc_hash;\n extern crate salsa;\n \n mod db;\n+mod loc2id;\n mod input;\n mod imp;\n mod completion;"}, {"sha": "8eaa249971f9d620de53aac3de888fe3fad79a38", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a253f3f2d62a83fa63485b2fc75fc55b300bb3/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=57a253f3f2d62a83fa63485b2fc75fc55b300bb3", "patch": "@@ -0,0 +1,108 @@\n+use parking_lot::Mutex;\n+\n+use std::{\n+    hash::Hash,\n+    sync::Arc,\n+};\n+\n+use rustc_hash::FxHashMap;\n+\n+use crate::{\n+    syntax_ptr::SyntaxPtr,\n+};\n+\n+/// There are two principle ways to refer to things:\n+///   - by their locatinon (module in foo/bar/baz.rs at line 42)\n+///   - by their numeric id (module `ModuleId(42)`)\n+///\n+/// The first one is more powerful (you can actually find the thing in question\n+/// by id), but the second one is so much more compact.\n+///\n+/// `Loc2IdMap` allows us to have a cake an eat it as well: by maintaining a\n+/// bidirectional mapping between positional and numeric ids, we can use compact\n+/// representation wich still allows us to get the actual item\n+#[derive(Debug)]\n+pub(crate) struct Loc2IdMap<L, ID>\n+where\n+    ID: NumericId,\n+    L: Clone + Eq + Hash,\n+{\n+    loc2id: FxHashMap<L, ID>,\n+    id2loc: FxHashMap<ID, L>,\n+}\n+\n+impl<L, ID> Default for Loc2IdMap<L, ID>\n+where\n+    ID: NumericId,\n+    L: Clone + Eq + Hash,\n+{\n+    fn default() -> Self {\n+        Loc2IdMap {\n+            loc2id: FxHashMap::default(),\n+            id2loc: FxHashMap::default(),\n+        }\n+    }\n+}\n+\n+impl<L, ID> Loc2IdMap<L, ID>\n+where\n+    ID: NumericId,\n+    L: Clone + Eq + Hash,\n+{\n+    pub fn loc2id(&mut self, loc: &L) -> ID {\n+        match self.loc2id.get(loc) {\n+            Some(id) => return id.clone(),\n+            None => (),\n+        }\n+        let id = self.loc2id.len();\n+        assert!(id < u32::max_value() as usize);\n+        let id = ID::from_u32(id as u32);\n+        self.loc2id.insert(loc.clone(), id.clone());\n+        self.id2loc.insert(id.clone(), loc.clone());\n+        id\n+    }\n+\n+    pub fn id2loc(&self, id: ID) -> L {\n+        self.id2loc[&id].clone()\n+    }\n+}\n+\n+pub(crate) trait NumericId: Clone + Eq + Hash {\n+    fn from_u32(id: u32) -> Self;\n+    fn to_u32(self) -> u32;\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) struct FnId(u32);\n+\n+impl NumericId for FnId {\n+    fn from_u32(id: u32) -> FnId {\n+        FnId(id)\n+    }\n+    fn to_u32(self) -> u32 {\n+        self.0\n+    }\n+}\n+\n+pub(crate) trait IdDatabase: salsa::Database {\n+    fn id_maps(&self) -> &IdMaps;\n+}\n+\n+#[derive(Debug, Default, Clone)]\n+pub(crate) struct IdMaps {\n+    inner: Arc<IdMapsInner>,\n+}\n+\n+impl IdMaps {\n+    pub(crate) fn fn_id(&self, ptr: SyntaxPtr) -> FnId {\n+        self.inner.fns.lock().loc2id(&ptr)\n+    }\n+    pub(crate) fn fn_ptr(&self, fn_id: FnId) -> SyntaxPtr {\n+        self.inner.fns.lock().id2loc(fn_id)\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct IdMapsInner {\n+    fns: Mutex<Loc2IdMap<SyntaxPtr, FnId>>,\n+}"}]}