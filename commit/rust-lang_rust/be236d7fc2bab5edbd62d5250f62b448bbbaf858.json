{"sha": "be236d7fc2bab5edbd62d5250f62b448bbbaf858", "node_id": "C_kwDOAAsO6NoAKGJlMjM2ZDdmYzJiYWI1ZWRiZDYyZDUyNTBmNjJiNDQ4YmJiYWY4NTg", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-07T16:40:16Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-02-07T16:42:37Z"}, "message": "Rm ValuePairs::Ty/Const\n\nRemove old value pairs which is a strict subset of Terms.", "tree": {"sha": "aa9f38d23213b6e6af89de5dd6a3e61269a86187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9f38d23213b6e6af89de5dd6a3e61269a86187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be236d7fc2bab5edbd62d5250f62b448bbbaf858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be236d7fc2bab5edbd62d5250f62b448bbbaf858", "html_url": "https://github.com/rust-lang/rust/commit/be236d7fc2bab5edbd62d5250f62b448bbbaf858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be236d7fc2bab5edbd62d5250f62b448bbbaf858/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd6f4e56c7470e939c874957f9c70e908b92f6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd6f4e56c7470e939c874957f9c70e908b92f6f", "html_url": "https://github.com/rust-lang/rust/commit/fdd6f4e56c7470e939c874957f9c70e908b92f6f"}], "stats": {"total": 141, "additions": 67, "deletions": 74}, "files": [{"sha": "c26ea4c9669036ea7395b9051d5f861038af9fd5", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -258,7 +258,10 @@ impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n }\n \n@@ -282,7 +285,10 @@ impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n }\n \n@@ -340,7 +346,7 @@ impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {\n         let b_ty = tcx.mk_projection(b.item_def_id, b.substs);\n         TypeTrace {\n             cause: cause.clone(),\n-            values: Types(ExpectedFound::new(a_is_expected, a_ty, b_ty)),\n+            values: Terms(ExpectedFound::new(a_is_expected, a_ty.into(), b_ty.into())),\n         }\n     }\n }"}, {"sha": "22f25ee396b51a268109c3d2c6e2bf563fae1cb1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -1582,18 +1582,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             None => (None, Mismatch::Fixed(\"type\"), false),\n             Some(values) => {\n                 let (is_simple_error, exp_found) = match values {\n-                    ValuePairs::Types(exp_found) => {\n-                        let is_simple_err =\n-                            exp_found.expected.is_simple_text() && exp_found.found.is_simple_text();\n-                        OpaqueTypesVisitor::visit_expected_found(\n-                            self.tcx,\n-                            exp_found.expected,\n-                            exp_found.found,\n-                            span,\n-                        )\n-                        .report(diag);\n+                    ValuePairs::Terms(infer::ExpectedFound {\n+                        expected: ty::Term::Ty(expected),\n+                        found: ty::Term::Ty(found),\n+                    }) => {\n+                        let is_simple_err = expected.is_simple_text() && found.is_simple_text();\n+                        OpaqueTypesVisitor::visit_expected_found(self.tcx, expected, found, span)\n+                            .report(diag);\n \n-                        (is_simple_err, Mismatch::Variable(exp_found))\n+                        (\n+                            is_simple_err,\n+                            Mismatch::Variable(infer::ExpectedFound { expected, found }),\n+                        )\n                     }\n                     ValuePairs::TraitRefs(_) => (false, Mismatch::Fixed(\"trait\")),\n                     _ => (false, Mismatch::Fixed(\"type\")),\n@@ -1624,7 +1624,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 };\n                 if let Some((sp, msg)) = secondary_span {\n                     if swap_secondary_and_primary {\n-                        let terr = if let Some(infer::ValuePairs::Types(infer::ExpectedFound {\n+                        let terr = if let Some(infer::ValuePairs::Terms(infer::ExpectedFound {\n                             expected,\n                             ..\n                         })) = values\n@@ -2036,9 +2036,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             FailureCode::Error0308(failure_str) => {\n                 let mut err = struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str);\n-                if let ValuePairs::Types(ty::error::ExpectedFound { expected, found }) =\n-                    trace.values\n-                {\n+                if let Some((expected, found)) = trace.values.ty() {\n                     match (expected.kind(), found.kind()) {\n                         (ty::Tuple(_), ty::Tuple(_)) => {}\n                         // If a tuple of length one was expected and the found expression has\n@@ -2124,9 +2122,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         values: ValuePairs<'tcx>,\n     ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n         match values {\n-            infer::Types(exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n-            infer::Consts(exp_found) => self.expected_found_str(exp_found),\n             infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n@@ -2155,18 +2151,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn expected_found_str_ty(\n-        &self,\n-        exp_found: ty::error::ExpectedFound<Ty<'tcx>>,\n-    ) -> Option<(DiagnosticStyledString, DiagnosticStyledString)> {\n-        let exp_found = self.resolve_vars_if_possible(exp_found);\n-        if exp_found.references_error() {\n-            return None;\n-        }\n-\n-        Some(self.cmp(exp_found.expected, exp_found.found))\n-    }\n-\n     fn expected_found_str_term(\n         &self,\n         exp_found: ty::error::ExpectedFound<ty::Term<'tcx>>,"}, {"sha": "a79ed20730b5cf014eff50d71b7ccc3ac8c528f8", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -2,7 +2,7 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{SubregionOrigin, Subtype, ValuePairs};\n+use crate::infer::{SubregionOrigin, Subtype};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n@@ -34,16 +34,16 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         {\n             if let (&Subtype(ref sup_trace), &Subtype(ref sub_trace)) = (&sup_origin, &sub_origin) {\n                 if let (\n-                    ValuePairs::Types(sub_expected_found),\n-                    ValuePairs::Types(sup_expected_found),\n+                    sub_expected_found @ Some((sub_expected, sub_found)),\n+                    sup_expected_found @ Some(_),\n                     CompareImplMethodObligation { trait_item_def_id, .. },\n-                ) = (&sub_trace.values, &sup_trace.values, sub_trace.cause.code())\n+                ) = (&sub_trace.values.ty(), &sup_trace.values.ty(), sub_trace.cause.code())\n                 {\n                     if sup_expected_found == sub_expected_found {\n                         self.emit_err(\n                             var_origin.span(),\n-                            sub_expected_found.expected,\n-                            sub_expected_found.found,\n+                            sub_expected,\n+                            sub_found,\n                             *trait_item_def_id,\n                         );\n                         return Some(ErrorReported);"}, {"sha": "c18d36d1f74a2b93d45782d4c1398ddf86e402dd", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -368,14 +368,26 @@ pub struct InferCtxt<'a, 'tcx> {\n /// See the `error_reporting` module for more details.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n pub enum ValuePairs<'tcx> {\n-    Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n-    Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),\n     Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }\n \n+impl<'tcx> ValuePairs<'tcx> {\n+    pub fn ty(&self) -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n+        if let ValuePairs::Terms(ExpectedFound {\n+            expected: ty::Term::Ty(expected),\n+            found: ty::Term::Ty(found),\n+        }) = self\n+        {\n+            Some((expected, found))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n /// The trace designates the path through inference that we took to\n /// encounter an error or subtyping constraint.\n ///\n@@ -1791,7 +1803,10 @@ impl<'tcx> TypeTrace<'tcx> {\n         a: Ty<'tcx>,\n         b: Ty<'tcx>,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Types(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n \n     pub fn consts(\n@@ -1800,7 +1815,10 @@ impl<'tcx> TypeTrace<'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> TypeTrace<'tcx> {\n-        TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Terms(ExpectedFound::new(a_is_expected, a.into(), b.into())),\n+        }\n     }\n }\n "}, {"sha": "7f44f55c0d82bc2ca785ceb3d035842b8e4d6eed", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -1378,26 +1378,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty,\n                     data.term,\n                 ) {\n-                    values = Some(match (normalized_ty, data.term) {\n-                        (ty::Term::Ty(normalized_ty), ty::Term::Ty(ty)) => {\n-                            infer::ValuePairs::Types(ExpectedFound::new(\n-                                is_normalized_ty_expected,\n-                                normalized_ty,\n-                                ty,\n-                            ))\n-                        }\n-                        (ty::Term::Const(normalized_ct), ty::Term::Const(ct)) => {\n-                            infer::ValuePairs::Consts(ExpectedFound::new(\n-                                is_normalized_ty_expected,\n-                                normalized_ct,\n-                                ct,\n-                            ))\n-                        }\n-                        (_, _) => span_bug!(\n-                            obligation.cause.span,\n-                            \"found const or type where other expected\"\n-                        ),\n-                    });\n+                    values = Some(infer::ValuePairs::Terms(ExpectedFound::new(\n+                        is_normalized_ty_expected,\n+                        normalized_ty,\n+                        data.term,\n+                    )));\n                     err_buf = error;\n                     err = &err_buf;\n                 }"}, {"sha": "5bb528458c59e07941570607ad8e0fcabb32d45f", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -377,9 +377,9 @@ fn compare_predicate_entailment<'tcx>(\n                 &mut diag,\n                 &cause,\n                 trait_err_span.map(|sp| (sp, \"type in trait\".to_owned())),\n-                Some(infer::ValuePairs::Types(ExpectedFound {\n-                    expected: trait_fty,\n-                    found: impl_fty,\n+                Some(infer::ValuePairs::Terms(ExpectedFound {\n+                    expected: trait_fty.into(),\n+                    found: impl_fty.into(),\n                 })),\n                 &terr,\n                 false,\n@@ -1068,9 +1068,9 @@ crate fn compare_const_impl<'tcx>(\n                 &mut diag,\n                 &cause,\n                 trait_c_span.map(|span| (span, \"type in trait\".to_owned())),\n-                Some(infer::ValuePairs::Types(ExpectedFound {\n-                    expected: trait_ty,\n-                    found: impl_ty,\n+                Some(infer::ValuePairs::Terms(ExpectedFound {\n+                    expected: trait_ty.into(),\n+                    found: impl_ty.into(),\n                 })),\n                 &terr,\n                 false,"}, {"sha": "1ac72e4b90c75d0f4455b760b83e14e30608158e", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(());\n    |     ^^^ lifetime mismatch\n    |\n-   = note: expected type `&'a ()`\n-              found type `&()`\n+   = note: expected reference `&'a ()`\n+                   found type `&()`\n note: the lifetime requirement is introduced here\n   --> $DIR/higher-ranked-projection.rs:15:33\n    |"}, {"sha": "2aca8faff9f2c51bf00128d7323b7d499f0e2ab1", "filename": "src/test/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be236d7fc2bab5edbd62d5250f62b448bbbaf858/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be236d7fc2bab5edbd62d5250f62b448bbbaf858/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=be236d7fc2bab5edbd62d5250f62b448bbbaf858", "patch": "@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     take_foo(|a: &i32| a);\n    |     ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&i32`\n-              found type `&i32`\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/issue-79187-2.rs:9:14\n    |\n@@ -42,8 +42,8 @@ error[E0308]: mismatched types\n LL |     take_foo(|a: &i32| -> &i32 { a });\n    |     ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&i32`\n-              found type `&i32`\n+   = note: expected reference `&i32`\n+              found reference `&i32`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n   --> $DIR/issue-79187-2.rs:10:14\n    |"}]}