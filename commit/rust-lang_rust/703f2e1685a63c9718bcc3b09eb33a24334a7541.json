{"sha": "703f2e1685a63c9718bcc3b09eb33a24334a7541", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwM2YyZTE2ODVhNjNjOTcxOGJjYzNiMDllYjMzYTI0MzM0YTc1NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T08:08:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T08:08:20Z"}, "message": "Auto merge of #85041 - mibac138:suggest-generics, r=estebank\n\nSuggest adding a type parameter for impls\n\nAdd a new suggestion upon encountering an unknown type in a `impl` that suggests adding a new type parameter. This diagnostic suggests to add a new type parameter even though it may be a const parameter, however after adding the parameter and running rustc again a follow up error steers the user to change the type parameter to a const parameter.\n\n```rust\nstruct X<const C: ()>();\nimpl X<C> {}\n```\nsuggests\n```\nerror[E0412]: cannot find type `C` in this scope\n --> bar.rs:2:8\n  |\n1 | struct X<const C: ()>();\n  | ------------------------ similarly named struct `X` defined here\n2 | impl X<C> {}\n  |        ^\n  |\nhelp: a struct with a similar name exists\n  |\n2 | impl X<X> {}\n  |        ^\nhelp: you might be missing a type parameter\n  |\n2 | impl<C> X<C> {}\n  |     ^^^\n```\nAfter adding a type parameter the code now becomes\n```rust\nstruct X<const C: ()>();\nimpl<C> X<C> {}\n```\nand the error now fully steers the user towards the correct code\n```\nerror[E0747]: type provided when a constant was expected\n --> bar.rs:2:11\n  |\n2 | impl<C> X<C> {}\n  |           ^\n  |\nhelp: consider changing this type parameter to be a `const` generic\n  |\n2 | impl<const C: ()> X<C> {}\n  |      ^^^^^^^^^^^\n```\nr? `@estebank`\nSomewhat related #84946", "tree": {"sha": "dfb1e19f4dee3445caeb1936022fc56eb14d0105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb1e19f4dee3445caeb1936022fc56eb14d0105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/703f2e1685a63c9718bcc3b09eb33a24334a7541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/703f2e1685a63c9718bcc3b09eb33a24334a7541", "html_url": "https://github.com/rust-lang/rust/commit/703f2e1685a63c9718bcc3b09eb33a24334a7541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/703f2e1685a63c9718bcc3b09eb33a24334a7541/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d07257ed46c70bcaf719e15882af539d0a5155", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d07257ed46c70bcaf719e15882af539d0a5155", "html_url": "https://github.com/rust-lang/rust/commit/72d07257ed46c70bcaf719e15882af539d0a5155"}, {"sha": "4c72efc8167405ca1cc3002266a9bf15f70dafb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c72efc8167405ca1cc3002266a9bf15f70dafb3", "html_url": "https://github.com/rust-lang/rust/commit/4c72efc8167405ca1cc3002266a9bf15f70dafb3"}], "stats": {"total": 199, "additions": 190, "deletions": 9}, "files": [{"sha": "03b578d4adeec235d60aa34654cfbdc1962c2845", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/703f2e1685a63c9718bcc3b09eb33a24334a7541/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703f2e1685a63c9718bcc3b09eb33a24334a7541/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=703f2e1685a63c9718bcc3b09eb33a24334a7541", "patch": "@@ -6,7 +6,10 @@ use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::visit::FnKind;\n-use rustc_ast::{self as ast, Expr, ExprKind, Item, ItemKind, NodeId, Path, Ty, TyKind};\n+use rustc_ast::{\n+    self as ast, Expr, ExprKind, GenericParam, GenericParamKind, Item, ItemKind, NodeId, Path, Ty,\n+    TyKind,\n+};\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, SuggestionStyle};\n@@ -1600,8 +1603,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         if !self.diagnostic_metadata.currently_processing_generics && !single_uppercase_char {\n             return None;\n         }\n-        match (self.diagnostic_metadata.current_item, single_uppercase_char) {\n-            (Some(Item { kind: ItemKind::Fn(..), ident, .. }), _) if ident.name == sym::main => {\n+        match (self.diagnostic_metadata.current_item, single_uppercase_char, self.diagnostic_metadata.currently_processing_generics) {\n+            (Some(Item { kind: ItemKind::Fn(..), ident, .. }), _, _) if ident.name == sym::main => {\n                 // Ignore `fn main()` as we don't want to suggest `fn main<T>()`\n             }\n             (\n@@ -1613,9 +1616,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         | kind @ ItemKind::Union(..),\n                     ..\n                 }),\n-                true,\n+                true, _\n             )\n-            | (Some(Item { kind, .. }), false) => {\n+            // Without the 2nd `true`, we'd suggest `impl <T>` for `impl T` when a type `T` isn't found\n+            | (Some(Item { kind: kind @ ItemKind::Impl(..), .. }), true, true)\n+            | (Some(Item { kind, .. }), false, _) => {\n                 // Likely missing type parameter.\n                 if let Some(generics) = kind.generics() {\n                     if span.overlaps(generics.span) {\n@@ -1633,6 +1638,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     let (span, sugg) = if let [.., param] = &generics.params[..] {\n                         let span = if let [.., bound] = &param.bounds[..] {\n                             bound.span()\n+                        } else if let GenericParam {\n+                            kind: GenericParamKind::Const { ty, kw_span: _, default  }, ..\n+                        } = param {\n+                            default.as_ref().map(|def| def.value.span).unwrap_or(ty.span)\n                         } else {\n                             param.ident.span\n                         };"}, {"sha": "2e3132c2eb7b640072a2d1985414a4a0951a7149", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=703f2e1685a63c9718bcc3b09eb33a24334a7541", "patch": "@@ -5,7 +5,16 @@ LL | struct A<const N: u8>;\n    | ---------------------- similarly named struct `A` defined here\n LL | trait Foo {}\n LL | impl Foo for A<N> {}\n-   |                ^ help: a struct with a similar name exists: `A`\n+   |                ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | impl Foo for A<A> {}\n+   |                ^\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N> Foo for A<N> {}\n+   |     ^^^\n \n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/diagnostics.rs:16:32\n@@ -14,7 +23,16 @@ LL | struct A<const N: u8>;\n    | ---------------------- similarly named struct `A` defined here\n ...\n LL | impl<const N: u8> Foo for C<N, T> {}\n-   |                                ^ help: a struct with a similar name exists: `A`\n+   |                                ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | impl<const N: u8> Foo for C<N, A> {}\n+   |                                ^\n+help: you might be missing a type parameter\n+   |\n+LL | impl<const N: u8, T> Foo for C<N, T> {}\n+   |                 ^^^\n \n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:7:16"}, {"sha": "15dc5ef797b631c59fa67f85d17cbb76d801a3cd", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.rs?ref=703f2e1685a63c9718bcc3b09eb33a24334a7541", "patch": "@@ -0,0 +1,22 @@\n+#![allow(incomplete_features)]\n+#![feature(const_generics_defaults)]\n+\n+struct X<const N: u8>();\n+\n+impl X<N> {}\n+//~^ ERROR cannot find type `N` in this scope\n+//~| ERROR unresolved item provided when a constant was expected\n+impl<T, const A: u8 = 2> X<N> {}\n+//~^ ERROR cannot find type `N` in this scope\n+//~| ERROR defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+//~| ERROR unresolved item provided when a constant was expected\n+\n+fn foo(_: T) where T: Send {}\n+//~^ ERROR cannot find type `T` in this scope\n+//~| ERROR cannot find type `T` in this scope\n+\n+fn bar<const N: u8>(_: A) {}\n+//~^ ERROR cannot find type `A` in this scope\n+\n+fn main() {\n+}"}, {"sha": "985a9bb2a3f6a8867c8ad9c386f8a68619b126c6", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=703f2e1685a63c9718bcc3b09eb33a24334a7541", "patch": "@@ -0,0 +1,121 @@\n+error[E0412]: cannot find type `N` in this scope\n+  --> $DIR/missing-type-parameter2.rs:6:8\n+   |\n+LL | struct X<const N: u8>();\n+   | ------------------------ similarly named struct `X` defined here\n+LL | \n+LL | impl X<N> {}\n+   |        ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | impl X<X> {}\n+   |        ^\n+help: you might be missing a type parameter\n+   |\n+LL | impl<N> X<N> {}\n+   |     ^^^\n+\n+error[E0412]: cannot find type `N` in this scope\n+  --> $DIR/missing-type-parameter2.rs:9:28\n+   |\n+LL | impl<T, const A: u8 = 2> X<N> {}\n+   |      -                     ^\n+   |      |\n+   |      similarly named type parameter `T` defined here\n+   |\n+help: a type parameter with a similar name exists\n+   |\n+LL | impl<T, const A: u8 = 2> X<T> {}\n+   |                            ^\n+help: you might be missing a type parameter\n+   |\n+LL | impl<T, const A: u8 = 2, N> X<N> {}\n+   |                        ^^^\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/missing-type-parameter2.rs:14:20\n+   |\n+LL | struct X<const N: u8>();\n+   | ------------------------ similarly named struct `X` defined here\n+...\n+LL | fn foo(_: T) where T: Send {}\n+   |                    ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | fn foo(_: T) where X: Send {}\n+   |                    ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo<T>(_: T) where T: Send {}\n+   |       ^^^\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/missing-type-parameter2.rs:14:11\n+   |\n+LL | struct X<const N: u8>();\n+   | ------------------------ similarly named struct `X` defined here\n+...\n+LL | fn foo(_: T) where T: Send {}\n+   |           ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | fn foo(_: X) where T: Send {}\n+   |           ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn foo<T>(_: T) where T: Send {}\n+   |       ^^^\n+\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/missing-type-parameter2.rs:18:24\n+   |\n+LL | struct X<const N: u8>();\n+   | ------------------------ similarly named struct `X` defined here\n+...\n+LL | fn bar<const N: u8>(_: A) {}\n+   |                        ^\n+   |\n+help: a struct with a similar name exists\n+   |\n+LL | fn bar<const N: u8>(_: X) {}\n+   |                        ^\n+help: you might be missing a type parameter\n+   |\n+LL | fn bar<const N: u8, A>(_: A) {}\n+   |                   ^^^\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/missing-type-parameter2.rs:6:8\n+   |\n+LL | impl X<N> {}\n+   |        ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl X<{ N }> {}\n+   |        ^   ^\n+\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/missing-type-parameter2.rs:9:15\n+   |\n+LL | impl<T, const A: u8 = 2> X<N> {}\n+   |               ^\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/missing-type-parameter2.rs:9:28\n+   |\n+LL | impl<T, const A: u8 = 2> X<N> {}\n+   |                            ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl<T, const A: u8 = 2> X<{ N }> {}\n+   |                            ^   ^\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0412, E0747.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "432ddf2dcdbdc3d101f5fb35cbcf9cfc1f253d5c", "filename": "src/test/ui/traits/issue-75627.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-75627.stderr?ref=703f2e1685a63c9718bcc3b09eb33a24334a7541", "patch": "@@ -2,7 +2,9 @@ error[E0412]: cannot find type `T` in this scope\n   --> $DIR/issue-75627.rs:3:26\n    |\n LL | unsafe impl Send for Foo<T> {}\n-   |                          ^ not found in this scope\n+   |            -             ^ not found in this scope\n+   |            |\n+   |            help: you might be missing a type parameter: `<T>`\n \n error: aborting due to previous error\n "}, {"sha": "e63740c4ea928df9dc9a59faf8cfa7280735ef61", "filename": "src/test/ui/traits/issue-78372.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703f2e1685a63c9718bcc3b09eb33a24334a7541/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-78372.stderr?ref=703f2e1685a63c9718bcc3b09eb33a24334a7541", "patch": "@@ -13,9 +13,18 @@ error[E0412]: cannot find type `U` in this scope\n   --> $DIR/issue-78372.rs:3:31\n    |\n LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n-   |      -                        ^ help: a type parameter with a similar name exists: `T`\n+   |      -                        ^\n    |      |\n    |      similarly named type parameter `T` defined here\n+   |\n+help: a type parameter with a similar name exists\n+   |\n+LL | impl<T> DispatchFromDyn<Smaht<T, MISC>> for T {}\n+   |                               ^\n+help: you might be missing a type parameter\n+   |\n+LL | impl<T, U> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |       ^^^\n \n error[E0412]: cannot find type `MISC` in this scope\n   --> $DIR/issue-78372.rs:3:34"}]}