{"sha": "904c6c43c4c59eceeebcd473e383ff86801a815c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNGM2YzQzYzRjNTllY2VlZWJjZDQ3M2UzODNmZjg2ODAxYTgxNWM=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-10-02T00:43:19Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-10-07T23:44:05Z"}, "message": "lex raw string literals, like r#\"blah\"#\n\nRaw string literals are lexed into regular string literals. This is okay\nfor them to \"work\" and be usable/testable, but the pretty-printer does\nnot know about them yet and will just emit regular string literals.", "tree": {"sha": "eae3b6448240fe736779c93e87497b10da14f26a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae3b6448240fe736779c93e87497b10da14f26a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904c6c43c4c59eceeebcd473e383ff86801a815c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904c6c43c4c59eceeebcd473e383ff86801a815c", "html_url": "https://github.com/rust-lang/rust/commit/904c6c43c4c59eceeebcd473e383ff86801a815c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904c6c43c4c59eceeebcd473e383ff86801a815c/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e007f947479fc65cbff0e365ee26d45a9aa908d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e007f947479fc65cbff0e365ee26d45a9aa908d4", "html_url": "https://github.com/rust-lang/rust/commit/e007f947479fc65cbff0e365ee26d45a9aa908d4"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "902c7f27fe6ce53f650bf1ade2c40edf3c3d1d13", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=904c6c43c4c59eceeebcd473e383ff86801a815c", "patch": "@@ -213,10 +213,22 @@ fn byte_offset(rdr: &StringReader, pos: BytePos) -> BytePos {\n     (pos - rdr.filemap.start_pos)\n }\n \n+/// Calls `f` with a string slice of the source text spanning from `start`\n+/// up to but excluding `rdr.last_pos`, meaning the slice does not include\n+/// the character `rdr.curr`.\n pub fn with_str_from<T>(rdr: @mut StringReader, start: BytePos, f: &fn(s: &str) -> T) -> T {\n+    with_str_from_to(rdr, start, rdr.last_pos, f)\n+}\n+\n+/// Calls `f` with astring slice of the source text spanning from `start`\n+/// up to but excluding `end`.\n+fn with_str_from_to<T>(rdr: @mut StringReader,\n+                       start: BytePos,\n+                       end: BytePos,\n+                       f: &fn(s: &str) -> T) -> T {\n     f(rdr.src.slice(\n             byte_offset(rdr, start).to_uint(),\n-            byte_offset(rdr, rdr.last_pos).to_uint()))\n+            byte_offset(rdr, end).to_uint()))\n }\n \n // EFFECT: advance the StringReader by one character. If a newline is\n@@ -612,7 +624,10 @@ fn ident_continue(c: char) -> bool {\n // EFFECT: updates the interner\n fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n     let c = rdr.curr;\n-    if ident_start(c) {\n+    if ident_start(c) && nextch(rdr) != '\"' && nextch(rdr) != '#' {\n+        // Note: r as in r\" or r#\" is part of a raw string literal,\n+        // not an identifier, and is handled further down.\n+\n         let start = rdr.last_pos;\n         while ident_continue(rdr.curr) {\n             bump(rdr);\n@@ -829,6 +844,47 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n         bump(rdr);\n         return token::LIT_STR(str_to_ident(accum_str));\n       }\n+      'r' => {\n+        let start_bpos = rdr.last_pos;\n+        bump(rdr);\n+        let mut hash_count = 0u;\n+        while rdr.curr == '#' {\n+            bump(rdr);\n+            hash_count += 1;\n+        }\n+        if rdr.curr != '\"' {\n+            fatal_span_char(rdr, start_bpos, rdr.last_pos,\n+                            ~\"only `#` is allowed in raw string delimitation; \\\n+                              found illegal character\",\n+                            rdr.curr);\n+        }\n+        bump(rdr);\n+        let content_start_bpos = rdr.last_pos;\n+        let mut content_end_bpos;\n+        'outer: loop {\n+            if is_eof(rdr) {\n+                fatal_span(rdr, start_bpos, rdr.last_pos,\n+                           ~\"unterminated raw string\");\n+            }\n+            if rdr.curr == '\"' {\n+                content_end_bpos = rdr.last_pos;\n+                for _ in range(0, hash_count) {\n+                    bump(rdr);\n+                    if rdr.curr != '#' {\n+                        continue 'outer;\n+                    }\n+                }\n+                break;\n+            }\n+            bump(rdr);\n+        }\n+        bump(rdr);\n+        let str_content = with_str_from_to(rdr,\n+                                           content_start_bpos,\n+                                           content_end_bpos,\n+                                           str_to_ident);\n+        return token::LIT_STR(str_content);\n+      }\n       '-' => {\n         if nextch(rdr) == '>' {\n             bump(rdr);\n@@ -987,6 +1043,14 @@ mod test {\n         assert_eq!(tok, token::LIFETIME(id));\n     }\n \n+    #[test] fn raw_string() {\n+        let env = setup(@\"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\");\n+        let TokenAndSpan {tok, sp: _} =\n+            env.string_reader.next_token();\n+        let id = token::str_to_ident(\"\\\"#a\\\\b\\x00c\\\"\");\n+        assert_eq!(tok, token::LIT_STR(id));\n+    }\n+\n     #[test] fn line_doc_comments() {\n         assert!(!is_line_non_doc_comment(\"///\"));\n         assert!(!is_line_non_doc_comment(\"/// blah\"));"}, {"sha": "83afb33b641cf82090c9ee82bb7b3aef275ef47c", "filename": "src/test/compile-fail/raw-str-delim.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Fcompile-fail%2Fraw-str-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Fcompile-fail%2Fraw-str-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fraw-str-delim.rs?ref=904c6c43c4c59eceeebcd473e383ff86801a815c", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static s: &'static str =\n+    r#x\"#\"x# //~ ERROR only `#` is allowed in raw string delimitation; found illegal character\n+;"}, {"sha": "3e161041711db59d285c88a68d700fa8d5637d8b", "filename": "src/test/compile-fail/raw-str-unbalanced.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Fcompile-fail%2Fraw-str-unbalanced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Fcompile-fail%2Fraw-str-unbalanced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fraw-str-unbalanced.rs?ref=904c6c43c4c59eceeebcd473e383ff86801a815c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static s: &'static str =\n+    r#\"\n+      \"## //~ ERROR expected `;` but found `#`\n+;"}, {"sha": "4151cf32346ce4fde5636b886c5bb1c8dbbc1633", "filename": "src/test/compile-fail/raw-str-unterminated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Fcompile-fail%2Fraw-str-unterminated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Fcompile-fail%2Fraw-str-unterminated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fraw-str-unterminated.rs?ref=904c6c43c4c59eceeebcd473e383ff86801a815c", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static s: &'static str =\n+    r#\" string literal goes on\n+        and on\n+    //~^^ ERROR unterminated raw string"}, {"sha": "bfe5326043983dabdf4f0691c135c77ab4af648a", "filename": "src/test/run-pass/raw-str.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Frun-pass%2Fraw-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904c6c43c4c59eceeebcd473e383ff86801a815c/src%2Ftest%2Frun-pass%2Fraw-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fraw-str.rs?ref=904c6c43c4c59eceeebcd473e383ff86801a815c"}]}