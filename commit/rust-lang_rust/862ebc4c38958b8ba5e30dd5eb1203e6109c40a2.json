{"sha": "862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MmViYzRjMzg5NThiOGJhNWUzMGRkNWViMTIwM2U2MTA5YzQwYTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-21T06:33:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-26T22:29:43Z"}, "message": "Various changes to string format diagnostics\n\n- Point at opening mismatched formatting brace\n- Account for differences between raw and regular strings\n- Account for differences between the code snippet and `InternedString`\n- Add more tests", "tree": {"sha": "35e8170000c41269ce99e828330ce3efe7ac65d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35e8170000c41269ce99e828330ce3efe7ac65d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "html_url": "https://github.com/rust-lang/rust/commit/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f", "html_url": "https://github.com/rust-lang/rust/commit/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f"}], "stats": {"total": 475, "additions": 415, "deletions": 60}, "files": [{"sha": "fc8325e5915c4a8275719da50e7e7da82c7401fc", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 104, "deletions": 40, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -123,8 +123,9 @@ pub struct ParseError {\n     pub description: string::String,\n     pub note: Option<string::String>,\n     pub label: string::String,\n-    pub start: usize,\n-    pub end: usize,\n+    pub start: SpanIndex,\n+    pub end: SpanIndex,\n+    pub secondary_label: Option<(string::String, SpanIndex, SpanIndex)>,\n }\n \n /// The parser structure for interpreting the input format string. This is\n@@ -142,22 +143,39 @@ pub struct Parser<'a> {\n     curarg: usize,\n     /// `Some(raw count)` when the string is \"raw\", used to position spans correctly\n     style: Option<usize>,\n-    /// How many newlines have been seen in the string so far, to adjust the error spans\n-    seen_newlines: usize,\n     /// Start and end byte offset of every successfully parsed argument\n     pub arg_places: Vec<(usize, usize)>,\n+    /// Characters that need to be shifted\n+    skips: Vec<usize>,\n+    /// Span offset of the last opening brace seen, used for error reporting\n+    last_opening_brace_pos: Option<SpanIndex>,\n+    /// Wether the source string is comes from `println!` as opposed to `format!` or `print!`\n+    append_newline: bool,\n+}\n+\n+#[derive(Clone, Copy, Debug)]\n+pub struct SpanIndex(usize);\n+\n+impl SpanIndex {\n+    pub fn unwrap(self) -> usize {\n+        self.0\n+    }\n }\n \n impl<'a> Iterator for Parser<'a> {\n     type Item = Piece<'a>;\n \n     fn next(&mut self) -> Option<Piece<'a>> {\n-        let raw = self.style.map(|raw| raw + self.seen_newlines).unwrap_or(0);\n+        let raw = self.raw();\n         if let Some(&(pos, c)) = self.cur.peek() {\n             match c {\n                 '{' => {\n+                    let curr_last_brace = self.last_opening_brace_pos;\n+                    self.last_opening_brace_pos = Some(self.to_span_index(pos));\n                     self.cur.next();\n                     if self.consume('{') {\n+                        self.last_opening_brace_pos = curr_last_brace;\n+\n                         Some(String(self.string(pos + 1)))\n                     } else {\n                         let arg = self.argument();\n@@ -174,7 +192,7 @@ impl<'a> Iterator for Parser<'a> {\n                     if self.consume('}') {\n                         Some(String(self.string(pos + 1)))\n                     } else {\n-                        let err_pos = pos + raw + 1;\n+                        let err_pos = self.to_span_index(pos);\n                         self.err_with_note(\n                             \"unmatched `}` found\",\n                             \"unmatched `}`\",\n@@ -186,7 +204,6 @@ impl<'a> Iterator for Parser<'a> {\n                     }\n                 }\n                 '\\n' => {\n-                    self.seen_newlines += 1;\n                     Some(String(self.string(pos)))\n                 }\n                 _ => Some(String(self.string(pos))),\n@@ -199,15 +216,22 @@ impl<'a> Iterator for Parser<'a> {\n \n impl<'a> Parser<'a> {\n     /// Creates a new parser for the given format string\n-    pub fn new(s: &'a str, style: Option<usize>) -> Parser<'a> {\n+    pub fn new(\n+        s: &'a str,\n+        style: Option<usize>,\n+        skips: Vec<usize>,\n+        append_newline: bool,\n+    ) -> Parser<'a> {\n         Parser {\n             input: s,\n             cur: s.char_indices().peekable(),\n             errors: vec![],\n             curarg: 0,\n             style,\n-            seen_newlines: 0,\n             arg_places: vec![],\n+            skips,\n+            last_opening_brace_pos: None,\n+            append_newline,\n         }\n     }\n \n@@ -218,15 +242,16 @@ impl<'a> Parser<'a> {\n         &mut self,\n         description: S1,\n         label: S2,\n-        start: usize,\n-        end: usize,\n+        start: SpanIndex,\n+        end: SpanIndex,\n     ) {\n         self.errors.push(ParseError {\n             description: description.into(),\n             note: None,\n             label: label.into(),\n             start,\n             end,\n+            secondary_label: None,\n         });\n     }\n \n@@ -238,15 +263,16 @@ impl<'a> Parser<'a> {\n         description: S1,\n         label: S2,\n         note: S3,\n-        start: usize,\n-        end: usize,\n+        start: SpanIndex,\n+        end: SpanIndex,\n     ) {\n         self.errors.push(ParseError {\n             description: description.into(),\n             note: Some(note.into()),\n             label: label.into(),\n             start,\n             end,\n+            secondary_label: None,\n         });\n     }\n \n@@ -266,47 +292,86 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn raw(&self) -> usize {\n+        self.style.map(|raw| raw + 1).unwrap_or(0)\n+    }\n+\n+    fn to_span_index(&self, pos: usize) -> SpanIndex {\n+        let mut pos = pos;\n+        for skip in &self.skips {\n+            if pos > *skip {\n+                pos += 1;\n+            } else if pos == *skip && self.raw() == 0 {\n+                pos += 1;\n+            } else {\n+                break;\n+            }\n+        }\n+        SpanIndex(self.raw() + pos + 1)\n+    }\n+\n     /// Forces consumption of the specified character. If the character is not\n     /// found, an error is emitted.\n     fn must_consume(&mut self, c: char) -> Option<usize> {\n         self.ws();\n-        let raw = self.style.unwrap_or(0);\n \n-        let padding = raw + self.seen_newlines;\n         if let Some(&(pos, maybe)) = self.cur.peek() {\n             if c == maybe {\n                 self.cur.next();\n                 Some(pos)\n             } else {\n-                let pos = pos + raw + 1;\n-                self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n-                         format!(\"expected `{}`\", c),\n-                         pos,\n-                         pos);\n+                let pos = self.to_span_index(pos);\n+                let description = format!(\"expected `'}}'`, found `{:?}`\", maybe);\n+                let label = \"expected `}`\".to_owned();\n+                let (note, secondary_label) = if c == '}' {\n+                    (Some(\"if you intended to print `{`, you can escape it using `{{`\".to_owned()),\n+                     self.last_opening_brace_pos.map(|pos| {\n+                        (\"because of this opening brace\".to_owned(), pos, pos)\n+                     }))\n+                } else {\n+                    (None, None)\n+                };\n+                self.errors.push(ParseError {\n+                    description,\n+                    note,\n+                    label,\n+                    start: pos,\n+                    end: pos,\n+                    secondary_label,\n+                });\n                 None\n             }\n         } else {\n-            let msg = format!(\"expected `{:?}` but string was terminated\", c);\n-            // point at closing `\"`, unless the last char is `\\n` to account for `println`\n-            let pos = match self.input.chars().last() {\n-                Some('\\n') => self.input.len(),\n-                _ => self.input.len() + 1,\n-            };\n+            let description = format!(\"expected `{:?}` but string was terminated\", c);\n+            // point at closing `\"`\n+            let pos = self.input.len() - if self.append_newline { 1 } else { 0 };\n+            let pos = self.to_span_index(pos);\n             if c == '}' {\n-                self.err_with_note(msg,\n-                                   format!(\"expected `{:?}`\", c),\n-                                   \"if you intended to print `{`, you can escape it using `{{`\",\n-                                   pos + padding,\n-                                   pos + padding);\n+                let label = format!(\"expected `{:?}`\", c);\n+                let (note, secondary_label) = if c == '}' {\n+                    (Some(\"if you intended to print `{`, you can escape it using `{{`\".to_owned()),\n+                     self.last_opening_brace_pos.map(|pos| {\n+                        (\"because of this opening brace\".to_owned(), pos, pos)\n+                     }))\n+                } else {\n+                    (None, None)\n+                };\n+                self.errors.push(ParseError {\n+                    description,\n+                    note,\n+                    label,\n+                    start: pos,\n+                    end: pos,\n+                    secondary_label,\n+                });\n             } else {\n-                self.err(msg, format!(\"expected `{:?}`\", c), pos, pos);\n+                self.err(description, format!(\"expected `{:?}`\", c), pos, pos);\n             }\n             None\n         }\n     }\n \n-    /// Consumes all whitespace characters until the first non-whitespace\n-    /// character\n+    /// Consumes all whitespace characters until the first non-whitespace character\n     fn ws(&mut self) {\n         while let Some(&(_, c)) = self.cur.peek() {\n             if c.is_whitespace() {\n@@ -334,8 +399,7 @@ impl<'a> Parser<'a> {\n         &self.input[start..self.input.len()]\n     }\n \n-    /// Parses an Argument structure, or what's contained within braces inside\n-    /// the format string\n+    /// Parses an Argument structure, or what's contained within braces inside the format string\n     fn argument(&mut self) -> Argument<'a> {\n         let pos = self.position();\n         let format = self.format();\n@@ -371,8 +435,8 @@ impl<'a> Parser<'a> {\n                     self.err_with_note(format!(\"invalid argument name `{}`\", invalid_name),\n                                        \"invalid argument name\",\n                                        \"argument names cannot start with an underscore\",\n-                                       pos + 1, // add 1 to account for leading `{`\n-                                       pos + 1 + invalid_name.len());\n+                                       self.to_span_index(pos),\n+                                       self.to_span_index(pos + invalid_name.len()));\n                     Some(ArgumentNamed(invalid_name))\n                 },\n \n@@ -553,7 +617,7 @@ mod tests {\n     use super::*;\n \n     fn same(fmt: &'static str, p: &[Piece<'static>]) {\n-        let parser = Parser::new(fmt, None);\n+        let parser = Parser::new(fmt, None, vec![], false);\n         assert!(parser.collect::<Vec<Piece<'static>>>() == p);\n     }\n \n@@ -569,7 +633,7 @@ mod tests {\n     }\n \n     fn musterr(s: &str) {\n-        let mut p = Parser::new(s, None);\n+        let mut p = Parser::new(s, None, vec![], false);\n         p.next();\n         assert!(!p.errors.is_empty());\n     }"}, {"sha": "4b188d2517511217ab2a02ca7b5819feb41b88a2", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n     {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0, None);\n+        let parser = Parser::new(&self.0, None, vec![], false);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -293,7 +293,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         }).collect::<FxHashMap<String, String>>();\n         let empty_string = String::new();\n \n-        let parser = Parser::new(&self.0, None);\n+        let parser = Parser::new(&self.0, None, vec![], false);\n         parser.map(|p|\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "220765fd8c732c17e9c99c7c391fe3056e4a7c15", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -765,18 +765,74 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         }\n     };\n \n-    let is_literal = match ecx.source_map().span_to_snippet(fmt_sp) {\n-        Ok(ref s) if s.starts_with(\"\\\"\") || s.starts_with(\"r#\") => true,\n-        _ => false,\n+    let (is_literal, fmt_snippet) = match ecx.source_map().span_to_snippet(fmt_sp) {\n+        Ok(s) => (s.starts_with(\"\\\"\") || s.starts_with(\"r#\"), Some(s)),\n+        _ => (false, None),\n     };\n \n-    let fmt_str = &*fmt.node.0.as_str();\n     let str_style = match fmt.node.1 {\n         ast::StrStyle::Cooked => None,\n-        ast::StrStyle::Raw(raw) => Some(raw as usize),\n+        ast::StrStyle::Raw(raw) => {\n+            Some(raw as usize)\n+        },\n     };\n \n-    let mut parser = parse::Parser::new(fmt_str, str_style);\n+    /// Find the indices of all characters that have been processed and differ between the actual\n+    /// written code (code snippet) and the `InternedString` that get's processed in the `Parser`\n+    /// in order to properly synthethise the intra-string `Span`s for error diagnostics.\n+    fn find_skips(snippet: &str, is_raw: bool) -> Vec<usize> {\n+        let mut eat_ws = false;\n+        let mut s = snippet.chars().enumerate().peekable();\n+        let mut skips = vec![];\n+        while let Some((pos, c)) = s.next() {\n+            match (c, s.peek()) {\n+                // skip whitespace and empty lines ending in '\\\\'\n+                ('\\\\', Some((next_pos, '\\n'))) if !is_raw => {\n+                    eat_ws = true;\n+                    skips.push(pos);\n+                    skips.push(*next_pos);\n+                    let _ = s.next();\n+                }\n+                ('\\\\', Some((next_pos, '\\n'))) |\n+                ('\\\\', Some((next_pos, 'n'))) |\n+                ('\\\\', Some((next_pos, 't'))) if eat_ws => {\n+                    skips.push(pos);\n+                    skips.push(*next_pos);\n+                    let _ = s.next();\n+                }\n+                (' ', _) |\n+                ('\\n', _) |\n+                ('\\t', _) if eat_ws => {\n+                    skips.push(pos);\n+                }\n+                ('\\\\', Some((next_pos, 'n'))) |\n+                ('\\\\', Some((next_pos, 't'))) |\n+                ('\\\\', Some((next_pos, '\\\\'))) |\n+                ('\\\\', Some((next_pos, '\\''))) |\n+                ('\\\\', Some((next_pos, '\\\"'))) => {\n+                    skips.push(*next_pos);\n+                    let _ = s.next();\n+                }\n+                _ if eat_ws => {  // `take_while(|c| c.is_whitespace())`\n+                    eat_ws = false;\n+                }\n+                _ => {}\n+            }\n+        }\n+        skips\n+    }\n+\n+    let skips = if let (true, Some(ref snippet)) = (is_literal, fmt_snippet.as_ref()) {\n+        let r_start = str_style.map(|r| r + 1).unwrap_or(0);\n+        let r_end = str_style.map(|r| r).unwrap_or(0);\n+        let s = &snippet[r_start + 1..snippet.len() - r_end - 1];\n+        find_skips(s, str_style.is_some())\n+    } else {\n+        vec![]\n+    };\n+\n+    let fmt_str = &*fmt.node.0.as_str();  // for the suggestions below\n+    let mut parser = parse::Parser::new(fmt_str, str_style, skips.clone(), append_newline);\n \n     let mut unverified_pieces = Vec::new();\n     while let Some(piece) = parser.next() {\n@@ -789,12 +845,17 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n \n     if !parser.errors.is_empty() {\n         let err = parser.errors.remove(0);\n-        let sp = fmt.span.from_inner_byte_pos(err.start, err.end);\n-        let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\", err.description));\n+        let sp = fmt.span.from_inner_byte_pos(err.start.unwrap(), err.end.unwrap());\n+        let mut e = ecx.struct_span_err(sp, &format!(\"invalid format string: {}\",\n+                                                     err.description));\n         e.span_label(sp, err.label + \" in format string\");\n         if let Some(note) = err.note {\n             e.note(&note);\n         }\n+        if let Some((label, start, end)) = err.secondary_label {\n+            let sp = fmt.span.from_inner_byte_pos(start.unwrap(), end.unwrap());\n+            e.span_label(sp, label);\n+        }\n         e.emit();\n         return DummyResult::raw_expr(sp);\n     }"}, {"sha": "fd6e41ec6fca7fadc6f857e78d4f3f60e9a2f097", "filename": "src/test/ui/fmt/format-string-error-2.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -0,0 +1,70 @@\n+// ignore-tidy-tab\n+\n+fn main() {\n+    format!(\"{\n+    a\");\n+    //~^ ERROR invalid format string\n+    format!(\"{ \\\n+\n+    b\");\n+    //~^ ERROR invalid format string\n+    format!(r#\"{ \\\n+\n+    rawc\"#);\n+    //~^^^ ERROR invalid format string\n+    format!(r#\"{ \\n\n+\\n\n+    rawd\"#);\n+    //~^^^ ERROR invalid format string\n+    format!(\"{ \\n\n+\\n\n+    e\");\n+    //~^ ERROR invalid format string\n+    format!(\"\n+    {\n+    a\");\n+    //~^ ERROR invalid format string\n+    format!(\"\n+    {\n+    a\n+    \");\n+    //~^^ ERROR invalid format string\n+    format!(\"  \\\n+    { \\\n+    \t\\\n+    b\");\n+    //~^ ERROR invalid format string\n+    format!(\"  \\\n+    { \\\n+    \t\\\n+    b \\\n+\n+    \");\n+    //~^^^ ERROR invalid format string\n+    format!(r#\"\n+raw  { \\\n+\n+    c\"#);\n+    //~^^^ ERROR invalid format string\n+    format!(r#\"\n+raw  { \\n\n+\\n\n+    d\"#);\n+    //~^^^ ERROR invalid format string\n+    format!(\"\n+  { \\n\n+\\n\n+    e\");\n+    //~^ ERROR invalid format string\n+\n+    format!(\"\n+    {asdf\n+    }\n+    \", asdf=1);\n+    // ok - this is supported\n+    format!(\"\n+    {\n+    asdf}\n+    \", asdf=1);\n+    //~^^ ERROR invalid format string\n+}"}, {"sha": "0b3f08c1fbe8d45128803b4def396768bb804b1f", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -0,0 +1,137 @@\n+error: invalid format string: expected `'}'`, found `'a'`\n+  --> $DIR/format-string-error-2.rs:5:5\n+   |\n+LL |     format!(\"{\n+   |              - because of this opening brace\n+LL |     a\");\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'b'`\n+  --> $DIR/format-string-error-2.rs:9:5\n+   |\n+LL |     format!(\"{ /\n+   |              - because of this opening brace\n+LL | \n+LL |     b\");\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'/'`\n+  --> $DIR/format-string-error-2.rs:11:18\n+   |\n+LL |     format!(r#\"{ /\n+   |                - ^ expected `}` in format string\n+   |                |\n+   |                because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'/'`\n+  --> $DIR/format-string-error-2.rs:15:18\n+   |\n+LL |     format!(r#\"{ /n\n+   |                - ^ expected `}` in format string\n+   |                |\n+   |                because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'e'`\n+  --> $DIR/format-string-error-2.rs:21:5\n+   |\n+LL |     format!(\"{ /n\n+   |              - because of this opening brace\n+LL | /n\n+LL |     e\");\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'a'`\n+  --> $DIR/format-string-error-2.rs:25:5\n+   |\n+LL |     {\n+   |     - because of this opening brace\n+LL |     a\");\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'a'`\n+  --> $DIR/format-string-error-2.rs:29:5\n+   |\n+LL |     {\n+   |     - because of this opening brace\n+LL |     a\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'b'`\n+  --> $DIR/format-string-error-2.rs:35:5\n+   |\n+LL |     { /\n+   |     - because of this opening brace\n+LL |         /\n+LL |     b\");\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'b'`\n+  --> $DIR/format-string-error-2.rs:40:5\n+   |\n+LL |     { /\n+   |     - because of this opening brace\n+LL |         /\n+LL |     b /\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'/'`\n+  --> $DIR/format-string-error-2.rs:45:8\n+   |\n+LL | raw  { /\n+   |      - ^ expected `}` in format string\n+   |      |\n+   |      because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'/'`\n+  --> $DIR/format-string-error-2.rs:50:8\n+   |\n+LL | raw  { /n\n+   |      - ^ expected `}` in format string\n+   |      |\n+   |      because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'e'`\n+  --> $DIR/format-string-error-2.rs:57:5\n+   |\n+LL |   { /n\n+   |   - because of this opening brace\n+LL | /n\n+LL |     e\");\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'a'`\n+  --> $DIR/format-string-error-2.rs:67:5\n+   |\n+LL |     {\n+   |     - because of this opening brace\n+LL |     asdf}\n+   |     ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "cca949aab636404eac04669ef7f566451026468d", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -31,7 +31,7 @@ fn main() {\n \t{\n \n \"###);\n-    //~^^ ERROR invalid format string\n+    //~^ ERROR invalid format string\n     let _ = format!(r###\"\n \n "}, {"sha": "86ab163591e0d8c90c00331ccf4a4e61a681941b", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -2,7 +2,9 @@ error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error.rs:4:16\n    |\n LL |     println!(\"{\");\n-   |                ^ expected `'}'` in format string\n+   |               -^ expected `'}'` in format string\n+   |               |\n+   |               because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n@@ -34,7 +36,9 @@ error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error.rs:13:23\n    |\n LL |     let _ = format!(\"{\");\n-   |                       ^ expected `'}'` in format string\n+   |                      -^ expected `'}'` in format string\n+   |                      |\n+   |                      because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n@@ -50,28 +54,39 @@ error: invalid format string: expected `'}'`, found `'/'`\n   --> $DIR/format-string-error.rs:17:23\n    |\n LL |     let _ = format!(\"{/}\");\n-   |                       ^ expected `}` in format string\n+   |                      -^ expected `}` in format string\n+   |                      |\n+   |                      because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:19:29\n+  --> $DIR/format-string-error.rs:19:35\n    |\n LL |     let _ = format!(\"/n/n/n{/n/n/n\");\n-   |                             ^ expected `'}'` in format string\n+   |                            -      ^ expected `'}'` in format string\n+   |                            |\n+   |                            because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/format-string-error.rs:25:3\n    |\n LL |     {\"###);\n-   |      ^ expected `'}'` in format string\n+   |     -^ expected `'}'` in format string\n+   |     |\n+   |     because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:32:1\n+  --> $DIR/format-string-error.rs:33:1\n    |\n+LL |     {\n+   |     - because of this opening brace\n LL | \n+LL | \"###);\n    | ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`"}, {"sha": "3ae8669a7f244b4ecc6e52f976ed7937c275791c", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -168,7 +168,9 @@ error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/ifmt-bad-arg.rs:51:15\n    |\n LL |     format!(\"{\"); //~ ERROR: expected `'}'` but string was terminated\n-   |               ^ expected `'}'` in format string\n+   |              -^ expected `'}'` in format string\n+   |              |\n+   |              because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n@@ -207,8 +209,12 @@ LL |         {foo}\n error: invalid format string: expected `'}'`, found `'t'`\n   --> $DIR/ifmt-bad-arg.rs:75:1\n    |\n+LL | ninth number: {\n+   |               - because of this opening brace\n LL | tenth number: {}\",\n    | ^ expected `}` in format string\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n \n error: aborting due to 28 previous errors\n "}, {"sha": "1bb6f3c1f1ffffbaae5374bc59469e463dcd3781", "filename": "src/test/ui/issues/issue-51848.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/862ebc4c38958b8ba5e30dd5eb1203e6109c40a2/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr?ref=862ebc4c38958b8ba5e30dd5eb1203e6109c40a2", "patch": "@@ -2,7 +2,9 @@ error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/issue-51848.rs:6:20\n    |\n LL |         println!(\"{\"); //~ ERROR invalid\n-   |                    ^ expected `'}'` in format string\n+   |                   -^ expected `'}'` in format string\n+   |                   |\n+   |                   because of this opening brace\n ...\n LL |     macro_with_error!();\n    |     -------------------- in this macro invocation"}]}