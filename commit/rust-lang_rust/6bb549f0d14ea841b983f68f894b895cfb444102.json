{"sha": "6bb549f0d14ea841b983f68f894b895cfb444102", "node_id": "C_kwDOAAsO6NoAKDZiYjU0OWYwZDE0ZWE4NDFiOTgzZjY4Zjg5NGI4OTVjZmI0NDQxMDI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-13T17:03:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-30T19:45:29Z"}, "message": "Allow inlining `#[inline]` functions.", "tree": {"sha": "0a21c38cdb3ce17c9df4da131dace4ebea23fe8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a21c38cdb3ce17c9df4da131dace4ebea23fe8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb549f0d14ea841b983f68f894b895cfb444102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb549f0d14ea841b983f68f894b895cfb444102", "html_url": "https://github.com/rust-lang/rust/commit/6bb549f0d14ea841b983f68f894b895cfb444102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb549f0d14ea841b983f68f894b895cfb444102/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d9092e3c99343e03abc650e91082b5c9f538b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d9092e3c99343e03abc650e91082b5c9f538b9", "html_url": "https://github.com/rust-lang/rust/commit/d1d9092e3c99343e03abc650e91082b5c9f538b9"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "ce387cb4453c1a9cea25b72e788e3f5ee76236dc", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -332,10 +332,10 @@ impl<'tcx> Inliner<'tcx> {\n     ) -> Result<(), &'static str> {\n         match callee_attrs.inline {\n             InlineAttr::Never => return Err(\"never inline hint\"),\n-            InlineAttr::Always => {}\n-            _ => {\n+            InlineAttr::Always | InlineAttr::Hint => {}\n+            InlineAttr::None => {\n                 if self.tcx.sess.mir_opt_level() <= 2 {\n-                    return Err(\"at mir-opt-level=2, only #[inline(always)] is inlined\");\n+                    return Err(\"at mir-opt-level=2, only #[inline] is inlined\");\n                 }\n             }\n         }"}, {"sha": "e19eda01b56e83639338415787a4afe0ff0a3db0", "filename": "src/test/ui/issues/issue-67552.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -1,4 +1,4 @@\n-// build-fail\n+// build-pass\n // normalize-stderr-test: \".nll/\" -> \"/\"\n \n fn main() {\n@@ -26,6 +26,5 @@ where\n         T::count(it);\n     } else {\n         rec(identity(&mut it))\n-        //~^ ERROR reached the recursion limit while instantiating\n     }\n }"}, {"sha": "cf05a72e921e01c987f23b19c0ba494f05ca1181", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1d9092e3c99343e03abc650e91082b5c9f538b9/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1d9092e3c99343e03abc650e91082b5c9f538b9/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=d1d9092e3c99343e03abc650e91082b5c9f538b9", "patch": "@@ -1,17 +0,0 @@\n-error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n-  --> $DIR/issue-67552.rs:28:9\n-   |\n-LL |         rec(identity(&mut it))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: `rec` defined here\n-  --> $DIR/issue-67552.rs:21:1\n-   |\n-LL | / fn rec<T>(mut it: T)\n-LL | | where\n-LL | |     T: Iterator,\n-   | |________________^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-67552/issue-67552.long-type.txt'\n-\n-error: aborting due to previous error\n-"}, {"sha": "a9f7be2a05bd38dfe7b08308df8acdf33b58613a", "filename": "src/test/ui/panics/location-detail-unwrap-no-file.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', <redacted>:8:9\n+thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', <redacted>:8:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "bcdc2d2564d0458c82962e48e908e788e9b96ed9", "filename": "src/test/ui/polymorphization/predicates.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fpredicates.stderr?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -1,3 +1,17 @@\n+error: item has unused generic parameters\n+  --> $DIR/predicates.rs:58:4\n+   |\n+LL | fn quux<A, B, C: Default>() -> usize\n+   |    ^^^^ -  - generic parameter `B` is unused\n+   |         |\n+   |         generic parameter `A` is unused\n+\n+error: item has unused generic parameters\n+  --> $DIR/predicates.rs:75:4\n+   |\n+LL | fn foobar<F, G>() -> usize\n+   |    ^^^^^^ - generic parameter `F` is unused\n+\n error: item has unused generic parameters\n   --> $DIR/predicates.rs:14:4\n    |\n@@ -21,20 +35,6 @@ LL | impl<'a, I, T: 'a, E> Iterator for Foo<'a, I, E>\n LL |         self.find(|_| true)\n    |                   ^^^^^^^^\n \n-error: item has unused generic parameters\n-  --> $DIR/predicates.rs:58:4\n-   |\n-LL | fn quux<A, B, C: Default>() -> usize\n-   |    ^^^^ -  - generic parameter `B` is unused\n-   |         |\n-   |         generic parameter `A` is unused\n-\n-error: item has unused generic parameters\n-  --> $DIR/predicates.rs:75:4\n-   |\n-LL | fn foobar<F, G>() -> usize\n-   |    ^^^^^^ - generic parameter `F` is unused\n-\n error: item has unused generic parameters\n   --> $DIR/predicates.rs:9:4\n    |"}, {"sha": "721c65ef3bcf75b0e60dcdba0a040888b2213b2c", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -1,5 +1,4 @@\n // build-fail\n-//~^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;\n@@ -8,4 +7,5 @@ fn main() {\n \n fn func<T: Iterator<Item = u8>>(iter: &mut T) { //~ WARN function cannot return without recursing\n     func(&mut iter.map(|x| x + 1))\n+    //~^ ERROR reached the recursion limit while instantiating\n }"}, {"sha": "cfb42f41356763f12984fa6c24ec8bac7042318e", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:9:1\n+  --> $DIR/issue-83150.rs:8:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -9,11 +9,18 @@ LL |     func(&mut iter.map(|x| x + 1))\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n-error[E0275]: overflow evaluating the requirement `Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>: Iterator`\n+error: reached the recursion limit while instantiating `func::<Map<&mut Map<&mut Map<&mu...ion/issue-83150.rs:9:24: 9:33]>>`\n+  --> $DIR/issue-83150.rs:9:5\n    |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required because of the requirements on the impl of `Iterator` for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>, [closure@$DIR/issue-83150.rs:10:24: 10:33]>`\n+LL |     func(&mut iter.map(|x| x + 1))\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `func` defined here\n+  --> $DIR/issue-83150.rs:8:1\n+   |\n+LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type.txt'\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "2d4208950f70d07a1603010365f05a13d18d4f5a", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb549f0d14ea841b983f68f894b895cfb444102/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=6bb549f0d14ea841b983f68f894b895cfb444102", "patch": "@@ -1,8 +1,8 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n-  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub fn drop<T>(_x: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate"}]}