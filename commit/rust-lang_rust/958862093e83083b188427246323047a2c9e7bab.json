{"sha": "958862093e83083b188427246323047a2c9e7bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ODg2MjA5M2U4MzA4M2IxODg0MjcyNDYzMjMwNDdhMmM5ZTdiYWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T11:43:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T11:43:38Z"}, "message": "Move docs to hir_def", "tree": {"sha": "98d280c282875be49db9ee9c397c45d35308a3ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98d280c282875be49db9ee9c397c45d35308a3ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958862093e83083b188427246323047a2c9e7bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958862093e83083b188427246323047a2c9e7bab", "html_url": "https://github.com/rust-lang/rust/commit/958862093e83083b188427246323047a2c9e7bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958862093e83083b188427246323047a2c9e7bab/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8692977d2798831d0aea434277ee54d589aa9be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8692977d2798831d0aea434277ee54d589aa9be3", "html_url": "https://github.com/rust-lang/rust/commit/8692977d2798831d0aea434277ee54d589aa9be3"}], "stats": {"total": 252, "additions": 118, "deletions": 134}, "files": [{"sha": "715270344a7a41245bd04688ec1d476a55bcd9ac", "filename": "crates/ra_assists/src/test_db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftest_db.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -9,7 +9,6 @@ use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath\n     ra_db::SourceDatabaseStorage,\n     hir::db::InternDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n-    hir::db::DefDatabaseStorage,\n     hir::db::DefDatabase2Storage,\n     hir::db::HirDatabaseStorage\n )]"}, {"sha": "4b3ec5457d56d9cd040a09f806d84b05a7237843", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -1,19 +1,19 @@\n //! FIXME: write short doc here\n \n pub(crate) mod src;\n-pub(crate) mod docs;\n \n use std::sync::Arc;\n \n use hir_def::{\n     adt::VariantData,\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n+    docs::Documentation,\n     nameres::per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    AdtId, ContainerId, CrateModuleId, EnumVariantId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalStructFieldId, Lookup, ModuleId, StructFieldId, UnionId,\n+    ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n+    ModuleId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -1024,18 +1024,17 @@ pub trait HasAttrs {\n \n impl<T: Into<AttrDef>> HasAttrs for T {\n     fn attrs(self, db: &impl DefDatabase) -> Attrs {\n-        let def = self.into();\n-        match def {\n-            AttrDef::Module(it) => db.attrs(it.id.into()),\n-            AttrDef::StructField(it) => db.attrs(StructFieldId::from(it).into()),\n-            AttrDef::Adt(it) => db.attrs(AdtId::from(it).into()),\n-            AttrDef::Function(it) => db.attrs(it.id.into()),\n-            AttrDef::EnumVariant(it) => db.attrs(EnumVariantId::from(it).into()),\n-            AttrDef::Static(it) => db.attrs(it.id.into()),\n-            AttrDef::Const(it) => db.attrs(it.id.into()),\n-            AttrDef::Trait(it) => db.attrs(it.id.into()),\n-            AttrDef::TypeAlias(it) => db.attrs(it.id.into()),\n-            AttrDef::MacroDef(it) => db.attrs(it.id.into()),\n-        }\n+        let def: AttrDef = self.into();\n+        db.attrs(def.into())\n+    }\n+}\n+\n+pub trait Docs {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation>;\n+}\n+impl<T: Into<AttrDef> + Copy> Docs for T {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        let def: AttrDef = (*self).into();\n+        db.documentation(def.into())\n     }\n }"}, {"sha": "e40efef34aeb55fef5bd03fc82b3e77a0251068c", "filename": "crates/ra_hir/src/code_model/docs.rs", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8692977d2798831d0aea434277ee54d589aa9be3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs?ref=8692977d2798831d0aea434277ee54d589aa9be3", "patch": "@@ -1,97 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use std::sync::Arc;\n-\n-use ra_syntax::ast;\n-\n-use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n-    Adt, Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static,\n-    Struct, StructField, Trait, TypeAlias, Union,\n-};\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum DocDef {\n-    Module(Module),\n-    StructField(StructField),\n-    Adt(Adt),\n-    EnumVariant(EnumVariant),\n-    Static(Static),\n-    Const(Const),\n-    Function(Function),\n-    Trait(Trait),\n-    TypeAlias(TypeAlias),\n-    MacroDef(MacroDef),\n-}\n-\n-impl_froms!(\n-    DocDef: Module,\n-    StructField,\n-    Adt(Struct, Enum, Union),\n-    EnumVariant,\n-    Static,\n-    Const,\n-    Function,\n-    Trait,\n-    TypeAlias,\n-    MacroDef\n-);\n-\n-/// Holds documentation\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct Documentation(Arc<str>);\n-\n-impl Documentation {\n-    fn new(s: &str) -> Documentation {\n-        Documentation(s.into())\n-    }\n-\n-    pub fn as_str(&self) -> &str {\n-        &*self.0\n-    }\n-}\n-\n-impl Into<String> for Documentation {\n-    fn into(self) -> String {\n-        self.as_str().to_owned()\n-    }\n-}\n-\n-pub trait Docs {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation>;\n-}\n-\n-pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n-    node.doc_comment_text().map(|it| Documentation::new(&it))\n-}\n-\n-pub(crate) fn documentation_query(\n-    db: &(impl DefDatabase + AstDatabase),\n-    def: DocDef,\n-) -> Option<Documentation> {\n-    match def {\n-        DocDef::Module(it) => docs_from_ast(&it.declaration_source(db)?.value),\n-        DocDef::StructField(it) => match it.source(db).value {\n-            FieldSource::Named(named) => docs_from_ast(&named),\n-            FieldSource::Pos(..) => None,\n-        },\n-        DocDef::Adt(it) => match it {\n-            Adt::Struct(it) => docs_from_ast(&it.source(db).value),\n-            Adt::Enum(it) => docs_from_ast(&it.source(db).value),\n-            Adt::Union(it) => docs_from_ast(&it.source(db).value),\n-        },\n-        DocDef::EnumVariant(it) => docs_from_ast(&it.source(db).value),\n-        DocDef::Static(it) => docs_from_ast(&it.source(db).value),\n-        DocDef::Const(it) => docs_from_ast(&it.source(db).value),\n-        DocDef::Function(it) => docs_from_ast(&it.source(db).value),\n-        DocDef::Trait(it) => docs_from_ast(&it.source(db).value),\n-        DocDef::TypeAlias(it) => docs_from_ast(&it.source(db).value),\n-        DocDef::MacroDef(it) => docs_from_ast(&it.source(db).value),\n-    }\n-}\n-\n-impl<T: Into<DocDef> + Copy> Docs for T {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        db.documentation((*self).into())\n-    }\n-}"}, {"sha": "2dca0f637ede5c23f516be8cea0992c60bbbec06", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -5,7 +5,6 @@ use std::sync::Arc;\n use ra_db::salsa;\n \n use crate::{\n-    debug::HirDebugDatabase,\n     ids,\n     ty::{\n         method_resolution::CrateImplBlocks,\n@@ -18,23 +17,17 @@ use crate::{\n \n pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n-    DefDatabase2, DefDatabase2Storage, EnumDataQuery, ExprScopesQuery, FunctionDataQuery,\n-    GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage, LangItemQuery,\n-    ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery, StaticDataQuery,\n-    StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n+    DefDatabase2, DefDatabase2Storage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n+    FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n+    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery,\n+    StaticDataQuery, StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n     ParseMacroQuery,\n };\n \n-// This database uses `AstDatabase` internally,\n-#[salsa::query_group(DefDatabaseStorage)]\n-#[salsa::requires(AstDatabase)]\n-pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n-    #[salsa::invoke(crate::code_model::docs::documentation_query)]\n-    fn documentation(&self, def: crate::DocDef) -> Option<crate::Documentation>;\n-}\n+pub use DefDatabase2 as DefDatabase;\n \n #[salsa::query_group(HirDatabaseStorage)]\n #[salsa::requires(salsa::Database)]"}, {"sha": "529ac825172e34e327e9caeafe6d6fa1d212c1f2", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -4,14 +4,14 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    AdtId, AssocItemId, ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n-    ModuleDefId, StaticId, StructFieldId, StructId, TypeAliasId, UnionId, VariantId,\n+    AdtId, AssocItemId, AttrDefId, ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n+    GenericDefId, ModuleDefId, StaticId, StructFieldId, StructId, TypeAliasId, UnionId, VariantId,\n };\n \n use crate::{\n     ty::{CallableDef, TypableDef},\n-    Adt, AssocItem, Const, Crate, DefWithBody, EnumVariant, Function, GenericDef, ModuleDef,\n-    Static, StructField, TypeAlias, VariantDef,\n+    Adt, AssocItem, AttrDef, Const, Crate, DefWithBody, EnumVariant, Function, GenericDef,\n+    ModuleDef, Static, StructField, TypeAlias, VariantDef,\n };\n \n impl From<ra_db::CrateId> for Crate {\n@@ -240,3 +240,20 @@ impl From<StructField> for StructFieldId {\n         StructFieldId { parent: def.parent.into(), local_id: def.id }\n     }\n }\n+\n+impl From<AttrDef> for AttrDefId {\n+    fn from(def: AttrDef) -> Self {\n+        match def {\n+            AttrDef::Module(it) => AttrDefId::ModuleId(it.id),\n+            AttrDef::StructField(it) => AttrDefId::StructFieldId(it.into()),\n+            AttrDef::Adt(it) => AttrDefId::AdtId(it.into()),\n+            AttrDef::Function(it) => AttrDefId::FunctionId(it.id),\n+            AttrDef::EnumVariant(it) => AttrDefId::EnumVariantId(it.into()),\n+            AttrDef::Static(it) => AttrDefId::StaticId(it.id),\n+            AttrDef::Const(it) => AttrDefId::ConstId(it.id),\n+            AttrDef::Trait(it) => AttrDefId::TraitId(it.id),\n+            AttrDef::TypeAlias(it) => AttrDefId::TypeAliasId(it.id),\n+            AttrDef::MacroDef(it) => AttrDefId::MacroDefId(it.id),\n+        }\n+    }\n+}"}, {"sha": "868df5b6b4b86702ba91bc2765df1624bc992582", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -50,9 +50,8 @@ mod marks;\n \n pub use crate::{\n     code_model::{\n-        docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n-        Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Enum,\n+        Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Docs, Enum,\n         EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasAttrs, HasBody, ImplBlock,\n         Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField,\n         Trait, TypeAlias, Union, VariantDef,\n@@ -70,6 +69,7 @@ pub use crate::{\n \n pub use hir_def::{\n     builtin_type::BuiltinType,\n+    docs::Documentation,\n     nameres::{per_ns::PerNs, raw::ImportId},\n     path::{Path, PathKind},\n     type_ref::Mutability,"}, {"sha": "c369a80d4764d8efd9af94acf35d3e5300c5f2f0", "filename": "crates/ra_hir/src/test_db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -14,7 +14,6 @@ use crate::{db, debug::HirDebugHelper};\n     ra_db::SourceDatabaseStorage,\n     db::InternDatabaseStorage,\n     db::AstDatabaseStorage,\n-    db::DefDatabaseStorage,\n     db::DefDatabase2Storage,\n     db::HirDatabaseStorage\n )]"}, {"sha": "1481868d0bc6cd186201593542cfa27bd37cce48", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -10,6 +10,7 @@ use crate::{\n     attr::Attrs,\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{ConstData, FunctionData, ImplData, TraitData, TypeAliasData},\n+    docs::Documentation,\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n     nameres::{\n@@ -101,4 +102,9 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n \n     #[salsa::invoke(LangItems::lang_item_query)]\n     fn lang_item(&self, start_crate: CrateId, item: SmolStr) -> Option<LangItemTarget>;\n+\n+    // FIXME(https://github.com/rust-analyzer/rust-analyzer/issues/2148#issuecomment-550519102)\n+    // Remove this query completely, in favor of `Attrs::docs` method\n+    #[salsa::invoke(Documentation::documentation_query)]\n+    fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n }"}, {"sha": "1b5c854374173026d0931226d556471d37739053", "filename": "crates/ra_hir_def/src/docs.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -0,0 +1,68 @@\n+//! FIXME: write short doc here\n+\n+use std::sync::Arc;\n+\n+use hir_expand::either::Either;\n+use ra_syntax::ast;\n+\n+use crate::{db::DefDatabase2, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup};\n+\n+/// Holds documentation\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct Documentation(Arc<str>);\n+\n+impl Into<String> for Documentation {\n+    fn into(self) -> String {\n+        self.as_str().to_owned()\n+    }\n+}\n+\n+impl Documentation {\n+    fn new(s: &str) -> Documentation {\n+        Documentation(s.into())\n+    }\n+\n+    pub fn as_str(&self) -> &str {\n+        &*self.0\n+    }\n+\n+    pub(crate) fn documentation_query(\n+        db: &impl DefDatabase2,\n+        def: AttrDefId,\n+    ) -> Option<Documentation> {\n+        match def {\n+            AttrDefId::ModuleId(module) => {\n+                let def_map = db.crate_def_map(module.krate);\n+                let src = def_map[module.module_id].declaration_source(db)?;\n+                docs_from_ast(&src.value)\n+            }\n+            AttrDefId::StructFieldId(it) => {\n+                let src = it.parent.child_source(db);\n+                match &src.value[it.local_id] {\n+                    Either::A(_tuple) => None,\n+                    Either::B(record) => docs_from_ast(record),\n+                }\n+            }\n+            AttrDefId::AdtId(it) => match it {\n+                AdtId::StructId(it) => docs_from_ast(&it.0.source(db).value),\n+                AdtId::EnumId(it) => docs_from_ast(&it.source(db).value),\n+                AdtId::UnionId(it) => docs_from_ast(&it.0.source(db).value),\n+            },\n+            AttrDefId::EnumVariantId(it) => {\n+                let src = it.parent.child_source(db);\n+                docs_from_ast(&src.value[it.local_id])\n+            }\n+            AttrDefId::StaticId(it) => docs_from_ast(&it.source(db).value),\n+            AttrDefId::TraitId(it) => docs_from_ast(&it.source(db).value),\n+            AttrDefId::MacroDefId(it) => docs_from_ast(&it.ast_id.to_node(db)),\n+            AttrDefId::ConstId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+            AttrDefId::FunctionId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+            AttrDefId::TypeAliasId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n+            AttrDefId::ImplId(_) => None,\n+        }\n+    }\n+}\n+\n+pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n+    node.doc_comment_text().map(|it| Documentation::new(&it))\n+}"}, {"sha": "1ba7c7ee3874fecac148e7aa9511ce6ab051329d", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -20,6 +20,7 @@ pub mod generics;\n pub mod resolver;\n pub mod data;\n pub mod lang_item;\n+pub mod docs;\n \n mod trace;\n "}, {"sha": "7d35d213756fcaf36c87d4ff49dd46d395b64521", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958862093e83083b188427246323047a2c9e7bab/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=958862093e83083b188427246323047a2c9e7bab", "patch": "@@ -21,7 +21,6 @@ use crate::{\n     symbol_index::SymbolsDatabaseStorage,\n     hir::db::InternDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n-    hir::db::DefDatabaseStorage,\n     hir::db::DefDatabase2Storage,\n     hir::db::HirDatabaseStorage\n )]"}]}