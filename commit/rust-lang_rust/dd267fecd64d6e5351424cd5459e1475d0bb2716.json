{"sha": "dd267fecd64d6e5351424cd5459e1475d0bb2716", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMjY3ZmVjZDY0ZDZlNTM1MTQyNGNkNTQ1OWUxNDc1ZDBiYjI3MTY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-21T22:12:08Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:50Z"}, "message": "compute_bounds takes &[GenericBound]", "tree": {"sha": "b92572b527b4c8dcc57224a7ed32762853c5547d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b92572b527b4c8dcc57224a7ed32762853c5547d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd267fecd64d6e5351424cd5459e1475d0bb2716", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/YACgkQgTGiTgx5\n768ncw//ZWchH3Kp7O9CJ8SVHYG4OBD/JfOrjZiveHGZNqkaKUPLok8lXb5djpYA\n6YbvhAq2FOuy8JnRA63OOZtLXfo2g5qBnA0BSbuK/zQknJh4r+wXvkPHATMGA8LJ\nvXxa2otLrfF+/eHFxvlcc6gV4rWu9EKAVQ3lkwz+tOGt1W4UEthNBnTpmThV1Mj0\nklm9MnA5OVj/1pPePAYmVuVkvOvojR44ZMXghRtdw92tpRqYexXx6teXaeGs3ALs\nzY+lExGlnPDG+7+uq+JmkeNEuD/fW/jj3iMiYOq2fxxm1H9PetLjf7TDBJRAU/7p\nY7B8Chpe7Vh34YkfnvydHx0n84A6Av5ruT2al3njcPorbXQkpm/QgmEOVxMRL8CO\n7yuwuF6c62ky0xXr7M/rCoc85ks5JWf6MtGAqVw2vgQ1om6BHV7ZwkBAJdybzcpJ\nh40MuW2FGgCdL9Qmqew1XS8Oczsf80LgluDcx/5E2H/j4ZJDa3LmrOUR2SR0HJLG\nWSCMQ49i0CMtCSUbWhRoyQw/qOzD3Ko0mrIYf7pQ8PNHoDId5vnlf3CGaZO0qlDD\nu3WvVgXWpLQxq/t/jxmC9WY5wiFyldM71MVu+ZbU5ST1BEHwr032HHxskWZ4do8d\nM7dN+IqwGA3qwWMRbR25GwWcA/VQg0YY2mBgX57OnNDZaVrGaz0=\n=1JIu\n-----END PGP SIGNATURE-----", "payload": "tree b92572b527b4c8dcc57224a7ed32762853c5547d\nparent c0007a2d7eec702a9b10f90200cfa2e33881ab6c\nauthor Santiago Pastorino <spastorino@gmail.com> 1605996728 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487030 -0300\n\ncompute_bounds takes &[GenericBound]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd267fecd64d6e5351424cd5459e1475d0bb2716", "html_url": "https://github.com/rust-lang/rust/commit/dd267fecd64d6e5351424cd5459e1475d0bb2716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd267fecd64d6e5351424cd5459e1475d0bb2716/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "html_url": "https://github.com/rust-lang/rust/commit/c0007a2d7eec702a9b10f90200cfa2e33881ab6c"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "c0c4e5b517ea662164934d1d1f59f8cbff021c68", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dd267fecd64d6e5351424cd5459e1475d0bb2716/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd267fecd64d6e5351424cd5459e1475d0bb2716/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=dd267fecd64d6e5351424cd5459e1475d0bb2716", "patch": "@@ -878,22 +878,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     pub fn compute_bounds(\n         &self,\n         param_ty: Ty<'tcx>,\n-        ast_bounds: &[&hir::GenericBound<'_>],\n+        ast_bounds: &[hir::GenericBound<'_>],\n         sized_by_default: SizedByDefault,\n         span: Span,\n     ) -> Bounds<'tcx> {\n-        let mut bounds = Bounds::default();\n-\n-        self.add_bounds(param_ty, ast_bounds, &mut bounds);\n-        bounds.trait_bounds.sort_by_key(|(t, _, _)| t.def_id());\n-\n-        bounds.implicitly_sized = if let SizedByDefault::Yes = sized_by_default {\n-            if !self.is_unsized(ast_bounds, span) { Some(span) } else { None }\n-        } else {\n-            None\n-        };\n-\n-        bounds\n+        let ast_bounds: Vec<_> = ast_bounds.iter().collect();\n+        self.compute_bounds_inner(param_ty, &ast_bounds, sized_by_default, span)\n     }\n \n     pub fn compute_bounds_that_match_assoc_type(\n@@ -916,7 +906,28 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        self.compute_bounds(param_ty, &result, sized_by_default, span)\n+        self.compute_bounds_inner(param_ty, &result, sized_by_default, span)\n+    }\n+\n+    fn compute_bounds_inner(\n+        &self,\n+        param_ty: Ty<'tcx>,\n+        ast_bounds: &[&hir::GenericBound<'_>],\n+        sized_by_default: SizedByDefault,\n+        span: Span,\n+    ) -> Bounds<'tcx> {\n+        let mut bounds = Bounds::default();\n+\n+        self.add_bounds(param_ty, ast_bounds, &mut bounds);\n+        bounds.trait_bounds.sort_by_key(|(t, _, _)| t.def_id());\n+\n+        bounds.implicitly_sized = if let SizedByDefault::Yes = sized_by_default {\n+            if !self.is_unsized(ast_bounds, span) { Some(span) } else { None }\n+        } else {\n+            None\n+        };\n+\n+        bounds\n     }\n \n     /// Given an HIR binding like `Item = Foo` or `Item: Foo`, pushes the corresponding predicates"}, {"sha": "32527a7793423efbd8a0e969e51c904dc63562b3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd267fecd64d6e5351424cd5459e1475d0bb2716/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd267fecd64d6e5351424cd5459e1475d0bb2716/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=dd267fecd64d6e5351424cd5459e1475d0bb2716", "patch": "@@ -1072,7 +1072,6 @@ fn super_predicates_that_define_assoc_type(\n                 assoc_name,\n             )\n         } else {\n-            let bounds: Vec<_> = bounds.iter().collect();\n             AstConv::compute_bounds(&icx, self_param_ty, &bounds, SizedByDefault::No, item.span)\n         };\n \n@@ -2030,8 +2029,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 index += 1;\n \n                 let sized = SizedByDefault::Yes;\n-                let bounds: Vec<_> = param.bounds.iter().collect();\n-                let bounds = AstConv::compute_bounds(&icx, param_ty, &bounds, sized, param.span);\n+                let bounds =\n+                    AstConv::compute_bounds(&icx, param_ty, &param.bounds, sized, param.span);\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n             }\n             GenericParamKind::Const { .. } => {"}, {"sha": "dd1da7d9cff2d21d269d8cbd742d75ee0c5c30bc", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd267fecd64d6e5351424cd5459e1475d0bb2716/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd267fecd64d6e5351424cd5459e1475d0bb2716/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=dd267fecd64d6e5351424cd5459e1475d0bb2716", "patch": "@@ -25,7 +25,6 @@ fn associated_type_bounds<'tcx>(\n         InternalSubsts::identity_for_item(tcx, assoc_item_def_id),\n     );\n \n-    let bounds: Vec<_> = bounds.iter().collect();\n     let bounds = AstConv::compute_bounds(\n         &ItemCtxt::new(tcx, assoc_item_def_id),\n         item_ty,\n@@ -66,7 +65,6 @@ fn opaque_type_bounds<'tcx>(\n         let item_ty =\n             tcx.mk_opaque(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n \n-        let bounds: Vec<_> = bounds.iter().collect();\n         let bounds = AstConv::compute_bounds(\n             &ItemCtxt::new(tcx, opaque_def_id),\n             item_ty,"}]}