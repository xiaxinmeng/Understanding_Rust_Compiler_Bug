{"sha": "d989796b478764e1a535951b56d150ab42f1d891", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODk3OTZiNDc4NzY0ZTFhNTM1OTUxYjU2ZDE1MGFiNDJmMWQ4OTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-11T01:11:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T17:50:24Z"}, "message": "Suggest borrowing in more unsized fn param cases", "tree": {"sha": "796c95bb1b84ca652695f3320d0e20fa82bea385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/796c95bb1b84ca652695f3320d0e20fa82bea385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d989796b478764e1a535951b56d150ab42f1d891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d989796b478764e1a535951b56d150ab42f1d891", "html_url": "https://github.com/rust-lang/rust/commit/d989796b478764e1a535951b56d150ab42f1d891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d989796b478764e1a535951b56d150ab42f1d891/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5", "html_url": "https://github.com/rust-lang/rust/commit/b7db6bb5af8187ccb9be1076dd99d3cbb7fd8fa5"}], "stats": {"total": 129, "additions": 80, "deletions": 49}, "files": [{"sha": "201972fcf264bd505b6e5f61b187f1e4e0be9541", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -526,7 +526,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             Ident::with_dummy_span(sym::_task_context),\n             hir::BindingAnnotation::Mutable,\n         );\n-        let param = hir::Param { attrs: &[], hir_id: self.next_id(), pat, span };\n+        let param = hir::Param { attrs: &[], hir_id: self.next_id(), pat, ty_span: span, span };\n         let params = arena_vec![self; param];\n \n         let body_id = self.lower_body(move |this| {"}, {"sha": "dd5e658102facacbe5688df07b9427c7961a5c03", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -972,6 +972,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             attrs: self.lower_attrs(&param.attrs),\n             hir_id: self.lower_node_id(param.id),\n             pat: self.lower_pat(&param.pat),\n+            ty_span: param.ty.span,\n             span: param.span,\n         }\n     }\n@@ -1098,6 +1099,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     attrs: parameter.attrs,\n                     hir_id: parameter.hir_id,\n                     pat: new_parameter_pat,\n+                    ty_span: parameter.ty_span,\n                     span: parameter.span,\n                 };\n "}, {"sha": "07b489a75626708528388cab5e92774867506e48", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -2148,6 +2148,7 @@ pub struct Param<'hir> {\n     pub attrs: &'hir [Attribute],\n     pub hir_id: HirId,\n     pub pat: &'hir Pat<'hir>,\n+    pub ty_span: Span,\n     pub span: Span,\n }\n "}, {"sha": "6fb07f5e1954c6ea4c76c8a72d0cd715631dd471", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -403,7 +403,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n \n                         self.suggest_dereferences(&obligation, &mut err, &trait_ref, points_at_arg);\n-                        self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);"}, {"sha": "9bcc2a885fe12243be40f692812146bd51efd26e", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -43,12 +43,6 @@ pub trait InferCtxtExt<'tcx> {\n         body_id: hir::HirId,\n     );\n \n-    fn suggest_borrow_on_unsized_slice(\n-        &self,\n-        code: &ObligationCauseCode<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    );\n-\n     fn suggest_dereferences(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -515,32 +509,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n-    /// suggestion to borrow the initializer in order to use have a slice instead.\n-    fn suggest_borrow_on_unsized_slice(\n-        &self,\n-        code: &ObligationCauseCode<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) {\n-        if let &ObligationCauseCode::VariableType(hir_id) = code {\n-            let parent_node = self.tcx.hir().get_parent_node(hir_id);\n-            if let Some(Node::Local(ref local)) = self.tcx.hir().find(parent_node) {\n-                if let Some(ref expr) = local.init {\n-                    if let hir::ExprKind::Index(_, _) = expr.kind {\n-                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-                            err.span_suggestion(\n-                                expr.span,\n-                                \"consider borrowing here\",\n-                                format!(\"&{}\", snippet),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     /// Given a closure's `DefId`, return the given name of the closure.\n     ///\n     /// This doesn't account for reassignments, but it's only used for suggestions.\n@@ -1817,8 +1785,37 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            ObligationCauseCode::VariableType(_) => {\n-                err.note(\"all local variables must have a statically known size\");\n+            ObligationCauseCode::VariableType(hir_id) => {\n+                let parent_node = self.tcx.hir().get_parent_node(hir_id);\n+                match self.tcx.hir().find(parent_node) {\n+                    Some(Node::Local(hir::Local {\n+                        init: Some(hir::Expr { kind: hir::ExprKind::Index(_, _), span, .. }),\n+                        ..\n+                    })) => {\n+                        // When encountering an assignment of an unsized trait, like\n+                        // `let x = \"\"[..];`, provide a suggestion to borrow the initializer in\n+                        // order to use have a slice instead.\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_lo(),\n+                            \"consider borrowing here\",\n+                            \"&\".to_owned(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(\"all local variables must have a statically known size\");\n+                    }\n+                    Some(Node::Param(param)) => {\n+                        err.span_suggestion_verbose(\n+                            param.ty_span.shrink_to_lo(),\n+                            \"function arguments must have a statically known size, borrowed types \\\n+                            always have a known size\",\n+                            \"&\".to_owned(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                    _ => {\n+                        err.note(\"all local variables must have a statically known size\");\n+                    }\n+                }\n                 if !self.tcx.features().unsized_locals {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }"}, {"sha": "762afa6450a955c7395e0fadba680db714b54dc7", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -18,8 +18,11 @@ LL |     async fn frob(self) {}\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `str`\n    = note: required because it appears within the type `Foo`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     async fn frob(&self) {}\n+   |                   ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "203fc18915647fcbacbddbf9fa101a1e0b396dc9", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -6,8 +6,11 @@ LL | fn f(p: Path) { }\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `std::path::Path`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15"}, {"sha": "0195cc1481e74ce1adc170620a7d909bb8c3b9ce", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -5,8 +5,11 @@ LL | fn f(f: dyn FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f(f: &dyn FnOnce()) {}\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "4b031d26ad53b9dff6bb835143cbec140c45fed4", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -5,12 +5,15 @@ LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting `Self`\n    |\n LL |     fn foo(self) -> &'static i32 where Self: std::marker::Sized {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     fn foo(&self) -> &'static i32 {\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "897984d0ae410eb483502ad901f698e0d9e55336", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -5,8 +5,11 @@ LL | fn new_struct(r: dyn A + 'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn new_struct(r: &dyn A + 'static)\n+   |                  ^\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5883.rs:8:8"}, {"sha": "4ed93ad3279adec5bb4ea680e90ed9ab29b84d6b", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -5,8 +5,11 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_x: &K) {}\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "52d3aefe125c03b6bd374a543283c33eae17eabc", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -19,13 +19,15 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-array-assignment.rs:7:7\n    |\n LL |   let v = s[..2];\n-   |       ^   ------ help: consider borrowing here: `&s[..2]`\n-   |       |\n-   |       doesn't have a size known at compile-time\n+   |       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |   let v = &s[..2];\n+   |           ^\n \n error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:9:17"}, {"sha": "2b7c29e20cd31092e670f09108329e26518b5394", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -6,8 +6,11 @@ LL | fn f(p: Path) { }\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `std::path::Path`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "daca91abff8433fc9573cf8b44951a1ac0896e1c", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -13,8 +13,11 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + std::marker::Send + 'static)`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_x: &Foo + Send) {\n+   |            ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "82f1e87008d30bfa30e76aafcedae9d0aa5559c3", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d989796b478764e1a535951b56d150ab42f1d891/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=d989796b478764e1a535951b56d150ab42f1d891", "patch": "@@ -144,8 +144,11 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn g1<X: ?Sized>(x: &X) {}\n+   |                     ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n@@ -156,8 +159,11 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn g2<X: ?Sized + T>(x: &X) {}\n+   |                         ^\n \n error: aborting due to 13 previous errors\n "}]}