{"sha": "56713a1684c22742a3a4d3d2b19fa09fa6832024", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzEzYTE2ODRjMjI3NDJhM2E0ZDNkMmIxOWZhMDlmYTY4MzIwMjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-25T04:03:28Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:41Z"}, "message": "Add a lowering context", "tree": {"sha": "2918031ff656e7274787ba99d913a1e7230379b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2918031ff656e7274787ba99d913a1e7230379b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56713a1684c22742a3a4d3d2b19fa09fa6832024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56713a1684c22742a3a4d3d2b19fa09fa6832024", "html_url": "https://github.com/rust-lang/rust/commit/56713a1684c22742a3a4d3d2b19fa09fa6832024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56713a1684c22742a3a4d3d2b19fa09fa6832024/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11eda66df859f53754788044476af753a012332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/11eda66df859f53754788044476af753a012332f", "html_url": "https://github.com/rust-lang/rust/commit/11eda66df859f53754788044476af753a012332f"}], "stats": {"total": 950, "additions": 487, "deletions": 463}, "files": [{"sha": "a3055d6d67c9191fd3ea534302fe0448db9bebf3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=56713a1684c22742a3a4d3d2b19fa09fa6832024", "patch": "@@ -31,7 +31,7 @@ use rustc_trans::trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_front::hir;\n-use rustc_front::lowering::lower_crate;\n+use rustc_front::lowering::{lower_crate, LoweringContext};\n use super::Compilation;\n \n use serialize::json;\n@@ -112,9 +112,11 @@ pub fn compile_input(sess: Session,\n \n         let expanded_crate = assign_node_ids(&sess, expanded_crate);\n         // Lower ast -> hir.\n+        let foo = &42;\n+        let lcx = LoweringContext::new(foo);\n         let mut hir_forest = time(sess.time_passes(),\n                                   \"lowering ast -> hir\",\n-                                  || hir_map::Forest::new(lower_crate(&expanded_crate)));\n+                                  || hir_map::Forest::new(lower_crate(&lcx, &expanded_crate)));\n         let arenas = ty::CtxtArenas::new();\n         let ast_map = make_map(&sess, &mut hir_forest);\n \n@@ -128,7 +130,8 @@ pub fn compile_input(sess: Session,\n                                                                      &ast_map,\n                                                                      &expanded_crate,\n                                                                      &ast_map.krate(),\n-                                                                     &id[..]));\n+                                                                     &id[..],\n+                                                                     &lcx));\n \n         time(sess.time_passes(), \"attribute checking\", || {\n             front::check_attr::check_crate(&sess, &expanded_crate);\n@@ -152,7 +155,8 @@ pub fn compile_input(sess: Session,\n                                                                &expanded_crate,\n                                                                tcx.map.krate(),\n                                                                &analysis,\n-                                                               tcx);\n+                                                               tcx,\n+                                                               &lcx);\n                 (control.after_analysis.callback)(state);\n \n                 tcx.sess.abort_if_errors();\n@@ -278,6 +282,7 @@ pub struct CompileState<'a, 'ast: 'a, 'tcx: 'a> {\n     pub ast_map: Option<&'a hir_map::Map<'ast>>,\n     pub analysis: Option<&'a ty::CrateAnalysis>,\n     pub tcx: Option<&'a ty::ctxt<'tcx>>,\n+    pub lcx: Option<&'a LoweringContext<'tcx>>,\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n \n@@ -299,6 +304,7 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n             ast_map: None,\n             analysis: None,\n             tcx: None,\n+            lcx: None,\n             trans: None,\n         }\n     }\n@@ -333,13 +339,15 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                               ast_map: &'a hir_map::Map<'ast>,\n                               krate: &'a ast::Crate,\n                               hir_crate: &'a hir::Crate,\n-                              crate_name: &'a str)\n+                              crate_name: &'a str,\n+                              lcx: &'a LoweringContext<'tcx>)\n                               -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             crate_name: Some(crate_name),\n             ast_map: Some(ast_map),\n             krate: Some(krate),\n             hir_crate: Some(hir_crate),\n+            lcx: Some(lcx),\n             .. CompileState::empty(input, session, out_dir)\n         }\n     }\n@@ -350,13 +358,15 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                             krate: &'a ast::Crate,\n                             hir_crate: &'a hir::Crate,\n                             analysis: &'a ty::CrateAnalysis,\n-                            tcx: &'a ty::ctxt<'tcx>)\n+                            tcx: &'a ty::ctxt<'tcx>,\n+                            lcx: &'a LoweringContext<'tcx>)\n                             -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             analysis: Some(analysis),\n             tcx: Some(tcx),\n             krate: Some(krate),\n             hir_crate: Some(hir_crate),\n+            lcx: Some(lcx),\n             .. CompileState::empty(input, session, out_dir)\n         }\n     }"}, {"sha": "276b747feb2042b23359d73191b7c0d254f12d18", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=56713a1684c22742a3a4d3d2b19fa09fa6832024", "patch": "@@ -396,6 +396,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 time(state.session.time_passes(),\n                      \"save analysis\",\n                      || save::process_crate(state.tcx.unwrap(),\n+                                            state.lcx.unwrap(),\n                                             state.krate.unwrap(),\n                                             state.analysis.unwrap(),\n                                             state.out_dir));"}, {"sha": "53b940c57a7e953a9439f70c400b2845fffdd3ec", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=56713a1684c22742a3a4d3d2b19fa09fa6832024", "patch": "@@ -47,7 +47,7 @@ use std::str::FromStr;\n use rustc::front::map as hir_map;\n use rustc::front::map::{blocks, NodePrinter};\n use rustc_front::hir;\n-use rustc_front::lowering::lower_crate;\n+use rustc_front::lowering::{lower_crate, LoweringContext};\n use rustc_front::print::pprust as pprust_hir;\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -670,9 +670,11 @@ pub fn pretty_print_input(sess: Session,\n     // There is some twisted, god-forsaken tangle of lifetimes here which makes\n     // the ordering of stuff super-finicky.\n     let mut hir_forest;\n+    let foo = &42;\n+    let lcx = LoweringContext::new(foo);\n     let arenas = ty::CtxtArenas::new();\n     let ast_map = if compute_ast_map {\n-        hir_forest = hir_map::Forest::new(lower_crate(&krate));\n+        hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));\n         let map = driver::make_map(&sess, &mut hir_forest);\n         Some(map)\n     } else {"}, {"sha": "c3544ff1aa0a48f3251a802ef24f23a2fa2b6d92", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 448, "deletions": 442, "changes": 890, "blob_url": "https://github.com/rust-lang/rust/blob/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=56713a1684c22742a3a4d3d2b19fa09fa6832024", "patch": "@@ -17,344 +17,348 @@ use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned};\n use syntax::owned_slice::OwnedSlice;\n \n+pub struct LoweringContext<'hir> {\n+    // TODO\n+    foo: &'hir i32,\n+}\n+\n+impl<'hir> LoweringContext<'hir> {\n+    pub fn new(foo: &'hir i32) -> LoweringContext<'hir> {\n+        LoweringContext {\n+            foo: foo,\n+        }\n+    }\n+}\n \n-pub fn lower_view_path(view_path: &ViewPath) -> P<hir::ViewPath> {\n+pub fn lower_view_path(_lctx: &LoweringContext, view_path: &ViewPath) -> P<hir::ViewPath> {\n     P(Spanned {\n         node: match view_path.node {\n             ViewPathSimple(ident, ref path) => {\n-                hir::ViewPathSimple(ident.name, lower_path(path))\n+                hir::ViewPathSimple(ident.name, lower_path(_lctx, path))\n             }\n             ViewPathGlob(ref path) => {\n-                hir::ViewPathGlob(lower_path(path))\n+                hir::ViewPathGlob(lower_path(_lctx, path))\n             }\n             ViewPathList(ref path, ref path_list_idents) => {\n-                hir::ViewPathList(lower_path(path),\n-                                  path_list_idents.iter()\n-                                                  .map(|path_list_ident| {\n-                                                      Spanned {\n-                                                          node: match path_list_ident.node {\n-                                                              PathListIdent { id, name, rename } =>\n-                                                                  hir::PathListIdent {\n-                                                                  id: id,\n-                                                                  name: name.name,\n-                                                                  rename: rename.map(|x| x.name),\n-                                                              },\n-                                                              PathListMod { id, rename } =>\n-                                                                  hir::PathListMod {\n-                                                                  id: id,\n-                                                                  rename: rename.map(|x| x.name),\n-                                                              },\n-                                                          },\n-                                                          span: path_list_ident.span,\n-                                                      }\n-                                                  })\n-                                                  .collect())\n+                hir::ViewPathList(lower_path(_lctx, path),\n+                             path_list_idents.iter().map(|path_list_ident| {\n+                                Spanned {\n+                                    node: match path_list_ident.node {\n+                                        PathListIdent { id, name, rename } =>\n+                                            hir::PathListIdent {\n+                                                id: id,\n+                                                name: name.name,\n+                                                rename: rename.map(|x| x.name),\n+                                            },\n+                                        PathListMod { id, rename } =>\n+                                            hir::PathListMod {\n+                                                id: id,\n+                                                rename: rename.map(|x| x.name)\n+                                            }\n+                                    },\n+                                    span: path_list_ident.span\n+                                }\n+                             }).collect())\n             }\n         },\n         span: view_path.span,\n     })\n }\n \n-pub fn lower_arm(arm: &Arm) -> hir::Arm {\n+pub fn lower_arm(_lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n     hir::Arm {\n         attrs: arm.attrs.clone(),\n-        pats: arm.pats.iter().map(|x| lower_pat(x)).collect(),\n-        guard: arm.guard.as_ref().map(|ref x| lower_expr(x)),\n-        body: lower_expr(&arm.body),\n+        pats: arm.pats.iter().map(|x| lower_pat(_lctx, x)).collect(),\n+        guard: arm.guard.as_ref().map(|ref x| lower_expr(_lctx, x)),\n+        body: lower_expr(_lctx, &arm.body),\n     }\n }\n \n-pub fn lower_decl(d: &Decl) -> P<hir::Decl> {\n+pub fn lower_decl(_lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n     match d.node {\n         DeclLocal(ref l) => P(Spanned {\n-            node: hir::DeclLocal(lower_local(l)),\n-            span: d.span,\n+            node: hir::DeclLocal(lower_local(_lctx, l)),\n+            span: d.span\n         }),\n         DeclItem(ref it) => P(Spanned {\n-            node: hir::DeclItem(lower_item(it)),\n-            span: d.span,\n+            node: hir::DeclItem(lower_item(_lctx, it)),\n+            span: d.span\n         }),\n     }\n }\n \n-pub fn lower_ty_binding(b: &TypeBinding) -> P<hir::TypeBinding> {\n-    P(hir::TypeBinding {\n-        id: b.id,\n-        name: b.ident.name,\n-        ty: lower_ty(&b.ty),\n-        span: b.span,\n-    })\n+pub fn lower_ty_binding(_lctx: &LoweringContext, b: &TypeBinding) -> P<hir::TypeBinding> {\n+    P(hir::TypeBinding { id: b.id, name: b.ident.name, ty: lower_ty(_lctx, &b.ty), span: b.span })\n }\n \n-pub fn lower_ty(t: &Ty) -> P<hir::Ty> {\n+pub fn lower_ty(_lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n     P(hir::Ty {\n         id: t.id,\n         node: match t.node {\n             TyInfer => hir::TyInfer,\n-            TyVec(ref ty) => hir::TyVec(lower_ty(ty)),\n-            TyPtr(ref mt) => hir::TyPtr(lower_mt(mt)),\n+            TyVec(ref ty) => hir::TyVec(lower_ty(_lctx, ty)),\n+            TyPtr(ref mt) => hir::TyPtr(lower_mt(_lctx, mt)),\n             TyRptr(ref region, ref mt) => {\n-                hir::TyRptr(lower_opt_lifetime(region), lower_mt(mt))\n+                hir::TyRptr(lower_opt_lifetime(_lctx, region), lower_mt(_lctx, mt))\n             }\n             TyBareFn(ref f) => {\n                 hir::TyBareFn(P(hir::BareFnTy {\n-                    lifetimes: lower_lifetime_defs(&f.lifetimes),\n-                    unsafety: lower_unsafety(f.unsafety),\n+                    lifetimes: lower_lifetime_defs(_lctx, &f.lifetimes),\n+                    unsafety: lower_unsafety(_lctx, f.unsafety),\n                     abi: f.abi,\n-                    decl: lower_fn_decl(&f.decl),\n+                    decl: lower_fn_decl(_lctx, &f.decl),\n                 }))\n             }\n-            TyTup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(ty)).collect()),\n-            TyParen(ref ty) => hir::TyParen(lower_ty(ty)),\n+            TyTup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(_lctx, ty)).collect()),\n+            TyParen(ref ty) => hir::TyParen(lower_ty(_lctx, ty)),\n             TyPath(ref qself, ref path) => {\n                 let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n                     hir::QSelf {\n-                        ty: lower_ty(ty),\n+                        ty: lower_ty(_lctx, ty),\n                         position: position,\n                     }\n                 });\n-                hir::TyPath(qself, lower_path(path))\n+                hir::TyPath(qself, lower_path(_lctx, path))\n             }\n             TyObjectSum(ref ty, ref bounds) => {\n-                hir::TyObjectSum(lower_ty(ty), lower_bounds(bounds))\n+                hir::TyObjectSum(lower_ty(_lctx, ty),\n+                            lower_bounds(_lctx, bounds))\n             }\n             TyFixedLengthVec(ref ty, ref e) => {\n-                hir::TyFixedLengthVec(lower_ty(ty), lower_expr(e))\n+                hir::TyFixedLengthVec(lower_ty(_lctx, ty), lower_expr(_lctx, e))\n             }\n             TyTypeof(ref expr) => {\n-                hir::TyTypeof(lower_expr(expr))\n+                hir::TyTypeof(lower_expr(_lctx, expr))\n             }\n             TyPolyTraitRef(ref bounds) => {\n-                hir::TyPolyTraitRef(bounds.iter().map(|b| lower_ty_param_bound(b)).collect())\n+                hir::TyPolyTraitRef(bounds.iter().map(|b| lower_ty_param_bound(_lctx, b)).collect())\n             }\n             TyMac(_) => panic!(\"TyMac should have been expanded by now.\"),\n         },\n         span: t.span,\n     })\n }\n \n-pub fn lower_foreign_mod(fm: &ForeignMod) -> hir::ForeignMod {\n+pub fn lower_foreign_mod(_lctx: &LoweringContext, fm: &ForeignMod) -> hir::ForeignMod {\n     hir::ForeignMod {\n         abi: fm.abi,\n-        items: fm.items.iter().map(|x| lower_foreign_item(x)).collect(),\n+        items: fm.items.iter().map(|x| lower_foreign_item(_lctx, x)).collect(),\n     }\n }\n \n-pub fn lower_variant(v: &Variant) -> P<hir::Variant> {\n+pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n     P(Spanned {\n         node: hir::Variant_ {\n             id: v.node.id,\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n             kind: match v.node.kind {\n                 TupleVariantKind(ref variant_args) => {\n-                    hir::TupleVariantKind(variant_args.iter()\n-                                                      .map(|ref x| lower_variant_arg(x))\n-                                                      .collect())\n+                    hir::TupleVariantKind(variant_args.iter().map(|ref x|\n+                        lower_variant_arg(_lctx, x)).collect())\n                 }\n                 StructVariantKind(ref struct_def) => {\n-                    hir::StructVariantKind(lower_struct_def(struct_def))\n+                    hir::StructVariantKind(lower_struct_def(_lctx, struct_def))\n                 }\n             },\n-            disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(e)),\n+            disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(_lctx, e)),\n         },\n         span: v.span,\n     })\n }\n \n-pub fn lower_path(p: &Path) -> hir::Path {\n+pub fn lower_path(_lctx: &LoweringContext, p: &Path) -> hir::Path {\n     hir::Path {\n         global: p.global,\n-        segments: p.segments\n-                   .iter()\n-                   .map(|&PathSegment { identifier, ref parameters }| {\n-                       hir::PathSegment {\n-                           identifier: identifier,\n-                           parameters: lower_path_parameters(parameters),\n-                       }\n-                   })\n-                   .collect(),\n+        segments: p.segments.iter().map(|&PathSegment {identifier, ref parameters}|\n+            hir::PathSegment {\n+                identifier: identifier,\n+                parameters: lower_path_parameters(_lctx, parameters),\n+            }).collect(),\n         span: p.span,\n     }\n }\n \n-pub fn lower_path_parameters(path_parameters: &PathParameters) -> hir::PathParameters {\n+pub fn lower_path_parameters(_lctx: &LoweringContext,\n+                             path_parameters: &PathParameters)\n+                             -> hir::PathParameters {\n     match *path_parameters {\n         AngleBracketedParameters(ref data) =>\n-            hir::AngleBracketedParameters(lower_angle_bracketed_parameter_data(data)),\n+            hir::AngleBracketedParameters(lower_angle_bracketed_parameter_data(_lctx, data)),\n         ParenthesizedParameters(ref data) =>\n-            hir::ParenthesizedParameters(lower_parenthesized_parameter_data(data)),\n+            hir::ParenthesizedParameters(lower_parenthesized_parameter_data(_lctx, data)),\n     }\n }\n \n-pub fn lower_angle_bracketed_parameter_data(data: &AngleBracketedParameterData)\n+pub fn lower_angle_bracketed_parameter_data(_lctx: &LoweringContext,\n+                                            data: &AngleBracketedParameterData)\n                                             -> hir::AngleBracketedParameterData {\n     let &AngleBracketedParameterData { ref lifetimes, ref types, ref bindings } = data;\n     hir::AngleBracketedParameterData {\n-        lifetimes: lower_lifetimes(lifetimes),\n-        types: types.iter().map(|ty| lower_ty(ty)).collect(),\n-        bindings: bindings.iter().map(|b| lower_ty_binding(b)).collect(),\n+        lifetimes: lower_lifetimes(_lctx, lifetimes),\n+        types: types.iter().map(|ty| lower_ty(_lctx, ty)).collect(),\n+        bindings: bindings.iter().map(|b| lower_ty_binding(_lctx, b)).collect(),\n     }\n }\n \n-pub fn lower_parenthesized_parameter_data(data: &ParenthesizedParameterData)\n+pub fn lower_parenthesized_parameter_data(_lctx: &LoweringContext,\n+                                          data: &ParenthesizedParameterData)\n                                           -> hir::ParenthesizedParameterData {\n     let &ParenthesizedParameterData { ref inputs, ref output, span } = data;\n     hir::ParenthesizedParameterData {\n-        inputs: inputs.iter().map(|ty| lower_ty(ty)).collect(),\n-        output: output.as_ref().map(|ty| lower_ty(ty)),\n+        inputs: inputs.iter().map(|ty| lower_ty(_lctx, ty)).collect(),\n+        output: output.as_ref().map(|ty| lower_ty(_lctx, ty)),\n         span: span,\n     }\n }\n \n-pub fn lower_local(l: &Local) -> P<hir::Local> {\n+pub fn lower_local(_lctx: &LoweringContext, l: &Local) -> P<hir::Local> {\n     P(hir::Local {\n-        id: l.id,\n-        ty: l.ty.as_ref().map(|t| lower_ty(t)),\n-        pat: lower_pat(&l.pat),\n-        init: l.init.as_ref().map(|e| lower_expr(e)),\n-        span: l.span,\n-    })\n+            id: l.id,\n+            ty: l.ty.as_ref().map(|t| lower_ty(_lctx, t)),\n+            pat: lower_pat(_lctx, &l.pat),\n+            init: l.init.as_ref().map(|e| lower_expr(_lctx, e)),\n+            span: l.span,\n+        })\n }\n \n-pub fn lower_explicit_self_underscore(es: &ExplicitSelf_) -> hir::ExplicitSelf_ {\n+pub fn lower_explicit_self_underscore(_lctx: &LoweringContext,\n+                                      es: &ExplicitSelf_)\n+                                      -> hir::ExplicitSelf_ {\n     match *es {\n         SelfStatic => hir::SelfStatic,\n         SelfValue(v) => hir::SelfValue(v.name),\n         SelfRegion(ref lifetime, m, ident) => {\n-            hir::SelfRegion(lower_opt_lifetime(lifetime),\n-                            lower_mutability(m),\n+            hir::SelfRegion(lower_opt_lifetime(_lctx, lifetime),\n+                            lower_mutability(_lctx, m),\n                             ident.name)\n         }\n         SelfExplicit(ref typ, ident) => {\n-            hir::SelfExplicit(lower_ty(typ), ident.name)\n+            hir::SelfExplicit(lower_ty(_lctx, typ), ident.name)\n         }\n     }\n }\n \n-pub fn lower_mutability(m: Mutability) -> hir::Mutability {\n+pub fn lower_mutability(_lctx: &LoweringContext, m: Mutability) -> hir::Mutability {\n     match m {\n         MutMutable => hir::MutMutable,\n         MutImmutable => hir::MutImmutable,\n     }\n }\n \n-pub fn lower_explicit_self(s: &ExplicitSelf) -> hir::ExplicitSelf {\n-    Spanned {\n-        node: lower_explicit_self_underscore(&s.node),\n-        span: s.span,\n-    }\n+pub fn lower_explicit_self(_lctx: &LoweringContext, s: &ExplicitSelf) -> hir::ExplicitSelf {\n+    Spanned { node: lower_explicit_self_underscore(_lctx, &s.node), span: s.span }\n }\n \n-pub fn lower_arg(arg: &Arg) -> hir::Arg {\n-    hir::Arg {\n-        id: arg.id,\n-        pat: lower_pat(&arg.pat),\n-        ty: lower_ty(&arg.ty),\n-    }\n+pub fn lower_arg(_lctx: &LoweringContext, arg: &Arg) -> hir::Arg {\n+    hir::Arg { id: arg.id, pat: lower_pat(_lctx, &arg.pat), ty: lower_ty(_lctx, &arg.ty) }\n }\n \n-pub fn lower_fn_decl(decl: &FnDecl) -> P<hir::FnDecl> {\n+pub fn lower_fn_decl(_lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n     P(hir::FnDecl {\n-        inputs: decl.inputs.iter().map(|x| lower_arg(x)).collect(),\n+        inputs: decl.inputs.iter().map(|x| lower_arg(_lctx, x)).collect(),\n         output: match decl.output {\n-            Return(ref ty) => hir::Return(lower_ty(ty)),\n+            Return(ref ty) => hir::Return(lower_ty(_lctx, ty)),\n             DefaultReturn(span) => hir::DefaultReturn(span),\n             NoReturn(span) => hir::NoReturn(span),\n         },\n         variadic: decl.variadic,\n     })\n }\n \n-pub fn lower_ty_param_bound(tpb: &TyParamBound) -> hir::TyParamBound {\n+pub fn lower_ty_param_bound(_lctx: &LoweringContext, tpb: &TyParamBound) -> hir::TyParamBound {\n     match *tpb {\n         TraitTyParamBound(ref ty, modifier) => {\n-            hir::TraitTyParamBound(lower_poly_trait_ref(ty),\n-                                   lower_trait_bound_modifier(modifier))\n+            hir::TraitTyParamBound(lower_poly_trait_ref(_lctx, ty),\n+                                   lower_trait_bound_modifier(_lctx, modifier))\n+        }\n+        RegionTyParamBound(ref lifetime) => {\n+            hir::RegionTyParamBound(lower_lifetime(_lctx, lifetime))\n         }\n-        RegionTyParamBound(ref lifetime) => hir::RegionTyParamBound(lower_lifetime(lifetime)),\n     }\n }\n \n-pub fn lower_ty_param(tp: &TyParam) -> hir::TyParam {\n+pub fn lower_ty_param(_lctx: &LoweringContext, tp: &TyParam) -> hir::TyParam {\n     hir::TyParam {\n         id: tp.id,\n         name: tp.ident.name,\n-        bounds: lower_bounds(&tp.bounds),\n-        default: tp.default.as_ref().map(|x| lower_ty(x)),\n+        bounds: lower_bounds(_lctx, &tp.bounds),\n+        default: tp.default.as_ref().map(|x| lower_ty(_lctx, x)),\n         span: tp.span,\n     }\n }\n \n-pub fn lower_ty_params(tps: &OwnedSlice<TyParam>) -> OwnedSlice<hir::TyParam> {\n-    tps.iter().map(|tp| lower_ty_param(tp)).collect()\n+pub fn lower_ty_params(_lctx: &LoweringContext,\n+                       tps: &OwnedSlice<TyParam>)\n+                       -> OwnedSlice<hir::TyParam> {\n+    tps.iter().map(|tp| lower_ty_param(_lctx, tp)).collect()\n }\n \n-pub fn lower_lifetime(l: &Lifetime) -> hir::Lifetime {\n-    hir::Lifetime {\n-        id: l.id,\n-        name: l.name,\n-        span: l.span,\n-    }\n+pub fn lower_lifetime(_lctx: &LoweringContext, l: &Lifetime) -> hir::Lifetime {\n+    hir::Lifetime { id: l.id, name: l.name, span: l.span }\n }\n \n-pub fn lower_lifetime_def(l: &LifetimeDef) -> hir::LifetimeDef {\n+pub fn lower_lifetime_def(_lctx: &LoweringContext, l: &LifetimeDef) -> hir::LifetimeDef {\n     hir::LifetimeDef {\n-        lifetime: lower_lifetime(&l.lifetime),\n-        bounds: lower_lifetimes(&l.bounds),\n+        lifetime: lower_lifetime(_lctx, &l.lifetime),\n+        bounds: lower_lifetimes(_lctx, &l.bounds)\n     }\n }\n \n-pub fn lower_lifetimes(lts: &Vec<Lifetime>) -> Vec<hir::Lifetime> {\n-    lts.iter().map(|l| lower_lifetime(l)).collect()\n+pub fn lower_lifetimes(_lctx: &LoweringContext, lts: &Vec<Lifetime>) -> Vec<hir::Lifetime> {\n+    lts.iter().map(|l| lower_lifetime(_lctx, l)).collect()\n }\n \n-pub fn lower_lifetime_defs(lts: &Vec<LifetimeDef>) -> Vec<hir::LifetimeDef> {\n-    lts.iter().map(|l| lower_lifetime_def(l)).collect()\n+pub fn lower_lifetime_defs(_lctx: &LoweringContext,\n+                           lts: &Vec<LifetimeDef>)\n+                           -> Vec<hir::LifetimeDef> {\n+    lts.iter().map(|l| lower_lifetime_def(_lctx, l)).collect()\n }\n \n-pub fn lower_opt_lifetime(o_lt: &Option<Lifetime>) -> Option<hir::Lifetime> {\n-    o_lt.as_ref().map(|lt| lower_lifetime(lt))\n+pub fn lower_opt_lifetime(_lctx: &LoweringContext,\n+                          o_lt: &Option<Lifetime>)\n+                          -> Option<hir::Lifetime> {\n+    o_lt.as_ref().map(|lt| lower_lifetime(_lctx, lt))\n }\n \n-pub fn lower_generics(g: &Generics) -> hir::Generics {\n+pub fn lower_generics(_lctx: &LoweringContext, g: &Generics) -> hir::Generics {\n     hir::Generics {\n-        ty_params: lower_ty_params(&g.ty_params),\n-        lifetimes: lower_lifetime_defs(&g.lifetimes),\n-        where_clause: lower_where_clause(&g.where_clause),\n+        ty_params: lower_ty_params(_lctx, &g.ty_params),\n+        lifetimes: lower_lifetime_defs(_lctx, &g.lifetimes),\n+        where_clause: lower_where_clause(_lctx, &g.where_clause),\n     }\n }\n \n-pub fn lower_where_clause(wc: &WhereClause) -> hir::WhereClause {\n+pub fn lower_where_clause(_lctx: &LoweringContext, wc: &WhereClause) -> hir::WhereClause {\n     hir::WhereClause {\n         id: wc.id,\n-        predicates: wc.predicates\n-                      .iter()\n-                      .map(|predicate| lower_where_predicate(predicate))\n-                      .collect(),\n+        predicates: wc.predicates.iter().map(|predicate|\n+            lower_where_predicate(_lctx, predicate)).collect(),\n     }\n }\n \n-pub fn lower_where_predicate(pred: &WherePredicate) -> hir::WherePredicate {\n+pub fn lower_where_predicate(_lctx: &LoweringContext,\n+                             pred: &WherePredicate)\n+                             -> hir::WherePredicate {\n     match *pred {\n         WherePredicate::BoundPredicate(WhereBoundPredicate{ ref bound_lifetimes,\n                                                             ref bounded_ty,\n                                                             ref bounds,\n                                                             span}) => {\n             hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                bound_lifetimes: lower_lifetime_defs(bound_lifetimes),\n-                bounded_ty: lower_ty(bounded_ty),\n-                bounds: bounds.iter().map(|x| lower_ty_param_bound(x)).collect(),\n-                span: span,\n+                bound_lifetimes: lower_lifetime_defs(_lctx, bound_lifetimes),\n+                bounded_ty: lower_ty(_lctx, bounded_ty),\n+                bounds: bounds.iter().map(|x| lower_ty_param_bound(_lctx, x)).collect(),\n+                span: span\n             })\n         }\n         WherePredicate::RegionPredicate(WhereRegionPredicate{ ref lifetime,\n                                                               ref bounds,\n                                                               span}) => {\n             hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span: span,\n-                lifetime: lower_lifetime(lifetime),\n-                bounds: bounds.iter().map(|bound| lower_lifetime(bound)).collect(),\n+                lifetime: lower_lifetime(_lctx, lifetime),\n+                bounds: bounds.iter().map(|bound| lower_lifetime(_lctx, bound)).collect()\n             })\n         }\n         WherePredicate::EqPredicate(WhereEqPredicate{ id,\n@@ -363,213 +367,204 @@ pub fn lower_where_predicate(pred: &WherePredicate) -> hir::WherePredicate {\n                                                       span}) => {\n             hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                 id: id,\n-                path: lower_path(path),\n-                ty: lower_ty(ty),\n-                span: span,\n+                path: lower_path(_lctx, path),\n+                ty:lower_ty(_lctx, ty),\n+                span: span\n             })\n         }\n     }\n }\n \n-pub fn lower_struct_def(sd: &StructDef) -> P<hir::StructDef> {\n+pub fn lower_struct_def(_lctx: &LoweringContext, sd: &StructDef) -> P<hir::StructDef> {\n     P(hir::StructDef {\n-        fields: sd.fields.iter().map(|f| lower_struct_field(f)).collect(),\n+        fields: sd.fields.iter().map(|f| lower_struct_field(_lctx, f)).collect(),\n         ctor_id: sd.ctor_id,\n     })\n }\n \n-pub fn lower_trait_ref(p: &TraitRef) -> hir::TraitRef {\n-    hir::TraitRef {\n-        path: lower_path(&p.path),\n-        ref_id: p.ref_id,\n-    }\n+pub fn lower_trait_ref(_lctx: &LoweringContext, p: &TraitRef) -> hir::TraitRef {\n+    hir::TraitRef { path: lower_path(_lctx, &p.path), ref_id: p.ref_id }\n }\n \n-pub fn lower_poly_trait_ref(p: &PolyTraitRef) -> hir::PolyTraitRef {\n+pub fn lower_poly_trait_ref(_lctx: &LoweringContext, p: &PolyTraitRef) -> hir::PolyTraitRef {\n     hir::PolyTraitRef {\n-        bound_lifetimes: lower_lifetime_defs(&p.bound_lifetimes),\n-        trait_ref: lower_trait_ref(&p.trait_ref),\n+        bound_lifetimes: lower_lifetime_defs(_lctx, &p.bound_lifetimes),\n+        trait_ref: lower_trait_ref(_lctx, &p.trait_ref),\n         span: p.span,\n     }\n }\n \n-pub fn lower_struct_field(f: &StructField) -> hir::StructField {\n+pub fn lower_struct_field(_lctx: &LoweringContext, f: &StructField) -> hir::StructField {\n     Spanned {\n         node: hir::StructField_ {\n             id: f.node.id,\n-            kind: lower_struct_field_kind(&f.node.kind),\n-            ty: lower_ty(&f.node.ty),\n+            kind: lower_struct_field_kind(_lctx, &f.node.kind),\n+            ty: lower_ty(_lctx, &f.node.ty),\n             attrs: f.node.attrs.clone(),\n         },\n         span: f.span,\n     }\n }\n \n-pub fn lower_field(f: &Field) -> hir::Field {\n+pub fn lower_field(_lctx: &LoweringContext, f: &Field) -> hir::Field {\n     hir::Field {\n         name: respan(f.ident.span, f.ident.node.name),\n-        expr: lower_expr(&f.expr),\n-        span: f.span,\n+        expr: lower_expr(_lctx, &f.expr), span: f.span\n     }\n }\n \n-pub fn lower_mt(mt: &MutTy) -> hir::MutTy {\n-    hir::MutTy {\n-        ty: lower_ty(&mt.ty),\n-        mutbl: lower_mutability(mt.mutbl),\n-    }\n+pub fn lower_mt(_lctx: &LoweringContext, mt: &MutTy) -> hir::MutTy {\n+    hir::MutTy { ty: lower_ty(_lctx, &mt.ty), mutbl: lower_mutability(_lctx, mt.mutbl) }\n }\n \n-pub fn lower_opt_bounds(b: &Option<OwnedSlice<TyParamBound>>)\n+pub fn lower_opt_bounds(_lctx: &LoweringContext, b: &Option<OwnedSlice<TyParamBound>>)\n                         -> Option<OwnedSlice<hir::TyParamBound>> {\n-    b.as_ref().map(|ref bounds| lower_bounds(bounds))\n+    b.as_ref().map(|ref bounds| lower_bounds(_lctx, bounds))\n }\n \n-fn lower_bounds(bounds: &TyParamBounds) -> hir::TyParamBounds {\n-    bounds.iter().map(|bound| lower_ty_param_bound(bound)).collect()\n+fn lower_bounds(_lctx: &LoweringContext, bounds: &TyParamBounds) -> hir::TyParamBounds {\n+    bounds.iter().map(|bound| lower_ty_param_bound(_lctx, bound)).collect()\n }\n \n-fn lower_variant_arg(va: &VariantArg) -> hir::VariantArg {\n-    hir::VariantArg {\n-        id: va.id,\n-        ty: lower_ty(&va.ty),\n-    }\n+fn lower_variant_arg(_lctx: &LoweringContext, va: &VariantArg) -> hir::VariantArg {\n+    hir::VariantArg { id: va.id, ty: lower_ty(_lctx, &va.ty) }\n }\n \n-pub fn lower_block(b: &Block) -> P<hir::Block> {\n+pub fn lower_block(_lctx: &LoweringContext, b: &Block) -> P<hir::Block> {\n     P(hir::Block {\n         id: b.id,\n-        stmts: b.stmts.iter().map(|s| lower_stmt(s)).collect(),\n-        expr: b.expr.as_ref().map(|ref x| lower_expr(x)),\n-        rules: lower_block_check_mode(&b.rules),\n+        stmts: b.stmts.iter().map(|s| lower_stmt(_lctx, s)).collect(),\n+        expr: b.expr.as_ref().map(|ref x| lower_expr(_lctx, x)),\n+        rules: lower_block_check_mode(_lctx, &b.rules),\n         span: b.span,\n     })\n }\n \n-pub fn lower_item_underscore(i: &Item_) -> hir::Item_ {\n+pub fn lower_item_underscore(_lctx: &LoweringContext, i: &Item_) -> hir::Item_ {\n     match *i {\n         ItemExternCrate(string) => hir::ItemExternCrate(string),\n         ItemUse(ref view_path) => {\n-            hir::ItemUse(lower_view_path(view_path))\n+            hir::ItemUse(lower_view_path(_lctx, view_path))\n         }\n         ItemStatic(ref t, m, ref e) => {\n-            hir::ItemStatic(lower_ty(t), lower_mutability(m), lower_expr(e))\n+            hir::ItemStatic(lower_ty(_lctx, t), lower_mutability(_lctx, m), lower_expr(_lctx, e))\n         }\n         ItemConst(ref t, ref e) => {\n-            hir::ItemConst(lower_ty(t), lower_expr(e))\n+            hir::ItemConst(lower_ty(_lctx, t), lower_expr(_lctx, e))\n         }\n         ItemFn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n-            hir::ItemFn(lower_fn_decl(decl),\n-                        lower_unsafety(unsafety),\n-                        lower_constness(constness),\n-                        abi,\n-                        lower_generics(generics),\n-                        lower_block(body))\n+            hir::ItemFn(\n+                lower_fn_decl(_lctx, decl),\n+                lower_unsafety(_lctx, unsafety),\n+                lower_constness(_lctx, constness),\n+                abi,\n+                lower_generics(_lctx, generics),\n+                lower_block(_lctx, body)\n+            )\n         }\n-        ItemMod(ref m) => hir::ItemMod(lower_mod(m)),\n-        ItemForeignMod(ref nm) => hir::ItemForeignMod(lower_foreign_mod(nm)),\n+        ItemMod(ref m) => hir::ItemMod(lower_mod(_lctx, m)),\n+        ItemForeignMod(ref nm) => hir::ItemForeignMod(lower_foreign_mod(_lctx, nm)),\n         ItemTy(ref t, ref generics) => {\n-            hir::ItemTy(lower_ty(t), lower_generics(generics))\n+            hir::ItemTy(lower_ty(_lctx, t), lower_generics(_lctx, generics))\n         }\n         ItemEnum(ref enum_definition, ref generics) => {\n-            hir::ItemEnum(hir::EnumDef {\n-                              variants: enum_definition.variants\n-                                                       .iter()\n-                                                       .map(|x| lower_variant(x))\n-                                                       .collect(),\n-                          },\n-                          lower_generics(generics))\n+            hir::ItemEnum(\n+                hir::EnumDef {\n+                    variants: enum_definition.variants.iter().map(|x| {\n+                        lower_variant(_lctx, x)\n+                    }).collect(),\n+                },\n+                lower_generics(_lctx, generics))\n         }\n         ItemStruct(ref struct_def, ref generics) => {\n-            let struct_def = lower_struct_def(struct_def);\n-            hir::ItemStruct(struct_def, lower_generics(generics))\n+            let struct_def = lower_struct_def(_lctx, struct_def);\n+            hir::ItemStruct(struct_def, lower_generics(_lctx, generics))\n         }\n         ItemDefaultImpl(unsafety, ref trait_ref) => {\n-            hir::ItemDefaultImpl(lower_unsafety(unsafety), lower_trait_ref(trait_ref))\n+            hir::ItemDefaultImpl(lower_unsafety(_lctx, unsafety), lower_trait_ref(_lctx, trait_ref))\n         }\n         ItemImpl(unsafety, polarity, ref generics, ref ifce, ref ty, ref impl_items) => {\n-            let new_impl_items = impl_items.iter().map(|item| lower_impl_item(item)).collect();\n-            let ifce = ifce.as_ref().map(|trait_ref| lower_trait_ref(trait_ref));\n-            hir::ItemImpl(lower_unsafety(unsafety),\n-                          lower_impl_polarity(polarity),\n-                          lower_generics(generics),\n+            let new_impl_items =\n+                impl_items.iter().map(|item| lower_impl_item(_lctx, item)).collect();\n+            let ifce = ifce.as_ref().map(|trait_ref| lower_trait_ref(_lctx, trait_ref));\n+            hir::ItemImpl(lower_unsafety(_lctx, unsafety),\n+                          lower_impl_polarity(_lctx, polarity),\n+                          lower_generics(_lctx, generics),\n                           ifce,\n-                          lower_ty(ty),\n+                          lower_ty(_lctx, ty),\n                           new_impl_items)\n         }\n         ItemTrait(unsafety, ref generics, ref bounds, ref items) => {\n-            let bounds = lower_bounds(bounds);\n-            let items = items.iter().map(|item| lower_trait_item(item)).collect();\n-            hir::ItemTrait(lower_unsafety(unsafety),\n-                           lower_generics(generics),\n+            let bounds = lower_bounds(_lctx, bounds);\n+            let items = items.iter().map(|item| lower_trait_item(_lctx, item)).collect();\n+            hir::ItemTrait(lower_unsafety(_lctx, unsafety),\n+                           lower_generics(_lctx, generics),\n                            bounds,\n                            items)\n         }\n         ItemMac(_) => panic!(\"Shouldn't still be around\"),\n     }\n }\n \n-pub fn lower_trait_item(i: &TraitItem) -> P<hir::TraitItem> {\n+pub fn lower_trait_item(_lctx: &LoweringContext, i: &TraitItem) -> P<hir::TraitItem> {\n     P(hir::TraitItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n         node: match i.node {\n             ConstTraitItem(ref ty, ref default) => {\n-                hir::ConstTraitItem(lower_ty(ty),\n-                                    default.as_ref().map(|x| lower_expr(x)))\n+                hir::ConstTraitItem(lower_ty(_lctx, ty),\n+                                    default.as_ref().map(|x| lower_expr(_lctx, x)))\n             }\n             MethodTraitItem(ref sig, ref body) => {\n-                hir::MethodTraitItem(lower_method_sig(sig),\n-                                     body.as_ref().map(|x| lower_block(x)))\n+                hir::MethodTraitItem(lower_method_sig(_lctx, sig),\n+                                     body.as_ref().map(|x| lower_block(_lctx, x)))\n             }\n             TypeTraitItem(ref bounds, ref default) => {\n-                hir::TypeTraitItem(lower_bounds(bounds),\n-                                   default.as_ref().map(|x| lower_ty(x)))\n+                hir::TypeTraitItem(lower_bounds(_lctx, bounds),\n+                                   default.as_ref().map(|x| lower_ty(_lctx, x)))\n             }\n         },\n         span: i.span,\n     })\n }\n \n-pub fn lower_impl_item(i: &ImplItem) -> P<hir::ImplItem> {\n+pub fn lower_impl_item(_lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem> {\n     P(hir::ImplItem {\n-        id: i.id,\n-        name: i.ident.name,\n-        attrs: i.attrs.clone(),\n-        vis: lower_visibility(i.vis),\n-        node: match i.node {\n+            id: i.id,\n+            name: i.ident.name,\n+            attrs: i.attrs.clone(),\n+            vis: lower_visibility(_lctx, i.vis),\n+            node: match i.node  {\n             ConstImplItem(ref ty, ref expr) => {\n-                hir::ConstImplItem(lower_ty(ty), lower_expr(expr))\n+                hir::ConstImplItem(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n             }\n             MethodImplItem(ref sig, ref body) => {\n-                hir::MethodImplItem(lower_method_sig(sig), lower_block(body))\n+                hir::MethodImplItem(lower_method_sig(_lctx, sig),\n+                                    lower_block(_lctx, body))\n             }\n-            TypeImplItem(ref ty) => hir::TypeImplItem(lower_ty(ty)),\n+            TypeImplItem(ref ty) => hir::TypeImplItem(lower_ty(_lctx, ty)),\n             MacImplItem(..) => panic!(\"Shouldn't exist any more\"),\n         },\n         span: i.span,\n     })\n }\n \n-pub fn lower_mod(m: &Mod) -> hir::Mod {\n-    hir::Mod {\n-        inner: m.inner,\n-        items: m.items.iter().map(|x| lower_item(x)).collect(),\n-    }\n+pub fn lower_mod(_lctx: &LoweringContext, m: &Mod) -> hir::Mod {\n+    hir::Mod { inner: m.inner, items: m.items.iter().map(|x| lower_item(_lctx, x)).collect() }\n }\n \n-pub fn lower_crate(c: &Crate) -> hir::Crate {\n+pub fn lower_crate(_lctx: &LoweringContext, c: &Crate) -> hir::Crate {\n     hir::Crate {\n-        module: lower_mod(&c.module),\n+        module: lower_mod(_lctx, &c.module),\n         attrs: c.attrs.clone(),\n         config: c.config.clone(),\n         span: c.span,\n-        exported_macros: c.exported_macros.iter().map(|m| lower_macro_def(m)).collect(),\n+        exported_macros: c.exported_macros.iter().map(|m| lower_macro_def(_lctx, m)).collect(),\n     }\n }\n \n-pub fn lower_macro_def(m: &MacroDef) -> hir::MacroDef {\n+pub fn lower_macro_def(_lctx: &LoweringContext, m: &MacroDef) -> hir::MacroDef {\n     hir::MacroDef {\n         name: m.ident.name,\n         attrs: m.attrs.clone(),\n@@ -584,76 +579,76 @@ pub fn lower_macro_def(m: &MacroDef) -> hir::MacroDef {\n }\n \n // fold one item into possibly many items\n-pub fn lower_item(i: &Item) -> P<hir::Item> {\n-    P(lower_item_simple(i))\n+pub fn lower_item(_lctx: &LoweringContext, i: &Item) -> P<hir::Item> {\n+    P(lower_item_simple(_lctx, i))\n }\n \n // fold one item into exactly one item\n-pub fn lower_item_simple(i: &Item) -> hir::Item {\n-    let node = lower_item_underscore(&i.node);\n+pub fn lower_item_simple(_lctx: &LoweringContext, i: &Item) -> hir::Item {\n+    let node = lower_item_underscore(_lctx, &i.node);\n \n     hir::Item {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n         node: node,\n-        vis: lower_visibility(i.vis),\n+        vis: lower_visibility(_lctx, i.vis),\n         span: i.span,\n     }\n }\n \n-pub fn lower_foreign_item(i: &ForeignItem) -> P<hir::ForeignItem> {\n+pub fn lower_foreign_item(_lctx: &LoweringContext, i: &ForeignItem) -> P<hir::ForeignItem> {\n     P(hir::ForeignItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n         node: match i.node {\n             ForeignItemFn(ref fdec, ref generics) => {\n-                hir::ForeignItemFn(lower_fn_decl(fdec), lower_generics(generics))\n+                hir::ForeignItemFn(lower_fn_decl(_lctx, fdec), lower_generics(_lctx, generics))\n             }\n             ForeignItemStatic(ref t, m) => {\n-                hir::ForeignItemStatic(lower_ty(t), m)\n+                hir::ForeignItemStatic(lower_ty(_lctx, t), m)\n             }\n         },\n-        vis: lower_visibility(i.vis),\n-        span: i.span,\n-    })\n+            vis: lower_visibility(_lctx, i.vis),\n+            span: i.span,\n+        })\n }\n \n-pub fn lower_method_sig(sig: &MethodSig) -> hir::MethodSig {\n+pub fn lower_method_sig(_lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n     hir::MethodSig {\n-        generics: lower_generics(&sig.generics),\n+        generics: lower_generics(_lctx, &sig.generics),\n         abi: sig.abi,\n-        explicit_self: lower_explicit_self(&sig.explicit_self),\n-        unsafety: lower_unsafety(sig.unsafety),\n-        constness: lower_constness(sig.constness),\n-        decl: lower_fn_decl(&sig.decl),\n+        explicit_self: lower_explicit_self(_lctx, &sig.explicit_self),\n+        unsafety: lower_unsafety(_lctx, sig.unsafety),\n+        constness: lower_constness(_lctx, sig.constness),\n+        decl: lower_fn_decl(_lctx, &sig.decl),\n     }\n }\n \n-pub fn lower_unsafety(u: Unsafety) -> hir::Unsafety {\n+pub fn lower_unsafety(_lctx: &LoweringContext, u: Unsafety) -> hir::Unsafety {\n     match u {\n         Unsafety::Unsafe => hir::Unsafety::Unsafe,\n         Unsafety::Normal => hir::Unsafety::Normal,\n     }\n }\n \n-pub fn lower_constness(c: Constness) -> hir::Constness {\n+pub fn lower_constness(_lctx: &LoweringContext, c: Constness) -> hir::Constness {\n     match c {\n         Constness::Const => hir::Constness::Const,\n         Constness::NotConst => hir::Constness::NotConst,\n     }\n }\n \n-pub fn lower_unop(u: UnOp) -> hir::UnOp {\n+pub fn lower_unop(_lctx: &LoweringContext, u: UnOp) -> hir::UnOp {\n     match u {\n         UnDeref => hir::UnDeref,\n         UnNot => hir::UnNot,\n         UnNeg => hir::UnNeg,\n     }\n }\n \n-pub fn lower_binop(b: BinOp) -> hir::BinOp {\n+pub fn lower_binop(_lctx: &LoweringContext, b: BinOp) -> hir::BinOp {\n     Spanned {\n         node: match b.node {\n             BiAdd => hir::BiAdd,\n@@ -679,150 +674,159 @@ pub fn lower_binop(b: BinOp) -> hir::BinOp {\n     }\n }\n \n-pub fn lower_pat(p: &Pat) -> P<hir::Pat> {\n+pub fn lower_pat(_lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n     P(hir::Pat {\n-        id: p.id,\n-        node: match p.node {\n-            PatWild(k) => hir::PatWild(lower_pat_wild_kind(k)),\n+            id: p.id,\n+            node: match p.node {\n+            PatWild(k) => hir::PatWild(lower_pat_wild_kind(_lctx, k)),\n             PatIdent(ref binding_mode, pth1, ref sub) => {\n-                hir::PatIdent(lower_binding_mode(binding_mode),\n-                              pth1,\n-                              sub.as_ref().map(|x| lower_pat(x)))\n+                hir::PatIdent(lower_binding_mode(_lctx, binding_mode),\n+                        pth1,\n+                        sub.as_ref().map(|x| lower_pat(_lctx, x)))\n             }\n-            PatLit(ref e) => hir::PatLit(lower_expr(e)),\n+            PatLit(ref e) => hir::PatLit(lower_expr(_lctx, e)),\n             PatEnum(ref pth, ref pats) => {\n-                hir::PatEnum(lower_path(pth),\n-                             pats.as_ref().map(|pats| pats.iter().map(|x| lower_pat(x)).collect()))\n+                hir::PatEnum(lower_path(_lctx, pth),\n+                             pats.as_ref()\n+                                 .map(|pats| pats.iter().map(|x| lower_pat(_lctx, x)).collect()))\n             }\n             PatQPath(ref qself, ref pth) => {\n                 let qself = hir::QSelf {\n-                    ty: lower_ty(&qself.ty),\n+                    ty: lower_ty(_lctx, &qself.ty),\n                     position: qself.position,\n                 };\n-                hir::PatQPath(qself, lower_path(pth))\n+                hir::PatQPath(qself, lower_path(_lctx, pth))\n             }\n             PatStruct(ref pth, ref fields, etc) => {\n-                let pth = lower_path(pth);\n-                let fs = fields.iter()\n-                               .map(|f| {\n-                                   Spanned {\n-                                       span: f.span,\n-                                       node: hir::FieldPat {\n-                                           name: f.node.ident.name,\n-                                           pat: lower_pat(&f.node.pat),\n-                                           is_shorthand: f.node.is_shorthand,\n-                                       },\n-                                   }\n-                               })\n-                               .collect();\n+                let pth = lower_path(_lctx, pth);\n+                let fs = fields.iter().map(|f| {\n+                    Spanned { span: f.span,\n+                              node: hir::FieldPat {\n+                                  name: f.node.ident.name,\n+                                  pat: lower_pat(_lctx, &f.node.pat),\n+                                  is_shorthand: f.node.is_shorthand,\n+                              }}\n+                }).collect();\n                 hir::PatStruct(pth, fs, etc)\n             }\n-            PatTup(ref elts) => hir::PatTup(elts.iter().map(|x| lower_pat(x)).collect()),\n-            PatBox(ref inner) => hir::PatBox(lower_pat(inner)),\n-            PatRegion(ref inner, mutbl) =>\n-                hir::PatRegion(lower_pat(inner), lower_mutability(mutbl)),\n+            PatTup(ref elts) => hir::PatTup(elts.iter().map(|x| lower_pat(_lctx, x)).collect()),\n+            PatBox(ref inner) => hir::PatBox(lower_pat(_lctx, inner)),\n+            PatRegion(ref inner, mutbl) => hir::PatRegion(lower_pat(_lctx, inner),\n+                                                          lower_mutability(_lctx, mutbl)),\n             PatRange(ref e1, ref e2) => {\n-                hir::PatRange(lower_expr(e1), lower_expr(e2))\n-            }\n+                hir::PatRange(lower_expr(_lctx, e1), lower_expr(_lctx, e2))\n+            },\n             PatVec(ref before, ref slice, ref after) => {\n-                hir::PatVec(before.iter().map(|x| lower_pat(x)).collect(),\n-                            slice.as_ref().map(|x| lower_pat(x)),\n-                            after.iter().map(|x| lower_pat(x)).collect())\n+                hir::PatVec(before.iter().map(|x| lower_pat(_lctx, x)).collect(),\n+                       slice.as_ref().map(|x| lower_pat(_lctx, x)),\n+                       after.iter().map(|x| lower_pat(_lctx, x)).collect())\n             }\n             PatMac(_) => panic!(\"Shouldn't exist here\"),\n         },\n         span: p.span,\n     })\n }\n \n-pub fn lower_expr(e: &Expr) -> P<hir::Expr> {\n+pub fn lower_expr(_lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n     P(hir::Expr {\n-        id: e.id,\n-        node: match e.node {\n-            ExprBox(ref e) => {\n-                hir::ExprBox(lower_expr(e))\n-            }\n-            ExprVec(ref exprs) => {\n-                hir::ExprVec(exprs.iter().map(|x| lower_expr(x)).collect())\n-            }\n-            ExprRepeat(ref expr, ref count) => {\n-                hir::ExprRepeat(lower_expr(expr), lower_expr(count))\n-            }\n-            ExprTup(ref elts) => hir::ExprTup(elts.iter().map(|x| lower_expr(x)).collect()),\n-            ExprCall(ref f, ref args) => {\n-                hir::ExprCall(lower_expr(f),\n-                              args.iter().map(|x| lower_expr(x)).collect())\n-            }\n-            ExprMethodCall(i, ref tps, ref args) => {\n-                hir::ExprMethodCall(respan(i.span, i.node.name),\n-                                    tps.iter().map(|x| lower_ty(x)).collect(),\n-                                    args.iter().map(|x| lower_expr(x)).collect())\n-            }\n-            ExprBinary(binop, ref lhs, ref rhs) => {\n-                hir::ExprBinary(lower_binop(binop), lower_expr(lhs), lower_expr(rhs))\n-            }\n-            ExprUnary(op, ref ohs) => {\n-                hir::ExprUnary(lower_unop(op), lower_expr(ohs))\n-            }\n-            ExprLit(ref l) => hir::ExprLit(P((**l).clone())),\n-            ExprCast(ref expr, ref ty) => {\n-                hir::ExprCast(lower_expr(expr), lower_ty(ty))\n-            }\n-            ExprAddrOf(m, ref ohs) => hir::ExprAddrOf(lower_mutability(m), lower_expr(ohs)),\n-            ExprIf(ref cond, ref tr, ref fl) => {\n-                hir::ExprIf(lower_expr(cond),\n-                            lower_block(tr),\n-                            fl.as_ref().map(|x| lower_expr(x)))\n-            }\n-            ExprWhile(ref cond, ref body, opt_ident) => {\n-                hir::ExprWhile(lower_expr(cond), lower_block(body), opt_ident)\n-            }\n-            ExprLoop(ref body, opt_ident) => {\n-                hir::ExprLoop(lower_block(body), opt_ident)\n-            }\n-            ExprMatch(ref expr, ref arms, ref source) => {\n-                hir::ExprMatch(lower_expr(expr),\n-                               arms.iter().map(|x| lower_arm(x)).collect(),\n-                               lower_match_source(source))\n-            }\n-            ExprClosure(capture_clause, ref decl, ref body) => {\n-                hir::ExprClosure(lower_capture_clause(capture_clause),\n-                                 lower_fn_decl(decl),\n-                                 lower_block(body))\n-            }\n-            ExprBlock(ref blk) => hir::ExprBlock(lower_block(blk)),\n-            ExprAssign(ref el, ref er) => {\n-                hir::ExprAssign(lower_expr(el), lower_expr(er))\n-            }\n-            ExprAssignOp(op, ref el, ref er) => {\n-                hir::ExprAssignOp(lower_binop(op), lower_expr(el), lower_expr(er))\n-            }\n-            ExprField(ref el, ident) => {\n-                hir::ExprField(lower_expr(el), respan(ident.span, ident.node.name))\n-            }\n-            ExprTupField(ref el, ident) => {\n-                hir::ExprTupField(lower_expr(el), ident)\n-            }\n-            ExprIndex(ref el, ref er) => {\n-                hir::ExprIndex(lower_expr(el), lower_expr(er))\n-            }\n-            ExprRange(ref e1, ref e2) => {\n-                hir::ExprRange(e1.as_ref().map(|x| lower_expr(x)),\n-                               e2.as_ref().map(|x| lower_expr(x)))\n-            }\n-            ExprPath(ref qself, ref path) => {\n-                let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n-                    hir::QSelf {\n-                        ty: lower_ty(ty),\n-                        position: position,\n-                    }\n-                });\n-                hir::ExprPath(qself, lower_path(path))\n-            }\n-            ExprBreak(opt_ident) => hir::ExprBreak(opt_ident),\n-            ExprAgain(opt_ident) => hir::ExprAgain(opt_ident),\n-            ExprRet(ref e) => hir::ExprRet(e.as_ref().map(|x| lower_expr(x))),\n-            ExprInlineAsm(InlineAsm {\n+            id: e.id,\n+            node: match e.node {\n+                ExprBox(ref e) => {\n+                    hir::ExprBox(lower_expr(_lctx, e))\n+                }\n+                ExprVec(ref exprs) => {\n+                    hir::ExprVec(exprs.iter().map(|x| lower_expr(_lctx, x)).collect())\n+                }\n+                ExprRepeat(ref expr, ref count) => {\n+                    hir::ExprRepeat(lower_expr(_lctx, expr), lower_expr(_lctx, count))\n+                }\n+                ExprTup(ref elts) => {\n+                    hir::ExprTup(elts.iter().map(|x| lower_expr(_lctx, x)).collect())\n+                }\n+                ExprCall(ref f, ref args) => {\n+                    hir::ExprCall(lower_expr(_lctx, f),\n+                             args.iter().map(|x| lower_expr(_lctx, x)).collect())\n+                }\n+                ExprMethodCall(i, ref tps, ref args) => {\n+                    hir::ExprMethodCall(\n+                        respan(i.span, i.node.name),\n+                        tps.iter().map(|x| lower_ty(_lctx, x)).collect(),\n+                        args.iter().map(|x| lower_expr(_lctx, x)).collect())\n+                }\n+                ExprBinary(binop, ref lhs, ref rhs) => {\n+                    hir::ExprBinary(lower_binop(_lctx, binop),\n+                            lower_expr(_lctx, lhs),\n+                            lower_expr(_lctx, rhs))\n+                }\n+                ExprUnary(op, ref ohs) => {\n+                    hir::ExprUnary(lower_unop(_lctx, op), lower_expr(_lctx, ohs))\n+                }\n+                ExprLit(ref l) => hir::ExprLit(P((**l).clone())),\n+                ExprCast(ref expr, ref ty) => {\n+                    hir::ExprCast(lower_expr(_lctx, expr), lower_ty(_lctx, ty))\n+                }\n+                ExprAddrOf(m, ref ohs) => {\n+                    hir::ExprAddrOf(lower_mutability(_lctx, m), lower_expr(_lctx, ohs))\n+                }\n+                ExprIf(ref cond, ref tr, ref fl) => {\n+                    hir::ExprIf(lower_expr(_lctx, cond),\n+                           lower_block(_lctx, tr),\n+                           fl.as_ref().map(|x| lower_expr(_lctx, x)))\n+                }\n+                ExprWhile(ref cond, ref body, opt_ident) => {\n+                    hir::ExprWhile(lower_expr(_lctx, cond),\n+                              lower_block(_lctx, body),\n+                              opt_ident)\n+                }\n+                ExprLoop(ref body, opt_ident) => {\n+                    hir::ExprLoop(lower_block(_lctx, body),\n+                            opt_ident)\n+                }\n+                ExprMatch(ref expr, ref arms, ref source) => {\n+                    hir::ExprMatch(lower_expr(_lctx, expr),\n+                            arms.iter().map(|x| lower_arm(_lctx, x)).collect(),\n+                            lower_match_source(_lctx, source))\n+                }\n+                ExprClosure(capture_clause, ref decl, ref body) => {\n+                    hir::ExprClosure(lower_capture_clause(_lctx, capture_clause),\n+                                lower_fn_decl(_lctx, decl),\n+                                lower_block(_lctx, body))\n+                }\n+                ExprBlock(ref blk) => hir::ExprBlock(lower_block(_lctx, blk)),\n+                ExprAssign(ref el, ref er) => {\n+                    hir::ExprAssign(lower_expr(_lctx, el), lower_expr(_lctx, er))\n+                }\n+                ExprAssignOp(op, ref el, ref er) => {\n+                    hir::ExprAssignOp(lower_binop(_lctx, op),\n+                                lower_expr(_lctx, el),\n+                                lower_expr(_lctx, er))\n+                }\n+                ExprField(ref el, ident) => {\n+                    hir::ExprField(lower_expr(_lctx, el), respan(ident.span, ident.node.name))\n+                }\n+                ExprTupField(ref el, ident) => {\n+                    hir::ExprTupField(lower_expr(_lctx, el), ident)\n+                }\n+                ExprIndex(ref el, ref er) => {\n+                    hir::ExprIndex(lower_expr(_lctx, el), lower_expr(_lctx, er))\n+                }\n+                ExprRange(ref e1, ref e2) => {\n+                    hir::ExprRange(e1.as_ref().map(|x| lower_expr(_lctx, x)),\n+                              e2.as_ref().map(|x| lower_expr(_lctx, x)))\n+                }\n+                ExprPath(ref qself, ref path) => {\n+                    let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n+                        hir::QSelf {\n+                            ty: lower_ty(_lctx, ty),\n+                            position: position\n+                        }\n+                    });\n+                    hir::ExprPath(qself, lower_path(_lctx, path))\n+                }\n+                ExprBreak(opt_ident) => hir::ExprBreak(opt_ident),\n+                ExprAgain(opt_ident) => hir::ExprAgain(opt_ident),\n+                ExprRet(ref e) => hir::ExprRet(e.as_ref().map(|x| lower_expr(_lctx, x))),\n+                ExprInlineAsm(InlineAsm {\n                     ref inputs,\n                     ref outputs,\n                     ref asm,\n@@ -833,65 +837,63 @@ pub fn lower_expr(e: &Expr) -> P<hir::Expr> {\n                     dialect,\n                     expn_id,\n                 }) => hir::ExprInlineAsm(hir::InlineAsm {\n-                inputs: inputs.iter()\n-                              .map(|&(ref c, ref input)| (c.clone(), lower_expr(input)))\n-                              .collect(),\n-                outputs: outputs.iter()\n-                                .map(|&(ref c, ref out, ref is_rw)| {\n-                                    (c.clone(), lower_expr(out), *is_rw)\n-                                })\n-                                .collect(),\n-                asm: asm.clone(),\n-                asm_str_style: asm_str_style,\n-                clobbers: clobbers.clone(),\n-                volatile: volatile,\n-                alignstack: alignstack,\n-                dialect: dialect,\n-                expn_id: expn_id,\n-            }),\n-            ExprStruct(ref path, ref fields, ref maybe_expr) => {\n-                hir::ExprStruct(lower_path(path),\n-                                fields.iter().map(|x| lower_field(x)).collect(),\n-                                maybe_expr.as_ref().map(|x| lower_expr(x)))\n-            }\n-            ExprParen(ref ex) => {\n-                return lower_expr(ex);\n-            }\n-            ExprInPlace(..) |\n-            ExprIfLet(..) |\n-            ExprWhileLet(..) |\n-            ExprForLoop(..) |\n-            ExprMac(_) => panic!(\"Shouldn't exist here\"),\n-        },\n-        span: e.span,\n-    })\n+                    inputs: inputs.iter().map(|&(ref c, ref input)| {\n+                        (c.clone(), lower_expr(_lctx, input))\n+                    }).collect(),\n+                    outputs: outputs.iter().map(|&(ref c, ref out, ref is_rw)| {\n+                        (c.clone(), lower_expr(_lctx, out), *is_rw)\n+                    }).collect(),\n+                    asm: asm.clone(),\n+                    asm_str_style: asm_str_style,\n+                    clobbers: clobbers.clone(),\n+                    volatile: volatile,\n+                    alignstack: alignstack,\n+                    dialect: dialect,\n+                    expn_id: expn_id,\n+                }),\n+                ExprStruct(ref path, ref fields, ref maybe_expr) => {\n+                    hir::ExprStruct(lower_path(_lctx, path),\n+                            fields.iter().map(|x| lower_field(_lctx, x)).collect(),\n+                            maybe_expr.as_ref().map(|x| lower_expr(_lctx, x)))\n+                },\n+                ExprParen(ref ex) => {\n+                    return lower_expr(_lctx, ex);\n+                }\n+                ExprInPlace(..) |\n+                ExprIfLet(..) |\n+                ExprWhileLet(..) |\n+                ExprForLoop(..) |\n+                ExprMac(_) => panic!(\"Shouldn't exist here\"),\n+            },\n+            span: e.span,\n+        })\n }\n \n-pub fn lower_stmt(s: &Stmt) -> P<hir::Stmt> {\n+pub fn lower_stmt(_lctx: &LoweringContext, s: &Stmt) -> P<hir::Stmt> {\n     match s.node {\n         StmtDecl(ref d, id) => {\n             P(Spanned {\n-                node: hir::StmtDecl(lower_decl(d), id),\n-                span: s.span,\n+                node: hir::StmtDecl(lower_decl(_lctx, d), id),\n+                span: s.span\n             })\n         }\n         StmtExpr(ref e, id) => {\n             P(Spanned {\n-                node: hir::StmtExpr(lower_expr(e), id),\n-                span: s.span,\n+                node: hir::StmtExpr(lower_expr(_lctx, e), id),\n+                span: s.span\n             })\n         }\n         StmtSemi(ref e, id) => {\n             P(Spanned {\n-                node: hir::StmtSemi(lower_expr(e), id),\n-                span: s.span,\n+                node: hir::StmtSemi(lower_expr(_lctx, e), id),\n+                span: s.span\n             })\n         }\n         StmtMac(..) => panic!(\"Shouldn't exist here\"),\n     }\n }\n \n-pub fn lower_match_source(m: &MatchSource) -> hir::MatchSource {\n+pub fn lower_match_source(_lctx: &LoweringContext, m: &MatchSource) -> hir::MatchSource {\n     match *m {\n         MatchSource::Normal => hir::MatchSource::Normal,\n         MatchSource::IfLetDesugar { contains_else_clause } => {\n@@ -902,65 +904,69 @@ pub fn lower_match_source(m: &MatchSource) -> hir::MatchSource {\n     }\n }\n \n-pub fn lower_capture_clause(c: CaptureClause) -> hir::CaptureClause {\n+pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureClause) -> hir::CaptureClause {\n     match c {\n         CaptureByValue => hir::CaptureByValue,\n         CaptureByRef => hir::CaptureByRef,\n     }\n }\n \n-pub fn lower_visibility(v: Visibility) -> hir::Visibility {\n+pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibility {\n     match v {\n         Public => hir::Public,\n         Inherited => hir::Inherited,\n     }\n }\n \n-pub fn lower_block_check_mode(b: &BlockCheckMode) -> hir::BlockCheckMode {\n+pub fn lower_block_check_mode(_lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n     match *b {\n         DefaultBlock => hir::DefaultBlock,\n-        UnsafeBlock(u) => hir::UnsafeBlock(lower_unsafe_source(u)),\n-        PushUnsafeBlock(u) => hir::PushUnsafeBlock(lower_unsafe_source(u)),\n-        PopUnsafeBlock(u) => hir::PopUnsafeBlock(lower_unsafe_source(u)),\n+        UnsafeBlock(u) => hir::UnsafeBlock(lower_unsafe_source(_lctx, u)),\n+        PushUnsafeBlock(u) => hir::PushUnsafeBlock(lower_unsafe_source(_lctx, u)),\n+        PopUnsafeBlock(u) => hir::PopUnsafeBlock(lower_unsafe_source(_lctx, u)),\n     }\n }\n \n-pub fn lower_pat_wild_kind(p: PatWildKind) -> hir::PatWildKind {\n+pub fn lower_pat_wild_kind(_lctx: &LoweringContext, p: PatWildKind) -> hir::PatWildKind {\n     match p {\n         PatWildSingle => hir::PatWildSingle,\n         PatWildMulti => hir::PatWildMulti,\n     }\n }\n \n-pub fn lower_binding_mode(b: &BindingMode) -> hir::BindingMode {\n+pub fn lower_binding_mode(_lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode {\n     match *b {\n-        BindByRef(m) => hir::BindByRef(lower_mutability(m)),\n-        BindByValue(m) => hir::BindByValue(lower_mutability(m)),\n+        BindByRef(m) => hir::BindByRef(lower_mutability(_lctx, m)),\n+        BindByValue(m) => hir::BindByValue(lower_mutability(_lctx, m)),\n     }\n }\n \n-pub fn lower_struct_field_kind(s: &StructFieldKind) -> hir::StructFieldKind {\n+pub fn lower_struct_field_kind(_lctx: &LoweringContext,\n+                               s: &StructFieldKind)\n+                               -> hir::StructFieldKind {\n     match *s {\n-        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(vis)),\n-        UnnamedField(vis) => hir::UnnamedField(lower_visibility(vis)),\n+        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(_lctx, vis)),\n+        UnnamedField(vis) => hir::UnnamedField(lower_visibility(_lctx, vis)),\n     }\n }\n \n-pub fn lower_unsafe_source(u: UnsafeSource) -> hir::UnsafeSource {\n+pub fn lower_unsafe_source(_lctx: &LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n     match u {\n         CompilerGenerated => hir::CompilerGenerated,\n         UserProvided => hir::UserProvided,\n     }\n }\n \n-pub fn lower_impl_polarity(i: ImplPolarity) -> hir::ImplPolarity {\n+pub fn lower_impl_polarity(_lctx: &LoweringContext, i: ImplPolarity) -> hir::ImplPolarity {\n     match i {\n         ImplPolarity::Positive => hir::ImplPolarity::Positive,\n         ImplPolarity::Negative => hir::ImplPolarity::Negative,\n     }\n }\n \n-pub fn lower_trait_bound_modifier(f: TraitBoundModifier) -> hir::TraitBoundModifier {\n+pub fn lower_trait_bound_modifier(_lctx: &LoweringContext,\n+                                  f: TraitBoundModifier)\n+                                  -> hir::TraitBoundModifier {\n     match f {\n         TraitBoundModifier::None => hir::TraitBoundModifier::None,\n         TraitBoundModifier::Maybe => hir::TraitBoundModifier::Maybe,"}, {"sha": "296dd44a9bc851833038f538b6a82da22ccfaa13", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=56713a1684c22742a3a4d3d2b19fa09fa6832024", "patch": "@@ -47,7 +47,7 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string, ty_to_string};\n use syntax::ptr::P;\n \n-use rustc_front::lowering::lower_expr;\n+use rustc_front::lowering::{lower_expr, LoweringContext};\n \n use super::span_utils::SpanUtils;\n use super::recorder::{Recorder, FmtStrs};\n@@ -76,14 +76,15 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n \n impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     pub fn new(tcx: &'l ty::ctxt<'tcx>,\n+               lcx: &'l LoweringContext<'tcx>,\n                analysis: &'l ty::CrateAnalysis,\n                output_file: Box<File>)\n                -> DumpCsvVisitor<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);\n         DumpCsvVisitor {\n             sess: &tcx.sess,\n             tcx: tcx,\n-            save_ctxt: SaveContext::from_span_utils(tcx, span_utils.clone()),\n+            save_ctxt: SaveContext::from_span_utils(tcx, lcx, span_utils.clone()),\n             analysis: analysis,\n             span: span_utils.clone(),\n             fmt: FmtStrs::new(box Recorder {\n@@ -1035,7 +1036,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 visit::walk_expr(self, ex);\n             }\n             ast::ExprStruct(ref path, ref fields, ref base) => {\n-                let hir_expr = lower_expr(ex);\n+                let hir_expr = lower_expr(self.save_ctxt.lcx, ex);\n                 let adt = self.tcx.expr_ty(&hir_expr).ty_adt_def().unwrap();\n                 let def = self.tcx.resolve_expr(&hir_expr);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_def(def), base)\n@@ -1064,7 +1065,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n                 self.visit_expr(&**sub_ex);\n \n-                let hir_node = lower_expr(sub_ex);\n+                let hir_node = lower_expr(self.save_ctxt.lcx, sub_ex);\n                 let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n                 match *ty {\n                     ty::TyStruct(def, _) => {"}, {"sha": "0d4d97d2b6a4481991ed8b8044442563819a51ce", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56713a1684c22742a3a4d3d2b19fa09fa6832024/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=56713a1684c22742a3a4d3d2b19fa09fa6832024", "patch": "@@ -38,6 +38,7 @@ mod dump_csv;\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: &'l ty::ctxt<'tcx>,\n+    lcx: &'l lowering::LoweringContext<'tcx>,\n     span_utils: SpanUtils<'l>,\n }\n \n@@ -176,16 +177,18 @@ pub struct MethodCallData {\n \n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n-    pub fn new(tcx: &'l ty::ctxt<'tcx>) -> SaveContext<'l, 'tcx> {\n+    pub fn new(tcx: &'l ty::ctxt<'tcx>, lcx: &'l lowering::LoweringContext<'tcx>) -> SaveContext<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);\n-        SaveContext::from_span_utils(tcx, span_utils)\n+        SaveContext::from_span_utils(tcx, lcx, span_utils)\n     }\n \n     pub fn from_span_utils(tcx: &'l ty::ctxt<'tcx>,\n+                           lcx: &'l lowering::LoweringContext<'tcx>,\n                            span_utils: SpanUtils<'l>)\n                            -> SaveContext<'l, 'tcx> {\n         SaveContext {\n             tcx: tcx,\n+            lcx: lcx,\n             span_utils: span_utils,\n         }\n     }\n@@ -454,7 +457,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn get_expr_data(&self, expr: &ast::Expr) -> Option<Data> {\n         match expr.node {\n             ast::ExprField(ref sub_ex, ident) => {\n-                let hir_node = lowering::lower_expr(sub_ex);\n+                let hir_node = lowering::lower_expr(self.lcx, sub_ex);\n                 let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n                 match *ty {\n                     ty::TyStruct(def, _) => {\n@@ -474,7 +477,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }\n             }\n             ast::ExprStruct(ref path, _, _) => {\n-                let hir_node = lowering::lower_expr(expr);\n+                let hir_node = lowering::lower_expr(self.lcx, expr);\n                 let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n                 match *ty {\n                     ty::TyStruct(def, _) => {\n@@ -705,10 +708,11 @@ impl<'v> Visitor<'v> for PathCollector {\n     }\n }\n \n-pub fn process_crate(tcx: &ty::ctxt,\n-                     krate: &ast::Crate,\n-                     analysis: &ty::CrateAnalysis,\n-                     odir: Option<&Path>) {\n+pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n+                               lcx: &'l lowering::LoweringContext<'tcx>,\n+                               krate: &ast::Crate,\n+                               analysis: &ty::CrateAnalysis,\n+                               odir: Option<&Path>) {\n     if generated_code(krate.span) {\n         return;\n     }\n@@ -757,7 +761,7 @@ pub fn process_crate(tcx: &ty::ctxt,\n     };\n     root_path.pop();\n \n-    let mut visitor = dump_csv::DumpCsvVisitor::new(tcx, analysis, output_file);\n+    let mut visitor = dump_csv::DumpCsvVisitor::new(tcx, lcx, analysis, output_file);\n \n     visitor.dump_crate_info(&cratename, krate);\n     visit::walk_crate(&mut visitor, krate);"}]}