{"sha": "62b9e0643b54f2ebe9d01e9537de7d4ad741ca83", "node_id": "C_kwDOAAsO6NoAKDYyYjllMDY0M2I1NGYyZWJlOWQwMWU5NTM3ZGU3ZDRhZDc0MWNhODM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-29T21:01:57Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-29T21:21:40Z"}, "message": "rustdoc: show implementations on `#[fundamental]` wrappers\n\nFixes #92940", "tree": {"sha": "6c41e712b4afb14a4a33e2d8fc8db7658a8640ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c41e712b4afb14a4a33e2d8fc8db7658a8640ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83", "html_url": "https://github.com/rust-lang/rust/commit/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c8966e5e9dc099b55206f34af81242d03bdb413", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8966e5e9dc099b55206f34af81242d03bdb413", "html_url": "https://github.com/rust-lang/rust/commit/1c8966e5e9dc099b55206f34af81242d03bdb413"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "59ad83ab703d5b81eab16aa6680916d364e1ac80", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=62b9e0643b54f2ebe9d01e9537de7d4ad741ca83", "patch": "@@ -3,7 +3,7 @@ use std::mem;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_middle::middle::privacy::AccessLevels;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{sym, Symbol};\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate, ItemId, PrimitiveType};\n@@ -450,6 +450,15 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 clean::Type::Path { ref path }\n                 | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. } => {\n                     dids.insert(path.def_id());\n+                    if let Some(generics) = path.generics() &&\n+                        let ty::Adt(adt, _) = self.tcx.type_of(path.def_id()).kind() &&\n+                        adt.is_fundamental() {\n+                        for ty in generics {\n+                            if let Some(did) = ty.def_id(&self.cache) {\n+                                dids.insert(did);\n+                            }\n+                        }\n+                    }\n                 }\n                 clean::DynTrait(ref bounds, _)\n                 | clean::BorrowedRef { type_: box clean::DynTrait(ref bounds, _), .. } => {"}, {"sha": "a371db135cff3c3bf3a682161a6678c35204a931", "filename": "src/test/rustdoc/impl-box.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83/src%2Ftest%2Frustdoc%2Fimpl-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b9e0643b54f2ebe9d01e9537de7d4ad741ca83/src%2Ftest%2Frustdoc%2Fimpl-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-box.rs?ref=62b9e0643b54f2ebe9d01e9537de7d4ad741ca83", "patch": "@@ -0,0 +1,16 @@\n+// https://github.com/rust-lang/rust/issues/92940\n+//\n+// Show traits implemented on fundamental types that wrap local ones.\n+\n+pub struct MyType;\n+\n+// @has 'impl_box/struct.MyType.html'\n+// @has '-' '//*[@id=\"impl-Iterator\"]' 'impl Iterator for Box<MyType>'\n+\n+impl Iterator for Box<MyType> {\n+    type Item = ();\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        todo!()\n+    }\n+}"}]}