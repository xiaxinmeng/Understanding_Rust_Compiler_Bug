{"sha": "c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZTBlOTU0OWQ0MzI3YzU0ZDllYjVmZDBkZTVlMjMzMTJjMzRmZTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-15T23:16:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-17T00:55:46Z"}, "message": "Feature gate SIMD in FFI, due to unknown ABIs.\n\nI don't know if this handling of SIMD types is correct for the C ABI on\nall platforms, so lets add an even finer feature gate than just the\n`simd` one.\n\nThe `simd` one can be used with (relatively) little risk of complete\nnonsense, the reason for it is that it is likely that things will\nchange. Using the types in FFI with an incorrect ABI will at best give\nabsolute nonsense results, but possibly cause serious breakage too, so\nthis is a step up in badness, hence a new feature gate.", "tree": {"sha": "7fffb2a1707a94f4ad61f207700b8bb8ca3b8919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fffb2a1707a94f4ad61f207700b8bb8ca3b8919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "html_url": "https://github.com/rust-lang/rust/commit/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f08de84c923f08535e9a6f754b2776286ebcd01", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f08de84c923f08535e9a6f754b2776286ebcd01", "html_url": "https://github.com/rust-lang/rust/commit/4f08de84c923f08535e9a6f754b2776286ebcd01"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "abb961d87de96a23078c165a0e2efb406f08c940", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "patch": "@@ -36,6 +36,7 @@ use syntax::parse::token::{InternedString, special_idents};\n use syntax::parse::token;\n use syntax::{ast};\n use syntax::{attr, ast_map};\n+use syntax::print::pprust;\n use util::ppaux::Repr;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -426,16 +427,47 @@ pub fn trans_native_call<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     return bcx;\n }\n \n+// feature gate SIMD types in FFI, since I (huonw) am not sure the\n+// ABIs are handled at all correctly.\n+fn gate_simd_ffi(tcx: &ty::ctxt, decl: &ast::FnDecl, ty: &ty::BareFnTy) {\n+    if !tcx.sess.features.borrow().simd_ffi {\n+        let check = |&: ast_ty: &ast::Ty, ty: ty::Ty| {\n+            if ty::type_is_simd(tcx, ty) {\n+                tcx.sess.span_err(ast_ty.span,\n+                              &format!(\"use of SIMD type `{}` in FFI is highly experimental and \\\n+                                        may result in invalid code\",\n+                                       pprust::ty_to_string(ast_ty))[]);\n+                tcx.sess.span_help(ast_ty.span,\n+                                   \"add #![feature(simd_ffi)] to the crate attributes to enable\");\n+            }\n+        };\n+        let sig = &ty.sig.0;\n+        for (input, ty) in decl.inputs.iter().zip(sig.inputs.iter()) {\n+            check(&*input.ty, *ty)\n+        }\n+        match decl.output {\n+            ast::NoReturn(_) => {}\n+            ast::Return(ref ty) => check(&**ty, sig.output.unwrap())\n+        }\n+    }\n+}\n+\n pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n     let _icx = push_ctxt(\"foreign::trans_foreign_mod\");\n     for foreign_item in foreign_mod.items.iter() {\n         let lname = link_name(&**foreign_item);\n \n-        if let ast::ForeignItemFn(..) = foreign_item.node {\n+        if let ast::ForeignItemFn(ref decl, _) = foreign_item.node {\n             match foreign_mod.abi {\n                 Rust | RustIntrinsic => {}\n                 abi => {\n                     let ty = ty::node_id_to_type(ccx.tcx(), foreign_item.id);\n+                    match ty.sty {\n+                        ty::ty_bare_fn(_, bft) => gate_simd_ffi(ccx.tcx(), &**decl, bft),\n+                        _ => ccx.tcx().sess.span_bug(foreign_item.span,\n+                                                     \"foreign fn's sty isn't a bare_fn_ty?\")\n+                    }\n+\n                     register_foreign_item_fn(ccx, abi, ty,\n                                              &lname.get()[]);\n                     // Unlike for other items, we shouldn't call"}, {"sha": "9231d4ad659430c058b961e810dbd5e3fee0ef6a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "patch": "@@ -72,6 +72,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"slicing_syntax\", Active),\n     (\"box_syntax\", Active),\n     (\"on_unimplemented\", Active),\n+    (\"simd_ffi\", Active),\n \n     (\"if_let\", Accepted),\n     (\"while_let\", Accepted),\n@@ -128,6 +129,7 @@ pub struct Features {\n     pub visible_private_types: bool,\n     pub quote: bool,\n     pub old_orphan_check: bool,\n+    pub simd_ffi: bool,\n }\n \n impl Features {\n@@ -139,6 +141,7 @@ impl Features {\n             visible_private_types: false,\n             quote: false,\n             old_orphan_check: false,\n+            simd_ffi: false,\n         }\n     }\n }\n@@ -524,6 +527,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         quote: cx.has_feature(\"quote\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n+        simd_ffi: cx.has_feature(\"simd_ffi\"),\n     },\n     unknown_features)\n }"}, {"sha": "409c85b71980413e5e03c6cc5ab16c7f56abaab4", "filename": "src/test/compile-fail/feature-gate-simd-ffi.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs?ref=c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(simd)]\n+#![allow(dead_code)]\n+\n+use std::simd::f32x4;\n+\n+#[simd] #[derive(Copy)] #[repr(C)] struct LocalSimd(u8, u8);\n+\n+extern {\n+    fn foo() -> f32x4; //~ ERROR use of SIMD type\n+    fn bar(x: f32x4); //~ ERROR use of SIMD type\n+\n+    fn baz() -> LocalSimd; //~ ERROR use of SIMD type\n+    fn qux(x: LocalSimd); //~ ERROR use of SIMD type\n+}\n+\n+fn main() {}"}, {"sha": "76079ddb8bd910bca3cc111905ce02db0b9e86d4", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=c8e0e9549d4327c54d9eb5fd0de5e23312c34fe9", "patch": "@@ -14,7 +14,7 @@\n // cross-compiled standard libraries.\n #![no_std]\n \n-#![feature(simd, link_llvm_intrinsics, lang_items)]\n+#![feature(simd, simd_ffi, link_llvm_intrinsics, lang_items)]\n \n \n #[repr(C)]"}]}