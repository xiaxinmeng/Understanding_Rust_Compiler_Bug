{"sha": "9b56c8700c7aa7706782258e5f8656eedfbf2a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTZjODcwMGM3YWE3NzA2NzgyMjU4ZTVmODY1NmVlZGZiZjJhMzk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-29T05:21:17Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-29T08:43:39Z"}, "message": "Rollup merge of #54604 - alexreg:self_in_typedefs-help, r=estebank\n\nAdded help message for `self_in_typedefs` feature gate\n\nFixes #54563.\n\nCC @Centril @estebank @leonardo-m", "tree": {"sha": "754777baaf1b5d40eb67516d008c291e2d38067a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754777baaf1b5d40eb67516d008c291e2d38067a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b56c8700c7aa7706782258e5f8656eedfbf2a39", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAluvOzsACgkQ/vbIBR0O\nATwcKhAAgyvmCgr3ZL88QROsVtCFzXcxAcWpYBpiDfvqUNqGsQ8ToUUY28HoV5qs\nejKE+TG9k9td4PMiZT3e9+jAs2qgdVCclwKYKM4VU1c5LOGJcH55gZNRV64329Jb\n1peQjNZ6lrOMBboaVhif6+tMKZQNyPKMuqZ6GioGWQ6OgluRXtSkMkMHHRJn+YIL\nqy5wPyDuja1eL3z7CWHK/8CbGdomzIBMZu9Y0rcelfaykQJkbYLAZogDmwIz0zLl\nSYO7B8O6Aozy7s2o3xStkOI6nGgkghwT5YoB11wBtQQmXqerX1fDNnNMp2K93uJM\nPofcvbvAEXVTyim4S1RTiP5m1xa2AAvRtlni3PGs+a6SrhOxmBV0f0wsvyyHl1WO\nzXjYNjEdIcCoDuWaOh5giH5LTORm90ox03PRiGfCDaoDhaPfE3GP1KzZD4qLy0mi\nNfVomLHRwlJ4mPeiNzOPUKqkBaJYw7b3qv6KHIXs+5NdSc9PCXoWxTbCPIuZmlSo\nwYJeyX3LM9d/EK63Jk4TbARbYxSHXHOu9bDHAAnZgEkYJ1bRZx9cCfBZWDV9WHKO\nXJd1vByqDcOq/cjOFlL104Y4u6xsW5/mL5r6YiYZkWl4+Zym507lp7KcmNOdfH4f\nUWA0bvpxaXfXvurcdv0Uiua4Z675pCR1Owh5vnqzftnnxRWWmtU=\n=UHaw\n-----END PGP SIGNATURE-----", "payload": "tree 754777baaf1b5d40eb67516d008c291e2d38067a\nparent 420ddf1bc220f914414ba32b9779b351b8f68ec1\nparent 4151de43aa51ffa8de8181fb4ed5592b0be0e037\nauthor kennytm <kennytm@gmail.com> 1538198477 +0800\ncommitter kennytm <kennytm@gmail.com> 1538210619 +0800\n\nRollup merge of #54604 - alexreg:self_in_typedefs-help, r=estebank\n\nAdded help message for `self_in_typedefs` feature gate\n\nFixes #54563.\n\nCC @Centril @estebank @leonardo-m\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b56c8700c7aa7706782258e5f8656eedfbf2a39", "html_url": "https://github.com/rust-lang/rust/commit/9b56c8700c7aa7706782258e5f8656eedfbf2a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b56c8700c7aa7706782258e5f8656eedfbf2a39/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "420ddf1bc220f914414ba32b9779b351b8f68ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/420ddf1bc220f914414ba32b9779b351b8f68ec1", "html_url": "https://github.com/rust-lang/rust/commit/420ddf1bc220f914414ba32b9779b351b8f68ec1"}, {"sha": "4151de43aa51ffa8de8181fb4ed5592b0be0e037", "url": "https://api.github.com/repos/rust-lang/rust/commits/4151de43aa51ffa8de8181fb4ed5592b0be0e037", "html_url": "https://github.com/rust-lang/rust/commit/4151de43aa51ffa8de8181fb4ed5592b0be0e037"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "6187e091319e0f03fcd44ce8b2a3ed2fe62ce40f", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=9b56c8700c7aa7706782258e5f8656eedfbf2a39", "patch": "@@ -539,7 +539,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                 .emit();\n         } else if has_guard && !cx.tcx.allow_bind_by_move_patterns_with_guards() {\n             let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n-                                       \"cannot bind by-move into a pattern guard\");\n+                                           \"cannot bind by-move into a pattern guard\");\n             err.span_label(p.span, \"moves value into pattern guard\");\n             if cx.tcx.sess.opts.unstable_features.is_nightly_build() && cx.tcx.use_mir_borrowck() {\n                 err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\"}, {"sha": "5e3f7470099117c806abfd11e5eba77ee59fe066", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9b56c8700c7aa7706782258e5f8656eedfbf2a39", "patch": "@@ -42,8 +42,9 @@ use rustc::lint;\n use rustc::hir::def::*;\n use rustc::hir::def::Namespace::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n-use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n+use rustc::session::config::nightly_options;\n+use rustc::ty;\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n \n use rustc_metadata::creader::CrateLoader;\n@@ -1381,6 +1382,9 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// The current self type if inside an impl (used for better errors).\n     current_self_type: Option<Ty>,\n \n+    /// The current self item if inside an ADT (used for better errors).\n+    current_self_item: Option<NodeId>,\n+\n     /// The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n \n@@ -1710,6 +1714,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n             current_trait_ref: None,\n             current_self_type: None,\n+            current_self_item: None,\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n \n@@ -2186,15 +2191,17 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n     }\n \n     fn resolve_adt(&mut self, item: &Item, generics: &Generics) {\n-        self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n-            let item_def_id = this.definitions.local_def_id(item.id);\n-            if this.session.features_untracked().self_in_typedefs {\n-                this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+        self.with_current_self_item(item, |this| {\n+            this.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                let item_def_id = this.definitions.local_def_id(item.id);\n+                if this.session.features_untracked().self_in_typedefs {\n+                    this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+                        visit::walk_item(this, item);\n+                    });\n+                } else {\n                     visit::walk_item(this, item);\n-                });\n-            } else {\n-                visit::walk_item(this, item);\n-            }\n+                }\n+            });\n         });\n     }\n \n@@ -2435,6 +2442,15 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         result\n     }\n \n+    fn with_current_self_item<T, F>(&mut self, self_item: &Item, f: F) -> T\n+        where F: FnOnce(&mut Resolver) -> T\n+    {\n+        let previous_value = replace(&mut self.current_self_item, Some(self_item.id));\n+        let result = f(self);\n+        self.current_self_item = previous_value;\n+        result\n+    }\n+\n     /// This is called to resolve a trait reference from an `impl` (i.e. `impl Trait for Foo`)\n     fn with_optional_trait_ref<T, F>(&mut self, opt_trait_ref: Option<&TraitRef>, f: F) -> T\n         where F: FnOnce(&mut Resolver, Option<DefId>) -> T\n@@ -3004,6 +3020,10 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     \"traits and impls\"\n                 };\n                 err.span_label(span, format!(\"`Self` is only available in {}\", available_in));\n+                if this.current_self_item.is_some() && nightly_options::is_nightly_build() {\n+                    err.help(\"add #![feature(self_in_typedefs)] to the crate attributes \\\n+                              to enable\");\n+                }\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {"}, {"sha": "ec4483204f05ebe02838e14c5e084d0df76fa35a", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9b56c8700c7aa7706782258e5f8656eedfbf2a39", "patch": "@@ -17,6 +17,9 @@ use check::FnCtxt;\n use hir::def_id::DefId;\n use hir::def::Def;\n use namespace::Namespace;\n+use rustc::hir;\n+use rustc::lint;\n+use rustc::session::config::nightly_options;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TraitRef, TypeFoldable};\n@@ -28,8 +31,6 @@ use rustc::middle::stability;\n use syntax::ast;\n use syntax::util::lev_distance::{lev_distance, find_best_match_for_name};\n use syntax_pos::{Span, symbol::Symbol};\n-use rustc::hir;\n-use rustc::lint;\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -1073,9 +1074,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             self.tcx.item_path_str(stable_pick.item.def_id),\n         ));\n \n-        if ::rustc::session::config::nightly_options::is_nightly_build() {\n+        if nightly_options::is_nightly_build() {\n             for (candidate, feature) in unstable_candidates {\n-                diag.note(&format!(\n+                diag.help(&format!(\n                     \"add #![feature({})] to the crate attributes to enable `{}`\",\n                     feature,\n                     self.tcx.item_path_str(candidate.item.def_id),"}, {"sha": "ab04953f3e50c1f6943d8e3b656e886b490a362f", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr?ref=9b56c8700c7aa7706782258e5f8656eedfbf2a39", "patch": "@@ -3,6 +3,8 @@ error[E0411]: cannot find type `Self` in this scope\n    |\n LL |     Cons(T, &'a Self)\n    |                 ^^^^ `Self` is only available in traits and impls\n+   |\n+   = help: add #![feature(self_in_typedefs)] to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "2851af4891e5a0c776c9f691f3044f3e91afab16", "filename": "src/test/ui/inference/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b56c8700c7aa7706782258e5f8656eedfbf2a39/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable.stderr?ref=9b56c8700c7aa7706782258e5f8656eedfbf2a39", "patch": "@@ -8,5 +8,5 @@ LL |     assert_eq!('x'.ipu_flatten(), 1);\n    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method\n-   = note: add #![feature(ipu_flatten)] to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n+   = help: add #![feature(ipu_flatten)] to the crate attributes to enable `inference_unstable_iterator::IpuIterator::ipu_flatten`\n "}]}