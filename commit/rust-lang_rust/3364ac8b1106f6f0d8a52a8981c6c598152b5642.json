{"sha": "3364ac8b1106f6f0d8a52a8981c6c598152b5642", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNjRhYzhiMTEwNmY2ZjBkOGE1MmE4OTgxYzZjNTk4MTUyYjU2NDI=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T20:38:52Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T20:45:22Z"}, "message": "use generate_impl_text in generate_impl", "tree": {"sha": "e68744a8faf0ba5762df77e7e2d6670ae432a496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68744a8faf0ba5762df77e7e2d6670ae432a496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3364ac8b1106f6f0d8a52a8981c6c598152b5642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3364ac8b1106f6f0d8a52a8981c6c598152b5642", "html_url": "https://github.com/rust-lang/rust/commit/3364ac8b1106f6f0d8a52a8981c6c598152b5642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3364ac8b1106f6f0d8a52a8981c6c598152b5642/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7ea7c30843e576be6ab3fb70f79d8053006652", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff7ea7c30843e576be6ab3fb70f79d8053006652", "html_url": "https://github.com/rust-lang/rust/commit/ff7ea7c30843e576be6ab3fb70f79d8053006652"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "e2762e5d2aa0af8e1a8a84260b67bd2fa9e5811d", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 6, "deletions": 40, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3364ac8b1106f6f0d8a52a8981c6c598152b5642/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3364ac8b1106f6f0d8a52a8981c6c598152b5642/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=3364ac8b1106f6f0d8a52a8981c6c598152b5642", "patch": "@@ -1,11 +1,6 @@\n-use itertools::Itertools;\n-use stdx::format_to;\n-use syntax::{\n-    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n-    SmolStr,\n-};\n+use syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{AssistContext, AssistId, AssistKind, Assists, utils::generate_impl_text};\n \n // Assist: generate_impl\n //\n@@ -36,44 +31,15 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n         format!(\"Generate impl for `{}`\", name),\n         target,\n         |edit| {\n-            let type_params = nominal.generic_param_list();\n             let start_offset = nominal.syntax().text_range().end();\n-            let mut buf = String::new();\n-            buf.push_str(\"\\n\\n\");\n-            nominal\n-                .attrs()\n-                .filter(|attr| {\n-                    attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false)\n-                })\n-                .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n-\n-            buf.push_str(\"impl\");\n-            if let Some(type_params) = &type_params {\n-                format_to!(buf, \"{}\", type_params.syntax());\n-            }\n-            buf.push_str(\" \");\n-            buf.push_str(name.text());\n-            if let Some(type_params) = type_params {\n-                let lifetime_params = type_params\n-                    .lifetime_params()\n-                    .filter_map(|it| it.lifetime())\n-                    .map(|it| SmolStr::from(it.text()));\n-                let type_params = type_params\n-                    .type_params()\n-                    .filter_map(|it| it.name())\n-                    .map(|it| SmolStr::from(it.text()));\n-\n-                let generic_params = lifetime_params.chain(type_params).format(\", \");\n-                format_to!(buf, \"<{}>\", generic_params)\n-            }\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    buf.push_str(\" {\\n    $0\\n}\");\n-                    edit.insert_snippet(cap, start_offset, buf);\n+                    let snippet = generate_impl_text(&nominal, \"    $0\");\n+                    edit.insert_snippet(cap, start_offset, snippet);\n                 }\n                 None => {\n-                    buf.push_str(\" {\\n}\");\n-                    edit.insert(start_offset, buf);\n+                    let snippet = generate_impl_text(&nominal, \"\");\n+                    edit.insert(start_offset, snippet);\n                 }\n             }\n         },"}, {"sha": "b51d703db5b511ad03e77b9d3520e9ab2e9d8d17", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3364ac8b1106f6f0d8a52a8981c6c598152b5642/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3364ac8b1106f6f0d8a52a8981c6c598152b5642/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=3364ac8b1106f6f0d8a52a8981c6c598152b5642", "patch": "@@ -379,7 +379,14 @@ pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &\n fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n     let type_params = adt.generic_param_list();\n     let mut buf = String::with_capacity(code.len());\n-    buf.push_str(\"\\n\\nimpl\");\n+    buf.push_str(\"\\n\\n\");\n+    adt\n+        .attrs()\n+        .filter(|attr| {\n+            attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false)\n+        })\n+        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n+    buf.push_str(\"impl\");\n     if let Some(type_params) = &type_params {\n         format_to!(buf, \"{}\", type_params.syntax());\n     }"}]}