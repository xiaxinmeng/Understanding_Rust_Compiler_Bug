{"sha": "822ed2c6d370c08f1f16134e4f4752a89a0638ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMmVkMmM2ZDM3MGMwOGYxZjE2MTM0ZTRmNDc1MmE4OWEwNjM4YWQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-09-25T02:47:20Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-09-25T03:38:47Z"}, "message": "Small refactors.\n\nFactor out some shared code from the start of process_fwding_mthd and\nprocess_bkwding_mthd; get rid of unneeded temp variable.", "tree": {"sha": "da64b0f2fb11c22bf8b0597ccbbc9d22aebdb597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da64b0f2fb11c22bf8b0597ccbbc9d22aebdb597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/822ed2c6d370c08f1f16134e4f4752a89a0638ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/822ed2c6d370c08f1f16134e4f4752a89a0638ad", "html_url": "https://github.com/rust-lang/rust/commit/822ed2c6d370c08f1f16134e4f4752a89a0638ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/822ed2c6d370c08f1f16134e4f4752a89a0638ad/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5b29c7ec2c28c53bf480a77472f39d939cc72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5b29c7ec2c28c53bf480a77472f39d939cc72b", "html_url": "https://github.com/rust-lang/rust/commit/3b5b29c7ec2c28c53bf480a77472f39d939cc72b"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "0ded7b1593a67db06b4d8df2fff34aa83bcd39c6", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/822ed2c6d370c08f1f16134e4f4752a89a0638ad/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/822ed2c6d370c08f1f16134e4f4752a89a0638ad/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=822ed2c6d370c08f1f16134e4f4752a89a0638ad", "patch": "@@ -590,6 +590,26 @@ fn finish_vtbl(cx: @local_ctxt, llmethods: [ValueRef], name: str) ->\n     ret gvar;\n }\n \n+// begin_fn: Set up an LLVM function for backwarding and forwarding functions.\n+fn begin_fn(cx: @local_ctxt, sp: span, m: @ty::method,\n+            ty_params: [ast::ty_param], fn_name: str) -> ValueRef {\n+\n+    // Create a local context that's aware of the name of the method we're\n+    // creating.\n+    let mcx: @local_ctxt = @{path: cx.path + [\"method\", m.ident] with *cx};\n+\n+    // Make up a name for the function.\n+    let s: str =\n+        mangle_internal_name_by_path_and_seq(mcx.ccx, mcx.path, fn_name);\n+\n+    // Get the function's type and declare it.\n+    let llfn_ty: TypeRef = type_of_meth(cx.ccx, sp, m, ty_params);\n+    let llfn: ValueRef =\n+        decl_internal_fastcall_fn(cx.ccx.llmod, s, llfn_ty);\n+\n+    ret llfn;\n+}\n+\n // process_bkwding_mthd: Create the backwarding function that appears in a\n // backwarding vtable slot.\n //\n@@ -608,22 +628,7 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n                         ty_params: [ast::ty_param], outer_obj_ty: ty::t,\n                         _additional_field_tys: [ty::t]) -> ValueRef {\n \n-    // Create a local context that's aware of the name of the method we're\n-    // creating.\n-    let mcx: @local_ctxt = @{path: cx.path + [\"method\", m.ident] with *cx};\n-\n-    // Make up a name for the backwarding function.\n-    let fn_name: str = \"backwarding_fn\";\n-    let s: str =\n-        mangle_internal_name_by_path_and_seq(mcx.ccx, mcx.path, fn_name);\n-\n-    // Get the backwarding function's type and declare it.\n-    let llbackwarding_fn_ty: TypeRef = type_of_meth(cx.ccx, sp, m, ty_params);\n-    let llbackwarding_fn: ValueRef =\n-        decl_internal_fastcall_fn(cx.ccx.llmod, s, llbackwarding_fn_ty);\n-\n-    // Create a new function context and block context for the backwarding\n-    // function, holding onto a pointer to the first block.\n+    let llbackwarding_fn = begin_fn(cx, sp, m, ty_params, \"backwarding_fn\");\n     let fcx = new_fn_ctxt(cx, sp, llbackwarding_fn);\n     let bcx = new_top_block_ctxt(fcx);\n     let lltop = bcx.llbb;\n@@ -688,8 +693,8 @@ fn process_bkwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n \n     // Set up the three implicit arguments to the outer method we'll need to\n     // call.\n-    let self_arg = llself_obj_ptr;\n-    let llouter_mthd_args: [ValueRef] = [llretptr, fcx.lltaskptr, self_arg];\n+    let llouter_mthd_args: [ValueRef] = [llretptr, fcx.lltaskptr,\n+                                         llself_obj_ptr];\n \n     // Copy the explicit arguments that are being passed into the forwarding\n     // function (they're in fcx.llargs) to llouter_mthd_args.\n@@ -728,22 +733,9 @@ fn process_fwding_mthd(cx: @local_ctxt, sp: span, m: @ty::method,\n                        backwarding_vtbl: ValueRef,\n                        additional_field_tys: [ty::t]) -> ValueRef {\n \n-    // Create a local context that's aware of the name of the method we're\n-    // creating.\n-    let mcx: @local_ctxt = @{path: cx.path + [\"method\", m.ident] with *cx};\n-\n-    // Make up a name for the forwarding function.\n-    let fn_name: str = \"forwarding_fn\";\n-    let s: str =\n-        mangle_internal_name_by_path_and_seq(mcx.ccx, mcx.path, fn_name);\n-\n-    // Get the forwarding function's type and declare it.\n-    let llforwarding_fn_ty = type_of_meth(cx.ccx, sp, m, ty_params);\n-    let llforwarding_fn: ValueRef =\n-        decl_internal_fastcall_fn(cx.ccx.llmod, s, llforwarding_fn_ty);\n-\n-    // Create a new function context and block context for the forwarding\n-    // function, holding onto a pointer to the first block.\n+    // Create a new function context and block context for the function,\n+    // holding onto a pointer to the first block.\n+    let llforwarding_fn = begin_fn(cx, sp, m, ty_params, \"forwarding_fn\");\n     let fcx = new_fn_ctxt(cx, sp, llforwarding_fn);\n     let bcx = new_top_block_ctxt(fcx);\n     let lltop = bcx.llbb;"}]}