{"sha": "c8221830c780a7b82e328e9762c1c2f9756e63c0", "node_id": "C_kwDOAAsO6NoAKGM4MjIxODMwYzc4MGE3YjgyZTMyOGU5NzYyYzFjMmY5NzU2ZTYzYzA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-16T19:51:51Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-17T00:04:43Z"}, "message": "rustdoc: avoid inlining items with duplicate `(type, name)`\n\nFixes #99221", "tree": {"sha": "0fd6f4257c384cac3f9767e9860857e7a6952f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd6f4257c384cac3f9767e9860857e7a6952f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8221830c780a7b82e328e9762c1c2f9756e63c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8221830c780a7b82e328e9762c1c2f9756e63c0", "html_url": "https://github.com/rust-lang/rust/commit/c8221830c780a7b82e328e9762c1c2f9756e63c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8221830c780a7b82e328e9762c1c2f9756e63c0/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56351589f8c5afe07a9151dd4a75976aebd1a709", "url": "https://api.github.com/repos/rust-lang/rust/commits/56351589f8c5afe07a9151dd4a75976aebd1a709", "html_url": "https://github.com/rust-lang/rust/commit/56351589f8c5afe07a9151dd4a75976aebd1a709"}], "stats": {"total": 112, "additions": 107, "deletions": 5}, "files": [{"sha": "25d224b9a73376aa6456c36945227da62b926942", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c8221830c780a7b82e328e9762c1c2f9756e63c0", "patch": "@@ -57,11 +57,43 @@ impl<'tcx> Clean<'tcx, Item> for DocModule<'tcx> {\n                 .map(|(item, renamed)| clean_maybe_renamed_foreign_item(cx, item, *renamed)),\n         );\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n-        items.extend(\n-            self.items\n-                .iter()\n-                .flat_map(|(item, renamed)| clean_maybe_renamed_item(cx, item, *renamed)),\n-        );\n+\n+        // Split up imports from all other items.\n+        //\n+        // This covers the case where somebody does an import which should pull in an item,\n+        // but there's already an item with the same namespace and same name. Rust gives\n+        // priority to the not-imported one, so we should, too.\n+        let mut inserted = FxHashSet::default();\n+        items.extend(self.items.iter().flat_map(|(item, renamed)| {\n+            // First, lower everything other than imports.\n+            if matches!(item.kind, hir::ItemKind::Use(..)) {\n+                return Vec::new();\n+            }\n+            let v = clean_maybe_renamed_item(cx, item, *renamed);\n+            for item in &v {\n+                if let Some(name) = item.name {\n+                    inserted.insert((item.type_(), name));\n+                }\n+            }\n+            v\n+        }));\n+        items.extend(self.items.iter().flat_map(|(item, renamed)| {\n+            // Now we actually lower the imports, skipping everything else.\n+            if !matches!(item.kind, hir::ItemKind::Use(..)) {\n+                return Vec::new();\n+            }\n+            let mut v = clean_maybe_renamed_item(cx, item, *renamed);\n+            v.drain_filter(|item| {\n+                if let Some(name) = item.name {\n+                    // If an item with the same type and name already exists,\n+                    // it takes priority over the inlined stuff.\n+                    !inserted.insert((item.type_(), name))\n+                } else {\n+                    false\n+                }\n+            });\n+            v\n+        }));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code."}, {"sha": "e061e42b29db805942376fb13066c5546d8fadcb", "filename": "src/test/rustdoc/auxiliary/issue-99221-aux.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99221-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99221-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-99221-aux.rs?ref=c8221830c780a7b82e328e9762c1c2f9756e63c0", "patch": "@@ -0,0 +1,20 @@\n+pub struct Option;\n+impl Option {\n+    pub fn unwrap(self) {}\n+}\n+\n+mod macros {\n+    use crate::Option;\n+    /// [`Option::unwrap`]\n+    #[macro_export]\n+    macro_rules! print {\n+        () => ()\n+    }\n+}\n+\n+mod structs {\n+    use crate::Option;\n+    /// [`Option::unwrap`]\n+    pub struct Print;\n+}\n+pub use structs::Print;"}, {"sha": "e74881d387dc1347664fdba0c53bbc48047c7c52", "filename": "src/test/rustdoc/issue-99221-multiple-macro-rules-w-same-name-submodule.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name-submodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name-submodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name-submodule.rs?ref=c8221830c780a7b82e328e9762c1c2f9756e63c0", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:issue-99221-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99221_aux;\n+\n+pub use issue_99221_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"macro\"]' 1\n+\n+mod inner {\n+    #[macro_export]\n+    macro_rules! print {\n+        () => ()\n+    }\n+}"}, {"sha": "46d59654b99ebb2963832e3a9d2c9b653f821922", "filename": "src/test/rustdoc/issue-99221-multiple-macro-rules-w-same-name.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-macro-rules-w-same-name.rs?ref=c8221830c780a7b82e328e9762c1c2f9756e63c0", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:issue-99221-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99221_aux;\n+\n+pub use issue_99221_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"macro\"]' 1\n+\n+#[macro_export]\n+macro_rules! print {\n+    () => ()\n+}"}, {"sha": "41e64726a3246f083267660a677401a2698236ab", "filename": "src/test/rustdoc/issue-99221-multiple-structs-w-same-name.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-structs-w-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8221830c780a7b82e328e9762c1c2f9756e63c0/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-structs-w-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-99221-multiple-structs-w-same-name.rs?ref=c8221830c780a7b82e328e9762c1c2f9756e63c0", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:issue-99221-aux.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+#[macro_use]\n+extern crate issue_99221_aux;\n+\n+pub use issue_99221_aux::*;\n+\n+// @count foo/index.html '//a[@class=\"struct\"][@title=\"foo::Print struct\"]' 1\n+\n+pub struct Print;"}]}