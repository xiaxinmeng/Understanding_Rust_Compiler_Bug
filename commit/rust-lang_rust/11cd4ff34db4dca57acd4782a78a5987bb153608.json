{"sha": "11cd4ff34db4dca57acd4782a78a5987bb153608", "node_id": "C_kwDOAAsO6NoAKDExY2Q0ZmYzNGRiNGRjYTU3YWNkNDc4MmE3OGE1OTg3YmIxNTM2MDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T09:39:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T09:39:41Z"}, "message": "Auto merge of #109852 - Nilstrieb:rollup-g3mgxxw, r=Nilstrieb\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #109839 (Improve grammar of Iterator.partition_in_place)\n - #109840 (Fix typo in std/src/os/fd/owned.rs)\n - #109844 (a couple clippy::complexity fixes)\n - #109846 (more clippy::complexity fixes (iter_kv_map, map_flatten, nonminimal_bool))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ded564766541d2965fe2d424c789039ae0949600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded564766541d2965fe2d424c789039ae0949600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11cd4ff34db4dca57acd4782a78a5987bb153608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11cd4ff34db4dca57acd4782a78a5987bb153608", "html_url": "https://github.com/rust-lang/rust/commit/11cd4ff34db4dca57acd4782a78a5987bb153608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11cd4ff34db4dca57acd4782a78a5987bb153608/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637d7fdb2333dcd8eadaec2eb95273e7569c46cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/637d7fdb2333dcd8eadaec2eb95273e7569c46cc", "html_url": "https://github.com/rust-lang/rust/commit/637d7fdb2333dcd8eadaec2eb95273e7569c46cc"}, {"sha": "59f394bf8645729a1ffdcbf04745e5566ea045c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f394bf8645729a1ffdcbf04745e5566ea045c1", "html_url": "https://github.com/rust-lang/rust/commit/59f394bf8645729a1ffdcbf04745e5566ea045c1"}], "stats": {"total": 110, "additions": 44, "deletions": 66}, "files": [{"sha": "63e8a67db53edc6183615f2243570f3f8c1c2a7f", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -1190,8 +1190,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // Set KCFI operand bundle\n         let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n         let kcfi_bundle =\n-            if self.tcx.sess.is_sanitizer_kcfi_enabled() && fn_abi.is_some() && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap());\n+            if let Some(fn_abi) = fn_abi && self.tcx.sess.is_sanitizer_kcfi_enabled() && is_indirect_call {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n                 Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n             } else {\n                 None"}, {"sha": "4f8b5abd9010c424077d3d73077128afb5a984b3", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -378,8 +378,7 @@ pub(crate) fn get_dllimport<'tcx>(\n     name: &str,\n ) -> Option<&'tcx DllImport> {\n     tcx.native_library(id)\n-        .map(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n-        .flatten()\n+        .and_then(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n }\n \n pub(crate) fn is_mingw_gnu_toolchain(target: &Target) -> bool {"}, {"sha": "558253f727bcc7ff3d67dc3af01cca876f2ac6fc", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -677,8 +677,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 if let Rvalue::CopyForDeref(place) = rvalue {\n-                    if !place.ty(&self.body.local_decls, self.tcx).ty.builtin_deref(true).is_some()\n-                    {\n+                    if place.ty(&self.body.local_decls, self.tcx).ty.builtin_deref(true).is_none() {\n                         self.fail(\n                             location,\n                             \"`CopyForDeref` should only be used for dereferenceable types\","}, {"sha": "4b1ff0e1df941e974695238b8b789013112235ff", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -2235,7 +2235,7 @@ impl EmitterWriter {\n             }\n         } else if is_multiline {\n             buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n-            match &highlight_parts[..] {\n+            match &highlight_parts {\n                 [SubstitutionHighlight { start: 0, end }] if *end == line_to_add.len() => {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                 }"}, {"sha": "113c3f08ab9ae986c3dfc8155157976522c40b9f", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -483,8 +483,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 [segment] if segment.args.is_none() => {\n                     trait_bound_spans = vec![segment.ident.span];\n                     associated_types = associated_types\n-                        .into_iter()\n-                        .map(|(_, items)| (segment.ident.span, items))\n+                        .into_values()\n+                        .map(|items| (segment.ident.span, items))\n                         .collect();\n                 }\n                 _ => {}"}, {"sha": "ee1c6fbfd650fdee648f196a5b38c51fd8083894", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // struct; however, when EUV is run during typeck, it\n                 // may not. This will generate an error earlier in typeck,\n                 // so we can just ignore it.\n-                if !self.tcx().sess.has_errors().is_some() {\n+                if self.tcx().sess.has_errors().is_none() {\n                     span_bug!(with_expr.span, \"with expression doesn't evaluate to a struct\");\n                 }\n             }"}, {"sha": "d53e64830ff38d0219da32fd26ae92744961ee72", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -978,7 +978,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS)\n                 .name_all_regions(sig)\n                 .unwrap();\n-            let lts: Vec<String> = reg.into_iter().map(|(_, kind)| kind.to_string()).collect();\n+            let lts: Vec<String> = reg.into_values().map(|kind| kind.to_string()).collect();\n             (if lts.is_empty() { String::new() } else { format!(\"for<{}> \", lts.join(\", \")) }, sig)\n         };\n \n@@ -2399,10 +2399,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let suggestion =\n                     if has_lifetimes { format!(\" + {}\", sub) } else { format!(\": {}\", sub) };\n                 let mut suggestions = vec![(sp, suggestion)];\n-                for add_lt_sugg in add_lt_suggs {\n-                    if let Some(add_lt_sugg) = add_lt_sugg {\n-                        suggestions.push(add_lt_sugg);\n-                    }\n+                for add_lt_sugg in add_lt_suggs.into_iter().flatten() {\n+                    suggestions.push(add_lt_sugg);\n                 }\n                 err.multipart_suggestion_verbose(\n                     format!(\"{msg}...\"),\n@@ -2426,11 +2424,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     };\n                     let mut sugg =\n                         vec![(sp, suggestion), (span.shrink_to_hi(), format!(\" + {}\", new_lt))];\n-                    for add_lt_sugg in add_lt_suggs.clone() {\n-                        if let Some(lt) = add_lt_sugg {\n-                            sugg.push(lt);\n-                            sugg.rotate_right(1);\n-                        }\n+                    for lt in add_lt_suggs.clone().into_iter().flatten() {\n+                        sugg.push(lt);\n+                        sugg.rotate_right(1);\n                     }\n                     // `MaybeIncorrect` due to issue #41966.\n                     err.multipart_suggestion(msg, sugg, Applicability::MaybeIncorrect);"}, {"sha": "9c25f3009ba81670ebccd273f6ecbc559700146b", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -19,7 +19,7 @@ pub mod lib_features {\n                 .stable\n                 .iter()\n                 .map(|(f, (s, _))| (*f, Some(*s)))\n-                .chain(self.unstable.iter().map(|(f, _)| (*f, None)))\n+                .chain(self.unstable.keys().map(|f| (*f, None)))\n                 .collect();\n             all_features.sort_unstable_by(|a, b| a.0.as_str().partial_cmp(b.0.as_str()).unwrap());\n             all_features"}, {"sha": "8b96864ddd7c93b87007613a9b551f2f6e6e5445", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> ValTree<'tcx> {\n     }\n \n     pub fn try_to_target_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.try_to_scalar_int().map(|s| s.try_to_target_usize(tcx).ok()).flatten()\n+        self.try_to_scalar_int().and_then(|s| s.try_to_target_usize(tcx).ok())\n     }\n \n     /// Get the values inside the ValTree as a slice of bytes. This only works for"}, {"sha": "99291740ac82f39b6129320a08684bf759cbb64a", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -62,21 +62,21 @@ pub fn as_constant_inner<'tcx>(\n             Constant { span, user_ty: None, literal }\n         }\n         ExprKind::NonHirLiteral { lit, ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n             Constant { span, user_ty, literal }\n         }\n         ExprKind::ZstLiteral { ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n             Constant { span, user_ty, literal }\n         }\n         ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let uneval = mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n             let literal = ConstantKind::Unevaluated(uneval, ty);"}, {"sha": "f41edff8513deff61aa2dcad1841b9ec00ff637b", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -651,8 +651,8 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let span = tcx.def_span(instance.def_id());\n         let mut path = PathBuf::new();\n-        let was_written = if written_to_path.is_some() {\n-            path = written_to_path.unwrap();\n+        let was_written = if let Some(path2) = written_to_path {\n+            path = path2;\n             Some(())\n         } else {\n             None"}, {"sha": "482b78d42e37715e6123abd43ea5ecc28c6a4e7f", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -89,10 +89,7 @@ impl<'tcx> Partitioner<'tcx> for DefaultPartitioning {\n         }\n \n         PreInliningPartitioning {\n-            codegen_units: codegen_units\n-                .into_iter()\n-                .map(|(_, codegen_unit)| codegen_unit)\n-                .collect(),\n+            codegen_units: codegen_units.into_values().map(|codegen_unit| codegen_unit).collect(),\n             roots,\n             internalization_candidates,\n         }"}, {"sha": "8c3dff23b272d1890edb5c72424be78ba368d9fa", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -206,7 +206,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n     // The file may be empty, which leads to the diagnostic machinery not emitting this\n     // note. This is a relatively simple way to detect that case and emit a span-less\n     // note instead.\n-    let file_empty = !tcx.sess.source_map().lookup_line(sp.hi()).is_ok();\n+    let file_empty = tcx.sess.source_map().lookup_line(sp.hi()).is_err();\n \n     tcx.sess.emit_err(NoMainErr {\n         sp,"}, {"sha": "e69a9d0aecaf4a96d8fbeee26d5102587ae038b7", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -1669,8 +1669,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     ) -> Option<Symbol> {\n         let mut candidates = self\n             .extern_prelude\n-            .iter()\n-            .map(|(ident, _)| ident.name)\n+            .keys()\n+            .map(|ident| ident.name)\n             .chain(\n                 self.module_map\n                     .iter()\n@@ -2007,7 +2007,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // 1) some consistent ordering for emitted diagnostics, and\n         // 2) `std` suggestions before `core` suggestions.\n         let mut extern_crate_names =\n-            self.extern_prelude.iter().map(|(ident, _)| ident.name).collect::<Vec<_>>();\n+            self.extern_prelude.keys().map(|ident| ident.name).collect::<Vec<_>>();\n         extern_crate_names.sort_by(|a, b| b.as_str().partial_cmp(a.as_str()).unwrap());\n \n         for name in extern_crate_names.into_iter() {"}, {"sha": "06206efb9abd52cdf5ed245959011fd581754454", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        assert!(force || !finalize.is_some()); // `finalize` implies `force`\n+        assert!(force || finalize.is_none()); // `finalize` implies `force`\n \n         // Make sure `self`, `super` etc produce an error when passed to here.\n         if orig_ident.is_path_segment_keyword() {"}, {"sha": "b82b07bcf0cc898e55158789825bf01fb22e6fb4", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -2421,8 +2421,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     .iter()\n                     .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n                     .expect(\"associated item outside of an item\");\n-                seen_bindings\n-                    .extend(parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)));\n+                seen_bindings.extend(parent_rib.bindings.keys().map(|ident| (*ident, ident.span)));\n             };\n             add_bindings_for_ns(ValueNS);\n             add_bindings_for_ns(TypeNS);"}, {"sha": "be5d4fca7a0093b53345b301b4357a205db28a31", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -911,7 +911,7 @@ mod parse {\n         let mut seen_instruction_threshold = false;\n         let mut seen_skip_entry = false;\n         let mut seen_skip_exit = false;\n-        for option in v.into_iter().map(|v| v.split(',')).flatten() {\n+        for option in v.into_iter().flat_map(|v| v.split(',')) {\n             match option {\n                 \"always\" if !seen_always && !seen_never => {\n                     options.always = true;"}, {"sha": "0bb42a3a71fde1544bc31aa7b08c355f2b3fff74", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -109,7 +109,7 @@ fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str)\n         // This is the case for instance when building a hash for name mangling.\n         // Such configuration must not be used for metadata.\n         HashingControls { hash_spans }\n-            if hash_spans == !ctx.unstable_opts_incremental_ignore_spans() => {}\n+            if hash_spans != ctx.unstable_opts_incremental_ignore_spans() => {}\n         other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {other:?}\"),\n     }\n }"}, {"sha": "fb75ec76729201973700065217838e4c699da35c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -3888,8 +3888,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         if let Some(slice_ty) = candidate_impls\n             .iter()\n             .map(|trait_ref| trait_ref.trait_ref.self_ty())\n-            .filter(|t| is_slice(*t))\n-            .next()\n+            .find(|t| is_slice(*t))\n         {\n             let msg = &format!(\"convert the array to a `{}` slice instead\", slice_ty);\n \n@@ -3936,7 +3935,7 @@ fn hint_missing_borrow<'tcx>(\n     // This could be a variant constructor, for example.\n     let Some(fn_decl) = found_node.fn_decl() else { return; };\n \n-    let args = fn_decl.inputs.iter().map(|ty| ty);\n+    let args = fn_decl.inputs.iter();\n \n     fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, Vec<hir::Mutability>) {\n         let mut refs = vec![];"}, {"sha": "cff3d277a78fb83ae69360f00dc0ce6f2267a7a7", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -110,8 +110,6 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n         body_id: LocalDefId,\n         tys: FxIndexSet<Ty<'tcx>>,\n     ) -> Bounds<'a, 'tcx> {\n-        tys.into_iter()\n-            .map(move |ty| self.implied_outlives_bounds(param_env, body_id, ty))\n-            .flatten()\n+        tys.into_iter().flat_map(move |ty| self.implied_outlives_bounds(param_env, body_id, ty))\n     }\n }"}, {"sha": "527f6013a151639b956b234b8a5ecb7112e2835d", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -909,8 +909,7 @@ pub(crate) fn collect_bound_vars<'tcx, T: TypeFoldable<TyCtxt<'tcx>>>(\n             .or_else(|| bug!(\"Skipped bound var index: parameters={:?}\", parameters));\n     });\n \n-    let binders =\n-        chalk_ir::VariableKinds::from_iter(interner, parameters.into_iter().map(|(_, v)| v));\n+    let binders = chalk_ir::VariableKinds::from_iter(interner, parameters.into_values());\n \n     (new_ty, binders, named_parameters)\n }"}, {"sha": "36cf7defd6ded2b463cd501aa82822c4123706a5", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -2120,8 +2120,8 @@ pub trait Iterator {\n     ///\n     /// # Current implementation\n     ///\n-    /// Current algorithms tries finding the first element for which the predicate evaluates\n-    /// to false, and the last element for which it evaluates to true and repeatedly swaps them.\n+    /// The current algorithm tries to find the first element for which the predicate evaluates\n+    /// to false and the last element for which it evaluates to true, and repeatedly swaps them.\n     ///\n     /// Time complexity: *O*(*n*)\n     ///"}, {"sha": "a40d39c5e44f5e45796b10af543a08b0b79f71d3", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -268,7 +268,7 @@ impl AsFd for OwnedFd {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {\n         // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n-        // invariants, and the `BorrowdFd` is bounded by the lifetime\n+        // invariants, and the `BorrowedFd` is bounded by the lifetime\n         // of `&self`.\n         unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }\n     }"}, {"sha": "ea8c7e9a67c32133db19a3582d2045b5c1ad54bb", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -31,18 +31,13 @@ use crate::passes::{self, Condition};\n use crate::scrape_examples::{AllCallLocations, ScrapeExamplesOptions};\n use crate::theme;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Default)]\n pub(crate) enum OutputFormat {\n     Json,\n+    #[default]\n     Html,\n }\n \n-impl Default for OutputFormat {\n-    fn default() -> OutputFormat {\n-        OutputFormat::Html\n-    }\n-}\n-\n impl OutputFormat {\n     pub(crate) fn is_json(&self) -> bool {\n         matches!(self, OutputFormat::Json)"}, {"sha": "b61dd57145802323a53ad733da07b4cfd267864e", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -177,8 +177,8 @@ impl<'a, 'tcx, F: Write> TokenHandler<'a, 'tcx, F> {\n         } else {\n             // We only want to \"open\" the tag ourselves if we have more than one pending and if the\n             // current parent tag is not the same as our pending content.\n-            let close_tag = if self.pending_elems.len() > 1 && current_class.is_some() {\n-                Some(enter_span(self.out, current_class.unwrap(), &self.href_context))\n+            let close_tag = if self.pending_elems.len() > 1 && let Some(current_class) = current_class {\n+                Some(enter_span(self.out, current_class, &self.href_context))\n             } else {\n                 None\n             };"}, {"sha": "455b4e9aefe5541e9e8b73e6dac3ef5c16b75a76", "filename": "src/librustdoc/html/render/sidebar.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fhtml%2Frender%2Fsidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fhtml%2Frender%2Fsidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsidebar.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -113,11 +113,8 @@ pub(super) fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buf\n     } else {\n         (\"\", \"\")\n     };\n-    let version = if it.is_crate() {\n-        cx.cache().crate_version.as_ref().map(String::as_str).unwrap_or_default()\n-    } else {\n-        \"\"\n-    };\n+    let version =\n+        if it.is_crate() { cx.cache().crate_version.as_deref().unwrap_or_default() } else { \"\" };\n     let path: String = if !it.is_mod() {\n         cx.current.iter().map(|s| s.as_str()).intersperse(\"::\").collect()\n     } else {"}, {"sha": "1c6ab44a4c784f3df5902b664bd271159a37eb93", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11cd4ff34db4dca57acd4782a78a5987bb153608/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=11cd4ff34db4dca57acd4782a78a5987bb153608", "patch": "@@ -810,7 +810,7 @@ fn trait_impls_for<'a>(\n ///\n /// These are common and we should just resolve to the trait in that case.\n fn is_derive_trait_collision<T>(ns: &PerNS<Result<Vec<(Res, T)>, ResolutionFailure<'_>>>) -> bool {\n-    if let (&Ok(ref type_ns), &Ok(ref macro_ns)) = (&ns.type_ns, &ns.macro_ns) {\n+    if let (Ok(type_ns), Ok(macro_ns)) = (&ns.type_ns, &ns.macro_ns) {\n         type_ns.iter().any(|(res, _)| matches!(res, Res::Def(DefKind::Trait, _)))\n             && macro_ns\n                 .iter()"}]}