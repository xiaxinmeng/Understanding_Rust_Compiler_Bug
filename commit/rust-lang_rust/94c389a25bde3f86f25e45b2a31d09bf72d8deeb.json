{"sha": "94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YzM4OWEyNWJkZTNmODZmMjVlNDViMmEzMWQwOWJmNzJkOGRlZWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-11T20:37:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-11T21:57:11Z"}, "message": "rt: Add RUST_MAX_STACK env var with 8MB default\n\nCloses #1489", "tree": {"sha": "0247627ef16661479947540d67f4d89d1d115468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0247627ef16661479947540d67f4d89d1d115468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "html_url": "https://github.com/rust-lang/rust/commit/94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00ec5f9c936639ec2fd9291cd484afa56aa24c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00ec5f9c936639ec2fd9291cd484afa56aa24c8", "html_url": "https://github.com/rust-lang/rust/commit/c00ec5f9c936639ec2fd9291cd484afa56aa24c8"}], "stats": {"total": 165, "additions": 107, "deletions": 58}, "files": [{"sha": "bdec4c284354b8cb8f7618a20bc230c67effaf1d", "filename": "src/rt/rust_env.cpp", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -8,6 +8,7 @@\n // The environment variables that the runtime knows about\n #define RUST_THREADS \"RUST_THREADS\"\n #define RUST_MIN_STACK \"RUST_MIN_STACK\"\n+#define RUST_MAX_STACK \"RUST_MAX_STACK\"\n #define RUST_LOG \"RUST_LOG\"\n #define CHECK_CLAIMS \"CHECK_CLAIMS\"\n #define DETAILED_LEAKS \"DETAILED_LEAKS\"\n@@ -69,15 +70,26 @@ get_num_threads()\n \n static size_t\n get_min_stk_size() {\n-    char *stack_size = getenv(RUST_MIN_STACK);\n-    if(stack_size) {\n-        return strtol(stack_size, NULL, 0);\n+    char *minsz = getenv(RUST_MIN_STACK);\n+    if(minsz) {\n+        return strtol(minsz, NULL, 0);\n     }\n     else {\n         return 0x300;\n     }\n }\n \n+static size_t\n+get_max_stk_size() {\n+    char *maxsz = getenv(RUST_MAX_STACK);\n+    if (maxsz) {\n+\treturn strtol(maxsz, NULL, 0);\n+    }\n+    else {\n+\treturn 1024*1024*8;\n+    }\n+}\n+\n static char*\n copyenv(const char* name) {\n     char *envvar = getenv(name);\n@@ -99,6 +111,7 @@ load_env() {\n \n     env->num_sched_threads = (size_t)get_num_threads();\n     env->min_stack_size = get_min_stk_size();\n+    env->max_stack_size = get_max_stk_size();\n     env->logspec = copyenv(RUST_LOG);\n     env->check_claims = getenv(CHECK_CLAIMS) != NULL;\n     env->detailed_leaks = getenv(DETAILED_LEAKS) != NULL;"}, {"sha": "eecdb7931b4f09a70476c96e4523f4df23317270", "filename": "src/rt/rust_env.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -1,6 +1,7 @@\n struct rust_env {\n     size_t num_sched_threads;\n     size_t min_stack_size;\n+    size_t max_stack_size;\n     char* logspec;\n     bool check_claims;\n     bool detailed_leaks;"}, {"sha": "4d136a59ae68fa461c7cdeb01bd825ab7e78157f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -121,12 +121,6 @@ unconfig_valgrind_stack(stk_seg *stk) {\n VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n }\n \n-static void\n-free_stk(rust_task *task, stk_seg *stk) {\n-    LOGPTR(task->sched, \"freeing stk segment\", (uintptr_t)stk);\n-    task->free(stk);\n-}\n-\n static void\n add_stack_canary(stk_seg *stk) {\n     memcpy(stk->data, stack_canary, sizeof(stack_canary));\n@@ -139,6 +133,21 @@ check_stack_canary(stk_seg *stk) {\n       && \"Somebody killed the canary\");\n }\n \n+// The amount of stack in a segment available to Rust code\n+static size_t\n+user_stack_size(stk_seg *stk) {\n+    return (size_t)(stk->end\n+                    - (uintptr_t)&stk->data[0]\n+                    - RED_ZONE_SIZE);\n+}\n+\n+static void\n+free_stk(rust_task *task, stk_seg *stk) {\n+    LOGPTR(task->sched, \"freeing stk segment\", (uintptr_t)stk);\n+    task->total_stack_sz -= user_stack_size(stk);\n+    task->free(stk);\n+}\n+\n static stk_seg*\n new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n {\n@@ -152,9 +161,7 @@ new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n \n     // Try to reuse an existing stack segment\n     if (task->stk != NULL && task->stk->prev != NULL) {\n-        size_t prev_sz = (size_t)(task->stk->prev->end\n-                                  - (uintptr_t)&task->stk->prev->data[0]\n-                                  - RED_ZONE_SIZE);\n+        size_t prev_sz = user_stack_size(task->stk->prev);\n         if (min_sz <= prev_sz && requested_sz <= prev_sz) {\n             LOG(task, mem, \"reusing existing stack\");\n             task->stk = task->stk->prev;\n@@ -171,14 +178,17 @@ new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n     // The size of the current stack segment, excluding red zone\n     size_t current_sz = 0;\n     if (task->stk != NULL) {\n-        current_sz = (size_t)(task->stk->end\n-                              - (uintptr_t)&task->stk->data[0]\n-                              - RED_ZONE_SIZE);\n+        current_sz = user_stack_size(task->stk);\n     }\n     // The calculated size of the new stack, excluding red zone\n     size_t rust_stk_sz = get_next_stk_size(sched, task, min_sz,\n                                            current_sz, requested_sz);\n \n+    if (task->total_stack_sz + rust_stk_sz > sched->env->max_stack_size) {\n+        LOG_ERR(task, task, \"task %\" PRIxPTR \" ran out of stack\", task);\n+        task->fail();\n+    }\n+\n     size_t sz = sizeof(stk_seg) + rust_stk_sz + RED_ZONE_SIZE;\n     stk_seg *stk = (stk_seg *)task->malloc(sz, \"stack\");\n     LOGPTR(task->sched, \"new stk\", (uintptr_t)stk);\n@@ -191,6 +201,7 @@ new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n \n     task->stk = stk;\n     config_valgrind_stack(task->stk);\n+    task->total_stack_sz += user_stack_size(stk);\n     return stk;\n }\n \n@@ -222,6 +233,7 @@ del_stk(rust_task *task, stk_seg *stk)\n     unconfig_valgrind_stack(stk);\n     if (delete_stack) {\n         free_stk(task, stk);\n+        A(task->sched, task->total_stack_sz == 0, \"Stack size should be 0\");\n     }\n }\n \n@@ -249,7 +261,8 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     killed(false),\n     propagate_failure(true),\n     dynastack(this),\n-    cc_counter(0)\n+    cc_counter(0),\n+    total_stack_sz(0)\n {\n     LOGPTR(sched, \"new task\", (uintptr_t)this);\n     DLOG(sched, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);"}, {"sha": "6ae663d2066b0db18c94d8b1b748e3e4b314331e", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -126,6 +126,9 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     debug::task_debug_info debug;\n \n+    // The amount of stack we're using, excluding red zones\n+    size_t total_stack_sz;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_scheduler *sched,\n               rust_task_list *state,"}, {"sha": "db244bd0435f398b5f78ccdec44d900e644fa6a6", "filename": "src/test/run-fail/too-much-recursion.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-fail%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-fail%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion.rs?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:ran out of stack\n+\n+// Test that the task fails after hiting the recursion limit\n+\n+fn main() {\n+    main();\n+}\n\\ No newline at end of file"}, {"sha": "a7e2c11cc017614556893062385a29e57f835aec", "filename": "src/test/run-pass/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack2.rs?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -10,5 +10,5 @@ fn getbig(i: int) -> int {\n }\n \n fn main() {\n-    getbig(100000);\n+    getbig(10000);\n }\n\\ No newline at end of file"}, {"sha": "2ba7945894a05cf969844f93f79f1abf8408049d", "filename": "src/test/run-pass/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack3.rs?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -37,6 +37,6 @@ fn getbig(a0: int,\n }\n \n fn main() {\n-    let a = 100000;\n+    let a = 10000;\n     getbig(a, a+1, a+2, a+3, a+4, a+5, a+6, a+7, a+8, a+9);\n }\n\\ No newline at end of file"}, {"sha": "13200ee4ec94ed103732da960ed63018589a872f", "filename": "src/test/run-pass/morestack4.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack4.rs?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -53,45 +53,45 @@ fn getbig(i: biggy) {\n \n fn main() {\n     getbig({\n-        a00: 100000u64,\n-        a01: 100000u64,\n-        a02: 100000u64,\n-        a03: 100000u64,\n-        a04: 100000u64,\n-        a05: 100000u64,\n-        a06: 100000u64,\n-        a07: 100000u64,\n-        a08: 100000u64,\n-        a09: 100000u64,\n-        a10: 100000u64,\n-        a11: 100000u64,\n-        a12: 100000u64,\n-        a13: 100000u64,\n-        a14: 100000u64,\n-        a15: 100000u64,\n-        a16: 100000u64,\n-        a17: 100000u64,\n-        a18: 100000u64,\n-        a19: 100000u64,\n-        a20: 100000u64,\n-        a21: 100000u64,\n-        a22: 100000u64,\n-        a23: 100000u64,\n-        a24: 100000u64,\n-        a25: 100000u64,\n-        a26: 100000u64,\n-        a27: 100000u64,\n-        a28: 100000u64,\n-        a29: 100000u64,\n-        a30: 100000u64,\n-        a31: 100000u64,\n-        a32: 100000u64,\n-        a33: 100000u64,\n-        a34: 100000u64,\n-        a35: 100000u64,\n-        a36: 100000u64,\n-        a37: 100000u64,\n-        a38: 100000u64,\n-        a39: 100000u64,\n+        a00: 10000u64,\n+        a01: 10000u64,\n+        a02: 10000u64,\n+        a03: 10000u64,\n+        a04: 10000u64,\n+        a05: 10000u64,\n+        a06: 10000u64,\n+        a07: 10000u64,\n+        a08: 10000u64,\n+        a09: 10000u64,\n+        a10: 10000u64,\n+        a11: 10000u64,\n+        a12: 10000u64,\n+        a13: 10000u64,\n+        a14: 10000u64,\n+        a15: 10000u64,\n+        a16: 10000u64,\n+        a17: 10000u64,\n+        a18: 10000u64,\n+        a19: 10000u64,\n+        a20: 10000u64,\n+        a21: 10000u64,\n+        a22: 10000u64,\n+        a23: 10000u64,\n+        a24: 10000u64,\n+        a25: 10000u64,\n+        a26: 10000u64,\n+        a27: 10000u64,\n+        a28: 10000u64,\n+        a29: 10000u64,\n+        a30: 10000u64,\n+        a31: 10000u64,\n+        a32: 10000u64,\n+        a33: 10000u64,\n+        a34: 10000u64,\n+        a35: 10000u64,\n+        a36: 10000u64,\n+        a37: 10000u64,\n+        a38: 10000u64,\n+        a39: 10000u64,\n     });\n }\n\\ No newline at end of file"}, {"sha": "a10774d8f2b93ca48fadc856e762107f0e83709d", "filename": "src/test/run-pass/too-much-recursion.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c389a25bde3f86f25e45b2a31d09bf72d8deeb/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftoo-much-recursion.rs?ref=94c389a25bde3f86f25e45b2a31d09bf72d8deeb", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern:ran out of stack\n+\n+// Test that the task fails after hiting the recursion limit, but\n+// that it doesn't bring down the whole proc\n+\n+fn main() {\n+    task::spawn {||\n+        task::unsupervise();\n+        fn f() { f() };\n+        f();\n+    };\n+}\n\\ No newline at end of file"}]}