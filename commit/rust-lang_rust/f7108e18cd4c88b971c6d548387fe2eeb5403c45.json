{"sha": "f7108e18cd4c88b971c6d548387fe2eeb5403c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MTA4ZTE4Y2Q0Yzg4Yjk3MWM2ZDU0ODM4N2ZlMmVlYjU0MDNjNDU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-27T21:21:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-05-05T02:11:59Z"}, "message": "Only point at the fields that cause infinite size\n\n* clean up code\n* point only fields that cause the type to be of infinite size\n* fix unittests", "tree": {"sha": "08f00c6de6578d7bc63b9f03e247e0c72dd38f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f00c6de6578d7bc63b9f03e247e0c72dd38f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7108e18cd4c88b971c6d548387fe2eeb5403c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7108e18cd4c88b971c6d548387fe2eeb5403c45", "html_url": "https://github.com/rust-lang/rust/commit/f7108e18cd4c88b971c6d548387fe2eeb5403c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7108e18cd4c88b971c6d548387fe2eeb5403c45/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6ad0952f980285c671277a9fd0559ab9d125d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6ad0952f980285c671277a9fd0559ab9d125d3", "html_url": "https://github.com/rust-lang/rust/commit/ed6ad0952f980285c671277a9fd0559ab9d125d3"}], "stats": {"total": 232, "additions": 109, "deletions": 123}, "files": [{"sha": "2e5e3cb06fe5576cbb14f98126700826ef518785", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f7108e18cd4c88b971c6d548387fe2eeb5403c45", "patch": "@@ -1299,20 +1299,6 @@ impl fmt::Debug for Ty {\n     }\n }\n \n-impl Ty {\n-    pub fn ty_def_id(&self) -> Option<DefId> {\n-        match self.node {\n-            TyPath(QPath::Resolved(_, ref path)) => {\n-                match path.def {\n-                    Def::Struct(did) | Def::Enum(did) => Some(did),\n-                    _ => None,\n-                }\n-            },\n-            _ => None,\n-        }\n-    }\n-}\n-\n /// Not represented directly in the AST, referred to by name through a ty_path.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PrimTy {\n@@ -1753,6 +1739,24 @@ impl Item_ {\n             ItemDefaultImpl(..) => \"item\",\n         }\n     }\n+\n+    pub fn fields(&self) -> &[StructField] {\n+        match *self {\n+            ItemStruct(ref vd, _) => {\n+                return vd.fields();\n+            }\n+            ItemEnum(EnumDef { ref variants }, _) => {\n+                for variant in variants {\n+                    let fields = variant.node.data.fields();\n+                    if fields.len() > 0 {\n+                        return fields;\n+                    }\n+                }\n+            }\n+            _ => (),\n+        }\n+        &[]\n+    }\n }\n \n /// A reference from an trait to one of its associated items. This"}, {"sha": "84122bf12a8fed2b549a0ad4becebc5d50eede1a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 81, "deletions": 99, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f7108e18cd4c88b971c6d548387fe2eeb5403c45", "patch": "@@ -778,19 +778,53 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n+/// Get the `DefId` for a given struct or enum `Ty`.\n+fn ty_def_id(ty: &hir::Ty) -> Option<DefId> {\n+    match ty.node {\n+        hir::TyPath(hir::QPath::Resolved(_, ref path)) => {\n+            match path.def {\n+                hir::def::Def::Struct(did) | hir::def::Def::Enum(did) => {\n+                    Some(did)\n+                }\n+                _ => None,\n+            }\n+        },\n+        _ => None,\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    fn foo(&self, id: ast::NodeId, ty: &hir::Ty, sp: Span, err: &mut DiagnosticBuilder<'tcx>) -> bool {\n-        if let Some(Node::NodeItem(item)) = ty.ty_def_id().and_then(|id| {\n-            self.hir.get_if_local(id)\n-        }) {\n-            if self.is_node_id_referenced_in_item(item, id) {\n-                err.span_label(sp, &\"recursive here\");\n+    /// Add a span label to `err` pointing at `sp` if the field represented by `node_id` points\n+    /// recursively at the type `ty` without indirection.\n+    fn annotate_recursive_field_ty(&self,\n+                                   node_id: ast::NodeId,\n+                                   ty: &hir::Ty,\n+                                   sp: Span,\n+                                   err: &mut DiagnosticBuilder<'tcx>) -> bool {\n+        if let Some(did) = ty_def_id(ty) {\n+            return self.annotate_recursive_field_id(node_id, did, sp, err);\n+        }\n+        false\n+    }\n+\n+    /// Add a span label to `err` pointing at `sp` if the field represented by `node_id` points\n+    /// recursively at the type represented by `did` without indirection.\n+    fn annotate_recursive_field_id(&self,\n+                                   node_id:\n+                                   ast::NodeId,\n+                                   did: DefId,\n+                                   sp: Span,\n+                                   err: &mut DiagnosticBuilder<'tcx>) -> bool\n+    {\n+        if let Some(Node::NodeItem(item)) = self.hir.get_if_local(did) {\n+            if self.is_node_id_referenced_in_item(item, node_id) {\n+                err.span_label(sp, &\"recursive without indirection\");\n+                return true;\n             }\n-            true\n-        } else {\n-            false\n         }\n+        false\n     }\n+\n     pub fn recursive_type_with_infinite_size_error(self,\n                                                    type_def_id: DefId)\n                                                    -> DiagnosticBuilder<'tcx>\n@@ -806,114 +840,62 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                            at some point to make `{}` representable\",\n                           self.item_path_str(type_def_id)));\n \n+        // Look at the type for the the recursive type's fields and label those that are causing it\n+        // to be of infinite size.\n         if let Some(Node::NodeItem(self_item)) = self.hir.get_if_local(type_def_id) {\n-            match self_item.node {\n-                hir::ItemStruct(hir::VariantData::Struct(ref fields, _), _) |\n-                hir::ItemStruct(hir::VariantData::Tuple(ref fields, _), _) => {\n-                    for field in fields {\n-                        match field.ty.node {\n-                            hir::TyPath(ref qpath) => {\n-                                // Foo | Option<Foo>\n-                                if let &hir::QPath::Resolved(_, ref path) = qpath {\n-                                    for segment in path.segments.iter() {\n-                                        if let hir::AngleBracketedParameters(\n-                                            hir::AngleBracketedParameterData {\n-                                                ref types, ..\n-                                            }) = segment.parameters\n-                                        {\n-                                            for ty in types {\n-                                                if self.foo(self_item.id, &ty, field.span,\n-                                                            &mut err) {\n-                                                    break;\n-                                                }\n-                                            }\n-                                        }\n-\n-                                    }\n-                                    match path.def {\n-                                        hir::def::Def::Struct(did) | hir::def::Def::Enum(did) => {\n-                                            let local = self.hir.get_if_local(did);\n-                                            if let Some(Node::NodeItem(item)) = local {\n-                                                if self.is_node_id_referenced_in_item(item,\n-                                                                                      self_item.id)\n-                                                {\n-                                                    err.span_label(field.span, &\"recursive here\");\n-                                                }\n-                                            }\n-                                        }\n-                                        _ => (),\n-                                    }\n+            for field in self_item.node.fields() {\n+                match field.ty.node {\n+                    hir::TyPath(ref qpath) => {\n+                        // Foo\n+                        if let &hir::QPath::Resolved(_, ref path) = qpath {\n+                            match path.def {\n+                                hir::def::Def::Struct(did) |\n+                                hir::def::Def::Enum(did) => {\n+                                    self.annotate_recursive_field_id(self_item.id,\n+                                                                     did,\n+                                                                     field.span,\n+                                                                     &mut err);\n                                 }\n+                                _ => (),\n                             }\n-                            hir::TySlice(ref ty) |\n-                            hir::TyArray(ref ty, _) |\n-                            hir::TyPtr(hir::MutTy { ref ty, .. }) |\n-                            hir::TyRptr(_, hir::MutTy { ref ty, .. }) => {\n-                                // &[Foo] | [Foo] | &'a [Foo]\n-                                if let hir::TySlice(ref ty) = ty.node {\n-                                    // &'a [Foo]\n-                                    let _ = self.foo(self_item.id, &ty, field.span, &mut err);\n-                                } else {\n-                                    let _ = self.foo(self_item.id, &ty, field.span, &mut err);\n-                                }\n-                            }\n-                            hir::TyTup(ref tys) => {\n-                                // (Foo, Bar)\n-                                for ty in tys {\n-                                    if self.foo(self_item.id, &ty, field.span, &mut err) {\n-                                        break;\n-                                    }\n-                                }\n+                        }\n+                    }\n+                    hir::TyArray(ref ty, _) => {\n+                        // [Foo]\n+                        self.annotate_recursive_field_ty(self_item.id, &ty, field.span, &mut err);\n+                    }\n+                    hir::TyTup(ref tys) => {\n+                        // (Foo, Bar)\n+                        for ty in tys {\n+                            if self.annotate_recursive_field_ty(self_item.id,\n+                                                                &ty,\n+                                                                field.span,\n+                                                                &mut err) {\n+                                break;\n                             }\n-                            _ => (),\n                         }\n                     }\n+                    _ => (),\n                 }\n-                _ => (),\n             }\n         }\n         err\n     }\n \n+    /// Given `item`, determine wether the node identified by `node_id` is referenced without any\n+    /// indirection in any of `item`'s fields.\n     fn is_node_id_referenced_in_item(&self, item: &hir::Item, node_id: ast::NodeId) -> bool {\n         if item.id == node_id {\n             return true;\n         }\n-        match item.node {\n-            hir::ItemStruct(hir::VariantData::Struct(ref fields, _), _) |\n-            hir::ItemStruct(hir::VariantData::Tuple(ref fields, _), _) => {\n-                for field in fields {\n-                    if let Some(Node::NodeItem(ref item)) = field.ty.ty_def_id().and_then(|id| {\n-                        self.hir.get_if_local(id)\n-                    }) {\n-                        if self.is_node_id_referenced_in_item(item, node_id) {\n-                            return true;\n-                        }\n-                    }\n-                }\n-            }\n-            hir::ItemEnum(hir::EnumDef { ref variants }, _) => {\n-                for variant in variants {\n-                    match variant.node.data {\n-                        hir::VariantData::Struct(ref fields, _) |\n-                        hir::VariantData::Tuple(ref fields, _) => {\n-                            for field in fields {\n-                                if let Some(Node::NodeItem(ref item)) = field.ty\n-                                    .ty_def_id().and_then(|id| {\n-                                        self.hir.get_if_local(id)\n-                                    })\n-                                {\n-                                    if self.is_node_id_referenced_in_item(item, node_id) {\n-                                        return true;\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        _ => (),\n-                    }\n+        for field in item.node.fields() {\n+            if let Some(Node::NodeItem(ref item)) = ty_def_id(&field.ty).and_then(|id| {\n+                self.hir.get_if_local(id)\n+            }) {\n+                if self.is_node_id_referenced_in_item(item, node_id) {\n+                    return true;\n                 }\n             }\n-            _ => (),\n         }\n         false\n     }"}, {"sha": "061d1facda0ca7cf13232e389b8e89b775a5824d", "filename": "src/test/compile-fail/issue-3008-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs?ref=f7108e18cd4c88b971c6d548387fe2eeb5403c45", "patch": "@@ -12,6 +12,7 @@ enum foo { foo_(bar) }\n struct bar { x: bar }\n //~^ ERROR E0072\n //~| NOTE recursive type has infinite size\n+//~| NOTE recursive without indirection\n \n fn main() {\n }"}, {"sha": "70a7cd8b9702128acfaaf0e373c5c9fcbc0cb95e", "filename": "src/test/compile-fail/issue-32326.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fcompile-fail%2Fissue-32326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fcompile-fail%2Fissue-32326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32326.rs?ref=f7108e18cd4c88b971c6d548387fe2eeb5403c45", "patch": "@@ -15,6 +15,8 @@\n enum Expr { //~ ERROR E0072\n             //~| NOTE recursive type has infinite size\n     Plus(Expr, Expr),\n+    //~^ NOTE recursive without indirection\n+    //~| NOTE recursive without indirection\n     Literal(i64),\n }\n "}, {"sha": "5dd76ce32c7a401ab0d47f1d674cee2fe8386154", "filename": "src/test/compile-fail/type-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs?ref=f7108e18cd4c88b971c6d548387fe2eeb5403c45", "patch": "@@ -11,7 +11,7 @@\n struct t1 { //~ ERROR E0072\n             //~| NOTE recursive type has infinite size\n     foo: isize,\n-    foolish: t1\n+    foolish: t1  //~ NOTE recursive without indirection\n }\n \n fn main() { }"}, {"sha": "d8219cbc2209780d0ae5f47b27a7f13121a65831", "filename": "src/test/ui/span/recursive-type-field.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7108e18cd4c88b971c6d548387fe2eeb5403c45/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr?ref=f7108e18cd4c88b971c6d548387fe2eeb5403c45", "patch": "@@ -4,9 +4,8 @@ error[E0072]: recursive type `Foo` has infinite size\n 13 |   struct Foo<'a> {\n    |  _^ starting here...\n 14 | |     bar: Bar<'a>,\n-   | |     ------------ recursive here\n+   | |     ------------ recursive without indirection\n 15 | |     b: Rc<Bar<'a>>,\n-   | |     -------------- recursive here\n 16 | | }\n    | |_^ ...ending here: recursive type has infinite size\n    |\n@@ -18,22 +17,20 @@ error[E0072]: recursive type `Bar` has infinite size\n 18 |   struct Bar<'a> {\n    |  _^ starting here...\n 19 | |     y: (Foo<'a>, Foo<'a>),\n-   | |     --------------------- recursive here\n+   | |     --------------------- recursive without indirection\n 20 | |     z: Option<Bar<'a>>,\n-   | |     ------------------ recursive here\n 21 | |     a: &'a Foo<'a>,\n-   | |     -------------- recursive here\n 22 | |     c: &'a [Bar<'a>],\n-   | |     ---------------- recursive here\n 23 | |     d: [Bar<'a>; 1],\n-   | |     --------------- recursive here\n+   | |     --------------- recursive without indirection\n 24 | |     e: Foo<'a>,\n-   | |     ---------- recursive here\n+   | |     ---------- recursive without indirection\n 25 | |     x: Bar<'a>,\n-   | |     ---------- recursive here\n+   | |     ---------- recursive without indirection\n 26 | | }\n    | |_^ ...ending here: recursive type has infinite size\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n \n error: aborting due to 2 previous errors\n+"}]}