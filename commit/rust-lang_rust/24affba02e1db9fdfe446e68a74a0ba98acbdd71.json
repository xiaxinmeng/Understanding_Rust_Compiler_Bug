{"sha": "24affba02e1db9fdfe446e68a74a0ba98acbdd71", "node_id": "C_kwDOAAsO6NoAKDI0YWZmYmEwMmUxZGI5ZmRmZTQ0NmU2OGE3NGEwYmE5OGFjYmRkNzE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-12-11T01:30:39Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-12-11T01:30:39Z"}, "message": "Allow `memcmp` for more array comparisons\n\nThis way comparing `[NonZeroU8; 8]` is just as fast as comparing `[u8; 8]`.", "tree": {"sha": "e76ba7acd611743b5d901c2dc63f645a326f9e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76ba7acd611743b5d901c2dc63f645a326f9e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24affba02e1db9fdfe446e68a74a0ba98acbdd71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24affba02e1db9fdfe446e68a74a0ba98acbdd71", "html_url": "https://github.com/rust-lang/rust/commit/24affba02e1db9fdfe446e68a74a0ba98acbdd71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24affba02e1db9fdfe446e68a74a0ba98acbdd71/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0448f44bcda55fd9eb71da82495ef648eedb4e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0448f44bcda55fd9eb71da82495ef648eedb4e4", "html_url": "https://github.com/rust-lang/rust/commit/f0448f44bcda55fd9eb71da82495ef648eedb4e4"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "25e056501be96f19de79f0dab91c48700d5ee4c9", "filename": "library/core/src/array/equality.rs", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/24affba02e1db9fdfe446e68a74a0ba98acbdd71/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24affba02e1db9fdfe446e68a74a0ba98acbdd71/library%2Fcore%2Fsrc%2Farray%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fequality.rs?ref=24affba02e1db9fdfe446e68a74a0ba98acbdd71", "patch": "@@ -1,3 +1,6 @@\n+use crate::num::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, NonZeroIsize};\n+use crate::num::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n where\n@@ -124,7 +127,7 @@ impl<T: PartialEq<Other>, Other, const N: usize> SpecArrayEq<Other, N> for T {\n     }\n }\n \n-impl<T: PartialEq<U> + IsRawEqComparable<U>, U, const N: usize> SpecArrayEq<U, N> for T {\n+impl<T: IsRawEqComparable<U>, U, const N: usize> SpecArrayEq<U, N> for T {\n     fn spec_eq(a: &[T; N], b: &[U; N]) -> bool {\n         // SAFETY: This is why `IsRawEqComparable` is an `unsafe trait`.\n         unsafe {\n@@ -145,11 +148,52 @@ impl<T: PartialEq<U> + IsRawEqComparable<U>, U, const N: usize> SpecArrayEq<U, N\n /// - `Self` and `U` have the same layout.\n /// - `Self: PartialEq<U>` is byte-wise (this means no floats, among other things)\n #[rustc_specialization_trait]\n-unsafe trait IsRawEqComparable<U> {}\n+unsafe trait IsRawEqComparable<U>: PartialEq<U> {}\n \n-macro_rules! is_raw_comparable {\n-    ($($t:ty),+) => {$(\n+macro_rules! is_raw_eq_comparable {\n+    ($($t:ty),+ $(,)?) => {$(\n         unsafe impl IsRawEqComparable<$t> for $t {}\n     )+};\n }\n-is_raw_comparable!(bool, char, u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize);\n+\n+// SAFETY: All the ordinary integer types allow all bit patterns as distinct values\n+is_raw_eq_comparable!(u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize);\n+\n+// SAFETY: bool and char have *niches*, but no *padding*, so this is sound\n+is_raw_eq_comparable!(bool, char);\n+\n+// SAFETY: Similarly, the non-zero types have a niche, but no undef,\n+// and they compare like their underlying numeric type.\n+is_raw_eq_comparable!(\n+    NonZeroU8,\n+    NonZeroU16,\n+    NonZeroU32,\n+    NonZeroU64,\n+    NonZeroU128,\n+    NonZeroUsize,\n+    NonZeroI8,\n+    NonZeroI16,\n+    NonZeroI32,\n+    NonZeroI64,\n+    NonZeroI128,\n+    NonZeroIsize,\n+);\n+\n+// SAFETY: The NonZero types have the \"null\" optimization guaranteed, and thus\n+// are also safe to equality-compare bitwise inside an `Option`.\n+// The way `PartialOrd` is defined for `Option` means that this wouldn't work\n+// for `<` or `>` on the signed types, but since we only do `==` it's fine.\n+is_raw_eq_comparable!(\n+    Option<NonZeroU8>,\n+    Option<NonZeroU16>,\n+    Option<NonZeroU32>,\n+    Option<NonZeroU64>,\n+    Option<NonZeroU128>,\n+    Option<NonZeroUsize>,\n+    Option<NonZeroI8>,\n+    Option<NonZeroI16>,\n+    Option<NonZeroI32>,\n+    Option<NonZeroI64>,\n+    Option<NonZeroI128>,\n+    Option<NonZeroIsize>,\n+);"}]}