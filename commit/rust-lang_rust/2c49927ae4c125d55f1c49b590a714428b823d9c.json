{"sha": "2c49927ae4c125d55f1c49b590a714428b823d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNDk5MjdhZTRjMTI1ZDU1ZjFjNDliNTkwYTcxNDQyOGI4MjNkOWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-16T05:19:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-16T05:19:23Z"}, "message": "Rollup merge of #27028 - Gankro:travis, r=alexcrichton\n\n This has travis build LLVM and rustc up to stage1, but not run any tests. It seems wasteful to have the ultimate might of travis running on every PR just to check for whitespace errors. This is a pure subset of the bootstrap, so it shouldn't ever spuriously break.\n\n`make tidy` still runs first, so we still get \\\"fast errors\\\" on bad style. However once make tidy passes, the build will simply keep running to try to make rustc. `tidy` takes ~3 mins to complete, so if your build runs longer you can be confident we've gone on to build LLVM/rustc. In principle this is configured to use ccache (it shows up in the build logs as uploaded/downloaded), but I found no actual performance changes in using it.\n\nMaybe someone at @travis-ci knows what's up with that.\n\nFor reference, here is a successful build with ccache enabled: https://travis-ci.org/Gankro/rust/builds/70821237\n\nand one without: https://travis-ci.org/Gankro/rust/builds/70812814\n\nBuilds seem to take about 41mins regardless.\n\nr? @alexcrichton", "tree": {"sha": "499ece373ee51311cbb719d02e4db4d6ba033ea2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/499ece373ee51311cbb719d02e4db4d6ba033ea2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c49927ae4c125d55f1c49b590a714428b823d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c49927ae4c125d55f1c49b590a714428b823d9c", "html_url": "https://github.com/rust-lang/rust/commit/2c49927ae4c125d55f1c49b590a714428b823d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c49927ae4c125d55f1c49b590a714428b823d9c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4060d02cb69e9fe138cf523b44f73aed1603c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4060d02cb69e9fe138cf523b44f73aed1603c66", "html_url": "https://github.com/rust-lang/rust/commit/a4060d02cb69e9fe138cf523b44f73aed1603c66"}, {"sha": "e8a03285b724df71cbc32a96099ebe834ba09a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a03285b724df71cbc32a96099ebe834ba09a00", "html_url": "https://github.com/rust-lang/rust/commit/e8a03285b724df71cbc32a96099ebe834ba09a00"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "dc955bc2f2be2e3527b553786db41fb2a5b2a1ba", "filename": ".travis.yml", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c49927ae4c125d55f1c49b590a714428b823d9c/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2c49927ae4c125d55f1c49b590a714428b823d9c/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=2c49927ae4c125d55f1c49b590a714428b823d9c", "patch": "@@ -1,20 +1,38 @@\n-# Use something that's not 'ruby' so we don't set up things like\n-# RVM/bundler/ruby and whatnot. Right now 'rust' as a language actually\n-# downloads a rust/cargo snapshot, which we don't really want for building rust.\n+# ccache support is disabled unless your language is a C-derivative. However\n+# `language: C` unconditionally sets `CC=compiler`. If we just set it in our\n+# `env` it will be overwritten by the default (gcc 4.6).\n language: c\n+compiler: /usr/bin/gcc-4.7\n+cache: ccache\n sudo: false\n \n # The test suite is in general way too stressful for travis, especially in\n # terms of time limit and reliability. In the past we've tried to scale things\n # back to only build the stage1 compiler and run a subset of tests, but this\n # didn't end up panning out very well.\n #\n-# As a result, we're just using travis to run `make tidy` now. It'll help\n-# everyone find out about their trailing spaces early on!\n+# As a result, we're just using travis to run `make tidy` and *only* build\n+# stage1 but *not* test it for now (a strict subset of the bootstrap). This will\n+# catch \"obvious\" errors like style or not even compiling.\n+#\n+# We need gcc4.7 or higher to build LLVM, and travis (well, Ubuntu 12.04)\n+# currently ships with 4.6. Gotta download our own.\n before_script:\n-  - ./configure --llvm-root=path/to/nowhere\n+  - ./configure --enable-ccache\n script:\n   - make tidy\n+  - make rustc-stage1 -j4\n+\n+env:\n+  - CXX=/usr/bin/g++-4.7\n+\n+addons:\n+  apt:\n+    sources:\n+    - ubuntu-toolchain-r-test\n+    packages:\n+    - gcc-4.7\n+    - g++-4.7\n \n # Real testing happens on http://buildbot.rust-lang.org/\n #"}, {"sha": "3d04cf7519ed4aa695224c296611a8edaa7ab7db", "filename": "configure", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2c49927ae4c125d55f1c49b590a714428b823d9c/configure", "raw_url": "https://github.com/rust-lang/rust/raw/2c49927ae4c125d55f1c49b590a714428b823d9c/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=2c49927ae4c125d55f1c49b590a714428b823d9c", "patch": "@@ -1031,15 +1031,12 @@ fi\n \n if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n then\n-    if [ -z \"$CC\" ]\n+    if [ -z \"$CFG_CCACHE\" ]\n     then\n-        if [ -z \"$CFG_CCACHE\" ]\n-        then\n-            err \"ccache requested but not found\"\n-        fi\n-\n-        CFG_CC=\"ccache $CFG_CC\"\n+        err \"ccache requested but not found\"\n     fi\n+\n+    CFG_CC=\"ccache $CFG_CC\"\n fi\n \n if [ -z \"$CC\" -a -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n@@ -1528,11 +1525,26 @@ do\n \n             (*)\n             msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n-            LLVM_CXX_32=\"$CXX\"\n-            LLVM_CC_32=\"$CC\"\n+            if [ ! -z \"$CFG_ENABLE_CCACHE\" ]\n+            then\n+                if [ -z \"$CFG_CCACHE\" ]\n+                then\n+                    err \"ccache requested but not found\"\n+                fi\n+\n+                LLVM_CXX_32=\"ccache $CXX\"\n+                LLVM_CC_32=\"ccache $CC\"\n+\n+                LLVM_CXX_64=\"ccache $CXX\"\n+                LLVM_CC_64=\"ccache $CC\"\n+            else\n+                LLVM_CXX_32=\"$CXX\"\n+                LLVM_CC_32=\"$CC\"\n+\n+                LLVM_CXX_64=\"$CXX\"\n+                LLVM_CC_64=\"$CC\"\n+            fi\n \n-            LLVM_CXX_64=\"$CXX\"\n-            LLVM_CC_64=\"$CC\"\n             ;;\n         esac\n "}]}