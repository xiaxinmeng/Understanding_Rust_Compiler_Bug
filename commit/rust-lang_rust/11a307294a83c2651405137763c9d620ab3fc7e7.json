{"sha": "11a307294a83c2651405137763c9d620ab3fc7e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTMwNzI5NGE4M2MyNjUxNDA1MTM3NzYzYzlkNjIwYWIzZmM3ZTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-09T22:11:45Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-09T22:11:55Z"}, "message": "rustc: yet more arch-specific fallout from 2db3abd", "tree": {"sha": "707719a9b7392d6f4520f1d84af5e840f546d7e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707719a9b7392d6f4520f1d84af5e840f546d7e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a307294a83c2651405137763c9d620ab3fc7e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a307294a83c2651405137763c9d620ab3fc7e7", "html_url": "https://github.com/rust-lang/rust/commit/11a307294a83c2651405137763c9d620ab3fc7e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a307294a83c2651405137763c9d620ab3fc7e7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa55778f9cc7faf6aacdb49dd47a631d38499da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa55778f9cc7faf6aacdb49dd47a631d38499da5", "html_url": "https://github.com/rust-lang/rust/commit/fa55778f9cc7faf6aacdb49dd47a631d38499da5"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "0757dc1be6edf58e5786deb7ee66e28624b87ae2", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11a307294a83c2651405137763c9d620ab3fc7e7/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a307294a83c2651405137763c9d620ab3fc7e7/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=11a307294a83c2651405137763c9d620ab3fc7e7", "patch": "@@ -400,8 +400,8 @@ pub mod types {\n                 pub type ssize_t = i64;\n             }\n             pub mod posix01 {\n+                use libc::types::common::c99::{uint8_t, uint32_t, int32_t};\n                 use libc::types::os::arch::c95::{c_long, time_t};\n-                use libc::types::os::arch::c99::{uint8_t, uint32_t, int32_t};\n                 use libc::types::os::arch::posix88::{dev_t, gid_t, ino_t};\n                 use libc::types::os::arch::posix88::{mode_t, off_t};\n                 use libc::types::os::arch::posix88::{uid_t};\n@@ -513,6 +513,10 @@ pub mod types {\n             pub mod bsd44 {\n             }\n             pub mod extra {\n+                pub use libc::types::os::arch::c95::{c_void, c_char, c_int,\n+                                                     c_ulong, wchar_t};\n+                pub use libc::types::os::arch::c99::{c_ulonglong};\n+\n                 pub type BOOL = c_int;\n                 pub type BYTE = u8;\n                 pub type CCHAR = c_char;\n@@ -1131,6 +1135,9 @@ pub mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod stat_ {\n+            use libc::funcs::posix88::stat_::stat;\n+            use libc::types::os::arch::c95::{c_int, c_char};\n+\n             #[link_name = \"_chmod\"]\n             fn chmod(path: *c_char, mode: c_int) -> c_int;\n \n@@ -1147,6 +1154,9 @@ pub mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod stdio {\n+            use libc::types::common::c95::FILE;\n+            use libc::types::os::arch::c95::{c_int, c_char};\n+\n             #[link_name = \"_popen\"]\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n \n@@ -1163,6 +1173,8 @@ pub mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod fcntl {\n+            use libc::types::os::arch::c95::{c_int, c_char};\n+\n             #[link_name = \"_open\"]\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n \n@@ -1179,6 +1191,9 @@ pub mod funcs {\n         #[nolink]\n         #[abi = \"cdecl\"]\n         pub extern mod unistd {\n+            use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n+                                             c_long, size_t, c_void};\n+\n             #[link_name = \"_access\"]\n             fn access(path: *c_char, amode: c_int) -> c_int;\n "}]}