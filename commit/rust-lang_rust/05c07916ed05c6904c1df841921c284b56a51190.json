{"sha": "05c07916ed05c6904c1df841921c284b56a51190", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YzA3OTE2ZWQwNWM2OTA0YzFkZjg0MTkyMWMyODRiNTZhNTExOTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T22:15:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T22:15:45Z"}, "message": "consistent handling of missing sysroot spans", "tree": {"sha": "ca111de74d0665465c0b4363ea0fda25b5839788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca111de74d0665465c0b4363ea0fda25b5839788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c07916ed05c6904c1df841921c284b56a51190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c07916ed05c6904c1df841921c284b56a51190", "html_url": "https://github.com/rust-lang/rust/commit/05c07916ed05c6904c1df841921c284b56a51190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c07916ed05c6904c1df841921c284b56a51190/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39205b5d9825fcf35989b5a04d115d411175d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39205b5d9825fcf35989b5a04d115d411175d18", "html_url": "https://github.com/rust-lang/rust/commit/f39205b5d9825fcf35989b5a04d115d411175d18"}], "stats": {"total": 111, "additions": 49, "deletions": 62}, "files": [{"sha": "e95f7df388c45bd52802ed5ba7e23a81acd8c9f6", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,6 +1,5 @@\n // edition:2018\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n \n async fn print_dur() {}\n "}, {"sha": "6c8e0d0a5c4037cd1a5815efbcfd556c3858082a", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:7:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:5\n+  --> $DIR/issue-62009-1.rs:9:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:14:5\n+  --> $DIR/issue-62009-1.rs:13:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:14:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:13:5: 13:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:13:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:13:5: 13:15]`\n    | \n   ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |"}, {"sha": "2f1e6c81ae5a8ef4eca2b2c04c6e6b5120a6c941", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "ac5e3ccb42187d660992b4e9c25feec26da46e2c", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:8:13\n+  --> $DIR/closure-move-sync.rs:7:13\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n@@ -11,10 +11,10 @@ LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:8:27: 11:6 recv:&std::sync::mpsc::Receiver<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:7:27: 10:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:20:5\n+  --> $DIR/closure-move-sync.rs:19:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n@@ -26,7 +26,7 @@ LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:20:19: 20:42 tx:&std::sync::mpsc::Sender<()>]`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:19:19: 19:42 tx:&std::sync::mpsc::Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c35b9212c6cb605e0d1202de37de1959fbdc404", "filename": "src/test/ui/consts/const-size_of-cycle.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-musl\n-// ignore-x86\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // error-pattern: cycle detected\n \n struct Foo {"}, {"sha": "5b06ade44c5cbdb0be9197a357660063c4f44aaa", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,11 +1,11 @@\n error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n-  --> $DIR/const-size_of-cycle.rs:6:17\n+  --> $DIR/const-size_of-cycle.rs:5:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n-  --> $DIR/const-size_of-cycle.rs:6:17\n+  --> $DIR/const-size_of-cycle.rs:5:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     pub fn size_of<T>() -> usize;\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n-  --> $DIR/const-size_of-cycle.rs:5:1\n+  --> $DIR/const-size_of-cycle.rs:4:1\n    |\n LL | struct Foo {\n    | ^^^^^^^^^^"}, {"sha": "5597df4ba499b8123c0c793444fdf1f433ddbd37", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-musl\n-// ignore-x86\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n \n use std::fmt::Debug;\n "}, {"sha": "2278519e95ad18389fe4709835f1e913724a1df4", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0643]: method `foo` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:11:12\n+  --> $DIR/impl-generic-mismatch.rs:10:12\n    |\n LL |     fn foo(&self, _: &impl Debug);\n    |                       ---------- declaration in trait here\n@@ -13,7 +13,7 @@ LL |     fn foo(&self, _: &impl Debug) { }\n    |          --           ^^^^^^^^^^\n \n error[E0643]: method `bar` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:20:23\n+  --> $DIR/impl-generic-mismatch.rs:19:23\n    |\n LL |     fn bar<U: Debug>(&self, _: &U);\n    |            - declaration in trait here\n@@ -27,7 +27,7 @@ LL |     fn bar<U: Debug>(&self, _: &U) { }\n    |           ^^^^^^^^^^            ^\n \n error[E0643]: method `hash` has incompatible signature for trait\n-  --> $DIR/impl-generic-mismatch.rs:31:33\n+  --> $DIR/impl-generic-mismatch.rs:30:33\n    |\n LL |     fn hash(&self, hasher: &mut impl Hasher) {}\n    |                                 ^^^^^^^^^^^ expected generic parameter, found `impl Trait`"}, {"sha": "abcc92ce34d175fac4adb1975e09c04d8768a24d", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // aux-build:two_macros.rs\n \n macro_rules! define_vec {"}, {"sha": "7a55abe42556c7e963d43507b8c445421f4f0e29", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:21:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:20:9\n    |\n LL |         extern crate std as core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | define_other_core!();\n    | --------------------- in this macro invocation\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:15:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:14:9\n    |\n LL |         Vec::panic!();\n    |         ^^^ ambiguous name\n    |\n note: `Vec` could refer to the crate imported here\n-  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:7:9\n+  --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:6:9\n    |\n LL |         extern crate std as Vec;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "369de0400702232204e04e82c453caab6be5f371", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::ops::Deref;\n trait Trait {}\n "}, {"sha": "8086d3f1fbc646c23d0914e4d70e85bb814ea2c6", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/mismatched_trait_impl-2.rs:10:5\n+  --> $DIR/mismatched_trait_impl-2.rs:9:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait"}, {"sha": "60633fdd393ee76f9ffc3a55a0ca4104f6acf270", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {"}, {"sha": "5c129524f51b4aae7f4575b77fd20cc9cd0deb0d", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:7:5\n+  --> $DIR/interior-mutability.rs:6:5\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -12,7 +12,7 @@ LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:7:18: 7:35 x:&std::cell::Cell<i32>]`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:6:18: 6:35 x:&std::cell::Cell<i32>]`\n \n error: aborting due to previous error\n "}, {"sha": "0199abbd8f04ad688a67866680f8683a1c17298f", "filename": "src/test/ui/issues/issue-21160.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n struct Bar;\n \n impl Bar {"}, {"sha": "65ba64b49d06d8bb8f32de4a18442a0469731d32", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Bar: std::hash::Hash` is not satisfied\n-  --> $DIR/issue-21160.rs:10:12\n+  --> $DIR/issue-21160.rs:9:12\n    |\n LL | struct Foo(Bar);\n    |            ^^^ the trait `std::hash::Hash` is not implemented for `Bar`"}, {"sha": "7120dee6339f19bc8bdcd3cd713a8eed42534561", "filename": "src/test/ui/issues/issue-27033.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n fn main() {\n     match Some(1) {\n         None @ _ => {} //~ ERROR match bindings cannot shadow unit variants"}, {"sha": "2d6d2ef41bd740deba7af1bd35d8aa431509c4aa", "filename": "src/test/ui/issues/issue-27033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27033.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0530]: match bindings cannot shadow unit variants\n-  --> $DIR/issue-27033.rs:5:9\n+  --> $DIR/issue-27033.rs:4:9\n    |\n LL |         None @ _ => {}\n    |         ^^^^ cannot be named the same as a unit variant\n@@ -10,7 +10,7 @@ LL | pub use crate::option::Option::{self, Some, None};\n    |                                             ---- the unit variant `None` is defined here\n \n error[E0530]: match bindings cannot shadow constants\n-  --> $DIR/issue-27033.rs:9:9\n+  --> $DIR/issue-27033.rs:8:9\n    |\n LL |     const C: u8 = 1;\n    |     ---------------- the constant `C` is defined here"}, {"sha": "85d812dd61904b737f3443423e68d735c8aa27de", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::thread;\n use std::rc::Rc;\n "}, {"sha": "f23a3bf832ab6c9336d053f1c85c586fafe66c43", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:27:5\n+  --> $DIR/no-send-res-ports.rs:26:5\n    |\n LL |     thread::spawn(move|| {\n    |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -9,10 +9,10 @@ LL |     thread::spawn(move|| {\n LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n    |                          ---- required by this bound in `std::thread::spawn`\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:26:19: 30:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `main::Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:26:19: 30:6 x:main::Foo]`\n \n error: aborting due to previous error\n "}, {"sha": "a028247ec5c112a836d1098d5450634bc4a88b67", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: --test\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n \n use std::num::ParseFloatError;\n "}, {"sha": "9cefef58bf53ae18fe877f337af9f934d1e6cbca", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseFloatError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:8:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:7:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()"}, {"sha": "5d3464d20f30dc245d77ad1b4b4beae6eea5d360", "filename": "src/test/ui/traits/trait-suggest-where-clause.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-x86\n-// ^ due to stderr output differences\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n use std::mem;\n \n struct Misc<T:?Sized>(T);"}, {"sha": "2bb7defdac710c22fb0ec0cc24d1caa1ded3761a", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:9:20\n+  --> $DIR/trait-suggest-where-clause.rs:8:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n@@ -16,7 +16,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:12:5\n+  --> $DIR/trait-suggest-where-clause.rs:11:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       -- help: consider further restricting this bound: `U: std::marker::Sized +`\n@@ -34,31 +34,31 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:17:5\n+  --> $DIR/trait-suggest-where-clause.rs:16:5\n    |\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `u64`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:20:5\n+  --> $DIR/trait-suggest-where-clause.rs:19:5\n    |\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented for `u64`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the trait bound `Misc<_>: std::convert::From<T>` is not satisfied\n-  --> $DIR/trait-suggest-where-clause.rs:25:5\n+  --> $DIR/trait-suggest-where-clause.rs:24:5\n    |\n LL |     <Misc<_> as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n    |\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:30:20\n+  --> $DIR/trait-suggest-where-clause.rs:29:20\n    |\n LL |     mem::size_of::<[T]>();\n    |                    ^^^ doesn't have a size known at compile-time\n@@ -72,7 +72,7 @@ LL | pub const fn size_of<T>() -> usize {\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:33:5\n+  --> $DIR/trait-suggest-where-clause.rs:32:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "926f12911c52a521c9f1e070a787942a7f462797", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c07916ed05c6904c1df841921c284b56a51190/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=05c07916ed05c6904c1df841921c284b56a51190", "patch": "@@ -1,5 +1,4 @@\n-// ignore-musl\n-// ignore-x86\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n // error-pattern: reached the type-length limit while instantiating\n \n // Test that the type length limit can be changed."}]}