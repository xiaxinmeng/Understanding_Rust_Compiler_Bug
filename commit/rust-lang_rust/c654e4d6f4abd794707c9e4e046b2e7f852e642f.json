{"sha": "c654e4d6f4abd794707c9e4e046b2e7f852e642f", "node_id": "C_kwDOAAsO6NoAKGM2NTRlNGQ2ZjRhYmQ3OTQ3MDdjOWU0ZTA0NmIyZTdmODUyZTY0MmY", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-28T18:14:27Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-31T18:30:33Z"}, "message": "Add ValuePairs::Terms & Fix compile error\n\nAnd use correct substs.", "tree": {"sha": "86e48fe59ebbbb254ef88dedbb6ee4e92dfa0e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e48fe59ebbbb254ef88dedbb6ee4e92dfa0e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c654e4d6f4abd794707c9e4e046b2e7f852e642f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c654e4d6f4abd794707c9e4e046b2e7f852e642f", "html_url": "https://github.com/rust-lang/rust/commit/c654e4d6f4abd794707c9e4e046b2e7f852e642f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c654e4d6f4abd794707c9e4e046b2e7f852e642f/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd03d8167f856044df6430f1dd69142f7511aca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd03d8167f856044df6430f1dd69142f7511aca8", "html_url": "https://github.com/rust-lang/rust/commit/bd03d8167f856044df6430f1dd69142f7511aca8"}], "stats": {"total": 324, "additions": 143, "deletions": 181}, "files": [{"sha": "aa74a92ad1f4f2cd8e8e9ea955939f2d124d414b", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -288,21 +288,13 @@ impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        match (a, b) {\n-            (ty::Term::Ty(a), ty::Term::Ty(b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n-            }\n-            (ty::Term::Const(a), ty::Term::Const(b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, a, b)\n-            }\n-            (_, _) => span_bug!(cause.span, \"Unexpected type/const mismatch\"),\n-        }\n+        TypeTrace { cause: cause.clone(), values: Terms(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n }\n "}, {"sha": "24a5f55d53c28bbb261ff632ec834058578498f8", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -2127,6 +2127,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Types(exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Consts(exp_found) => self.expected_found_str(exp_found),\n+            infer::Terms(exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),"}, {"sha": "330c99f6073541a6b01d1ac1c4f5c01d1aaba000", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -371,6 +371,7 @@ pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),\n+    Terms(ExpectedFound<ty::Term<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }"}, {"sha": "f16601dd08eb5c69fbcae89f8d6390967933d153", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -1356,26 +1356,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     normalized_ty,\n                     data.term,\n                 ) {\n-                    values = Some(match (normalized_ty, data.term) {\n-                        (ty::Term::Ty(normalized_ty), ty::Term::Ty(ty)) => {\n-                            infer::ValuePairs::Types(ExpectedFound::new(\n-                                is_normalized_ty_expected,\n-                                normalized_ty,\n-                                ty,\n-                            ))\n-                        }\n-                        (ty::Term::Const(normalized_ct), ty::Term::Const(ct)) => {\n-                            infer::ValuePairs::Consts(ExpectedFound::new(\n-                                is_normalized_ty_expected,\n-                                normalized_ct,\n-                                ct,\n-                            ))\n-                        }\n-                        (_, _) => span_bug!(\n-                            obligation.cause.span,\n-                            \"found const or type where other expected\"\n-                        ),\n-                    });\n+                    values = Some(infer::ValuePairs::Terms(ExpectedFound::new(\n+                        is_normalized_ty_expected,\n+                        normalized_ty,\n+                        data.term,\n+                    )));\n                     err_buf = error;\n                     err = &err_buf;\n                 }"}, {"sha": "11cde60f0753ae5e39f21a8151dd3f0ccb1c89e3", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -22,6 +22,7 @@ use crate::traits::error_reporting::InferCtxtExt as _;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n@@ -200,7 +201,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n     match obligation.predicate.term {\n         ty::Term::Ty(obligation_pred_ty) => {\n-            let normalized_ty = match opt_normalize_projection_type::<false>(\n+            let normalized_ty = match opt_normalize_projection_type(\n                 selcx,\n                 obligation.param_env,\n                 obligation.predicate.projection_ty,\n@@ -215,7 +216,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n             debug!(?normalized_ty, ?obligations, \"project_and_unify_type result\");\n             match infcx\n                 .at(&obligation.cause, obligation.param_env)\n-                .eq(normalized_ty, obligation_pred_ty.into())\n+                .eq(normalized_ty, obligation_pred_ty)\n             {\n                 Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n                     obligations.extend(inferred_obligations);\n@@ -228,7 +229,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n             }\n         }\n         ty::Term::Const(obligation_pred_const) => {\n-            let normalized_const = match opt_normalize_projection_type::<true>(\n+            let normalized_const = match opt_normalize_projection_type(\n                 selcx,\n                 obligation.param_env,\n                 obligation.predicate.projection_ty,\n@@ -492,7 +493,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 let (data, mapped_regions, mapped_types, mapped_consts) =\n                     BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n                 let data = data.super_fold_with(self);\n-                let normalized_ty = opt_normalize_projection_type::<false>(\n+                let normalized_ty = opt_normalize_projection_type(\n                     self.selcx,\n                     self.param_env,\n                     data,\n@@ -826,7 +827,7 @@ pub fn normalize_projection_type<'a, 'b, 'tcx>(\n     depth: usize,\n     obligations: &mut Vec<PredicateObligation<'tcx>>,\n ) -> Term<'tcx> {\n-    opt_normalize_projection_type::<false>(\n+    opt_normalize_projection_type(\n         selcx,\n         param_env,\n         projection_ty,\n@@ -859,7 +860,7 @@ pub fn normalize_projection_type<'a, 'b, 'tcx>(\n /// function takes an obligations vector and appends to it directly, which is\n /// slightly uglier but avoids the need for an extra short-lived allocation.\n #[instrument(level = \"debug\", skip(selcx, param_env, cause, obligations))]\n-fn opt_normalize_projection_type<'a, 'b, 'tcx, const INTO_CONST: bool>(\n+fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n     selcx: &'a mut SelectionContext<'b, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     projection_ty: ty::ProjectionTy<'tcx>,\n@@ -946,7 +947,7 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx, const INTO_CONST: bool>(\n \n     let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);\n \n-    match project::<INTO_CONST>(selcx, &obligation) {\n+    match project(selcx, &obligation) {\n         Ok(Projected::Progress(Progress {\n             term: projected_term,\n             obligations: mut projected_obligations,\n@@ -1087,7 +1088,7 @@ impl<'tcx> Progress<'tcx> {\n /// IMPORTANT:\n /// - `obligation` must be fully normalized\n #[tracing::instrument(level = \"info\", skip(selcx))]\n-fn project<'cx, 'tcx, const INTO_CONST: bool>(\n+fn project<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n ) -> Result<Projected<'tcx>, ProjectionError<'tcx>> {\n@@ -1123,7 +1124,7 @@ fn project<'cx, 'tcx, const INTO_CONST: bool>(\n \n     match candidates {\n         ProjectionCandidateSet::Single(candidate) => {\n-            Ok(Projected::Progress(confirm_candidate::<INTO_CONST>(selcx, obligation, candidate)))\n+            Ok(Projected::Progress(confirm_candidate(selcx, obligation, candidate)))\n         }\n         ProjectionCandidateSet::None => Ok(Projected::NoProgress(\n             selcx\n@@ -1525,7 +1526,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     });\n }\n \n-fn confirm_candidate<'cx, 'tcx, const INTO_CONST: bool>(\n+fn confirm_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n     candidate: ProjectionCandidate<'tcx>,\n@@ -1542,7 +1543,7 @@ fn confirm_candidate<'cx, 'tcx, const INTO_CONST: bool>(\n         }\n \n         ProjectionCandidate::Select(impl_source) => {\n-            confirm_select_candidate::<INTO_CONST>(selcx, obligation, impl_source)\n+            confirm_select_candidate(selcx, obligation, impl_source)\n         }\n     };\n \n@@ -1558,15 +1559,13 @@ fn confirm_candidate<'cx, 'tcx, const INTO_CONST: bool>(\n     progress\n }\n \n-fn confirm_select_candidate<'cx, 'tcx, const INTO_CONST: bool>(\n+fn confirm_select_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n     impl_source: Selection<'tcx>,\n ) -> Progress<'tcx> {\n     match impl_source {\n-        super::ImplSource::UserDefined(data) => {\n-            confirm_impl_candidate::<INTO_CONST>(selcx, obligation, data)\n-        }\n+        super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),\n         super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),\n         super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),\n         super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),\n@@ -1836,7 +1835,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n     }\n }\n \n-fn confirm_impl_candidate<'cx, 'tcx, const INTO_CONST: bool>(\n+fn confirm_impl_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n     impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,\n@@ -1874,10 +1873,12 @@ fn confirm_impl_candidate<'cx, 'tcx, const INTO_CONST: bool>(\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);\n     let ty = tcx.type_of(assoc_ty.item.def_id);\n-    let term: ty::Term<'tcx> = if INTO_CONST {\n-        // FIXME(associated_const_equality): what are the right substs?\n+    let is_const = matches!(tcx.def_kind(assoc_ty.item.def_id), DefKind::AssocConst);\n+    let term: ty::Term<'tcx> = if is_const {\n+        let identity_substs =\n+            crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n-        let val = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, substs));\n+        let val = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n         tcx.mk_const(ty::Const { ty, val }).into()\n     } else {\n         ty.into()"}, {"sha": "06d472214e4d2b6b64def4114100df0cea1eeb65", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -1244,6 +1244,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // the \"projection predicate\" for:\n                 //\n                 // `<T as Iterator>::Item = u32`\n+                let def_kind = tcx.def_kind(projection_ty.skip_binder().item_def_id);\n+                match (def_kind, term) {\n+                    (hir::def::DefKind::AssocTy, ty::Term::Ty(_))\n+                    | (hir::def::DefKind::AssocConst, ty::Term::Const(_)) => (),\n+                    (_, _) => {\n+                        tcx.sess\n+                            .struct_span_err(\n+                                binding.span,\n+                                \"type/const mismatch in equality bind of associated field\",\n+                            )\n+                            .span_label(binding.span, \"type/const Mismatch\")\n+                            .emit();\n+                    }\n+                }\n                 bounds.projection_bounds.push((\n                     projection_ty.map_bound(|projection_ty| ty::ProjectionPredicate {\n                         projection_ty,"}, {"sha": "c48f4c63b02c127d0111be68c62073aa55183b74", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -21,7 +21,9 @@ impl FooTy for Bar {\n \n \n fn foo<F: Foo<N=usize>>() {}\n+//~^ ERROR type/const mismatch\n fn foo2<F: FooTy<T=3usize>>() {}\n+//~^ ERROR type/const mismatch\n \n fn main() {\n   foo::<Bar>();"}, {"sha": "71f8375d4e6c5b6d52af65cb485b63e1bee5c352", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -0,0 +1,14 @@\n+error: type/const mismatch in equality bind of associated field\n+  --> $DIR/assoc-const-ty-mismatch.rs:23:15\n+   |\n+LL | fn foo<F: Foo<N=usize>>() {}\n+   |               ^^^^^^^ type/const Mismatch\n+\n+error: type/const mismatch in equality bind of associated field\n+  --> $DIR/assoc-const-ty-mismatch.rs:25:18\n+   |\n+LL | fn foo2<F: FooTy<T=3usize>>() {}\n+   |                  ^^^^^^^^ type/const Mismatch\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c14fd7c9ee8978f16414b88f01f132c5c09c0241", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n    |\n-note: expected this to be `Blue`\n+note: expected struct `Blue`, found struct `Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:16:40\n    |\n LL | impl Vehicle for ModelT { type Color = Black; }\n@@ -21,7 +21,7 @@ error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n    |\n-note: expected this to be `Black`\n+note: expected struct `Black`, found struct `Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:21:40\n    |\n LL | impl Vehicle for ModelU { type Color = Blue; }"}, {"sha": "64f7a575cd5727625728d4a606c2fcb3210e821a", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -19,7 +19,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n LL |     foo1(a);\n    |     ^^^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n-note: expected this to be `Bar`\n+note: expected struct `Bar`, found `usize`\n   --> $DIR/associated-types-eq-3.rs:12:14\n    |\n LL |     type A = usize;\n@@ -36,7 +36,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n LL |     baz(&a);\n    |         ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n-note: expected this to be `Bar`\n+note: expected struct `Bar`, found `usize`\n   --> $DIR/associated-types-eq-3.rs:12:14\n    |\n LL |     type A = usize;"}, {"sha": "cc69c92b930d1f9dc026543de43a99d6e70317b2", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,13 +4,11 @@ error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n-note: expected this to be `&isize`\n+note: expected `isize`, found `usize`\n   --> $DIR/associated-types-eq-hr.rs:26:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n-   = note: expected reference `&isize`\n-              found reference `&usize`\n note: required by a bound in `foo`\n   --> $DIR/associated-types-eq-hr.rs:45:36\n    |\n@@ -26,13 +24,11 @@ error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n-note: expected this to be `&usize`\n+note: expected `usize`, found `isize`\n   --> $DIR/associated-types-eq-hr.rs:14:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n-   = note: expected reference `&usize`\n-              found reference `&isize`\n note: required by a bound in `bar`\n   --> $DIR/associated-types-eq-hr.rs:52:36\n    |"}, {"sha": "4e4b8be462bc6cb6e1898abefe5503e0b374e7b0", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -7,12 +7,12 @@ LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n    |\n-note: expected this to be `Option<T>`\n+note: expected enum `Option`, found type parameter `T`\n   --> $DIR/associated-types-issue-20346.rs:23:17\n    |\n LL |     type Item = T;\n    |                 ^\n-   = note: expected enum `Option<T>`\n+   = note: expected type `Option<T>`\n               found type `T`\n note: required by a bound in `is_iterator_of`\n   --> $DIR/associated-types-issue-20346.rs:15:34"}, {"sha": "eba9483ff222a7da07f51a3a55009a13720d755c", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n LL |     want_y(t);\n    |     ^^^^^^ expected `i32`, found associated type\n    |\n-   = note:         expected type `i32`\n-           found associated type `<T as Foo>::Y`\n+   = note: expected type `i32`\n+              found type `<T as Foo>::Y`\n note: required by a bound in `want_y`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:44:17\n    |\n@@ -22,8 +22,8 @@ error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n LL |     want_x(t);\n    |     ^^^^^^ expected `u32`, found associated type\n    |\n-   = note:         expected type `u32`\n-           found associated type `<T as Foo>::X`\n+   = note: expected type `u32`\n+              found type `<T as Foo>::X`\n note: required by a bound in `want_x`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:42:17\n    |"}, {"sha": "6c1881fcd29de31115d14b3d0d18a8e01a9932fa", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<'_, T> for T {\n    |      - this type parameter      ^^^^^^^^^^^^^^^^^ expected associated type, found type parameter `T`\n    |\n-   = note: expected associated type `<T as Deref>::Target`\n-               found type parameter `T`\n+   = note: expected type `<T as Deref>::Target`\n+              found type `T`\n help: consider further restricting this bound\n    |\n LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<'_, T> for T {"}, {"sha": "28ef77ae13762a6bffebd1ee4646691b3c39dddd", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -1,14 +1,11 @@\n error[E0271]: type mismatch resolving `<impl Bar as Foo>::Item == i32`\n   --> $DIR/impl-trait-return-missing-constraint.rs:25:13\n    |\n-LL | fn bar() -> impl Bar {\n-   |             -------- the found opaque type\n-...\n LL | fn baz() -> impl Bar<Item = i32> {\n    |             ^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |\n-   = note:         expected type `i32`\n-           found associated type `<impl Bar as Foo>::Item`\n+   = note: expected type `i32`\n+              found type `<impl Bar as Foo>::Item`\n help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n    |\n LL | fn bar() -> impl Bar<Item = i32> {"}, {"sha": "9244b4821f3e79c834ecf89179bcd701b3a5fa61", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<() as Array>::Element == &()`\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Array>::Element == &()`\n    |\n-note: expected this to be `&()`\n+note: expected `&()`, found `()`\n   --> $DIR/issue-44153.rs:10:20\n    |\n LL |     type Element = ();"}, {"sha": "67b1295d0fe3706aececcfdd51a22cfc7641f2fc", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n LL |     type Sibling = Foo2;\n    |                    ^^^^ type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n    |\n-note: expected this to be `char`\n+note: expected `char`, found `u32`\n   --> $DIR/issue-72806.rs:18:15\n    |\n LL |     type Ok = u32;"}, {"sha": "e387d34266eb9f363e9f6e5e6d96c53e7cc7fe21", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 28, "deletions": 49, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<A as Trait>::Associated == ()`\n LL |     accepts_trait(a);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<A as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<A as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -22,8 +22,8 @@ error[E0271]: type mismatch resolving `<B as Trait>::Associated == ()`\n LL |     accepts_trait(b);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<B as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<B as Trait>::Associated`\n    = help: consider constraining the associated type `<B as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n@@ -38,8 +38,8 @@ error[E0271]: type mismatch resolving `<C as Trait>::Associated == ()`\n LL |     accepts_trait(c);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<C as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<C as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -56,8 +56,8 @@ error[E0271]: type mismatch resolving `<D as Trait>::Associated == ()`\n LL |     accepts_trait(d);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<D as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<D as Trait>::Associated`\n    = help: consider constraining the associated type `<D as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n@@ -72,8 +72,8 @@ error[E0271]: type mismatch resolving `<E as GenericTrait<()>>::Associated == ()\n LL |     accepts_generic_trait(e);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<E as GenericTrait<()>>::Associated`\n+   = note: expected type `()`\n+              found type `<E as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -90,8 +90,8 @@ error[E0271]: type mismatch resolving `<F as GenericTrait<()>>::Associated == ()\n LL |     accepts_generic_trait(f);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<F as GenericTrait<()>>::Associated`\n+   = note: expected type `()`\n+              found type `<F as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -108,8 +108,8 @@ error[E0271]: type mismatch resolving `<G as GenericTrait<()>>::Associated == ()\n LL |     accepts_generic_trait(g);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<G as GenericTrait<()>>::Associated`\n+   = note: expected type `()`\n+              found type `<G as GenericTrait<()>>::Associated`\n    = help: consider constraining the associated type `<G as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`\n@@ -121,14 +121,11 @@ LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:5\n    |\n-LL | fn returns_opaque() -> impl Trait + 'static {\n-   |                        -------------------- the found opaque type\n-...\n LL |     accepts_trait(returns_opaque());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl Trait as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<impl Trait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -142,14 +139,11 @@ LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:5\n    |\n-LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n-   |                                --------------------------- the found opaque type\n-...\n LL |     accepts_trait(returns_opaque_derived());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl DerivedTrait as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<impl DerivedTrait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -163,14 +157,11 @@ LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static\n error[E0271]: type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n    |\n-LL | fn returns_opaque_foo() -> impl Trait + Foo {\n-   |                            ---------------- the found opaque type\n-...\n LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl Foo + Trait as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<impl Foo + Trait as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n@@ -184,14 +175,11 @@ LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n error[E0271]: type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n    |\n-LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n-   |                                    ----------------------- the found opaque type\n-...\n LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl Foo + DerivedTrait as Trait>::Associated`\n+   = note: expected type `()`\n+              found type `<impl Foo + DerivedTrait as Trait>::Associated`\n    = help: consider constraining the associated type `<impl Foo + DerivedTrait as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n@@ -203,14 +191,11 @@ LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:5\n    |\n-LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n-   |                                ------------------------------- the found opaque type\n-...\n LL |     accepts_generic_trait(returns_opaque_generic());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = note: expected type `()`\n+              found type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -224,14 +209,11 @@ LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'st\n error[E0271]: type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n    |\n-LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n-   |                                    --------------------------- the found opaque type\n-...\n LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = note: expected type `()`\n+              found type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n@@ -245,14 +227,11 @@ LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> +\n error[E0271]: type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5\n    |\n-LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n-   |                                          ---------------------------------------- the found opaque type\n-...\n LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n+   = note: expected type `()`\n+              found type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n    = help: consider constraining the associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`"}, {"sha": "9fd474edff9c58ea3bbd8a39884f17123bb11c12", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n LL |     type Sibling = Foo2;\n    |                    ^^^^ type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n    |\n-note: expected this to be `()`\n+note: expected `()`, found `u32`\n   --> $DIR/point-at-type-on-obligation-failure.rs:18:15\n    |\n LL |     type Ok = u32;"}, {"sha": "ba5632f47a78715348bce5816f85300dc576b39b", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n LL |     foo(3_i8);\n    |     ^^^ type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n    |\n-note: expected this to be `u32`\n+note: expected `u32`, found `&str`\n   --> $DIR/E0271.rs:7:43\n    |\n LL | impl Trait for i8 { type AssociatedType = &'static str; }"}, {"sha": "2534c527be4636626a13314a56c5b4f5fc6c1ab2", "filename": "src/test/ui/feature-gates/feature-gate-associated_const_equality.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.rs?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -9,7 +9,6 @@ impl TraitWAssocConst for Demo {\n \n fn foo<A: TraitWAssocConst<A=32>>() {}\n //~^ ERROR associated const equality\n-//~| ERROR associated const equality\n \n fn main() {\n   foo::<Demo>();"}, {"sha": "6563fbcba2e4bd6880c90320eeab4ffcc2c31cbb", "filename": "src/test/ui/feature-gates/feature-gate-associated_const_equality.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -7,12 +7,6 @@ LL | fn foo<A: TraitWAssocConst<A=32>>() {}\n    = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n    = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n \n-error: associated const equality is incomplete\n-  --> $DIR/feature-gate-associated_const_equality.rs:10:28\n-   |\n-LL | fn foo<A: TraitWAssocConst<A=32>>() {}\n-   |                            ^^^^ cannot yet relate associated const\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "3b447a17d523ced7435b09796d83518f231d9591", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -19,7 +19,7 @@ LL | fn foo() -> impl Generator<Return = i32> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found enum `Result`\n    |\n    = note: expected type `i32`\n-              found enum `Result<{integer}, _>`\n+              found type `Result<{integer}, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ee72c8f5d23a93bdef1efabe168dd723157adade", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -6,8 +6,8 @@ LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n LL |     type Item<'a> = T;\n    |                     ^ expected type parameter `T`, found associated type\n    |\n-   = note: expected type parameter `T`\n-             found associated type `<T as Deref>::Target`\n+   = note: expected type `T`\n+              found type `<T as Deref>::Target`\n note: required by a bound in `UnsafeCopy::Item`\n   --> $DIR/issue-68656-unsized-values.rs:6:36\n    |"}, {"sha": "7ca54373392164a1e896184ea3d24663be791956", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n LL |     bug(Box::new(x));\n    |     ^^^ type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n    |\n-note: expected this to be `[u8]`\n+note: expected slice `[u8]`, found `i32`\n   --> $DIR/issue-74684-2.rs:10:18\n    |\n LL |     type F<'a> = i32;"}, {"sha": "7a788fbd856533ae8c7e1696db7f6f4e74dd90c3", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,13 +4,13 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n LL |     let v = Unit2.m(\n    |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n-note: expected this to be `<_ as Ty<'_>>::V`\n+note: expected associated type, found struct `Unit4`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14\n    |\n LL |     type O = T::Output;\n    |              ^^^^^^^^^\n-   = note: expected associated type `<_ as Ty<'_>>::V`\n-                       found struct `Unit4`\n+   = note: expected type `<_ as Ty<'_>>::V`\n+              found type `Unit4`\n    = help: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4` or calling a method that returns `<_ as Ty<'_>>::V`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `T1::m`"}, {"sha": "788c7419559df4ef19e5f3a3a044562e8ab84140", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,13 +4,13 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n    |\n-note: expected this to be `<T as impl_trait::Trait>::Assoc`\n+note: expected associated type, found `()`\n   --> $DIR/bound-normalization-fail.rs:14:19\n    |\n LL |     type Output = T;\n    |                   ^\n-   = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n-                    found unit type `()`\n+   = note: expected type `<T as impl_trait::Trait>::Assoc`\n+              found type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n@@ -28,13 +28,13 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n    |\n-note: expected this to be `<T as lifetimes::Trait<'static>>::Assoc`\n+note: expected associated type, found `()`\n   --> $DIR/bound-normalization-fail.rs:14:19\n    |\n LL |     type Output = T;\n    |                   ^\n-   = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-                    found unit type `()`\n+   = note: expected type `<T as lifetimes::Trait<'static>>::Assoc`\n+              found type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {"}, {"sha": "c187ca6ada860aa6a3c9ff8716c89d91ead9bd9d", "filename": "src/test/ui/impl-trait/issues/issue-70877.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -1,19 +1,16 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n   --> $DIR/issue-70877.rs:7:12\n    |\n-LL | type FooRet = impl std::fmt::Debug;\n-   |               -------------------- the found opaque type\n-...\n LL | type Foo = impl Iterator<Item = FooItem>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n    |\n-note: expected this to be `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+note: expected enum `Option`, found opaque type\n   --> $DIR/issue-70877.rs:13:17\n    |\n LL |     type Item = FooItem;\n    |                 ^^^^^^^\n-   = note: expected struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-              found struct `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n+   = note: expected type `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n+              found type `Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> impl Debug + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "bf5a182803ab66c26f7b61f52109913c6a2858bb", "filename": "src/test/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<() as Super>::Assoc == ()`\n LL | fn test() -> impl Test {\n    |              ^^^^^^^^^ type mismatch resolving `<() as Super>::Assoc == ()`\n    |\n-note: expected this to be `()`\n+note: expected `()`, found `u8`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:6:18\n    |\n LL |     type Assoc = u8;"}, {"sha": "6d77ab01e83faa931a2fa3e997d694c6350f9301", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<TakeWhile<&mut std::vec::IntoIter<u8>, [\n LL |         .cloned()\n    |          ^^^^^^ expected reference, found `u8`\n    |\n-   = note: expected reference `&_`\n-                   found type `u8`\n+   = note: expected type `&_`\n+              found type `u8`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "5b86981ec78daed82f22af1e1ab056ab211b401e", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |                                    ^^^^^^ expected reference, found tuple\n    |\n-   = note: expected reference `&_`\n-                  found tuple `(&_, &_)`\n+   = note: expected type `&_`\n+              found type `(&_, &_)`\n note: required by a bound in `cloned`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -18,8 +18,8 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n+   = note: expected type `(&_, &_)`\n+              found type `&_`\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n "}, {"sha": "73fca41b0c0e7c91c522cfda11395be96059409a", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n    |\n-note: expected this to be `()`\n+note: expected `()`, found `&()`\n   --> $DIR/issue-39970.rs:10:20\n    |\n LL |     type Element = &'a ();"}, {"sha": "1c7c311b5d2e2ff50cb506629214b51c53b063a0", "filename": "src/test/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `<Rc<Apple> as Deref>::Target == Rc<Apple>\n LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n    |                             ^^ expected struct `Apple`, found struct `Rc`\n    |\n-   = note: expected struct `Apple`\n-              found struct `Rc<Apple>`\n+   = note: expected type `Apple`\n+              found type `Rc<Apple>`\n    = note: required because of the requirements on the impl of `PartialEq<Pin<Rc<Apple>>>` for `Pin<Apple>`\n \n error: aborting due to previous error"}, {"sha": "24d45a3062310d5e4c93852b529e23628e8b1916", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -8,8 +8,8 @@ LL | |         panic!(\"Can't connect to server.\");\n LL | |     }) as Box<dyn FnMut()>);\n    | |______^ expected `()`, found `!`\n    |\n-   = note: expected unit type `()`\n-                   found type `!`\n+   = note: expected type `()`\n+              found type `!`\n    = note: required for the cast to the object type `dyn FnMut()`\n \n error: aborting due to previous error"}, {"sha": "bf7691e7f1b384d527a54b2cfa138b5a9a570c9f", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n LL |     is_obj(x)\n    |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n    |\n-note: expected this to be `i64`\n+note: expected `i64`, found `i32`\n   --> $DIR/check-trait-object-bounds-5.rs:9:14\n    |\n LL |     type T = U;"}, {"sha": "016de72847df1d1be801daf038ba012060089ac4", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -4,7 +4,7 @@ error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n LL |     is_obj(x)\n    |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n    |\n-note: expected this to be `i64`\n+note: expected `i64`, found `i32`\n   --> $DIR/check-trait-object-bounds-6.rs:9:14\n    |\n LL |     type T = U;"}, {"sha": "860a371b086189fd90152d8a0c246af126072181", "filename": "src/test/ui/type-alias-impl-trait/issue-63355.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63355.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -1,18 +1,16 @@\n error[E0271]: type mismatch resolving `<() as Bar>::Foo == ()`\n   --> $DIR/issue-63355.rs:34:20\n    |\n-LL | pub type FooImpl = impl Foo;\n-   |                    -------- the found opaque type\n LL | pub type BarImpl = impl Bar<Foo = FooImpl>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Bar>::Foo == ()`\n    |\n-note: expected this to be `()`\n+note: expected `()`, found opaque type\n   --> $DIR/issue-63355.rs:24:16\n    |\n LL |     type Foo = FooImpl;\n    |                ^^^^^^^\n-   = note: expected unit type `()`\n-            found opaque type `impl Foo`\n+   = note: expected type `()`\n+              found type `impl Foo`\n \n error: aborting due to previous error\n "}, {"sha": "56e6a5420dd304a927197643151e1e06c0aaa268", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654e4d6f4abd794707c9e4e046b2e7f852e642f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=c654e4d6f4abd794707c9e4e046b2e7f852e642f", "patch": "@@ -3,17 +3,9 @@ error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as\n    |\n LL | type G<'a, T> = impl Future<Output = ()>;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n-...\n-LL |         async move { self.f().await }\n-   |                    ------------------ the found `async` block\n    |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note:    expected unit type `()`\n-           found associated type `<impl Future<Output = [async output]> as Future>::Output`\n+   = note: expected type `()`\n+              found type `<impl Future<Output = [async output]> as Future>::Output`\n    = help: consider constraining the associated type `<impl Future<Output = [async output]> as Future>::Output` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}]}