{"sha": "b62b1b68edcdf23a70cb12f31403c80e97f13634", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MmIxYjY4ZWRjZGYyM2E3MGNiMTJmMzE0MDNjODBlOTdmMTM2MzQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-10-10T08:06:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-10T08:06:14Z"}, "message": "Merge pull request #2126 from camsteffen/split-tests\n\nSplit some UI tests", "tree": {"sha": "f2e0c2b78ddbf032eec19f288231c8319f1647f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2e0c2b78ddbf032eec19f288231c8319f1647f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62b1b68edcdf23a70cb12f31403c80e97f13634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62b1b68edcdf23a70cb12f31403c80e97f13634", "html_url": "https://github.com/rust-lang/rust/commit/b62b1b68edcdf23a70cb12f31403c80e97f13634", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62b1b68edcdf23a70cb12f31403c80e97f13634/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408b5220a8c1df87f314e60b5089d2f0f2759941", "url": "https://api.github.com/repos/rust-lang/rust/commits/408b5220a8c1df87f314e60b5089d2f0f2759941", "html_url": "https://github.com/rust-lang/rust/commit/408b5220a8c1df87f314e60b5089d2f0f2759941"}, {"sha": "35882b09da379f63f39c4368e85ba6b3e0c57c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/35882b09da379f63f39c4368e85ba6b3e0c57c44", "html_url": "https://github.com/rust-lang/rust/commit/35882b09da379f63f39c4368e85ba6b3e0c57c44"}], "stats": {"total": 1443, "additions": 712, "deletions": 731}, "files": [{"sha": "8b7b0b66bc6a8cad4617bbbe7eea3ef16ada6ac0", "filename": "tests/ui/cstring.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,8 @@\n+fn main() {}\n+\n+#[allow(result_unwrap_used)]\n+fn temporary_cstring() {\n+    use std::ffi::CString;\n+\n+    CString::new(\"foo\").unwrap().as_ptr();\n+}"}, {"sha": "ddb74ce9cac806b8005c41d083b7693cd15a72d7", "filename": "tests/ui/cstring.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,22 @@\n+error: function is never used: `temporary_cstring`\n+ --> $DIR/cstring.rs:4:1\n+  |\n+4 | fn temporary_cstring() {\n+  | ^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D dead-code` implied by `-D warnings`\n+\n+error: you are getting the inner pointer of a temporary `CString`\n+ --> $DIR/cstring.rs:7:5\n+  |\n+7 |     CString::new(\"foo\").unwrap().as_ptr();\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n+  = note: that pointer will be invalid outside this expression\n+help: assign the `CString` to a variable to extend its lifetime\n+ --> $DIR/cstring.rs:7:5\n+  |\n+7 |     CString::new(\"foo\").unwrap().as_ptr();\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "a10d4d18262050861274bd289e39bd5d8a41d46f", "filename": "tests/ui/get_unwrap.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,46 @@\n+#![allow(unused_mut)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+use std::iter::FromIterator;\n+\n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+}\n+\n+fn main() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    { // Test `get().unwrap()`\n+        let _ = boxed_slice.get(1).unwrap();\n+        let _ = some_slice.get(0).unwrap();\n+        let _ = some_vec.get(0).unwrap();\n+        let _ = some_vecdeque.get(0).unwrap();\n+        let _ = some_hashmap.get(&1).unwrap();\n+        let _ = some_btreemap.get(&1).unwrap();\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    { // Test `get_mut().unwrap()`\n+        *boxed_slice.get_mut(0).unwrap() = 1;\n+        *some_slice.get_mut(0).unwrap() = 1;\n+        *some_vec.get_mut(0).unwrap() = 1;\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+        // Check false positives\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+}"}, {"sha": "3724cbfc8521f5ca415ccd1a54eb46ff8eeae19c", "filename": "tests/ui/get_unwrap.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,62 @@\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:27:17\n+   |\n+27 |         let _ = boxed_slice.get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+   |\n+   = note: `-D get-unwrap` implied by `-D warnings`\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:28:17\n+   |\n+28 |         let _ = some_slice.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n+\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:29:17\n+   |\n+29 |         let _ = some_vec.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n+\n+error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:30:17\n+   |\n+30 |         let _ = some_vecdeque.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n+\n+error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:31:17\n+   |\n+31 |         let _ = some_hashmap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n+\n+error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:32:17\n+   |\n+32 |         let _ = some_btreemap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:37:10\n+   |\n+37 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:38:10\n+   |\n+38 |         *some_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:39:10\n+   |\n+39 |         *some_vec.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n+\n+error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:40:10\n+   |\n+40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n+"}, {"sha": "827d2182cab70db1a5b5d7362a507b2ff842cda3", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 233, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -189,15 +189,6 @@ impl IteratorFalsePositives {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-struct HasChars;\n-\n-impl HasChars {\n-    fn chars(self) -> std::str::Chars<'static> {\n-        \"HasChars\".chars()\n-    }\n-}\n-\n /// Checks implementation of `FILTER_NEXT` lint\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n@@ -358,232 +349,8 @@ fn iter_skip_next() {\n     let _ = foo.filter().skip(42).next();\n }\n \n-struct GetFalsePositive {\n-    arr: [u32; 3],\n-}\n-\n-impl GetFalsePositive {\n-    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n-    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n-}\n-\n-/// Checks implementation of `GET_UNWRAP` lint\n-fn get_unwrap() {\n-    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_slice = &mut [0, 1, 2, 3];\n-    let mut some_vec = vec![0, 1, 2, 3];\n-    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n-    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n-    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n-    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n-\n-    { // Test `get().unwrap()`\n-        let _ = boxed_slice.get(1).unwrap();\n-        let _ = some_slice.get(0).unwrap();\n-        let _ = some_vec.get(0).unwrap();\n-        let _ = some_vecdeque.get(0).unwrap();\n-        let _ = some_hashmap.get(&1).unwrap();\n-        let _ = some_btreemap.get(&1).unwrap();\n-        let _ = false_positive.get(0).unwrap();\n-    }\n-\n-    { // Test `get_mut().unwrap()`\n-        *boxed_slice.get_mut(0).unwrap() = 1;\n-        *some_slice.get_mut(0).unwrap() = 1;\n-        *some_vec.get_mut(0).unwrap() = 1;\n-        *some_vecdeque.get_mut(0).unwrap() = 1;\n-        // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n-    }\n-}\n-\n-\n #[allow(similar_names)]\n fn main() {\n-    use std::io;\n-\n     let opt = Some(0);\n     let _ = opt.unwrap();\n-\n-    let res: Result<i32, ()> = Ok(0);\n-    let _ = res.unwrap();\n-\n-    res.ok().expect(\"disaster!\");\n-    // the following should not warn, since `expect` isn't implemented unless\n-    // the error type implements `Debug`\n-    let res2: Result<i32, MyError> = Ok(0);\n-    res2.ok().expect(\"oh noes!\");\n-    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n-    res3.ok().expect(\"whoof\");\n-    let res4: Result<u32, io::Error> = Ok(0);\n-    res4.ok().expect(\"argh\");\n-    let res5: io::Result<u32> = Ok(0);\n-    res5.ok().expect(\"oops\");\n-    let res6: Result<u32, &str> = Ok(0);\n-    res6.ok().expect(\"meh\");\n-}\n-\n-struct MyError(()); // doesn't implement Debug\n-\n-#[derive(Debug)]\n-struct MyErrorWithParam<T> {\n-    x: T\n-}\n-\n-#[allow(unnecessary_operation)]\n-fn starts_with() {\n-    \"\".chars().next() == Some(' ');\n-    Some(' ') != \"\".chars().next();\n-}\n-\n-fn str_extend_chars() {\n-    let abc = \"abc\";\n-    let def = String::from(\"def\");\n-    let mut s = String::new();\n-\n-    s.push_str(abc);\n-    s.extend(abc.chars());\n-\n-    s.push_str(\"abc\");\n-    s.extend(\"abc\".chars());\n-\n-    s.push_str(&def);\n-    s.extend(def.chars());\n-\n-    s.extend(abc.chars().skip(1));\n-    s.extend(\"abc\".chars().skip(1));\n-    s.extend(['a', 'b', 'c'].iter());\n-\n-    let f = HasChars;\n-    s.extend(f.chars());\n-}\n-\n-fn clone_on_copy() {\n-    42.clone();\n-\n-    vec![1].clone(); // ok, not a Copy type\n-    Some(vec![1]).clone(); // ok, not a Copy type\n-    (&42).clone();\n-}\n-\n-fn clone_on_ref_ptr() {\n-    let rc = Rc::new(true);\n-    let arc = Arc::new(true);\n-\n-    let rcweak = Rc::downgrade(&rc);\n-    let arc_weak = Arc::downgrade(&arc);\n-\n-    rc.clone();\n-    Rc::clone(&rc);\n-\n-    arc.clone();\n-    Arc::clone(&arc);\n-\n-    rcweak.clone();\n-    rc::Weak::clone(&rcweak);\n-\n-    arc_weak.clone();\n-    sync::Weak::clone(&arc_weak);\n-\n-\n-}\n-\n-fn clone_on_copy_generic<T: Copy>(t: T) {\n-    t.clone();\n-\n-    Some(t).clone();\n-}\n-\n-fn clone_on_double_ref() {\n-    let x = vec![1];\n-    let y = &&x;\n-    let z: &Vec<_> = y.clone();\n-\n-    println!(\"{:p} {:p}\",*y, z);\n-}\n-\n-fn single_char_pattern() {\n-    let x = \"foo\";\n-    x.split(\"x\");\n-    x.split(\"xx\");\n-    x.split('x');\n-\n-    let y = \"x\";\n-    x.split(y);\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/rust-lang-nursery/rust-clippy/issues/650#issuecomment-184328984\n-    x.split(\"\u00df\");\n-    x.split(\"\u211d\");\n-    x.split(\"\ud83d\udca3\");\n-    // Can't use this lint for unicode code points which don't fit in a char\n-    x.split(\"\u2764\ufe0f\");\n-    x.contains(\"x\");\n-    x.starts_with(\"x\");\n-    x.ends_with(\"x\");\n-    x.find(\"x\");\n-    x.rfind(\"x\");\n-    x.rsplit(\"x\");\n-    x.split_terminator(\"x\");\n-    x.rsplit_terminator(\"x\");\n-    x.splitn(0, \"x\");\n-    x.rsplitn(0, \"x\");\n-    x.matches(\"x\");\n-    x.rmatches(\"x\");\n-    x.match_indices(\"x\");\n-    x.rmatch_indices(\"x\");\n-    x.trim_left_matches(\"x\");\n-    x.trim_right_matches(\"x\");\n-\n-    let h = HashSet::<String>::new();\n-    h.contains(\"X\"); // should not warn\n-}\n-\n-#[allow(result_unwrap_used)]\n-fn temporary_cstring() {\n-    use std::ffi::CString;\n-\n-    CString::new(\"foo\").unwrap().as_ptr();\n-}\n-\n-fn iter_clone_collect() {\n-    let v = [1,2,3,4,5];\n-    let v2 : Vec<isize> = v.iter().cloned().collect();\n-    let v3 : HashSet<isize> = v.iter().cloned().collect();\n-    let v4 : VecDeque<isize> = v.iter().cloned().collect();\n-}\n-\n-fn chars_cmp_with_unwrap() {\n-    let s = String::from(\"foo\");\n-    if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n-        // Nothing here\n-    }\n-    if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n-        // Nothing here\n-    }\n-    if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n-        // Nothing here\n-    }\n-    if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n-        // Nothing here\n-    }\n-    if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n-        // Nothing here\n-    }\n-    if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n-        // Nothing here\n-    }\n-}\n-\n-#[allow(unnecessary_operation)]\n-fn ends_with() {\n-    \"\".chars().last() == Some(' ');\n-    Some(' ') != \"\".chars().last();\n-    \"\".chars().next_back() == Some(' ');\n-    Some(' ') != \"\".chars().next_back();\n }"}, {"sha": "167ad8c768e389627b99fa09ade02af181149cb0", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 78, "deletions": 498, "changes": 576, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -214,654 +214,234 @@ error: unnecessary structure name repetition\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:206:13\n+   --> $DIR/methods.rs:197:13\n     |\n-206 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+197 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:209:13\n+   --> $DIR/methods.rs:200:13\n     |\n-209 |       let _ = v.iter().filter(|&x| {\n+200 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-210 | |                                 *x < 0\n-211 | |                             }\n-212 | |                    ).next();\n+201 | |                                 *x < 0\n+202 | |                             }\n+203 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:224:13\n+   --> $DIR/methods.rs:215:13\n     |\n-224 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+215 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:227:13\n+   --> $DIR/methods.rs:218:13\n     |\n-227 |       let _ = v.iter().find(|&x| {\n+218 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-228 | |                               *x < 0\n-229 | |                           }\n-230 | |                    ).is_some();\n+219 | |                               *x < 0\n+220 | |                           }\n+221 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:233:13\n+   --> $DIR/methods.rs:224:13\n     |\n-233 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+224 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:236:13\n+   --> $DIR/methods.rs:227:13\n     |\n-236 |       let _ = v.iter().position(|&x| {\n+227 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-237 | |                                   x < 0\n-238 | |                               }\n-239 | |                    ).is_some();\n+228 | |                                   x < 0\n+229 | |                               }\n+230 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:242:13\n+   --> $DIR/methods.rs:233:13\n     |\n-242 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+233 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:245:13\n+   --> $DIR/methods.rs:236:13\n     |\n-245 |       let _ = v.iter().rposition(|&x| {\n+236 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-246 | |                                    x < 0\n-247 | |                                }\n-248 | |                    ).is_some();\n+237 | |                                    x < 0\n+238 | |                                }\n+239 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:262:21\n+   --> $DIR/methods.rs:253:21\n     |\n-262 |         fn new() -> Foo { Foo }\n+253 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:280:5\n+   --> $DIR/methods.rs:271:5\n     |\n-280 |     with_constructor.unwrap_or(make());\n+271 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:283:5\n+   --> $DIR/methods.rs:274:5\n     |\n-283 |     with_new.unwrap_or(Vec::new());\n+274 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:286:5\n+   --> $DIR/methods.rs:277:5\n     |\n-286 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+277 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:289:5\n+   --> $DIR/methods.rs:280:5\n     |\n-289 |     with_err.unwrap_or(make());\n+280 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:292:5\n+   --> $DIR/methods.rs:283:5\n     |\n-292 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+283 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:295:5\n+   --> $DIR/methods.rs:286:5\n     |\n-295 |     with_default_trait.unwrap_or(Default::default());\n+286 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:298:5\n+   --> $DIR/methods.rs:289:5\n     |\n-298 |     with_default_type.unwrap_or(u64::default());\n+289 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:301:5\n+   --> $DIR/methods.rs:292:5\n     |\n-301 |     with_vec.unwrap_or(vec![]);\n+292 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:306:5\n+   --> $DIR/methods.rs:297:5\n     |\n-306 |     without_default.unwrap_or(Foo::new());\n+297 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:309:5\n+   --> $DIR/methods.rs:300:5\n     |\n-309 |     map.entry(42).or_insert(String::new());\n+300 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:312:5\n+   --> $DIR/methods.rs:303:5\n     |\n-312 |     btree.entry(42).or_insert(String::new());\n+303 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:315:13\n+   --> $DIR/methods.rs:306:13\n     |\n-315 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+306 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:326:23\n+   --> $DIR/methods.rs:317:23\n     |\n-326 |         let bad_vec = some_vec.iter().nth(3);\n+317 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:327:26\n+   --> $DIR/methods.rs:318:26\n     |\n-327 |         let bad_slice = &some_vec[..].iter().nth(3);\n+318 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:328:31\n+   --> $DIR/methods.rs:319:31\n     |\n-328 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+319 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:329:29\n+   --> $DIR/methods.rs:320:29\n     |\n-329 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+320 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:334:23\n+   --> $DIR/methods.rs:325:23\n     |\n-334 |         let bad_vec = some_vec.iter_mut().nth(3);\n+325 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:337:26\n+   --> $DIR/methods.rs:328:26\n     |\n-337 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+328 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:340:29\n+   --> $DIR/methods.rs:331:29\n     |\n-340 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+331 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:352:13\n+   --> $DIR/methods.rs:343:13\n     |\n-352 |     let _ = some_vec.iter().skip(42).next();\n+343 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:353:13\n+   --> $DIR/methods.rs:344:13\n     |\n-353 |     let _ = some_vec.iter().cycle().skip(42).next();\n+344 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:354:13\n+   --> $DIR/methods.rs:345:13\n     |\n-354 |     let _ = (1..10).skip(10).next();\n+345 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:355:14\n+   --> $DIR/methods.rs:346:14\n     |\n-355 |     let _ = &some_vec[..].iter().skip(3).next();\n+346 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:381:17\n-    |\n-381 |         let _ = boxed_slice.get(1).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n-    |\n-    = note: `-D get-unwrap` implied by `-D warnings`\n-\n-error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:382:17\n-    |\n-382 |         let _ = some_slice.get(0).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n-\n-error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:383:17\n-    |\n-383 |         let _ = some_vec.get(0).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n-\n-error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:384:17\n-    |\n-384 |         let _ = some_vecdeque.get(0).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n-\n-error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:385:17\n-    |\n-385 |         let _ = some_hashmap.get(&1).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n-\n-error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:386:17\n-    |\n-386 |         let _ = some_btreemap.get(&1).unwrap();\n-    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n-\n-error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:391:10\n-    |\n-391 |         *boxed_slice.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n-\n-error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:392:10\n-    |\n-392 |         *some_slice.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n-\n-error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:393:10\n-    |\n-393 |         *some_vec.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n-\n-error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-   --> $DIR/methods.rs:394:10\n-    |\n-394 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n-    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n-\n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:408:13\n+   --> $DIR/methods.rs:355:13\n     |\n-408 |     let _ = opt.unwrap();\n+355 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`\n \n-error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:411:13\n-    |\n-411 |     let _ = res.unwrap();\n-    |             ^^^^^^^^^^^^\n-    |\n-    = note: `-D result-unwrap-used` implied by `-D warnings`\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:413:5\n-    |\n-413 |     res.ok().expect(\"disaster!\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D ok-expect` implied by `-D warnings`\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:419:5\n-    |\n-419 |     res3.ok().expect(\"whoof\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:421:5\n-    |\n-421 |     res4.ok().expect(\"argh\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:423:5\n-    |\n-423 |     res5.ok().expect(\"oops\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n-   --> $DIR/methods.rs:425:5\n-    |\n-425 |     res6.ok().expect(\"meh\");\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:437:5\n-    |\n-437 |     \"\".chars().next() == Some(' ');\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".starts_with(' ')`\n-    |\n-    = note: `-D chars-next-cmp` implied by `-D warnings`\n-\n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:438:5\n-    |\n-438 |     Some(' ') != \"\".chars().next();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".starts_with(' ')`\n-\n-error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:447:5\n-    |\n-447 |     s.extend(abc.chars());\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n-    |\n-    = note: `-D string-extend-chars` implied by `-D warnings`\n-\n-error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:450:5\n-    |\n-450 |     s.extend(\"abc\".chars());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n-\n-error: calling `.extend(_.chars())`\n-   --> $DIR/methods.rs:453:5\n-    |\n-453 |     s.extend(def.chars());\n-    |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:464:5\n-    |\n-464 |     42.clone();\n-    |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n-    |\n-    = note: `-D clone-on-copy` implied by `-D warnings`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:468:5\n-    |\n-468 |     (&42).clone();\n-    |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:478:5\n-    |\n-478 |     rc.clone();\n-    |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n-    |\n-    = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:481:5\n-    |\n-481 |     arc.clone();\n-    |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:484:5\n-    |\n-484 |     rcweak.clone();\n-    |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n-\n-error: using '.clone()' on a ref-counted pointer\n-   --> $DIR/methods.rs:487:5\n-    |\n-487 |     arc_weak.clone();\n-    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:494:5\n-    |\n-494 |     t.clone();\n-    |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n-\n-error: using `clone` on a `Copy` type\n-   --> $DIR/methods.rs:496:5\n-    |\n-496 |     Some(t).clone();\n-    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n-\n-error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n-   --> $DIR/methods.rs:502:22\n-    |\n-502 |     let z: &Vec<_> = y.clone();\n-    |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n-    |\n-    = note: `-D clone-double-ref` implied by `-D warnings`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:509:13\n-    |\n-509 |     x.split(\"x\");\n-    |     --------^^^- help: try using a char instead: `x.split('x')`\n-    |\n-    = note: `-D single-char-pattern` implied by `-D warnings`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:526:16\n-    |\n-526 |     x.contains(\"x\");\n-    |     -----------^^^- help: try using a char instead: `x.contains('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:527:19\n-    |\n-527 |     x.starts_with(\"x\");\n-    |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:528:17\n-    |\n-528 |     x.ends_with(\"x\");\n-    |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:529:12\n-    |\n-529 |     x.find(\"x\");\n-    |     -------^^^- help: try using a char instead: `x.find('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:530:13\n-    |\n-530 |     x.rfind(\"x\");\n-    |     --------^^^- help: try using a char instead: `x.rfind('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:531:14\n-    |\n-531 |     x.rsplit(\"x\");\n-    |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:532:24\n-    |\n-532 |     x.split_terminator(\"x\");\n-    |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:533:25\n-    |\n-533 |     x.rsplit_terminator(\"x\");\n-    |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:534:17\n-    |\n-534 |     x.splitn(0, \"x\");\n-    |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:535:18\n-    |\n-535 |     x.rsplitn(0, \"x\");\n-    |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:536:15\n-    |\n-536 |     x.matches(\"x\");\n-    |     ----------^^^- help: try using a char instead: `x.matches('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:537:16\n-    |\n-537 |     x.rmatches(\"x\");\n-    |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:538:21\n-    |\n-538 |     x.match_indices(\"x\");\n-    |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:539:22\n-    |\n-539 |     x.rmatch_indices(\"x\");\n-    |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:540:25\n-    |\n-540 |     x.trim_left_matches(\"x\");\n-    |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n-\n-error: single-character string constant used as pattern\n-   --> $DIR/methods.rs:541:26\n-    |\n-541 |     x.trim_right_matches(\"x\");\n-    |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n-\n-error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:551:5\n-    |\n-551 |     CString::new(\"foo\").unwrap().as_ptr();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n-    = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:551:5\n-    |\n-551 |     CString::new(\"foo\").unwrap().as_ptr();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-   --> $DIR/methods.rs:556:27\n-    |\n-556 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n-    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D iter-cloned-collect` implied by `-D warnings`\n-\n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:563:8\n-    |\n-563 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.starts_with('f')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:563:8\n-    |\n-563 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:566:8\n-    |\n-566 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n-    |\n-    = note: `-D chars-last-cmp` implied by `-D warnings`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:566:8\n-    |\n-566 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:569:8\n-    |\n-569 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:569:8\n-    |\n-569 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `starts_with` method\n-   --> $DIR/methods.rs:572:8\n-    |\n-572 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.starts_with('f')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:572:8\n-    |\n-572 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:575:8\n-    |\n-575 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:575:8\n-    |\n-575 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:578:8\n-    |\n-578 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:578:8\n-    |\n-578 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n-    |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:585:5\n-    |\n-585 |     \"\".chars().last() == Some(' ');\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:586:5\n-    |\n-586 |     Some(' ') != \"\".chars().last();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:587:5\n-    |\n-587 |     \"\".chars().next_back() == Some(' ');\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n-\n-error: you should use the `ends_with` method\n-   --> $DIR/methods.rs:588:5\n-    |\n-588 |     Some(' ') != \"\".chars().next_back();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n-"}, {"sha": "4341e8ea70b883455301d3680eebd2690929da01", "filename": "tests/ui/ok_expect.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,27 @@\n+use std::io;\n+\n+struct MyError(()); // doesn't implement Debug\n+\n+#[derive(Debug)]\n+struct MyErrorWithParam<T> {\n+    x: T\n+}\n+\n+fn main() {\n+    let res: Result<i32, ()> = Ok(0);\n+    let _ = res.unwrap();\n+\n+    res.ok().expect(\"disaster!\");\n+    // the following should not warn, since `expect` isn't implemented unless\n+    // the error type implements `Debug`\n+    let res2: Result<i32, MyError> = Ok(0);\n+    res2.ok().expect(\"oh noes!\");\n+    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n+    res3.ok().expect(\"whoof\");\n+    let res4: Result<u32, io::Error> = Ok(0);\n+    res4.ok().expect(\"argh\");\n+    let res5: io::Result<u32> = Ok(0);\n+    res5.ok().expect(\"oops\");\n+    let res6: Result<u32, &str> = Ok(0);\n+    res6.ok().expect(\"meh\");\n+}"}, {"sha": "79b09b3fa8afc44b897fcc298574e6c032973a48", "filename": "tests/ui/ok_expect.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,32 @@\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:14:5\n+   |\n+14 |     res.ok().expect(\"disaster!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D ok-expect` implied by `-D warnings`\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:20:5\n+   |\n+20 |     res3.ok().expect(\"whoof\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:22:5\n+   |\n+22 |     res4.ok().expect(\"argh\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:24:5\n+   |\n+24 |     res5.ok().expect(\"oops\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+  --> $DIR/ok_expect.rs:26:5\n+   |\n+26 |     res6.ok().expect(\"meh\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "948a8ff0e41e6e5f32177a1d190c4b13bcd0230c", "filename": "tests/ui/single_char_pattern.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,41 @@\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let x = \"foo\";\n+    x.split(\"x\");\n+    x.split(\"xx\");\n+    x.split('x');\n+\n+    let y = \"x\";\n+    x.split(y);\n+    // Not yet testing for multi-byte characters\n+    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n+    // should have done this but produced an ICE\n+    //\n+    // We may not want to suggest changing these anyway\n+    // See: https://github.com/rust-lang-nursery/rust-clippy/issues/650#issuecomment-184328984\n+    x.split(\"\u00df\");\n+    x.split(\"\u211d\");\n+    x.split(\"\ud83d\udca3\");\n+    // Can't use this lint for unicode code points which don't fit in a char\n+    x.split(\"\u2764\ufe0f\");\n+    x.contains(\"x\");\n+    x.starts_with(\"x\");\n+    x.ends_with(\"x\");\n+    x.find(\"x\");\n+    x.rfind(\"x\");\n+    x.rsplit(\"x\");\n+    x.split_terminator(\"x\");\n+    x.rsplit_terminator(\"x\");\n+    x.splitn(0, \"x\");\n+    x.rsplitn(0, \"x\");\n+    x.matches(\"x\");\n+    x.rmatches(\"x\");\n+    x.match_indices(\"x\");\n+    x.rmatch_indices(\"x\");\n+    x.trim_left_matches(\"x\");\n+    x.trim_right_matches(\"x\");\n+\n+    let h = HashSet::<String>::new();\n+    h.contains(\"X\"); // should not warn\n+}"}, {"sha": "d5f21f210a3b20aba253bfb696c1abfdfa56103a", "filename": "tests/ui/single_char_pattern.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,104 @@\n+error: single-character string constant used as pattern\n+ --> $DIR/single_char_pattern.rs:5:13\n+  |\n+5 |     x.split(\"x\");\n+  |     --------^^^- help: try using a char instead: `x.split('x')`\n+  |\n+  = note: `-D single-char-pattern` implied by `-D warnings`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:22:16\n+   |\n+22 |     x.contains(\"x\");\n+   |     -----------^^^- help: try using a char instead: `x.contains('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:23:19\n+   |\n+23 |     x.starts_with(\"x\");\n+   |     --------------^^^- help: try using a char instead: `x.starts_with('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:24:17\n+   |\n+24 |     x.ends_with(\"x\");\n+   |     ------------^^^- help: try using a char instead: `x.ends_with('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:25:12\n+   |\n+25 |     x.find(\"x\");\n+   |     -------^^^- help: try using a char instead: `x.find('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:26:13\n+   |\n+26 |     x.rfind(\"x\");\n+   |     --------^^^- help: try using a char instead: `x.rfind('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:27:14\n+   |\n+27 |     x.rsplit(\"x\");\n+   |     ---------^^^- help: try using a char instead: `x.rsplit('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:28:24\n+   |\n+28 |     x.split_terminator(\"x\");\n+   |     -------------------^^^- help: try using a char instead: `x.split_terminator('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:29:25\n+   |\n+29 |     x.rsplit_terminator(\"x\");\n+   |     --------------------^^^- help: try using a char instead: `x.rsplit_terminator('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:30:17\n+   |\n+30 |     x.splitn(0, \"x\");\n+   |     ------------^^^- help: try using a char instead: `x.splitn(0, 'x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:31:18\n+   |\n+31 |     x.rsplitn(0, \"x\");\n+   |     -------------^^^- help: try using a char instead: `x.rsplitn(0, 'x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:32:15\n+   |\n+32 |     x.matches(\"x\");\n+   |     ----------^^^- help: try using a char instead: `x.matches('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:33:16\n+   |\n+33 |     x.rmatches(\"x\");\n+   |     -----------^^^- help: try using a char instead: `x.rmatches('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:34:21\n+   |\n+34 |     x.match_indices(\"x\");\n+   |     ----------------^^^- help: try using a char instead: `x.match_indices('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:35:22\n+   |\n+35 |     x.rmatch_indices(\"x\");\n+   |     -----------------^^^- help: try using a char instead: `x.rmatch_indices('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:36:25\n+   |\n+36 |     x.trim_left_matches(\"x\");\n+   |     --------------------^^^- help: try using a char instead: `x.trim_left_matches('x')`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:37:26\n+   |\n+37 |     x.trim_right_matches(\"x\");\n+   |     ---------------------^^^- help: try using a char instead: `x.trim_right_matches('x')`\n+"}, {"sha": "d47c8a5b076833fa16606f1f3226b834d4dee325", "filename": "tests/ui/starts_ends_with.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstarts_ends_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstarts_ends_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,39 @@\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+#[allow(unnecessary_operation)]\n+fn starts_with() {\n+    \"\".chars().next() == Some(' ');\n+    Some(' ') != \"\".chars().next();\n+}\n+\n+fn chars_cmp_with_unwrap() {\n+    let s = String::from(\"foo\");\n+    if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+        // Nothing here\n+    }\n+}\n+\n+#[allow(unnecessary_operation)]\n+fn ends_with() {\n+    \"\".chars().last() == Some(' ');\n+    Some(' ') != \"\".chars().last();\n+    \"\".chars().next_back() == Some(' ');\n+    Some(' ') != \"\".chars().next_back();\n+}"}, {"sha": "c67cc8a86ea5b7f555edf0f3116648c415342a69", "filename": "tests/ui/starts_ends_with.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstarts_ends_with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstarts_ends_with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,76 @@\n+error: you should use the `starts_with` method\n+ --> $DIR/starts_ends_with.rs:7:5\n+  |\n+7 |     \"\".chars().next() == Some(' ');\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".starts_with(' ')`\n+  |\n+  = note: `-D chars-next-cmp` implied by `-D warnings`\n+\n+error: you should use the `starts_with` method\n+ --> $DIR/starts_ends_with.rs:8:5\n+  |\n+8 |     Some(' ') != \"\".chars().next();\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".starts_with(' ')`\n+\n+error: you should use the `starts_with` method\n+  --> $DIR/starts_ends_with.rs:13:8\n+   |\n+13 |     if s.chars().next().unwrap() == 'f' { // s.starts_with('f')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.starts_with('f')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:16:8\n+   |\n+16 |     if s.chars().next_back().unwrap() == 'o' { // s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n+   |\n+   = note: `-D chars-last-cmp` implied by `-D warnings`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:19:8\n+   |\n+19 |     if s.chars().last().unwrap() == 'o' { // s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n+\n+error: you should use the `starts_with` method\n+  --> $DIR/starts_ends_with.rs:22:8\n+   |\n+22 |     if s.chars().next().unwrap() != 'f' { // !s.starts_with('f')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.starts_with('f')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:25:8\n+   |\n+25 |     if s.chars().next_back().unwrap() != 'o' { // !s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:28:8\n+   |\n+28 |     if s.chars().last().unwrap() != 'o' { // !s.ends_with('o')\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:35:5\n+   |\n+35 |     \"\".chars().last() == Some(' ');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:36:5\n+   |\n+36 |     Some(' ') != \"\".chars().last();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:37:5\n+   |\n+37 |     \"\".chars().next_back() == Some(' ');\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n+\n+error: you should use the `ends_with` method\n+  --> $DIR/starts_ends_with.rs:38:5\n+   |\n+38 |     Some(' ') != \"\".chars().next_back();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n+"}, {"sha": "d99adb19f892fdec95fad3addaf894268842d5e4", "filename": "tests/ui/string_extend.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstring_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstring_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,30 @@\n+#[derive(Copy, Clone)]\n+struct HasChars;\n+\n+impl HasChars {\n+    fn chars(self) -> std::str::Chars<'static> {\n+        \"HasChars\".chars()\n+    }\n+}\n+\n+fn main() {\n+    let abc = \"abc\";\n+    let def = String::from(\"def\");\n+    let mut s = String::new();\n+\n+    s.push_str(abc);\n+    s.extend(abc.chars());\n+\n+    s.push_str(\"abc\");\n+    s.extend(\"abc\".chars());\n+\n+    s.push_str(&def);\n+    s.extend(def.chars());\n+\n+    s.extend(abc.chars().skip(1));\n+    s.extend(\"abc\".chars().skip(1));\n+    s.extend(['a', 'b', 'c'].iter());\n+\n+    let f = HasChars;\n+    s.extend(f.chars());\n+}"}, {"sha": "1f6d9400743e16ae36e63d1477c27def6516b475", "filename": "tests/ui/string_extend.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstring_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Fstring_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_extend.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,20 @@\n+error: calling `.extend(_.chars())`\n+  --> $DIR/string_extend.rs:16:5\n+   |\n+16 |     s.extend(abc.chars());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(abc)`\n+   |\n+   = note: `-D string-extend-chars` implied by `-D warnings`\n+\n+error: calling `.extend(_.chars())`\n+  --> $DIR/string_extend.rs:19:5\n+   |\n+19 |     s.extend(\"abc\".chars());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(\"abc\")`\n+\n+error: calling `.extend(_.chars())`\n+  --> $DIR/string_extend.rs:22:5\n+   |\n+22 |     s.extend(def.chars());\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n+"}, {"sha": "f33def9eb4ef65811e2bb97082cbf6986ea39382", "filename": "tests/ui/unnecessary_clone.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,59 @@\n+#![allow(unused)]\n+\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+use std::rc::{self, Rc};\n+use std::sync::{self, Arc};\n+\n+fn main() {}\n+\n+fn clone_on_copy() {\n+    42.clone();\n+\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone();\n+}\n+\n+fn clone_on_ref_ptr() {\n+    let rc = Rc::new(true);\n+    let arc = Arc::new(true);\n+\n+    let rcweak = Rc::downgrade(&rc);\n+    let arc_weak = Arc::downgrade(&arc);\n+\n+    rc.clone();\n+    Rc::clone(&rc);\n+\n+    arc.clone();\n+    Arc::clone(&arc);\n+\n+    rcweak.clone();\n+    rc::Weak::clone(&rcweak);\n+\n+    arc_weak.clone();\n+    sync::Weak::clone(&arc_weak);\n+\n+\n+}\n+\n+fn clone_on_copy_generic<T: Copy>(t: T) {\n+    t.clone();\n+\n+    Some(t).clone();\n+}\n+\n+fn clone_on_double_ref() {\n+    let x = vec![1];\n+    let y = &&x;\n+    let z: &Vec<_> = y.clone();\n+\n+    println!(\"{:p} {:p}\",*y, z);\n+}\n+\n+fn iter_clone_collect() {\n+    let v = [1,2,3,4,5];\n+    let v2 : Vec<isize> = v.iter().cloned().collect();\n+    let v3 : HashSet<isize> = v.iter().cloned().collect();\n+    let v4 : VecDeque<isize> = v.iter().cloned().collect();\n+}"}, {"sha": "17263756980a2855d9eee308e734c71ce52f8ae8", "filename": "tests/ui/unnecessary_clone.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b62b1b68edcdf23a70cb12f31403c80e97f13634/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=b62b1b68edcdf23a70cb12f31403c80e97f13634", "patch": "@@ -0,0 +1,68 @@\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:11:5\n+   |\n+11 |     42.clone();\n+   |     ^^^^^^^^^^ help: try removing the `clone` call: `42`\n+   |\n+   = note: `-D clone-on-copy` implied by `-D warnings`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:15:5\n+   |\n+15 |     (&42).clone();\n+   |     ^^^^^^^^^^^^^ help: try dereferencing it: `*(&42)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:25:5\n+   |\n+25 |     rc.clone();\n+   |     ^^^^^^^^^^ help: try this: `Rc::clone(&rc)`\n+   |\n+   = note: `-D clone-on-ref-ptr` implied by `-D warnings`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:28:5\n+   |\n+28 |     arc.clone();\n+   |     ^^^^^^^^^^^ help: try this: `Arc::clone(&arc)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:31:5\n+   |\n+31 |     rcweak.clone();\n+   |     ^^^^^^^^^^^^^^ help: try this: `Weak::clone(&rcweak)`\n+\n+error: using '.clone()' on a ref-counted pointer\n+  --> $DIR/unnecessary_clone.rs:34:5\n+   |\n+34 |     arc_weak.clone();\n+   |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::clone(&arc_weak)`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:41:5\n+   |\n+41 |     t.clone();\n+   |     ^^^^^^^^^ help: try removing the `clone` call: `t`\n+\n+error: using `clone` on a `Copy` type\n+  --> $DIR/unnecessary_clone.rs:43:5\n+   |\n+43 |     Some(t).clone();\n+   |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n+\n+error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n+  --> $DIR/unnecessary_clone.rs:49:22\n+   |\n+49 |     let z: &Vec<_> = y.clone();\n+   |                      ^^^^^^^^^ help: try dereferencing it: `(*y).clone()`\n+   |\n+   = note: `-D clone-double-ref` implied by `-D warnings`\n+\n+error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/unnecessary_clone.rs:56:27\n+   |\n+56 |     let v2 : Vec<isize> = v.iter().cloned().collect();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D iter-cloned-collect` implied by `-D warnings`\n+"}]}