{"sha": "a3031e34f9db46f172d955cec607c6f4ef226ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDMxZTM0ZjlkYjQ2ZjE3MmQ5NTVjZWM2MDdjNmY0ZWYyMjZhYjQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-22T14:42:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:51:45Z"}, "message": "Add a `BLACKLISTED_NAME` lint", "tree": {"sha": "06488f1d5e0b347d0625be38e20d45059efbbea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06488f1d5e0b347d0625be38e20d45059efbbea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3031e34f9db46f172d955cec607c6f4ef226ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3031e34f9db46f172d955cec607c6f4ef226ab4", "html_url": "https://github.com/rust-lang/rust/commit/a3031e34f9db46f172d955cec607c6f4ef226ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3031e34f9db46f172d955cec607c6f4ef226ab4/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232710cd4312abce7476de2baa21b943a9763eb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/232710cd4312abce7476de2baa21b943a9763eb4", "html_url": "https://github.com/rust-lang/rust/commit/232710cd4312abce7476de2baa21b943a9763eb4"}], "stats": {"total": 125, "additions": 115, "deletions": 10}, "files": [{"sha": "1b18a62f7a4a497795f3dc2be132c0febcd87053", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -11,14 +11,15 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to link with clippy-service](#link-with-clippy-service)\n \n ##Lints\n-There are 134 lints included in this crate:\n+There are 135 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n [absurd_extreme_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_extreme_comparisons)             | warn    | a comparison involving a maximum or minimum value involves a case that is always true or always false\n [almost_swapped](https://github.com/Manishearth/rust-clippy/wiki#almost_swapped)                                     | warn    | `foo = bar; bar = foo` sequence\n [approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n [bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+[blacklisted_name](https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name)                                 | warn    | usage of a blacklisted/placeholder name\n [block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)             | warn    | braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\n [block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)             | warn    | avoid complex blocks in conditions, instead move the block higher and bind it with 'let'; e.g: `if { let x = true; x } ...`\n [bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                   | warn    | comparing a variable to a boolean, e.g. `if x == true`"}, {"sha": "2d62cc44d2643097b68306496e162fec5406ec80", "filename": "src/blacklisted_name.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/src%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/src%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblacklisted_name.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -0,0 +1,45 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::span_lint;\n+\n+/// **What it does:** This lints about usage of blacklisted names.\n+///\n+/// **Why is this bad?** These names are usually placeholder names and should be avoided.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `let foo = 3.14;`\n+declare_lint! {\n+    pub BLACKLISTED_NAME,\n+    Warn,\n+    \"usage of a blacklisted/placeholder name\"\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct BlackListedName {\n+    blacklist: Vec<String>,\n+}\n+\n+impl BlackListedName {\n+    pub fn new(blacklist: Vec<String>) -> BlackListedName {\n+        BlackListedName {\n+            blacklist: blacklist\n+        }\n+    }\n+}\n+\n+impl LintPass for BlackListedName {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(BLACKLISTED_NAME)\n+    }\n+}\n+\n+impl LateLintPass for BlackListedName {\n+    fn check_pat(&mut self, cx: &LateContext, pat: &Pat) {\n+        if let PatKind::Ident(_, ref ident, _) = pat.node {\n+            if self.blacklist.iter().any(|s| s == &*ident.node.name.as_str()) {\n+                span_lint(cx, BLACKLISTED_NAME, pat.span, &format!(\"use of a blacklisted/placeholder name `{}`\", ident.node.name));\n+            }\n+        }\n+    }\n+}"}, {"sha": "66ae815d7e00c91c2faedda3409d7113be89337a", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -48,6 +48,7 @@ pub mod approx_const;\n pub mod array_indexing;\n pub mod attrs;\n pub mod bit_mask;\n+pub mod blacklisted_name;\n pub mod block_in_if_condition;\n pub mod collapsible_if;\n pub mod copies;\n@@ -204,6 +205,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n+    reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -236,6 +238,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         attrs::INLINE_ALWAYS,\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,\n+        blacklisted_name::BLACKLISTED_NAME,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,"}, {"sha": "efcb810a30ee0be7eae3d91340f8f088173c4653", "filename": "tests/compile-fail/blacklisted_name.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblacklisted_name.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -0,0 +1,26 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![allow(single_match)]\n+#![allow(unused_variables)]\n+#![deny(blacklisted_name)]\n+\n+fn test(foo: ()) {} //~ERROR use of a blacklisted/placeholder name `foo`\n+\n+fn main() {\n+    let foo = 42; //~ERROR use of a blacklisted/placeholder name `foo`\n+    let bar = 42; //~ERROR use of a blacklisted/placeholder name `bar`\n+    let baz = 42; //~ERROR use of a blacklisted/placeholder name `baz`\n+\n+    let barb = 42;\n+    let barbaric = 42;\n+\n+    match (42, Some(1337), Some(0)) {\n+        (foo, Some(bar), baz @ Some(_)) => (),\n+        //~^ ERROR use of a blacklisted/placeholder name `foo`\n+        //~| ERROR use of a blacklisted/placeholder name `bar`\n+        //~| ERROR use of a blacklisted/placeholder name `baz`\n+        _ => (),\n+    }\n+}"}, {"sha": "071945a81b23c5d804780b54fc9e7042bed24b1a", "filename": "tests/compile-fail/box_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbox_vec.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -3,6 +3,7 @@\n \n #![deny(clippy)]\n #![allow(boxed_local)]\n+#![allow(blacklisted_name)]\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {"}, {"sha": "b7e29eeef1f7f8ec1fd3716bd34fcc55a55fbaf0", "filename": "tests/compile-fail/conf_french_blacklisted_name.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -0,0 +1,26 @@\n+#![feature(plugin)]\n+#![plugin(clippy(conf_file=\"./tests/compile-fail/conf_french_blacklisted_name.toml\"))]\n+\n+#![allow(dead_code)]\n+#![allow(single_match)]\n+#![allow(unused_variables)]\n+#![deny(blacklisted_name)]\n+\n+fn test(toto: ()) {} //~ERROR use of a blacklisted/placeholder name `toto`\n+\n+fn main() {\n+    let toto = 42; //~ERROR use of a blacklisted/placeholder name `toto`\n+    let tata = 42; //~ERROR use of a blacklisted/placeholder name `tata`\n+    let titi = 42; //~ERROR use of a blacklisted/placeholder name `titi`\n+\n+    let tatab = 42;\n+    let tatatataic = 42;\n+\n+    match (42, Some(1337), Some(0)) {\n+        (toto, Some(tata), titi @ Some(_)) => (),\n+        //~^ ERROR use of a blacklisted/placeholder name `toto`\n+        //~| ERROR use of a blacklisted/placeholder name `tata`\n+        //~| ERROR use of a blacklisted/placeholder name `titi`\n+        _ => (),\n+    }\n+}"}, {"sha": "6abe5a3bbc2737feba84d51919176142eb8c7fd4", "filename": "tests/compile-fail/conf_french_blacklisted_name.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.toml?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -0,0 +1 @@\n+blacklisted-names = [\"toto\", \"tata\", \"titi\"]"}, {"sha": "66457e77f476422104b577461ae664150f7fa099", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -6,6 +6,7 @@\n #![allow(needless_return)]\n #![allow(unused_variables)]\n #![allow(cyclomatic_complexity)]\n+#![allow(blacklisted_name)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }"}, {"sha": "e7919619121297f353abfaad2983f7246d6d1ee3", "filename": "tests/compile-fail/dlist.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdlist.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -6,8 +6,7 @@\n extern crate collections;\n use collections::linked_list::LinkedList;\n \n-pub fn test(foo: LinkedList<u8>) {  //~ ERROR I see you're using a LinkedList!\n-    println!(\"{:?}\", foo)\n+pub fn test(_: LinkedList<u8>) {  //~ ERROR I see you're using a LinkedList!\n }\n \n fn main(){"}, {"sha": "344016a3b909d53a4cd341e20445a756e91a50cf", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n-#![allow(unused, print_stdout, non_ascii_literal, new_without_default)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "0bb59a318b8349a91ec84f884a8df4e8b2b48fc4", "filename": "tests/compile-fail/mut_reference.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_reference.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -20,8 +20,8 @@ impl MyStruct {\n fn main() {\n     // Functions\n     takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n-    let foo: fn(&i32) = takes_an_immutable_reference;\n-    foo(&mut 42); //~ERROR The function/method \"foo\" doesn't need a mutable reference\n+    let as_ptr: fn(&i32) = takes_an_immutable_reference;\n+    as_ptr(&mut 42); //~ERROR The function/method \"as_ptr\" doesn't need a mutable reference\n \n     // Methods\n     let my_struct = MyStruct;\n@@ -32,12 +32,12 @@ fn main() {\n \n     // Functions\n     takes_an_immutable_reference(&42);\n-    let foo: fn(&i32) = takes_an_immutable_reference;\n-    foo(&42);\n+    let as_ptr: fn(&i32) = takes_an_immutable_reference;\n+    as_ptr(&42);\n \n     takes_a_mutable_reference(&mut 42);\n-    let foo: fn(&mut i32) = takes_a_mutable_reference;\n-    foo(&mut 42);\n+    let as_ptr: fn(&mut i32) = takes_a_mutable_reference;\n+    as_ptr(&mut 42);\n \n     let a = &mut 42;\n     takes_an_immutable_reference(a);"}, {"sha": "6bf4324e623756a825ee48ca3b60d6fb504f58c0", "filename": "tests/compile-fail/used_underscore_binding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3031e34f9db46f172d955cec607c6f4ef226ab4/tests%2Fcompile-fail%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fused_underscore_binding.rs?ref=a3031e34f9db46f172d955cec607c6f4ef226ab4", "patch": "@@ -2,6 +2,8 @@\n #![plugin(clippy)]\n #![deny(clippy)]\n \n+#![allow(blacklisted_name)]\n+\n /// Test that we lint if we use a binding with a single leading underscore\n fn prefix_underscore(_foo: u32) -> u32 {\n     _foo + 1 //~ ERROR used binding which is prefixed with an underscore"}]}