{"sha": "63b36e71270e680dad2431d56b3f498c0dfdeefc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYjM2ZTcxMjcwZTY4MGRhZDI0MzFkNTZiM2Y0OThjMGRmZGVlZmM=", "commit": {"author": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-26T01:31:27Z"}, "committer": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-28T07:46:33Z"}, "message": "Reduced repetition by refactoring new body to constructor function", "tree": {"sha": "60fb63eb76e4c3c8e208bc39424228693002fb81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60fb63eb76e4c3c8e208bc39424228693002fb81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b36e71270e680dad2431d56b3f498c0dfdeefc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b36e71270e680dad2431d56b3f498c0dfdeefc", "html_url": "https://github.com/rust-lang/rust/commit/63b36e71270e680dad2431d56b3f498c0dfdeefc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b36e71270e680dad2431d56b3f498c0dfdeefc/comments", "author": null, "committer": null, "parents": [{"sha": "eda2d416f6a6e45bdfa8552d34fa249bf0880b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda2d416f6a6e45bdfa8552d34fa249bf0880b37", "html_url": "https://github.com/rust-lang/rust/commit/eda2d416f6a6e45bdfa8552d34fa249bf0880b37"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "5848df3b6658bf6b3b5e722ffd7887a8e9c0f281", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/63b36e71270e680dad2431d56b3f498c0dfdeefc/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b36e71270e680dad2431d56b3f498c0dfdeefc/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=63b36e71270e680dad2431d56b3f498c0dfdeefc", "patch": "@@ -196,20 +196,13 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     block(&mut blocks, TerminatorKind::Goto { target: return_block });\n     block(&mut blocks, TerminatorKind::Return);\n \n-    let mut body = Body::new(\n-        blocks,\n-        IndexVec::from_elem_n(\n-            SourceScopeData { span: span, parent_scope: None }, 1\n-        ),\n-        ClearCrossCrate::Clear,\n-        local_decls_for_sig(&sig, span),\n-        IndexVec::new(),\n-        sig.inputs().len(),\n-        vec![],\n-        span,\n-        vec![],\n-        None,\n-    );\n+    let mut body = new_body(blocks,\n+                            IndexVec::from_elem_n(\n+                                SourceScopeData { span, parent_scope: None }, 1\n+                            ),\n+                            local_decls_for_sig(&sig, span),\n+                            sig.inputs().len(),\n+                            span);\n \n     if let Some(..) = ty {\n         // The first argument (index 0), but add 1 for the return value.\n@@ -248,6 +241,27 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     body\n }\n \n+fn new_body<'tcx>(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+                  source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+                  local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+                  arg_count: usize,\n+                  span: Span,\n+) -> Body<'tcx> {\n+    Body::new(\n+        basic_blocks,\n+        source_scopes,\n+        ClearCrossCrate::Clear,\n+        None,\n+        local_decls,\n+        IndexVec::new(),\n+        arg_count,\n+        vec![],\n+        span,\n+        vec![],\n+        None,\n+    )\n+}\n+\n pub struct DropShimElaborator<'a, 'tcx> {\n     pub body: &'a Body<'tcx>,\n     pub patch: MirPatch<'tcx>,\n@@ -363,19 +377,13 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn into_mir(self) -> Body<'tcx> {\n-        Body::new(\n-            self.blocks,\n-            IndexVec::from_elem_n(\n-                SourceScopeData { span: self.span, parent_scope: None }, 1\n-            ),\n-            ClearCrossCrate::Clear,\n-            self.local_decls,\n-            IndexVec::new(),\n-            self.sig.inputs().len(),\n-            vec![],\n-            self.span,\n-            vec![],\n-            None,\n+        new_body(self.blocks,\n+                 IndexVec::from_elem_n(\n+                     SourceScopeData { span: self.span, parent_scope: None }, 1\n+                 ),\n+                 self.local_decls,\n+                 self.sig.inputs().len(),\n+                 self.span,\n         )\n     }\n \n@@ -824,20 +832,16 @@ fn build_call_shim<'tcx>(\n         block(&mut blocks, vec![], TerminatorKind::Resume, true);\n     }\n \n-    let mut body = Body::new(\n+    let mut body = new_body(\n         blocks,\n         IndexVec::from_elem_n(\n-            SourceScopeData { span: span, parent_scope: None }, 1\n+            SourceScopeData { span, parent_scope: None }, 1\n         ),\n-        ClearCrossCrate::Clear,\n         local_decls,\n-        IndexVec::new(),\n         sig.inputs().len(),\n-        vec![],\n         span,\n-        vec![],\n-        None,\n     );\n+\n     if let Abi::RustCall = sig.abi {\n         body.spread_arg = Some(Local::new(sig.inputs().len()));\n     }\n@@ -911,19 +915,14 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n         is_cleanup: false\n     };\n \n-    let body = Body::new(\n+    let body = new_body(\n         IndexVec::from_elem_n(start_block, 1),\n         IndexVec::from_elem_n(\n-            SourceScopeData { span: span, parent_scope: None }, 1\n+            SourceScopeData { span, parent_scope: None }, 1\n         ),\n-        ClearCrossCrate::Clear,\n         local_decls,\n-        IndexVec::new(),\n         sig.inputs().len(),\n-        vec![],\n         span,\n-        vec![],\n-        None,\n     );\n \n     crate::util::dump_mir("}]}