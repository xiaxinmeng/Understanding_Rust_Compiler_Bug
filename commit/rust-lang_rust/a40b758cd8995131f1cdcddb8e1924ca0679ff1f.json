{"sha": "a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MGI3NThjZDg5OTUxMzFmMWNkY2RkYjhlMTkyNGNhMDY3OWZmMWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-29T14:40:37Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-10-20T23:16:18Z"}, "message": "Use markdown::render instead of using pulldown_cmark directly", "tree": {"sha": "131ea1727798e1180dcd0dd724862ebea15caa71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/131ea1727798e1180dcd0dd724862ebea15caa71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "html_url": "https://github.com/rust-lang/rust/commit/a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c8258037e44fe367326a582a8a0378a26d3082", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c8258037e44fe367326a582a8a0378a26d3082", "html_url": "https://github.com/rust-lang/rust/commit/f7c8258037e44fe367326a582a8a0378a26d3082"}], "stats": {"total": 94, "additions": 45, "deletions": 49}, "files": [{"sha": "58a6e992bc7c147a80cf9ee17e5a22b57f5c4ff0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "patch": "@@ -714,7 +714,7 @@ impl<'a> Builder<'a> {\n             \"build\" => self.cargo_out(compiler, mode, target),\n \n             // This is the intended out directory for crate documentation.\n-            \"doc\" =>  self.crate_doc_out(target),\n+            \"doc\" | \"rustdoc\" =>  self.crate_doc_out(target),\n \n             _ => self.stage_out(compiler, mode),\n         };\n@@ -743,7 +743,7 @@ impl<'a> Builder<'a> {\n             _ => compile::librustc_stamp(self, cmp, target),\n         };\n \n-        if cmd == \"doc\" {\n+        if cmd == \"doc\" || cmd == \"rustdoc\" {\n             if mode == Mode::Rustc || mode == Mode::ToolRustc || mode == Mode::Codegen {\n                 // This is the intended out directory for compiler documentation.\n                 my_out = self.compiler_doc_out(target);\n@@ -883,7 +883,7 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n             .env(\n                 \"RUSTDOC_REAL\",\n-                if cmd == \"doc\" || (cmd == \"test\" && want_rustdoc) {\n+                if cmd == \"doc\" || cmd == \"rustdoc\" || (cmd == \"test\" && want_rustdoc) {\n                     self.rustdoc(compiler.host)\n                 } else {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")"}, {"sha": "89ef75de36a1f6191dc1fa8db81a3dafaef66f2f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "patch": "@@ -405,15 +405,15 @@ impl Step for Standalone {\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n+               .arg(\"--markdown-no-toc\")\n                .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"))\n                .arg(\"--markdown-playground-url\")\n                .arg(\"https://play.rust-lang.org/\")\n                .arg(\"-o\").arg(&out)\n                .arg(&path);\n \n             if filename == \"not_found.md\" {\n-                cmd.arg(\"--markdown-no-toc\")\n-                   .arg(\"--markdown-css\")\n+                cmd.arg(\"--markdown-css\")\n                    .arg(\"https://doc.rust-lang.org/rust.css\");\n             } else {\n                 cmd.arg(\"--markdown-css\").arg(\"rust.css\");\n@@ -481,6 +481,7 @@ impl Step for Std {\n         // will also directly handle merging.\n         let my_out = builder.crate_doc_out(target);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n+        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n@@ -495,7 +496,9 @@ impl Step for Std {\n             // FIXME: Cargo should probably do this itself.\n             t!(fs::create_dir_all(out_dir.join(package)));\n             cargo.arg(\"--\")\n-                 .arg(\"index-page\").arg(&builder.src.join(\"src/doc/index.md\"));\n+                 .arg(\"--markdown-css\").arg(\"rust.css\")\n+                 .arg(\"--markdown-no-toc\")\n+                 .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"));\n \n             builder.run(&mut cargo);\n             builder.cp_r(&my_out, &out);"}, {"sha": "cab88fead289d30e5cd84fbdba8564061a8facd5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "patch": "@@ -54,6 +54,9 @@ use std::rc::Rc;\n \n use externalfiles::ExternalHtml;\n \n+use errors;\n+use getopts;\n+\n use serialize::json::{ToJson, Json, as_json};\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n@@ -80,8 +83,6 @@ use html::{highlight, layout};\n \n use minifier;\n \n-use pulldown_cmark;\n-\n /// A pair of name and its optional document.\n pub type NameDoc = (String, Option<String>);\n \n@@ -508,6 +509,8 @@ pub fn run(mut krate: clean::Crate,\n            id_map: IdMap,\n            enable_index_page: bool,\n            index_page: Option<PathBuf>,\n+           matches: &getopts::Matches,\n+           diag: &errors::Handler,\n ) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n@@ -675,7 +678,7 @@ pub fn run(mut krate: clean::Crate,\n     CACHE_KEY.with(|v| *v.borrow_mut() = cache.clone());\n     CURRENT_LOCATION_KEY.with(|s| s.borrow_mut().clear());\n \n-    write_shared(&cx, &krate, &*cache, index, enable_minification)?;\n+    write_shared(&cx, &krate, &*cache, index, enable_minification, matches, diag)?;\n \n     // And finally render the whole crate's documentation\n     cx.krate(krate)\n@@ -751,11 +754,15 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n             Json::Object(crate_data))\n }\n \n-fn write_shared(cx: &Context,\n-                krate: &clean::Crate,\n-                cache: &Cache,\n-                search_index: String,\n-                enable_minification: bool) -> Result<(), Error> {\n+fn write_shared(\n+    cx: &Context,\n+    krate: &clean::Crate,\n+    cache: &Cache,\n+    search_index: String,\n+    enable_minification: bool,\n+    matches: &getopts::Matches,\n+    diag: &errors::Handler,\n+) -> Result<(), Error> {\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n     // operation with respect to all other rustdocs running around.\n@@ -983,30 +990,15 @@ themePicker.onblur = handleThemeButtonsBlur;\n     }\n     try_err!(writeln!(&mut w, \"initSearch(searchIndex);\"), &dst);\n \n-<<<<<<< HEAD\n-    if cx.disable_index_page == false {\n-        let dst = cx.dst.join(\"index.html\");\n-=======\n     if cx.enable_index_page == true {\n->>>>>>> a2642cf... f\n         if let Some(ref index_page) = cx.index_page {\n-            let mut content = Vec::with_capacity(100000);\n-\n-            let mut f = try_err!(File::open(&index_page), &index_page);\n-            try_err!(f.read_to_end(&mut content), &index_page);\n-            let content = match String::from_utf8(content) {\n-                Ok(c) => c,\n-                Err(_) => return Err(Error::new(\n-                                         io::Error::new(\n-                                             io::ErrorKind::Other, \"invalid markdown\"),\n-                                             &index_page)),\n-            };\n-            let parser = pulldown_cmark::Parser::new(&content);\n-            let mut html_buf = String::new();\n-            pulldown_cmark::html::push_html(&mut html_buf, parser);\n-            let mut f = try_err!(File::create(&dst), &dst);\n-            try_err!(f.write_all(html_buf.as_bytes()), &dst);\n+            ::markdown::render(index_page,\n+                               cx.dst.clone(),\n+                               &matches, &(*cx.shared).layout.external_html,\n+                               !matches.opt_present(\"markdown-no-toc\"),\n+                               diag);\n         } else {\n+            let dst = cx.dst.join(\"index.html\");\n             let mut w = BufWriter::new(try_err!(File::create(&dst), &dst));\n             let page = layout::Page {\n                 title: \"Index of crates\","}, {"sha": "a86f71ce319fd24617f7e6fa49fd476e846d471b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "patch": "@@ -462,7 +462,7 @@ fn main_args(args: &[String]) -> isize {\n         diag.struct_err(\"too many file operands\").emit();\n         return 1;\n     }\n-    let input = &matches.free[0];\n+    let input = matches.free[0].clone();\n \n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n@@ -490,7 +490,7 @@ fn main_args(args: &[String]) -> isize {\n                                           .collect();\n \n     let should_test = matches.opt_present(\"test\");\n-    let markdown_input = Path::new(input).extension()\n+    let markdown_input = Path::new(&input).extension()\n         .map_or(false, |e| e == \"md\" || e == \"markdown\");\n \n     let output = matches.opt_str(\"o\").map(|s| PathBuf::from(&s));\n@@ -568,14 +568,14 @@ fn main_args(args: &[String]) -> isize {\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n-            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n+            return markdown::test(&input, cfgs, libs, externs, test_args, maybe_sysroot,\n                                   display_warnings, linker, edition, cg, &diag)\n         }\n         (true, false) => {\n-            return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n+            return test::run(Path::new(&input), cfgs, libs, externs, test_args, crate_name,\n                              maybe_sysroot, display_warnings, linker, edition, cg)\n         }\n-        (false, true) => return markdown::render(Path::new(input),\n+        (false, true) => return markdown::render(Path::new(&input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n                                                  &matches, &external_html,\n                                                  !matches.opt_present(\"markdown-no-toc\"), &diag),\n@@ -584,8 +584,8 @@ fn main_args(args: &[String]) -> isize {\n \n     let output_format = matches.opt_str(\"w\");\n \n-    let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, error_format,\n-                            move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, cg, matches, error_format,\n+                            move |out, matches| {\n         let Output { krate, passes, renderinfo } = out;\n         let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n         info!(\"going to format\");\n@@ -624,11 +624,11 @@ fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n                        edition: Edition,\n                        cg: CodegenOptions,\n-                       matches: &getopts::Matches,\n+                       matches: getopts::Matches,\n                        error_format: ErrorOutputType,\n                        f: F)\n                        -> Result<R, String>\n-where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n+where R: 'static + Send, F: 'static + Send + FnOnce(Output, &getopts::Matches) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n         Some(\"rust\") => Ok(rust_input(input, externs, edition, cg, matches, error_format, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n@@ -682,11 +682,11 @@ fn rust_input<R, F>(cratefile: PathBuf,\n                     externs: Externs,\n                     edition: Edition,\n                     cg: CodegenOptions,\n-                    matches: &getopts::Matches,\n+                    matches: getopts::Matches,\n                     error_format: ErrorOutputType,\n                     f: F) -> R\n where R: 'static + Send,\n-      F: 'static + Send + FnOnce(Output) -> R\n+      F: 'static + Send + FnOnce(Output, &getopts::Matches) -> R\n {\n     let default_passes = if matches.opt_present(\"no-defaults\") {\n         passes::DefaultPassOption::None\n@@ -731,7 +731,7 @@ where R: 'static + Send,\n         *x == \"ui-testing\"\n     });\n \n-    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n+    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(&matches, error_format);\n \n     let (tx, rx) = channel();\n \n@@ -783,7 +783,8 @@ where R: 'static + Send,\n             krate = pass(krate);\n         }\n \n-        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes })).unwrap();\n+        tx.send(f(Output { krate: krate, renderinfo: renderinfo, passes: passes },\n+                  &matches)).unwrap();\n     }));\n \n     match result {"}, {"sha": "0084c0f859281861952cdcfdb747b1c85007c9cf", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40b758cd8995131f1cdcddb8e1924ca0679ff1f/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=a40b758cd8995131f1cdcddb8e1924ca0679ff1f", "patch": "@@ -77,7 +77,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n             diag.struct_err(&format!(\"{}: {}\", output.display(), e)).emit();\n             return 4;\n         }\n-        Ok(f) => f\n+        Ok(f) => f,\n     };\n \n     let (metadata, text) = extract_leading_metadata(&input_str);"}]}