{"sha": "4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTZiZjQ0YmQwMTBjMTgzN2ZkY2I4N2JiZWJmNjdlOGFiZDY3ZDQ=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-02T09:26:34Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-02T20:02:07Z"}, "message": "resolve: print location of static for \"static in pattern\" error\n\nThe implementation mirrors the one for \"constant defined here\" annotation\nused for constant patterns in the irrefutable-pattern case.\n\nFixes: #23716", "tree": {"sha": "db57f386954f21fcc5ee442346cfb807779a7856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db57f386954f21fcc5ee442346cfb807779a7856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4", "html_url": "https://github.com/rust-lang/rust/commit/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855fb6192263a5c059325bb4b4e10b55e4e8ddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/855fb6192263a5c059325bb4b4e10b55e4e8ddbb", "html_url": "https://github.com/rust-lang/rust/commit/855fb6192263a5c059325bb4b4e10b55e4e8ddbb"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "c36fc771b5e6bedbc79fe3bd5e041df744b56062", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4", "patch": "@@ -158,7 +158,7 @@ enum ResolutionError<'a> {\n     /// error E0416: identifier is bound more than once in the same pattern\n     IdentifierBoundMoreThanOnceInSamePattern(&'a str),\n     /// error E0417: static variables cannot be referenced in a pattern\n-    StaticVariableReference,\n+    StaticVariableReference(DefId, Option<Name>),\n     /// error E0418: is not an enum variant, struct or const\n     NotAnEnumVariantStructOrConst(&'a str),\n     /// error E0419: unresolved enum variant, struct or const\n@@ -367,12 +367,24 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              \"identifier `{}` is bound more than once in the same pattern\",\n                              identifier)\n         }\n-        ResolutionError::StaticVariableReference => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0417,\n-                             \"static variables cannot be referenced in a pattern, use a \\\n-                              `const` instead\")\n+        ResolutionError::StaticVariableReference(did, name) => {\n+            let mut err = struct_span_err!(resolver.session,\n+                                           span,\n+                                           E0417,\n+                                           \"static variables cannot be referenced in a \\\n+                                            pattern, use a `const` instead\");\n+            if let Some(sp) = resolver.ast_map.span_if_local(did) {\n+                err.span_note(sp, \"static variable defined here\");\n+            }\n+            if let Some(name) = name {\n+                if let Some(binding) = resolver.current_module\n+                                               .resolve_name_in_lexical_scope(name, ValueNS) {\n+                    if binding.is_import() {\n+                        err.span_note(binding.span, \"static variable imported here\");\n+                    }\n+                }\n+            }\n+            err\n         }\n         ResolutionError::NotAnEnumVariantStructOrConst(name) => {\n             struct_span_err!(resolver.session,\n@@ -2374,10 +2386,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             Def::Variant(..) | Def::Const(..) => {\n                                 self.record_def(pattern.id, path_res);\n                             }\n-                            Def::Static(..) => {\n+                            Def::Static(did, _) => {\n                                 resolve_error(&self,\n                                               path.span,\n-                                              ResolutionError::StaticVariableReference);\n+                                              ResolutionError::StaticVariableReference(\n+                                                  did, None));\n                                 self.record_def(pattern.id, err_path_resolution());\n                             }\n                             _ => {\n@@ -2517,8 +2530,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Some(def @ Def::Const(..)) | Some(def @ Def::AssociatedConst(..)) => {\n                 FoundConst(def, ident.unhygienic_name)\n             }\n-            Some(Def::Static(..)) => {\n-                resolve_error(self, span, ResolutionError::StaticVariableReference);\n+            Some(Def::Static(did, _)) => {\n+                resolve_error(self, span, ResolutionError::StaticVariableReference(\n+                    did, Some(ident.unhygienic_name)));\n                 BareIdentifierPatternUnresolved\n             }\n             _ => BareIdentifierPatternUnresolved,"}, {"sha": "c54f901199b460c0e62d1dce4881819440e2bf0a", "filename": "src/test/compile-fail/issue-23716.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4/src%2Ftest%2Fcompile-fail%2Fissue-23716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4/src%2Ftest%2Fcompile-fail%2Fissue-23716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23716.rs?ref=4ba6bf44bd010c1837fdcb87bbebf67e8abd67d4", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static foo: i32 = 0;\n+//~^ NOTE static variable defined here\n+\n+fn bar(foo: i32) {}\n+//~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n+\n+mod submod {\n+    pub static answer: i32 = 42;\n+    //~^ NOTE static variable defined here\n+}\n+\n+use self::submod::answer;\n+//~^ NOTE static variable imported here\n+\n+fn question(answer: i32) {}\n+//~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n+\n+fn main() {\n+}"}]}