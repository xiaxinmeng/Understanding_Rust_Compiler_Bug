{"sha": "664449ac6e4b607722af4c3defe56af1a40c0a77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDQ0OWFjNmU0YjYwNzcyMmFmNGMzZGVmZTU2YWYxYTQwYzBhNzc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-09T21:13:32Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-07-16T17:38:16Z"}, "message": "More docs for std::io::Write", "tree": {"sha": "717cac89d32c1f4c368710ffdc5d3be9876a515b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717cac89d32c1f4c368710ffdc5d3be9876a515b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664449ac6e4b607722af4c3defe56af1a40c0a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664449ac6e4b607722af4c3defe56af1a40c0a77", "html_url": "https://github.com/rust-lang/rust/commit/664449ac6e4b607722af4c3defe56af1a40c0a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664449ac6e4b607722af4c3defe56af1a40c0a77/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092f4ed2de83884661373b6ce7cd217a7b9860ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/092f4ed2de83884661373b6ce7cd217a7b9860ee", "html_url": "https://github.com/rust-lang/rust/commit/092f4ed2de83884661373b6ce7cd217a7b9860ee"}], "stats": {"total": 126, "additions": 114, "deletions": 12}, "files": [{"sha": "7f3713a959b2d25dd52b06629371b38640ad3419", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 114, "deletions": 12, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/664449ac6e4b607722af4c3defe56af1a40c0a77/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664449ac6e4b607722af4c3defe56af1a40c0a77/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=664449ac6e4b607722af4c3defe56af1a40c0a77", "patch": "@@ -532,11 +532,9 @@ pub trait Read {\n \n /// A trait for objects which are byte-oriented sinks.\n ///\n-/// The `write` method will attempt to write some data into the object,\n-/// returning how many bytes were successfully written.\n+/// Implementors of the `Write` trait are sometimes called 'writers'.\n ///\n-/// The `flush` method is useful for adaptors and explicit buffers themselves\n-/// for ensuring that all buffered data has been pushed out to the \"true sink\".\n+/// Writers are defined by two required methods, `write()` and `flush()`:\n ///\n /// * The `write()` method will attempt to write some data into the object,\n ///   returning how many bytes were successfully written.\n@@ -588,6 +586,20 @@ pub trait Write {\n     ///\n     /// It is **not** considered an error if the entire buffer could not be\n     /// written to this writer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    ///\n+    /// try!(buffer.write(b\"some bytes\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write(&mut self, buf: &[u8]) -> Result<usize>;\n \n@@ -598,6 +610,22 @@ pub trait Write {\n     ///\n     /// It is considered an error if not all bytes could be written due to\n     /// I/O errors or EOF being reached.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::prelude::*;\n+    /// use std::io::BufWriter;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = BufWriter::new(try!(File::create(\"foo.txt\")));\n+    ///\n+    /// try!(buffer.write(b\"some bytes\"));\n+    /// try!(buffer.flush());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn flush(&mut self) -> Result<()>;\n \n@@ -611,6 +639,20 @@ pub trait Write {\n     /// # Errors\n     ///\n     /// This function will return the first error that `write` returns.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    ///\n+    /// try!(buffer.write_all(b\"some bytes\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {\n         while !buf.is_empty() {\n@@ -628,17 +670,41 @@ pub trait Write {\n     /// Writes a formatted string into this writer, returning any error\n     /// encountered.\n     ///\n-    /// This method is primarily used to interface with the `format_args!`\n-    /// macro, but it is rare that this should explicitly be called. The\n-    /// `write!` macro should be favored to invoke this method instead.\n+    /// This method is primarily used to interface with the\n+    /// [`format_args!`][formatargs] macro, but it is rare that this should\n+    /// explicitly be called. The [`write!`][write] macro should be favored to\n+    /// invoke this method instead.\n+    ///\n+    /// [formatargs]: ../std/macro.format_args!.html\n+    /// [write]: ../std/macro.write!.html\n     ///\n-    /// This function internally uses the `write_all` method on this trait and\n-    /// hence will continuously write data so long as no errors are received.\n-    /// This also means that partial writes are not indicated in this signature.\n+    /// This function internally uses the [`write_all`][writeall] method on\n+    /// this trait and hence will continuously write data so long as no errors\n+    /// are received. This also means that partial writes are not indicated in\n+    /// this signature.\n+    ///\n+    /// [writeall]: #method.write_all\n     ///\n     /// # Errors\n     ///\n     /// This function will return any I/O error reported while formatting.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    ///\n+    /// // this call\n+    /// try!(write!(buffer, \"{:.*}\", 2, 1.234567));\n+    /// // turns into this:\n+    /// try!(buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567)));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()> {\n         // Create a shim which translates a Write to a fmt::Write and saves\n@@ -671,6 +737,23 @@ pub trait Write {\n     ///\n     /// The returned adaptor also implements `Write` and will simply borrow this\n     /// current writer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::io::Write;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer = try!(File::create(\"foo.txt\"));\n+    ///\n+    /// let reference = buffer.by_ref();\n+    ///\n+    /// // we can use reference just like our original buffer\n+    /// try!(reference.write_all(b\"some bytes\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n \n@@ -682,6 +765,25 @@ pub trait Write {\n     /// implementation do not precisely track where errors happen. For example\n     /// an error on the second call to `write` will not report that the first\n     /// call to `write` succeeded.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(io)]\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut buffer1 = try!(File::create(\"foo.txt\"));\n+    /// let mut buffer2 = Vec::new();\n+    ///\n+    /// // write the output to buffer1 as we read\n+    /// let mut handle = buffer1.broadcast(&mut buffer2);\n+    ///\n+    /// try!(handle.write(b\"some bytes\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[unstable(feature = \"io\", reason = \"the semantics of a partial read/write \\\n                                          of where errors happen is currently \\\n                                          unclear and may change\")]\n@@ -706,15 +808,15 @@ pub trait Write {\n ///\n /// ```\n /// use std::io;\n+/// use std::io::prelude::*;\n /// use std::fs::File;\n-/// use std::io::Seek;\n /// use std::io::SeekFrom;\n ///\n /// # fn foo() -> io::Result<()> {\n /// let mut f = try!(File::open(\"foo.txt\"));\n ///\n /// // move the cursor 42 bytes from the start of the file\n-/// f.seek(SeekFrom::Start(42)).unwrap();\n+/// try!(f.seek(SeekFrom::Start(42)));\n /// # Ok(())\n /// # }\n /// ```"}]}