{"sha": "169ec2fdc1dfe18b56a3bd8e2f6162587b397e47", "node_id": "C_kwDOAAsO6NoAKDE2OWVjMmZkYzFkZmUxOGI1NmEzYmQ4ZTJmNjE2MjU4N2IzOTdlNDc", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-11T20:05:56Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-14T01:32:11Z"}, "message": "Added a few more test cases", "tree": {"sha": "41c7c63a4b61cfae29c39918e5559cec1cae4068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c7c63a4b61cfae29c39918e5559cec1cae4068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/169ec2fdc1dfe18b56a3bd8e2f6162587b397e47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHg0psACgkQeO9fUvOM\nSb0pQQwAo4Jjg9CVlJw7sJBthx+R2O0qMD8L05EsTrpksfaafYjAJqr6m6aJuFgd\nrIP9yIWP4kWDyXnnQBga/mcYW6p8qrXv7USxeDXZd2FWURnQeBBG3tXpahUnL4xZ\npDBF0/isrDquign43AcVBn4zWkg3wNsnpr4Axaf1Ho7JioJBy0Psphn9mh9ZdULK\nF4wAOvVDiuvLQHf3EeqYwnIuuqQAmvIaD36vJ2H5frm+ocnX6phrbvUpWNL8/69D\nE/WPFQsjPwXwWLmoH8qZbhcTzssCzJ+g7odYLs+tSt2y0WLnVIvSI7Y0aCKkB2Rz\nBkCnNgnCIHbnff+zae/jZqA2JHg+m7euYf8VUnkh2O/z/ETi0335wauc0oqWlyCd\n8h0rnUCG2PbzfcO8zNdGObGB0Nf/YZQYpt7RRES/6ZergXvh348VE32b7A4HW2OX\n0BF1lf73dz41zde5tog0E5ri5mLHTYvgo6L3tw2B7UQHyjMEU/TBIBatvyoOIkrL\n+xsYXzlb\n=ThZa\n-----END PGP SIGNATURE-----", "payload": "tree 41c7c63a4b61cfae29c39918e5559cec1cae4068\nparent b27b882e7249d2058793898c4b9777c9468892af\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641931556 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1642123931 +0000\n\nAdded a few more test cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/169ec2fdc1dfe18b56a3bd8e2f6162587b397e47", "html_url": "https://github.com/rust-lang/rust/commit/169ec2fdc1dfe18b56a3bd8e2f6162587b397e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/169ec2fdc1dfe18b56a3bd8e2f6162587b397e47/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27b882e7249d2058793898c4b9777c9468892af", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27b882e7249d2058793898c4b9777c9468892af", "html_url": "https://github.com/rust-lang/rust/commit/b27b882e7249d2058793898c4b9777c9468892af"}], "stats": {"total": 247, "additions": 247, "deletions": 0}, "files": [{"sha": "a5869104dd5811509cbd65dbb380ae014fcd56db", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/169ec2fdc1dfe18b56a3bd8e2f6162587b397e47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/169ec2fdc1dfe18b56a3bd8e2f6162587b397e47/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=169ec2fdc1dfe18b56a3bd8e2f6162587b397e47", "patch": "@@ -401,4 +401,251 @@ fn func() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn merge_match_same_destructuring_different_types() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn func() {\n+    let p = Point { x: 0, y: 7 };\n+\n+    match p {\n+        Point { x, y: 0 } => $0\"\",\n+        Point { x: 0, y } => \"\",\n+        Point { x, y } => \"\",\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_range() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+let x = 'c';\n+\n+    match x {\n+        'a'..='j' => $0\"\",\n+        'c'..='z' => \"\",\n+        _ => \"other\",\n+    };\n+\"#,\n+            r#\"\n+let x = 'c';\n+\n+    match x {\n+        'a'..='j' | 'c'..='z' => \"\",\n+        _ => \"other\",\n+    };\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_without_field() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+enum MyEnum {\n+    NoField,\n+    AField(u8)\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::NoField => $0\"\",\n+        MyEnum::AField(x) => \"\"\n+    };\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_destructuring_different_types() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+enum MyEnum {\n+    Move { x: i32, y: i32 },\n+    Write(String),\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::Move { x, y } => $0\"\",\n+        MyEnum::Write(text) => \"\",\n+    };\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_destructuring_same_types() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+enum MyEnum {\n+    Move { x: i32, y: i32 },\n+    Crawl { x: i32, y: i32 }\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::Move { x, y } => $0\"\",\n+        MyEnum::Crawl { x, y } => \"\",\n+    };\n+}\n+        \"#,\n+            r#\"\n+enum MyEnum {\n+    Move { x: i32, y: i32 },\n+    Crawl { x: i32, y: i32 }\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::Move { x, y } | MyEnum::Crawl { x, y } => \"\",\n+    };\n+}\n+        \"#,        \n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_destructuring_same_types_different_name() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+enum MyEnum {\n+    Move { x: i32, y: i32 },\n+    Crawl { a: i32, b: i32 }\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::Move { x, y } => $0\"\",\n+        MyEnum::Crawl { a, b } => \"\",\n+    };\n+}\n+        \"#       \n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_nested_pattern_different_names() {\n+        check_assist_not_applicable(\n+            merge_match_arms,\n+            r#\"\n+enum Color {\n+    Rgb(i32, i32, i32),\n+    Hsv(i32, i32, i32),\n+}\n+\n+enum Message {\n+    Quit,\n+    Move { x: i32, y: i32 },\n+    Write(String),\n+    ChangeColor(Color),\n+}\n+\n+fn main(msg: Message) {\n+    match msg {\n+        Message::ChangeColor(Color::Rgb(r, g, b)) => $0\"\",\n+        Message::ChangeColor(Color::Hsv(h, s, v)) => \"\",\n+        _ => \"other\"\n+    };\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_nested_pattern_same_names() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+enum Color {\n+    Rgb(i32, i32, i32),\n+    Hsv(i32, i32, i32),\n+}\n+\n+enum Message {\n+    Quit,\n+    Move { x: i32, y: i32 },\n+    Write(String),\n+    ChangeColor(Color),\n+}\n+\n+fn main(msg: Message) {\n+    match msg {\n+        Message::ChangeColor(Color::Rgb(a, b, c)) => $0\"\",\n+        Message::ChangeColor(Color::Hsv(a, b, c)) => \"\",\n+        _ => \"other\"\n+    };\n+}\n+        \"#,\n+        r#\"\n+enum Color {\n+    Rgb(i32, i32, i32),\n+    Hsv(i32, i32, i32),\n+}\n+\n+enum Message {\n+    Quit,\n+    Move { x: i32, y: i32 },\n+    Write(String),\n+    ChangeColor(Color),\n+}\n+\n+fn main(msg: Message) {\n+    match msg {\n+        Message::ChangeColor(Color::Rgb(a, b, c)) | Message::ChangeColor(Color::Hsv(a, b, c)) => \"\",\n+        _ => \"other\"\n+    };\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn merge_match_arms_enum_destructuring_with_ignore() {\n+        check_assist(\n+            merge_match_arms,\n+            r#\"\n+enum MyEnum {\n+    Move { x: i32, a: i32 },\n+    Crawl { x: i32, b: i32 }\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::Move { x, .. } => $0\"\",\n+        MyEnum::Crawl { x, .. } => \"\",\n+    };\n+}\n+        \"#,\n+            r#\"\n+enum MyEnum {\n+    Move { x: i32, a: i32 },\n+    Crawl { x: i32, b: i32 }\n+}\n+\n+fn func(x: MyEnum) {\n+    match x {\n+        MyEnum::Move { x, .. } | MyEnum::Crawl { x, .. } => \"\",\n+    };\n+}\n+        \"#,        \n+        )\n+    }\n }"}]}