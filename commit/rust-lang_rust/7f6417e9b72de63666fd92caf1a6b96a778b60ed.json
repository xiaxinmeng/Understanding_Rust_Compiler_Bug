{"sha": "7f6417e9b72de63666fd92caf1a6b96a778b60ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNjQxN2U5YjcyZGU2MzY2NmZkOTJjYWYxYTZiOTZhNzc4YjYwZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-07T18:04:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-07T18:04:33Z"}, "message": "Auto merge of #45822 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #45470, #45588, #45682, #45714, #45751, #45764, #45778, #45782, #45784\n- Failed merges:", "tree": {"sha": "cbdb0b5298e76188aea3582191e2ad82dfc811b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbdb0b5298e76188aea3582191e2ad82dfc811b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6417e9b72de63666fd92caf1a6b96a778b60ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6417e9b72de63666fd92caf1a6b96a778b60ed", "html_url": "https://github.com/rust-lang/rust/commit/7f6417e9b72de63666fd92caf1a6b96a778b60ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6417e9b72de63666fd92caf1a6b96a778b60ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ade24f67201531778e7674b4b63ebf1a23c9643", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ade24f67201531778e7674b4b63ebf1a23c9643", "html_url": "https://github.com/rust-lang/rust/commit/7ade24f67201531778e7674b4b63ebf1a23c9643"}, {"sha": "0d53ecd0c788d5c492cf5023c8c76420ef349244", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d53ecd0c788d5c492cf5023c8c76420ef349244", "html_url": "https://github.com/rust-lang/rust/commit/0d53ecd0c788d5c492cf5023c8c76420ef349244"}], "stats": {"total": 553, "additions": 479, "deletions": 74}, "files": [{"sha": "c150459bee5c4fb5178c58d9482d17f7448dfa59", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -186,8 +186,11 @@ install!((self, builder, _config),\n         install_cargo(builder, self.stage, self.target);\n     };\n     Rls, \"rls\", _config.extended, only_hosts: true, {\n-        builder.ensure(dist::Rls { stage: self.stage, target: self.target });\n-        install_rls(builder, self.stage, self.target);\n+        if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() {\n+            install_rls(builder, self.stage, self.target);\n+        } else {\n+            println!(\"skipping Install RLS stage{} ({})\", self.stage, self.target);\n+        }\n     };\n     Analysis, \"analysis\", _config.extended, only_hosts: false, {\n         builder.ensure(dist::Analysis {"}, {"sha": "ebe7c59313fa59df5f46918639a8df3b59257f3c", "filename": "src/doc/not_found.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Fdoc%2Fnot_found.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Fdoc%2Fnot_found.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnot_found.md?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -22,7 +22,7 @@ Some things that might be helpful to you though:\n # Reference\n \n * [The Rust official site](https://www.rust-lang.org)\n-* [The Rust reference](https://doc.rust-lang.org/reference.html)\n+* [The Rust reference](https://doc.rust-lang.org/reference/index.html)\n \n # Docs\n "}, {"sha": "7d0f26ba34d4159770c7f3b0710e4b69b3e95188", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -1254,6 +1254,15 @@ impl<'a> State<'a> {\n             Fixity::None => (prec + 1, prec + 1),\n         };\n \n+        let left_prec = match (&lhs.node, op.node) {\n+            // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n+            // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n+            // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n+            (&hir::ExprCast { .. }, hir::BinOp_::BiLt) |\n+            (&hir::ExprCast { .. }, hir::BinOp_::BiShl) => parser::PREC_FORCE_PAREN,\n+            _ => left_prec,\n+        };\n+\n         self.print_expr_maybe_paren(lhs, left_prec)?;\n         self.s.space()?;\n         self.word_space(op.node.as_str())?;"}, {"sha": "d7e0877d95c2817e6df14700a9ecf9963d06690b", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -21,25 +21,42 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use infer::error_reporting::util::AnonymousArgInfo;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    // This method prints the error message for lifetime errors when both the concerned regions\n-    // are anonymous.\n-    // Consider a case where we have\n-    // fn foo(x: &mut Vec<&u8>, y: &u8)\n-    //    { x.push(y); }.\n-    // The example gives\n-    // fn foo(x: &mut Vec<&u8>, y: &u8) {\n-    //                    ---      --- these references are declared with different lifetimes...\n-    //            x.push(y);\n-    //            ^ ...but data from `y` flows into `x` here\n-    // It has been extended for the case of structs too.\n-    // Consider the example\n-    // struct Ref<'a> { x: &'a u32 }\n-    // fn foo(mut x: Vec<Ref>, y: Ref) {\n-    //                   ---      --- these structs are declared with different lifetimes...\n-    //               x.push(y);\n-    //               ^ ...but data from `y` flows into `x` here\n-    // }\n-    // It will later be extended to trait objects.\n+    /// Print the error message for lifetime errors when both the concerned regions are anonymous.\n+    ///\n+    /// Consider a case where we have\n+    ///\n+    /// ```no_run\n+    /// fn foo(x: &mut Vec<&u8>, y: &u8) {\n+    ///     x.push(y);\n+    /// }\n+    /// ```\n+    ///\n+    /// The example gives\n+    ///\n+    /// ```text\n+    /// fn foo(x: &mut Vec<&u8>, y: &u8) {\n+    ///                    ---      --- these references are declared with different lifetimes...\n+    ///     x.push(y);\n+    ///     ^ ...but data from `y` flows into `x` here\n+    /// ```\n+    ///\n+    /// It has been extended for the case of structs too.\n+    ///\n+    /// Consider the example\n+    ///\n+    /// ```no_run\n+    /// struct Ref<'a> { x: &'a u32 }\n+    /// ```\n+    ///\n+    /// ```text\n+    /// fn foo(mut x: Vec<Ref>, y: Ref) {\n+    ///                   ---      --- these structs are declared with different lifetimes...\n+    ///     x.push(y);\n+    ///     ^ ...but data from `y` flows into `x` here\n+    /// }\n+    /// ````\n+    ///\n+    /// It will later be extended to trait objects.\n     pub fn try_report_anon_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),"}, {"sha": "6d3b950784097b54ed721e17bda261b79af298e0", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -16,18 +16,15 @@ use infer::region_inference::RegionResolutionError;\n use ty;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    // This method generates the error message for the case when\n-    // the function arguments consist of a named region and an anonymous\n-    // region and corresponds to `ConcreteFailure(..)`\n+    /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n+    /// an anonymous region, emit an descriptive diagnostic error.\n     pub fn try_report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n             _ => return false, // inapplicable\n         };\n \n-        debug!(\"try_report_named_anon_conflict(sub={:?}, sup={:?})\",\n-               sub,\n-               sup);\n+        debug!(\"try_report_named_anon_conflict(sub={:?}, sup={:?})\", sub, sup);\n \n         // Determine whether the sub and sup consist of one named region ('a)\n         // and one anonymous (elided) region. If so, find the parameter arg\n@@ -53,10 +50,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             };\n \n         debug!(\"try_report_named_anon_conflict: named = {:?}\", named);\n-        debug!(\"try_report_named_anon_conflict: anon_arg_info = {:?}\",\n-               anon_arg_info);\n-        debug!(\"try_report_named_anon_conflict: region_info = {:?}\",\n-               region_info);\n+        debug!(\"try_report_named_anon_conflict: anon_arg_info = {:?}\", anon_arg_info);\n+        debug!(\"try_report_named_anon_conflict: region_info = {:?}\", region_info);\n \n         let (arg, new_ty, br, is_first, scope_def_id, is_impl_item) = (anon_arg_info.arg,\n                                                                        anon_arg_info.arg_ty,\n@@ -101,6 +96,5 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 .span_label(span, format!(\"lifetime `{}` required\", named))\n                 .emit();\n         return true;\n-\n     }\n }"}, {"sha": "6bcd98a7a6814076552166a450e2256633c96ec0", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -221,6 +221,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     _ => false,\n                 }\n             }\n+            ty::ReEarlyBound(_) => true,\n             _ => false,\n         }\n     }"}, {"sha": "4ed2bce5ab1707fc8f14b7510c5eefcfc3f2ef54", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -138,6 +138,34 @@ impl OutputType {\n         }\n     }\n \n+    fn from_shorthand(shorthand: &str) -> Option<Self> {\n+        Some(match shorthand {\n+             \"asm\" => OutputType::Assembly,\n+             \"llvm-ir\" => OutputType::LlvmAssembly,\n+             \"mir\" => OutputType::Mir,\n+             \"llvm-bc\" => OutputType::Bitcode,\n+             \"obj\" => OutputType::Object,\n+             \"metadata\" => OutputType::Metadata,\n+             \"link\" => OutputType::Exe,\n+             \"dep-info\" => OutputType::DepInfo,\n+            _ => return None,\n+        })\n+    }\n+\n+    fn shorthands_display() -> String {\n+        format!(\n+            \"`{}`, `{}`, `{}`, `{}`, `{}`, `{}`, `{}`, `{}`\",\n+            OutputType::Bitcode.shorthand(),\n+            OutputType::Assembly.shorthand(),\n+            OutputType::LlvmAssembly.shorthand(),\n+            OutputType::Mir.shorthand(),\n+            OutputType::Object.shorthand(),\n+            OutputType::Metadata.shorthand(),\n+            OutputType::Exe.shorthand(),\n+            OutputType::DepInfo.shorthand(),\n+        )\n+    }\n+\n     pub fn extension(&self) -> &'static str {\n         match *self {\n             OutputType::Bitcode => \"bc\",\n@@ -1488,19 +1516,13 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');\n-                let output_type = match parts.next().unwrap() {\n-                    \"asm\" => OutputType::Assembly,\n-                    \"llvm-ir\" => OutputType::LlvmAssembly,\n-                    \"mir\" => OutputType::Mir,\n-                    \"llvm-bc\" => OutputType::Bitcode,\n-                    \"obj\" => OutputType::Object,\n-                    \"metadata\" => OutputType::Metadata,\n-                    \"link\" => OutputType::Exe,\n-                    \"dep-info\" => OutputType::DepInfo,\n-                    part => {\n-                        early_error(error_format, &format!(\"unknown emission type: `{}`\",\n-                                                    part))\n-                    }\n+                let shorthand = parts.next().unwrap();\n+                let output_type = match OutputType::from_shorthand(shorthand) {\n+                    Some(output_type) => output_type,\n+                    None => early_error(error_format, &format!(\n+                        \"unknown emission type: `{}` - expected one of: {}\",\n+                        shorthand, OutputType::shorthands_display(),\n+                    )),\n                 };\n                 let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);"}, {"sha": "9bbd16355be387a6afa8b3db40ab4213861ef369", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -337,15 +337,23 @@ pub fn make_test(s: &str,\n \n     let mut prog = String::new();\n \n-    // First push any outer attributes from the example, assuming they\n-    // are intended to be crate attributes.\n-    prog.push_str(&crate_attrs);\n+    if opts.attrs.is_empty() {\n+        // If there aren't any attributes supplied by #![doc(test(attr(...)))], then allow some\n+        // lints that are commonly triggered in doctests. The crate-level test attributes are\n+        // commonly used to make tests fail in case they trigger warnings, so having this there in\n+        // that case may cause some tests to pass when they shouldn't have.\n+        prog.push_str(\"#![allow(unused)]\\n\");\n+    }\n \n-    // Next, any attributes for other aspects such as lints.\n+    // Next, any attributes that came from the crate root via #![doc(test(attr(...)))].\n     for attr in &opts.attrs {\n         prog.push_str(&format!(\"#![{}]\\n\", attr));\n     }\n \n+    // Now push any outer attributes from the example, assuming they\n+    // are intended to be crate attributes.\n+    prog.push_str(&crate_attrs);\n+\n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n     if !s.contains(\"extern crate\") && !opts.no_crate_inject && cratename != Some(\"std\") {"}, {"sha": "d59a0b65a69408d02c50ec082a7c8118d64c3b9d", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -10,7 +10,6 @@\n \n use cell::UnsafeCell;\n use fmt;\n-use marker;\n use mem;\n use ops::{Deref, DerefMut};\n use ptr;\n@@ -102,7 +101,10 @@ pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !marker::Send for RwLockReadGuard<'a, T> {}\n+impl<'a, T: ?Sized> !Send for RwLockReadGuard<'a, T> {}\n+\n+#[stable(feature = \"rwlock_guard_sync\", since = \"1.23.0\")]\n+unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockReadGuard<'a, T> {}\n \n /// RAII structure used to release the exclusive write access of a lock when\n /// dropped.\n@@ -121,7 +123,10 @@ pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !marker::Send for RwLockWriteGuard<'a, T> {}\n+impl<'a, T: ?Sized> !Send for RwLockWriteGuard<'a, T> {}\n+\n+#[stable(feature = \"rwlock_guard_sync\", since = \"1.23.0\")]\n+unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockWriteGuard<'a, T> {}\n \n impl<T> RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked."}, {"sha": "d23cae40cfaff7317895bc5f2d8b7a05ef469051", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -215,36 +215,282 @@ impl OpenOptionsExt for OpenOptions {\n // casts and rely on manual lowering to `stat` if the raw type is desired.\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n+    /// Returns the ID of the device containing the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let dev_id = meta.dev();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn dev(&self) -> u64;\n+    /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let inode = meta.ino();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ino(&self) -> u64;\n+    /// Returns the rights applied to this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let mode = meta.mode();\n+    /// let user_has_write_access      = mode & 0o200;\n+    /// let user_has_read_write_access = mode & 0o600;\n+    /// let group_has_read_access      = mode & 0o040;\n+    /// let others_have_exec_access    = mode & 0o001;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n+    /// Returns the number of hard links pointing to this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nb_hard_links = meta.nlink();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn nlink(&self) -> u64;\n+    /// Returns the user ID of the owner of this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let user_id = meta.uid();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn uid(&self) -> u32;\n+    /// Returns the group ID of the owner of this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let group_id = meta.gid();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn gid(&self) -> u32;\n+    /// Returns the device ID of this file (if it is a special one).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let device_id = meta.rdev();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn rdev(&self) -> u64;\n+    /// Returns the total size of this file in bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let file_size = meta.size();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn size(&self) -> u64;\n+    /// Returns the time of the last access to the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let last_access_time = meta.atime();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime(&self) -> i64;\n+    /// Returns the time of the last access to the file in nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nano_last_access_time = meta.atime_nsec();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn atime_nsec(&self) -> i64;\n+    /// Returns the time of the last modification of the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let last_modification_time = meta.mtime();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime(&self) -> i64;\n+    /// Returns the time of the last modification of the file in nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nano_last_modification_time = meta.mtime_nsec();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn mtime_nsec(&self) -> i64;\n+    /// Returns the time of the last status change of the file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let last_status_change_time = meta.ctime();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime(&self) -> i64;\n+    /// Returns the time of the last status change of the file in nanoseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let nano_last_status_change_time = meta.ctime_nsec();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn ctime_nsec(&self) -> i64;\n+    /// Returns the blocksize for filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let blocksize = meta.blksize();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn blksize(&self) -> u64;\n+    /// Returns the number of blocks allocated to the file, in 512-byte units.\n+    ///\n+    /// Please note that this may be smaller than `st_size / 512` when the file has holes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::os::unix::fs::MetadataExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"some_file\")?;\n+    /// let blocks = meta.blocks();\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn blocks(&self) -> u64;\n }"}, {"sha": "ee49bf796b86f9d3da596c7c9d5ca85c58226a8a", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -25,11 +25,15 @@\n //!\n //! Fatal logic errors in Rust cause *thread panic*, during which\n //! a thread will unwind the stack, running destructors and freeing\n-//! owned resources. Thread panic is unrecoverable from within\n-//! the panicking thread (i.e. there is no 'try/catch' in Rust), but\n-//! the panic may optionally be detected from a different thread. If\n-//! the main thread panics, the application will exit with a non-zero\n-//! exit code.\n+//! owned resources. While not meant as a 'try/catch' mechanism, panics\n+//! in Rust can nonetheless be caught (unless compiling with `panic=abort`) with\n+//! [`catch_unwind`](../../std/panic/fn.catch_unwind.html) and recovered\n+//! from, or alternatively be resumed with\n+//! [`resume_unwind`](../../std/panic/fn.resume_unwind.html). If the panic\n+//! is not caught the thread will exit, but the panic may optionally be\n+//! detected from a different thread with [`join`]. If the main thread panics\n+//! without the panic being caught, the application will exit with a\n+//! non-zero exit code.\n //!\n //! When the main thread of a Rust program terminates, the entire program shuts\n //! down, even if other threads are still running. However, this module provides"}, {"sha": "5cb8e8694cfc75a4aaeb66304be0d3865a134654", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -1987,6 +1987,15 @@ impl<'a> State<'a> {\n             Fixity::None => (prec + 1, prec + 1),\n         };\n \n+        let left_prec = match (&lhs.node, op.node) {\n+            // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n+            // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n+            // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Lt) |\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Shl) => parser::PREC_FORCE_PAREN,\n+            _ => left_prec,\n+        };\n+\n         self.print_expr_maybe_paren(lhs, left_prec)?;\n         self.s.space()?;\n         self.word_space(op.node.to_string())?;"}, {"sha": "ec73bf90b6e524e550c8e54a814b597f46d2b795", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -21,7 +21,7 @@ struct not_parameterized2 {\n }\n \n fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }\n-//~^ ERROR mismatched types\n+//~^ ERROR explicit lifetime required in the type of `p`\n \n fn take3(p: not_parameterized1) -> not_parameterized1 { p }\n fn take4(p: not_parameterized2) -> not_parameterized2 { p }"}, {"sha": "b21158abfe551d53be911e1bbd635bdfce2f82eb", "filename": "src/test/pretty/cast-lt.pp", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -0,0 +1,24 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use std::prelude::v1::*;\n+#[macro_use]\n+extern crate std as std;\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:cast-lt.pp\n+\n+macro_rules! negative(( $ e : expr ) => { $ e < 0 });\n+\n+fn main() { (1 as i32) < 0; }\n+"}, {"sha": "87b5274545f385425b4b4ac682c7ef5c97bf587f", "filename": "src/test/pretty/cast-lt.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fpretty%2Fcast-lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fpretty%2Fcast-lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:cast-lt.pp\n+\n+macro_rules! negative {\n+      ($e:expr) => { $e < 0 }\n+}\n+\n+fn main() {\n+      negative!(1 as i32);\n+}\n+"}, {"sha": "478477dea61ed9b3fa54a36436cd764b77b93d15", "filename": "src/test/rustdoc/playground-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-arg.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -21,4 +21,4 @@\n pub fn dummy() {}\n \n // ensure that `extern crate foo;` was inserted into code snips automatically:\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=extern%20crate%20foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern%20crate%20foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D\"]' \"Run\""}, {"sha": "8e193efaf85047f95779e5df6629333add9f66fd", "filename": "src/test/rustdoc/playground.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Frustdoc%2Fplayground.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Frustdoc%2Fplayground.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -34,6 +34,6 @@\n //! }\n //! ```\n \n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=fn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A\"]' \"Run\"\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=fn%20main()%20%7B%0Aprintln!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A&version=nightly\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0Afn%20main()%20%7B%0Aprintln!(%22Hello%2C%20world!%22)%3B%0A%7D\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://www.example.com/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(something)%5D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22Hello%2C%20world!%22)%3B%0A%7D%0A&version=nightly\"]' \"Run\""}, {"sha": "55752f753ef126b94a3ac76effb62973f90dc766", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Clone)]\n+enum Foo<'a> {\n+    Bar(&'a str),\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar(&self, other: Foo) -> Foo<'a> {\n+        match *self {\n+            Foo::Bar(s) => {\n+                if s == \"test\" {\n+                    other\n+                } else {\n+                    self.clone()\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "d1660a620b6c74c22c6c75ef4ddca2bf935fa819", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-early-bound-in-struct.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-early-bound-in-struct.stderr?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `other`\n+  --> $DIR/ex1-return-one-existing-name-early-bound-in-struct.rs:21:21\n+   |\n+17 |     fn bar(&self, other: Foo) -> Foo<'a> {\n+   |                   ----- consider changing the type of `other` to `Foo<'a>`\n+...\n+21 |                     other\n+   |                     ^^^^^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d1820082093e544845749f91189054aa6be429f", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.rs?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "previous_filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-earlybound-regions.rs"}, {"sha": "980f14a51d9b1aa3e2d0c4011a7ba96dd81362a0", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name-early-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f6417e9b72de63666fd92caf1a6b96a778b60ed/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.stderr?ref=7f6417e9b72de63666fd92caf1a6b96a778b60ed", "patch": "@@ -0,0 +1,11 @@\n+error[E0621]: explicit lifetime required in the type of `y`\n+  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:12\n+   |\n+13 | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n+   |                                       - consider changing the type of `y` to `&'a T`\n+...\n+17 |     x.push(y);\n+   |            ^ lifetime `'a` required\n+\n+error: aborting due to previous error\n+"}, {"sha": "58f2cb94cec1d01ad5fac7bb350493a2ba50e8b5", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-earlybound-regions.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-earlybound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ade24f67201531778e7674b4b63ebf1a23c9643/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-earlybound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-earlybound-regions.stderr?ref=7ade24f67201531778e7674b4b63ebf1a23c9643", "patch": "@@ -1,11 +0,0 @@\n-error[E0623]: lifetime mismatch\n-  --> $DIR/ex3-both-anon-regions-earlybound-regions.rs:17:12\n-   |\n-13 | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n-   |                               -----      -- these two types are declared with different lifetimes...\n-...\n-17 |     x.push(y);\n-   |            ^ ...but data from `y` flows into `x` here\n-\n-error: aborting due to previous error\n-"}]}