{"sha": "e35e5c434b0c3301aa62d2d8648fd5decfdddb7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNWU1YzQzNGIwYzMzMDFhYTYyZDJkODY0OGZkNWRlY2ZkZGRiN2U=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-08T18:44:11Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-08T18:44:11Z"}, "message": "Rollup merge of #32092 - bluss:operator-overload, r=steveklabnik\n\nUpdate syntax index with OpAssign traits\n\nbook: Update syntax index with OpAssign traits\n\nThe traits are stable from Rust 1.8.", "tree": {"sha": "8d9f01ca55cda6e0b87b70a85a55981403cecf82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d9f01ca55cda6e0b87b70a85a55981403cecf82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e35e5c434b0c3301aa62d2d8648fd5decfdddb7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e35e5c434b0c3301aa62d2d8648fd5decfdddb7e", "html_url": "https://github.com/rust-lang/rust/commit/e35e5c434b0c3301aa62d2d8648fd5decfdddb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e35e5c434b0c3301aa62d2d8648fd5decfdddb7e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "477c4c37f0bab7d2d3e8752eb0ec58f00c618bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/477c4c37f0bab7d2d3e8752eb0ec58f00c618bfa", "html_url": "https://github.com/rust-lang/rust/commit/477c4c37f0bab7d2d3e8752eb0ec58f00c618bfa"}, {"sha": "63933375e872be96c9cf9b378b340e5babf553f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/63933375e872be96c9cf9b378b340e5babf553f7", "html_url": "https://github.com/rust-lang/rust/commit/63933375e872be96c9cf9b378b340e5babf553f7"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "3e889f51f542d2d7541933d62771d05942c3e6c6", "filename": "src/doc/book/syntax-index.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e35e5c434b0c3301aa62d2d8648fd5decfdddb7e/src%2Fdoc%2Fbook%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/e35e5c434b0c3301aa62d2d8648fd5decfdddb7e/src%2Fdoc%2Fbook%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-index.md?ref=e35e5c434b0c3301aa62d2d8648fd5decfdddb7e", "patch": "@@ -43,23 +43,23 @@\n * `!` (`!expr`): bitwise or logical complement.  Overloadable (`Not`).\n * `!=` (`var != expr`): nonequality comparison.  Overloadable (`PartialEq`).\n * `%` (`expr % expr`): arithmetic remainder.  Overloadable (`Rem`).\n-* `%=` (`var %= expr`): arithmetic remainder & assignment.\n+* `%=` (`var %= expr`): arithmetic remainder & assignment. Overloadable (`RemAssign`).\n * `&` (`expr & expr`): bitwise and.  Overloadable (`BitAnd`).\n * `&` (`&expr`): borrow.  See [References and Borrowing].\n * `&` (`&type`, `&mut type`, `&'a type`, `&'a mut type`): borrowed pointer type.  See [References and Borrowing].\n-* `&=` (`var &= expr`): bitwise and & assignment.\n+* `&=` (`var &= expr`): bitwise and & assignment. Overloadable (`BitAndAssign`).\n * `&&` (`expr && expr`): logical and.\n * `*` (`expr * expr`): arithmetic multiplication.  Overloadable (`Mul`).\n * `*` (`*expr`): dereference.\n * `*` (`*const type`, `*mut type`): raw pointer.  See [Raw Pointers].\n-* `*=` (`var *= expr`): arithmetic multiplication & assignment.\n+* `*=` (`var *= expr`): arithmetic multiplication & assignment. Overloadable (`MulAssign`).\n * `+` (`expr + expr`): arithmetic addition.  Overloadable (`Add`).\n * `+` (`trait + trait`, `'a + trait`): compound type constraint.  See [Traits (Multiple Trait Bounds)].\n-* `+=` (`var += expr`): arithmetic addition & assignment.\n+* `+=` (`var += expr`): arithmetic addition & assignment. Overloadable (`AddAssign`).\n * `,`: argument and element separator.  See [Attributes], [Functions], [Structs], [Generics], [Match], [Closures], [Crates and Modules (Importing Modules with `use`)].\n * `-` (`expr - expr`): arithmetic subtraction.  Overloadable (`Sub`).\n * `-` (`- expr`): arithmetic negation.  Overloadable (`Neg`).\n-* `-=` (`var -= expr`): arithmetic subtraction & assignment.\n+* `-=` (`var -= expr`): arithmetic subtraction & assignment. Overloadable (`SubAssign`).\n * `->` (`fn(\u2026) -> type`, `|\u2026| -> type`): function and closure return type.  See [Functions], [Closures].\n * `-> !` (`fn(\u2026) -> !`, `|\u2026| -> !`): diverging function or closure. See [Diverging Functions].\n * `.` (`expr.ident`): member access.  See [Structs], [Method Syntax].\n@@ -69,14 +69,14 @@\n * `...` (`...expr`, `expr...expr`) *in an expression*: inclusive range expression. See [Iterators].\n * `...` (`expr...expr`) *in a pattern*: inclusive range pattern.  See [Patterns (Ranges)].\n * `/` (`expr / expr`): arithmetic division.  Overloadable (`Div`).\n-* `/=` (`var /= expr`): arithmetic division & assignment.\n+* `/=` (`var /= expr`): arithmetic division & assignment. Overloadable (`DivAssign`).\n * `:` (`pat: type`, `ident: type`): constraints.  See [Variable Bindings], [Functions], [Structs], [Traits].\n * `:` (`ident: expr`): struct field initializer.  See [Structs].\n * `:` (`'a: loop {\u2026}`): loop label.  See [Loops (Loops Labels)].\n * `;`: statement and item terminator.\n * `;` (`[\u2026; len]`): part of fixed-size array syntax.  See [Primitive Types (Arrays)].\n * `<<` (`expr << expr`): left-shift.  Overloadable (`Shl`).\n-* `<<=` (`var <<= expr`): left-shift & assignment.\n+* `<<=` (`var <<= expr`): left-shift & assignment. Overloadable (`ShlAssign`).\n * `<` (`expr < expr`): less-than comparison.  Overloadable (`PartialOrd`).\n * `<=` (`var <= expr`): less-than or equal-to comparison.  Overloadable (`PartialOrd`).\n * `=` (`var = expr`, `ident = type`): assignment/equivalence.  See [Variable Bindings], [`type` Aliases], generic parameter defaults.\n@@ -85,14 +85,14 @@\n * `>` (`expr > expr`): greater-than comparison.  Overloadable (`PartialOrd`).\n * `>=` (`var >= expr`): greater-than or equal-to comparison.  Overloadable (`PartialOrd`).\n * `>>` (`expr >> expr`): right-shift.  Overloadable (`Shr`).\n-* `>>=` (`var >>= expr`): right-shift & assignment.\n+* `>>=` (`var >>= expr`): right-shift & assignment. Overloadable (`ShrAssign`).\n * `@` (`ident @ pat`): pattern binding.  See [Patterns (Bindings)].\n * `^` (`expr ^ expr`): bitwise exclusive or.  Overloadable (`BitXor`).\n-* `^=` (`var ^= expr`): bitwise exclusive or & assignment.\n+* `^=` (`var ^= expr`): bitwise exclusive or & assignment. Overloadable (`BitXorAssign`).\n * `|` (`expr | expr`): bitwise or.  Overloadable (`BitOr`).\n * `|` (`pat | pat`): pattern alternatives.  See [Patterns (Multiple patterns)].\n * `|` (`|\u2026| expr`): closures.  See [Closures].\n-* `|=` (`var |= expr`): bitwise or & assignment.\n+* `|=` (`var |= expr`): bitwise or & assignment. Overloadable (`BitOrAssign`).\n * `||` (`expr || expr`): logical or.\n * `_`: \"ignored\" pattern binding.  See [Patterns (Ignoring bindings)].\n "}]}