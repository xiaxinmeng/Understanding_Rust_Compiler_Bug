{"sha": "98b9eba316025ecd2fb2a2c9716f21813848ff03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YjllYmEzMTYwMjVlY2QyZmIyYTJjOTcxNmYyMTgxMzg0OGZmMDM=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-25T15:05:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:48Z"}, "message": "Rename TransItemCollectionMode to MonoItemCollectionMode", "tree": {"sha": "9c1fd554b5261eec703cd85536c3504a94a9b9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1fd554b5261eec703cd85536c3504a94a9b9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98b9eba316025ecd2fb2a2c9716f21813848ff03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98b9eba316025ecd2fb2a2c9716f21813848ff03", "html_url": "https://github.com/rust-lang/rust/commit/98b9eba316025ecd2fb2a2c9716f21813848ff03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98b9eba316025ecd2fb2a2c9716f21813848ff03/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1181f45813428f77c0be077c2d06c28646266280", "url": "https://api.github.com/repos/rust-lang/rust/commits/1181f45813428f77c0be077c2d06c28646266280", "html_url": "https://github.com/rust-lang/rust/commit/1181f45813428f77c0be077c2d06c28646266280"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "3cc0daf398ad873c5665dc521408ccecef75d2c5", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=98b9eba316025ecd2fb2a2c9716f21813848ff03", "patch": "@@ -214,7 +214,7 @@ use rustc_data_structures::bitvec::BitVector;\n use syntax::attr;\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n-pub enum TransItemCollectionMode {\n+pub enum MonoItemCollectionMode {\n     Eager,\n     Lazy\n }\n@@ -296,7 +296,7 @@ impl<'tcx> InliningMap<'tcx> {\n }\n \n pub fn collect_crate_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                 mode: TransItemCollectionMode)\n+                                                 mode: MonoItemCollectionMode)\n                                                  -> (FxHashSet<MonoItem<'tcx>>,\n                                                      InliningMap<'tcx>) {\n     let roots = collect_roots(tcx, mode);\n@@ -320,7 +320,7 @@ pub fn collect_crate_translation_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           mode: TransItemCollectionMode)\n+                           mode: MonoItemCollectionMode)\n                            -> Vec<MonoItem<'tcx>> {\n     debug!(\"Collecting roots\");\n     let mut roots = Vec::new();\n@@ -880,7 +880,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mode: TransItemCollectionMode,\n+    mode: MonoItemCollectionMode,\n     output: &'b mut Vec<MonoItem<'tcx>>,\n     entry_fn: Option<DefId>,\n }\n@@ -900,7 +900,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             }\n \n             hir::ItemImpl(..) => {\n-                if self.mode == TransItemCollectionMode::Eager {\n+                if self.mode == MonoItemCollectionMode::Eager {\n                     create_trans_items_for_default_impls(self.tcx,\n                                                          item,\n                                                          self.output);\n@@ -911,7 +911,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemStruct(_, ref generics) |\n             hir::ItemUnion(_, ref generics) => {\n                 if !generics.is_parameterized() {\n-                    if self.mode == TransItemCollectionMode::Eager {\n+                    if self.mode == MonoItemCollectionMode::Eager {\n                         let def_id = self.tcx.hir.local_def_id(item.id);\n                         debug!(\"RootCollector: ADT drop-glue for {}\",\n                                def_id_to_string(self.tcx, def_id));\n@@ -979,10 +979,10 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     fn is_root(&self, def_id: DefId) -> bool {\n         !item_has_type_parameters(self.tcx, def_id) && match self.mode {\n-            TransItemCollectionMode::Eager => {\n+            MonoItemCollectionMode::Eager => {\n                 true\n             }\n-            TransItemCollectionMode::Lazy => {\n+            MonoItemCollectionMode::Lazy => {\n                 self.entry_fn == Some(def_id) ||\n                 self.tcx.is_exported_symbol(def_id) ||\n                 attr::contains_name(&self.tcx.get_attrs(def_id),"}, {"sha": "82faba5286f904656763de48758015845754454c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98b9eba316025ecd2fb2a2c9716f21813848ff03/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=98b9eba316025ecd2fb2a2c9716f21813848ff03", "patch": "@@ -55,7 +55,7 @@ use attributes;\n use builder::Builder;\n use callee;\n use common::{C_bool, C_bytes_in_context, C_i32, C_usize};\n-use rustc_mir::monomorphize::collector::{self, TransItemCollectionMode};\n+use rustc_mir::monomorphize::collector::{self, MonoItemCollectionMode};\n use common::{self, C_struct_in_context, C_array, CrateContext, val_ty};\n use consts;\n use context::{self, LocalCrateContext, SharedCrateContext};\n@@ -1002,7 +1002,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n             let mode_string = s.to_lowercase();\n             let mode_string = mode_string.trim();\n             if mode_string == \"eager\" {\n-                TransItemCollectionMode::Eager\n+                MonoItemCollectionMode::Eager\n             } else {\n                 if mode_string != \"lazy\" {\n                     let message = format!(\"Unknown codegen-item collection mode '{}'. \\\n@@ -1011,10 +1011,10 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n                     tcx.sess.warn(&message);\n                 }\n \n-                TransItemCollectionMode::Lazy\n+                MonoItemCollectionMode::Lazy\n             }\n         }\n-        None => TransItemCollectionMode::Lazy\n+        None => MonoItemCollectionMode::Lazy\n     };\n \n     let (items, inlining_map) ="}]}