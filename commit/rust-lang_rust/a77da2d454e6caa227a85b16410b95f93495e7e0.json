{"sha": "a77da2d454e6caa227a85b16410b95f93495e7e0", "node_id": "C_kwDOAAsO6NoAKGE3N2RhMmQ0NTRlNmNhYTIyN2E4NWIxNjQxMGI5NWY5MzQ5NWU3ZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-19T18:04:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-19T18:04:14Z"}, "message": "Auto merge of #91034 - camelid:docfragment, r=jyn514\n\nrustdoc: Cleanup `DocFragment`\n\n- Remove unused `DocFragment.line` field\n- Avoid using `Iterator::count()` where possible", "tree": {"sha": "7f97eb33d52c9e4bf0ae0c737ec8c9019b47eb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f97eb33d52c9e4bf0ae0c737ec8c9019b47eb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77da2d454e6caa227a85b16410b95f93495e7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77da2d454e6caa227a85b16410b95f93495e7e0", "html_url": "https://github.com/rust-lang/rust/commit/a77da2d454e6caa227a85b16410b95f93495e7e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77da2d454e6caa227a85b16410b95f93495e7e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fa4342fc215fe9e714307db694eaa8f5dc4a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fa4342fc215fe9e714307db694eaa8f5dc4a0d", "html_url": "https://github.com/rust-lang/rust/commit/18fa4342fc215fe9e714307db694eaa8f5dc4a0d"}, {"sha": "7a4e2ceb922b4b0861735b333f9c983ebed7029f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4e2ceb922b4b0861735b333f9c983ebed7029f", "html_url": "https://github.com/rust-lang/rust/commit/7a4e2ceb922b4b0861735b333f9c983ebed7029f"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "41ebf270ba63015e3f39a92078e0e967bff7cd23", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a77da2d454e6caa227a85b16410b95f93495e7e0", "patch": "@@ -906,7 +906,6 @@ impl<I: Iterator<Item = ast::NestedMetaItem> + IntoIterator<Item = ast::NestedMe\n /// kept separate because of issue #42760.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate struct DocFragment {\n-    crate line: usize,\n     crate span: rustc_span::Span,\n     /// The module this doc-comment came from.\n     ///\n@@ -1027,7 +1026,6 @@ impl Attributes {\n         additional_attrs: Option<(&[ast::Attribute], DefId)>,\n     ) -> Attributes {\n         let mut doc_strings: Vec<DocFragment> = vec![];\n-        let mut doc_line = 0;\n \n         fn update_need_backline(doc_strings: &mut Vec<DocFragment>) {\n             if let Some(prev) = doc_strings.last_mut() {\n@@ -1045,10 +1043,7 @@ impl Attributes {\n                     DocFragmentKind::RawDoc\n                 };\n \n-                let line = doc_line;\n-                doc_line += value.as_str().lines().count();\n                 let frag = DocFragment {\n-                    line,\n                     span: attr.span,\n                     doc: value,\n                     kind,"}, {"sha": "d811c85ea58d1df2ac9ba658241d0431d1f9c3b5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a77da2d454e6caa227a85b16410b95f93495e7e0", "patch": "@@ -656,7 +656,7 @@ impl<'a, I> Footnotes<'a, I> {\n     }\n \n     fn get_entry(&mut self, key: &str) -> &mut (Vec<Event<'a>>, u16) {\n-        let new_id = self.footnotes.keys().count() + 1;\n+        let new_id = self.footnotes.len() + 1;\n         let key = key.to_owned();\n         self.footnotes.entry(key).or_insert((Vec::new(), new_id as u16))\n     }"}, {"sha": "97f4f941e06861ac095f7e82ba6cc69c5ccbf148", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=a77da2d454e6caa227a85b16410b95f93495e7e0", "patch": "@@ -1,5 +1,7 @@\n use std::cmp;\n \n+use rustc_span::symbol::kw;\n+\n use crate::clean::{self, DocFragment, DocFragmentKind, Item};\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n@@ -87,7 +89,7 @@ fn unindent_fragments(docs: &mut Vec<DocFragment>) {\n     };\n \n     for fragment in docs {\n-        if fragment.doc.as_str().lines().count() == 0 {\n+        if fragment.doc == kw::Empty {\n             continue;\n         }\n "}, {"sha": "daec04e11cd180b409308c9c7325944049c38f2d", "filename": "src/librustdoc/passes/unindent_comments/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77da2d454e6caa227a85b16410b95f93495e7e0/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs?ref=a77da2d454e6caa227a85b16410b95f93495e7e0", "patch": "@@ -5,7 +5,6 @@ use rustc_span::symbol::Symbol;\n \n fn create_doc_fragment(s: &str) -> Vec<DocFragment> {\n     vec![DocFragment {\n-        line: 0,\n         span: DUMMY_SP,\n         parent_module: None,\n         doc: Symbol::intern(s),"}]}