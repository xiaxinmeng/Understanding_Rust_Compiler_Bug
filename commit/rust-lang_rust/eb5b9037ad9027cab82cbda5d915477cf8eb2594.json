{"sha": "eb5b9037ad9027cab82cbda5d915477cf8eb2594", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNWI5MDM3YWQ5MDI3Y2FiODJjYmRhNWQ5MTU0NzdjZjhlYjI1OTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-01-05T22:38:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-02-07T12:03:32Z"}, "message": "Add compile-fail test in rustdoc", "tree": {"sha": "e8fe5c0d8f793f71fccdf918a2f829aa1fbd5ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fe5c0d8f793f71fccdf918a2f829aa1fbd5ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5b9037ad9027cab82cbda5d915477cf8eb2594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5b9037ad9027cab82cbda5d915477cf8eb2594", "html_url": "https://github.com/rust-lang/rust/commit/eb5b9037ad9027cab82cbda5d915477cf8eb2594", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5b9037ad9027cab82cbda5d915477cf8eb2594/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ef74026690cffccb543fc274d73a078eba797d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ef74026690cffccb543fc274d73a078eba797d", "html_url": "https://github.com/rust-lang/rust/commit/d0ef74026690cffccb543fc274d73a078eba797d"}], "stats": {"total": 246, "additions": 183, "deletions": 63}, "files": [{"sha": "2271e55ee2858dfde1a11bd7cf4c093ca8e9fe5a", "filename": "src/error-index-generator/main.rs", "status": "modified", "additions": 120, "deletions": 34, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Ferror-index-generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Ferror-index-generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror-index-generator%2Fmain.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -21,37 +21,41 @@ use std::env;\n use std::path::Path;\n use std::error::Error;\n \n-use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap};\n+use syntax::diagnostics::metadata::{get_metadata_dir, ErrorMetadataMap, ErrorMetadata};\n \n use rustdoc::html::markdown::Markdown;\n use rustc_serialize::json;\n \n-/// Load all the metadata files from `metadata_dir` into an in-memory map.\n-fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>> {\n-    let mut all_errors = BTreeMap::new();\n-\n-    for entry in try!(read_dir(metadata_dir)) {\n-        let path = try!(entry).path();\n-\n-        let mut metadata_str = String::new();\n-        try!(File::open(&path).and_then(|mut f| f.read_to_string(&mut metadata_str)));\n-\n-        let some_errors: ErrorMetadataMap = try!(json::decode(&metadata_str));\n+enum OutputFormat {\n+    HTML(HTMLFormatter),\n+    Markdown(MarkdownFormatter),\n+    Unknown(String),\n+}\n \n-        for (err_code, info) in some_errors {\n-            all_errors.insert(err_code, info);\n+impl OutputFormat {\n+    fn from(format: &str) -> OutputFormat {\n+        match &*format.to_lowercase() {\n+            \"html\"     => OutputFormat::HTML(HTMLFormatter),\n+            \"markdown\" => OutputFormat::Markdown(MarkdownFormatter),\n+            s          => OutputFormat::Unknown(s.to_owned()),\n         }\n     }\n+}\n \n-    Ok(all_errors)\n+trait Formatter {\n+    fn header(&self, output: &mut Write) -> Result<(), Box<Error>>;\n+    fn title(&self, output: &mut Write) -> Result<(), Box<Error>>;\n+    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<Error>>;\n+    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>>;\n }\n \n-/// Output an HTML page for the errors in `err_map` to `output_path`.\n-fn render_error_page(err_map: &ErrorMetadataMap, output_path: &Path) -> Result<(), Box<Error>> {\n-    let mut output_file = try!(File::create(output_path));\n+struct HTMLFormatter;\n+struct MarkdownFormatter;\n \n-    try!(write!(&mut output_file,\n-r##\"<!DOCTYPE html>\n+impl Formatter for HTMLFormatter {\n+    fn header(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+        try!(write!(output, r##\"<!DOCTYPE html>\n <html>\n <head>\n <title>Rust Compiler Error Index</title>\n@@ -66,12 +70,17 @@ r##\"<!DOCTYPE html>\n </style>\n </head>\n <body>\n-\"##\n-    ));\n+\"##));\n+        Ok(())\n+    }\n \n-    try!(write!(&mut output_file, \"<h1>Rust Compiler Error Index</h1>\\n\"));\n+    fn title(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+        try!(write!(output, \"<h1>Rust Compiler Error Index</h1>\\n\"));\n+        Ok(())\n+    }\n \n-    for (err_code, info) in err_map {\n+    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<Error>> {\n         // Enclose each error in a div so they can be shown/hidden en masse.\n         let desc_desc = match info.description {\n             Some(_) => \"error-described\",\n@@ -81,37 +90,114 @@ r##\"<!DOCTYPE html>\n             Some(_) => \"error-used\",\n             None => \"error-unused\",\n         };\n-        try!(write!(&mut output_file, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc));\n+        try!(write!(output, \"<div class=\\\"{} {}\\\">\", desc_desc, use_desc));\n \n         // Error title (with self-link).\n-        try!(write!(&mut output_file,\n+        try!(write!(output,\n                     \"<h2 id=\\\"{0}\\\" class=\\\"section-header\\\"><a href=\\\"#{0}\\\">{0}</a></h2>\\n\",\n                     err_code));\n \n         // Description rendered as markdown.\n         match info.description {\n-            Some(ref desc) => try!(write!(&mut output_file, \"{}\", Markdown(desc))),\n-            None => try!(write!(&mut output_file, \"<p>No description.</p>\\n\")),\n+            Some(ref desc) => try!(write!(output, \"{}\", Markdown(desc))),\n+            None => try!(write!(output, \"<p>No description.</p>\\n\")),\n         }\n \n-        try!(write!(&mut output_file, \"</div>\\n\"));\n+        try!(write!(output, \"</div>\\n\"));\n+        Ok(())\n     }\n \n-    try!(write!(&mut output_file, \"</body>\\n</html>\"));\n+    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+        try!(write!(output, \"</body>\\n</html>\"));\n+        Ok(())\n+    }\n+}\n \n-    Ok(())\n+impl Formatter for MarkdownFormatter {\n+    #[allow(unused_variables)]\n+    fn header(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+        Ok(())\n+    }\n+\n+    fn title(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+        try!(write!(output, \"# Rust Compiler Error Index\\n\"));\n+        Ok(())\n+    }\n+\n+    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<Error>> {\n+        Ok(match info.description {\n+            Some(ref desc) => try!(write!(output, \"## {}\\n{}\\n\", err_code, desc)),\n+            None => (),\n+        })\n+    }\n+\n+    #[allow(unused_variables)]\n+    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+        Ok(())\n+    }\n+}\n+\n+/// Load all the metadata files from `metadata_dir` into an in-memory map.\n+fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>> {\n+    let mut all_errors = BTreeMap::new();\n+\n+    for entry in try!(read_dir(metadata_dir)) {\n+        let path = try!(entry).path();\n+\n+        let mut metadata_str = String::new();\n+        try!(File::open(&path).and_then(|mut f| f.read_to_string(&mut metadata_str)));\n+\n+        let some_errors: ErrorMetadataMap = try!(json::decode(&metadata_str));\n+\n+        for (err_code, info) in some_errors {\n+            all_errors.insert(err_code, info);\n+        }\n+    }\n+\n+    Ok(all_errors)\n+}\n+\n+/// Output an HTML page for the errors in `err_map` to `output_path`.\n+fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Path,\n+                                   formatter: T) -> Result<(), Box<Error>> {\n+    let mut output_file = try!(File::create(output_path));\n+\n+    try!(formatter.header(&mut output_file));\n+    try!(formatter.title(&mut output_file));\n+\n+    for (err_code, info) in err_map {\n+        try!(formatter.error_code_block(&mut output_file, info, err_code));\n+    }\n+\n+    formatter.footer(&mut output_file)\n }\n \n-fn main_with_result() -> Result<(), Box<Error>> {\n+fn main_with_result(format: OutputFormat) -> Result<(), Box<Error>> {\n     let build_arch = try!(env::var(\"CFG_BUILD\"));\n     let metadata_dir = get_metadata_dir(&build_arch);\n     let err_map = try!(load_all_errors(&metadata_dir));\n-    try!(render_error_page(&err_map, Path::new(\"doc/error-index.html\")));\n+    match format {\n+        OutputFormat::Unknown(s)    => panic!(\"Unknown output format: {}\", s),\n+        OutputFormat::HTML(h)       => try!(render_error_page(&err_map,\n+                                                              Path::new(\"doc/error-index.html\"),\n+                                                              h)),\n+        OutputFormat::Markdown(m)   => try!(render_error_page(&err_map,\n+                                                              Path::new(\"doc/error-index.html\"),\n+                                                              m)),\n+    }\n     Ok(())\n }\n \n+fn parse_args() -> OutputFormat {\n+    for arg in env::args().skip(1) {\n+        return OutputFormat::from(&arg);\n+    }\n+    OutputFormat::from(\"html\")\n+}\n+\n fn main() {\n-    if let Err(e) = main_with_result() {\n+    if let Err(e) = main_with_result(parse_args()) {\n         panic!(\"{}\", e.description());\n     }\n }"}, {"sha": "dd1fd02ecb3bfa055944be19a43f95c72be33630", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -65,7 +65,7 @@ pub fn compile_input(sess: &Session,\n                      outdir: &Option<PathBuf>,\n                      output: &Option<PathBuf>,\n                      addl_plugins: Option<Vec<String>>,\n-                     control: CompileController) -> CompileResult {\n+                     control: &CompileController) -> CompileResult {\n     macro_rules! controller_entry_point {\n         ($point: ident, $tsess: expr, $make_state: expr, $phase_result: expr) => {{\n             let state = $make_state;"}, {"sha": "be14bab1f263b037be8a2d589733482a892aa2cd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -199,7 +199,7 @@ pub fn run_compiler<'a>(args: &[String],\n     let plugins = sess.opts.debugging_opts.extra_plugins.clone();\n     let control = callbacks.build_controller(&sess);\n     (driver::compile_input(&sess, &cstore, cfg, &input, &odir, &ofile,\n-                           Some(plugins), control),\n+                           Some(plugins), &control),\n      Some(sess))\n }\n "}, {"sha": "e919911e6fd84ef3247c2b80bcacde5008824eb7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -400,7 +400,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n-                           block_info.ignore, block_info.test_harness);\n+                           block_info.ignore, block_info.test_harness,\n+                           block_info.compile_fail);\n         }\n     }\n \n@@ -445,6 +446,7 @@ struct LangString {\n     ignore: bool,\n     rust: bool,\n     test_harness: bool,\n+    compile_fail: bool,\n }\n \n impl LangString {\n@@ -455,6 +457,7 @@ impl LangString {\n             ignore: false,\n             rust: true,  // NB This used to be `notrust = false`\n             test_harness: false,\n+            compile_fail: false,\n         }\n     }\n \n@@ -474,7 +477,9 @@ impl LangString {\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = true; },\n                 \"ignore\" => { data.ignore = true; seen_rust_tags = true; },\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; },\n-                \"test_harness\" => { data.test_harness = true; seen_rust_tags = true; }\n+                \"test_harness\" => { data.test_harness = true; seen_rust_tags = true; },\n+                \"compile_fail\" => { data.compile_fail = true; seen_rust_tags = true;\n+                                    data.no_run = true; },\n                 _ => { seen_other_tags = true }\n             }\n         }\n@@ -557,28 +562,31 @@ mod tests {\n     #[test]\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n-            should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool) {\n+            should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n+            compile_fail: bool) {\n             assert_eq!(LangString::parse(s), LangString {\n                 should_panic: should_panic,\n                 no_run: no_run,\n                 ignore: ignore,\n                 rust: rust,\n                 test_harness: test_harness,\n+                compile_fail: compile_fail,\n             })\n         }\n \n-        // marker                | should_panic| no_run | ignore | rust | test_harness\n-        t(\"\",                      false,        false,   false,   true,  false);\n-        t(\"rust\",                  false,        false,   false,   true,  false);\n-        t(\"sh\",                    false,        false,   false,   false, false);\n-        t(\"ignore\",                false,        false,   true,    true,  false);\n-        t(\"should_panic\",          true,         false,   false,   true,  false);\n-        t(\"no_run\",                false,        true,    false,   true,  false);\n-        t(\"test_harness\",          false,        false,   false,   true,  true);\n-        t(\"{.no_run .example}\",    false,        true,    false,   true,  false);\n-        t(\"{.sh .should_panic}\",   true,         false,   false,   true,  false);\n-        t(\"{.example .rust}\",      false,        false,   false,   true,  false);\n-        t(\"{.test_harness .rust}\", false,        false,   false,   true,  true);\n+        // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n+        t(\"\",                      false,        false,  false,  true,  false,        false);\n+        t(\"rust\",                  false,        false,  false,  true,  false,        false);\n+        t(\"sh\",                    false,        false,  false,  false, false,        false);\n+        t(\"ignore\",                false,        false,  true,   true,  false,        false);\n+        t(\"should_panic\",          true,         false,  false,  true,  false,        false);\n+        t(\"no_run\",                false,        true,   false,  true,  false,        false);\n+        t(\"test_harness\",          false,        false,  false,  true,  true,         false);\n+        t(\"compile_fail\",          false,        false,  false,  true,  false,        true);\n+        t(\"{.no_run .example}\",    false,        true,   false,  true,  false,        false);\n+        t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false,        false);\n+        t(\"{.example .rust}\",      false,        false,  false,  true,  false,        false);\n+        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,         false);\n     }\n \n     #[test]"}, {"sha": "6cad0d7d940d7e26cc9e99b72c44b9dd6600b777", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -22,10 +22,12 @@\n #![feature(box_syntax)]\n #![feature(dynamic_lib)]\n #![feature(libc)]\n+#![feature(recover)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n+#![feature(std_panic)]\n #![feature(test)]\n #![feature(unicode)]\n "}, {"sha": "36878e7b46833c1a064739812b02a5ec6bc433c1", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -18,6 +18,7 @@ use std::ffi::OsString;\n use std::io::prelude::*;\n use std::io;\n use std::path::PathBuf;\n+use std::panic::{self, AssertRecoverSafe};\n use std::process::Command;\n use std::rc::Rc;\n use std::str;\n@@ -175,7 +176,7 @@ fn scrape_test_config(krate: &::rustc_front::hir::Crate) -> TestOptions {\n fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n            externs: core::Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n-           opts: &TestOptions) {\n+           compile_fail: bool, opts: &TestOptions) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), as_test_harness, opts);\n@@ -241,19 +242,41 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n                                        cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n-    let outdir = TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\");\n-    let out = Some(outdir.path().to_path_buf());\n-    let mut cfg = config::build_configuration(&sess);\n-    cfg.extend(config::parse_cfgspecs(cfgs));\n+    let outdir = Mutex::new(TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\"));\n     let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n     let mut control = driver::CompileController::basic();\n+    let mut cfg = config::build_configuration(&sess);\n+    cfg.extend(config::parse_cfgspecs(cfgs.clone()));\n+    let out = Some(outdir.lock().unwrap().path().to_path_buf());\n+\n     if no_run {\n         control.after_analysis.stop = Compilation::Stop;\n     }\n-    let result = driver::compile_input(&sess, &cstore, cfg, &input,\n-                                       &out, &None, None, control);\n-    match result {\n-        Err(count) if count > 0 => sess.fatal(\"aborting due to previous error(s)\"),\n+\n+    match {\n+        let b_sess = AssertRecoverSafe::new(&sess);\n+        let b_cstore = AssertRecoverSafe::new(&cstore);\n+        let b_cfg = AssertRecoverSafe::new(cfg.clone());\n+        let b_input = AssertRecoverSafe::new(&input);\n+        let b_out = AssertRecoverSafe::new(&out);\n+        let b_control = AssertRecoverSafe::new(&control);\n+\n+        panic::recover(|| {\n+            AssertRecoverSafe::new(driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),\n+                                                         &b_input, &b_out,\n+                                                         &None, None, &b_control))\n+        })\n+    } {\n+        Ok(r) => {\n+            match *r {\n+                Err(count) if count > 0 && compile_fail == false => {\n+                    sess.fatal(\"aborting due to previous error(s)\")\n+                }\n+                Ok(()) if compile_fail => panic!(\"test compiled while it wasn't supposed to\"),\n+                _ => {}\n+            }\n+        }\n+        Err(_) if compile_fail == false => panic!(\"couldn't compile the test\"),\n         _ => {}\n     }\n \n@@ -265,7 +288,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     // environment to ensure that the target loads the right libraries at\n     // runtime. It would be a sad day if the *host* libraries were loaded as a\n     // mistake.\n-    let mut cmd = Command::new(&outdir.path().join(\"rust_out\"));\n+    let mut cmd = Command::new(&outdir.lock().unwrap().path().join(\"rust_out\"));\n     let var = DynamicLibrary::envvar();\n     let newpath = {\n         let path = env::var_os(var).unwrap_or(OsString::new());\n@@ -389,7 +412,7 @@ impl Collector {\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n-                    as_test_harness: bool) {\n+                    as_test_harness: bool, compile_fail: bool) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -419,6 +442,7 @@ impl Collector {\n                         should_panic,\n                         no_run,\n                         as_test_harness,\n+                        compile_fail,\n                         &opts);\n             }))\n         });"}, {"sha": "43ae356feede66dbac5a6c19d6bcf29b51f26000", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5b9037ad9027cab82cbda5d915477cf8eb2594/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=eb5b9037ad9027cab82cbda5d915477cf8eb2594", "patch": "@@ -71,5 +71,5 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n             &None,\n             &Some(output),\n             None,\n-            control);\n+            &control);\n }"}]}