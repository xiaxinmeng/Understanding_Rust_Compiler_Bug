{"sha": "8fdc72f830642abcd8dfefe5437e7df34390ce19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZGM3MmY4MzA2NDJhYmNkOGRmZWZlNTQzN2U3ZGYzNDM5MGNlMTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-08T22:42:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-08T22:44:24Z"}, "message": "track MIR through the dep-graph\n\nPer the discussion on #34765, we make one `DepNode::Mir` variant and use\nit to represent both the MIR tracking map as well as passes that operate\non MIR. We also track loads of cached MIR (which naturally comes from\nmetadata).\n\nNote that the \"HAIR\" pass adds a read of TypeckItemBody because it uses\na myriad of tables that are not individually tracked.", "tree": {"sha": "d86ef07043d672c744aad4bb1489939ee4dcfd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d86ef07043d672c744aad4bb1489939ee4dcfd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fdc72f830642abcd8dfefe5437e7df34390ce19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdc72f830642abcd8dfefe5437e7df34390ce19", "html_url": "https://github.com/rust-lang/rust/commit/8fdc72f830642abcd8dfefe5437e7df34390ce19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fdc72f830642abcd8dfefe5437e7df34390ce19/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b2e9a66d6e95dde14742c0d3b05cde3683a732", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b2e9a66d6e95dde14742c0d3b05cde3683a732", "html_url": "https://github.com/rust-lang/rust/commit/88b2e9a66d6e95dde14742c0d3b05cde3683a732"}], "stats": {"total": 183, "additions": 127, "deletions": 56}, "files": [{"sha": "907c4ec774af9c9fd2f5a25aeec408f5a2a3a95d", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -82,9 +82,11 @@ pub enum DepNode<D: Clone + Debug> {\n     Privacy,\n     IntrinsicCheck(D),\n     MatchCheck(D),\n-    MirMapConstruction(D),\n-    MirPass(D),\n-    MirTypeck(D),\n+\n+    // Represents the MIR for a fn; also used as the task node for\n+    // things read/modify that MIR.\n+    Mir(D),\n+\n     BorrowCheck(D),\n     RvalueCheck(D),\n     Reachability,\n@@ -214,9 +216,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             CheckConst(ref d) => op(d).map(CheckConst),\n             IntrinsicCheck(ref d) => op(d).map(IntrinsicCheck),\n             MatchCheck(ref d) => op(d).map(MatchCheck),\n-            MirMapConstruction(ref d) => op(d).map(MirMapConstruction),\n-            MirPass(ref d) => op(d).map(MirPass),\n-            MirTypeck(ref d) => op(d).map(MirTypeck),\n+            Mir(ref d) => op(d).map(Mir),\n             BorrowCheck(ref d) => op(d).map(BorrowCheck),\n             RvalueCheck(ref d) => op(d).map(RvalueCheck),\n             TransCrateItem(ref d) => op(d).map(TransCrateItem),"}, {"sha": "88cd1efd3459ac6f703ea35c57f45ac3a5e4d66d", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -61,6 +61,12 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n         self.map.get(k)\n     }\n \n+    pub fn get_mut(&mut self, k: &M::Key) -> Option<&mut M::Value> {\n+        self.read(k);\n+        self.write(k);\n+        self.map.get_mut(k)\n+    }\n+\n     pub fn insert(&mut self, k: M::Key, v: M::Value) -> Option<M::Value> {\n         self.write(&k);\n         self.map.insert(k, v)\n@@ -70,6 +76,10 @@ impl<M: DepTrackingMapConfig> DepTrackingMap<M> {\n         self.read(k);\n         self.map.contains_key(k)\n     }\n+\n+    pub fn keys(&self) -> Vec<M::Key> {\n+        self.map.keys().cloned().collect()\n+    }\n }\n \n impl<M: DepTrackingMapConfig> MemoizationMap for RefCell<DepTrackingMap<M>> {"}, {"sha": "92de65798d3cbb18db8277631034ce72439f3f6d", "filename": "src/librustc/mir/mir_map.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fmir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fmir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmir_map.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -8,9 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use util::nodemap::NodeMap;\n+use dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig};\n+use hir::def_id::DefId;\n use mir::repr::Mir;\n+use std::marker::PhantomData;\n \n pub struct MirMap<'tcx> {\n-    pub map: NodeMap<Mir<'tcx>>,\n+    pub map: DepTrackingMap<MirMapConfig<'tcx>>,\n+}\n+\n+impl<'tcx> MirMap<'tcx> {\n+    pub fn new(graph: DepGraph) -> Self {\n+        MirMap {\n+            map: DepTrackingMap::new(graph)\n+        }\n+    }\n+}\n+\n+pub struct MirMapConfig<'tcx> {\n+    data: PhantomData<&'tcx ()>\n+}\n+\n+impl<'tcx> DepTrackingMapConfig for MirMapConfig<'tcx> {\n+    type Key = DefId;\n+    type Value = Mir<'tcx>;\n+    fn to_dep_node(key: &DefId) -> DepNode<DefId> {\n+        DepNode::Mir(*key)\n+    }\n }"}, {"sha": "57601e67504328f7f422a631be2c174c61852781", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -11,7 +11,6 @@\n use dep_graph::DepNode;\n use hir;\n use hir::map::DefPathData;\n-use hir::def_id::DefId;\n use mir::mir_map::MirMap;\n use mir::repr::{Mir, Promoted};\n use ty::TyCtxt;\n@@ -73,9 +72,6 @@ impl<'a, 'tcx> MirSource {\n /// Various information about pass.\n pub trait Pass {\n     // fn should_run(Session) to check if pass should run?\n-    fn dep_node(&self, def_id: DefId) -> DepNode<DefId> {\n-        DepNode::MirPass(def_id)\n-    }\n     fn name(&self) -> &str {\n         let name = unsafe { ::std::intrinsics::type_name::<Self>() };\n         if let Some(tail) = name.rfind(\":\") {\n@@ -119,10 +115,11 @@ impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n                     map: &mut MirMap<'tcx>,\n                     hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n     {\n-        for (&id, mir) in &mut map.map {\n-            let def_id = tcx.map.local_def_id(id);\n-            let _task = tcx.dep_graph.in_task(self.dep_node(def_id));\n-\n+        let def_ids = map.map.keys();\n+        for def_id in def_ids {\n+            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n+            let mir = map.map.get_mut(&def_id).unwrap();\n+            let id = tcx.map.as_local_node_id(def_id).unwrap();\n             let src = MirSource::from_node(tcx, id);\n \n             for hook in &mut *hooks {"}, {"sha": "4b9562ca299fd15327a6574ba364284b91b38f77", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -168,8 +168,10 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n                attributes: &[ast::Attribute]) {\n     debug!(\"borrowck_fn(id={})\", id);\n \n+    let def_id = this.tcx.map.local_def_id(id);\n+\n     if attributes.iter().any(|item| item.check_name(\"rustc_mir_borrowck\")) {\n-        let mir = this.mir_map.unwrap().map.get(&id).unwrap();\n+        let mir = this.mir_map.unwrap().map.get(&def_id).unwrap();\n         this.with_temp_region_map(id, |this| {\n             mir::borrowck_mir(this, fk, decl, mir, body, sp, id, attributes)\n         });"}, {"sha": "e3e06963ad43bf59f242c1025decbd173fe729ff", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -956,20 +956,24 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n             PpmMir | PpmMirCFG => {\n                 if let Some(mir_map) = mir_map {\n                     if let Some(nodeid) = nodeid {\n-                        let mir = mir_map.map.get(&nodeid).unwrap_or_else(|| {\n-                            sess.fatal(&format!(\"no MIR map entry for node {}\", nodeid))\n-                        });\n+                        let def_id = tcx.map.local_def_id(nodeid);\n                         match ppm {\n-                            PpmMir => write_mir_pretty(tcx, iter::once((&nodeid, mir)), &mut out),\n+                            PpmMir => write_mir_pretty(tcx, iter::once(def_id), &mir_map, &mut out),\n                             PpmMirCFG => {\n-                                write_mir_graphviz(tcx, iter::once((&nodeid, mir)), &mut out)\n+                                write_mir_graphviz(tcx, iter::once(def_id), &mir_map, &mut out)\n                             }\n                             _ => unreachable!(),\n                         }?;\n                     } else {\n                         match ppm {\n-                            PpmMir => write_mir_pretty(tcx, mir_map.map.iter(), &mut out),\n-                            PpmMirCFG => write_mir_graphviz(tcx, mir_map.map.iter(), &mut out),\n+                            PpmMir => write_mir_pretty(tcx,\n+                                                       mir_map.map.keys().into_iter(),\n+                                                       &mir_map,\n+                                                       &mut out),\n+                            PpmMirCFG => write_mir_graphviz(tcx,\n+                                                            mir_map.map.keys().into_iter(),\n+                                                            &mir_map,\n+                                                            &mut out),\n                             _ => unreachable!(),\n                         }?;\n                     }"}, {"sha": "4e754abe2aec04b19341c5f564caa482ecc4b115", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -743,7 +743,8 @@ fn encode_repr_attrs(rbml_w: &mut Encoder,\n }\n \n fn encode_mir(ecx: &EncodeContext, rbml_w: &mut Encoder, node_id: NodeId) {\n-    if let Some(mir) = ecx.mir_map.map.get(&node_id) {\n+    let def_id = ecx.tcx.map.local_def_id(node_id);\n+    if let Some(mir) = ecx.mir_map.map.get(&def_id) {\n         rbml_w.start_tag(tag_mir as usize);\n         rbml_w.emit_opaque(|opaque_encoder| {\n             tls::enter_encoding_context(ecx, opaque_encoder, |_, opaque_encoder| {\n@@ -1361,7 +1362,7 @@ fn my_visit_expr(expr: &hir::Expr,\n             ecx.tcx.closure_kind(def_id).encode(rbml_w).unwrap();\n             rbml_w.end_tag();\n \n-            assert!(ecx.mir_map.map.contains_key(&expr.id));\n+            assert!(ecx.mir_map.map.contains_key(&def_id));\n             encode_mir(ecx, rbml_w, expr.id);\n \n             rbml_w.end_tag();"}, {"sha": "d986d88dafc94c8b7c507457e3d74ce6d51fe953", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n use dot;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::repr::*;\n+use rustc::mir::mir_map::MirMap;\n use rustc::ty::{self, TyCtxt};\n use std::fmt::Debug;\n use std::io::{self, Write};\n@@ -19,10 +21,16 @@ use rustc_data_structures::indexed_vec::Idx;\n \n /// Write a graphviz DOT graph of a list of MIRs.\n pub fn write_mir_graphviz<'a, 'b, 'tcx, W, I>(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n-                                              iter: I, w: &mut W)\n+                                              iter: I,\n+                                              mir_map: &MirMap<'tcx>,\n+                                              w: &mut W)\n                                               -> io::Result<()>\n-where W: Write, I: Iterator<Item=(&'a NodeId, &'a Mir<'a>)> {\n-    for (&nodeid, mir) in iter {\n+    where W: Write, I: Iterator<Item=DefId>\n+{\n+    for def_id in iter {\n+        let nodeid = tcx.map.as_local_node_id(def_id).unwrap();\n+        let mir = &mir_map.map[&def_id];\n+\n         writeln!(w, \"digraph Mir_{} {{\", nodeid)?;\n \n         // Global graph properties"}, {"sha": "df1fec75939b5097e8d62ec45e6d481007e92253", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -22,6 +22,7 @@ use rustc::mir::transform::MirSource;\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval as const_eval;\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc::dep_graph::DepNode;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n@@ -61,7 +62,17 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             MirSource::Promoted(..) => bug!()\n         };\n \n-        let attrs = infcx.tcx.map.attrs(src.item_id());\n+        let src_node_id = src.item_id();\n+\n+        // We are going to be accessing various tables\n+        // generated by TypeckItemBody; we also assume\n+        // that the body passes type check. These tables\n+        // are not individually tracked, so just register\n+        // a read here.\n+        let src_def_id = infcx.tcx.map.local_def_id(src_node_id);\n+        infcx.tcx.dep_graph.read(DepNode::TypeckItemBody(src_def_id));\n+\n+        let attrs = infcx.tcx.map.attrs(src_node_id);\n \n         // Some functions always have overflow checks enabled,\n         // however, they may not get codegen'd, depending on"}, {"sha": "42a643b8af6fa167933e2d7eddb14b77fb7fa029", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -18,6 +18,7 @@\n \n use build;\n use rustc::dep_graph::DepNode;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::repr::Mir;\n use rustc::mir::transform::MirSource;\n use rustc::mir::visit::MutVisitor;\n@@ -29,7 +30,6 @@ use rustc::infer::InferCtxtBuilder;\n use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n-use rustc::util::nodemap::NodeMap;\n use rustc::hir;\n use rustc::hir::intravisit::{self, FnKind, Visitor};\n use syntax::ast;\n@@ -38,15 +38,13 @@ use syntax_pos::Span;\n use std::mem;\n \n pub fn build_mir_for_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> MirMap<'tcx> {\n-    let mut map = MirMap {\n-        map: NodeMap(),\n-    };\n+    let mut map = MirMap::new(tcx.dep_graph.clone());\n     {\n         let mut dump = BuildMir {\n             tcx: tcx,\n             map: &mut map,\n         };\n-        tcx.visit_all_items_in_krate(DepNode::MirMapConstruction, &mut dump);\n+        tcx.visit_all_items_in_krate(DepNode::Mir, &mut dump);\n     }\n     map\n }\n@@ -94,16 +92,19 @@ struct BuildMir<'a, 'tcx: 'a> {\n /// F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(Cx<'b, 'gcx, 'tcx>).\n struct CxBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     src: MirSource,\n+    def_id: DefId,\n     infcx: InferCtxtBuilder<'a, 'gcx, 'tcx>,\n     map: &'a mut MirMap<'gcx>,\n }\n \n impl<'a, 'gcx, 'tcx> BuildMir<'a, 'gcx> {\n     fn cx<'b>(&'b mut self, src: MirSource) -> CxBuilder<'b, 'gcx, 'tcx> {\n         let param_env = ty::ParameterEnvironment::for_item(self.tcx, src.item_id());\n+        let def_id = self.tcx.map.local_def_id(src.item_id());\n         CxBuilder {\n             src: src,\n             infcx: self.tcx.infer_ctxt(None, Some(param_env), ProjectionMode::AnyFinal),\n+            def_id: def_id,\n             map: self.map\n         }\n     }\n@@ -133,7 +134,7 @@ impl<'a, 'gcx, 'tcx> CxBuilder<'a, 'gcx, 'tcx> {\n             mir\n         });\n \n-        assert!(self.map.map.insert(src.item_id(), mir).is_none())\n+        assert!(self.map.map.insert(self.def_id, mir).is_none())\n     }\n }\n "}, {"sha": "55e7408b0fd5d4ec881c2387fa94023abc2e938b", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -10,15 +10,16 @@\n \n use build::{Location, ScopeAuxiliaryVec, ScopeId};\n use rustc::hir;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::repr::*;\n+use rustc::mir::mir_map::MirMap;\n use rustc::mir::transform::MirSource;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_data_structures::indexed_vec::{Idx};\n use std::fmt::Display;\n use std::fs;\n use std::io::{self, Write};\n-use syntax::ast::NodeId;\n use std::path::{PathBuf, Path};\n \n const INDENT: &'static str = \"    \";\n@@ -89,19 +90,23 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// Write out a human-readable textual representation for the given MIR.\n pub fn write_mir_pretty<'a, 'b, 'tcx, I>(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n                                          iter: I,\n+                                         mir_map: &MirMap<'tcx>,\n                                          w: &mut Write)\n                                          -> io::Result<()>\n-    where I: Iterator<Item=(&'a NodeId, &'a Mir<'tcx>)>, 'tcx: 'a\n+    where I: Iterator<Item=DefId>, 'tcx: 'a\n {\n     let mut first = true;\n-    for (&id, mir) in iter {\n+    for def_id in iter {\n+        let mir = &mir_map.map[&def_id];\n+\n         if first {\n             first = false;\n         } else {\n             // Put empty lines between all items\n             writeln!(w, \"\")?;\n         }\n \n+        let id = tcx.map.as_local_node_id(def_id).unwrap();\n         let src = MirSource::from_node(tcx, id);\n         write_mir_fn(tcx, src, mir, w, None)?;\n "}, {"sha": "28204f4630c83501aff590f10f2dbd2d73ccdd05", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -16,6 +16,7 @@\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n@@ -881,8 +882,8 @@ fn qualify_const_item_cached<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let extern_mir;\n     let param_env_and_mir = if def_id.is_local() {\n-        let node_id = tcx.map.as_local_node_id(def_id).unwrap();\n-        mir_map.and_then(|map| map.map.get(&node_id)).map(|mir| {\n+        mir_map.and_then(|map| map.map.get(&def_id)).map(|mir| {\n+            let node_id = tcx.map.as_local_node_id(def_id).unwrap();\n             (ty::ParameterEnvironment::for_item(tcx, node_id), mir)\n         })\n     } else if let Some(mir) = tcx.sess.cstore.maybe_get_item_mir(tcx, def_id) {\n@@ -917,9 +918,10 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n \n         // First, visit `const` items, potentially recursing, to get\n         // accurate MUTABLE_INTERIOR and NEEDS_DROP qualifications.\n-        for &id in map.map.keys() {\n-            let def_id = tcx.map.local_def_id(id);\n-            let _task = tcx.dep_graph.in_task(self.dep_node(def_id));\n+        let keys = map.map.keys();\n+        for &def_id in &keys {\n+            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n+            let id = tcx.map.as_local_node_id(def_id).unwrap();\n             let src = MirSource::from_node(tcx, id);\n             if let MirSource::Const(_) = src {\n                 qualify_const_item_cached(tcx, &mut qualif_map, Some(map), def_id);\n@@ -929,9 +931,9 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n         // Then, handle everything else, without recursing,\n         // as the MIR map is not shared, since promotion\n         // in functions (including `const fn`) mutates it.\n-        for (&id, mir) in &mut map.map {\n-            let def_id = tcx.map.local_def_id(id);\n-            let _task = tcx.dep_graph.in_task(self.dep_node(def_id));\n+        for &def_id in &keys {\n+            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n+            let id = tcx.map.as_local_node_id(def_id).unwrap();\n             let src = MirSource::from_node(tcx, id);\n             let mode = match src {\n                 MirSource::Fn(_) => {\n@@ -948,6 +950,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n             };\n             let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n \n+            let mir = map.map.get_mut(&def_id).unwrap();\n             for hook in &mut *hooks {\n                 hook.on_mir_pass(tcx, src, mir, self, false);\n             }"}, {"sha": "26a907920e8dbf528389165d8c70a88d4e9f17cf", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -11,8 +11,6 @@\n //! This pass type-checks the MIR to ensure it is not broken.\n #![allow(unreachable_code)]\n \n-use rustc::dep_graph::DepNode;\n-use rustc::hir::def_id::DefId;\n use rustc::infer::{self, InferCtxt, InferOk};\n use rustc::traits::{self, ProjectionMode};\n use rustc::ty::fold::TypeFoldable;\n@@ -714,7 +712,4 @@ impl<'tcx> MirPass<'tcx> for TypeckMir {\n }\n \n impl Pass for TypeckMir {\n-    fn dep_node(&self, def_id: DefId) -> DepNode<DefId> {\n-        DepNode::MirTypeck(def_id)\n-    }\n }"}, {"sha": "909b3d065075351fd68b446ba16131d2f551850f", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fdc72f830642abcd8dfefe5437e7df34390ce19/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=8fdc72f830642abcd8dfefe5437e7df34390ce19", "patch": "@@ -81,7 +81,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     check_overflow: bool,\n     check_drop_flag_for_sanity: bool,\n     mir_map: &'a MirMap<'tcx>,\n-    mir_cache: RefCell<DefIdMap<Rc<mir::Mir<'tcx>>>>,\n+    mir_cache: RefCell<DepTrackingMap<MirCache<'tcx>>>,\n \n     use_dll_storage_attrs: bool,\n \n@@ -186,6 +186,19 @@ impl<'tcx> DepTrackingMapConfig for TraitSelectionCache<'tcx> {\n     }\n }\n \n+// Cache for mir loaded from metadata\n+struct MirCache<'tcx> {\n+    data: PhantomData<&'tcx ()>\n+}\n+\n+impl<'tcx> DepTrackingMapConfig for MirCache<'tcx> {\n+    type Key = DefId;\n+    type Value = Rc<mir::Mir<'tcx>>;\n+    fn to_dep_node(key: &DefId) -> DepNode<DefId> {\n+        DepNode::Mir(*key)\n+    }\n+}\n+\n /// This list owns a number of LocalCrateContexts and binds them to their common\n /// SharedCrateContext. This type just exists as a convenience, something to\n /// pass around all LocalCrateContexts with and get an iterator over them.\n@@ -474,7 +487,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             symbol_hasher: RefCell::new(symbol_hasher),\n             tcx: tcx,\n             mir_map: mir_map,\n-            mir_cache: RefCell::new(DefIdMap()),\n+            mir_cache: RefCell::new(DepTrackingMap::new(tcx.dep_graph.clone())),\n             stats: Stats {\n                 n_glues_created: Cell::new(0),\n                 n_null_glues: Cell::new(0),\n@@ -538,8 +551,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n \n     pub fn get_mir(&self, def_id: DefId) -> Option<CachedMir<'b, 'tcx>> {\n         if def_id.is_local() {\n-            let node_id = self.tcx.map.as_local_node_id(def_id).unwrap();\n-            self.mir_map.map.get(&node_id).map(CachedMir::Ref)\n+            self.mir_map.map.get(&def_id).map(CachedMir::Ref)\n         } else {\n             if let Some(mir) = self.mir_cache.borrow().get(&def_id).cloned() {\n                 return Some(CachedMir::Owned(mir));"}]}