{"sha": "693bb0dae24101f1699949ec02917167a6c172d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5M2JiMGRhZTI0MTAxZjE2OTk5NDllYzAyOTE3MTY3YTZjMTcyZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T01:05:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T01:05:56Z"}, "message": "Auto merge of #45947 - estebank:match_default_bindings-arg-hint, r=arielb1\n\nBe more obvious when suggesting dereference\n\nInclude `&` span when suggesting dereference on a span that is already a reference:\n\n```\nerror: non-reference pattern used to match a reference (see issue #42640)\n  --> dont-suggest-dereference-on-arg.rs:16:19\n   |\n16 |         .filter(|&(ref a, _)| foo(a))\n   |                  ^^^^^^^^^^^ help: consider using: `&&(ref k, _)`\n   |\n   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n```\n\nFix #45925.", "tree": {"sha": "f641a43905586fc906576cc0756254881b53c55b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f641a43905586fc906576cc0756254881b53c55b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/693bb0dae24101f1699949ec02917167a6c172d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/693bb0dae24101f1699949ec02917167a6c172d5", "html_url": "https://github.com/rust-lang/rust/commit/693bb0dae24101f1699949ec02917167a6c172d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/693bb0dae24101f1699949ec02917167a6c172d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128b40fadc2c227a07e77e06c05dd33c47390237", "url": "https://api.github.com/repos/rust-lang/rust/commits/128b40fadc2c227a07e77e06c05dd33c47390237", "html_url": "https://github.com/rust-lang/rust/commit/128b40fadc2c227a07e77e06c05dd33c47390237"}, {"sha": "15dfd7eb61a63fff6293617552306c6a4fac862b", "url": "https://api.github.com/repos/rust-lang/rust/commits/15dfd7eb61a63fff6293617552306c6a4fac862b", "html_url": "https://github.com/rust-lang/rust/commit/15dfd7eb61a63fff6293617552306c6a4fac862b"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "f03f782ebb45238cea8a967c82d23c4f4b8a199e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/693bb0dae24101f1699949ec02917167a6c172d5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693bb0dae24101f1699949ec02917167a6c172d5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=693bb0dae24101f1699949ec02917167a6c172d5", "patch": "@@ -120,15 +120,33 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         .pat_adjustments_mut()\n                         .insert(pat.hir_id, pat_adjustments);\n                 } else {\n+                    let mut ref_sp = pat.span;\n+                    let mut id = pat.id;\n+                    loop {  // make span include all enclosing `&` to avoid confusing diag output\n+                        id = tcx.hir.get_parent_node(id);\n+                        let node = tcx.hir.find(id);\n+                        if let Some(hir::map::NodePat(pat)) = node {\n+                            if let hir::PatKind::Ref(..) = pat.node {\n+                                ref_sp = pat.span;\n+                            } else {\n+                                break;\n+                            }\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    let sp = ref_sp.to(pat.span);\n                     let mut err = feature_gate::feature_err(\n                         &tcx.sess.parse_sess,\n                         \"match_default_bindings\",\n-                        pat.span,\n+                        sp,\n                         feature_gate::GateIssue::Language,\n                         \"non-reference pattern used to match a reference\",\n                     );\n-                    if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(pat.span) {\n-                        err.span_suggestion(pat.span, \"consider using\", format!(\"&{}\", &snippet));\n+                    if let Ok(snippet) = tcx.sess.codemap().span_to_snippet(sp) {\n+                        err.span_suggestion(sp,\n+                                            \"consider using a reference\",\n+                                            format!(\"&{}\", &snippet));\n                     }\n                     err.emit();\n                 }"}, {"sha": "ebf9e498ffd9ed9adc13d6bb64d424cf93571c95", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693bb0dae24101f1699949ec02917167a6c172d5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/693bb0dae24101f1699949ec02917167a6c172d5/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr?ref=693bb0dae24101f1699949ec02917167a6c172d5", "patch": "@@ -2,7 +2,7 @@ error: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/suggestion.rs:12:12\n    |\n 12 |     if let Some(y) = &Some(22) { //~ ERROR non-reference pattern\n-   |            ^^^^^^^ help: consider using: `&Some(y)`\n+   |            ^^^^^^^ help: consider using a reference: `&Some(y)`\n    |\n    = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n "}, {"sha": "72269768e0f5cfcfc88e5d4af244488ff851feb8", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/693bb0dae24101f1699949ec02917167a6c172d5/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693bb0dae24101f1699949ec02917167a6c172d5/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.rs?ref=693bb0dae24101f1699949ec02917167a6c172d5", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(s: &str) -> bool { true }\n+\n+fn main() {\n+    let x = vec![(String::new(), String::new())];\n+    x.iter()\n+        .filter(|&(ref a, _)| foo(a))\n+        //~^ ERROR non-reference pattern used to match a reference\n+        //~| HELP consider using a reference\n+        //~| HELP add\n+        .collect();\n+}"}, {"sha": "799d9080b9d187b3788205b5e53bea4daaa2e997", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/693bb0dae24101f1699949ec02917167a6c172d5/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/693bb0dae24101f1699949ec02917167a6c172d5/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr?ref=693bb0dae24101f1699949ec02917167a6c172d5", "patch": "@@ -0,0 +1,10 @@\n+error: non-reference pattern used to match a reference (see issue #42640)\n+  --> $DIR/dont-suggest-dereference-on-arg.rs:16:18\n+   |\n+16 |         .filter(|&(ref a, _)| foo(a))\n+   |                  ^^^^^^^^^^^ help: consider using a reference: `&&(ref a, _)`\n+   |\n+   = help: add #![feature(match_default_bindings)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}