{"sha": "78bc10d94bcaecbc45687b82e82dd46a79cd29b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YmMxMGQ5NGJjYWVjYmM0NTY4N2I4MmU4MmRkNDZhNzljZDI5YjM=", "commit": {"author": {"name": "Dan Luu", "email": "danluu@gmail.com", "date": "2013-04-13T20:17:30Z"}, "committer": {"name": "Dan Luu", "email": "danluu@gmail.com", "date": "2013-04-13T20:17:30Z"}, "message": "Doc review, as requested :-).\n\nMostly just phrasing things differently, which is a matter of taste. Feel free to use or not use any of the changes I'm suggesting.\n\nI would say this one thing should be changed, though, not necessarily the way I changed it here.\n\n     * Convert any string (literal, `@`, `&`, `~`)\n     * that contains a base64 encoded value, to the byte values it encodes.\n\nIf this structure is going to be used, either the entire clause, 'that contains a base64 encoded value', should be bracketed by commas, or the comma at the end of the clause should be removed.", "tree": {"sha": "212837e7771de095e4dde8feda64081b214fff3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212837e7771de095e4dde8feda64081b214fff3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78bc10d94bcaecbc45687b82e82dd46a79cd29b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78bc10d94bcaecbc45687b82e82dd46a79cd29b3", "html_url": "https://github.com/rust-lang/rust/commit/78bc10d94bcaecbc45687b82e82dd46a79cd29b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78bc10d94bcaecbc45687b82e82dd46a79cd29b3/comments", "author": {"login": "danluu", "id": 157136, "node_id": "MDQ6VXNlcjE1NzEzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/157136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danluu", "html_url": "https://github.com/danluu", "followers_url": "https://api.github.com/users/danluu/followers", "following_url": "https://api.github.com/users/danluu/following{/other_user}", "gists_url": "https://api.github.com/users/danluu/gists{/gist_id}", "starred_url": "https://api.github.com/users/danluu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danluu/subscriptions", "organizations_url": "https://api.github.com/users/danluu/orgs", "repos_url": "https://api.github.com/users/danluu/repos", "events_url": "https://api.github.com/users/danluu/events{/privacy}", "received_events_url": "https://api.github.com/users/danluu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danluu", "id": 157136, "node_id": "MDQ6VXNlcjE1NzEzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/157136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danluu", "html_url": "https://github.com/danluu", "followers_url": "https://api.github.com/users/danluu/followers", "following_url": "https://api.github.com/users/danluu/following{/other_user}", "gists_url": "https://api.github.com/users/danluu/gists{/gist_id}", "starred_url": "https://api.github.com/users/danluu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danluu/subscriptions", "organizations_url": "https://api.github.com/users/danluu/orgs", "repos_url": "https://api.github.com/users/danluu/repos", "events_url": "https://api.github.com/users/danluu/events{/privacy}", "received_events_url": "https://api.github.com/users/danluu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e64b61df9a9b22dc742fcd25f0533f5b4580477", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e64b61df9a9b22dc742fcd25f0533f5b4580477", "html_url": "https://github.com/rust-lang/rust/commit/8e64b61df9a9b22dc742fcd25f0533f5b4580477"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "054f3a2b108397f8ae2246bd573866b85bdcd752", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78bc10d94bcaecbc45687b82e82dd46a79cd29b3/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78bc10d94bcaecbc45687b82e82dd46a79cd29b3/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=78bc10d94bcaecbc45687b82e82dd46a79cd29b3", "patch": "@@ -28,7 +28,7 @@ static CHARS: [char, ..64] = [\n \n impl<'self> ToBase64 for &'self [u8] {\n     /**\n-     * Turn a vector of `u8` bytes into a string representing them in base64.\n+     * Turn a vector of `u8` bytes into a base64 string.\n      *\n      * *Example*:\n      *\n@@ -92,7 +92,7 @@ impl<'self> ToBase64 for &'self [u8] {\n \n impl<'self> ToBase64 for &'self str {\n     /**\n-     * Convert any string (literal, `@`, `&`, `~`) to base64 encoding.\n+     * Convert any string (literal, `@`, `&`, or `~`) to base64 encoding.\n      *\n      *\n      * *Example*:\n@@ -119,8 +119,8 @@ pub trait FromBase64 {\n \n impl FromBase64 for ~[u8] {\n     /**\n-     * Turn a vector of `u8`s representing characters\n-     * encoding byte values in base64 into the vector of `u8` byte values.\n+     * Convert base64 `u8` vector into u8 byte values.\n+     * Every 4 encoded characters is converted into 3 octets, modulo padding.\n      *\n      * *Example*:\n      *\n@@ -200,16 +200,15 @@ impl FromBase64 for ~[u8] {\n \n impl FromBase64 for ~str {\n     /**\n-     * Convert any string (literal, `@`, `&`, `~`)\n-     * that contains a base64 encoded value, to the byte values it encodes.\n+     * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n+     * to the byte values it encodes.\n      *\n      * You can use the `from_bytes` function in `core::str`\n      * to turn a `[u8]` into a string with characters corresponding to those values.\n      *\n      * *Example*:\n      *\n-     * This is an example of going from a string literal to the base64 encoding\n-     * and back to the same string.\n+     * This converts a string literal to base64 and back.\n      *\n      * ~~~~\n      * extern mod std;"}]}