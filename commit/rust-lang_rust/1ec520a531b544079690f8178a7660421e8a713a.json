{"sha": "1ec520a531b544079690f8178a7660421e8a713a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzUyMGE1MzFiNTQ0MDc5NjkwZjgxNzhhNzY2MDQyMWU4YTcxM2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-19T21:51:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-25T16:20:12Z"}, "message": "mk: Move logic out of MSVC's 64-bit cfg makefile\n\nThis logic applies to all MSVC targets, so instead refactor it into platform.mk\nso it can one day apply to 32-bit MSVC.", "tree": {"sha": "da0baeaed24d6ef957336ed4f052f827d79f05e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0baeaed24d6ef957336ed4f052f827d79f05e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec520a531b544079690f8178a7660421e8a713a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec520a531b544079690f8178a7660421e8a713a", "html_url": "https://github.com/rust-lang/rust/commit/1ec520a531b544079690f8178a7660421e8a713a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec520a531b544079690f8178a7660421e8a713a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b213c947f80582857681a8b8ed4033627997e7e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b213c947f80582857681a8b8ed4033627997e7e5", "html_url": "https://github.com/rust-lang/rust/commit/b213c947f80582857681a8b8ed4033627997e7e5"}], "stats": {"total": 127, "additions": 69, "deletions": 58}, "files": [{"sha": "edeffcdd09b9bfd8299ceb2d97a45d7d93430e7f", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1ec520a531b544079690f8178a7660421e8a713a/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1ec520a531b544079690f8178a7660421e8a713a/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=1ec520a531b544079690f8178a7660421e8a713a", "patch": "@@ -23,64 +23,6 @@ CFG_RUN_x86_64-pc-windows-msvc=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n \n-# These two environment variables are scraped by the `./configure` script and\n-# are necessary for `cl.exe` to find standard headers (the INCLUDE variable) and\n-# for `link.exe` to find standard libraries (the LIB variable).\n-ifdef CFG_MSVC_INCLUDE_PATH\n-export INCLUDE := $(CFG_MSVC_INCLUDE_PATH)\n-endif\n-ifdef CFG_MSVC_LIB_PATH\n-export LIB := $(CFG_MSVC_LIB_PATH)\n-endif\n-\n-# Unfortunately `link.exe` is also a program in `/usr/bin` on MinGW installs,\n-# but it's not the one that we want. As a result we make sure that our detected\n-# `link.exe` shows up in PATH first.\n-ifdef CFG_MSVC_LINK\n-export PATH := $(CFG_MSVC_ROOT)/VC/bin/amd64:$(PATH)\n-endif\n-\n-# There are more comments about this available in the target specification for\n-# Windows MSVC in the compiler, but the gist of it is that we use `llvm-ar.exe`\n-# instead of `lib.exe` for assembling archives, so we need to inject this custom\n-# dependency here.\n-NATIVE_TOOL_DEPS_core_T_x86_64-pc-windows-msvc += llvm-ar.exe\n-INSTALLED_BINS_x86_64-pc-windows-msvc += llvm-ar.exe\n-\n-# When working with MSVC on windows, each DLL needs to explicitly declare its\n-# interface to the outside world through some means. The options for doing so\n-# include:\n-#\n-# 1. A custom attribute on each function itself\n-# 2. A linker argument saying what to export\n-# 3. A file which lists all symbols that need to be exported\n-#\n-# The Rust compiler takes care (1) for us for all Rust code by annotating all\n-# public-facing functions with dllexport, but we have a few native dependencies\n-# which need to cross the DLL boundary. The most important of these dependencies\n-# is LLVM which is linked into `rustc_llvm.dll` but primarily used from\n-# `rustc_trans.dll`. This means that many of LLVM's C API functions need to be\n-# exposed from `rustc_llvm.dll` to be forwarded over the boundary.\n-#\n-# Unfortunately, at this time, LLVM does not handle this sort of exportation on\n-# Windows for us, so we're forced to do it ourselves if we want it (which seems\n-# like the path of least resistance right now). To do this we generate a `.DEF`\n-# file [1] which we then custom-pass to the linker when building the rustc_llvm\n-# crate. This DEF file list all symbols that are exported from\n-# `src/librustc_llvm/lib.rs` and is generated by a small python script.\n-#\n-# Fun times!\n-#\n-# [1]: https://msdn.microsoft.com/en-us/library/28d6s79h.aspx\n-RUSTFLAGS_rustc_llvm_T_x86_64-pc-windows-msvc += \\\n-\t-C link-args=\"-DEF:x86_64-pc-windows-msvc/rt/rustc_llvm.def\"\n-CUSTOM_DEPS_rustc_llvm_T_x86_64-pc-windows-msvc += \\\n-\tx86_64-pc-windows-msvc/rt/rustc_llvm.def\n-\n-x86_64-pc-windows-msvc/rt/rustc_llvm.def: $(S)src/etc/mklldef.py \\\n-\t\t\t$(S)src/librustc_llvm/lib.rs\n-\t$(CFG_PYTHON) $^ $@ rustc_llvm-$(CFG_FILENAME_EXTRA)\n-\n # All windows nightiles are currently a GNU triple, so this MSVC triple is not\n # bootstrapping from itself. This is relevant during stage0, and other parts of\n # the build system take this into account."}, {"sha": "abc9cc038d0221b0a6801b93cbbe349386f50430", "filename": "mk/platform.mk", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1ec520a531b544079690f8178a7660421e8a713a/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1ec520a531b544079690f8178a7660421e8a713a/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=1ec520a531b544079690f8178a7660421e8a713a", "patch": "@@ -238,3 +238,72 @@ endef\n \n $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))\n+\n+# These two environment variables are scraped by the `./configure` script and\n+# are necessary for `cl.exe` to find standard headers (the INCLUDE variable) and\n+# for `link.exe` to find standard libraries (the LIB variable).\n+ifdef CFG_MSVC_INCLUDE_PATH\n+export INCLUDE := $(CFG_MSVC_INCLUDE_PATH)\n+endif\n+ifdef CFG_MSVC_LIB_PATH\n+export LIB := $(CFG_MSVC_LIB_PATH)\n+endif\n+\n+# Unfortunately `link.exe` is also a program in `/usr/bin` on MinGW installs,\n+# but it's not the one that we want. As a result we make sure that our detected\n+# `link.exe` shows up in PATH first.\n+ifdef CFG_MSVC_LINK\n+export PATH := $(CFG_MSVC_ROOT)/VC/bin/amd64:$(PATH)\n+endif\n+\n+# There are more comments about this available in the target specification for\n+# Windows MSVC in the compiler, but the gist of it is that we use `llvm-ar.exe`\n+# instead of `lib.exe` for assembling archives, so we need to inject this custom\n+# dependency here.\n+define ADD_LLVM_AR_TO_MSVC_DEPS\n+ifeq ($$(findstring msvc,$(1)),msvc)\n+NATIVE_TOOL_DEPS_core_T_$(1) += llvm-ar.exe\n+INSTALLED_BINS_$(1) += llvm-ar.exe\n+endif\n+endef\n+\n+$(foreach target,$(CFG_TARGET), \\\n+  $(eval $(call ADD_LLVM_AR_TO_MSVC_DEPS,$(target))))\n+\n+# When working with MSVC on windows, each DLL needs to explicitly declare its\n+# interface to the outside world through some means. The options for doing so\n+# include:\n+#\n+# 1. A custom attribute on each function itself\n+# 2. A linker argument saying what to export\n+# 3. A file which lists all symbols that need to be exported\n+#\n+# The Rust compiler takes care (1) for us for all Rust code by annotating all\n+# public-facing functions with dllexport, but we have a few native dependencies\n+# which need to cross the DLL boundary. The most important of these dependencies\n+# is LLVM which is linked into `rustc_llvm.dll` but primarily used from\n+# `rustc_trans.dll`. This means that many of LLVM's C API functions need to be\n+# exposed from `rustc_llvm.dll` to be forwarded over the boundary.\n+#\n+# Unfortunately, at this time, LLVM does not handle this sort of exportation on\n+# Windows for us, so we're forced to do it ourselves if we want it (which seems\n+# like the path of least resistance right now). To do this we generate a `.DEF`\n+# file [1] which we then custom-pass to the linker when building the rustc_llvm\n+# crate. This DEF file list all symbols that are exported from\n+# `src/librustc_llvm/lib.rs` and is generated by a small python script.\n+#\n+# Fun times!\n+#\n+# [1]: https://msdn.microsoft.com/en-us/library/28d6s79h.aspx\n+define ADD_RUSTC_LLVM_DEF_TO_MSVC\n+ifeq ($$(findstring msvc,$(1)),msvc)\n+RUSTFLAGS_rustc_llvm_T_$(1) += -C link-args=\"-DEF:$(1)/rt/rustc_llvm.def\"\n+CUSTOM_DEPS_rustc_llvm_T_$(1) += $(1)/rt/rustc_llvm.def\n+\n+$(1)/rt/rustc_llvm.def: $$(S)src/etc/mklldef.py $$(S)src/librustc_llvm/lib.rs\n+\t$$(CFG_PYTHON) $$^ $$@ rustc_llvm-$$(CFG_FILENAME_EXTRA)\n+endif\n+endef\n+\n+$(foreach target,$(CFG_TARGET), \\\n+  $(eval $(call ADD_RUSTC_LLVM_DEF_TO_MSVC,$(target))))"}]}