{"sha": "faa04a8b9c326bb71b1d21e962dd96912ce234c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYTA0YThiOWMzMjZiYjcxYjFkMjFlOTYyZGQ5NjkxMmNlMjM0YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-30T00:14:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-30T00:14:32Z"}, "message": "Auto merge of #26666 - huonw:unc-rec, r=alexcrichton\n\nThis fixes two false positives for the unconditional recursion lint, when functions use themselves (or almost-themselves) internally, without actually being recursive.\r\n\r\n````rust\r\nfn main() { let _ = main; }\r\n```\r\n```rust\r\ntrait Bar {\r\n    fn method<T: Bar>(&self, x: &T) {\r\n        x.method(x)\r\n    }\r\n}\r\n```", "tree": {"sha": "03e0951628efe6ce396fc362230de47bcf74c4bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e0951628efe6ce396fc362230de47bcf74c4bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa04a8b9c326bb71b1d21e962dd96912ce234c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa04a8b9c326bb71b1d21e962dd96912ce234c6", "html_url": "https://github.com/rust-lang/rust/commit/faa04a8b9c326bb71b1d21e962dd96912ce234c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa04a8b9c326bb71b1d21e962dd96912ce234c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a26e49459b4069650dd23e5ba35acd5eb868f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a26e49459b4069650dd23e5ba35acd5eb868f2e", "html_url": "https://github.com/rust-lang/rust/commit/9a26e49459b4069650dd23e5ba35acd5eb868f2e"}, {"sha": "900af2c6d9b21ca1b1db35b7b09b0fb59cf78b84", "url": "https://api.github.com/repos/rust-lang/rust/commits/900af2c6d9b21ca1b1db35b7b09b0fb59cf78b84", "html_url": "https://github.com/rust-lang/rust/commit/900af2c6d9b21ca1b1db35b7b09b0fb59cf78b84"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "190e2965e76cec72048074cc0c714698400863aa", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/faa04a8b9c326bb71b1d21e962dd96912ce234c6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa04a8b9c326bb71b1d21e962dd96912ce234c6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=faa04a8b9c326bb71b1d21e962dd96912ce234c6", "patch": "@@ -1973,8 +1973,13 @@ impl LintPass for UnconditionalRecursion {\n                                       fn_id: ast::NodeId,\n                                       _: ast::Ident,\n                                       id: ast::NodeId) -> bool {\n-            tcx.def_map.borrow().get(&id)\n-               .map_or(false, |def| def.def_id() == local_def(fn_id))\n+            match tcx.map.get(id) {\n+                ast_map::NodeExpr(&ast::Expr { node: ast::ExprCall(ref callee, _), .. }) => {\n+                    tcx.def_map.borrow().get(&callee.id)\n+                        .map_or(false, |def| def.def_id() == local_def(fn_id))\n+                }\n+                _ => false\n+            }\n         }\n \n         // check if the method call `id` refers to method `method_id`\n@@ -2002,6 +2007,15 @@ impl LintPass for UnconditionalRecursion {\n                     // method instead.\n                     ty::MethodTypeParam(\n                         ty::MethodParam { ref trait_ref, method_num, impl_def_id: None, }) => {\n+\n+                        let on_self = m.substs.self_ty().map_or(false, |t| t.is_self());\n+                        if !on_self {\n+                            // we can only be recurring in a default\n+                            // method if we're being called literally\n+                            // on the `Self` type.\n+                            return false\n+                        }\n+\n                         tcx.trait_item(trait_ref.def_id, method_num).def_id()\n                     }\n "}, {"sha": "47bb7f948a786d21260b71da655bc9016304854a", "filename": "src/test/compile-fail/lint-unconditional-recursion.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/faa04a8b9c326bb71b1d21e962dd96912ce234c6/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faa04a8b9c326bb71b1d21e962dd96912ce234c6/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs?ref=faa04a8b9c326bb71b1d21e962dd96912ce234c6", "patch": "@@ -63,4 +63,15 @@ impl Baz {\n     }\n }\n \n+fn all_fine() {\n+    let _f = all_fine;\n+}\n+\n+// issue 26333\n+trait Bar {\n+    fn method<T: Bar>(&self, x: &T) {\n+        x.method(x)\n+    }\n+}\n+\n fn main() {}"}]}