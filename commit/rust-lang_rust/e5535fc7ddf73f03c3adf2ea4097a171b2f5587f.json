{"sha": "e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTM1ZmM3ZGRmNzNmMDNjM2FkZjJlYTQwOTdhMTcxYjJmNTU4N2Y=", "commit": {"author": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-19T07:28:03Z"}, "committer": {"name": "Aravind Gollakota", "email": "aravindprasant@gmail.com", "date": "2018-04-27T01:28:30Z"}, "message": "Introduce trait query mode and use it to set overflow error handling policy in traits::select", "tree": {"sha": "3aea4402750fb15ab98c31fdbcd7904141c62675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aea4402750fb15ab98c31fdbcd7904141c62675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "html_url": "https://github.com/rust-lang/rust/commit/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/comments", "author": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aravind-pg", "id": 6913107, "node_id": "MDQ6VXNlcjY5MTMxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6913107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aravind-pg", "html_url": "https://github.com/aravind-pg", "followers_url": "https://api.github.com/users/aravind-pg/followers", "following_url": "https://api.github.com/users/aravind-pg/following{/other_user}", "gists_url": "https://api.github.com/users/aravind-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/aravind-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aravind-pg/subscriptions", "organizations_url": "https://api.github.com/users/aravind-pg/orgs", "repos_url": "https://api.github.com/users/aravind-pg/repos", "events_url": "https://api.github.com/users/aravind-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/aravind-pg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d", "html_url": "https://github.com/rust-lang/rust/commit/3dd26b8a3ef9e10dd92f1c958e97493dfbd8788d"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "6a8a000b58a1093b4d596e6d5c0ef2181381f30e", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "patch": "@@ -74,6 +74,19 @@ pub enum IntercrateMode {\n     Fixed\n }\n \n+// The mode that trait queries run in\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+pub enum TraitQueryMode {\n+    // Standard/un-canonicalized queries get accurate\n+    // spans etc. passed in and hence can do reasonable\n+    // error reporting on their own.\n+    Standard,\n+    // Canonicalized queries get dummy spans and hence\n+    // must generally propagate errors to\n+    // pre-canonicalization callsites.\n+    Canonical,\n+}\n+\n /// An `Obligation` represents some trait reference (e.g. `int:Eq`) for\n /// which the vtable must be found.  The process of finding a vtable is\n /// called \"resolving\" the `Obligation`. This process consists of"}, {"sha": "342b163b2f72b1bd7a97c93b4cd9d556f0b3dbba", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "patch": "@@ -17,7 +17,7 @@ use self::EvaluationResult::*;\n \n use super::coherence::{self, Conflict};\n use super::DerivedObligationCause;\n-use super::IntercrateMode;\n+use super::{IntercrateMode, TraitQueryMode};\n use super::project;\n use super::project::{normalize_with_depth, Normalized, ProjectionCacheKey};\n use super::{PredicateObligation, TraitObligation, ObligationCause};\n@@ -87,7 +87,12 @@ pub struct SelectionContext<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n     /// Controls whether or not to filter out negative impls when selecting.\n     /// This is used in librustdoc to distinguish between the lack of an impl\n     /// and a negative impl\n-    allow_negative_impls: bool\n+    allow_negative_impls: bool,\n+\n+    /// The mode that trait queries run in, which informs our error handling\n+    /// policy. In essence, canonicalized queries need their errors propagated\n+    /// rather than immediately reported because we do not have accurate spans.\n+    query_mode: TraitQueryMode,\n }\n \n #[derive(Clone, Debug)]\n@@ -440,6 +445,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             intercrate: None,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -452,6 +458,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             intercrate: Some(mode),\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            query_mode: TraitQueryMode::Standard,\n         }\n     }\n \n@@ -464,6 +471,20 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             intercrate: None,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls,\n+            query_mode: TraitQueryMode::Standard,\n+        }\n+    }\n+\n+    pub fn with_query_mode(infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n+                           query_mode: TraitQueryMode) -> SelectionContext<'cx, 'gcx, 'tcx> {\n+        debug!(\"with_query_mode({:?})\", query_mode);\n+        SelectionContext {\n+            infcx,\n+            freshener: infcx.freshener(),\n+            intercrate: None,\n+            intercrate_ambiguity_causes: None,\n+            allow_negative_impls: false,\n+            query_mode,\n         }\n     }\n \n@@ -548,17 +569,20 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n \n+        // `select` is currently only called in standard query mode\n+        assert!(self.query_mode == TraitQueryMode::Standard);\n+\n         let candidate = match self.candidate_from_obligation(&stack) {\n-            Err(SelectionError::Overflow(o)) =>\n-                self.infcx().report_overflow_error(&o, true),\n+            Err(SelectionError::Overflow(_)) =>\n+                bug!(\"Overflow should be caught earlier in standard query mode\"),\n             Err(e) => { return Err(e); },\n             Ok(None) => { return Ok(None); },\n             Ok(Some(candidate)) => candidate\n         };\n \n         match self.confirm_candidate(obligation, candidate) {\n-            Err(SelectionError::Overflow(o)) =>\n-                self.infcx().report_overflow_error(&o, true),\n+            Err(SelectionError::Overflow(_)) =>\n+                bug!(\"Overflow should be caught earlier in standard query mode\"),\n             Err(e) => Err(e),\n             Ok(candidate) => Ok(Some(candidate))\n         }\n@@ -582,10 +606,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"predicate_may_hold_fatal({:?})\",\n                obligation);\n \n-        match self.evaluate_obligation_recursively(obligation) {\n-            Ok(result) => result.may_apply(),\n-            Err(OverflowError(o)) => self.infcx().report_overflow_error(&o, true)\n-        }\n+        // This fatal query is a stopgap that should only be used in standard mode,\n+        // where we do not expect overflow to be propagated.\n+        assert!(self.query_mode == TraitQueryMode::Standard);\n+\n+        self.evaluate_obligation_recursively(obligation)\n+            .expect(\"Overflow should be caught earlier in standard query mode\")\n+            .may_apply()\n     }\n \n     /// Evaluates whether the obligation `obligation` can be satisfied and returns\n@@ -1024,7 +1051,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // not update) the cache.\n         let recursion_limit = *self.infcx.tcx.sess.recursion_limit.get();\n         if stack.obligation.recursion_depth >= recursion_limit {\n-            return Err(Overflow(stack.obligation.clone()));\n+            match self.query_mode {\n+                TraitQueryMode::Standard => {\n+                    self.infcx().report_overflow_error(&stack.obligation, true);\n+                },\n+                TraitQueryMode::Canonical => {\n+                    return Err(Overflow(stack.obligation.clone()));\n+                },\n+            }\n         }\n \n         // Check the cache. Note that we skolemize the trait-ref"}, {"sha": "a9cf35c4d70d43e2f5f3c9dc494f9ddb4b480810", "filename": "src/librustc_traits/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5535fc7ddf73f03c3adf2ea4097a171b2f5587f/src%2Flibrustc_traits%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fevaluate_obligation.rs?ref=e5535fc7ddf73f03c3adf2ea4097a171b2f5587f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::traits::{EvaluationResult, Obligation, ObligationCause,\n-                    OverflowError, SelectionContext};\n+                    OverflowError, SelectionContext, TraitQueryMode};\n use rustc::traits::query::CanonicalPredicateGoal;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use syntax::codemap::DUMMY_SP;\n@@ -27,7 +27,7 @@ crate fn evaluate_obligation<'tcx>(\n             _canonical_inference_vars,\n         ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &goal);\n \n-        let mut selcx = SelectionContext::new(&infcx);\n+        let mut selcx = SelectionContext::with_query_mode(&infcx, TraitQueryMode::Canonical);\n         let obligation = Obligation::new(ObligationCause::dummy(), param_env, predicate);\n \n         match selcx.evaluate_obligation_recursively(&obligation) {"}]}