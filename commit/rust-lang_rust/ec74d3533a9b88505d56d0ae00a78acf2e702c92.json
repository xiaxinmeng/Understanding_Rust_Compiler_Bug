{"sha": "ec74d3533a9b88505d56d0ae00a78acf2e702c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzRkMzUzM2E5Yjg4NTA1ZDU2ZDBhZTAwYTc4YWNmMmU3MDJjOTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-05T08:17:16Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-05T08:36:14Z"}, "message": "Stabilize `min_const_fn`", "tree": {"sha": "90aea3515066a7dcb1069739a194d9153e03073b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90aea3515066a7dcb1069739a194d9153e03073b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec74d3533a9b88505d56d0ae00a78acf2e702c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec74d3533a9b88505d56d0ae00a78acf2e702c92", "html_url": "https://github.com/rust-lang/rust/commit/ec74d3533a9b88505d56d0ae00a78acf2e702c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec74d3533a9b88505d56d0ae00a78acf2e702c92/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8bea5a0a6aef3966008787a25949344f8cf6942", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8bea5a0a6aef3966008787a25949344f8cf6942", "html_url": "https://github.com/rust-lang/rust/commit/b8bea5a0a6aef3966008787a25949344f8cf6942"}], "stats": {"total": 366, "additions": 143, "deletions": 223}, "files": [{"sha": "78d1958b8fb37a3270ae3eadff617e3282581b7a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -86,7 +86,7 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n-#![feature(min_const_fn)]\n+#![cfg_attr(stage0, feature(min_const_fn))]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(dropck_eyepatch)]"}, {"sha": "c771c41dc3ed318203813deb68bfad8b539fcb77", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -11,7 +11,7 @@\n #![feature(allocator_api)]\n #![feature(alloc_system)]\n #![feature(box_syntax)]\n-#![feature(min_const_fn)]\n+#![cfg_attr(stage0, feature(min_const_fn))]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]"}, {"sha": "5519330a37427e9fa1c71bee45a9bdb7619558e7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -42,7 +42,7 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(min_const_fn)]\n+#![cfg_attr(stage0, feature(min_const_fn))]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]"}, {"sha": "47aea7a5f07960d09e3fd2caa7d66a990503f92f", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                 _ => true,\n             }\n         } else {\n-            // users enabling the `const_fn` can do what they want\n+            // users enabling the `const_fn` feature gate can do what they want\n             !self.sess.features_untracked().const_fn\n         }\n     }"}, {"sha": "10ba27e38f47c7dc0e1662310dcb27648b678e51", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -22,7 +22,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(box_syntax)]\n-#![feature(min_const_fn)]\n+#![cfg_attr(stage0, feature(min_const_fn))]\n #![feature(nll)]\n #![feature(slice_patterns)]\n "}, {"sha": "a4db879680566d2a98634e675052e5ba52312b95", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -250,7 +250,7 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n-#![feature(min_const_fn)]\n+#![cfg_attr(stage0, feature(min_const_fn))]\n #![feature(const_int_ops)]\n #![feature(const_ip)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "1cc2e62a9c600e743710f209587f74ef1ebec371", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -107,8 +107,7 @@ pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n     pub rustc_depr: Option<RustcDeprecation>,\n-    /// `None` means the function is stable but needs to be allowed by the\n-    /// `min_const_fn` feature\n+    /// `None` means the function is stable but needs to be a stable const fn, too\n     /// `Some` contains the feature gate required to be able to use the function\n     /// as const fn\n     pub const_stability: Option<Symbol>,"}, {"sha": "e854e3d67606fabda5370d7e2433d1e2fe1b310b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1806,9 +1806,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if header.asyncness.is_async() {\n                     gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n                 }\n-                if header.constness.node == ast::Constness::Const {\n-                    gate_feature_post!(&self, min_const_fn, span, \"const fn is unstable\");\n-                }\n                 // stability of const fn methods are covered in\n                 // visit_trait_item and visit_impl_item below; this is\n                 // because default methods don't pass through this\n@@ -1863,11 +1860,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match ii.node {\n-            ast::ImplItemKind::Method(ref sig, _) => {\n-                if sig.header.constness.node == ast::Constness::Const {\n-                    gate_feature_post!(&self, min_const_fn, ii.span, \"const fn is unstable\");\n-                }\n-            }\n+            ast::ImplItemKind::Method(..) => {}\n             ast::ImplItemKind::Existential(..) => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "c4a49fd4ec4d65f040767b0716e13b70f59268eb", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -13,7 +13,6 @@\n \n // NB: We do not expect *any* monomorphization to be generated here.\n \n-#![feature(min_const_fn)]\n #![deny(dead_code)]\n #![crate_type = \"rlib\"]\n "}, {"sha": "4492ad5208354af11e8383dea52f399f5efdbafc", "filename": "src/test/codegen/link-dead-code.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fcodegen%2Flink-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fcodegen%2Flink-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink-dead-code.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags:-Clink-dead-code\n \n-#![feature(min_const_fn)]\n #![crate_type = \"rlib\"]\n \n // This test makes sure that, when -Clink-dead-code is specified, we generate"}, {"sha": "86ae3e2113cefeb20f640dca4b658a0df39c1662", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use"}, {"sha": "a51498797e48fd87414ec77c0908fd546ecb1b95", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -15,8 +15,6 @@\n \n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=yes\n \n-#![feature(min_const_fn)]\n-\n static TEST_SIGNED: i128 = const_signed(-222);\n static TEST_UNSIGNED: u128 = const_unsigned(200);\n "}, {"sha": "f64981525b8102863185ab8e266ab9ca3ec630b9", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -12,8 +12,6 @@\n \n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no -O\n \n-#![feature(min_const_fn)]\n-\n static TEST_SIGNED: i128 = const_signed(-222);\n static TEST_UNSIGNED: u128 = const_unsigned(200);\n "}, {"sha": "16b71f676e1fbaa2c524536e7f271440cfd0f606", "filename": "src/test/run-fail/issue-29798.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-fail%2Fissue-29798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-fail%2Fissue-29798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-29798.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:index out of bounds: the len is 5 but the index is 5\n \n-#![feature(min_const_fn)]\n const fn test(x: usize) -> i32 {\n     [42;5][x]\n }"}, {"sha": "3cd622a33b173afdbed2fb60bd59e4c7eb9aa46c", "filename": "src/test/run-pass-fulldeps/newtype_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,4 +1,4 @@\n-#![feature(min_const_fn, rustc_attrs, rustc_private, step_trait)]\n+#![feature(rustc_attrs, rustc_private, step_trait)]\n \n #[macro_use] extern crate rustc_data_structures;\n extern crate rustc_serialize;"}, {"sha": "c6ac35bfb10bc62cae20b3f28f10d2850ee8813e", "filename": "src/test/run-pass/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -11,6 +11,5 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n #![crate_type=\"rlib\"]\n-#![feature(min_const_fn)]\n \n pub const fn foo() -> usize { 22 }"}, {"sha": "5e05865aa1be137c5f4619f1d2b6a33397643ab4", "filename": "src/test/run-pass/consts/const-fn-const-eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-const-eval.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n #![allow(dead_code)]\n-#![feature(min_const_fn)]\n \n const fn add(x: usize, y: usize) -> usize {\n     x + y"}, {"sha": "cd136774a02c390819d1a31110471858a66a36c9", "filename": "src/test/run-pass/consts/const-fn-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-method.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(min_const_fn)]\n \n struct Foo { value: u32 }\n "}, {"sha": "8944642d2d6383e506181e5323905e15cb5c6658", "filename": "src/test/run-pass/consts/const-fn-nested.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-nested.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -11,8 +11,6 @@\n // run-pass\n // Test a call whose argument is the result of another call.\n \n-#![feature(min_const_fn)]\n-\n const fn sub(x: u32, y: u32) -> u32 {\n     x - y\n }"}, {"sha": "21e011cb17616cb8ce566cb59d97db2f3bed2265", "filename": "src/test/run-pass/consts/const-meth-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-meth-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-meth-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-meth-pattern.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n // run-pass\n \n-#![feature(min_const_fn)]\n-\n struct A;\n \n impl A {"}, {"sha": "095cdc09e060bed4ea187c6b48533a543fdcd11d", "filename": "src/test/run-pass/consts/const-pattern-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-pattern-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-pattern-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-pattern-variant.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n #![allow(unreachable_patterns)]\n-#![feature(min_const_fn)]\n \n #[derive(PartialEq, Eq)]\n enum Cake {"}, {"sha": "d69e5ed930b91e4b19aa53e21b0f6fbd54381f09", "filename": "src/test/run-pass/consts/const-size_of-align_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-size_of-align_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-size_of-align_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-size_of-align_of.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n #![allow(dead_code)]\n-#![feature(min_const_fn)]\n \n use std::mem;\n "}, {"sha": "8a2f862b5a001db5a32792b0e0a753a7e6be4457", "filename": "src/test/run-pass/consts/const-unsafe-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-unsafe-fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -12,8 +12,6 @@\n #![allow(dead_code)]\n // A quick test of 'unsafe const fn' functionality\n \n-#![feature(min_const_fn)]\n-\n const unsafe fn dummy(v: u32) -> u32 {\n     !v\n }"}, {"sha": "e2f7faa5955dcd2abe6f674d80e69f8700d9ab0a", "filename": "src/test/run-pass/consts/consts-in-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fconsts%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconsts-in-patterns.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(min_const_fn)]\n \n const FOO: isize = 10;\n const BAR: isize = 3;"}, {"sha": "74a8ba64965fff37a7c3f390231b9de1f163edfe", "filename": "src/test/run-pass/ctfe/ice-48279.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -14,8 +14,6 @@\n \n // https://github.com/rust-lang/rust/issues/48279\n \n-#![feature(min_const_fn)]\n-\n #[derive(PartialEq, Eq)]\n pub struct NonZeroU32 {\n     value: u32"}, {"sha": "e41ff906fd217651366132aeb11d6f34f9b8e230", "filename": "src/test/run-pass/ctfe/match-const-fn-structs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -13,8 +13,6 @@\n \n // https://github.com/rust-lang/rust/issues/46114\n \n-#![feature(min_const_fn)]\n-\n #[derive(Eq, PartialEq)]\n struct A { value: u32 }\n "}, {"sha": "933ec588614864ad3625c2a78b13af66f5faa7a3", "filename": "src/test/run-pass/ctfe/return-in-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fctfe%2Freturn-in-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fctfe%2Freturn-in-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Freturn-in-const-fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -12,7 +12,6 @@\n \n // https://github.com/rust-lang/rust/issues/43754\n \n-#![feature(min_const_fn)]\n const fn foo(x: usize) -> usize {\n     return x;\n }"}, {"sha": "e5eafa5a5d154d2c69e7a9d5e5cf3578fdd2ef89", "filename": "src/test/run-pass/issues/auxiliary/issue-36954.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-36954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-36954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-36954.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n #![crate_type = \"lib\"]\n \n const fn foo(i: i32) -> i32 {"}, {"sha": "ce28ebc53cd9e47e43e787efbd78d9c2d1d9b8b9", "filename": "src/test/run-pass/issues/issue-29927.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue-29927.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue-29927.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-29927.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n #![allow(dead_code)]\n-#![feature(min_const_fn)]\n struct A {\n     field: usize,\n }"}, {"sha": "023b0e800f59f07ef7a415d2f674fd0746d45dc2", "filename": "src/test/run-pass/issues/issue-33537.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33537.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(min_const_fn)]\n \n const fn foo() -> *const i8 {\n     b\"foo\" as *const _ as *const i8"}, {"sha": "e63ba3acce3343d14302355e7f3ca53dabf1967e", "filename": "src/test/run-pass/issues/issue-37991.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue-37991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue-37991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-37991.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(min_const_fn)]\n \n const fn foo() -> i64 {\n     3"}, {"sha": "2104f5ef08a7fc30178a8a85f2fcd811a7b4e0ee", "filename": "src/test/run-pass/issues/issue29927-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue29927-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frun-pass%2Fissues%2Fissue29927-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue29927-1.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n #![allow(dead_code)]\n-#![feature(min_const_fn)]\n const fn f() -> usize {\n     5\n }"}, {"sha": "454f8cb4a510fd9f19a721c01bf820e98ed1d27d", "filename": "src/test/rustdoc/auxiliary/issue-27362.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-27362.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n // compile-flags: -Cmetadata=aux\n \n-#![feature(min_const_fn)]\n-\n pub const fn foo() {}\n pub const unsafe fn bar() {}\n "}, {"sha": "cb4a5909120c4aa428b1709fd9c94640a691e24c", "filename": "src/test/rustdoc/const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html"}, {"sha": "074a211cd08998cfe18d3460194bc35dc55b7ff4", "filename": "src/test/rustdoc/const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n #![crate_type=\"lib\"]\n \n-#![feature(min_const_fn)]\n-\n pub struct Foo;\n \n impl Foo {"}, {"sha": "0c0f539df6a3b5aafb21a808182824e34e25d1af", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,11 +1,11 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-in-static-initializer-issue-38520.rs:27:23\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:25:23\n    |\n LL | static Y: usize = get(*&X); //[ast]~ ERROR E0507\n    |                       ^^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-in-static-initializer-issue-38520.rs:29:22\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:27:22\n    |\n LL | const Z: usize = get(*&X); //[ast]~ ERROR E0507\n    |                      ^^^ cannot move out of borrowed content"}, {"sha": "0c0f539df6a3b5aafb21a808182824e34e25d1af", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.mir.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,11 +1,11 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-in-static-initializer-issue-38520.rs:27:23\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:25:23\n    |\n LL | static Y: usize = get(*&X); //[ast]~ ERROR E0507\n    |                       ^^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/move-in-static-initializer-issue-38520.rs:29:22\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:27:22\n    |\n LL | const Z: usize = get(*&X); //[ast]~ ERROR E0507\n    |                      ^^^ cannot move out of borrowed content"}, {"sha": "34e76c92a658df2c7f7e578cb6c3025e97450e90", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -15,8 +15,6 @@\n // permitted as `Foo` is not copy (even in a static/const\n // initializer).\n \n-#![feature(min_const_fn)]\n-\n struct Foo(usize);\n \n const fn get(x: Foo) -> usize {"}, {"sha": "5063c8d1d1f54a1b9b4cea166cc2a651f07a43cc", "filename": "src/test/ui/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -11,6 +11,5 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n #![crate_type=\"rlib\"]\n-#![feature(min_const_fn)]\n \n pub const fn foo() -> usize { 22 } //~ ERROR const fn is unstable"}, {"sha": "6e60fd834d4c3fa0b557e571a23be6cdd68e4244", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n #![warn(const_err)]\n \n-#![feature(min_const_fn)]\n-\n const fn foo(x: u32) -> u32 {\n     x\n }"}, {"sha": "6229790f8adc2519baec7797faf9a2bef8dd28ab", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,5 +1,5 @@\n warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:20:5\n+  --> $DIR/issue-43197.rs:18:5\n    |\n LL |     const X: u32 = 0-1;\n    |     ^^^^^^^^^^^^^^^---^\n@@ -13,15 +13,15 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:22:5\n+  --> $DIR/issue-43197.rs:20:5\n    |\n LL |     const Y: u32 = foo(0-1);\n    |     ^^^^^^^^^^^^^^^^^^^---^^\n    |                        |\n    |                        attempt to subtract with overflow\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/issue-43197.rs:24:26\n+  --> $DIR/issue-43197.rs:22:26\n    |\n LL |     const Y: u32 = foo(0-1);\n    |                        --- attempt to subtract with overflow\n@@ -30,13 +30,13 @@ LL |     println!(\"{} {}\", X, Y);\n    |                          ^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:24:26\n+  --> $DIR/issue-43197.rs:22:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/issue-43197.rs:24:23\n+  --> $DIR/issue-43197.rs:22:23\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n@@ -45,7 +45,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |                       ^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:24:23\n+  --> $DIR/issue-43197.rs:22:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors"}, {"sha": "dc449c663c3d1b12f00481c715f2af6dc6564892", "filename": "src/test/ui/consts/const-eval/issue-47971.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-47971.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n // compile-pass\n \n-#![feature(min_const_fn)]\n-\n struct S(pub &'static u32, pub u32);\n \n const fn g(ss: &S) -> &u32 { &ss.1 }"}, {"sha": "07880b03001299a8a801afc9a0809faa92dd696f", "filename": "src/test/ui/consts/const-pattern-not-const-evaluable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-pattern-not-const-evaluable.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n // compile-pass\n \n-#![feature(min_const_fn)]\n-\n #[derive(PartialEq, Eq)]\n enum Cake {\n     BlackForest,"}, {"sha": "d8abd9765580535c5bd07b2dad7cc2a987888e6e", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -0,0 +1,5 @@\n+const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointers in const fn are unstable\n+    x == y\n+}\n+\n+fn main() {}"}, {"sha": "a050c10e02cf931655454f341bc31af9baff3714", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -0,0 +1,8 @@\n+error: function pointers in const fn are unstable\n+  --> $DIR/cmp_fn_pointers.rs:1:14\n+   |\n+LL | const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointers in const fn are unstable\n+   |              ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a03c5168367db8874d283267fe0d16e4164bbca6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,197 +1,197 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:49:25\n+  --> $DIR/min_const_fn.rs:47:25\n    |\n LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:51:36\n+  --> $DIR/min_const_fn.rs:49:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:56:28\n+  --> $DIR/min_const_fn.rs:54:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:58:42\n+  --> $DIR/min_const_fn.rs:56:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:63:27\n+  --> $DIR/min_const_fn.rs:61:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:65:38\n+  --> $DIR/min_const_fn.rs:63:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:70:39\n+  --> $DIR/min_const_fn.rs:68:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:88:16\n+  --> $DIR/min_const_fn.rs:86:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:90:18\n+  --> $DIR/min_const_fn.rs:88:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n \n error: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:92:33\n+  --> $DIR/min_const_fn.rs:90:33\n    |\n LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n \n error: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:94:35\n+  --> $DIR/min_const_fn.rs:92:35\n    |\n LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n \n error: only int and `bool` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:96:35\n+  --> $DIR/min_const_fn.rs:94:35\n    |\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n \n error: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:98:43\n+  --> $DIR/min_const_fn.rs:96:43\n    |\n LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n \n error: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:102:27\n+  --> $DIR/min_const_fn.rs:100:27\n    |\n LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n    |                           ^^^\n \n error: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:103:36\n+  --> $DIR/min_const_fn.rs:101:36\n    |\n LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n    |                                    ^^^^\n \n error: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:104:42\n+  --> $DIR/min_const_fn.rs:102:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n error: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:106:42\n+  --> $DIR/min_const_fn.rs:104:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:108:38\n+  --> $DIR/min_const_fn.rs:106:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:110:29\n+  --> $DIR/min_const_fn.rs:108:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:111:34\n+  --> $DIR/min_const_fn.rs:109:34\n    |\n LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n    |                                  ^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:112:44\n+  --> $DIR/min_const_fn.rs:110:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:114:44\n+  --> $DIR/min_const_fn.rs:112:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:116:14\n+  --> $DIR/min_const_fn.rs:114:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:121:6\n+  --> $DIR/min_const_fn.rs:119:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:126:6\n+  --> $DIR/min_const_fn.rs:124:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:131:6\n+  --> $DIR/min_const_fn.rs:129:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:137:24\n+  --> $DIR/min_const_fn.rs:135:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:139:34\n+  --> $DIR/min_const_fn.rs:137:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:141:22\n+  --> $DIR/min_const_fn.rs:139:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:142:23\n+  --> $DIR/min_const_fn.rs:140:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n    |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:143:23\n+  --> $DIR/min_const_fn.rs:141:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                       ^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:144:32\n+  --> $DIR/min_const_fn.rs:142:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/min_const_fn.rs:144:64\n+  --> $DIR/min_const_fn.rs:142:64\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                                                ^^ - temporary value is freed at the end of this statement\n@@ -201,19 +201,19 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = note: borrowed value must be valid for the static lifetime...\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:149:41\n+  --> $DIR/min_const_fn.rs:147:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:152:21\n+  --> $DIR/min_const_fn.rs:150:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:154:27\n+  --> $DIR/min_const_fn.rs:152:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^"}, {"sha": "0dba3a7de53781e83b2f10abff826e5fdcaa26b0", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n-\n // ok\n const fn foo1() {}\n const fn foo2(x: i32) -> i32 { x }"}, {"sha": "bcb9be6e5485eff485765fc077d4b9a2e78e1110", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,209 +1,209 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:49:25\n+  --> $DIR/min_const_fn.rs:47:25\n    |\n LL |     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                         ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:51:36\n+  --> $DIR/min_const_fn.rs:49:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:56:28\n+  --> $DIR/min_const_fn.rs:54:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n    |                            ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:58:42\n+  --> $DIR/min_const_fn.rs:56:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:63:27\n+  --> $DIR/min_const_fn.rs:61:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n    |                           ^^^^ constant functions cannot evaluate destructors\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:65:38\n+  --> $DIR/min_const_fn.rs:63:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:70:39\n+  --> $DIR/min_const_fn.rs:68:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:88:16\n+  --> $DIR/min_const_fn.rs:86:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:90:18\n+  --> $DIR/min_const_fn.rs:88:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n \n error: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:92:33\n+  --> $DIR/min_const_fn.rs:90:33\n    |\n LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n \n error: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:94:35\n+  --> $DIR/min_const_fn.rs:92:35\n    |\n LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n \n error: only int and `bool` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:96:35\n+  --> $DIR/min_const_fn.rs:94:35\n    |\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n \n error: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:98:43\n+  --> $DIR/min_const_fn.rs:96:43\n    |\n LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n \n error: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:102:27\n+  --> $DIR/min_const_fn.rs:100:27\n    |\n LL | const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n    |                           ^^^\n \n error: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:103:36\n+  --> $DIR/min_const_fn.rs:101:36\n    |\n LL | const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n    |                                    ^^^^\n \n error: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:104:42\n+  --> $DIR/min_const_fn.rs:102:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n error: casting pointers to ints is unstable in const fn\n-  --> $DIR/min_const_fn.rs:106:42\n+  --> $DIR/min_const_fn.rs:104:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:108:38\n+  --> $DIR/min_const_fn.rs:106:38\n    |\n LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:110:29\n+  --> $DIR/min_const_fn.rs:108:29\n    |\n LL | const fn foo30_5(b: bool) { while b { } } //~ ERROR not stable in const fn\n    |                             ^^^^^^^^^^^\n \n error: local variables in const fn are unstable\n-  --> $DIR/min_const_fn.rs:111:34\n+  --> $DIR/min_const_fn.rs:109:34\n    |\n LL | const fn foo30_6() -> bool { let x = true; x } //~ ERROR local variables in const fn are unstable\n    |                                  ^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:112:44\n+  --> $DIR/min_const_fn.rs:110:44\n    |\n LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n \n error: `if`, `match`, `&&` and `||` are not stable in const fn\n-  --> $DIR/min_const_fn.rs:114:44\n+  --> $DIR/min_const_fn.rs:112:44\n    |\n LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n \n error: mutable references in const fn are unstable\n-  --> $DIR/min_const_fn.rs:116:14\n+  --> $DIR/min_const_fn.rs:114:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:121:6\n+  --> $DIR/min_const_fn.rs:119:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:126:6\n+  --> $DIR/min_const_fn.rs:124:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:131:6\n+  --> $DIR/min_const_fn.rs:129:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:137:24\n+  --> $DIR/min_const_fn.rs:135:24\n    |\n LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:139:34\n+  --> $DIR/min_const_fn.rs:137:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:141:22\n+  --> $DIR/min_const_fn.rs:139:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n error: `impl Trait` in const fn is unstable\n-  --> $DIR/min_const_fn.rs:142:23\n+  --> $DIR/min_const_fn.rs:140:23\n    |\n LL | const fn no_rpit() -> impl std::fmt::Debug {} //~ ERROR `impl Trait` in const fn is unstable\n    |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:143:23\n+  --> $DIR/min_const_fn.rs:141:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n    |                       ^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:144:32\n+  --> $DIR/min_const_fn.rs:142:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:149:41\n+  --> $DIR/min_const_fn.rs:147:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:152:21\n+  --> $DIR/min_const_fn.rs:150:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:154:27\n+  --> $DIR/min_const_fn.rs:152:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^"}, {"sha": "5d071a0fe24057f7330b7def8adf09483211df88", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,17 +1,17 @@\n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:21:5\n+  --> $DIR/min_const_fn_dyn.rs:19:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:24:66\n+  --> $DIR/min_const_fn_dyn.rs:22:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/min_const_fn_dyn.rs:24:67\n+  --> $DIR/min_const_fn_dyn.rs:22:67\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                   ^    - temporary value is freed at the end of this statement"}, {"sha": "e02474734d9ae2ed03a5a9c785431edfbfee4902", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n-\n struct HasDyn {\n     field: &'static dyn std::fmt::Debug,\n }"}, {"sha": "7bf9bdb6fa90a78c57f4918da11d422bcc2598e9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,11 +1,11 @@\n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:21:5\n+  --> $DIR/min_const_fn_dyn.rs:19:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn_dyn.rs:24:66\n+  --> $DIR/min_const_fn_dyn.rs:22:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^"}, {"sha": "64f212bc23792d221705b8ebd71a231372114327", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n-\n struct HasPtr {\n     field: fn(),\n }"}, {"sha": "54ffe66581de1b3eb86dd7f409d585f580ebb3c5", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,11 +1,11 @@\n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn_fn_ptr.rs:23:5\n+  --> $DIR/min_const_fn_fn_ptr.rs:21:5\n    |\n LL |     x.0.field;\n    |     ^^^^^^^^^\n \n error: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn_fn_ptr.rs:26:59\n+  --> $DIR/min_const_fn_fn_ptr.rs:24:59\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^"}, {"sha": "1a3e6d01912a21d5ee3a7fcdc4d5cbce11f44847", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(integer_atomics, min_const_fn)]\n+#![feature(integer_atomics)]\n \n // compile-pass\n "}, {"sha": "67332c6d2cfb23607f5ec49c515a30503ef76c1e", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(min_const_fn)]\n-\n // ok\n const unsafe fn foo4() -> i32 { 42 }\n const unsafe fn foo5<T>() -> *const T { 0 as *const T }"}, {"sha": "8cff0d491d8a4d563ae6e2f9a76a391fd51a3db4", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,53 +1,53 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe.rs:29:51\n+  --> $DIR/min_const_fn_unsafe.rs:27:51\n    |\n LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n    |                                                   ^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe.rs:36:5\n+  --> $DIR/min_const_fn_unsafe.rs:34:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn_union)] to the crate attributes to enable\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:21:14\n+  --> $DIR/min_const_fn_unsafe.rs:19:14\n    |\n LL |     unsafe { foo4() } //~ ERROR unsafe operations are not allowed in const fn\n    |              ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:24:14\n+  --> $DIR/min_const_fn_unsafe.rs:22:14\n    |\n LL |     unsafe { foo5::<String>() } //~ ERROR unsafe operations are not allowed in const fn\n    |              ^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:27:14\n+  --> $DIR/min_const_fn_unsafe.rs:25:14\n    |\n LL |     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR not allowed in const fn\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:29:51\n+  --> $DIR/min_const_fn_unsafe.rs:27:51\n    |\n LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n    |                                                   ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: access to union field is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:36:5\n+  --> $DIR/min_const_fn_unsafe.rs:34:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^ access to union field"}, {"sha": "396b58dd219d8d57532fd34173b625a773cb4781", "filename": "src/test/ui/consts/min_const_fn/promotion.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.nll.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promotion.rs:13:27\n+  --> $DIR/promotion.rs:11:27\n    |\n LL |     let x: &'static () = &foo1(); //~ ERROR does not live long enough\n    |                           ^^^^^^ creates a temporary which is freed while still in use\n@@ -10,7 +10,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promotion.rs:14:28\n+  --> $DIR/promotion.rs:12:28\n    |\n LL |     let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n    |                            ^^^^^^^^ creates a temporary which is freed while still in use\n@@ -21,7 +21,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promotion.rs:15:28\n+  --> $DIR/promotion.rs:13:28\n    |\n LL |     let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n    |                            ^^^^^^ creates a temporary which is freed while still in use\n@@ -32,7 +32,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promotion.rs:16:34\n+  --> $DIR/promotion.rs:14:34\n    |\n LL |     let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n    |                                  ^^^^^^ creates a temporary which is freed while still in use\n@@ -43,7 +43,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promotion.rs:17:42\n+  --> $DIR/promotion.rs:15:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n    |                                          ^^^^^^ creates a temporary which is freed while still in use\n@@ -54,7 +54,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promotion.rs:18:42\n+  --> $DIR/promotion.rs:16:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n    |                                          ^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "969bf40a93ba7cefee02173777f839783385f8c6", "filename": "src/test/ui/consts/min_const_fn/promotion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,5 +1,3 @@\n-#![feature(min_const_fn)]\n-\n use std::cell::Cell;\n \n const fn foo1() {}"}, {"sha": "7052f68c3ec61d85fa6728c41f7fd4f6d0fc9431", "filename": "src/test/ui/consts/min_const_fn/promotion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fpromotion.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/promotion.rs:13:27\n+  --> $DIR/promotion.rs:11:27\n    |\n LL |     let x: &'static () = &foo1(); //~ ERROR does not live long enough\n    |                           ^^^^^^ temporary value does not live long enough\n@@ -10,7 +10,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/promotion.rs:14:28\n+  --> $DIR/promotion.rs:12:28\n    |\n LL |     let y: &'static i32 = &foo2(42); //~ ERROR does not live long enough\n    |                            ^^^^^^^^ temporary value does not live long enough\n@@ -21,7 +21,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/promotion.rs:15:28\n+  --> $DIR/promotion.rs:13:28\n    |\n LL |     let z: &'static i32 = &foo3(); //~ ERROR does not live long enough\n    |                            ^^^^^^ temporary value does not live long enough\n@@ -32,7 +32,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/promotion.rs:16:34\n+  --> $DIR/promotion.rs:14:34\n    |\n LL |     let a: &'static Cell<i32> = &foo4();  //~ ERROR does not live long enough\n    |                                  ^^^^^^ temporary value does not live long enough\n@@ -43,7 +43,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/promotion.rs:17:42\n+  --> $DIR/promotion.rs:15:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo5(); //~ ERROR does not live long enough\n    |                                          ^^^^^^ temporary value does not live long enough\n@@ -54,7 +54,7 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/promotion.rs:18:42\n+  --> $DIR/promotion.rs:16:42\n    |\n LL |     let a: &'static Option<Cell<i32>> = &foo6(); //~ ERROR does not live long enough\n    |                                          ^^^^^^ temporary value does not live long enough"}, {"sha": "e52331fa92ac8f4ceb0f950e44325a7ae313053f", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test use of const fn without the `const_fn` feature gate.\n-// `min_const_fn` is checked in its own file\n-#![feature(min_const_fn)]\n+// Test use of advanced const fn without the `const_fn` feature gate.\n \n const fn foo() -> usize { 0 } // ok\n "}, {"sha": "150a702d105fa6cf42d959383ec11c0ff7408293", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,31 +1,31 @@\n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:18:5\n+  --> $DIR/feature-gate-const_fn.rs:16:5\n    |\n LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:20:5\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n    |\n LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n error[E0379]: trait fns cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:29:5\n+  --> $DIR/feature-gate-const_fn.rs:27:5\n    |\n LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const\n \n error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:18:5\n+  --> $DIR/feature-gate-const_fn.rs:16:5\n    |\n LL |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n error[E0658]: const fn is unstable (see issue #24111)\n-  --> $DIR/feature-gate-const_fn.rs:20:5\n+  --> $DIR/feature-gate-const_fn.rs:18:5\n    |\n LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "40cb75316efa130ac65cb284c8d12d91b17b02ee", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,7 @@\n \n // Test use of min_const_fn without feature gate.\n \n-const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n+const fn foo() -> usize { 0 } // stabilized\n \n trait Foo {\n     const fn foo() -> u32; //~ ERROR const fn is unstable\n@@ -20,12 +20,11 @@ trait Foo {\n }\n \n impl Foo {\n-    const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n+    const fn baz() -> u32 { 0 } // stabilized\n }\n \n impl Foo for u32 {\n-    const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n-                                //~| ERROR trait fns cannot be declared const\n+    const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n }\n \n static FOO: usize = foo();"}, {"sha": "34526746db84413ecf099284c178a87f5750bbac", "filename": "src/test/ui/feature-gates/feature-gate-min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-min_const_fn.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -13,17 +13,9 @@ LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n error[E0379]: trait fns cannot be declared const\n   --> $DIR/feature-gate-min_const_fn.rs:27:5\n    |\n-LL |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n+LL |     const fn foo() -> u32 { 0 } //~ ERROR trait fns cannot be declared const\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0658]: const fn is unstable (see issue #53555)\n-  --> $DIR/feature-gate-min_const_fn.rs:13:1\n-   |\n-LL | const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(min_const_fn)] to the crate attributes to enable\n-\n error[E0658]: const fn is unstable (see issue #24111)\n   --> $DIR/feature-gate-min_const_fn.rs:16:5\n    |\n@@ -40,23 +32,7 @@ LL |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error[E0658]: const fn is unstable (see issue #53555)\n-  --> $DIR/feature-gate-min_const_fn.rs:23:5\n-   |\n-LL |     const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(min_const_fn)] to the crate attributes to enable\n-\n-error[E0658]: const fn is unstable (see issue #53555)\n-  --> $DIR/feature-gate-min_const_fn.rs:27:5\n-   |\n-LL |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(min_const_fn)] to the crate attributes to enable\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0379, E0658.\n For more information about an error, try `rustc --explain E0379`."}, {"sha": "f99a080a9f07d6079de3c180852bd253da0ea885", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n //https://github.com/rust-lang/rust/issues/31364\n \n-#![feature(min_const_fn)]\n const fn a() -> usize { b() }\n const fn b() -> usize { a() }\n const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression"}, {"sha": "579cc6bd548f9f585e64bd098f0055ae97c47564", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: could not evaluate constant expression\n-  --> $DIR/infinite-recursion-const-fn.rs:16:1\n+  --> $DIR/infinite-recursion-const-fn.rs:15:1\n    |\n LL | const fn a() -> usize { b() }\n    |                         ---"}, {"sha": "03b91a13224543a7e1b8e1a62f8ff4b459ce1ca3", "filename": "src/test/ui/issues/issue-28822.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28822.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,7 +10,6 @@\n \n // compile-pass\n #![allow(dead_code)]\n-#![feature(min_const_fn)]\n \n fn main() {}\n "}, {"sha": "88be25066ce40c7e21aeb69ba310dc5b0bce98ff", "filename": "src/test/ui/unsafe/unsafe-const-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.rs?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -10,8 +10,6 @@\n \n // A quick test of 'unsafe const fn' functionality\n \n-#![feature(min_const_fn)]\n-\n const unsafe fn dummy(v: u32) -> u32 {\n     !v\n }"}, {"sha": "d1a267d4f842e723752071c58d0224d3e3d8ff07", "filename": "src/test/ui/unsafe/unsafe-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec74d3533a9b88505d56d0ae00a78acf2e702c92/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.stderr?ref=ec74d3533a9b88505d56d0ae00a78acf2e702c92", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-const-fn.rs:19:18\n+  --> $DIR/unsafe-const-fn.rs:17:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n    |                  ^^^^^^^^^^^^^ call to unsafe function"}]}