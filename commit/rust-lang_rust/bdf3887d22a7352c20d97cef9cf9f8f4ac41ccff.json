{"sha": "bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjM4ODdkMjJhNzM1MmMyMGQ5N2NlZjljZjlmOGY0YWM0MWNjZmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-14T16:07:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-14T16:07:04Z"}, "message": "Move 'handle_method_call_in_not' code into 'suggest'", "tree": {"sha": "0013589508aae1de056fdf9b3404e09dd80c213c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0013589508aae1de056fdf9b3404e09dd80c213c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloLFKgACgkQpp+NIls6\n19nExw/+NEAzm7HbCB1gxUuR0ioYsY4ZhkeyEAWk/oMy0PvqKuiHhtAHZECniwwp\nTaW6+wTP6bzQ4GZS6BQ/FnNn75oRsG8kfyEhdB/Ph/qfgIIyrWOHwcpiQPM3BuDx\nk1QP9Ypi1Wbaiwe5NsbERV7IKe3MN3rm7wuMX0hjgSS0siNv3GrlWHcC8ZSvvITP\nBzTKNxJD7rVX6K+q6AEWT5RWujtZ0bS7XaakNZeWkrTyrLMK5xWOcBF9PLXvUqUK\nFHEimwP2fwnoUVlZJrT0tK96VcEXIq+J38Ex0mvzoubNWMK6wGw7WYBGq94kRgBk\n61AfuTYwe/KYvN/UaqQORTMFap1XK6He3f6RvdCw12CsIDuzGzTyIhA8YADNOsIT\nVlbPOVQ+6GbwoZFbt+O36QkJjlViGrSQM60XSMGZEFPM1EJbmTef/vu5OFsILnqK\nJaS5bUo66oTReT5jcMhEJESLoVGUN6D/HS9e/kO0JDYL4wf2LZAaDyddi+ql6LCC\nawAijRwef36JYY16xg0OIHf8k0HmBm1BpBlnNLavzeqp5FH8z9lSsbYv/MdsK53F\nxjLAlAUsFc6eb8tO+Cnk+gJAEvINJzdhAtSTmLAVDIKXLheG2J+VduQk4xtxikq5\ni7JnOy6N9/xhivnYm9D/BXOm/VXHRc0+ivxIZz5sD/xSYPMn50o=\n=lmFw\n-----END PGP SIGNATURE-----", "payload": "tree 0013589508aae1de056fdf9b3404e09dd80c213c\nparent 561d47f338f1ef26f385d731d802a59382307e73\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510675624 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510675624 +0100\n\nMove 'handle_method_call_in_not' code into 'suggest'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "html_url": "https://github.com/rust-lang/rust/commit/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "561d47f338f1ef26f385d731d802a59382307e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/561d47f338f1ef26f385d731d802a59382307e73", "html_url": "https://github.com/rust-lang/rust/commit/561d47f338f1ef26f385d731d802a59382307e73"}], "stats": {"total": 144, "additions": 45, "deletions": 99}, "files": [{"sha": "5de3246f1a9fb2e7b7a33d6894e57b32f1e757eb", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "patch": "@@ -177,26 +177,45 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                     s.push('!');\n                     recurse(true, cx, inner, terminals, s)\n                 },\n-                Term(n) => if let ExprBinary(binop, ref lhs, ref rhs) = terminals[n as usize].node {\n-                    let op = match binop.node {\n-                        BiEq => \" != \",\n-                        BiNe => \" == \",\n-                        BiLt => \" >= \",\n-                        BiGt => \" <= \",\n-                        BiLe => \" > \",\n-                        BiGe => \" < \",\n-                        _ => {\n+                Term(n) => match terminals[n as usize].node {\n+                    ExprBinary(binop, ref lhs, ref rhs) => {\n+                        let op = match binop.node {\n+                            BiEq => \" != \",\n+                            BiNe => \" == \",\n+                            BiLt => \" >= \",\n+                            BiGt => \" <= \",\n+                            BiLe => \" > \",\n+                            BiGe => \" < \",\n+                            _ => {\n+                                s.push('!');\n+                                return recurse(true, cx, inner, terminals, s);\n+                            },\n+                        };\n+                        s.push_str(&snip(lhs));\n+                        s.push_str(op);\n+                        s.push_str(&snip(rhs));\n+                        s\n+                    },\n+                    ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n+                        let negation = METHODS_WITH_NEGATION\n+                            .iter().cloned()\n+                            .flat_map(|(a, b)| vec![(a, b), (b, a)])\n+                            .find(|&(a, _)| a == path.name.as_str());\n+                        if let Some((_, negation_method)) = negation {\n+                            s.push_str(&snip(&args[0]));\n+                            s.push('.');\n+                            s.push_str(negation_method);\n+                            s.push_str(\"()\");\n+                            s\n+                        } else {\n                             s.push('!');\n-                            return recurse(true, cx, inner, terminals, s);\n-                        },\n-                    };\n-                    s.push_str(&snip(lhs));\n-                    s.push_str(op);\n-                    s.push_str(&snip(rhs));\n-                    s\n-                } else {\n-                    s.push('!');\n-                    recurse(false, cx, inner, terminals, s)\n+                            recurse(false, cx, inner, terminals, s)\n+                        }\n+                    },\n+                    _ => {\n+                        s.push('!');\n+                        recurse(false, cx, inner, terminals, s)\n+                    },\n                 },\n                 _ => {\n                     s.push('!');\n@@ -402,32 +421,6 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    fn handle_method_call_in_not(&mut self, e: &'tcx Expr, inner: &'tcx Expr) {\n-        if let ExprMethodCall(ref path, _, ref args) = inner.node {\n-            if args.len() == 1 {\n-                METHODS_WITH_NEGATION.iter().for_each(|&(method1, method2)| {\n-                    for &(method, negation_method) in &[(method1, method2), (method2, method1)] {\n-                        if method == path.name.as_str() {\n-                            span_lint_and_then(\n-                                self.cx,\n-                                NONMINIMAL_BOOL,\n-                                e.span,\n-                                \"this boolean expression can be simplified\",\n-                                |db| {\n-                                    db.span_suggestion(\n-                                        e.span,\n-                                        \"try\",\n-                                        negation_method.to_owned()\n-                                    );\n-                                }\n-                            )\n-                        }\n-                    }\n-                })\n-            }\n-        }\n-    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n@@ -438,7 +431,6 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         match e.node {\n             ExprBinary(binop, _, _) if binop.node == BiOr || binop.node == BiAnd => self.bool_expr(e),\n             ExprUnary(UnNot, ref inner) => if self.cx.tables.node_types()[inner.hir_id].is_bool() {\n-                self.handle_method_call_in_not(e, inner);\n                 self.bool_expr(e);\n             } else {\n                 walk_expr(self, e);"}, {"sha": "52ce90dd63debd6986944b633f7a236d50a98b65", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "patch": "@@ -51,4 +51,6 @@ fn methods_with_negation() {\n     let _ = !b.is_err();\n     let _ = b.is_ok();\n     let _ = !b.is_ok();\n+    let c = false;\n+    let _ = !(a.is_some() && !c);\n }"}, {"sha": "e50961323e511885ea779389998981a747f97a33", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "patch": "@@ -131,26 +131,8 @@ help: try\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:47:13\n+  --> $DIR/booleans.rs:55:13\n    |\n-47 |     let _ = !a.is_some();\n-   |             ^^^^^^^^^^^^ help: try: `is_none`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:49:13\n-   |\n-49 |     let _ = !a.is_none();\n-   |             ^^^^^^^^^^^^ help: try: `is_some`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:51:13\n-   |\n-51 |     let _ = !b.is_err();\n-   |             ^^^^^^^^^^^ help: try: `is_ok`\n-\n-error: this boolean expression can be simplified\n-  --> $DIR/booleans.rs:53:13\n-   |\n-53 |     let _ = !b.is_ok();\n-   |             ^^^^^^^^^^ help: try: `is_err`\n+55 |     let _ = !(a.is_some() && !c);\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `c || a.is_none()`\n "}, {"sha": "558e9e83c331db3e3e5597368a64be17de350997", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "patch": "@@ -6,15 +6,3 @@ error: useless use of `format!`\n   |\n   = note: `-D useless-format` implied by `-D warnings`\n \n-error: useless use of `format!`\n- --> $DIR/format.rs:8:5\n-  |\n-8 |     format!(\"{}\", \"foo\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: useless use of `format!`\n-  --> $DIR/format.rs:15:5\n-   |\n-15 |     format!(\"{}\", arg);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-"}, {"sha": "94ee5f613fc9f60c59fc0042b3b3668150fd973f", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "patch": "@@ -23,7 +23,7 @@ error: the loop variable `i` is only used to index `ms`.\n help: consider using an iterator\n    |\n 29 |     for <item> in &mut ms {\n-   |         ^^^^^^\n+   |\n \n error: the loop variable `i` is only used to index `ms`.\n   --> $DIR/needless_range_loop.rs:35:5\n@@ -37,5 +37,5 @@ error: the loop variable `i` is only used to index `ms`.\n help: consider using an iterator\n    |\n 35 |     for <item> in &mut ms {\n-   |         ^^^^^^\n+   |\n "}, {"sha": "0148a470e0d0c3b1459eec31762f9a07fb89e709", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "patch": "@@ -6,21 +6,3 @@ error: using `print!()` with a format string that ends in a newline, consider us\n   |\n   = note: `-D print-with-newline` implied by `-D warnings`\n \n-error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:7:5\n-  |\n-7 |     print!(\"Hello {}/n\", \"world\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:8:5\n-  |\n-8 |     print!(\"Hello {} {}/n/n\", \"world\", \"#2\");\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n- --> $DIR/print_with_newline.rs:9:5\n-  |\n-9 |     print!(\"{}/n\", 1265);\n-  |     ^^^^^^^^^^^^^^^^^^^^^\n-"}]}