{"sha": "e82693fa23caea857ba83fa0963154627b5fe12c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjY5M2ZhMjNjYWVhODU3YmE4M2ZhMDk2MzE1NDYyN2I1ZmUxMmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-01T11:01:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-01T11:01:28Z"}, "message": "Merge branch 'master' into rustup", "tree": {"sha": "480af391a02c816659ec3258dbd0781274dc0664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/480af391a02c816659ec3258dbd0781274dc0664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82693fa23caea857ba83fa0963154627b5fe12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82693fa23caea857ba83fa0963154627b5fe12c", "html_url": "https://github.com/rust-lang/rust/commit/e82693fa23caea857ba83fa0963154627b5fe12c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82693fa23caea857ba83fa0963154627b5fe12c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba47d730413b5ab5be1e0fe1a890c782e49b1655", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba47d730413b5ab5be1e0fe1a890c782e49b1655", "html_url": "https://github.com/rust-lang/rust/commit/ba47d730413b5ab5be1e0fe1a890c782e49b1655"}, {"sha": "2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a", "html_url": "https://github.com/rust-lang/rust/commit/2a4c4ade302b4c2db07a16eac9cf5fdb0619038a"}], "stats": {"total": 267, "additions": 175, "deletions": 92}, "files": [{"sha": "4e8b8cd4b898b88233486e8005690d681f7c5ead", "filename": ".appveyor.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/.appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/.appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.appveyor.yml?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -29,8 +29,6 @@ install:\n     - rustc --version\n \n build_script:\n-    - set RUST_TEST_NOCAPTURE=1\n-    - set RUST_BACKTRACE=1\n     - set RUSTFLAGS=-C debug-assertions\n     # Build and install miri\n     - cargo build --release --all-features --all-targets\n@@ -40,6 +38,8 @@ build_script:\n     - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\rust-lang\\miri\\cache\\HOST\n \n test_script:\n+    - set RUST_TEST_NOCAPTURE=1\n+    - set RUST_BACKTRACE=1\n     # Test miri\n     - cargo test --release --all-features\n     # Test cargo integration"}, {"sha": "be104ed0b2ba3b6335965b149be67d075a139893", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -333,6 +333,7 @@ Definite bugs found:\n * [Futures turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/56319)\n * [`str` turning a shared reference into a mutable one](https://github.com/rust-lang/rust/pull/58200)\n * [`rand` performing unaligned reads](https://github.com/rust-random/rand/issues/779)\n+* [The Unix allocator calling `posix_memalign` in an invalid way](https://github.com/rust-lang/rust/issues/62251)\n \n Violations of Stacked Borrows found that are likely bugs (but Stacked Borrows is currently just an experiment):\n "}, {"sha": "5480700005075d14b51ce3be601a18c85c33109f", "filename": "src/intptrcast.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -1,37 +1,37 @@\n-use std::cell::{Cell, RefCell};\n+use std::cell::RefCell;\n+use std::collections::{HashMap, hash_map::Entry};\n+use std::cmp::max;\n \n use rand::Rng;\n \n-use rustc::mir::interpret::{AllocId, Pointer, InterpResult};\n-use rustc_mir::interpret::Memory;\n+use rustc_mir::interpret::{AllocId, Pointer, InterpResult, Memory, AllocCheck};\n use rustc_target::abi::Size;\n \n-use crate::stacked_borrows::Tag;\n-use crate::Evaluator;\n+use crate::{Evaluator, Tag, STACK_ADDR};\n \n pub type MemoryExtra = RefCell<GlobalState>;\n \n-#[derive(Clone, Debug, Default)]\n-pub struct AllocExtra {\n-    base_addr: Cell<Option<u64>>\n-}\n-\n #[derive(Clone, Debug)]\n pub struct GlobalState {\n     /// This is used as a map between the address of each allocation and its `AllocId`.\n     /// It is always sorted\n     pub int_to_ptr_map: Vec<(u64, AllocId)>,\n+    /// The base address for each allocation.  We cannot put that into\n+    /// `AllocExtra` because function pointers also have a base address, and\n+    /// they do not have an `AllocExtra`.\n+    /// This is the inverse of `int_to_ptr_map`.\n+    pub base_addr: HashMap<AllocId, u64>,\n     /// This is used as a memory address when a new pointer is casted to an integer. It\n     /// is always larger than any address that was previously made part of a block.\n     pub next_base_addr: u64,\n }\n \n impl Default for GlobalState {\n-    // FIXME: Query the page size in the future\n     fn default() -> Self {\n         GlobalState {\n             int_to_ptr_map: Vec::default(),\n-            next_base_addr: 2u64.pow(16)\n+            base_addr: HashMap::default(),\n+            next_base_addr: STACK_ADDR,\n         }\n     }\n }\n@@ -73,13 +73,13 @@ impl<'mir, 'tcx> GlobalState {\n         memory: &Memory<'mir, 'tcx, Evaluator<'tcx>>,\n     ) -> InterpResult<'tcx, u64> {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n+        let global_state = &mut *global_state;\n \n-        let alloc = memory.get(ptr.alloc_id)?;\n-        let align = alloc.align.bytes();\n+        let (size, align) = memory.get_size_and_align(ptr.alloc_id, AllocCheck::Live)?;\n \n-        let base_addr = match alloc.extra.intptrcast.base_addr.get() { \n-            Some(base_addr) => base_addr,\n-            None => {\n+        let base_addr = match global_state.base_addr.entry(ptr.alloc_id) {\n+            Entry::Occupied(entry) => *entry.get(),\n+            Entry::Vacant(entry) => {\n                 // This allocation does not have a base address yet, pick one.\n                 // Leave some space to the previous allocation, to give it some chance to be less aligned.\n                 let slack = {\n@@ -88,11 +88,16 @@ impl<'mir, 'tcx> GlobalState {\n                     rng.gen_range(0, 16)\n                 };\n                 // From next_base_addr + slack, round up to adjust for alignment.\n-                let base_addr = Self::align_addr(global_state.next_base_addr + slack, align);\n-                alloc.extra.intptrcast.base_addr.set(Some(base_addr));\n-\n-                // Remember next base address.\n-                global_state.next_base_addr = base_addr + alloc.bytes.len() as u64;\n+                let base_addr = Self::align_addr(global_state.next_base_addr + slack, align.bytes());\n+                entry.insert(base_addr);\n+                trace!(\n+                    \"Assigning base address {:#x} to allocation {:?} (slack: {}, align: {})\",\n+                    base_addr, ptr.alloc_id, slack, align.bytes(),\n+                );\n+\n+                // Remember next base address.  If this allocation is zero-sized, leave a gap\n+                // of at least 1 to avoid two allocations having the same base address.\n+                global_state.next_base_addr = base_addr + max(size.bytes(), 1);\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id)); \n@@ -101,7 +106,7 @@ impl<'mir, 'tcx> GlobalState {\n             }\n         };\n \n-        debug_assert_eq!(base_addr % align, 0); // sanity check\n+        debug_assert_eq!(base_addr % align.bytes(), 0); // sanity check\n         Ok(base_addr + ptr.offset.bytes())\n     }\n "}, {"sha": "6b2de4ac08be4fba58c93ca2accd8bf7aef80cb2", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -12,9 +12,8 @@ extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_target;\n \n-mod fn_call;\n+mod shims;\n mod operator;\n-mod intrinsic;\n mod helpers;\n mod tls;\n mod range_map;\n@@ -29,15 +28,18 @@ pub use rustc_mir::interpret::*;\n // Resolve ambiguity.\n pub use rustc_mir::interpret::{self, AllocMap, PlaceTy};\n \n-pub use crate::fn_call::EvalContextExt as MissingFnsEvalContextExt;\n+pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextExt;\n+pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n-pub use crate::intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n pub use crate::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n-pub use crate::machine::{MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt};\n+pub use crate::machine::{\n+    PAGE_SIZE, STACK_ADDR, NUM_CPUS,\n+    MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n+};\n pub use crate::eval::{eval_main, create_ecx, MiriConfig};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be"}, {"sha": "4d68b41b918e124bea0397df62635eab1d399166", "filename": "src/machine.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -16,6 +16,11 @@ use rustc::mir;\n \n use crate::*;\n \n+// Some global facts about the emulated machine.\n+pub const PAGE_SIZE: u64 = 4*1024; // FIXME: adjust to target architecture\n+pub const STACK_ADDR: u64 = 16*PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n+pub const NUM_CPUS: u64 = 1;\n+\n /// Extra memory kinds\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum MiriMemoryKind {\n@@ -40,7 +45,6 @@ impl Into<MemoryKind<MiriMemoryKind>> for MiriMemoryKind {\n #[derive(Debug, Clone)]\n pub struct AllocExtra {\n     pub stacked_borrows: stacked_borrows::AllocExtra,\n-    pub intptrcast: intptrcast::AllocExtra,\n }\n \n /// Extra global memory data\n@@ -275,7 +279,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n             mutability: alloc.mutability,\n             extra: AllocExtra {\n                 stacked_borrows: stacks,\n-                intptrcast: Default::default(),\n             },\n         };\n         (Cow::Owned(alloc), base_tag)"}, {"sha": "1a39df9cce15f996dda922c9a2ea5461d0050d04", "filename": "src/shims/foreign_items.rs", "status": "renamed", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -51,6 +51,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Some(this.load_mir(instance.def)?))\n     }\n \n+    /// Returns the minimum alignment for the target architecture.\n+    fn min_align(&self) -> Align {\n+        let this = self.eval_context_ref();\n+        // List taken from `libstd/sys_common/alloc.rs`.\n+        let min_align = match this.tcx.tcx.sess.target.target.arch.as_str() {\n+            \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n+            \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n+            arch => bug!(\"Unsupported target architecture: {}\", arch),\n+        };\n+        Align::from_bytes(min_align).unwrap()\n+    }\n+\n     fn malloc(\n         &mut self,\n         size: u64,\n@@ -61,7 +73,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if size == 0 {\n             Scalar::from_int(0, this.pointer_size())\n         } else {\n-            let align = this.tcx.data_layout.pointer_align.abi;\n+            let align = this.min_align();\n             let ptr = this.memory_mut().allocate(Size::from_bytes(size), align, MiriMemoryKind::C.into());\n             if zero_init {\n                 // We just allocated this, the access cannot fail\n@@ -94,7 +106,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         new_size: u64,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n-        let align = this.tcx.data_layout.pointer_align.abi;\n+        let align = this.min_align();\n         if old_ptr.is_null_ptr(this) {\n             if new_size == 0 {\n                 Ok(Scalar::from_int(0, this.pointer_size()))\n@@ -191,12 +203,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if !align.is_power_of_two() {\n                     return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n+                /*\n+                FIXME: This check is disabled because rustc violates it.\n+                See <https://github.com/rust-lang/rust/issues/62251>.\n                 if align < this.pointer_size().bytes() {\n                     return err!(MachineError(format!(\n                         \"posix_memalign: alignment must be at least the size of a pointer, but is {}\",\n                         align,\n                     )));\n                 }\n+                */\n                 if size == 0 {\n                     this.write_null(ret.into())?;\n                 } else {\n@@ -622,11 +638,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let name = this.read_scalar(args[0])?.to_i32()?;\n \n                 trace!(\"sysconf() called with name {}\", name);\n-                // Cache the sysconf integers via Miri's global cache.\n+                // TODO: Cache the sysconf integers via Miri's global cache.\n                 let paths = &[\n-                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(4096, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_PAGESIZE\"], Scalar::from_int(PAGE_SIZE, dest.layout.size)),\n                     (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], Scalar::from_int(-1, dest.layout.size)),\n-                    (&[\"libc\", \"_SC_NPROCESSORS_ONLN\"], Scalar::from_int(1, dest.layout.size)),\n+                    (&[\"libc\", \"_SC_NPROCESSORS_ONLN\"], Scalar::from_int(NUM_CPUS, dest.layout.size)),\n                 ];\n                 let mut result = None;\n                 for &(path, path_value) in paths {\n@@ -648,6 +664,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n+            \"sched_getaffinity\" => {\n+                // Return an error; `num_cpus` then falls back to `sysconf`.\n+                this.write_scalar(Scalar::from_int(-1, dest.layout.size), dest)?;\n+            }\n+\n             \"isatty\" => {\n                 this.write_null(dest)?;\n             }\n@@ -722,14 +743,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Second argument is where we are supposed to write the stack size.\n                 let ptr = this.deref_operand(args[1])?;\n                 // Just any address.\n-                let stack_addr = Scalar::from_int(0x80000, args[1].layout.size);\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, args[1].layout.size);\n                 this.write_scalar(stack_addr, ptr.into())?;\n                 // Return success (`0`).\n                 this.write_null(dest)?;\n             }\n             \"pthread_get_stackaddr_np\" => {\n                 // Just any address.\n-                let stack_addr = Scalar::from_int(0x80000, dest.layout.size);\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n                 this.write_scalar(stack_addr, dest)?;\n             }\n \n@@ -838,14 +859,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Initialize with `0`.\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n                     .write_repeat(tcx, system_info_ptr, 0, system_info.layout.size)?;\n-                // Set number of processors to `1`.\n+                // Set number of processors.\n                 let dword_size = Size::from_bytes(4);\n                 let offset = 2*dword_size + 3*tcx.pointer_size();\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n                     .write_scalar(\n                         tcx,\n                         system_info_ptr.offset(offset, tcx)?,\n-                        Scalar::from_int(1, dword_size).into(),\n+                        Scalar::from_int(NUM_CPUS, dword_size).into(),\n                         dword_size,\n                     )?;\n             }", "previous_filename": "src/fn_call.rs"}, {"sha": "3f9c4e53f09d6f25ea15955c49f8355172055839", "filename": "src/shims/intrinsics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "previous_filename": "src/intrinsic.rs"}, {"sha": "cadfc05681dade0d48b23fd775d8b747eceefb9e", "filename": "src/shims/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -0,0 +1,2 @@\n+pub mod foreign_items;\n+pub mod intrinsics;"}, {"sha": "8343832886a6b3adc8aa7ce1d04dace1d925f172", "filename": "test-cargo-miri/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.lock?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -29,6 +29,7 @@ name = \"cargo-miri-test\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -66,6 +67,14 @@ name = \"libc\"\n version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"num_cpus\"\n+version = \"1.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.5\"\n@@ -148,6 +157,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum getrandom 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d1dffef07351aafe6ef177e4dd2b8dcf503e6bc765dea3b0de9ed149a3db1ec\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n \"checksum libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6281b86796ba5e4366000be6e9e18bf35580adf9e63fbe2294aadb587613a319\"\n+\"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n \"checksum ppv-lite86 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3cbf9f658cdb5000fcf6f362b8ea2ba154b9f146a61c7a20d647034c6b6561b\"\n \"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n \"checksum rand_chacha 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e193067942ef6f485a349a113329140d0ab9e2168ce92274499bb0e9a4190d9d\""}, {"sha": "3abb437049f0f0a710ca9c2b31660992f9e83da2", "filename": "test-cargo-miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2FCargo.toml?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -9,3 +9,4 @@ byteorder = \"1.0\"\n \n [dev-dependencies]\n rand = { version = \"0.7\", features = [\"small_rng\"] }\n+num_cpus = \"1.10.1\""}, {"sha": "73515c74e401030dd14a4169a984662121622ce2", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -8,7 +8,7 @@\n import sys, subprocess, os\n \n def fail(msg):\n-    print(\"TEST FAIL: {}\".format(msg))\n+    print(\"\\nTEST FAIL: {}\".format(msg))\n     sys.exit(1)\n \n def cargo_miri(cmd):\n@@ -57,7 +57,7 @@ def test_cargo_miri_test():\n         \"test.stdout.ref\", \"test.stderr.ref\"\n     )\n     test(\"cargo miri test (with filter)\",\n-        cargo_miri(\"test\") + [\"--\", \"--\", \"impl\"],\n+        cargo_miri(\"test\") + [\"--\", \"--\", \"le1\"],\n         \"test.stdout.ref2\", \"test.stderr.ref\"\n     )\n \n@@ -66,5 +66,5 @@ def test_cargo_miri_test():\n test_cargo_miri_run()\n test_cargo_miri_test()\n \n-print(\"TEST SUCCESSFUL!\")\n+print(\"\\nTEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "d3663ec849d36dbc3c69d955347b9e98a309d217", "filename": "test-cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Fmain.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -1,10 +1,13 @@\n use byteorder::{BigEndian, ByteOrder};\n \n fn main() {\n+    // Exercise external crate, printing to stdout.\n     let buf = &[1,2,3,4];\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n     println!(\"{:#010x}\", n);\n+\n+    // Access program arguments, printing to stderr.\n     for arg in std::env::args() {\n         eprintln!(\"{}\", arg);\n     }"}, {"sha": "c2257e68e256ca819ab2b2654a09e79e4da54cbc", "filename": "test-cargo-miri/test.stdout.ref", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -5,9 +5,11 @@ test test::rng ... ok\n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n \n-running 2 tests\n+running 4 tests\n test entropy_rng ... ok\n-test simple ... ok\n+test num_cpus ... ok\n+test simple1 ... ok\n+test simple2 ... ok\n \n-test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "a6f6e915e0e85441d731577b8d9f097a9c22e9d4", "filename": "test-cargo-miri/test.stdout.ref2", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -5,7 +5,7 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n \n \n running 1 test\n-test simple ... ok\n+test simple1 ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 3 filtered out\n "}, {"sha": "cfbe3f6d7fb66da4066e1545464c29a9507b9bb7", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -3,13 +3,28 @@ use rand::{SeedableRng, Rng, rngs::SmallRng};\n // Having more than 1 test does seem to make a difference\n // (i.e., this calls ptr::swap which having just one test does not).\n #[test]\n-fn simple() {\n+fn simple1() {\n     assert_eq!(4, 4);\n }\n \n+#[test]\n+fn simple2() {\n+    assert_ne!(42, 24);\n+}\n+\n+// A test that won't work on miri (tests disabling tests)\n+#[cfg(not(miri))]\n+#[test]\n+fn does_not_work_on_miri() {\n+    let x = 0u8;\n+    assert!(&x as *const _ as usize % 4 < 4);\n+}\n+\n+// We also use this to test some external crates, that we cannot depend on in the compiletest suite.\n+\n #[test]\n fn entropy_rng() {\n-    // Use this opportunity to test querying the RNG (needs an external crate, hence tested here and not in the compiletest suite)\n+    // Try seeding with \"real\" entropy.\n     let mut rng = SmallRng::from_entropy();\n     let _val = rng.gen::<i32>();\n     let _val = rng.gen::<isize>();\n@@ -22,10 +37,7 @@ fn entropy_rng() {\n     let _val = rng.gen::<i128>();\n }\n \n-// A test that won't work on miri\n-#[cfg(not(miri))]\n #[test]\n-fn does_not_work_on_miri() {\n-    let x = 0u8;\n-    assert!(&x as *const _ as usize % 4 < 4);\n+fn num_cpus() {\n+    assert_eq!(num_cpus::get(), 1);\n }"}, {"sha": "2f3a48f535ddd186c5aa8134a6212da9dcc9eb5b", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -1,51 +1,64 @@\n+// compile-flags: -Zmiri-seed=\n #![feature(allocator_api)]\n \n use std::ptr::NonNull;\n use std::alloc::{Global, Alloc, Layout, System};\n use std::slice;\n \n fn check_alloc<T: Alloc>(mut allocator: T) { unsafe {\n-    let layout = Layout::from_size_align(20, 4).unwrap();\n-    let a = allocator.alloc(layout).unwrap();\n-    allocator.dealloc(a, layout);\n+    for &align in &[4, 8, 16, 32] {\n+        let layout = Layout::from_size_align(20, align).unwrap();\n \n-    let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        for _ in 0..32 {\n+            let a = allocator.alloc(layout).unwrap();\n+            assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+            allocator.dealloc(a, layout);\n+        }\n+\n+        let p1 = allocator.alloc_zeroed(layout).unwrap();\n+        assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n \n-    let p2 = allocator.realloc(p1, Layout::from_size_align(20, 4).unwrap(), 40).unwrap();\n-    let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n-    assert_eq!(&slice, &[0_u8; 20]);\n+        let p2 = allocator.realloc(p1, layout, 40).unwrap();\n+        let layout = Layout::from_size_align(40, align).unwrap();\n+        assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n \n-    // old size == new size\n-    let p3 = allocator.realloc(p2, Layout::from_size_align(40, 4).unwrap(), 40).unwrap();\n-    let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n-    assert_eq!(&slice, &[0_u8; 20]);\n+        // old size == new size\n+        let p3 = allocator.realloc(p2, layout, 40).unwrap();\n+        assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n \n-    // old size > new size\n-    let p4 = allocator.realloc(p3, Layout::from_size_align(40, 4).unwrap(), 10).unwrap();\n-    let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n-    assert_eq!(&slice, &[0_u8; 10]);\n+        // old size > new size\n+        let p4 = allocator.realloc(p3, layout, 10).unwrap();\n+        let layout = Layout::from_size_align(10, align).unwrap();\n+        assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n+        let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n+        assert_eq!(&slice, &[0_u8; 10]);\n \n-    allocator.dealloc(p4, Layout::from_size_align(10, 4).unwrap());\n+        allocator.dealloc(p4, layout);\n+    }\n } }\n \n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n-    let size = 8;\n-    // Greater than `size`.\n-    let align = 16;\n-    // Miri is deterministic; no need to try many times.\n-    let iterations = 1;\n-    unsafe {\n-        let pointers: Vec<_> = (0..iterations).map(|_| {\n-            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n-        }).collect();\n-        for &ptr in &pointers {\n-            assert_eq!((ptr.as_ptr() as usize) % align, 0,\n-                       \"Got a pointer less aligned than requested\")\n-        }\n+    for &size in &[2, 8, 64] { // size less than and bigger than alignment\n+        for &align in &[4, 8, 16, 32] { // Be sure to cover less than and bigger than `MIN_ALIGN` for all architectures\n+            let iterations = 32;\n+            unsafe {\n+                let pointers: Vec<_> = (0..iterations).map(|_| {\n+                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+                }).collect();\n+                for &ptr in &pointers {\n+                    assert_eq!((ptr.as_ptr() as usize) % align, 0,\n+                            \"Got a pointer less aligned than requested\")\n+                }\n \n-        // Clean up.\n-        for &ptr in &pointers {\n-            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                // Clean up.\n+                for &ptr in &pointers {\n+                    allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                }\n+            }\n         }\n     }\n }\n@@ -75,7 +88,6 @@ fn box_to_global() {\n fn main() {\n     check_alloc(System);\n     check_alloc(Global);\n-    #[cfg(not(target_os = \"windows\"))] // TODO: Inspects allocation base address on Windows; needs intptrcast model\n     check_overalign_requests(System);\n     check_overalign_requests(Global);\n     global_to_box();"}, {"sha": "c0d3e9398dc5d4eebb0a9c4e12ebd08d85020887", "filename": "tests/run-pass/intptrcast_format.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fintptrcast_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fintptrcast_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast_format.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Zmiri-seed=\n+\n+fn main() {\n+    println!(\"Hello {}\", 13);\n+    println!(\"{:0<width$}\", \"hello\", width = 10);\n+}"}, {"sha": "3c9a55d0d4c1aeb35639cb8a39eb742dc3fc6cf1", "filename": "tests/run-pass/intptrcast_format.stdout", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fintptrcast_format.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fintptrcast_format.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintptrcast_format.stdout?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -0,0 +1,2 @@\n+Hello 13\n+hello00000"}, {"sha": "86c2d9184e0166abf30bbb7524a2ebdd7341593e", "filename": "tests/run-pass/issue-30530.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-30530.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -21,7 +21,9 @@ pub enum Handler {\n }\n \n fn main() {\n-    take(Handler::Default, Box::new(main));\n+    #[allow(unused_must_use)] {\n+        take(Handler::Default, Box::new(main));\n+    }\n }\n \n #[inline(never)]"}, {"sha": "54d79566eae4bceabd93330f520db22e45c1fd2c", "filename": "tests/run-pass/sync.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82693fa23caea857ba83fa0963154627b5fe12c/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=e82693fa23caea857ba83fa0963154627b5fe12c", "patch": "@@ -8,8 +8,7 @@ fn main() {\n     drop(m.lock());\n     drop(m);\n \n-    // We don't provide RwLock on Windows\n-    #[cfg(not(target_os = \"windows\"))]\n+    #[cfg(not(target_os = \"windows\"))] // TODO: implement RwLock on Windows\n     {\n         let rw = sync::RwLock::new(0);\n         drop(rw.read());", "previous_filename": "tests/run-pass/threads.rs"}]}