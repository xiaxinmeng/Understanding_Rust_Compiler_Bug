{"sha": "2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558", "node_id": "C_kwDOAAsO6NoAKDJiYzU0NWQ5ZWY0ZGRkNWYwNjc5ZjBhNmI2YzhkZTdlOGQ5NDY1NTg", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2022-03-17T13:18:52Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2022-03-17T13:38:21Z"}, "message": "Match the enum and union\n\nSigned-off-by: hi-rustin <rustin.liu@gmail.com>", "tree": {"sha": "bbecf930bcb5760557425b0dfd9afa1de55434d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbecf930bcb5760557425b0dfd9afa1de55434d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558", "html_url": "https://github.com/rust-lang/rust/commit/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ef4e830ecfeb5bd592d2604d46cc67b77dcdc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ef4e830ecfeb5bd592d2604d46cc67b77dcdc5", "html_url": "https://github.com/rust-lang/rust/commit/c6ef4e830ecfeb5bd592d2604d46cc67b77dcdc5"}], "stats": {"total": 75, "additions": 62, "deletions": 13}, "files": [{"sha": "dac777a69bc09c2e0af630ed00494edb2b5ab144", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558", "patch": "@@ -137,30 +137,30 @@ fn pattern_path_completion(\n                         }\n                     }\n                 }\n-                hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n-                    cov_mark::hit!(enum_plain_qualified_use_tree);\n-                    e.variants(ctx.db)\n-                        .into_iter()\n-                        .for_each(|variant| acc.add_enum_variant(ctx, variant, None));\n-                }\n                 res @ (hir::PathResolution::TypeParam(_)\n                 | hir::PathResolution::SelfType(_)\n-                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(_)))) => {\n+                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(_)))\n+                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(_)))\n+                | hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Union(_)))) => {\n                     let ty = match res {\n                         hir::PathResolution::TypeParam(param) => param.ty(ctx.db),\n                         hir::PathResolution::SelfType(impl_def) => impl_def.self_ty(ctx.db),\n                         hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(s))) => {\n                             s.ty(ctx.db)\n                         }\n+                        hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n+                            cov_mark::hit!(enum_plain_qualified_use_tree);\n+                            e.variants(ctx.db)\n+                                .into_iter()\n+                                .for_each(|variant| acc.add_enum_variant(ctx, variant, None));\n+                            e.ty(ctx.db)\n+                        }\n+                        hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Union(u))) => {\n+                            u.ty(ctx.db)\n+                        }\n                         _ => return,\n                     };\n \n-                    if let Some(hir::Adt::Enum(e)) = ty.as_adt() {\n-                        e.variants(ctx.db)\n-                            .into_iter()\n-                            .for_each(|variant| acc.add_enum_variant(ctx, variant, None));\n-                    }\n-\n                     let traits_in_scope = ctx.scope.visible_traits();\n                     let mut seen = FxHashSet::default();\n                     ty.iterate_path_candidates("}, {"sha": "2aef48153b250ee3811c8503002a057a932163e8", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=2bc545d9ef4ddd5f0679f0a6b6c8de7e8d946558", "patch": "@@ -306,6 +306,7 @@ fn func() {\n             ev TupleV(\u2026)   TupleV(u32)\n             ev RecordV {\u2026} RecordV { field: u32 }\n             ev UnitV       UnitV\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n         \"#]],\n     );\n }\n@@ -466,5 +467,53 @@ fn f(t: Ty) {\n         expect![[r#\"\n             ct ABC const ABC: Self\n         \"#]],\n+    );\n+\n+    check_empty(\n+        r#\"\n+struct MyEnum;\n+\n+impl MyEnum {\n+    pub const A: i32 = 123;\n+    pub const B: i32 = 456;\n+}\n+\n+fn f(e: MyEnum) {\n+    match e {\n+        MyEnum::$0 => {}\n+        _ => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ct A pub const A: i32\n+            ct B pub const B: i32\n+        \"#]],\n+    );\n+\n+    check_empty(\n+        r#\"\n+#[repr(C)]\n+union U {\n+    i: i32,\n+    f: f32,\n+}\n+\n+impl U {\n+    pub const C: i32 = 123;\n+    pub const D: i32 = 456;\n+}\n+\n+fn f(u: U) {\n+    match u {\n+        U::$0 => {}\n+        _ => {}\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            ct C pub const C: i32\n+            ct D pub const D: i32\n+        \"#]],\n     )\n }"}]}