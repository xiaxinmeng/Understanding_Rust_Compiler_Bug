{"sha": "a67a65359f812a6970fc381bdd794b8f7792ce56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2N2E2NTM1OWY4MTJhNjk3MGZjMzgxYmRkNzk0YjhmNzc5MmNlNTY=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T16:43:15Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-14T16:43:15Z"}, "message": "Only pass `Symbol` to `emulate_foreign_item_by_name`", "tree": {"sha": "7740e453eceb71bb1a1d1cf3d856745a903ddb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7740e453eceb71bb1a1d1cf3d856745a903ddb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a67a65359f812a6970fc381bdd794b8f7792ce56", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYMeHIxUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLjwHAEA0Te7Z+VzB2z8RopyR6w2XV5Vuwkx\nrdBYlgWBK6aRddcA/RUIF3xTsr/v/ZCv5AoduOhLf3Pqcc72GmjqA6a+T2UO\n=H1cO\n-----END PGP SIGNATURE-----", "payload": "tree 7740e453eceb71bb1a1d1cf3d856745a903ddb8f\nparent 34603e586fc7fca3bb8e630be26e42350f758291\nauthor hyd-dev <yd-huang@outlook.com> 1623688995 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1623688995 +0800\n\nOnly pass `Symbol` to `emulate_foreign_item_by_name`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a67a65359f812a6970fc381bdd794b8f7792ce56", "html_url": "https://github.com/rust-lang/rust/commit/a67a65359f812a6970fc381bdd794b8f7792ce56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a67a65359f812a6970fc381bdd794b8f7792ce56/comments", "author": null, "committer": null, "parents": [{"sha": "34603e586fc7fca3bb8e630be26e42350f758291", "url": "https://api.github.com/repos/rust-lang/rust/commits/34603e586fc7fca3bb8e630be26e42350f758291", "html_url": "https://github.com/rust-lang/rust/commit/34603e586fc7fca3bb8e630be26e42350f758291"}], "stats": {"total": 381, "additions": 190, "deletions": 191}, "files": [{"sha": "1a12d19e124e8b4c3c771ac084012c0d2380d085", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=a67a65359f812a6970fc381bdd794b8f7792ce56", "patch": "@@ -723,6 +723,11 @@ where\n     throw_ub_format!(\"incorrect number of arguments: got {}, expected {}\", args.len(), N)\n }\n \n+/// Strip linker suffixes (seen on 32-bit macOS).\n+pub fn strip_linker_suffix(link_name: &str) -> &str {\n+    link_name.trim_end_matches(\"$UNIX2003\")\n+}\n+\n pub fn isolation_abort_error(name: &str) -> InterpResult<'static> {\n     throw_machine_stop!(TerminationInfo::UnsupportedInIsolation(format!(\n         \"{} not available when isolation is enabled\","}, {"sha": "36d075e32dff2575d8f06b273aeb7b77143b6c7d", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=a67a65359f812a6970fc381bdd794b8f7792ce56", "patch": "@@ -25,6 +25,7 @@ use rustc_target::{\n \n use super::backtrace::EvalContextExt as _;\n use crate::*;\n+use helpers::strip_linker_suffix;\n \n /// Returned by `emulate_foreign_item_by_name`.\n pub enum EmulateByNameResult {\n@@ -215,8 +216,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .first_attr_value_str_by_name(&attrs, sym::link_name)\n             .unwrap_or_else(|| this.tcx.item_name(def_id));\n         let link_name = link_name_sym.as_str();\n-        // Strip linker suffixes (seen on 32-bit macOS).\n-        let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n+        let link_name = strip_linker_suffix(&link_name);\n         let tcx = this.tcx.tcx;\n \n         // First: functions that diverge.\n@@ -274,7 +274,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         // Second: functions that return.\n-        match this.emulate_foreign_item_by_name(link_name, link_name_sym, abi, args, dest, ret)? {\n+        match this.emulate_foreign_item_by_name(link_name_sym, abi, args, dest, ret)? {\n             EmulateByNameResult::NeedsJumping => {\n                 trace!(\"{:?}\", this.dump_place(**dest));\n                 this.go_to_block(ret);\n@@ -296,8 +296,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Emulates calling a foreign item using its name.\n     fn emulate_foreign_item_by_name(\n         &mut self,\n-        link_name: &str,\n-        link_name_sym: Symbol,\n+        link_name: Symbol,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n@@ -307,10 +306,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n         // shim, add it to the corresponding submodule.\n-        match link_name {\n+        let shim_name = link_name.as_str();\n+        let shim_name = strip_linker_suffix(&shim_name);\n+        match shim_name {\n             // Miri-specific extern functions\n             \"miri_static_root\" => {\n-                let &[ref ptr] = this.check_shim(abi, Abi::Rust, link_name_sym, args)?;\n+                let &[ref ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let ptr = this.force_ptr(ptr)?;\n                 if ptr.offset != Size::ZERO {\n@@ -322,25 +323,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Obtains a Miri backtrace. See the README for details.\n             \"miri_get_backtrace\" => {\n                 // `check_shim` happens inside `handle_miri_get_backtrace`.\n-                this.handle_miri_get_backtrace(abi, link_name_sym, args, dest)?;\n+                this.handle_miri_get_backtrace(abi, link_name, args, dest)?;\n             }\n \n             // Resolves a Miri backtrace frame. See the README for details.\n             \"miri_resolve_frame\" => {\n                 // `check_shim` happens inside `handle_miri_resolve_frame`.\n-                this.handle_miri_resolve_frame(abi, link_name_sym, args, dest)?;\n+                this.handle_miri_resolve_frame(abi, link_name, args, dest)?;\n             }\n \n \n             // Standard C allocation\n             \"malloc\" => {\n-                let &[ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let res = this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::C);\n                 this.write_scalar(res, dest)?;\n             }\n             \"calloc\" => {\n-                let &[ref items, ref len] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref items, ref len] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let items = this.read_scalar(items)?.to_machine_usize(this)?;\n                 let len = this.read_scalar(len)?.to_machine_usize(this)?;\n                 let size =\n@@ -349,12 +350,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(res, dest)?;\n             }\n             \"free\" => {\n-                let &[ref ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 this.free(ptr, MiriMemoryKind::C)?;\n             }\n             \"realloc\" => {\n-                let &[ref old_ptr, ref new_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref old_ptr, ref new_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let old_ptr = this.read_scalar(old_ptr)?.check_init()?;\n                 let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n                 let res = this.realloc(old_ptr, new_size, MiriMemoryKind::C)?;\n@@ -365,7 +366,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // (Usually these would be forwarded to to `#[global_allocator]`; we instead implement a generic\n             // allocation that also checks that all conditions are met, such as not permitting zero-sized allocations.)\n             \"__rust_alloc\" => {\n-                let &[ref size, ref align] = this.check_shim(abi, Abi::Rust, link_name_sym, args)?;\n+                let &[ref size, ref align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n                 Self::check_alloc_request(size, align)?;\n@@ -377,7 +378,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_alloc_zeroed\" => {\n-                let &[ref size, ref align] = this.check_shim(abi, Abi::Rust, link_name_sym, args)?;\n+                let &[ref size, ref align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n                 Self::check_alloc_request(size, align)?;\n@@ -391,7 +392,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_dealloc\" => {\n-                let &[ref ptr, ref old_size, ref align] = this.check_shim(abi, Abi::Rust, link_name_sym, args)?;\n+                let &[ref ptr, ref old_size, ref align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n@@ -404,7 +405,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n             }\n             \"__rust_realloc\" => {\n-                let &[ref ptr, ref old_size, ref align, ref new_size] = this.check_shim(abi, Abi::Rust, link_name_sym, args)?;\n+                let &[ref ptr, ref old_size, ref align, ref new_size] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.force_ptr(this.read_scalar(ptr)?.check_init()?)?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n@@ -424,7 +425,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // C memory handling functions\n             \"memcmp\" => {\n-                let &[ref left, ref right, ref n] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref left, ref right, ref n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let left = this.read_scalar(left)?.check_init()?;\n                 let right = this.read_scalar(right)?.check_init()?;\n                 let n = Size::from_bytes(this.read_scalar(n)?.to_machine_usize(this)?);\n@@ -444,7 +445,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"memrchr\" => {\n-                let &[ref ptr, ref val, ref num] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref ptr, ref val, ref num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n@@ -462,7 +463,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"memchr\" => {\n-                let &[ref ptr, ref val, ref num] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref ptr, ref val, ref num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n@@ -479,7 +480,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n             \"strlen\" => {\n-                let &[ref ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let n = this.read_c_str(ptr)?.len();\n                 this.write_scalar(Scalar::from_machine_usize(u64::try_from(n).unwrap(), this), dest)?;\n@@ -495,10 +496,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"asinf\"\n             | \"atanf\"\n             => {\n-                let &[ref f] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n-                let f = match link_name {\n+                let f = match shim_name {\n                     \"cbrtf\" => f.cbrt(),\n                     \"coshf\" => f.cosh(),\n                     \"sinhf\" => f.sinh(),\n@@ -515,13 +516,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"hypotf\"\n             | \"atan2f\"\n             => {\n-                let &[ref f1, ref f2] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref f1, ref f2] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // underscore case for windows, here and below\n                 // (see https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/floating-point-primitives?view=vs-2019)\n                 // FIXME: Using host floats.\n                 let f1 = f32::from_bits(this.read_scalar(f1)?.to_u32()?);\n                 let f2 = f32::from_bits(this.read_scalar(f2)?.to_u32()?);\n-                let n = match link_name {\n+                let n = match shim_name {\n                     \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n                     \"atan2f\" => f1.atan2(f2),\n                     _ => bug!(),\n@@ -537,10 +538,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"asin\"\n             | \"atan\"\n             => {\n-                let &[ref f] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n-                let f = match link_name {\n+                let f = match shim_name {\n                     \"cbrt\" => f.cbrt(),\n                     \"cosh\" => f.cosh(),\n                     \"sinh\" => f.sinh(),\n@@ -557,11 +558,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"hypot\"\n             | \"atan2\"\n             => {\n-                let &[ref f1, ref f2] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref f1, ref f2] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(f1)?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(f2)?.to_u64()?);\n-                let n = match link_name {\n+                let n = match shim_name {\n                     \"_hypot\" | \"hypot\" => f1.hypot(f2),\n                     \"atan2\" => f1.atan2(f2),\n                     _ => bug!(),\n@@ -573,7 +574,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"ldexp\"\n             | \"scalbn\"\n             => {\n-                let &[ref x, ref exp] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref x, ref exp] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // For radix-2 (binary) systems, `ldexp` and `scalbn` are the same.\n                 let x = this.read_scalar(x)?.to_f64()?;\n                 let exp = this.read_scalar(exp)?.to_i32()?;\n@@ -594,11 +595,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Architecture-specific shims\n             \"llvm.x86.sse2.pause\" if this.tcx.sess.target.arch == \"x86\" || this.tcx.sess.target.arch == \"x86_64\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.yield_active_thread();\n             }\n             \"llvm.aarch64.isb\" if this.tcx.sess.target.arch == \"aarch64\" => {\n-                let &[ref arg] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref arg] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let arg = this.read_scalar(arg)?.to_i32()?;\n                 match arg {\n                     15 => { // SY (\"full system scope\")\n@@ -612,8 +613,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Platform-specific shims\n             _ => match this.tcx.sess.target.os.as_str() {\n-                \"linux\" | \"macos\" => return shims::posix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, link_name_sym, abi, args, dest, ret),\n-                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, link_name_sym, abi, args, dest, ret),\n+                \"linux\" | \"macos\" => return shims::posix::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                \"windows\" => return shims::windows::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                 target => throw_unsup_format!(\"the target `{}` is not supported\", target),\n             }\n         };"}, {"sha": "2585b562f2304066a0b176ada7d8c2e97c9e73c2", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=a67a65359f812a6970fc381bdd794b8f7792ce56", "patch": "@@ -6,6 +6,7 @@ use rustc_target::abi::{Align, LayoutOf, Size};\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::sync::EvalContextExt as _;\n@@ -15,67 +16,66 @@ impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mi\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n-        link_name: &str,\n-        link_name_sym: Symbol,\n+        link_name: Symbol,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n-        match link_name {\n+        match strip_linker_suffix(&link_name.as_str()) {\n             // Environment related shims\n             \"getenv\" => {\n-                let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.getenv(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"unsetenv\" => {\n-                let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.unsetenv(name)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"setenv\" => {\n-                let &[ref name, ref value, ref overwrite] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref name, ref value, ref overwrite] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(overwrite)?.to_i32()?;\n                 let result = this.setenv(name, value)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"getcwd\" => {\n-                let &[ref buf, ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref buf, ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.getcwd(buf, size)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"chdir\" => {\n-                let &[ref path] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref path] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.chdir(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims\n             \"open\" | \"open64\" => {\n-                let &[ref path, ref flag, ref mode] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref path, ref flag, ref mode] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.open(path, flag, mode)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fcntl\" => {\n                 // `fcntl` is variadic. The argument count is checked based on the first argument\n                 // in `this.fcntl()`, so we do not use `check_shim` here.\n-                this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name_sym)?;\n+                this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name)?;\n                 let result = this.fcntl(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"read\" => {\n-                let &[ref fd, ref buf, ref count] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd, ref buf, ref count] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_scalar(buf)?.check_init()?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let result = this.read(fd, buf, count)?;\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"write\" => {\n-                let &[ref fd, ref buf, ref n] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd, ref buf, ref n] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n                 let buf = this.read_scalar(buf)?.check_init()?;\n                 let count = this.read_scalar(n)?.to_machine_usize(this)?;\n@@ -85,60 +85,60 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n             \"unlink\" => {\n-                let &[ref path] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref path] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.unlink(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"symlink\" => {\n-                let &[ref target, ref linkpath] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref target, ref linkpath] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.symlink(target, linkpath)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"rename\" => {\n-                let &[ref oldpath, ref newpath] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref oldpath, ref newpath] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.rename(oldpath, newpath)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"mkdir\" => {\n-                let &[ref path, ref mode] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref path, ref mode] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.mkdir(path, mode)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"rmdir\" => {\n-                let &[ref path] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref path] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.rmdir(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"closedir\" => {\n-                let &[ref dirp] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref dirp] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.closedir(dirp)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"lseek\" | \"lseek64\" => {\n-                let &[ref fd, ref offset, ref whence] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd, ref offset, ref whence] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.lseek64(fd, offset, whence)?;\n                 // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n             \"fsync\" => {\n-                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.fsync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fdatasync\" => {\n-                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.fdatasync(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"readlink\" => {\n-                let &[ref pathname, ref buf, ref bufsize] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref pathname, ref buf, ref bufsize] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.readlink(pathname, buf, bufsize)?;\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n \n             // Allocation\n             \"posix_memalign\" => {\n-                let &[ref ret, ref align, ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref ret, ref align, ref size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ret = this.deref_operand(ret)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n@@ -168,7 +168,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Dynamic symbol loading\n             \"dlsym\" => {\n-                let &[ref handle, ref symbol] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref handle, ref symbol] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(handle)?.to_machine_usize(this)?;\n                 let symbol = this.read_scalar(symbol)?.check_init()?;\n                 let symbol_name = this.read_c_str(symbol)?;\n@@ -182,7 +182,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Querying system information\n             \"sysconf\" => {\n-                let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let name = this.read_scalar(name)?.to_i32()?;\n \n                 let sysconfs = &[\n@@ -207,7 +207,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Thread-local storage\n             \"pthread_key_create\" => {\n-                let &[ref key, ref dtor] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref key, ref dtor] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let key_place = this.deref_operand(key)?;\n                 let dtor = this.read_scalar(dtor)?.check_init()?;\n \n@@ -235,21 +235,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"pthread_key_delete\" => {\n-                let &[ref key] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref key] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 this.machine.tls.delete_tls_key(key)?;\n                 // Return success (0)\n                 this.write_null(dest)?;\n             }\n             \"pthread_getspecific\" => {\n-                let &[ref key] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref key] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 let active_thread = this.get_active_thread();\n                 let ptr = this.machine.tls.load_tls(key, active_thread, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {\n-                let &[ref key, ref new_ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref key, ref new_ptr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 let active_thread = this.get_active_thread();\n                 let new_ptr = this.read_scalar(new_ptr)?.check_init()?;\n@@ -261,149 +261,149 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Synchronization primitives\n             \"pthread_mutexattr_init\" => {\n-                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutexattr_init(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutexattr_settype\" => {\n-                let &[ref attr, ref kind] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref attr, ref kind] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutexattr_settype(attr, kind)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutexattr_destroy\" => {\n-                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutexattr_destroy(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_init\" => {\n-                let &[ref mutex, ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref mutex, ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutex_init(mutex, attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_lock\" => {\n-                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutex_lock(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_trylock\" => {\n-                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutex_trylock(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_unlock\" => {\n-                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutex_unlock(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_mutex_destroy\" => {\n-                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_mutex_destroy(mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_rdlock\" => {\n-                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_rwlock_rdlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_tryrdlock\" => {\n-                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_rwlock_tryrdlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_wrlock\" => {\n-                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_rwlock_wrlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_trywrlock\" => {\n-                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_rwlock_trywrlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_unlock\" => {\n-                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_rwlock_unlock(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_rwlock_destroy\" => {\n-                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref rwlock] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_rwlock_destroy(rwlock)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_init\" => {\n-                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_condattr_init(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_destroy\" => {\n-                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_condattr_destroy(attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_init\" => {\n-                let &[ref cond, ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref cond, ref attr] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_cond_init(cond, attr)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_signal\" => {\n-                let &[ref cond] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref cond] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_cond_signal(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_broadcast\" => {\n-                let &[ref cond] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref cond] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_cond_broadcast(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_wait\" => {\n-                let &[ref cond, ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref cond, ref mutex] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_cond_wait(cond, mutex)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_cond_timedwait\" => {\n-                let &[ref cond, ref mutex, ref abstime] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref cond, ref mutex, ref abstime] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.pthread_cond_timedwait(cond, mutex, abstime, dest)?;\n             }\n             \"pthread_cond_destroy\" => {\n-                let &[ref cond] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref cond] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_cond_destroy(cond)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Threading\n             \"pthread_create\" => {\n-                let &[ref thread, ref attr, ref start, ref arg] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref thread, ref attr, ref start, ref arg] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_create(thread, attr, start, arg)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_join\" => {\n-                let &[ref thread, ref retval] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref thread, ref retval] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_join(thread, retval)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_detach\" => {\n-                let &[ref thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_detach(thread)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_self\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.pthread_self(dest)?;\n             }\n             \"sched_yield\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.sched_yield()?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"nanosleep\" => {\n-                let &[ref req, ref rem] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref req, ref rem] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.nanosleep(req, rem)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Miscellaneous\n             \"isatty\" => {\n-                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(fd)?.to_i32()?;\n                 // \"returns 1 if fd is an open file descriptor referring to a terminal; otherwise 0 is returned, and errno is set to indicate the error\"\n                 // FIXME: we just say nothing is a terminal.\n@@ -412,7 +412,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n             \"pthread_atfork\" => {\n-                let &[ref prepare, ref parent, ref child] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref prepare, ref parent, ref child] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.force_bits(this.read_scalar(prepare)?.check_init()?, this.memory.pointer_size())?;\n                 this.force_bits(this.read_scalar(parent)?.check_init()?, this.memory.pointer_size())?;\n                 this.force_bits(this.read_scalar(child)?.check_init()?, this.memory.pointer_size())?;\n@@ -424,7 +424,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_attr_getguardsize\"\n             if this.frame_in_std() => {\n-                let &[ref _attr, ref guard_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref _attr, ref guard_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n                 let guard_size_layout = this.libc_ty_layout(\"size_t\")?;\n                 this.write_scalar(Scalar::from_uint(crate::PAGE_SIZE, guard_size_layout.size), &guard_size.into())?;\n@@ -436,33 +436,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"pthread_attr_init\"\n             | \"pthread_attr_destroy\"\n             if this.frame_in_std() => {\n-                let &[_] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[_] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_null(dest)?;\n             }\n             | \"pthread_attr_setstacksize\"\n             if this.frame_in_std() => {\n-                let &[_, _] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[_, _] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_null(dest)?;\n             }\n \n             | \"signal\"\n             | \"sigaltstack\"\n             if this.frame_in_std() => {\n-                let &[_, _] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[_, _] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_null(dest)?;\n             }\n             | \"sigaction\"\n             | \"mprotect\"\n             if this.frame_in_std() => {\n-                let &[_, _, _] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[_, _, _] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_null(dest)?;\n             }\n \n             // Platform-specific shims\n             _ => {\n                 match this.tcx.sess.target.os.as_str() {\n-                    \"linux\" => return shims::posix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, link_name_sym, abi, args, dest, ret),\n-                    \"macos\" => return shims::posix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, link_name_sym, abi, args, dest, ret),\n+                    \"linux\" => return shims::posix::linux::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n+                    \"macos\" => return shims::posix::macos::foreign_items::EvalContextExt::emulate_foreign_item_by_name(this, link_name, abi, args, dest, ret),\n                     _ => unreachable!(),\n                 }\n             }"}, {"sha": "160e27f395e5e34b304f6bfa22560490ae512a45", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=a67a65359f812a6970fc381bdd794b8f7792ce56", "patch": "@@ -3,6 +3,7 @@ use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::linux::sync::futex;\n@@ -13,19 +14,18 @@ impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mi\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n-        link_name: &str,\n-        link_name_sym: Symbol,\n+        link_name: Symbol,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n-        match link_name {\n+        match strip_linker_suffix(&link_name.as_str()) {\n             // errno\n             \"__errno_location\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let errno_place = this.last_error_place()?;\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n@@ -34,33 +34,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // These symbols have different names on Linux and macOS, which is the only reason they are not\n             // in the `posix` module.\n             \"close\" => {\n-                let &[ref fd] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[ref fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.close(fd)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"opendir\" => {\n                 let &[ref name] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"readdir64_r\" => {\n                 let &[ref dirp, ref entry, ref result] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.linux_readdir64_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"ftruncate64\" => {\n                 let &[ref fd, ref length] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             // Linux-only\n             \"posix_fadvise\" => {\n                 let &[ref fd, ref offset, ref len, ref advice] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(fd)?.to_i32()?;\n                 this.read_scalar(offset)?.to_machine_isize(this)?;\n                 this.read_scalar(len)?.to_machine_isize(this)?;\n@@ -70,7 +69,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"sync_file_range\" => {\n                 let &[ref fd, ref offset, ref nbytes, ref flags] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.sync_file_range(fd, offset, nbytes, flags)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n@@ -79,7 +78,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"clock_gettime\" => {\n                 // This is a POSIX function but it has only been tested on linux.\n                 let &[ref clk_id, ref tp] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.clock_gettime(clk_id, tp)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n@@ -88,7 +87,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"pthread_attr_getstack\" => {\n                 // We don't support \"pthread_attr_setstack\", so we just pretend all stacks have the same values here.\n                 let &[ref attr_place, ref addr_place, ref size_place] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.deref_operand(attr_place)?;\n                 let addr_place = this.deref_operand(addr_place)?;\n                 let size_place = this.deref_operand(size_place)?;\n@@ -109,19 +108,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Threading\n             \"prctl\" => {\n                 let &[ref option, ref arg2, ref arg3, ref arg4, ref arg5] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.prctl(option, arg2, arg3, arg4, arg5)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_setclock\" => {\n                 let &[ref attr, ref clock_id] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_condattr_setclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"pthread_condattr_getclock\" => {\n                 let &[ref attr, ref clock_id] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.pthread_condattr_getclock(attr, clock_id)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n@@ -130,7 +129,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"syscall\" => {\n                 // We do not use `check_shim` here because `syscall` is variadic. The argument\n                 // count is checked bellow.\n-                this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name_sym)?;\n+                this.check_abi_and_shim_symbol_clash(abi, Abi::C { unwind: false }, link_name)?;\n                 // The syscall variadic function is legal to call with more arguments than needed,\n                 // extra arguments are simply ignored. However, all arguments need to be scalars;\n                 // other types might be treated differently by the calling convention.\n@@ -195,12 +194,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Miscelanneous\n             \"getrandom\" => {\n                 let &[ref ptr, ref len, ref flags] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 getrandom(this, ptr, len, flags, dest)?;\n             }\n             \"sched_getaffinity\" => {\n                 let &[ref pid, ref cpusetsize, ref mask] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(pid)?.to_i32()?;\n                 this.read_scalar(cpusetsize)?.to_machine_usize(this)?;\n                 this.deref_operand(mask)?;\n@@ -214,7 +213,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_getattr_np\" if this.frame_in_std() => {\n                 let &[ref _thread, ref _attr] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_null(dest)?;\n             }\n "}, {"sha": "45d6f5b449534ea2e47144fb203e50b8cc2faff3", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=a67a65359f812a6970fc381bdd794b8f7792ce56", "patch": "@@ -3,6 +3,7 @@ use rustc_span::Symbol;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::posix::fs::EvalContextExt as _;\n use shims::posix::thread::EvalContextExt as _;\n@@ -11,107 +12,106 @@ impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mi\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n-        link_name: &str,\n-        link_name_sym: Symbol,\n+        link_name: Symbol,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, EmulateByNameResult> {\n         let this = self.eval_context_mut();\n \n-        match link_name {\n+        match strip_linker_suffix(&link_name.as_str()) {\n             // errno\n             \"__error\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let errno_place = this.last_error_place()?;\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n \n             // File related shims\n             \"close\" | \"close$NOCANCEL\" => {\n                 let &[ref result] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.close(result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"stat\" | \"stat$INODE64\" => {\n                 let &[ref path, ref buf] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_stat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"lstat\" | \"lstat$INODE64\" => {\n                 let &[ref path, ref buf] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_lstat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"fstat\" | \"fstat$INODE64\" => {\n                 let &[ref fd, ref buf] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_fstat(fd, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"opendir\" | \"opendir$INODE64\" => {\n                 let &[ref name] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"readdir_r\" | \"readdir_r$INODE64\" => {\n                 let &[ref dirp, ref entry, ref result] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_readdir_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"ftruncate\" => {\n                 let &[ref fd, ref length] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Environment related shims\n             \"_NSGetEnviron\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_scalar(this.machine.env_vars.environ.unwrap().ptr, dest)?;\n             }\n \n             // Time related shims\n             \"gettimeofday\" => {\n                 let &[ref tv, ref tz] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.gettimeofday(tv, tz)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"mach_absolute_time\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.mach_absolute_time()?;\n                 this.write_scalar(Scalar::from_u64(result), dest)?;\n             }\n \n             \"mach_timebase_info\" => {\n                 let &[ref info] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.mach_timebase_info(info)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Access to command-line arguments\n             \"_NSGetArgc\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_scalar(this.machine.argc.expect(\"machine must be initialized\"), dest)?;\n             }\n             \"_NSGetArgv\" => {\n-                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.write_scalar(this.machine.argv.expect(\"machine must be initialized\"), dest)?;\n             }\n \n             // Thread-local storage\n             \"_tlv_atexit\" => {\n                 let &[ref dtor, ref data] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let dtor = this.read_scalar(dtor)?.check_init()?;\n                 let dtor = this.memory.get_fn(dtor)?.as_instance()?;\n                 let data = this.read_scalar(data)?.check_init()?;\n@@ -122,14 +122,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n                 let &[ref thread] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(thread)?.to_machine_usize(this)?;\n                 let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n                 let &[ref thread] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(thread)?.to_machine_usize(this)?;\n                 let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n@@ -138,7 +138,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Threading\n             \"pthread_setname_np\" => {\n                 let &[ref name] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let name = this.read_scalar(name)?.check_init()?;\n                 this.pthread_setname_np(name)?;\n             }\n@@ -148,7 +148,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"mmap\" if this.frame_in_std() => {\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let &[ref addr, _, _, _, _, _] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let addr = this.read_scalar(addr)?.check_init()?;\n                 this.write_scalar(addr, dest)?;\n             }"}, {"sha": "77f8075361418f0944617b6b5b7e044a63f625dd", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a67a65359f812a6970fc381bdd794b8f7792ce56/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=a67a65359f812a6970fc381bdd794b8f7792ce56", "patch": "@@ -6,15 +6,15 @@ use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n \n use crate::*;\n+use helpers::strip_linker_suffix;\n use shims::foreign_items::EmulateByNameResult;\n use shims::windows::sync::EvalContextExt as _;\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn emulate_foreign_item_by_name(\n         &mut self,\n-        link_name: &str,\n-        link_name_sym: Symbol,\n+        link_name: Symbol,\n         abi: Abi,\n         args: &[OpTy<'tcx, Tag>],\n         dest: &PlaceTy<'tcx, Tag>,\n@@ -27,57 +27,56 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // DWORD = ULONG = u32\n         // BOOL = i32\n         // BOOLEAN = u8\n-        match link_name {\n+        match strip_linker_suffix(&link_name.as_str()) {\n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n                 let &[ref name, ref buf, ref size] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.GetEnvironmentVariableW(name, buf, size)?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n             \"SetEnvironmentVariableW\" => {\n                 let &[ref name, ref value] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.SetEnvironmentVariableW(name, value)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"GetEnvironmentStringsW\" => {\n-                let &[] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.GetEnvironmentStringsW()?;\n                 this.write_scalar(result, dest)?;\n             }\n             \"FreeEnvironmentStringsW\" => {\n                 let &[ref env_block] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.FreeEnvironmentStringsW(env_block)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"GetCurrentDirectoryW\" => {\n                 let &[ref size, ref buf] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.GetCurrentDirectoryW(size, buf)?;\n                 this.write_scalar(Scalar::from_u32(result), dest)?;\n             }\n             \"SetCurrentDirectoryW\" => {\n                 let &[ref path] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.SetCurrentDirectoryW(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims\n             \"GetStdHandle\" => {\n                 let &[ref which] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let which = this.read_scalar(which)?.to_i32()?;\n                 // We just make this the identity function, so we know later in `WriteFile`\n                 // which one it is.\n                 this.write_scalar(Scalar::from_machine_isize(which.into(), this), dest)?;\n             }\n             \"WriteFile\" => {\n                 let &[ref handle, ref buf, ref n, ref written_ptr, ref overlapped] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(overlapped)?.to_machine_usize(this)?; // this is a poiner, that we ignore\n                 let handle = this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let buf = this.read_scalar(buf)?.check_init()?;\n@@ -112,7 +111,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Allocation\n             \"HeapAlloc\" => {\n                 let &[ref handle, ref flags, ref size] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n@@ -122,7 +121,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"HeapFree\" => {\n                 let &[ref handle, ref flags, ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n@@ -131,7 +130,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"HeapReAlloc\" => {\n                 let &[ref handle, ref flags, ref ptr, ref size] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 this.read_scalar(flags)?.to_u32()?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n@@ -143,21 +142,20 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // errno\n             \"SetLastError\" => {\n                 let &[ref error] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let error = this.read_scalar(error)?.check_init()?;\n                 this.set_last_error(error)?;\n             }\n             \"GetLastError\" => {\n-                let &[] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let last_error = this.get_last_error()?;\n                 this.write_scalar(last_error, dest)?;\n             }\n \n             // Querying system information\n             \"GetSystemInfo\" => {\n                 let &[ref system_info] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let system_info = this.deref_operand(system_info)?;\n                 // Initialize with `0`.\n                 this.memory.write_bytes(\n@@ -175,22 +173,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // This just creates a key; Windows does not natively support TLS destructors.\n \n                 // Create key and return it.\n-                let &[] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let key = this.machine.tls.create_tls_key(None, dest.layout.size)?;\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {\n                 let &[ref key] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let key = u128::from(this.read_scalar(key)?.to_u32()?);\n                 let active_thread = this.get_active_thread();\n                 let ptr = this.machine.tls.load_tls(key, active_thread, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n                 let &[ref key, ref new_ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let key = u128::from(this.read_scalar(key)?.to_u32()?);\n                 let active_thread = this.get_active_thread();\n                 let new_ptr = this.read_scalar(new_ptr)?.check_init()?;\n@@ -202,8 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Access to command-line arguments\n             \"GetCommandLineW\" => {\n-                let &[] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.write_scalar(\n                     this.machine.cmd_line.expect(\"machine must be initialized\"),\n                     dest,\n@@ -214,54 +210,54 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetSystemTimeAsFileTime\" => {\n                 #[allow(non_snake_case)]\n                 let &[ref LPFILETIME] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.GetSystemTimeAsFileTime(LPFILETIME)?;\n             }\n             \"QueryPerformanceCounter\" => {\n                 #[allow(non_snake_case)]\n                 let &[ref lpPerformanceCount] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.QueryPerformanceCounter(lpPerformanceCount)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n             \"QueryPerformanceFrequency\" => {\n                 #[allow(non_snake_case)]\n                 let &[ref lpFrequency] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.QueryPerformanceFrequency(lpFrequency)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // Synchronization primitives\n             \"AcquireSRWLockExclusive\" => {\n                 let &[ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.AcquireSRWLockExclusive(ptr)?;\n             }\n             \"ReleaseSRWLockExclusive\" => {\n                 let &[ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.ReleaseSRWLockExclusive(ptr)?;\n             }\n             \"TryAcquireSRWLockExclusive\" => {\n                 let &[ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let ret = this.TryAcquireSRWLockExclusive(ptr)?;\n                 this.write_scalar(Scalar::from_u8(ret), dest)?;\n             }\n             \"AcquireSRWLockShared\" => {\n                 let &[ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.AcquireSRWLockShared(ptr)?;\n             }\n             \"ReleaseSRWLockShared\" => {\n                 let &[ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.ReleaseSRWLockShared(ptr)?;\n             }\n             \"TryAcquireSRWLockShared\" => {\n                 let &[ref ptr] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let ret = this.TryAcquireSRWLockShared(ptr)?;\n                 this.write_scalar(Scalar::from_u8(ret), dest)?;\n             }\n@@ -270,7 +266,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetProcAddress\" => {\n                 #[allow(non_snake_case)]\n                 let &[ref hModule, ref lpProcName] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(hModule)?.to_machine_isize(this)?;\n                 let name = this.read_c_str(this.read_scalar(lpProcName)?.check_init()?)?;\n                 if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.os)? {\n@@ -285,15 +281,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"SystemFunction036\" => {\n                 // This is really 'RtlGenRandom'.\n                 let &[ref ptr, ref len] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let len = this.read_scalar(len)?.to_u32()?;\n                 this.gen_random(ptr, len.into())?;\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n             \"BCryptGenRandom\" => {\n                 let &[ref algorithm, ref ptr, ref len, ref flags] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let algorithm = this.read_scalar(algorithm)?;\n                 let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let len = this.read_scalar(len)?.to_u32()?;\n@@ -315,7 +311,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetConsoleScreenBufferInfo\" => {\n                 // `term` needs this, so we fake it.\n                 let &[ref console, ref buffer_info] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(console)?.to_machine_isize(this)?;\n                 this.deref_operand(buffer_info)?;\n                 // Indicate an error.\n@@ -325,16 +321,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetConsoleMode\" => {\n                 // Windows \"isatty\" (in libtest) needs this, so we fake it.\n                 let &[ref console, ref mode] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 this.read_scalar(console)?.to_machine_isize(this)?;\n                 this.deref_operand(mode)?;\n                 // Indicate an error.\n                 // FIXME: we should set last_error, but to what?\n                 this.write_null(dest)?;\n             }\n             \"SwitchToThread\" => {\n-                let &[] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Note that once Miri supports concurrency, this will need to return a nonzero\n                 // value if this call does result in switching to another thread.\n                 this.write_null(dest)?;\n@@ -343,7 +338,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Better error for attempts to create a thread\n             \"CreateThread\" => {\n                 let &[_, _, _, _, _, _] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n \n                 this.handle_unsupported(\"can't create threads on Windows\")?;\n                 return Ok(EmulateByNameResult::AlreadyJumped);\n@@ -352,29 +347,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"GetProcessHeap\" if this.frame_in_std() => {\n-                let &[] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                let &[] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n             \"SetConsoleTextAttribute\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let &[ref _hConsoleOutput, ref _wAttribute] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Pretend these does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n             \"AddVectoredExceptionHandler\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let &[ref _First, ref _Handler] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n             \"SetThreadStackGuarantee\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let &[_StackSizeInBytes] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_u32(1), dest)?;\n             }\n@@ -386,7 +380,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             {\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 assert_eq!(\n                     this.get_total_thread_count(),\n                     1,\n@@ -399,7 +393,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"TryEnterCriticalSection\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name_sym, args)?;\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 assert_eq!(\n                     this.get_total_thread_count(),\n                     1,"}]}