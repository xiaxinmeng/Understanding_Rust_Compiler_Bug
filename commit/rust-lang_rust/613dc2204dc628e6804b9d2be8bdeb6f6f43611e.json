{"sha": "613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "node_id": "C_kwDOAAsO6NoAKDYxM2RjMjIwNGRjNjI4ZTY4MDRiOWQyYmU4YmRlYjZmNmY0MzYxMWU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-14T13:09:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-22T22:08:42Z"}, "message": "Improve local generic parameter suggestions.", "tree": {"sha": "0f519991909524a2d658f38bb30cc104b51ba9cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f519991909524a2d658f38bb30cc104b51ba9cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "html_url": "https://github.com/rust-lang/rust/commit/613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7d701a9dc6c424e01d49d937925dc3bf7718138", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d701a9dc6c424e01d49d937925dc3bf7718138", "html_url": "https://github.com/rust-lang/rust/commit/d7d701a9dc6c424e01d49d937925dc3bf7718138"}], "stats": {"total": 171, "additions": 90, "deletions": 81}, "files": [{"sha": "fc198350198814e2dedd5dfc9ea7ddd0a90f2a98", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -511,7 +511,7 @@ impl<'a> Resolver<'a> {\n                 err.span_label(span, \"use of generic parameter from outer function\");\n \n                 let sm = self.session.source_map();\n-                match outer_res {\n+                let def_id = match outer_res {\n                     Res::SelfTy { trait_: maybe_trait_defid, alias_to: maybe_impl_defid } => {\n                         if let Some(impl_span) =\n                             maybe_impl_defid.and_then(|(def_id, _)| self.opt_span(def_id))\n@@ -536,40 +536,37 @@ impl<'a> Resolver<'a> {\n                         if let Some(span) = self.opt_span(def_id) {\n                             err.span_label(span, \"type parameter from outer function\");\n                         }\n+                        def_id\n                     }\n                     Res::Def(DefKind::ConstParam, def_id) => {\n                         if let Some(span) = self.opt_span(def_id) {\n                             err.span_label(span, \"const parameter from outer function\");\n                         }\n+                        def_id\n                     }\n                     _ => {\n                         bug!(\n                             \"GenericParamsFromOuterFunction should only be used with Res::SelfTy, \\\n                             DefKind::TyParam or DefKind::ConstParam\"\n                         );\n                     }\n-                }\n+                };\n \n-                if let HasGenericParams::Yes = has_generic_params {\n+                if let HasGenericParams::Yes(span) = has_generic_params {\n                     // Try to retrieve the span of the function signature and generate a new\n                     // message with a local type or const parameter.\n                     let sugg_msg = \"try using a local generic parameter instead\";\n-                    if let Some((sugg_span, snippet)) = sm.generate_local_type_param_snippet(span) {\n-                        // Suggest the modification to the user\n-                        err.span_suggestion(\n-                            sugg_span,\n-                            sugg_msg,\n-                            snippet,\n-                            Applicability::MachineApplicable,\n-                        );\n-                    } else if let Some(sp) = sm.generate_fn_name_span(span) {\n-                        err.span_label(\n-                            sp,\n-                            \"try adding a local generic parameter in this method instead\",\n-                        );\n+                    let name = self.opt_name(def_id).unwrap_or(sym::T);\n+                    let (span, snippet) = if span.is_empty() {\n+                        let snippet = format!(\"<{}>\", name);\n+                        (span, snippet)\n                     } else {\n-                        err.help(\"try using a local generic parameter instead\");\n-                    }\n+                        let span = sm.span_through_char(span, '<').shrink_to_hi();\n+                        let snippet = format!(\"{}, \", name);\n+                        (span, snippet)\n+                    };\n+                    // Suggest the modification to the user\n+                    err.span_suggestion(span, sugg_msg, snippet, Applicability::MachineApplicable);\n                 }\n \n                 err"}, {"sha": "0d8f1cf365643a0f2a40952d4cc1d934533c6103", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -1170,10 +1170,11 @@ impl<'a> Resolver<'a> {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n-                        | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n                         | InlineAsmSymRibKind\n+                        | FnItemRibKind\n+                        | AssocItemRibKind\n                         | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n@@ -1211,7 +1212,6 @@ impl<'a> Resolver<'a> {\n \n                         // This was an attempt to use a type parameter outside its scope.\n                         ItemRibKind(has_generic_params) => has_generic_params,\n-                        FnItemRibKind => HasGenericParams::Yes,\n                         ConstParamTyRibKind => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n@@ -1248,10 +1248,11 @@ impl<'a> Resolver<'a> {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n-                        | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n                         | InlineAsmSymRibKind\n+                        | FnItemRibKind\n+                        | AssocItemRibKind\n                         | ForwardGenericParamBanRibKind => continue,\n \n                         ConstantItemRibKind(trivial, _) => {\n@@ -1278,7 +1279,6 @@ impl<'a> Resolver<'a> {\n                         }\n \n                         ItemRibKind(has_generic_params) => has_generic_params,\n-                        FnItemRibKind => HasGenericParams::Yes,\n                         ConstParamTyRibKind => {\n                             if let Some(span) = finalize {\n                                 self.report_error("}, {"sha": "748a0781c4f7a4811ed328d74739ce8ee99451ba", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -93,7 +93,7 @@ enum PatBoundCtx {\n /// Does this the item (from the item rib scope) allow generic parameters?\n #[derive(Copy, Clone, Debug)]\n pub(crate) enum HasGenericParams {\n-    Yes,\n+    Yes(Span),\n     No,\n }\n \n@@ -758,7 +758,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n                     this.with_generic_param_rib(\n                         &generics.params,\n-                        ItemRibKind(HasGenericParams::Yes),\n+                        ItemRibKind(HasGenericParams::Yes(generics.span)),\n                         LifetimeRibKind::Generics {\n                             binder: foreign_item.id,\n                             kind: LifetimeBinderKind::Item,\n@@ -772,7 +772,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n                     this.with_generic_param_rib(\n                         &generics.params,\n-                        ItemRibKind(HasGenericParams::Yes),\n+                        ItemRibKind(HasGenericParams::Yes(generics.span)),\n                         LifetimeRibKind::Generics {\n                             binder: foreign_item.id,\n                             kind: LifetimeBinderKind::Function,\n@@ -2078,7 +2078,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(\n                 &generics.params,\n-                ItemRibKind(HasGenericParams::Yes),\n+                ItemRibKind(HasGenericParams::Yes(generics.span)),\n                 LifetimeRibKind::Generics {\n                     binder: item.id,\n                     kind: LifetimeBinderKind::Item,\n@@ -2148,7 +2148,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes),\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2161,7 +2161,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes),\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -2193,7 +2193,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes),\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2217,7 +2217,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes),\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2605,7 +2605,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(\n             &generics.params,\n-            ItemRibKind(HasGenericParams::Yes),\n+            ItemRibKind(HasGenericParams::Yes(generics.span)),\n             LifetimeRibKind::Generics {\n                 span: generics.span,\n                 binder: item_id,"}, {"sha": "eb727debc91bb558cc3ff4bea34771fe13dcb4f5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -1945,6 +1945,16 @@ impl<'a> Resolver<'a> {\n         def_id.as_local().map(|def_id| self.source_span[def_id])\n     }\n \n+    /// Retrieves the name of the given `DefId`.\n+    #[inline]\n+    pub fn opt_name(&self, def_id: DefId) -> Option<Symbol> {\n+        let def_key = match def_id.as_local() {\n+            Some(def_id) => self.definitions.def_key(def_id),\n+            None => self.cstore().def_key(def_id),\n+        };\n+        def_key.get_opt_name()\n+    }\n+\n     /// Checks if an expression refers to a function marked with\n     /// `#[rustc_legacy_const_generics]` and returns the argument index list\n     /// from the attribute."}, {"sha": "c8978845ffb0d35699e65e56c7aa2164a9aa7308", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -280,6 +280,7 @@ symbols! {\n         StructuralPartialEq,\n         SubdiagnosticMessage,\n         Sync,\n+        T,\n         Target,\n         ToOwned,\n         ToString,"}, {"sha": "e3bf38b702e755b767cbb35fcd37cfc3b7828760", "filename": "src/test/ui/const-generics/early/const-param-from-outer-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fearly%2Fconst-param-from-outer-fn.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -4,7 +4,7 @@ error[E0401]: can't use generic parameters from outer function\n LL | fn foo<const X: u32>() {\n    |              - const parameter from outer function\n LL |     fn bar() -> u32 {\n-   |        --- try adding a local generic parameter in this method instead\n+   |           - help: try using a local generic parameter instead: `<X>`\n LL |         X\n    |         ^ use of generic parameter from outer function\n "}, {"sha": "b0e2ef5b6f7e3d65c101e62994552805c9775500", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -4,9 +4,9 @@ error[E0401]: can't use generic parameters from outer function\n LL | fn foo<T>(x: T) {\n    |        - type parameter from outer function\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n-   |        ---------------------------    ^ use of generic parameter from outer function\n-   |        |\n-   |        help: try using a local generic parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n+   |             -                         ^ use of generic parameter from outer function\n+   |             |\n+   |             help: try using a local generic parameter instead: `T,`\n \n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:9:16\n@@ -15,7 +15,7 @@ LL | fn foo<T>(x: T) {\n    |        - type parameter from outer function\n ...\n LL |     fn baz<U,\n-   |        --- try adding a local generic parameter in this method instead\n+   |            - help: try using a local generic parameter instead: `T,`\n ...\n LL |            (y: T) {\n    |                ^ use of generic parameter from outer function"}, {"sha": "c7b5c33618d5f7b3237ebd49c23cae34b53e2d81", "filename": "src/test/ui/generics/issue-98432.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -5,9 +5,9 @@ LL | impl<T> Struct<T> {\n    |      - type parameter from outer function\n LL |     const CONST: fn() = || {\n LL |         struct _Obligation where T:;\n-   |                                  ^ use of generic parameter from outer function\n-   |\n-   = help: try using a local generic parameter instead\n+   |                           -      ^ use of generic parameter from outer function\n+   |                           |\n+   |                           help: try using a local generic parameter instead: `<T>`\n \n error: aborting due to previous error\n "}, {"sha": "aa0b5ce64b4213b275969d528b73d78eaa5e6813", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -2,10 +2,9 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3214.rs:3:12\n    |\n LL | fn foo<T>() {\n-   |    --- - type parameter from outer function\n-   |    |\n-   |    try adding a local generic parameter in this method instead\n+   |        - type parameter from outer function\n LL |     struct Foo {\n+   |               - help: try using a local generic parameter instead: `<T>`\n LL |         x: T,\n    |            ^ use of generic parameter from outer function\n "}, {"sha": "3a79215d3ae9c4c62ed13177f5bc49c437621716", "filename": "src/test/ui/issues/issue-5997-enum.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -2,11 +2,11 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-enum.rs:2:16\n    |\n LL | fn f<Z>() -> bool {\n-   |    - - type parameter from outer function\n-   |    |\n-   |    try adding a local generic parameter in this method instead\n+   |      - type parameter from outer function\n LL |     enum E { V(Z) }\n-   |                ^ use of generic parameter from outer function\n+   |           -    ^ use of generic parameter from outer function\n+   |           |\n+   |           help: try using a local generic parameter instead: `<Z>`\n \n error: aborting due to previous error\n "}, {"sha": "d2e97f767719fc56884861bd2aa11a529913e193", "filename": "src/test/ui/issues/issue-5997-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -2,11 +2,11 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-struct.rs:2:14\n    |\n LL | fn f<T>() -> bool {\n-   |    - - type parameter from outer function\n-   |    |\n-   |    try adding a local generic parameter in this method instead\n+   |      - type parameter from outer function\n LL |     struct S(T);\n-   |              ^ use of generic parameter from outer function\n+   |             -^ use of generic parameter from outer function\n+   |             |\n+   |             help: try using a local generic parameter instead: `<T>`\n \n error: aborting due to previous error\n "}, {"sha": "8f4746f5ec3bdb2e0e4aae9ff386866a6ae44c64", "filename": "src/test/ui/nested-ty-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -4,19 +4,19 @@ error[E0401]: can't use generic parameters from outer function\n LL | fn hd<U>(v: Vec<U> ) -> U {\n    |       - type parameter from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n-   |        ---     ^ use of generic parameter from outer function\n-   |        |\n-   |        help: try using a local generic parameter instead: `hd1<U>`\n+   |           -    ^ use of generic parameter from outer function\n+   |           |\n+   |           help: try using a local generic parameter instead: `<U>`\n \n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:23\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n    |       - type parameter from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n-   |        ---            ^ use of generic parameter from outer function\n-   |        |\n-   |        help: try using a local generic parameter instead: `hd1<U>`\n+   |           -           ^ use of generic parameter from outer function\n+   |           |\n+   |           help: try using a local generic parameter instead: `<U>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6282c2d0703b8fae7a0517bbddfc505cdccee24", "filename": "src/test/ui/resolve/bad-type-env-capture.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fresolve%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fresolve%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-type-env-capture.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -4,9 +4,9 @@ error[E0401]: can't use generic parameters from outer function\n LL | fn foo<T>() {\n    |        - type parameter from outer function\n LL |     fn bar(b: T) { }\n-   |        ---    ^ use of generic parameter from outer function\n-   |        |\n-   |        help: try using a local generic parameter instead: `bar<T>`\n+   |           -   ^ use of generic parameter from outer function\n+   |           |\n+   |           help: try using a local generic parameter instead: `<T>`\n \n error: aborting due to previous error\n "}, {"sha": "5176efc3a6be71cdec18386b30c74ec79016fdb2", "filename": "src/test/ui/resolve/issue-3021-c.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fresolve%2Fissue-3021-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fresolve%2Fissue-3021-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3021-c.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -3,22 +3,22 @@ error[E0401]: can't use generic parameters from outer function\n    |\n LL | fn siphash<T>() {\n    |            - type parameter from outer function\n-...\n+LL |\n+LL |     trait U {\n+   |            - help: try using a local generic parameter instead: `<T>`\n LL |         fn g(&self, x: T) -> T;\n-   |            -           ^ use of generic parameter from outer function\n-   |            |\n-   |            help: try using a local generic parameter instead: `g<T>`\n+   |                        ^ use of generic parameter from outer function\n \n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:30\n    |\n LL | fn siphash<T>() {\n    |            - type parameter from outer function\n-...\n+LL |\n+LL |     trait U {\n+   |            - help: try using a local generic parameter instead: `<T>`\n LL |         fn g(&self, x: T) -> T;\n-   |            -                 ^ use of generic parameter from outer function\n-   |            |\n-   |            help: try using a local generic parameter instead: `g<T>`\n+   |                              ^ use of generic parameter from outer function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0a6d1cc3bcd45fe00be2b9c68b62329bb6678eb1", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -4,8 +4,8 @@ error[E0401]: can't use generic parameters from outer function\n LL | trait TraitA<A> {\n    |              - type parameter from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local generic parameter in this method instead\n LL |         enum Foo<B> {\n+   |                  - help: try using a local generic parameter instead: `A,`\n LL |             Variance(A)\n    |                      ^ use of generic parameter from outer function\n \n@@ -15,19 +15,21 @@ error[E0401]: can't use generic parameters from outer function\n LL | trait TraitB<A> {\n    |              - type parameter from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B>(A);\n-   |                       ^ use of generic parameter from outer function\n+   |                    -  ^ use of generic parameter from outer function\n+   |                    |\n+   |                    help: try using a local generic parameter instead: `A,`\n \n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:23:28\n    |\n LL | trait TraitC<A> {\n    |              - type parameter from outer function\n LL |     fn outer(&self) {\n-   |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B> { a: A }\n-   |                            ^ use of generic parameter from outer function\n+   |                    -       ^ use of generic parameter from outer function\n+   |                    |\n+   |                    help: try using a local generic parameter instead: `A,`\n \n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:30:22\n@@ -36,9 +38,9 @@ LL | trait TraitD<A> {\n    |              - type parameter from outer function\n LL |     fn outer(&self) {\n LL |         fn foo<B>(a: A) { }\n-   |            ------    ^ use of generic parameter from outer function\n-   |            |\n-   |            help: try using a local generic parameter instead: `foo<B, A>`\n+   |                -     ^ use of generic parameter from outer function\n+   |                |\n+   |                help: try using a local generic parameter instead: `A,`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7f18b4510f4b2b3651e66bd34d5834193990d9d8", "filename": "src/test/ui/type/type-arg-out-of-scope.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/613dc2204dc628e6804b9d2be8bdeb6f6f43611e/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr?ref=613dc2204dc628e6804b9d2be8bdeb6f6f43611e", "patch": "@@ -4,19 +4,19 @@ error[E0401]: can't use generic parameters from outer function\n LL | fn foo<T>(x: T) {\n    |        - type parameter from outer function\n LL |     fn bar(f: Box<dyn FnMut(T) -> T>) { }\n-   |        ---                  ^ use of generic parameter from outer function\n-   |        |\n-   |        help: try using a local generic parameter instead: `bar<T>`\n+   |           -                 ^ use of generic parameter from outer function\n+   |           |\n+   |           help: try using a local generic parameter instead: `<T>`\n \n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:35\n    |\n LL | fn foo<T>(x: T) {\n    |        - type parameter from outer function\n LL |     fn bar(f: Box<dyn FnMut(T) -> T>) { }\n-   |        ---                        ^ use of generic parameter from outer function\n-   |        |\n-   |        help: try using a local generic parameter instead: `bar<T>`\n+   |           -                       ^ use of generic parameter from outer function\n+   |           |\n+   |           help: try using a local generic parameter instead: `<T>`\n \n error: aborting due to 2 previous errors\n "}]}