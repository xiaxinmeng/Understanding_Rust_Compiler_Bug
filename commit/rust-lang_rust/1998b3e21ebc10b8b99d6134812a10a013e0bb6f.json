{"sha": "1998b3e21ebc10b8b99d6134812a10a013e0bb6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OThiM2UyMWViYzEwYjhiOTlkNjEzNDgxMmExMGEwMTNlMGJiNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-01T01:16:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-01T01:16:37Z"}, "message": "auto merge of #10738 : sfackler/rust/buffered-fixes, r=alexcrichton\n\nBufferedWriter::inner flushes before returning the underlying writer.\r\n\r\nBufferedWriter::write no longer flushes the underlying writer.\r\n\r\nLineBufferedWriter::write flushes up to the *last* newline in the input\r\nstring, not the first.", "tree": {"sha": "8abae5f6c957ead2f836f0cc7f800ec4508a877c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abae5f6c957ead2f836f0cc7f800ec4508a877c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1998b3e21ebc10b8b99d6134812a10a013e0bb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1998b3e21ebc10b8b99d6134812a10a013e0bb6f", "html_url": "https://github.com/rust-lang/rust/commit/1998b3e21ebc10b8b99d6134812a10a013e0bb6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1998b3e21ebc10b8b99d6134812a10a013e0bb6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "436adc21314fda7d74c1df5014403a2357465de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/436adc21314fda7d74c1df5014403a2357465de1", "html_url": "https://github.com/rust-lang/rust/commit/436adc21314fda7d74c1df5014403a2357465de1"}, {"sha": "26e57bbdb5180134ec604c9561e05e68bab2b023", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e57bbdb5180134ec604c9561e05e68bab2b023", "html_url": "https://github.com/rust-lang/rust/commit/26e57bbdb5180134ec604c9561e05e68bab2b023"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "9c5927f86395ca08ad6e302e17c1c84388e60216", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1998b3e21ebc10b8b99d6134812a10a013e0bb6f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1998b3e21ebc10b8b99d6134812a10a013e0bb6f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1998b3e21ebc10b8b99d6134812a10a013e0bb6f", "patch": "@@ -166,12 +166,19 @@ impl<W: Writer> BufferedWriter<W> {\n     pub fn new(inner: W) -> BufferedWriter<W> {\n         BufferedWriter::with_capacity(DEFAULT_CAPACITY, inner)\n     }\n+\n+    fn flush_buf(&mut self) {\n+        if self.pos != 0 {\n+            self.inner.write(self.buf.slice_to(self.pos));\n+            self.pos = 0;\n+        }\n+    }\n }\n \n impl<W: Writer> Writer for BufferedWriter<W> {\n     fn write(&mut self, buf: &[u8]) {\n         if self.pos + buf.len() > self.buf.len() {\n-            self.flush();\n+            self.flush_buf();\n         }\n \n         if buf.len() > self.buf.len() {\n@@ -184,16 +191,13 @@ impl<W: Writer> Writer for BufferedWriter<W> {\n     }\n \n     fn flush(&mut self) {\n-        if self.pos != 0 {\n-            self.inner.write(self.buf.slice_to(self.pos));\n-            self.pos = 0;\n-        }\n+        self.flush_buf();\n         self.inner.flush();\n     }\n }\n \n impl<W: Writer> Decorator<W> for BufferedWriter<W> {\n-    fn inner(self) -> W { self.inner }\n+    fn inner(mut self) -> W { self.flush_buf(); self.inner }\n     fn inner_ref<'a>(&'a self) -> &'a W { &self.inner }\n     fn inner_mut_ref<'a>(&'a mut self) -> &'a mut W { &mut self.inner }\n }\n@@ -218,7 +222,7 @@ impl<W: Writer> LineBufferedWriter<W> {\n \n impl<W: Writer> Writer for LineBufferedWriter<W> {\n     fn write(&mut self, buf: &[u8]) {\n-        match buf.iter().position(|&b| b == '\\n' as u8) {\n+        match buf.iter().rposition(|&b| b == '\\n' as u8) {\n             Some(i) => {\n                 self.inner.write(buf.slice_to(i + 1));\n                 self.inner.flush();\n@@ -387,6 +391,15 @@ mod test {\n                    writer.inner_ref().inner_ref().as_slice());\n     }\n \n+    #[test]\n+    fn test_buffered_writer_inner_flushes() {\n+        let mut w = BufferedWriter::with_capacity(3, MemWriter::new());\n+        w.write([0, 1]);\n+        assert_eq!([], w.inner_ref().inner_ref().as_slice());\n+        let w = w.inner();\n+        assert_eq!([0, 1], w.inner_ref().as_slice());\n+    }\n+\n     // This is just here to make sure that we don't infinite loop in the\n     // newtype struct autoderef weirdness\n     #[test]\n@@ -430,10 +443,15 @@ mod test {\n         assert_eq!(*writer.inner_ref().inner_ref(), ~[]);\n         writer.flush();\n         assert_eq!(*writer.inner_ref().inner_ref(), ~[0, 1]);\n-        writer.write([0, '\\n' as u8, 1]);\n-        assert_eq!(*writer.inner_ref().inner_ref(), ~[0, 1, 0, '\\n' as u8]);\n+        writer.write([0, '\\n' as u8, 1, '\\n' as u8, 2]);\n+        assert_eq!(*writer.inner_ref().inner_ref(),\n+            ~[0, 1, 0, '\\n' as u8, 1, '\\n' as u8]);\n         writer.flush();\n-        assert_eq!(*writer.inner_ref().inner_ref(), ~[0, 1, 0, '\\n' as u8, 1]);\n+        assert_eq!(*writer.inner_ref().inner_ref(),\n+            ~[0, 1, 0, '\\n' as u8, 1, '\\n' as u8, 2]);\n+        writer.write([3, '\\n' as u8]);\n+        assert_eq!(*writer.inner_ref().inner_ref(),\n+            ~[0, 1, 0, '\\n' as u8, 1, '\\n' as u8, 2, 3, '\\n' as u8]);\n     }\n \n     #[bench]"}]}