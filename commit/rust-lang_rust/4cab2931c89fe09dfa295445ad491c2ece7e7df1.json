{"sha": "4cab2931c89fe09dfa295445ad491c2ece7e7df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWIyOTMxYzg5ZmUwOWRmYTI5NTQ0NWFkNDkxYzJlY2U3ZTdkZjE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-03T21:54:12Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-03T22:03:34Z"}, "message": "simplify Copy implementation error reporting\n\nSpan the affected fields instead of reporting the field/variant name.", "tree": {"sha": "2cda1054aa58a957a67486f4cd510ad8731735d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cda1054aa58a957a67486f4cd510ad8731735d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cab2931c89fe09dfa295445ad491c2ece7e7df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cab2931c89fe09dfa295445ad491c2ece7e7df1", "html_url": "https://github.com/rust-lang/rust/commit/4cab2931c89fe09dfa295445ad491c2ece7e7df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cab2931c89fe09dfa295445ad491c2ece7e7df1/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41920a1c304487e64506adf27100a224c6ef6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41920a1c304487e64506adf27100a224c6ef6e6", "html_url": "https://github.com/rust-lang/rust/commit/e41920a1c304487e64506adf27100a224c6ef6e6"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "ed01b93f1335a3289c52e656ce105166b3e6b940", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=4cab2931c89fe09dfa295445ad491c2ece7e7df1", "patch": "@@ -234,12 +234,10 @@ pub trait Unsize<T: ?Sized> {\n /// Generalizing the latter case, any type implementing [`Drop`] can't be `Copy`, because it's\n /// managing some resource besides its own [`size_of::<T>()`] bytes.\n ///\n-/// If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get a\n-/// compile-time error. Specifically, with structs you'll get [E0204] and with enums you'll get\n-/// [E0205].\n+/// If you try to implement `Copy` on a struct or enum containing non-`Copy` data, you will get\n+/// the error [E0204].\n ///\n /// [E0204]: ../../error-index.html#E0204\n-/// [E0205]: ../../error-index.html#E0205\n ///\n /// ## When *should* my type be `Copy`?\n ///"}, {"sha": "0b1030f74b0fdba305322b5eb87e57fd4e7cf1af", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=4cab2931c89fe09dfa295445ad491c2ece7e7df1", "patch": "@@ -15,7 +15,7 @@ use hir::map::DefPathData;\n use infer::InferCtxt;\n use hir::map as ast_map;\n use traits::{self, Reveal};\n-use ty::{self, Ty, AdtKind, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n use ty::{Disr, ParameterEnvironment};\n use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n@@ -120,9 +120,8 @@ impl IntTypeExt for attr::IntType {\n \n \n #[derive(Copy, Clone)]\n-pub enum CopyImplementationError {\n-    InfrigingField(Name),\n-    InfrigingVariant(Name),\n+pub enum CopyImplementationError<'tcx> {\n+    InfrigingField(&'tcx ty::FieldDef),\n     NotAnAdt,\n     HasDestructor\n }\n@@ -145,7 +144,7 @@ pub enum Representability {\n impl<'tcx> ParameterEnvironment<'tcx> {\n     pub fn can_type_implement_copy<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                        self_type: Ty<'tcx>, span: Span)\n-                                       -> Result<(),CopyImplementationError> {\n+                                       -> Result<(), CopyImplementationError> {\n         // FIXME: (@jroesch) float this code up\n         tcx.infer_ctxt(None, Some(self.clone()), Reveal::NotSpecializable).enter(|infcx| {\n             let (adt, substs) = match self_type.sty {\n@@ -161,23 +160,10 @@ impl<'tcx> ParameterEnvironment<'tcx> {\n                 }\n             };\n \n-            match adt.adt_kind() {\n-                AdtKind::Struct | AdtKind::Union => {\n-                    for field in adt.all_fields() {\n-                        if !field_implements_copy(field) {\n-                            return Err(CopyImplementationError::InfrigingField(\n-                                field.name))\n-                        }\n-                    }\n-                }\n-                AdtKind::Enum => {\n-                    for variant in &adt.variants {\n-                        for field in &variant.fields {\n-                            if !field_implements_copy(field) {\n-                                return Err(CopyImplementationError::InfrigingVariant(\n-                                    variant.name))\n-                            }\n-                        }\n+            for variant in &adt.variants {\n+                for field in &variant.fields {\n+                    if !field_implements_copy(field) {\n+                        return Err(CopyImplementationError::InfrigingField(field));\n                     }\n                 }\n             }"}, {"sha": "d067cb99aa096757f5d76686b970d12140f122dc", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=4cab2931c89fe09dfa295445ad491c2ece7e7df1", "patch": "@@ -121,15 +121,7 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n \n     match param_env.can_type_implement_copy(tcx, self_type, span) {\n         Ok(()) => {}\n-        Err(CopyImplementationError::InfrigingField(name)) => {\n-            struct_span_err!(tcx.sess,\n-                             span,\n-                             E0204,\n-                             \"the trait `Copy` may not be implemented for this type\")\n-                .span_label(span, &format!(\"field `{}` does not implement `Copy`\", name))\n-                .emit()\n-        }\n-        Err(CopyImplementationError::InfrigingVariant(name)) => {\n+        Err(CopyImplementationError::InfrigingField(field)) => {\n             let item = tcx.map.expect_item(impl_node_id);\n             let span = if let ItemImpl(.., Some(ref tr), _, _) = item.node {\n                 tr.path.span\n@@ -139,10 +131,11 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n \n             struct_span_err!(tcx.sess,\n                              span,\n-                             E0205,\n+                             E0204,\n                              \"the trait `Copy` may not be implemented for this type\")\n-                .span_label(span,\n-                            &format!(\"variant `{}` does not implement `Copy`\", name))\n+                .span_label(\n+                    tcx.def_span(field.did),\n+                    &\"this field does not implement `Copy`\")\n                 .emit()\n         }\n         Err(CopyImplementationError::NotAnAdt) => {"}, {"sha": "1a971be64d81923d528313df3b01b0d892c7f251", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4cab2931c89fe09dfa295445ad491c2ece7e7df1", "patch": "@@ -2300,6 +2300,7 @@ This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n differs from the behavior for `&T`, which is always `Copy`).\n \"##,\n \n+/*\n E0205: r##\"\n An attempt to implement the `Copy` trait for an enum failed because one of the\n variants does not implement `Copy`. To fix this, you must implement `Copy` for\n@@ -2329,6 +2330,7 @@ enum Foo<'a> {\n This fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\n differs from the behavior for `&T`, which is always `Copy`).\n \"##,\n+*/\n \n E0206: r##\"\n You can only implement `Copy` for a struct or enum. Both of the following"}, {"sha": "c73e7534301055dd55729582ad1229c5646e1be5", "filename": "src/test/compile-fail/E0205.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e41920a1c304487e64506adf27100a224c6ef6e6/src%2Ftest%2Fcompile-fail%2FE0205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41920a1c304487e64506adf27100a224c6ef6e6/src%2Ftest%2Fcompile-fail%2FE0205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0205.rs?ref=e41920a1c304487e64506adf27100a224c6ef6e6", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum Foo {\n-    Bar(Vec<u32>),\n-    Baz,\n-}\n-\n-impl Copy for Foo { }\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE variant `Bar` does not implement `Copy`\n-\n-#[derive(Copy)]\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| NOTE variant `Bar` does not implement `Copy`\n-//~| NOTE in this expansion of #[derive(Copy)]\n-enum Foo2<'a> {\n-    Bar(&'a mut bool),\n-    Baz,\n-}\n-\n-fn main() {\n-}"}, {"sha": "9fb37607c7da7a1ac5cbbb5ea796e73a9ff7572c", "filename": "src/test/ui/span/E0204.rs", "status": "renamed", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Ftest%2Fui%2Fspan%2FE0204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Ftest%2Fui%2Fspan%2FE0204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.rs?ref=4cab2931c89fe09dfa295445ad491c2ece7e7df1", "patch": "@@ -13,16 +13,24 @@ struct Foo {\n }\n \n impl Copy for Foo { }\n-//~^ ERROR E0204\n-//~| NOTE field `foo` does not implement `Copy`\n \n #[derive(Copy)]\n-//~^ ERROR E0204\n-//~| NOTE field `ty` does not implement `Copy`\n-//~| NOTE in this expansion of #[derive(Copy)]\n struct Foo2<'a> {\n     ty: &'a mut bool,\n }\n \n+enum EFoo {\n+    Bar { x: Vec<u32> },\n+    Baz,\n+}\n+\n+impl Copy for EFoo { }\n+\n+#[derive(Copy)]\n+enum EFoo2<'a> {\n+    Bar(&'a mut bool),\n+    Baz,\n+}\n+\n fn main() {\n }", "previous_filename": "src/test/compile-fail/E0204.rs"}, {"sha": "ae543ed1a5d5309b415e40c5880a76f081fd5959", "filename": "src/test/ui/span/E0204.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cab2931c89fe09dfa295445ad491c2ece7e7df1/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=4cab2931c89fe09dfa295445ad491c2ece7e7df1", "patch": "@@ -0,0 +1,38 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0204.rs:29:10\n+   |\n+29 | #[derive(Copy)]\n+   |          ^^^^\n+30 | enum EFoo2<'a> {\n+31 |     Bar(&'a mut bool),\n+   |         ------------- this field does not implement `Copy`\n+\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0204.rs:17:10\n+   |\n+17 | #[derive(Copy)]\n+   |          ^^^^\n+18 | struct Foo2<'a> {\n+19 |     ty: &'a mut bool,\n+   |     ---------------- this field does not implement `Copy`\n+\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0204.rs:27:6\n+   |\n+23 |     Bar { x: Vec<u32> },\n+   |           ----------- this field does not implement `Copy`\n+...\n+27 | impl Copy for EFoo { }\n+   |      ^^^^\n+\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0204.rs:15:6\n+   |\n+12 |     foo: Vec<u32>,\n+   |     ------------- this field does not implement `Copy`\n+...\n+15 | impl Copy for Foo { }\n+   |      ^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}