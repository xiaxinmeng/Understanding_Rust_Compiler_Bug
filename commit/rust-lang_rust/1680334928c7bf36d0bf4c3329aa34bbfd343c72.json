{"sha": "1680334928c7bf36d0bf4c3329aa34bbfd343c72", "node_id": "C_kwDOAAsO6NoAKDE2ODAzMzQ5MjhjN2JmMzZkMGJmNGMzMzI5YWEzNGJiZmQzNDNjNzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-23T19:22:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-23T19:22:32Z"}, "message": "Use fulfillment in InferCtxt::evaluate_obligation", "tree": {"sha": "3e3bc9e13f863cc7f9ceec61cfe41791afb406c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3bc9e13f863cc7f9ceec61cfe41791afb406c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1680334928c7bf36d0bf4c3329aa34bbfd343c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1680334928c7bf36d0bf4c3329aa34bbfd343c72", "html_url": "https://github.com/rust-lang/rust/commit/1680334928c7bf36d0bf4c3329aa34bbfd343c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1680334928c7bf36d0bf4c3329aa34bbfd343c72/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bab4223939da298593bf1f46154bd8cc0af6070", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bab4223939da298593bf1f46154bd8cc0af6070", "html_url": "https://github.com/rust-lang/rust/commit/2bab4223939da298593bf1f46154bd8cc0af6070"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "edbe2de8105e6a2378284dc31b1e71610ed0c85b", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1680334928c7bf36d0bf4c3329aa34bbfd343c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1680334928c7bf36d0bf4c3329aa34bbfd343c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=1680334928c7bf36d0bf4c3329aa34bbfd343c72", "patch": "@@ -1,9 +1,8 @@\n-use rustc_middle::traits::solve::{Certainty, Goal, MaybeCause};\n+use rustc_infer::traits::{TraitEngine, TraitEngineExt};\n use rustc_middle::ty;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n-use crate::solve::InferCtxtEvalExt;\n use crate::traits::{EvaluationResult, OverflowError, PredicateObligation, SelectionContext};\n \n pub trait InferCtxtExt<'tcx> {\n@@ -81,35 +80,20 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         if self.tcx.trait_solver_next() {\n             self.probe(|snapshot| {\n-                if let Ok((_, certainty, nested_goals)) =\n-                    self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n-                {\n-                    match certainty {\n-                        // If we have nested obligations from instantiating the canonical\n-                        // response from this goal, just treat the response as ambiguous.\n-                        //\n-                        // FIXME(deferred_projection_equality): We need to process this\n-                        // in a loop probably... can't be worse than an ICE though\n-                        Certainty::Yes if !nested_goals.is_empty() => {\n-                            Ok(EvaluationResult::EvaluatedToAmbig)\n-                        }\n-                        Certainty::Yes => {\n-                            if self.opaque_types_added_in_snapshot(snapshot) {\n-                                Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n-                            } else if self.region_constraints_added_in_snapshot(snapshot).is_some()\n-                            {\n-                                Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n-                            } else {\n-                                Ok(EvaluationResult::EvaluatedToOk)\n-                            }\n-                        }\n-                        Certainty::Maybe(MaybeCause::Ambiguity) => {\n-                            Ok(EvaluationResult::EvaluatedToAmbig)\n-                        }\n-                        Certainty::Maybe(MaybeCause::Overflow) => Err(OverflowError::Canonical),\n-                    }\n-                } else {\n+                let mut fulfill_cx = crate::solve::FulfillmentCtxt::new();\n+                fulfill_cx.register_predicate_obligation(self, obligation.clone());\n+                // True errors\n+                // FIXME(-Ztrait-solver=next): Overflows are reported as ambig here, is that OK?\n+                if !fulfill_cx.select_where_possible(self).is_empty() {\n                     Ok(EvaluationResult::EvaluatedToErr)\n+                } else if !fulfill_cx.select_all_or_error(self).is_empty() {\n+                    Ok(EvaluationResult::EvaluatedToAmbig)\n+                } else if self.opaque_types_added_in_snapshot(snapshot) {\n+                    Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n+                } else if self.region_constraints_added_in_snapshot(snapshot).is_some() {\n+                    Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n+                } else {\n+                    Ok(EvaluationResult::EvaluatedToOk)\n                 }\n             })\n         } else {"}, {"sha": "4f429f018edf74943edbdf1428bd88768a5eec9f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1680334928c7bf36d0bf4c3329aa34bbfd343c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1680334928c7bf36d0bf4c3329aa34bbfd343c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1680334928c7bf36d0bf4c3329aa34bbfd343c72", "patch": "@@ -618,6 +618,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let mut fulfill_cx = crate::solve::FulfillmentCtxt::new();\n         fulfill_cx.register_predicate_obligations(self.infcx, predicates);\n         // True errors\n+        // FIXME(-Ztrait-solver=next): Overflows are reported as ambig here, is that OK?\n         if !fulfill_cx.select_where_possible(self.infcx).is_empty() {\n             return Ok(EvaluatedToErr);\n         }"}]}