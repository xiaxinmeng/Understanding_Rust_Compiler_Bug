{"sha": "3f802ee801bfde83084a4979cd85274ed963f316", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODAyZWU4MDFiZmRlODMwODRhNDk3OWNkODUyNzRlZDk2M2YzMTY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-25T09:55:12Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-25T09:55:12Z"}, "message": "Move the Lock into OpenTask", "tree": {"sha": "ffb92ef357cba90c4fe27d2cdb64eec5453af30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb92ef357cba90c4fe27d2cdb64eec5453af30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f802ee801bfde83084a4979cd85274ed963f316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f802ee801bfde83084a4979cd85274ed963f316", "html_url": "https://github.com/rust-lang/rust/commit/3f802ee801bfde83084a4979cd85274ed963f316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f802ee801bfde83084a4979cd85274ed963f316/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec629b3a023b1f1543c10ae40a9bd86eeb45954", "html_url": "https://github.com/rust-lang/rust/commit/8ec629b3a023b1f1543c10ae40a9bd86eeb45954"}], "stats": {"total": 109, "additions": 52, "deletions": 57}, "files": [{"sha": "22ab1b15c8b8ed225c7a4016a96f335bf80c2dab", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3f802ee801bfde83084a4979cd85274ed963f316/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f802ee801bfde83084a4979cd85274ed963f316/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=3f802ee801bfde83084a4979cd85274ed963f316", "patch": "@@ -145,7 +145,7 @@ impl DepGraph {\n         if let Some(..) = self.data {\n             ty::tls::with_context_opt(|icx| {\n                 let icx = if let Some(icx) = icx { icx } else { return };\n-                match *icx.task.lock() {\n+                match *icx.task {\n                     OpenTask::Ignore => {\n                         // ignored\n                     }\n@@ -160,7 +160,7 @@ impl DepGraph {\n     {\n         ty::tls::with_context(|icx| {\n             let icx = ty::tls::ImplicitCtxt {\n-                task: &Lock::new(OpenTask::Ignore),\n+                task: &OpenTask::Ignore,\n                 ..icx.clone()\n             };\n \n@@ -207,11 +207,11 @@ impl DepGraph {\n               R: HashStable<StableHashingContext<'gcx>>,\n     {\n         self.with_task_impl(key, cx, arg, false, task,\n-            |key| OpenTask::Regular {\n+            |key| OpenTask::Regular(Lock::new(RegularOpenTask {\n                 node: key,\n                 reads: Vec::new(),\n                 read_set: FxHashSet(),\n-            },\n+            })),\n             |data, key, task| data.borrow_mut().complete_task(key, task))\n     }\n \n@@ -263,24 +263,18 @@ impl DepGraph {\n                 profq_msg(hcx.sess(), ProfileQueriesMsg::TaskBegin(key.clone()))\n             };\n \n-            let (result, open_task) = if no_tcx {\n-                (task(cx, arg), open_task)\n+            let result = if no_tcx {\n+                task(cx, arg)\n             } else {\n                 ty::tls::with_context(|icx| {\n-                    let open_task = Lock::new(open_task);\n-\n-                    let r = {\n-                        let icx = ty::tls::ImplicitCtxt {\n-                            task: &open_task,\n-                            ..icx.clone()\n-                        };\n-\n-                        ty::tls::enter_context(&icx, |_| {\n-                            task(cx, arg)\n-                        })\n+                    let icx = ty::tls::ImplicitCtxt {\n+                        task: &open_task,\n+                        ..icx.clone()\n                     };\n \n-                    (r, open_task.into_inner())\n+                    ty::tls::enter_context(&icx, |_| {\n+                        task(cx, arg)\n+                    })\n                 })\n             };\n \n@@ -358,10 +352,10 @@ impl DepGraph {\n     {\n         if let Some(ref data) = self.data {\n             let (result, open_task) = ty::tls::with_context(|icx| {\n-                let task = Lock::new(OpenTask::Anon {\n+                let task = OpenTask::Anon(Lock::new(AnonOpenTask {\n                     reads: Vec::new(),\n                     read_set: FxHashSet(),\n-                });\n+                }));\n \n                 let r = {\n                     let icx = ty::tls::ImplicitCtxt {\n@@ -374,7 +368,7 @@ impl DepGraph {\n                     })\n                 };\n \n-                (r, task.into_inner())\n+                (r, task)\n             });\n             let dep_node_index = data.current\n                                      .borrow_mut()\n@@ -986,11 +980,12 @@ impl CurrentDepGraph {\n     }\n \n     fn complete_task(&mut self, key: DepNode, task: OpenTask) -> DepNodeIndex {\n-        if let OpenTask::Regular {\n-            node,\n-            read_set: _,\n-            reads\n-        } = task {\n+        if let OpenTask::Regular(task) = task {\n+            let RegularOpenTask {\n+                node,\n+                read_set: _,\n+                reads\n+            } = task.into_inner();\n             assert_eq!(node, key);\n \n             // If this is an input node, we expect that it either has no\n@@ -1022,10 +1017,11 @@ impl CurrentDepGraph {\n     }\n \n     fn pop_anon_task(&mut self, kind: DepKind, task: OpenTask) -> DepNodeIndex {\n-        if let OpenTask::Anon {\n-            read_set: _,\n-            reads\n-        } = task {\n+        if let OpenTask::Anon(task) = task {\n+            let AnonOpenTask {\n+                read_set: _,\n+                reads\n+            } = task.into_inner();\n             debug_assert!(!kind.is_input());\n \n             let mut fingerprint = self.anon_id_seed;\n@@ -1074,18 +1070,16 @@ impl CurrentDepGraph {\n     fn read_index(&mut self, source: DepNodeIndex) {\n         ty::tls::with_context_opt(|icx| {\n             let icx = if let Some(icx) = icx { icx } else { return };\n-            match *icx.task.lock() {\n-                OpenTask::Regular {\n-                    ref mut reads,\n-                    ref mut read_set,\n-                    node: ref target,\n-                } => {\n+            match *icx.task {\n+                OpenTask::Regular(ref task) => {\n+                    let mut task = task.lock();\n                     self.total_read_count += 1;\n-                    if read_set.insert(source) {\n-                        reads.push(source);\n+                    if task.read_set.insert(source) {\n+                        task.reads.push(source);\n \n                         if cfg!(debug_assertions) {\n                             if let Some(ref forbidden_edge) = self.forbidden_edge {\n+                                let target = &task.node;\n                                 let source = self.nodes[source];\n                                 if forbidden_edge.test(&source, &target) {\n                                     bug!(\"forbidden edge {:?} -> {:?} created\",\n@@ -1098,12 +1092,10 @@ impl CurrentDepGraph {\n                         self.total_duplicate_read_count += 1;\n                     }\n                 }\n-                OpenTask::Anon {\n-                    ref mut reads,\n-                    ref mut read_set,\n-                } => {\n-                    if read_set.insert(source) {\n-                        reads.push(source);\n+                OpenTask::Anon(ref task) => {\n+                    let mut task = task.lock();\n+                    if task.read_set.insert(source) {\n+                        task.reads.push(source);\n                     }\n                 }\n                 OpenTask::Ignore | OpenTask::EvalAlways { .. } => {\n@@ -1128,17 +1120,20 @@ impl CurrentDepGraph {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n+pub struct RegularOpenTask {\n+    node: DepNode,\n+    reads: Vec<DepNodeIndex>,\n+    read_set: FxHashSet<DepNodeIndex>,\n+}\n+\n+pub struct AnonOpenTask {\n+    reads: Vec<DepNodeIndex>,\n+    read_set: FxHashSet<DepNodeIndex>,\n+}\n+\n pub enum OpenTask {\n-    Regular {\n-        node: DepNode,\n-        reads: Vec<DepNodeIndex>,\n-        read_set: FxHashSet<DepNodeIndex>,\n-    },\n-    Anon {\n-        reads: Vec<DepNodeIndex>,\n-        read_set: FxHashSet<DepNodeIndex>,\n-    },\n+    Regular(Lock<RegularOpenTask>),\n+    Anon(Lock<AnonOpenTask>),\n     Ignore,\n     EvalAlways {\n         node: DepNode,"}, {"sha": "c35f515a99e43c27fc30cdf920cf600634e61861", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f802ee801bfde83084a4979cd85274ed963f316/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f802ee801bfde83084a4979cd85274ed963f316/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3f802ee801bfde83084a4979cd85274ed963f316", "patch": "@@ -1741,7 +1741,7 @@ pub mod tls {\n     use ty::maps;\n     use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n     use rustc_data_structures::OnDrop;\n-    use rustc_data_structures::sync::{Lrc, Lock};\n+    use rustc_data_structures::sync::Lrc;\n     use dep_graph::OpenTask;\n \n     /// This is the implicit state of rustc. It contains the current\n@@ -1764,7 +1764,7 @@ pub mod tls {\n \n         /// The current dep graph task. This is used to add dependencies to queries\n         /// when executing them\n-        pub task: &'a Lock<OpenTask>,\n+        pub task: &'a OpenTask,\n     }\n \n     // A thread local value which stores a pointer to the current ImplicitCtxt\n@@ -1851,7 +1851,7 @@ pub mod tls {\n                 tcx,\n                 query: None,\n                 layout_depth: 0,\n-                task: &Lock::new(OpenTask::Ignore),\n+                task: &OpenTask::Ignore,\n             };\n             enter_context(&icx, |_| {\n                 f(tcx)"}]}