{"sha": "e14eae6226847f2940e8158cb83253ecebbdc61c", "node_id": "C_kwDOAAsO6NoAKGUxNGVhZTYyMjY4NDdmMjk0MGU4MTU4Y2I4MzI1M2VjZWJiZGM2MWM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-09T01:34:36Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-09T01:53:25Z"}, "message": "Remove subst_spanned", "tree": {"sha": "3055941c38c13f3ed07a52f1d398f2114d6384c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3055941c38c13f3ed07a52f1d398f2114d6384c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e14eae6226847f2940e8158cb83253ecebbdc61c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e14eae6226847f2940e8158cb83253ecebbdc61c", "html_url": "https://github.com/rust-lang/rust/commit/e14eae6226847f2940e8158cb83253ecebbdc61c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e14eae6226847f2940e8158cb83253ecebbdc61c/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2", "html_url": "https://github.com/rust-lang/rust/commit/f9b2e3c87b76c03cc398be8b8f65d096c0583eb2"}], "stats": {"total": 67, "additions": 14, "deletions": 53}, "files": [{"sha": "5b1fb70872988c0787dc2bfe4d49ab0167c65969", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e14eae6226847f2940e8158cb83253ecebbdc61c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14eae6226847f2940e8158cb83253ecebbdc61c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e14eae6226847f2940e8158cb83253ecebbdc61c", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::DUMMY_SP;\n use smallvec::SmallVec;\n \n use core::intrinsics;\n@@ -498,34 +498,14 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// Public trait `Subst`\n-//\n-// Just call `foo.subst(tcx, substs)` to perform a substitution across\n-// `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when\n-// there is more information available (for better errors).\n-\n+// Just call `foo.subst(tcx, substs)` to perform a substitution across `foo`.\n pub trait Subst<'tcx>: Sized {\n-    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self {\n-        self.subst_spanned(tcx, substs, None)\n-    }\n-\n-    fn subst_spanned(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        substs: &[GenericArg<'tcx>],\n-        span: Option<Span>,\n-    ) -> Self;\n+    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self;\n }\n \n impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {\n-    fn subst_spanned(\n-        self,\n-        tcx: TyCtxt<'tcx>,\n-        substs: &[GenericArg<'tcx>],\n-        span: Option<Span>,\n-    ) -> T {\n-        let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };\n+    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> T {\n+        let mut folder = SubstFolder { tcx, substs, binders_passed: 0 };\n         self.fold_with(&mut folder)\n     }\n }\n@@ -537,9 +517,6 @@ struct SubstFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     substs: &'a [GenericArg<'tcx>],\n \n-    /// The location for which the substitution is performed, if available.\n-    span: Option<Span>,\n-\n     /// Number of region binders we have passed through while doing the substitution\n     binders_passed: u32,\n }\n@@ -571,13 +548,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 match rk {\n                     Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),\n                     _ => {\n-                        let span = self.span.unwrap_or(DUMMY_SP);\n                         let msg = format!(\n                             \"Region parameter out of range \\\n                              when substituting in region {} (index={})\",\n                             data.name, data.index\n                         );\n-                        span_bug!(span, \"{}\", msg);\n+                        span_bug!(DUMMY_SP, \"{}\", msg);\n                     }\n                 }\n             }\n@@ -617,9 +593,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n         let ty = match opt_ty {\n             Some(GenericArgKind::Type(ty)) => ty,\n             Some(kind) => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"expected type for `{:?}` ({:?}/{}) but found {:?} \\\n                      when substituting, substs={:?}\",\n                     p,\n@@ -630,9 +605,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n                 );\n             }\n             None => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"type parameter `{:?}` ({:?}/{}) out of range \\\n                      when substituting, substs={:?}\",\n                     p,\n@@ -652,9 +626,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n         let ct = match opt_ct {\n             Some(GenericArgKind::Const(ct)) => ct,\n             Some(kind) => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"expected const for `{:?}` ({:?}/{}) but found {:?} \\\n                      when substituting substs={:?}\",\n                     p,\n@@ -665,9 +638,8 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n                 );\n             }\n             None => {\n-                let span = self.span.unwrap_or(DUMMY_SP);\n                 span_bug!(\n-                    span,\n+                    DUMMY_SP,\n                     \"const parameter `{:?}` ({:?}/{}) out of range \\\n                      when substituting substs={:?}\",\n                     p,"}, {"sha": "3c1676b1aac67909f1c0c043abcd229ca4e34f83", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e14eae6226847f2940e8158cb83253ecebbdc61c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14eae6226847f2940e8158cb83253ecebbdc61c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e14eae6226847f2940e8158cb83253ecebbdc61c", "patch": "@@ -523,11 +523,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 self.astconv\n                                     .normalize_ty(\n                                         self.span,\n-                                        tcx.at(self.span).type_of(param.def_id).subst_spanned(\n-                                            tcx,\n-                                            substs,\n-                                            Some(self.span),\n-                                        ),\n+                                        tcx.at(self.span).type_of(param.def_id).subst(tcx, substs),\n                                     )\n                                     .into()\n                             }\n@@ -547,9 +543,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id)\n-                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()"}, {"sha": "d824c1d7cf252a6b2da48ff43a9165876817b89d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e14eae6226847f2940e8158cb83253ecebbdc61c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14eae6226847f2940e8158cb83253ecebbdc61c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e14eae6226847f2940e8158cb83253ecebbdc61c", "patch": "@@ -1403,10 +1403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // is missing.\n                             let default = tcx.type_of(param.def_id);\n                             self.fcx\n-                                .normalize_ty(\n-                                    self.span,\n-                                    default.subst_spanned(tcx, substs.unwrap(), Some(self.span)),\n-                                )\n+                                .normalize_ty(self.span, default.subst(tcx, substs.unwrap()))\n                                 .into()\n                         } else {\n                             // If no type arguments were provided, we have to infer them.\n@@ -1418,9 +1415,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id)\n-                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n-                                .into()\n+                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}]}