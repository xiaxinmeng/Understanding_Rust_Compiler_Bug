{"sha": "7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMmM3MjZkNmNiZTE0YTEzNWNhOWIwMDhjYTdjYzAzMWZhYWU5N2Y=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-26T23:44:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-27T18:07:48Z"}, "message": "Speed up rustdoc run a bit", "tree": {"sha": "7f27bec713b9948e1b45ba78d6ab97085d8c39e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f27bec713b9948e1b45ba78d6ab97085d8c39e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "html_url": "https://github.com/rust-lang/rust/commit/7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c27fb19ba15a2e45485e601a79914c6280196b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c27fb19ba15a2e45485e601a79914c6280196b0", "html_url": "https://github.com/rust-lang/rust/commit/4c27fb19ba15a2e45485e601a79914c6280196b0"}], "stats": {"total": 99, "additions": 54, "deletions": 45}, "files": [{"sha": "71ee4fe123db21ae63f1a36ac033988e0b9c66a0", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "patch": "@@ -1500,7 +1500,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.28\"\n+version = \"0.0.29\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2066,7 +2066,7 @@ name = \"rand_chacha\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2088,7 +2088,7 @@ name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2113,7 +2113,7 @@ name = \"rand_xorshift\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3016,7 +3016,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"minifier 0.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"minifier 0.0.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4116,7 +4116,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a3eb002f0535929f1199681417029ebea04aadc0c7a4224b46be99c7f5d6a16\"\n \"checksum memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n-\"checksum minifier 0.0.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a2898502751dcc9d66b6fff57f3cf63cc91605e83e1a33515396f5027f8e4ca\"\n+\"checksum minifier 0.0.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f4950cb2617b1933e2da0446e864dfe0d6a22c22ff72297996c46e6a63b210b\"\n \"checksum miniz-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0300eafb20369952951699b68243ab4334f4b10a88f411c221d444b36c40e649\"\n \"checksum miniz_oxide 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ad30a47319c16cde58d0314f5d98202a80c9083b5f61178457403dfb14e509c\"\n \"checksum miniz_oxide_c_api 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28edaef377517fd9fe3e085c37d892ce7acd1fbeab9239c5a36eec352d8a8b7e\""}, {"sha": "4d2c03a4f2fdb1eebe12bc094287b5d7ae2f2e25", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "patch": "@@ -10,6 +10,6 @@ path = \"lib.rs\"\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n-minifier = \"0.0.28\"\n+minifier = \"0.0.29\"\n tempfile = \"3\"\n parking_lot = \"0.7\""}, {"sha": "948d405c5b9af4938210ad112c9f2f38286d58b4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2c726d6cbe14a135ca9b008ca7cc031faae97f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7f2c726d6cbe14a135ca9b008ca7cc031faae97f", "patch": "@@ -957,7 +957,11 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 if for_search_index && line.starts_with(\"var R\") {\n                     variables.push(line.clone());\n                     // We need to check if the crate name has been put into a variable as well.\n-                    let tokens = js::simple_minify(&line).apply(js::clean_tokens);\n+                    let tokens: js::Tokens<'_> = js::simple_minify(&line)\n+                                                    .into_iter()\n+                                                    .filter(js::clean_token)\n+                                                    .collect::<Vec<_>>()\n+                                                    .into();\n                     let mut pos = 0;\n                     while pos < tokens.len() {\n                         if let Some((var_pos, Some(value_pos))) =\n@@ -1282,46 +1286,51 @@ fn write_minify_replacer<W: Write>(\n     contents: &str,\n     enable_minification: bool,\n ) -> io::Result<()> {\n-    use minifier::js::{Keyword, ReservedChar, Token};\n+    use minifier::js::{simple_minify, Keyword, ReservedChar, Token, Tokens};\n \n     if enable_minification {\n         writeln!(dst, \"{}\",\n-                 minifier::js::simple_minify(contents)\n-                              .apply(|f| {\n-                                  // We keep backlines.\n-                                  minifier::js::clean_tokens_except(f, |c| {\n-                                      c.get_char() != Some(ReservedChar::Backline)\n-                                  })\n-                              })\n-                              .apply(|f| {\n-                                  minifier::js::replace_token_with(f, |t| {\n-                                      match *t {\n-                                          Token::Keyword(Keyword::Null) => Some(Token::Other(\"N\")),\n-                                          Token::String(s) => {\n-                                              let s = &s[1..s.len() -1]; // The quotes are included\n-                                              if s.is_empty() {\n-                                                  Some(Token::Other(\"E\"))\n-                                              } else if s == \"t\" {\n-                                                  Some(Token::Other(\"T\"))\n-                                              } else if s == \"u\" {\n-                                                  Some(Token::Other(\"U\"))\n-                                              } else {\n-                                                  None\n-                                              }\n-                                          }\n-                                          _ => None,\n-                                      }\n-                                  })\n-                              })\n-                              .apply(|f| {\n-                                  // We add a backline after the newly created variables.\n-                                  minifier::js::aggregate_strings_into_array_with_separation(\n-                                      f,\n-                                      \"R\",\n-                                      Token::Char(ReservedChar::Backline),\n-                                  )\n-                              })\n-                              .to_string())\n+                 {\n+                    let tokens: Tokens<'_> = simple_minify(contents)\n+                        .into_iter()\n+                        .filter(|f| {\n+                            // We keep backlines.\n+                            minifier::js::clean_token_except(f, &|c: &Token<'_>| {\n+                                c.get_char() != Some(ReservedChar::Backline)\n+                            })\n+                        })\n+                        .map(|f| {\n+                            minifier::js::replace_token_with(f, &|t: &Token<'_>| {\n+                                match *t {\n+                                    Token::Keyword(Keyword::Null) => Some(Token::Other(\"N\")),\n+                                    Token::String(s) => {\n+                                        let s = &s[1..s.len() -1]; // The quotes are included\n+                                        if s.is_empty() {\n+                                            Some(Token::Other(\"E\"))\n+                                        } else if s == \"t\" {\n+                                            Some(Token::Other(\"T\"))\n+                                        } else if s == \"u\" {\n+                                            Some(Token::Other(\"U\"))\n+                                        } else {\n+                                            None\n+                                        }\n+                                    }\n+                                    _ => None,\n+                                }\n+                            })\n+                        })\n+                        .collect::<Vec<_>>()\n+                        .into();\n+                    tokens.apply(|f| {\n+                        // We add a backline after the newly created variables.\n+                        minifier::js::aggregate_strings_into_array_with_separation(\n+                            f,\n+                            \"R\",\n+                            Token::Char(ReservedChar::Backline),\n+                        )\n+                    })\n+                    .to_string()\n+                })\n     } else {\n         writeln!(dst, \"{}\", contents)\n     }"}]}