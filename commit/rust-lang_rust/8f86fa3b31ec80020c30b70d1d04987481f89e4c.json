{"sha": "8f86fa3b31ec80020c30b70d1d04987481f89e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODZmYTNiMzFlYzgwMDIwYzMwYjcwZDFkMDQ5ODc0ODFmODllNGM=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-24T12:11:49Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-24T14:22:55Z"}, "message": "rc: Use ~T for allocation\n\nSimplify Rc<T>/RcMut<T> by using ~T when allocating a reference counted\nbox.", "tree": {"sha": "9db6ffc8e800966abb19ad1bf59899a0315214a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db6ffc8e800966abb19ad1bf59899a0315214a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f86fa3b31ec80020c30b70d1d04987481f89e4c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f86fa3b31ec80020c30b70d1d04987481f89e4c", "html_url": "https://github.com/rust-lang/rust/commit/8f86fa3b31ec80020c30b70d1d04987481f89e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f86fa3b31ec80020c30b70d1d04987481f89e4c/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a2d22bdb1292fe2c4b415671def7959adf36920", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2d22bdb1292fe2c4b415671def7959adf36920", "html_url": "https://github.com/rust-lang/rust/commit/4a2d22bdb1292fe2c4b415671def7959adf36920"}], "stats": {"total": 92, "additions": 44, "deletions": 48}, "files": [{"sha": "04d6b8ebca5fe38a8a637d01c504ddbfbd3f6562", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 43, "deletions": 47, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8f86fa3b31ec80020c30b70d1d04987481f89e4c/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f86fa3b31ec80020c30b70d1d04987481f89e4c/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=8f86fa3b31ec80020c30b70d1d04987481f89e4c", "patch": "@@ -23,11 +23,17 @@ cycle cannot be created with `Rc<T>` because there is no way to modify it after\n \n \n use std::cast;\n-use std::libc::{c_void, size_t, malloc, free};\n use std::ptr;\n-use std::sys;\n use std::unstable::intrinsics;\n \n+// Convert ~T into *mut T without dropping it\n+#[inline]\n+unsafe fn owned_to_raw<T>(mut box: ~T) -> *mut T {\n+    let ptr = ptr::to_mut_unsafe_ptr(box);\n+    intrinsics::forget(box);\n+    ptr\n+}\n+\n struct RcBox<T> {\n     value: T,\n     count: uint\n@@ -42,21 +48,20 @@ pub struct Rc<T> {\n \n impl<T> Rc<T> {\n     unsafe fn new(value: T) -> Rc<T> {\n-        let ptr = malloc(sys::size_of::<RcBox<T>>() as size_t) as *mut RcBox<T>;\n-        assert!(!ptr::is_null(ptr));\n-        intrinsics::move_val_init(&mut *ptr, RcBox{value: value, count: 1});\n-        Rc{ptr: ptr}\n+        Rc{ptr: owned_to_raw(~RcBox{value: value, count: 1})}\n     }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_from_owned<T: Send>(value: T) -> Rc<T> {\n-    unsafe { Rc::new(value) }\n+impl<T: Send> Rc<T> {\n+    pub fn from_owned(value: T) -> Rc<T> {\n+        unsafe { Rc::new(value) }\n+    }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_from_const<T: Freeze>(value: T) -> Rc<T> {\n-    unsafe { Rc::new(value) }\n+impl<T: Freeze> Rc<T> {\n+    pub fn from_const(value: T) -> Rc<T> {\n+        unsafe { Rc::new(value) }\n+    }\n }\n \n impl<T> Rc<T> {\n@@ -73,8 +78,7 @@ impl<T> Drop for Rc<T> {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;\n                 if (*self.ptr).count == 0 {\n-                    ptr::read_ptr(self.ptr);\n-                    free(self.ptr as *c_void)\n+                    let _: ~T = cast::transmute(self.ptr);\n                 }\n             }\n         }\n@@ -107,7 +111,7 @@ mod test_rc {\n \n     #[test]\n     fn test_clone() {\n-        let x = rc_from_owned(Cell::new(5));\n+        let x = Rc::from_owned(Cell::new(5));\n         let y = x.clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -117,7 +121,7 @@ mod test_rc {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = rc_from_owned(Cell::new(5));\n+        let x = Rc::from_owned(Cell::new(5));\n         let y = x.deep_clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -127,31 +131,25 @@ mod test_rc {\n \n     #[test]\n     fn test_simple() {\n-        let x = rc_from_const(5);\n+        let x = Rc::from_const(5);\n         assert_eq!(*x.borrow(), 5);\n     }\n \n     #[test]\n     fn test_simple_clone() {\n-        let x = rc_from_const(5);\n+        let x = Rc::from_const(5);\n         let y = x.clone();\n         assert_eq!(*x.borrow(), 5);\n         assert_eq!(*y.borrow(), 5);\n     }\n \n     #[test]\n     fn test_destructor() {\n-        let x = rc_from_owned(~5);\n+        let x = Rc::from_owned(~5);\n         assert_eq!(**x.borrow(), 5);\n     }\n }\n \n-#[abi = \"rust-intrinsic\"]\n-extern \"rust-intrinsic\" {\n-    fn init<T>() -> T;\n-    fn uninit<T>() -> T;\n-}\n-\n #[deriving(Eq)]\n enum Borrow {\n     Mutable,\n@@ -175,21 +173,20 @@ pub struct RcMut<T> {\n \n impl<T> RcMut<T> {\n     unsafe fn new(value: T) -> RcMut<T> {\n-        let ptr = malloc(sys::size_of::<RcMutBox<T>>() as size_t) as *mut RcMutBox<T>;\n-        assert!(!ptr::is_null(ptr));\n-        intrinsics::move_val_init(&mut *ptr, RcMutBox{value: value, count: 1, borrow: Nothing});\n-        RcMut{ptr: ptr}\n+        RcMut{ptr: owned_to_raw(~RcMutBox{value: value, count: 1, borrow: Nothing})}\n     }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_mut_from_owned<T: Send>(value: T) -> RcMut<T> {\n-    unsafe { RcMut::new(value) }\n+impl<T: Send> RcMut<T> {\n+    pub fn from_owned(value: T) -> RcMut<T> {\n+        unsafe { RcMut::new(value) }\n+    }\n }\n \n-// FIXME: #6516: should be a static method\n-pub fn rc_mut_from_const<T: Freeze>(value: T) -> RcMut<T> {\n-    unsafe { RcMut::new(value) }\n+impl<T: Freeze> RcMut<T> {\n+    pub fn from_const(value: T) -> RcMut<T> {\n+        unsafe { RcMut::new(value) }\n+    }\n }\n \n impl<T> RcMut<T> {\n@@ -226,8 +223,7 @@ impl<T> Drop for RcMut<T> {\n             if self.ptr.is_not_null() {\n                 (*self.ptr).count -= 1;\n                 if (*self.ptr).count == 0 {\n-                    ptr::replace_ptr(self.ptr, uninit());\n-                    free(self.ptr as *c_void)\n+                    let _: ~T = cast::transmute(self.ptr);\n                 }\n             }\n         }\n@@ -262,7 +258,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn test_clone() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n         do x.with_mut_borrow |value| {\n             *value = 20;\n@@ -274,7 +270,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.deep_clone();\n         do x.with_mut_borrow |value| {\n             *value = 20;\n@@ -286,7 +282,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn borrow_many() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n \n         do x.with_borrow |a| {\n@@ -302,7 +298,7 @@ mod test_rc_mut {\n \n     #[test]\n     fn modify() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.clone();\n \n         do y.with_mut_borrow |a| {\n@@ -317,22 +313,22 @@ mod test_rc_mut {\n \n     #[test]\n     fn release_immutable() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         do x.with_borrow |_| {}\n         do x.with_mut_borrow |_| {}\n     }\n \n     #[test]\n     fn release_mutable() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         do x.with_mut_borrow |_| {}\n         do x.with_borrow |_| {}\n     }\n \n     #[test]\n     #[should_fail]\n     fn frozen() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n \n         do x.with_borrow |_| {\n@@ -344,7 +340,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn mutable_dupe() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.clone();\n \n         do x.with_mut_borrow |_| {\n@@ -356,7 +352,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn mutable_freeze() {\n-        let x = rc_mut_from_owned(5);\n+        let x = RcMut::from_owned(5);\n         let y = x.clone();\n \n         do x.with_mut_borrow |_| {\n@@ -368,7 +364,7 @@ mod test_rc_mut {\n     #[test]\n     #[should_fail]\n     fn restore_freeze() {\n-        let x = rc_mut_from_const(5);\n+        let x = RcMut::from_const(5);\n         let y = x.clone();\n \n         do x.with_borrow |_| {"}, {"sha": "c27debdbc7fb99dc7ca3f084bec1bff30b057db3", "filename": "src/test/compile-fail/rcmut-not-const-and-not-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f86fa3b31ec80020c30b70d1d04987481f89e4c/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f86fa3b31ec80020c30b70d1d04987481f89e4c/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frcmut-not-const-and-not-owned.rs?ref=8f86fa3b31ec80020c30b70d1d04987481f89e4c", "patch": "@@ -14,7 +14,7 @@ fn o<T: Send>(_: &T) {}\n fn c<T: Freeze>(_: &T) {}\n \n fn main() {\n-    let x = extra::rc::rc_mut_from_owned(0);\n+    let x = extra::rc::RcMut::from_owned(0);\n     o(&x); //~ ERROR instantiating a type parameter with an incompatible type `extra::rc::RcMut<int>`, which does not fulfill `Send`\n     c(&x); //~ ERROR instantiating a type parameter with an incompatible type `extra::rc::RcMut<int>`, which does not fulfill `Freeze`\n }"}]}