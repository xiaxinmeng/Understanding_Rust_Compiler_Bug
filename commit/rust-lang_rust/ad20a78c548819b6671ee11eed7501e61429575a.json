{"sha": "ad20a78c548819b6671ee11eed7501e61429575a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjBhNzhjNTQ4ODE5YjY2NzFlZTExZWVkNzUwMWU2MTQyOTU3NWE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T12:30:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T21:35:34Z"}, "message": "std::vec::raw: convert init_elem to a method.", "tree": {"sha": "752819f81a71b6cafcaea671d1cb4a3ec5d32616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752819f81a71b6cafcaea671d1cb4a3ec5d32616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad20a78c548819b6671ee11eed7501e61429575a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad20a78c548819b6671ee11eed7501e61429575a", "html_url": "https://github.com/rust-lang/rust/commit/ad20a78c548819b6671ee11eed7501e61429575a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad20a78c548819b6671ee11eed7501e61429575a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c", "html_url": "https://github.com/rust-lang/rust/commit/33b6bf4bc1456b670e134b7581d2e26b8c2cff6c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "3a2b7c689552d9751c28ab11e0637432546566c8", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ad20a78c548819b6671ee11eed7501e61429575a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad20a78c548819b6671ee11eed7501e61429575a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=ad20a78c548819b6671ee11eed7501e61429575a", "patch": "@@ -2053,6 +2053,13 @@ pub trait MutableVector<'a, T> {\n     /// Unsafely sets the element in index to the value\n     unsafe fn unsafe_set(self, index: uint, val: T);\n \n+    /**\n+     * Unchecked vector index assignment.  Does not drop the\n+     * old value and hence is only suitable when the vector\n+     * is newly allocated.\n+     */\n+    unsafe fn init_elem(self, i: uint, val: T);\n+\n     /// Similar to `as_imm_buf` but passing a `*mut T`\n     fn as_mut_buf<U>(self, f: |*mut T, uint| -> U) -> U;\n }\n@@ -2181,6 +2188,15 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n         *self.unsafe_mut_ref(index) = val;\n     }\n \n+    #[inline]\n+    unsafe fn init_elem(self, i: uint, val: T) {\n+        let mut alloc = Some(val);\n+        self.as_mut_buf(|p, _len| {\n+            intrinsics::move_val_init(&mut(*ptr::mut_offset(p, i as int)),\n+                                      alloc.take_unwrap());\n+        })\n+    }\n+\n     #[inline]\n     fn as_mut_buf<U>(self, f: |*mut T, uint| -> U) -> U {\n         let Slice{ data, len } = self.repr();\n@@ -2221,9 +2237,7 @@ pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n /// Unsafe operations\n pub mod raw {\n     use cast;\n-    use option::Some;\n     use ptr;\n-    use unstable::intrinsics;\n     use vec::{with_capacity, ImmutableVector, MutableVector};\n     use unstable::raw::Slice;\n \n@@ -2257,20 +2271,6 @@ pub mod raw {\n         }))\n     }\n \n-    /**\n-     * Unchecked vector index assignment.  Does not drop the\n-     * old value and hence is only suitable when the vector\n-     * is newly allocated.\n-     */\n-    #[inline]\n-    pub unsafe fn init_elem<T>(v: &mut [T], i: uint, val: T) {\n-        let mut alloc = Some(val);\n-        v.as_mut_buf(|p, _len| {\n-            intrinsics::move_val_init(&mut(*ptr::mut_offset(p, i as int)),\n-                                      alloc.take_unwrap());\n-        })\n-    }\n-\n     /**\n     * Constructs a vector from an unsafe pointer to a buffer\n     *"}]}