{"sha": "9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMTFmYWI3NGRmNGUwZjZmMmI4YmZiNTkzNmYzNzcyYmE1OWE5NjA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T10:25:02Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T15:06:25Z"}, "message": "Rollup merge of #55271 - sinkuu:traversal_iter, r=matthewjasper\n\nUnimplement ExactSizeIterator for MIR traversing iterators\n\nIf `root` is not `START_BLOCK`, `basic_blocks().len() - visited` does not represent their exact size.", "tree": {"sha": "8242128230ababd385bb4fccf0de66c501f3d9e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8242128230ababd385bb4fccf0de66c501f3d9e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvTLXEACgkQ/vbIBR0O\nATyNoxAAt/Ezd7JRSsfLfUxWgV8+n6234I9TdGaUZbrrKI1jRXCW1z6O5/BxXzRe\nES9TaSdyjx4Dr8f4B5DX+5X7+iubTMtwit1ul1/xY8H/QBNFgy4zUP9YE1Xd+lV/\nFzgcgV21NgOHLWxApxcCHdf/F/3IyodugKlQvjxypgI8Yn3LvJXKdWmGbdYTNbKU\ni2A/sBiYqOLiqXde7w6cT7JCrSSU1ovGzY4E9O6MXYdP+J/v16HQuzEsNIbMVRIM\nXwoXuq5H1mGjPYEAe8teGtb0KPnY82Fk6XEpJ84fIc5PJm0IAsPmw+KPBsmST3aA\nBh14+F0fW7ido4648yRVo1UmlGn1ewcmPVvpW0OXPNWwtYc7wsC4NCmMclqRJ6Oy\n6Wm8eH3eHng8WuQSDBTn6whFF3V1ZBhIaSf/2O4JN6JcDtGX85d2Ukn8ChxUMQL+\nyykzCmLExrMPVEa0sQnlQn90WTn/p3gI3djB5VOr4sj1bzMWbGff8qiR9YHgdnVQ\nYZ7WT4Buq3BKfgN1bMRlCtM8/gmEwY35rnrd+IL++woENxjm99ZprIbVfWdcDqt/\nJVGcJJ16TO/67AkzllV9QQ9oVrkEcLxQBtwNcVEpWpgonjDocHd0htvjMYUBEc3+\nx+5jv4wG5t7QiKaDkURrO6KlVfFWUn97yZ0+9qMSxW3XDmxBWXg=\n=zhOQ\n-----END PGP SIGNATURE-----", "payload": "tree 8242128230ababd385bb4fccf0de66c501f3d9e7\nparent 46f504543d47e18484a65251918a937147bb8a45\nparent 80a6b736acca2c109547e100d217fe5ca5f4ec30\nauthor kennytm <kennytm@gmail.com> 1540549502 +0800\ncommitter kennytm <kennytm@gmail.com> 1540566385 +0800\n\nRollup merge of #55271 - sinkuu:traversal_iter, r=matthewjasper\n\nUnimplement ExactSizeIterator for MIR traversing iterators\n\nIf `root` is not `START_BLOCK`, `basic_blocks().len() - visited` does not represent their exact size.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "html_url": "https://github.com/rust-lang/rust/commit/9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9111fab74df4e0f6f2b8bfb5936f3772ba59a960/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f504543d47e18484a65251918a937147bb8a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f504543d47e18484a65251918a937147bb8a45", "html_url": "https://github.com/rust-lang/rust/commit/46f504543d47e18484a65251918a937147bb8a45"}, {"sha": "80a6b736acca2c109547e100d217fe5ca5f4ec30", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a6b736acca2c109547e100d217fe5ca5f4ec30", "html_url": "https://github.com/rust-lang/rust/commit/80a6b736acca2c109547e100d217fe5ca5f4ec30"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "a1e2b7a06468d0994bf76868942b3aa352097097", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9111fab74df4e0f6f2b8bfb5936f3772ba59a960/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9111fab74df4e0f6f2b8bfb5936f3772ba59a960/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "patch": "@@ -34,6 +34,7 @@ pub struct Preorder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n+    root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Preorder<'a, 'tcx> {\n@@ -44,6 +45,7 @@ impl<'a, 'tcx> Preorder<'a, 'tcx> {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n             worklist,\n+            root_is_start_block: root == START_BLOCK,\n         }\n     }\n }\n@@ -75,15 +77,19 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+        let upper = self.mir.basic_blocks().len() - self.visited.count();\n \n-        // We will visit all remaining blocks exactly once.\n-        (remaining, Some(remaining))\n+        let lower = if self.root_is_start_block {\n+            // We will visit all remaining blocks exactly once.\n+            upper\n+        } else {\n+            self.worklist.len()\n+        };\n+\n+        (lower, Some(upper))\n     }\n }\n \n-impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n-\n /// Postorder traversal of a graph.\n ///\n /// Postorder traversal is when each node is visited after all of it's\n@@ -105,15 +111,17 @@ impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n pub struct Postorder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visited: BitSet<BasicBlock>,\n-    visit_stack: Vec<(BasicBlock, Successors<'a>)>\n+    visit_stack: Vec<(BasicBlock, Successors<'a>)>,\n+    root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {\n         let mut po = Postorder {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n-            visit_stack: Vec::new()\n+            visit_stack: Vec::new(),\n+            root_is_start_block: root == START_BLOCK,\n         };\n \n \n@@ -214,15 +222,19 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+        let upper = self.mir.basic_blocks().len() - self.visited.count();\n \n-        // We will visit all remaining blocks exactly once.\n-        (remaining, Some(remaining))\n+        let lower = if self.root_is_start_block {\n+            // We will visit all remaining blocks exactly once.\n+            upper\n+        } else {\n+            self.visit_stack.len()\n+        };\n+\n+        (lower, Some(upper))\n     }\n }\n \n-impl<'a, 'tcx> ExactSizeIterator for Postorder<'a, 'tcx> {}\n-\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal."}]}