{"sha": "356a37d8d1e9c62481970c36ef45fe7f4f936549", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmEzN2Q4ZDFlOWM2MjQ4MTk3MGMzNmVmNDVmZTdmNGY5MzY1NDk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-16T09:33:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-18T15:10:26Z"}, "message": "rustc: remove unused lifetimes.", "tree": {"sha": "75bb466932d2f3bae0a5657b0bf42bd378ff19c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75bb466932d2f3bae0a5657b0bf42bd378ff19c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356a37d8d1e9c62481970c36ef45fe7f4f936549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356a37d8d1e9c62481970c36ef45fe7f4f936549", "html_url": "https://github.com/rust-lang/rust/commit/356a37d8d1e9c62481970c36ef45fe7f4f936549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356a37d8d1e9c62481970c36ef45fe7f4f936549/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d0cb40908534beb9eb2b181f0210043e91caae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0cb40908534beb9eb2b181f0210043e91caae4", "html_url": "https://github.com/rust-lang/rust/commit/1d0cb40908534beb9eb2b181f0210043e91caae4"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "82b0e50b50c481b3f02e42acdbdc6a5084c77b97", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -204,7 +204,7 @@ macro_rules! define_dep_nodes {\n         impl DepNode {\n             #[allow(unreachable_code, non_snake_case)]\n             #[inline(always)]\n-            pub fn new<'a, 'tcx>(tcx: TyCtxt<'tcx>,\n+            pub fn new<'tcx>(tcx: TyCtxt<'tcx>,\n                                        dep: DepConstructor<'tcx>)\n                                        -> DepNode\n             {"}, {"sha": "dc6fa066071a200e1415fadeb52128010f1b990e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -352,7 +352,7 @@ impl IrMaps<'tcx> {\n     }\n }\n \n-fn visit_fn<'a, 'tcx>(\n+fn visit_fn<'tcx>(\n     ir: &mut IrMaps<'tcx>,\n     fk: FnKind<'tcx>,\n     decl: &'tcx hir::FnDecl,"}, {"sha": "645b6f418dcbddb963fe1f9c4cbdd463fbd94bc8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -690,7 +690,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// Evaluates the predicates in `predicates` recursively. Note that\n     /// this applies projections in the predicates, and therefore\n     /// is run within an inference probe.\n-    fn evaluate_predicates_recursively<'a, 'o, I>(\n+    fn evaluate_predicates_recursively<'o, I>(\n         &mut self,\n         stack: TraitObligationStackList<'o, 'tcx>,\n         predicates: I,"}, {"sha": "5349b7dbda597e661960a0fb4af143f03207e68b", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -505,7 +505,7 @@ impl<'a, 'tcx> DecoderWithPosition for CacheDecoder<'a, 'tcx> {\n \n // Decode something that was encoded with encode_tagged() and verify that the\n // tag matches and the correct amount of bytes was read.\n-fn decode_tagged<'a, 'tcx, D, T, V>(decoder: &mut D,\n+fn decode_tagged<D, T, V>(decoder: &mut D,\n                                     expected_tag: T)\n                                     -> Result<V, D::Error>\n     where T: Decodable + Eq + ::std::fmt::Debug,"}, {"sha": "1eb6e9a5283bd2e81ed564c06db4e3b5bd552b51", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -125,7 +125,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit<'a, 'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n         base::compile_codegen_unit(tcx, cgu_name);\n     }\n     fn target_machine_factory("}, {"sha": "414871be6116eeabc7259be6b90e6b0b5e6d6b12", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -44,7 +44,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit<'a, 'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n+    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "2daa8e3cb707d8de3b010071b6fd8685ab1024fd", "filename": "src/librustc_mir/hair/cx/to_ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fto_ref.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -8,31 +8,31 @@ pub trait ToRef {\n     fn to_ref(self) -> Self::Output;\n }\n \n-impl<'a, 'tcx> ToRef for &'tcx hir::Expr {\n+impl<'tcx> ToRef for &'tcx hir::Expr {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n         ExprRef::Hair(self)\n     }\n }\n \n-impl<'a, 'tcx> ToRef for &'tcx P<hir::Expr> {\n+impl<'tcx> ToRef for &'tcx P<hir::Expr> {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n         ExprRef::Hair(&**self)\n     }\n }\n \n-impl<'a, 'tcx> ToRef for Expr<'tcx> {\n+impl<'tcx> ToRef for Expr<'tcx> {\n     type Output = ExprRef<'tcx>;\n \n     fn to_ref(self) -> ExprRef<'tcx> {\n         ExprRef::Mirror(Box::new(self))\n     }\n }\n \n-impl<'a, 'tcx, T, U> ToRef for &'tcx Option<T>\n+impl<'tcx, T, U> ToRef for &'tcx Option<T>\n     where &'tcx T: ToRef<Output = U>\n {\n     type Output = Option<U>;\n@@ -42,7 +42,7 @@ impl<'a, 'tcx, T, U> ToRef for &'tcx Option<T>\n     }\n }\n \n-impl<'a, 'tcx, T, U> ToRef for &'tcx Vec<T>\n+impl<'tcx, T, U> ToRef for &'tcx Vec<T>\n     where &'tcx T: ToRef<Output = U>\n {\n     type Output = Vec<U>;\n@@ -52,7 +52,7 @@ impl<'a, 'tcx, T, U> ToRef for &'tcx Vec<T>\n     }\n }\n \n-impl<'a, 'tcx, T, U> ToRef for &'tcx P<[T]>\n+impl<'tcx, T, U> ToRef for &'tcx P<[T]>\n     where &'tcx T: ToRef<Output = U>\n {\n     type Output = Vec<U>;"}, {"sha": "e4cff5861ca50639af24c0e38fe0594e45c0789b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -983,7 +983,7 @@ enum MissingCtors<'tcx> {\n // (The split logic gives a performance win, because we always need to know if\n // the set is empty, but we rarely need the full set, and it can be expensive\n // to compute the full set.)\n-fn compute_missing_ctors<'a, 'tcx>(\n+fn compute_missing_ctors<'tcx>(\n     info: MissingCtorsInfo,\n     tcx: TyCtxt<'tcx>,\n     all_ctors: &Vec<Constructor<'tcx>>,\n@@ -1518,7 +1518,7 @@ fn should_treat_range_exhaustively(tcx: TyCtxt<'tcx>, ctor: &Constructor<'tcx>)\n /// boundaries for each interval range, sort them, then create constructors for each new interval\n /// between every pair of boundary points. (This essentially sums up to performing the intuitive\n /// merging operation depicted above.)\n-fn split_grouped_constructors<'p, 'a, 'tcx>(\n+fn split_grouped_constructors<'p, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ctors: Vec<Constructor<'tcx>>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n@@ -1596,7 +1596,7 @@ fn split_grouped_constructors<'p, 'a, 'tcx>(\n }\n \n /// Checks whether there exists any shared value in either `ctor` or `pat` by intersecting them.\n-fn constructor_intersects_pattern<'p, 'a, 'tcx>(\n+fn constructor_intersects_pattern<'p, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &'p Pattern<'tcx>,\n@@ -1686,7 +1686,7 @@ fn constructor_covered_by_range<'tcx>(\n     }\n }\n \n-fn patterns_for_variant<'p, 'a, 'tcx>(\n+fn patterns_for_variant<'p, 'tcx>(\n     subpatterns: &'p [FieldPattern<'tcx>],\n     wild_patterns: &[&'p Pattern<'tcx>])\n     -> SmallVec<[&'p Pattern<'tcx>; 2]>"}, {"sha": "acc786050a84e8508bf5ffb1c0c2828ebee94146", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356a37d8d1e9c62481970c36ef45fe7f4f936549/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=356a37d8d1e9c62481970c36ef45fe7f4f936549", "patch": "@@ -345,7 +345,7 @@ fn collect_roots<'tcx>(tcx: TyCtxt<'tcx>, mode: MonoItemCollectionMode) -> Vec<M\n }\n \n // Collect all monomorphized items reachable from `starting_point`\n-fn collect_items_rec<'a, 'tcx>(\n+fn collect_items_rec<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     starting_point: MonoItem<'tcx>,\n     visited: MTRef<'_, MTLock<FxHashSet<MonoItem<'tcx>>>>,"}]}