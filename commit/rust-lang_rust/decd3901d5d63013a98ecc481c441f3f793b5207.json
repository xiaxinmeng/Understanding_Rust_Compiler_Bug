{"sha": "decd3901d5d63013a98ecc481c441f3f793b5207", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlY2QzOTAxZDVkNjMwMTNhOThlY2M0ODFjNDQxZjNmNzkzYjUyMDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-17T06:45:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-18T21:07:35Z"}, "message": "core::comm: Modernize constructors to use `new`", "tree": {"sha": "37327a47db463003bcb8c5342fcecb04d56d1c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37327a47db463003bcb8c5342fcecb04d56d1c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decd3901d5d63013a98ecc481c441f3f793b5207", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decd3901d5d63013a98ecc481c441f3f793b5207", "html_url": "https://github.com/rust-lang/rust/commit/decd3901d5d63013a98ecc481c441f3f793b5207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decd3901d5d63013a98ecc481c441f3f793b5207/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc60d84507ba4d492889c9b702318346b5784e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc60d84507ba4d492889c9b702318346b5784e5c", "html_url": "https://github.com/rust-lang/rust/commit/bc60d84507ba4d492889c9b702318346b5784e5c"}], "stats": {"total": 146, "additions": 79, "deletions": 67}, "files": [{"sha": "bed696748306eb43c347797983c3e0e5cca79893", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -236,7 +236,7 @@ Instead we can use a `SharedChan`, a type that allows a single\n use core::comm::{stream, SharedChan};\n \n let (port, chan) = stream();\n-let chan = SharedChan(chan);\n+let chan = SharedChan::new(chan);\n \n for uint::range(0, 3) |init_val| {\n     // Create a new channel handle to distribute to the child task"}, {"sha": "7d78b84dc80059036d671df9697c260d6a2603bc", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -73,7 +73,7 @@ pub fn run(lib_path: ~str,\n \n \n     writeclose(pipe_in.out, input);\n-    let p = comm::PortSet();\n+    let p = comm::PortSet::new();\n     let ch = p.chan();\n     do task::spawn_sched(task::SingleThreaded) || {\n         let errput = readclose(pipe_err.in);"}, {"sha": "fc13463bd1c2af5e3f49fb5b5671282c3abddf77", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -19,6 +19,7 @@ use option::{Option, Some, None};\n use uint;\n use unstable;\n use vec;\n+use unstable::Exclusive;\n \n use pipes::{recv, try_recv, wait_many, peek, PacketHeader};\n \n@@ -218,13 +219,14 @@ pub struct PortSet<T> {\n     mut ports: ~[Port<T>],\n }\n \n-pub fn PortSet<T: Owned>() -> PortSet<T>{\n-    PortSet {\n-        ports: ~[]\n+pub impl<T: Owned> PortSet<T> {\n+\n+    fn new() -> PortSet<T> {\n+        PortSet {\n+            ports: ~[]\n+        }\n     }\n-}\n \n-pub impl<T: Owned> PortSet<T> {\n     fn add(&self, port: Port<T>) {\n         self.ports.push(port)\n     }\n@@ -279,12 +281,21 @@ impl<T: Owned> Peekable<T> for PortSet<T> {\n }\n \n /// A channel that can be shared between many senders.\n-pub type SharedChan<T> = unstable::Exclusive<Chan<T>>;\n+pub struct SharedChan<T> {\n+    ch: Exclusive<Chan<T>>\n+}\n+\n+impl<T: Owned> SharedChan<T> {\n+    /// Converts a `chan` into a `shared_chan`.\n+    pub fn new(c: Chan<T>) -> SharedChan<T> {\n+        SharedChan { ch: unstable::exclusive(c) }\n+    }\n+}\n \n impl<T: Owned> GenericChan<T> for SharedChan<T> {\n     fn send(&self, x: T) {\n         let mut xx = Some(x);\n-        do self.with_imm |chan| {\n+        do self.ch.with_imm |chan| {\n             let mut x = None;\n             x <-> xx;\n             chan.send(x.unwrap())\n@@ -295,17 +306,18 @@ impl<T: Owned> GenericChan<T> for SharedChan<T> {\n impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n     fn try_send(&self, x: T) -> bool {\n         let mut xx = Some(x);\n-        do self.with_imm |chan| {\n+        do self.ch.with_imm |chan| {\n             let mut x = None;\n             x <-> xx;\n             chan.try_send(x.unwrap())\n         }\n     }\n }\n \n-/// Converts a `chan` into a `shared_chan`.\n-pub fn SharedChan<T:Owned>(c: Chan<T>) -> SharedChan<T> {\n-    unstable::exclusive(c)\n+impl<T: Owned> ::clone::Clone for SharedChan<T> {\n+    fn clone(&self) -> SharedChan<T> {\n+        SharedChan { ch: self.ch.clone() }\n+    }\n }\n \n /*proto! oneshot ("}, {"sha": "8b18cc3c6968c81ead4be8143652c711a203d640", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -405,7 +405,7 @@ pub fn program_output(prog: &str, args: &[~str]) -> ProgramOutput {\n     // or the other. FIXME (#2625): Surely there's a much more\n     // clever way to do this.\n     let (p, ch) = stream();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n     let ch_clone = ch.clone();\n     do task::spawn_sched(task::SingleThreaded) {\n         let errput = readclose(pipe_err.in);"}, {"sha": "55546514e4fa5fc83a87a80c4b30924be39a1449", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -657,7 +657,7 @@ fn test_cant_dup_task_builder() {\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     let (po, ch) = stream();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n     do spawn_unlinked {\n         let ch = ch.clone();\n         do spawn_unlinked {\n@@ -881,7 +881,7 @@ fn test_spawn_sched_no_threads() {\n #[test]\n fn test_spawn_sched() {\n     let (po, ch) = stream::<()>();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n \n     fn f(i: int, ch: SharedChan<()>) {\n         let parent_sched_id = unsafe { rt::rust_get_sched_id() };"}, {"sha": "4e2174fd5d24c509eca5b0651d567384920ca681", "filename": "src/libcore/unstable/weak_task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibcore%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fweak_task.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -69,7 +69,7 @@ fn create_global_service() -> ~WeakTaskService {\n     debug!(\"creating global weak task service\");\n     let (port, chan) = stream::<ServiceMsg>();\n     let port = Cell(port);\n-    let chan = SharedChan(chan);\n+    let chan = SharedChan::new(chan);\n     let chan_clone = chan.clone();\n \n     do task().unlinked().spawn {"}, {"sha": "0e242805e13aeccff60ac4bdfddf0ee565c483d4", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -307,7 +307,7 @@ bug and need to present an error.\n pub fn monitor(+f: ~fn(diagnostic::Emitter)) {\n     use core::comm::*;\n     let (p, ch) = stream();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n     let ch_capture = ch.clone();\n     match do task::try || {\n         let ch = ch_capture.clone();"}, {"sha": "c4c81b5ec2c70ed80ec91d06d25b78e87b28e24e", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -69,7 +69,7 @@ fn run<T>(owner: SrvOwner<T>, source: ~str, parse: Parser) -> T {\n     }\n \n     let srv_ = Srv {\n-        ch: SharedChan(ch)\n+        ch: SharedChan::new(ch)\n     };\n \n     let res = owner(srv_.clone());"}, {"sha": "13f598ce707810b4dde6312a11b543831f6db0d3", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -232,7 +232,7 @@ fn write_file(path: &Path, s: ~str) {\n pub fn future_writer_factory(\n ) -> (WriterFactory, Port<(doc::Page, ~str)>) {\n     let (markdown_po, markdown_ch) = stream();\n-    let markdown_ch = SharedChan(markdown_ch);\n+    let markdown_ch = SharedChan::new(markdown_ch);\n     let writer_factory: WriterFactory = |page| {\n         let (writer_po, writer_ch) = comm::stream();\n         let markdown_ch = markdown_ch.clone();"}, {"sha": "93e7d8c808cdac087a50bb312c1c1a78ca6a707f", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -50,7 +50,7 @@ pub fn run(\n \n     let (result_port, result_chan) = stream();\n     let (page_port, page_chan) = stream();\n-    let page_chan = SharedChan(page_chan);\n+    let page_chan = SharedChan::new(page_chan);\n     do task::spawn {\n         result_chan.send(make_doc_from_pages(&page_port));\n     };"}, {"sha": "8abe0262314b5704d37fbea0477d13dce4fc8f00", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -499,7 +499,7 @@ mod tests {\n         let (p, c) = comm::stream();\n \n         do task::spawn() || {\n-            let p = comm::PortSet();\n+            let p = comm::PortSet::new();\n             c.send(p.chan());\n \n             let arc_v = p.recv();"}, {"sha": "e58b17b83218f035dfe56fb058bb8512f9f2343e", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -113,7 +113,7 @@ enum IpGetAddrErr {\n pub fn get_addr(node: &str, iotask: &iotask)\n     -> result::Result<~[IpAddr], IpGetAddrErr> {\n     let (output_po, output_ch) = stream();\n-    let mut output_ch = Some(SharedChan(output_ch));\n+    let mut output_ch = Some(SharedChan::new(output_ch));\n     do str::as_buf(node) |node_ptr, len| {\n         let output_ch = output_ch.swap_unwrap();\n         debug!(\"slice len %?\", len);"}, {"sha": "6bf97843fa1787cbfb73b406a9d5d12469ce8f6a", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -150,16 +150,16 @@ pub fn connect(input_ip: ip::IpAddr, port: uint,\n     -> result::Result<TcpSocket, TcpConnectErrData> {\n     unsafe {\n         let (result_po, result_ch) = stream::<ConnAttempt>();\n-        let result_ch = SharedChan(result_ch);\n+        let result_ch = SharedChan::new(result_ch);\n         let (closed_signal_po, closed_signal_ch) = stream::<()>();\n-        let closed_signal_ch = SharedChan(closed_signal_ch);\n+        let closed_signal_ch = SharedChan::new(closed_signal_ch);\n         let conn_data = ConnectReqData {\n             result_ch: result_ch,\n             closed_signal_ch: closed_signal_ch\n         };\n         let conn_data_ptr = ptr::addr_of(&conn_data);\n         let (reader_po, reader_ch) = stream::<Result<~[u8], TcpErrData>>();\n-        let reader_ch = SharedChan(reader_ch);\n+        let reader_ch = SharedChan::new(reader_ch);\n         let stream_handle_ptr = malloc_uv_tcp_t();\n         *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) = uv::ll::tcp_t();\n         let socket_data = @TcpSocketData {\n@@ -517,7 +517,7 @@ pub fn accept(new_conn: TcpNewConnection)\n                     server_handle_ptr) as *TcpListenFcData;\n                 let (reader_po, reader_ch) = stream::<\n                     Result<~[u8], TcpErrData>>();\n-                let reader_ch = SharedChan(reader_ch);\n+                let reader_ch = SharedChan::new(reader_ch);\n                 let iotask = &(*server_data_ptr).iotask;\n                 let stream_handle_ptr = malloc_uv_tcp_t();\n                 *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) =\n@@ -537,7 +537,7 @@ pub fn accept(new_conn: TcpNewConnection)\n                     (*client_socket_data_ptr).stream_handle_ptr;\n \n                 let (result_po, result_ch) = stream::<Option<TcpErrData>>();\n-                let result_ch = SharedChan(result_ch);\n+                let result_ch = SharedChan::new(result_ch);\n \n                 // UNSAFE LIBUV INTERACTION BEGIN\n                 // .. normally this happens within the context of\n@@ -646,9 +646,9 @@ fn listen_common(host_ip: ip::IpAddr,\n                  on_connect_cb: ~fn(*uv::ll::uv_tcp_t))\n               -> result::Result<(), TcpListenErrData> {\n     let (stream_closed_po, stream_closed_ch) = stream::<()>();\n-    let stream_closed_ch = SharedChan(stream_closed_ch);\n+    let stream_closed_ch = SharedChan::new(stream_closed_ch);\n     let (kill_po, kill_ch) = stream::<Option<TcpErrData>>();\n-    let kill_ch = SharedChan(kill_ch);\n+    let kill_ch = SharedChan::new(kill_ch);\n     let server_stream = uv::ll::tcp_t();\n     let server_stream_ptr = ptr::addr_of(&server_stream);\n     let server_data: TcpListenFcData = TcpListenFcData {\n@@ -997,7 +997,7 @@ impl io::Writer for TcpSocketBuf {\n fn tear_down_socket_data(socket_data: @TcpSocketData) {\n     unsafe {\n         let (closed_po, closed_ch) = stream::<()>();\n-        let closed_ch = SharedChan(closed_ch);\n+        let closed_ch = SharedChan::new(closed_ch);\n         let close_data = TcpSocketCloseData {\n             closed_ch: closed_ch\n         };\n@@ -1147,7 +1147,7 @@ fn write_common_impl(socket_data_ptr: *TcpSocketData,\n             vec::len(raw_write_data)) ];\n         let write_buf_vec_ptr = ptr::addr_of(&write_buf_vec);\n         let (result_po, result_ch) = stream::<TcpWriteResult>();\n-        let result_ch = SharedChan(result_ch);\n+        let result_ch = SharedChan::new(result_ch);\n         let write_data = WriteReqData {\n             result_ch: result_ch\n         };\n@@ -1554,7 +1554,7 @@ mod test {\n         let (server_result_po, server_result_ch) = stream::<~str>();\n \n         let (cont_po, cont_ch) = stream::<()>();\n-        let cont_ch = SharedChan(cont_ch);\n+        let cont_ch = SharedChan::new(cont_ch);\n         // server\n         let hl_loop_clone = hl_loop.clone();\n         do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -1592,7 +1592,7 @@ mod test {\n         let expected_resp = ~\"pong\";\n \n         let (cont_po, cont_ch) = stream::<()>();\n-        let cont_ch = SharedChan(cont_ch);\n+        let cont_ch = SharedChan::new(cont_ch);\n         // server\n         let hl_loop_clone = hl_loop.clone();\n         do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -1652,7 +1652,7 @@ mod test {\n         let expected_resp = ~\"pong\";\n \n         let (cont_po, cont_ch) = stream::<()>();\n-        let cont_ch = SharedChan(cont_ch);\n+        let cont_ch = SharedChan::new(cont_ch);\n         // server\n         let hl_loop_clone = hl_loop.clone();\n         do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -1717,7 +1717,7 @@ mod test {\n         let (server_result_po, server_result_ch) = stream::<~str>();\n \n         let (cont_po, cont_ch) = stream::<()>();\n-        let cont_ch = SharedChan(cont_ch);\n+        let cont_ch = SharedChan::new(cont_ch);\n         // server\n         let iotask_clone = iotask.clone();\n         do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -1764,7 +1764,7 @@ mod test {\n         let expected_resp = ~\"A string\\nwith multiple lines\\n\";\n \n         let (cont_po, cont_ch) = stream::<()>();\n-        let cont_ch = SharedChan(cont_ch);\n+        let cont_ch = SharedChan::new(cont_ch);\n         // server\n         let hl_loop_clone = hl_loop.clone();\n         do task::spawn_sched(task::ManualThreads(1u)) {\n@@ -1813,7 +1813,7 @@ mod test {\n                           cont_ch: SharedChan<()>,\n                           iotask: &IoTask) -> ~str {\n         let (server_po, server_ch) = stream::<~str>();\n-        let server_ch = SharedChan(server_ch);\n+        let server_ch = SharedChan::new(server_ch);\n         let server_ip_addr = ip::v4::parse_addr(server_ip);\n         let listen_result = listen(server_ip_addr, server_port, 128,\n                                    iotask,"}, {"sha": "4ccbf207170e9e58ff0d1b658e49ff361f6f0dc0", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -446,7 +446,7 @@ fn run_tests(opts: &TestOpts,\n     let mut pending = 0;\n \n     let (p, ch) = stream();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n \n     while pending > 0 || !remaining.is_empty() {\n         while pending < concurrency && !remaining.is_empty() {\n@@ -797,7 +797,7 @@ mod tests {\n             testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n-        let ch = SharedChan(ch);\n+        let ch = SharedChan::new(ch);\n         run_test(false, desc, ch);\n         let (_, res) = p.recv();\n         assert!(res != TrOk);\n@@ -815,7 +815,7 @@ mod tests {\n             testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n-        let ch = SharedChan(ch);\n+        let ch = SharedChan::new(ch);\n         run_test(false, desc, ch);\n         let (_, res) = p.recv();\n         assert!(res == TrIgnored);\n@@ -834,7 +834,7 @@ mod tests {\n             testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n-        let ch = SharedChan(ch);\n+        let ch = SharedChan::new(ch);\n         run_test(false, desc, ch);\n         let (_, res) = p.recv();\n         assert!(res == TrOk);\n@@ -852,7 +852,7 @@ mod tests {\n             testfn: DynTestFn(|| f()),\n         };\n         let (p, ch) = stream();\n-        let ch = SharedChan(ch);\n+        let ch = SharedChan::new(ch);\n         run_test(false, desc, ch);\n         let (_, res) = p.recv();\n         assert!(res == TrFailed);"}, {"sha": "e862fe6077cb69e37101e5cdb8103443dc182c60", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -43,7 +43,7 @@ pub fn delayed_send<T:Owned>(iotask: &IoTask,\n                               ch: &Chan<T>,\n                               val: T) {\n     let (timer_done_po, timer_done_ch) = stream::<()>();\n-    let timer_done_ch = SharedChan(timer_done_ch);\n+    let timer_done_ch = SharedChan::new(timer_done_ch);\n     let timer = uv::ll::timer_t();\n     let timer_ptr = ptr::addr_of(&timer);\n     do iotask::interact(iotask) |loop_ptr| {\n@@ -199,7 +199,7 @@ mod test {\n     #[test]\n     fn test_gl_timer_sleep_stress2() {\n         let (po, ch) = stream();\n-        let ch = SharedChan(ch);\n+        let ch = SharedChan::new(ch);\n         let hl_loop = &uv::global_loop::get();\n \n         let repeat = 20u;"}, {"sha": "ac762d7d801fe283fe038213d3d053a40c60c6b7", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -211,7 +211,7 @@ mod test {\n     #[ignore]\n     fn test_stress_gl_uv_global_loop_high_level_global_timer() {\n         let (exit_po, exit_ch) = stream::<()>();\n-        let exit_ch = SharedChan(exit_ch);\n+        let exit_ch = SharedChan::new(exit_ch);\n         let cycles = 5000u;\n         for iter::repeat(cycles) {\n             let exit_ch_clone = exit_ch.clone();"}, {"sha": "c7a78f38919236218cc8e3ab37f81d31ba1a9b18", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -126,7 +126,7 @@ fn run_loop(iotask_ch: &Chan<IoTask>) {\n         // while we dwell in the I/O loop\n         let iotask = IoTask{\n             async_handle: async_handle,\n-            op_chan: SharedChan(msg_ch)\n+            op_chan: SharedChan::new(msg_ch)\n         };\n         iotask_ch.send(iotask);\n \n@@ -230,7 +230,7 @@ fn impl_uv_iotask_async(iotask: &IoTask) {\n         let (exit_po, exit_ch) = stream::<()>();\n         let ah_data = AhData {\n             iotask: iotask.clone(),\n-            exit_ch: SharedChan(exit_ch)\n+            exit_ch: SharedChan::new(exit_ch)\n         };\n         let ah_data_ptr: *AhData = unsafe {\n             ptr::to_unsafe_ptr(&ah_data)\n@@ -293,7 +293,7 @@ fn test_uv_iotask_async() {\n         // loop lives until, at least, all of the\n         // impl_uv_hl_async() runs have been called, at least.\n         let (work_exit_po, work_exit_ch) = stream::<()>();\n-        let work_exit_ch = SharedChan(work_exit_ch);\n+        let work_exit_ch = SharedChan::new(work_exit_ch);\n         for iter::repeat(7u) {\n             let iotask_clone = iotask.clone();\n             let work_exit_ch_clone = work_exit_ch.clone();"}, {"sha": "ab3074e49dd680ed86d663bae802673a6299712c", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -1717,12 +1717,12 @@ mod test {\n             let kill_server_msg = ~\"does a dog have buddha nature?\";\n             let server_resp_msg = ~\"mu!\";\n             let (client_port, client_chan) = stream::<~str>();\n-            let client_chan = SharedChan(client_chan);\n+            let client_chan = SharedChan::new(client_chan);\n             let (server_port, server_chan) = stream::<~str>();\n-            let server_chan = SharedChan(server_chan);\n+            let server_chan = SharedChan::new(server_chan);\n \n             let (continue_port, continue_chan) = stream::<bool>();\n-            let continue_chan = SharedChan(continue_chan);\n+            let continue_chan = SharedChan::new(continue_chan);\n \n             let kill_server_msg_copy = copy kill_server_msg;\n             let server_resp_msg_copy = copy server_resp_msg;"}, {"sha": "dbfd38ccf2624c311e9e7f648dfe5aeb75644745", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -58,7 +58,7 @@ fn run(args: &[~str]) {\n     let (from_child, to_parent) = comm::stream();\n     let (from_parent, to_child) = comm::stream();\n \n-    let to_child = SharedChan(to_child);\n+    let to_child = SharedChan::new(to_child);\n \n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();"}, {"sha": "492b13f570869d69e3d20a41b44392f9c37ab04b", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -53,7 +53,7 @@ fn server(requests: PortSet<request>, responses: Chan<uint>) {\n fn run(args: &[~str]) {\n     let (from_child, to_parent) = stream();\n     let (from_parent_, to_child) = stream();\n-    let from_parent = PortSet();\n+    let from_parent = PortSet::new();\n     from_parent.add(from_parent_);\n \n     let size = uint::from_str(args[1]).get();"}, {"sha": "9dad24646ded224c02d4bcb14957ca61545c3f3b", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -137,9 +137,9 @@ fn rendezvous(nn: uint, set: ~[color]) {\n \n     // these ports will allow us to hear from the creatures\n     let (from_creatures, to_rendezvous) = stream::<CreatureInfo>();\n-    let to_rendezvous = SharedChan(to_rendezvous);\n+    let to_rendezvous = SharedChan::new(to_rendezvous);\n     let (from_creatures_log, to_rendezvous_log) = stream::<~str>();\n-    let to_rendezvous_log = SharedChan(to_rendezvous_log);\n+    let to_rendezvous_log = SharedChan::new(to_rendezvous_log);\n \n     // these channels will be passed to the creatures so they can talk to us\n "}, {"sha": "4909d05b35b165a58d53a30051fe700e99f749e2", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -173,7 +173,7 @@ fn main() {\n     else { uint::from_str(args[1]).get() };\n \n     let (pport, pchan) = comm::stream();\n-    let pchan = comm::SharedChan(pchan);\n+    let pchan = comm::SharedChan::new(pchan);\n     for uint::range(0_u, size) |j| {\n         let cchan = pchan.clone();\n         do task::spawn { cchan.send(chanmb(j, size, depth)) };"}, {"sha": "f7bd779a8d89e7de7d277eec9536449cdb8dee62", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -38,7 +38,7 @@ fn fib(n: int) -> int {\n         } else if n <= 2 {\n             c.send(1);\n         } else {\n-            let p = PortSet();\n+            let p = PortSet::new();\n             let ch = p.chan();\n             task::spawn(|| pfib(ch, n - 1) );\n             let ch = p.chan();"}, {"sha": "90c9d6b33e4adc657a150501c52a374f9123ee34", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -26,7 +26,7 @@ use core::comm::*;\n \n fn grandchild_group(num_tasks: uint) {\n     let (po, ch) = stream();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n \n     for num_tasks.times {\n         let ch = ch.clone();"}, {"sha": "bca4cbafc6cc4fb3cc31e798c1bcc9484a7f4485", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -60,7 +60,7 @@ mod map_reduce {\n \n     pub fn map_reduce(inputs: ~[~str]) {\n         let (ctrl_port, ctrl_chan) = stream();\n-        let ctrl_chan = SharedChan(ctrl_chan);\n+        let ctrl_chan = SharedChan::new(ctrl_chan);\n \n         // This task becomes the master control task. It spawns others\n         // to do the rest."}, {"sha": "8b4855deaa5631b1ba49bd42204ef067d56e60de", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n pub fn main() {\n-    let po = comm::PortSet();\n+    let po = comm::PortSet::new();\n \n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;"}, {"sha": "cf06deb1923a6432b42ad8456978ac2ba863fada", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -32,7 +32,7 @@ fn test00() {\n \n     debug!(\"Creating tasks\");\n \n-    let po = comm::PortSet();\n+    let po = comm::PortSet::new();\n \n     let mut i: int = 0;\n "}, {"sha": "67ef5fb19052656ac4af8de77eb0e2c12d9fdcc0", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -15,7 +15,7 @@ pub fn main() { test00(); }\n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::PortSet();\n+    let p = comm::PortSet::new();\n     let c0 = p.chan();\n     let c1 = p.chan();\n     let c2 = p.chan();"}, {"sha": "81b498885255979321476fa0816927aea2cce6a1", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -23,7 +23,7 @@ fn test00_start(c: comm::Chan<int>, start: int, number_of_messages: int) {\n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::PortSet();\n+    let p = comm::PortSet::new();\n     let number_of_messages: int = 10;\n \n     let c = p.chan();"}, {"sha": "a3c8dc554a663c0ba6b7cadb201214ba9edffc1a", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -22,7 +22,7 @@ fn test00_start(c: &comm::Chan<int>, number_of_messages: int) {\n fn test00() {\n     let r: int = 0;\n     let mut sum: int = 0;\n-    let p = comm::PortSet();\n+    let p = comm::PortSet::new();\n     let number_of_messages: int = 10;\n     let ch = p.chan();\n "}, {"sha": "df1c8708acd11426577e6cdcdb37c15cb621dcac", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -16,7 +16,7 @@ fn child(c: &SharedChan<~uint>, i: uint) {\n \n pub fn main() {\n     let (p, ch) = stream();\n-    let ch = SharedChan(ch);\n+    let ch = SharedChan::new(ch);\n     let n = 100u;\n     let mut expected = 0u;\n     for uint::range(0u, n) |i| {"}, {"sha": "4c7b2e637024226af563d9ef52c42bc44a42c389", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decd3901d5d63013a98ecc481c441f3f793b5207/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=decd3901d5d63013a98ecc481c441f3f793b5207", "patch": "@@ -39,7 +39,7 @@ fn f(c: SharedChan<bool>) {\n \n pub fn main() {\n     let (p, c) = stream();\n-    let c = SharedChan(c);\n+    let c = SharedChan::new(c);\n     task::spawn_unlinked(|| f(c.clone()) );\n     error!(\"hiiiiiiiii\");\n     assert!(p.recv());"}]}