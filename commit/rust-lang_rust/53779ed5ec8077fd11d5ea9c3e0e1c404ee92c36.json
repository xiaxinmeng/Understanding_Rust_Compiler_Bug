{"sha": "53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzc5ZWQ1ZWM4MDc3ZmQxMWQ1ZWE5YzNlMGUxYzQwNGVlOTJjMzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-18T15:38:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-21T00:17:19Z"}, "message": "Check associated type bindings for privacy and stability", "tree": {"sha": "0f1d96b4b10c57ae64bd20d37d4e48e80c377b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1d96b4b10c57ae64bd20d37d4e48e80c377b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "html_url": "https://github.com/rust-lang/rust/commit/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dcd26a6df4bb932cd94404a6c941d84a3d1d851", "html_url": "https://github.com/rust-lang/rust/commit/8dcd26a6df4bb932cd94404a6c941d84a3d1d851"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "ba0e79168922e53fc5941708fdf6e82a007523de", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "patch": "@@ -370,7 +370,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         poly_projections.extend(assoc_bindings.iter().filter_map(|binding| {\n             // specify type to assert that error was already reported in Err case:\n             let predicate: Result<_, ErrorReported> =\n-                self.ast_type_binding_to_poly_projection_predicate(poly_trait_ref, binding);\n+                self.ast_type_binding_to_poly_projection_predicate(trait_ref.ref_id, poly_trait_ref,\n+                                                                   binding);\n             predicate.ok() // ok to ignore Err() because ErrorReported (see above)\n         }));\n \n@@ -442,6 +443,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     fn ast_type_binding_to_poly_projection_predicate(\n         &self,\n+        ref_id: ast::NodeId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n@@ -494,30 +496,30 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 .emit();\n         }\n \n-        // Simple case: X is defined in the current trait.\n-        if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n-            return Ok(trait_ref.map_bound(|trait_ref| {\n-                ty::ProjectionPredicate {\n-                    projection_ty: ty::ProjectionTy::from_ref_and_name(\n-                        tcx,\n-                        trait_ref,\n-                        binding.item_name,\n-                    ),\n-                    ty: binding.ty,\n-                }\n-            }));\n+        let candidate = if self.trait_defines_associated_type_named(trait_ref.def_id(),\n+                                                                    binding.item_name) {\n+            // Simple case: X is defined in the current trait.\n+            Ok(trait_ref)\n+        } else {\n+            // Otherwise, we have to walk through the supertraits to find\n+            // those that do.\n+            let candidates = traits::supertraits(tcx, trait_ref).filter(|r| {\n+                self.trait_defines_associated_type_named(r.def_id(), binding.item_name)\n+            });\n+            self.one_bound_for_assoc_type(candidates, &trait_ref.to_string(),\n+                                          binding.item_name, binding.span)\n+        }?;\n+\n+        let (assoc_ident, def_scope) = tcx.adjust(binding.item_name, candidate.def_id(), ref_id);\n+        let assoc_ty = tcx.associated_items(candidate.def_id()).find(|i| {\n+            i.kind == ty::AssociatedKind::Type && i.name.to_ident() == assoc_ident\n+        }).expect(\"missing associated type\");\n+\n+        if !assoc_ty.vis.is_accessible_from(def_scope, tcx) {\n+            let msg = format!(\"associated type `{}` is private\", binding.item_name);\n+            tcx.sess.span_err(binding.span, &msg);\n         }\n-\n-        // Otherwise, we have to walk through the supertraits to find\n-        // those that do.\n-        let candidates =\n-            traits::supertraits(tcx, trait_ref.clone())\n-            .filter(|r| self.trait_defines_associated_type_named(r.def_id(), binding.item_name));\n-\n-        let candidate = self.one_bound_for_assoc_type(candidates,\n-                                                      &trait_ref.to_string(),\n-                                                      binding.item_name,\n-                                                      binding.span)?;\n+        tcx.check_stability(assoc_ty.def_id, ref_id, binding.span);\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {"}, {"sha": "f2defc1d421b09f8e587411f8b03d0d8ceb0dd64", "filename": "src/test/compile-fail/lint-stability-deprecated.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability-deprecated.rs?ref=53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "patch": "@@ -108,6 +108,11 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n         //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated': text\n+        type A = TraitWithAssociatedTypes<\n+            TypeUnstable = u8,\n+            TypeDeprecated = u16,\n+            //~^ WARN use of deprecated item 'lint_stability::TraitWithAssociatedTypes::TypeDeprecated'\n+        >;\n \n         let _ = DeprecatedStruct { //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct'\n             i: 0 //~ WARN use of deprecated item 'lint_stability::DeprecatedStruct::i'"}, {"sha": "49a52204295e505aa3e6b8762c6c7a8ce02974fe", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "patch": "@@ -96,6 +96,10 @@ mod cross_crate {\n         struct S1<T: TraitWithAssociatedTypes>(T::TypeUnstable);\n         //~^ ERROR use of unstable library feature\n         struct S2<T: TraitWithAssociatedTypes>(T::TypeDeprecated);\n+        type A = TraitWithAssociatedTypes<\n+            TypeUnstable = u8, //~ ERROR use of unstable library feature\n+            TypeDeprecated = u16,\n+        >;\n \n         let _ = DeprecatedStruct {\n             i: 0"}, {"sha": "be0f7dd4e1cd73f34d35a8b2c7f1cbf3443eda21", "filename": "src/test/compile-fail/trait-item-privacy.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs?ref=53779ed5ec8077fd11d5ea9c3e0e1c404ee92c36", "patch": "@@ -131,6 +131,16 @@ fn check_assoc_ty<T: assoc_ty::C>() {\n     let _: T::A; //~ ERROR associated type `A` is private\n     let _: T::B; // OK\n     let _: T::C; // OK\n+\n+    // Associated types, bindings\n+    let _: assoc_ty::B<\n+        B = u8, // OK\n+    >;\n+    let _: C<\n+        A = u8, //~ ERROR associated type `A` is private\n+        B = u8, // OK\n+        C = u8, // OK\n+    >;\n }\n \n fn main() {}"}]}