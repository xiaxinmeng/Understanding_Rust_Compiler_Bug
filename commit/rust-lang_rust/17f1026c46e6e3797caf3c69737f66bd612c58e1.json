{"sha": "17f1026c46e6e3797caf3c69737f66bd612c58e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZjEwMjZjNDZlNmUzNzk3Y2FmM2M2OTczN2Y2NmJkNjEyYzU4ZTE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T13:45:16Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T07:59:54Z"}, "message": "Improve string helpers functions", "tree": {"sha": "a465868cec992815df9f7fd8d06bed8df4daf746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a465868cec992815df9f7fd8d06bed8df4daf746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17f1026c46e6e3797caf3c69737f66bd612c58e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17f1026c46e6e3797caf3c69737f66bd612c58e1", "html_url": "https://github.com/rust-lang/rust/commit/17f1026c46e6e3797caf3c69737f66bd612c58e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17f1026c46e6e3797caf3c69737f66bd612c58e1/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/21dd704b6b28374ea7bd2d1e13469be6807c4a8d", "html_url": "https://github.com/rust-lang/rust/commit/21dd704b6b28374ea7bd2d1e13469be6807c4a8d"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "953d0276fbf038be422a5eea2c64359189d25ef4", "filename": "crates/hir_ty/src/diagnostics/decl_check/str_helpers.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17f1026c46e6e3797caf3c69737f66bd612c58e1/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fstr_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f1026c46e6e3797caf3c69737f66bd612c58e1/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fstr_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check%2Fstr_helpers.rs?ref=17f1026c46e6e3797caf3c69737f66bd612c58e1", "patch": "@@ -61,7 +61,9 @@ fn is_upper_snake_case(ident: &str) -> bool {\n \n fn is_camel_case(ident: &str) -> bool {\n     // We assume that the string is either snake case or camel case.\n-    ident.chars().all(|c| c != '_')\n+    // `_` is allowed only at the beginning or in the end of identifier, not between characters.\n+    ident.trim_matches('_').chars().all(|c| c != '_')\n+        && ident.chars().find(|c| c.is_alphabetic()).map(|c| c.is_ascii_uppercase()).unwrap_or(true)\n }\n \n #[cfg(test)]\n@@ -80,13 +82,18 @@ mod tests {\n     fn test_to_lower_snake_case() {\n         check(to_lower_snake_case, \"lower_snake_case\", expect![[\"\"]]);\n         check(to_lower_snake_case, \"UPPER_SNAKE_CASE\", expect![[\"upper_snake_case\"]]);\n+        check(to_lower_snake_case, \"Weird_Case\", expect![[\"weird_case\"]]);\n         check(to_lower_snake_case, \"CamelCase\", expect![[\"camel_case\"]]);\n     }\n \n     #[test]\n     fn test_to_camel_case() {\n         check(to_camel_case, \"CamelCase\", expect![[\"\"]]);\n+        check(to_camel_case, \"CamelCase_\", expect![[\"\"]]);\n+        check(to_camel_case, \"_CamelCase\", expect![[\"\"]]);\n         check(to_camel_case, \"lower_snake_case\", expect![[\"LowerSnakeCase\"]]);\n         check(to_camel_case, \"UPPER_SNAKE_CASE\", expect![[\"UpperSnakeCase\"]]);\n+        check(to_camel_case, \"Weird_Case\", expect![[\"WeirdCase\"]]);\n+        check(to_camel_case, \"name\", expect![[\"Name\"]]);\n     }\n }"}, {"sha": "522a9c1abdf385b5df0ead8a42373d303d016856", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17f1026c46e6e3797caf3c69737f66bd612c58e1/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f1026c46e6e3797caf3c69737f66bd612c58e1/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=17f1026c46e6e3797caf3c69737f66bd612c58e1", "patch": "@@ -32,8 +32,12 @@ pub fn to_lower_snake_case(s: &str) -> String {\n     let mut buf = String::with_capacity(s.len());\n     let mut prev = false;\n     for c in s.chars() {\n+        // `&& prev` is required to not insert `_` before the first symbol.\n         if c.is_ascii_uppercase() && prev {\n-            buf.push('_')\n+            // This check is required to not translate `Weird_Case` into `weird__case`.\n+            if buf.chars().last() != Some('_') {\n+                buf.push('_')\n+            }\n         }\n         prev = true;\n "}]}