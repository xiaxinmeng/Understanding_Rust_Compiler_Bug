{"sha": "f15813d086605775514210762ccfd61e21c25599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNTgxM2QwODY2MDU3NzU1MTQyMTA3NjJjY2ZkNjFlMjFjMjU1OTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T12:40:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T12:40:42Z"}, "message": "Update comments", "tree": {"sha": "09e7275e19fde913eb470ac408354e2ea7851e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e7275e19fde913eb470ac408354e2ea7851e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15813d086605775514210762ccfd61e21c25599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15813d086605775514210762ccfd61e21c25599", "html_url": "https://github.com/rust-lang/rust/commit/f15813d086605775514210762ccfd61e21c25599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15813d086605775514210762ccfd61e21c25599/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5138eba0110070a59754c6eb1b876dd031ca64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5138eba0110070a59754c6eb1b876dd031ca64", "html_url": "https://github.com/rust-lang/rust/commit/ea5138eba0110070a59754c6eb1b876dd031ca64"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "e44211da4a7bb4cafc94ea5c93cecfe3d55f54f1", "filename": "src/librustc/middle/infer/region_inference/README.md", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f15813d086605775514210762ccfd61e21c25599/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f15813d086605775514210762ccfd61e21c25599/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2FREADME.md?ref=f15813d086605775514210762ccfd61e21c25599", "patch": "@@ -274,36 +274,36 @@ closure:\n    types of all its upvars must outlive `'r`.\n 2. Parameters must outlive the region of any fn that they are passed to.\n \n-Therefore, we can -- sort of -- assume that when we are asked to\n-compare a region `'a` from a closure with a region `'b` from the fn\n-that encloses it, in fact `'b` is the larger region. And that is\n-precisely what we do: when building the region hierarchy, each region\n-lives in its own distinct subtree, but if we are asked to compute the\n-`LUB(r1, r2)` of two regions, and those regions are in disjoint\n-subtrees, we compare the lexical nesting of the two regions.\n-\n-*Ideas for improving the situation:* The correct argument here is\n-subtle and a bit hand-wavy. The ideal, as stated earlier, would be to\n-model things in such a way that it corresponds more closely to the\n-desugared code. The best approach for doing this is a bit unclear: it\n-may in fact be possible to *actually* desugar before we start, but I\n-don't think so. The main option that I've been thinking through is\n-imposing a \"view shift\" as we enter the fn body, so that regions\n-appearing in the types of fn parameters and upvars are translated from\n-being regions in the outer fn into free region parameters, just as\n-they would be if we applied the desugaring. The challenge here is that\n-type inference may not have fully run, so the types may not be fully\n-known: we could probably do this translation lazilly, as type\n-variables are instantiated. We would also have to apply a kind of\n-inverse translation to the return value. This would be a good idea\n-anyway, as right now it is possible for free regions instantiated\n-within the closure to leak into the parent: this currently leads to\n-type errors, since those regions cannot outlive any expressions within\n-the parent hierarchy. Much like the current handling of closures,\n-there are no known cases where this leads to a type-checking accepting\n-incorrect code (though it sometimes rejects what might be considered\n-correct code; see rust-lang/rust#22557), but it still doesn't feel\n-like the right approach.\n+Therefore, we can -- sort of -- assume that any region from an\n+enclosing fns is larger than any region from one of its enclosed\n+fn. And that is precisely what we do: when building the region\n+hierarchy, each region lives in its own distinct subtree, but if we\n+are asked to compute the `LUB(r1, r2)` of two regions, and those\n+regions are in disjoint subtrees, we compare the lexical nesting of\n+the two regions.\n+\n+*Ideas for improving the situation:* (FIXME #3696) The correctness\n+argument here is subtle and a bit hand-wavy. The ideal, as stated\n+earlier, would be to model things in such a way that it corresponds\n+more closely to the desugared code. The best approach for doing this\n+is a bit unclear: it may in fact be possible to *actually* desugar\n+before we start, but I don't think so. The main option that I've been\n+thinking through is imposing a \"view shift\" as we enter the fn body,\n+so that regions appearing in the types of fn parameters and upvars are\n+translated from being regions in the outer fn into free region\n+parameters, just as they would be if we applied the desugaring. The\n+challenge here is that type inference may not have fully run, so the\n+types may not be fully known: we could probably do this translation\n+lazilly, as type variables are instantiated. We would also have to\n+apply a kind of inverse translation to the return value. This would be\n+a good idea anyway, as right now it is possible for free regions\n+instantiated within the closure to leak into the parent: this\n+currently leads to type errors, since those regions cannot outlive any\n+expressions within the parent hierarchy. Much like the current\n+handling of closures, there are no known cases where this leads to a\n+type-checking accepting incorrect code (though it sometimes rejects\n+what might be considered correct code; see rust-lang/rust#22557), but\n+it still doesn't feel like the right approach.\n \n ### Skolemization\n "}]}