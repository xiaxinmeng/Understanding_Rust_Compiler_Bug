{"sha": "77972e2001d727155fe4ead78cf5e3994f24211d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OTcyZTIwMDFkNzI3MTU1ZmU0ZWFkNzhjZjVlMzk5NGYyNDIxMWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-18T19:37:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-18T19:37:26Z"}, "message": "Don't look at attributes when lowering to ItemTree\n\nResolves 2 `cfg_attr` FIXMEs", "tree": {"sha": "48f681546ca2ac31fcaa6351f1912e8dd9b41de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f681546ca2ac31fcaa6351f1912e8dd9b41de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77972e2001d727155fe4ead78cf5e3994f24211d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77972e2001d727155fe4ead78cf5e3994f24211d", "html_url": "https://github.com/rust-lang/rust/commit/77972e2001d727155fe4ead78cf5e3994f24211d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77972e2001d727155fe4ead78cf5e3994f24211d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25185c1418022868e2f7ec1599e32a34d63e8314", "url": "https://api.github.com/repos/rust-lang/rust/commits/25185c1418022868e2f7ec1599e32a34d63e8314", "html_url": "https://github.com/rust-lang/rust/commit/25185c1418022868e2f7ec1599e32a34d63e8314"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "100dbf5d6571ced6fcae71ef81722b2ecc244c74", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77972e2001d727155fe4ead78cf5e3994f24211d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972e2001d727155fe4ead78cf5e3994f24211d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=77972e2001d727155fe4ead78cf5e3994f24211d", "patch": "@@ -12,7 +12,7 @@ use std::{\n };\n \n use arena::{Arena, Idx, RawId};\n-use ast::{AstNode, AttrsOwner, NameOwner, StructKind};\n+use ast::{AstNode, NameOwner, StructKind};\n use base_db::CrateId;\n use either::Either;\n use hir_expand::{\n@@ -495,7 +495,6 @@ pub struct Import {\n     pub alias: Option<ImportAlias>,\n     pub visibility: RawVisibilityId,\n     pub is_glob: bool,\n-    pub is_prelude: bool,\n     /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n     /// `Import`s can map to the same `use` item.\n     pub ast_id: FileAstId<ast::Use>,\n@@ -511,8 +510,6 @@ pub struct ExternCrate {\n     pub name: Name,\n     pub alias: Option<ImportAlias>,\n     pub visibility: RawVisibilityId,\n-    /// Whether this is a `#[macro_use] extern crate ...`.\n-    pub is_macro_use: bool,\n     pub ast_id: FileAstId<ast::ExternCrate>,\n }\n "}, {"sha": "3b206ef85e63f9b48bff7a96416037c053408b3e", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77972e2001d727155fe4ead78cf5e3994f24211d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972e2001d727155fe4ead78cf5e3994f24211d/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=77972e2001d727155fe4ead78cf5e3994f24211d", "patch": "@@ -485,8 +485,6 @@ impl Ctx {\n     }\n \n     fn lower_use(&mut self, use_item: &ast::Use) -> Vec<FileItemTreeId<Import>> {\n-        // FIXME: cfg_attr\n-        let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let visibility = self.lower_visibility(use_item);\n         let ast_id = self.source_ast_id_map.ast_id(use_item);\n \n@@ -502,7 +500,6 @@ impl Ctx {\n                     alias,\n                     visibility,\n                     is_glob,\n-                    is_prelude,\n                     ast_id,\n                     index: imports.len(),\n                 })));\n@@ -522,10 +519,8 @@ impl Ctx {\n         });\n         let visibility = self.lower_visibility(extern_crate);\n         let ast_id = self.source_ast_id_map.ast_id(extern_crate);\n-        // FIXME: cfg_attr\n-        let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");\n \n-        let res = ExternCrate { name, alias, visibility, is_macro_use, ast_id };\n+        let res = ExternCrate { name, alias, visibility, ast_id };\n         Some(id(self.data().extern_crates.alloc(res)))\n     }\n "}, {"sha": "55228e480a5f21e5ce795ebb4ceea28f1697294a", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/77972e2001d727155fe4ead78cf5e3994f24211d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77972e2001d727155fe4ead78cf5e3994f24211d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=77972e2001d727155fe4ead78cf5e3994f24211d", "patch": "@@ -136,23 +136,35 @@ struct Import {\n }\n \n impl Import {\n-    fn from_use(tree: &ItemTree, id: ItemTreeId<item_tree::Import>) -> Self {\n+    fn from_use(\n+        db: &dyn DefDatabase,\n+        krate: CrateId,\n+        tree: &ItemTree,\n+        id: ItemTreeId<item_tree::Import>,\n+    ) -> Self {\n         let it = &tree[id.value];\n+        let attrs = &tree.attrs(db, krate, ModItem::from(id.value).into());\n         let visibility = &tree[it.visibility];\n         Self {\n             path: it.path.clone(),\n             alias: it.alias.clone(),\n             visibility: visibility.clone(),\n             is_glob: it.is_glob,\n-            is_prelude: it.is_prelude,\n+            is_prelude: attrs.by_key(\"prelude_import\").exists(),\n             is_extern_crate: false,\n             is_macro_use: false,\n             source: ImportSource::Import(id),\n         }\n     }\n \n-    fn from_extern_crate(tree: &ItemTree, id: ItemTreeId<item_tree::ExternCrate>) -> Self {\n+    fn from_extern_crate(\n+        db: &dyn DefDatabase,\n+        krate: CrateId,\n+        tree: &ItemTree,\n+        id: ItemTreeId<item_tree::ExternCrate>,\n+    ) -> Self {\n         let it = &tree[id.value];\n+        let attrs = &tree.attrs(db, krate, ModItem::from(id.value).into());\n         let visibility = &tree[it.visibility];\n         Self {\n             path: ModPath::from_segments(PathKind::Plain, iter::once(it.name.clone())),\n@@ -161,7 +173,7 @@ impl Import {\n             is_glob: false,\n             is_prelude: false,\n             is_extern_crate: true,\n-            is_macro_use: it.is_macro_use,\n+            is_macro_use: attrs.by_key(\"macro_use\").exists(),\n             source: ImportSource::ExternCrate(id),\n         }\n     }\n@@ -930,7 +942,12 @@ impl ModCollector<'_, '_> {\n             if attrs.cfg().map_or(true, |cfg| self.is_cfg_enabled(&cfg)) {\n                 if let ModItem::ExternCrate(id) = item {\n                     let import = self.item_tree[*id].clone();\n-                    if import.is_macro_use {\n+                    let attrs = self.item_tree.attrs(\n+                        self.def_collector.db,\n+                        krate,\n+                        ModItem::from(*id).into(),\n+                    );\n+                    if attrs.by_key(\"macro_use\").exists() {\n                         self.def_collector.import_macros_from_extern_crate(self.module_id, &import);\n                     }\n                 }\n@@ -956,6 +973,8 @@ impl ModCollector<'_, '_> {\n                     self.def_collector.unresolved_imports.push(ImportDirective {\n                         module_id: self.module_id,\n                         import: Import::from_use(\n+                            self.def_collector.db,\n+                            krate,\n                             &self.item_tree,\n                             InFile::new(self.file_id, import_id),\n                         ),\n@@ -966,6 +985,8 @@ impl ModCollector<'_, '_> {\n                     self.def_collector.unresolved_imports.push(ImportDirective {\n                         module_id: self.module_id,\n                         import: Import::from_extern_crate(\n+                            self.def_collector.db,\n+                            krate,\n                             &self.item_tree,\n                             InFile::new(self.file_id, import_id),\n                         ),"}]}