{"sha": "3ed8ad4423684a006e8db194c91f585798b500ab", "node_id": "C_kwDOAAsO6NoAKDNlZDhhZDQ0MjM2ODRhMDA2ZThkYjE5NGM5MWY1ODU3OThiNTAwYWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-05T23:46:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-05T23:46:14Z"}, "message": "avoid repeated string matching, and add more simd_reduce intrinsics", "tree": {"sha": "8de617ffcf17f0a8677b4ba9b1ba6a060401a1e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de617ffcf17f0a8677b4ba9b1ba6a060401a1e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed8ad4423684a006e8db194c91f585798b500ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8ad4423684a006e8db194c91f585798b500ab", "html_url": "https://github.com/rust-lang/rust/commit/3ed8ad4423684a006e8db194c91f585798b500ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8ad4423684a006e8db194c91f585798b500ab/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3854a76aced92072455a9a189ab9d2a20ae00099", "url": "https://api.github.com/repos/rust-lang/rust/commits/3854a76aced92072455a9a189ab9d2a20ae00099", "html_url": "https://github.com/rust-lang/rust/commit/3854a76aced92072455a9a189ab9d2a20ae00099"}], "stats": {"total": 71, "additions": 55, "deletions": 16}, "files": [{"sha": "481808dc78197992c31db3a27cbe2fc8e922dd61", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ed8ad4423684a006e8db194c91f585798b500ab/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed8ad4423684a006e8db194c91f585798b500ab/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=3ed8ad4423684a006e8db194c91f585798b500ab", "patch": "@@ -267,6 +267,7 @@ pub struct PrimitiveLayouts<'tcx> {\n     pub u8: TyAndLayout<'tcx>,\n     pub u32: TyAndLayout<'tcx>,\n     pub usize: TyAndLayout<'tcx>,\n+    pub bool: TyAndLayout<'tcx>,\n }\n \n impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n@@ -279,6 +280,7 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n             u8: layout_cx.layout_of(layout_cx.tcx.types.u8)?,\n             u32: layout_cx.layout_of(layout_cx.tcx.types.u32)?,\n             usize: layout_cx.layout_of(layout_cx.tcx.types.usize)?,\n+            bool: layout_cx.layout_of(layout_cx.tcx.types.bool)?,\n         })\n     }\n }"}, {"sha": "532eb08b191b016960a30a94fc69f5934bc35bbb", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3ed8ad4423684a006e8db194c91f585798b500ab/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed8ad4423684a006e8db194c91f585798b500ab/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=3ed8ad4423684a006e8db194c91f585798b500ab", "patch": "@@ -324,12 +324,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 assert_eq!(dest_len, op_len);\n \n+                enum Op {\n+                    MirOp(mir::UnOp),\n+                    Abs,\n+                }\n+                let which = match intrinsic_name {\n+                    \"simd_neg\" => Op::MirOp(mir::UnOp::Neg),\n+                    \"simd_fabs\" => Op::Abs,\n+                    _ => unreachable!(),\n+                };\n+\n                 for i in 0..dest_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n-                    let val = match intrinsic_name {\n-                        \"simd_neg\" => this.unary_op(mir::UnOp::Neg, &op)?.to_scalar()?,\n-                        \"simd_fabs\" => {\n+                    let val = match which {\n+                        Op::MirOp(mir_op) => this.unary_op(mir_op, &op)?.to_scalar()?,\n+                        Op::Abs => {\n                             // Works for f32 and f64.\n                             let ty::Float(float_ty) = op.layout.ty.kind() else {\n                                 bug!(\"simd_fabs operand is not a float\")\n@@ -341,7 +351,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 FloatTy::F64 => Scalar::from_f64(op.to_f64()?.abs()),\n                             }\n                         }\n-                        _ => bug!(),\n                     };\n                     this.write_scalar(val, &dest.into())?;\n                 }\n@@ -419,28 +428,49 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     }\n                 }\n             }\n-            \"simd_reduce_any\" | \"simd_reduce_all\" => {\n+            #[rustfmt::skip]\n+            | \"simd_reduce_and\"\n+            | \"simd_reduce_or\"\n+            | \"simd_reduce_xor\"\n+            | \"simd_reduce_any\"\n+            | \"simd_reduce_all\" => {\n+                use mir::BinOp;\n+\n                 let &[ref op] = check_arg_count(args)?;\n                 let (op, op_len) = this.operand_to_simd(op)?;\n \n-                // the neutral element\n-                let mut res = match intrinsic_name {\n-                    \"simd_reduce_any\" => false,\n-                    \"simd_reduce_all\" => true,\n-                    _ => bug!(),\n+                let imm_from_bool =\n+                    |b| ImmTy::from_scalar(Scalar::from_bool(b), this.machine.layouts.bool);\n+\n+                enum Op {\n+                    MirOp(BinOp),\n+                    MirOpBool(BinOp),\n+                }\n+                // The initial value is the neutral element.\n+                let (which, init) = match intrinsic_name {\n+                    \"simd_reduce_and\" => (Op::MirOp(BinOp::BitAnd), ImmTy::from_int(-1, dest.layout)),\n+                    \"simd_reduce_or\" => (Op::MirOp(BinOp::BitOr), ImmTy::from_int(0, dest.layout)),\n+                    \"simd_reduce_xor\" => (Op::MirOp(BinOp::BitXor), ImmTy::from_int(0, dest.layout)),\n+                    \"simd_reduce_any\" => (Op::MirOpBool(BinOp::BitOr), imm_from_bool(false)),\n+                    \"simd_reduce_all\" => (Op::MirOpBool(BinOp::BitAnd), imm_from_bool(true)),\n+                    _ => unreachable!(),\n                 };\n \n+                let mut res = init;\n                 for i in 0..op_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n-                    let val = simd_element_to_bool(op)?;\n-                    res = match intrinsic_name {\n-                        \"simd_reduce_any\" => res | val,\n-                        \"simd_reduce_all\" => res & val,\n-                        _ => bug!(),\n+                    res = match which {\n+                        Op::MirOp(mir_op) => {\n+                            this.binary_op(mir_op, &res, &op)?\n+                        }\n+                        Op::MirOpBool(mir_op) => {\n+                            let op = imm_from_bool(simd_element_to_bool(op)?);\n+                            this.binary_op(mir_op, &res, &op)?\n+                        }\n                     };\n                 }\n \n-                this.write_scalar(Scalar::from_bool(res), dest)?;\n+                this.write_immediate(*res, dest)?;\n             }\n             \"simd_select\" => {\n                 let &[ref mask, ref yes, ref no] = check_arg_count(args)?;"}, {"sha": "ef8a5752b7cc71f1e6042403ed0a729ebadece02", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ed8ad4423684a006e8db194c91f585798b500ab/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed8ad4423684a006e8db194c91f585798b500ab/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=3ed8ad4423684a006e8db194c91f585798b500ab", "patch": "@@ -68,6 +68,13 @@ fn simd_ops_i32() {\n     assert_eq!(a.lanes_lt(i32x4::splat(5)*b), Mask::from_int(i32x4::from_array([0, 0, -1, 0])));\n     assert_eq!(a.lanes_ge(i32x4::splat(5)*b), Mask::from_int(i32x4::from_array([-1, -1, 0, -1])));\n     assert_eq!(a.lanes_gt(i32x4::splat(5)*b), Mask::from_int(i32x4::from_array([-1, 0, 0, -1])));\n+\n+    assert_eq!(a.horizontal_and(), 10);\n+    assert_eq!(b.horizontal_and(), 0);\n+    assert_eq!(a.horizontal_or(), 10);\n+    assert_eq!(b.horizontal_or(), -1);\n+    assert_eq!(a.horizontal_xor(), 0);\n+    assert_eq!(b.horizontal_xor(), -4);\n }\n \n fn simd_intrinsics() {"}]}