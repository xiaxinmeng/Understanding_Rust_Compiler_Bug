{"sha": "2d76c94dd077406d030a9b7058fb52f979db8bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzZjOTRkZDA3NzQwNmQwMzBhOWI3MDU4ZmI1MmY5NzlkYjhiZDI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-28T02:50:33Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-30T15:37:45Z"}, "message": "s/while let/for/g now that #21245 has been fixed", "tree": {"sha": "04ce6ca0a5240cdbe67d98bd20df789314381641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ce6ca0a5240cdbe67d98bd20df789314381641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d76c94dd077406d030a9b7058fb52f979db8bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d76c94dd077406d030a9b7058fb52f979db8bd2", "html_url": "https://github.com/rust-lang/rust/commit/2d76c94dd077406d030a9b7058fb52f979db8bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d76c94dd077406d030a9b7058fb52f979db8bd2/comments", "author": null, "committer": null, "parents": [{"sha": "c013a018b81c6beb14df172cebfd8c2e83da841b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c013a018b81c6beb14df172cebfd8c2e83da841b", "html_url": "https://github.com/rust-lang/rust/commit/c013a018b81c6beb14df172cebfd8c2e83da841b"}], "stats": {"total": 73, "additions": 19, "deletions": 54}, "files": [{"sha": "d676cfca9294e6ab2a0f07a03c94aeed28a36055", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -104,9 +104,7 @@ type MatchWords<'a> = Chain<Enumerate<Blocks<'a>>, Skip<Take<Enumerate<Repeat<u3\n \n fn reverse_bits(byte: u8) -> u8 {\n     let mut result = 0;\n-    // FIXME(#21245) use a for loop\n-    let mut iter = 0..u8::BITS;\n-    while let Some(i) = iter.next() {\n+    for i in 0..u8::BITS {\n         result |= ((byte >> i) & 1) << (u8::BITS - 1 - i);\n     }\n     result"}, {"sha": "a19b3c221b1ef6f9bfcca8a4dc1f0d75b30b08ae", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -1793,9 +1793,7 @@ mod tests {\n     fn bench_push_back_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            // FIXME(#21245) use a for loop\n-            let mut iter = 0i..100;\n-            while let Some(i) = iter.next() {\n+            for i in 0i..100 {\n                 deq.push_back(i);\n             }\n             deq.head = 0;\n@@ -1807,9 +1805,7 @@ mod tests {\n     fn bench_push_front_100(b: &mut test::Bencher) {\n         let mut deq = RingBuf::with_capacity(101);\n         b.iter(|| {\n-            // FIXME(#21245) use a for loop\n-            let mut iter = 0i..100;\n-            while let Some(i) = iter.next() {\n+            for i in 0i..100 {\n                 deq.push_front(i);\n             }\n             deq.head = 0;"}, {"sha": "1d20d39b115128d8c3ba6dd98cbfdc8e2c6ba515", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -1567,9 +1567,7 @@ impl<T> Drop for Vec<T> {\n         // zeroed (when moving out, because of #[unsafe_no_drop_flag]).\n         if self.cap != 0 {\n             unsafe {\n-                // FIXME(#21245) use a for loop\n-                let mut iter = self.iter();\n-                while let Some(x) = iter.next() {\n+                for x in self.iter() {\n                     ptr::read(x);\n                 }\n                 dealloc(*self.ptr, self.cap)"}, {"sha": "01d42523f3556d6be755185075bf50a61bd75fc9", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -352,9 +352,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         for (word_index, &word) in words.iter().enumerate() {\n             if word != 0 {\n                 let base_index = word_index * uint::BITS;\n-                // FIXME(#21245) use a for loop\n-                let mut iter = 0u..uint::BITS;\n-                while let Some(offset) = iter.next() {\n+                for offset in 0u..uint::BITS {\n                     let bit = 1 << offset;\n                     if (word & bit) != 0 {\n                         // NB: we round up the total number of bits"}, {"sha": "8b39d91ffaeb0f029af4ad0493e2089cf9634b8c", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -148,9 +148,7 @@ impl<\n     fn decode<D: Decoder>(d: &mut D) -> Result<EnumSet<T>, D::Error> {\n         let bits = try!(d.read_uint());\n         let mut set = EnumSet::new();\n-        // FIXME(#21245) use a for loop\n-        let mut iter = 0..uint::BITS;\n-        while let Some(bit) = iter.next() {\n+        for bit in 0..uint::BITS {\n             if bits & (1 << bit) != 0 {\n                 set.insert(CLike::from_uint(1 << bit));\n             }"}, {"sha": "9aa38e711e70f3501b1ccd49d5e736a20e46c13e", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -232,10 +232,7 @@ pub fn escape_default<F>(c: u8, mut f: F) where\n         _ => {\n             f(b'\\\\');\n             f(b'x');\n-            // FIXME(#21245) use a for loop\n-            let arr = [4u, 0u];\n-            let mut iter = arr.iter();\n-            while let ::option::Option::Some(&offset) = ::iter::Iterator::next(&mut iter) {\n+            for &offset in [4u, 0u].iter() {\n                 match ((c as i32) >> offset) & 0xf {\n                     i @ 0 ... 9 => f(b'0' + (i as u8)),\n                     i => f(b'a' + (i as u8 - 10)),"}, {"sha": "992afb2d10fc487232c6235c0e59bd6359b69b89", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -404,9 +404,7 @@ mod test {\n         }\n \n         // start all the tasks\n-        // FIXME(#21245) use a for loop\n-        let mut iter = txs.iter();\n-        while let Some(tx) = iter.next() {\n+        for tx in txs.iter() {\n             tx.send(()).unwrap();\n         }\n     }"}, {"sha": "6a43eccbaba4e935945a19caec6a4aecb021d567", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -1476,9 +1476,7 @@ mod test {\n \n         let _t = Thread::spawn(move|| {\n             let mut count = 0;\n-            // FIXME(#21245) use a for loop\n-            let mut iter = rx.iter();\n-            while let Some(x) = iter.next() {\n+            for x in rx.iter() {\n                 if count >= 3 {\n                     break;\n                 } else {\n@@ -1942,9 +1940,7 @@ mod sync_tests {\n \n         let _t = Thread::spawn(move|| {\n             let mut count = 0;\n-            // FIXME(#21245) use a for loop\n-            let mut iter = rx.iter();\n-            while let Some(x) = iter.next() {\n+            for x in rx.iter() {\n                 if count >= 3 {\n                     break;\n                 } else {"}, {"sha": "53eba131674cf6b45d79ddd084fe9181138eba1b", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -185,9 +185,7 @@ mod tests {\n             let tx = tx.clone();\n             let q = q.clone();\n             Thread::spawn(move|| {\n-                // FIXME(#21245) use a for loop\n-                let mut iter = 0..nmsgs;\n-                while let Some(i) = iter.next() {\n+                for i in 0..nmsgs {\n                     q.push(i);\n                 }\n                 tx.send(()).unwrap();"}, {"sha": "a1362f5382c979b4f3864039181f5e7e2fd5e434", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -37,14 +37,10 @@ pub trait MoveMap<T> {\n \n impl<T> MoveMap<T> for Vec<T> {\n     fn move_map<F>(mut self, mut f: F) -> Vec<T> where F: FnMut(T) -> T {\n-        // FIXME(#21245) use a for loop\n-        {\n-            let mut iter = self.iter_mut();\n-            while let Some(p) = iter.next() {\n-                unsafe {\n-                    // FIXME(#5016) this shouldn't need to zero to be safe.\n-                    ptr::write(p, f(ptr::read_and_zero(p)));\n-                }\n+        for p in self.iter_mut() {\n+            unsafe {\n+                // FIXME(#5016) this shouldn't need to zero to be safe.\n+                ptr::write(p, f(ptr::read_and_zero(p)));\n             }\n         }\n         self"}, {"sha": "4a9c5a91dcf0bb5cbe976946e7782e8f9225c627", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -133,9 +133,7 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n                 (i + 1) * chunk_size\n             };\n \n-            // FIXME(#21245) use a for loop\n-            let mut iter = vec_init_i[start..end].iter();\n-            while let Some(&init_i) = iter.next() {\n+            for &init_i in vec_init_i[start..end].iter() {\n                 write_line(init_i, init_r_slice, &mut res);\n             }\n \n@@ -144,9 +142,7 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n     }).collect::<Vec<_>>();\n \n     try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n-    // FIXME(#21245) use a for loop\n-    let mut iter = data.into_iter();\n-    while let Some(res) = iter.next() {\n+    for res in data.into_iter() {\n         try!(out.write(res.join().ok().unwrap().as_slice()));\n     }\n     out.flush()"}, {"sha": "e6ef58cba35f83b07f16e5bbaa02e78018a9fd8b", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d76c94dd077406d030a9b7058fb52f979db8bd2/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=2d76c94dd077406d030a9b7058fb52f979db8bd2", "patch": "@@ -180,9 +180,7 @@ fn make_masks() -> Vec<Vec<Vec<u64> > > {\n // all unused piece can be placed on the board.\n fn is_board_unfeasible(board: u64, masks: &Vec<Vec<Vec<u64>>>) -> bool {\n     let mut coverable = board;\n-    // FIXME(#21245) use a for loop\n-    let mut iter = masks.iter().enumerate();\n-    while let Some((i, masks_at)) = iter.next() {\n+    for (i, masks_at) in masks.iter().enumerate() {\n         if board & 1 << i != 0 { continue; }\n         for (cur_id, pos_masks) in masks_at.iter().enumerate() {\n             if board & 1 << (50 + cur_id) != 0 { continue; }\n@@ -224,9 +222,7 @@ fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n     let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n-        // FIXME(#21245) use a for loop\n-        let mut iter = 0u..50;\n-        while let Some(i) = iter.next() {\n+        for i in 0u..50 {\n             if m & 1 << i != 0 {\n                 sol[i] = id;\n             }"}]}