{"sha": "02ff9e0aef03d48fdecc2d114311217010ec1d81", "node_id": "C_kwDOAAsO6NoAKDAyZmY5ZTBhZWYwM2Q0OGZkZWNjMmQxMTQzMTEyMTcwMTBlYzFkODE", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-01-23T20:41:46Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2022-02-23T05:38:19Z"}, "message": "Replace `&mut DiagnosticBuilder`, in signatures, with `&mut Diagnostic`.", "tree": {"sha": "d04f771384ec8220bc82ff3f08f6de85a5367748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04f771384ec8220bc82ff3f08f6de85a5367748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ff9e0aef03d48fdecc2d114311217010ec1d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ff9e0aef03d48fdecc2d114311217010ec1d81", "html_url": "https://github.com/rust-lang/rust/commit/02ff9e0aef03d48fdecc2d114311217010ec1d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ff9e0aef03d48fdecc2d114311217010ec1d81/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24ff1815f421ac369729633373b7e809a293232", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24ff1815f421ac369729633373b7e809a293232", "html_url": "https://github.com/rust-lang/rust/commit/f24ff1815f421ac369729633373b7e809a293232"}], "stats": {"total": 835, "additions": 369, "deletions": 466}, "files": [{"sha": "3da94dd28b1081b928f6c56dc0b0d2b845dc8004", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_const_eval::util::{CallDesugaringKind, CallKind};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n@@ -782,7 +782,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, err))]\n     fn suggest_using_local_if_applicable(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n         gen_borrow_kind: BorrowKind,\n@@ -855,7 +855,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     fn suggest_split_at_mut_if_applicable(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         place: Place<'tcx>,\n         borrowed_place: Place<'tcx>,\n     ) {\n@@ -1835,7 +1835,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         self.buffer_error(err);\n     }\n \n-    fn explain_deref_coercion(&mut self, loan: &BorrowData<'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+    fn explain_deref_coercion(&mut self, loan: &BorrowData<'tcx>, err: &mut Diagnostic) {\n         let tcx = self.infcx.tcx;\n         if let (\n             Some(Terminator { kind: TerminatorKind::Call { from_hir_call: false, .. }, .. }),\n@@ -2362,11 +2362,7 @@ enum AnnotatedBorrowFnSignature<'tcx> {\n impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n     /// Annotate the provided diagnostic with information about borrow from the fn signature that\n     /// helps explain.\n-    pub(crate) fn emit(\n-        &self,\n-        cx: &mut MirBorrowckCtxt<'_, 'tcx>,\n-        diag: &mut DiagnosticBuilder<'_>,\n-    ) -> String {\n+    pub(crate) fn emit(&self, cx: &mut MirBorrowckCtxt<'_, 'tcx>, diag: &mut Diagnostic) -> String {\n         match self {\n             &AnnotatedBorrowFnSignature::Closure { argument_ty, argument_span } => {\n                 diag.span_label("}, {"sha": "da6610c002efc4312eaf4f15e9bbdd7e36cbdedc", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@\n use std::collections::VecDeque;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::{\n@@ -60,7 +60,7 @@ impl BorrowExplanation {\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         local_names: &IndexVec<Local, Option<Symbol>>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         borrow_desc: &str,\n         borrow_span: Option<Span>,\n         multiple_borrow_span: Option<(Span, Span)>,\n@@ -275,7 +275,7 @@ impl BorrowExplanation {\n     }\n     pub(crate) fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         category: &ConstraintCategory,\n         span: Span,\n         region_name: &RegionName,"}, {"sha": "914ee760d018f185681d97aed9d5b904d99cc632", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,7 +1,7 @@\n //! Borrow checker diagnostics.\n \n use rustc_const_eval::util::call_kind;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n@@ -57,7 +57,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         location: Location,\n         place: PlaceRef<'tcx>,\n-        diag: &mut DiagnosticBuilder<'_>,\n+        diag: &mut Diagnostic,\n     ) {\n         debug!(\"add_moved_or_invoked_closure_note: location={:?} place={:?}\", location, place);\n         let mut target = place.local_or_deref_local();\n@@ -409,7 +409,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Add a note that a type does not implement `Copy`\n     pub(super) fn note_type_does_not_implement_copy(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         place_desc: &str,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n@@ -613,23 +613,15 @@ impl UseSpans<'_> {\n     }\n \n     // Add a span label to the arguments of the closure, if it exists.\n-    pub(super) fn args_span_label(\n-        self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        message: impl Into<String>,\n-    ) {\n+    pub(super) fn args_span_label(self, err: &mut Diagnostic, message: impl Into<String>) {\n         if let UseSpans::ClosureUse { args_span, .. } = self {\n             err.span_label(args_span, message);\n         }\n     }\n \n     // Add a span label to the use of the captured variable, if it exists.\n     // only adds label to the `path_span`\n-    pub(super) fn var_span_label_path_only(\n-        self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        message: impl Into<String>,\n-    ) {\n+    pub(super) fn var_span_label_path_only(self, err: &mut Diagnostic, message: impl Into<String>) {\n         if let UseSpans::ClosureUse { path_span, .. } = self {\n             err.span_label(path_span, message);\n         }\n@@ -638,7 +630,7 @@ impl UseSpans<'_> {\n     // Add a span label to the use of the captured variable, if it exists.\n     pub(super) fn var_span_label(\n         self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         message: impl Into<String>,\n         kind_desc: impl Into<String>,\n     ) {"}, {"sha": "71dd6cc9144bef76a7728cae524ff9ae800d91fa", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,5 +1,5 @@\n use rustc_const_eval::util::CallDesugaringKind;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n@@ -441,12 +441,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err\n     }\n \n-    fn add_move_hints(\n-        &self,\n-        error: GroupedMoveError<'tcx>,\n-        err: &mut DiagnosticBuilder<'a>,\n-        span: Span,\n-    ) {\n+    fn add_move_hints(&self, error: GroupedMoveError<'tcx>, err: &mut Diagnostic, span: Span) {\n         match error {\n             GroupedMoveError::MovesFromPlace { mut binds_to, move_from, .. } => {\n                 if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n@@ -505,7 +500,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn add_move_error_suggestions(&self, err: &mut DiagnosticBuilder<'a>, binds_to: &[Local]) {\n+    fn add_move_error_suggestions(&self, err: &mut Diagnostic, binds_to: &[Local]) {\n         let mut suggestions: Vec<(Span, &str, String)> = Vec::new();\n         for local in binds_to {\n             let bind_to = &self.body.local_decls[*local];\n@@ -541,7 +536,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn add_move_error_details(&self, err: &mut DiagnosticBuilder<'a>, binds_to: &[Local]) {\n+    fn add_move_error_details(&self, err: &mut Diagnostic, binds_to: &[Local]) {\n         for (j, local) in binds_to.iter().enumerate() {\n             let bind_to = &self.body.local_decls[*local];\n             let binding_span = bind_to.source_info.span;"}, {"sha": "2c9bd8ea96e9ade9896172aed3ee3d64824b858e", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -17,7 +17,7 @@ use rustc_span::{BytePos, Span};\n use crate::diagnostics::BorrowedContentSource;\n use crate::MirBorrowckCtxt;\n use rustc_const_eval::util::collect_writes::FindAssignments;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum AccessKind {\n@@ -689,7 +689,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         tcx: TyCtxt<'_>,\n         id: &hir::def_id::DefId,\n         the_place_err: PlaceRef<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n     ) {\n         let closure_local_def_id = id.expect_local();\n         let tables = tcx.typeck(closure_local_def_id);\n@@ -754,7 +754,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     // Attempt to search similar mutable associated items for suggestion.\n     // In the future, attempt in all path but initially for RHS of for_loop\n-    fn suggest_similar_mut_method_for_for_loop(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_similar_mut_method_for_for_loop(&self, err: &mut Diagnostic) {\n         use hir::{\n             BodyId, Expr,\n             ExprKind::{Block, Call, DropTemps, Match, MethodCall},\n@@ -843,7 +843,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n \n     /// Targeted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n-    fn expected_fn_found_fn_mut_call(&self, err: &mut DiagnosticBuilder<'_>, sp: Span, act: &str) {\n+    fn expected_fn_found_fn_mut_call(&self, err: &mut Diagnostic, sp: Span, act: &str) {\n         err.span_label(sp, format!(\"cannot {}\", act));\n \n         let hir = self.infcx.tcx.hir();"}, {"sha": "72415cb51a0cbb9c3ef2ada628774a3123eb9c63", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -2,7 +2,7 @@\n //! outlives constraints.\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_middle::ty::RegionVid;\n use smallvec::SmallVec;\n use std::collections::BTreeMap;\n@@ -162,7 +162,7 @@ impl OutlivesSuggestionBuilder {\n         &mut self,\n         mbcx: &MirBorrowckCtxt<'_, '_>,\n         errci: &ErrorConstraintInfo,\n-        diag: &mut DiagnosticBuilder<'_>,\n+        diag: &mut Diagnostic,\n     ) {\n         // Emit an intermediate note.\n         let fr_name = self.region_vid_to_name(mbcx, errci.fr);"}, {"sha": "5ac6ea33a26e32fa05dcadd3aae5cca0c5cd8d51", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,6 +1,6 @@\n //! Error reporting machinery for lifetime errors.\n \n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n@@ -632,7 +632,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     fn add_static_impl_trait_suggestion(\n         &self,\n-        diag: &mut DiagnosticBuilder<'tcx>,\n+        diag: &mut Diagnostic,\n         fr: RegionVid,\n         // We need to pass `fr_name` - computing it again will label it twice.\n         fr_name: RegionName,"}, {"sha": "c9395492c9e066d2711a14ca5e12c709df7d094a", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::{self, Display};\n use std::iter;\n \n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_middle::ty::print::RegionHighlightMode;\n@@ -98,7 +98,7 @@ impl RegionName {\n         }\n     }\n \n-    crate fn highlight_region_name(&self, diag: &mut DiagnosticBuilder<'_>) {\n+    crate fn highlight_region_name(&self, diag: &mut Diagnostic) {\n         match &self.source {\n             RegionNameSource::NamedFreeRegion(span)\n             | RegionNameSource::NamedEarlyBoundRegion(span) => {"}, {"sha": "3f0ce7dea00fb0a81f08da36caa217300e21771e", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::binary_search_util;\n use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::scc::Sccs;\n+use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::CRATE_HIR_ID;\n use rustc_index::vec::IndexVec;\n@@ -510,7 +511,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Adds annotations for `#[rustc_regions]`; see `UniversalRegions::annotate`.\n-    crate fn annotate(&self, tcx: TyCtxt<'tcx>, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n+    crate fn annotate(&self, tcx: TyCtxt<'tcx>, err: &mut Diagnostic) {\n         self.universal_regions.annotate(tcx, err)\n     }\n "}, {"sha": "478dbe31fba7e41b619a002eee53ec0b6ed8fad5", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -14,7 +14,7 @@\n \n use either::Either;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -336,7 +336,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// that this region imposes on others. The methods in this file\n     /// handle the part about dumping the inference context internal\n     /// state.\n-    crate fn annotate(&self, tcx: TyCtxt<'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+    crate fn annotate(&self, tcx: TyCtxt<'tcx>, err: &mut Diagnostic) {\n         match self.defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 err.note(&format!("}, {"sha": "a9b1b40ea29296bcbc7ba526a06061c5e227fa02", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -95,7 +95,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n         let FnCallNonConst { caller, callee, substs, span, from_hir_call } = *self;\n         let ConstCx { tcx, param_env, .. } = *ccx;\n \n-        let diag_trait = |mut err, self_ty: Ty<'_>, trait_id| {\n+        let diag_trait = |err, self_ty: Ty<'_>, trait_id| {\n             let trait_ref = TraitRef::from_method(tcx, trait_id, substs);\n \n             match self_ty.kind() {\n@@ -115,7 +115,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                         suggest_constraining_type_param(\n                             tcx,\n                             generics,\n-                            &mut err,\n+                            err,\n                             &param_ty.name.as_str(),\n                             &constraint,\n                             None,\n@@ -146,8 +146,6 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 }\n                 _ => {}\n             }\n-\n-            err\n         };\n \n         let call_kind = call_kind(tcx, ccx.param_env, callee, substs, span, from_hir_call, None);\n@@ -162,7 +160,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     };\n                 }\n \n-                let err = match kind {\n+                let mut err = match kind {\n                     CallDesugaringKind::ForLoopIntoIter => {\n                         error!(\"cannot convert `{}` into an iterator in {}s\")\n                     }\n@@ -177,7 +175,8 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     }\n                 };\n \n-                diag_trait(err, self_ty, kind.trait_def_id(tcx))\n+                diag_trait(&mut err, self_ty, kind.trait_def_id(tcx));\n+                err\n             }\n             CallKind::FnCall { fn_trait_id, self_ty } => {\n                 let mut err = struct_span_err!(\n@@ -212,7 +211,8 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     _ => {}\n                 }\n \n-                diag_trait(err, self_ty, fn_trait_id)\n+                diag_trait(&mut err, self_ty, fn_trait_id);\n+                err\n             }\n             CallKind::Operator { trait_id, self_ty, .. } => {\n                 let mut err = struct_span_err!(\n@@ -262,7 +262,8 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     }\n                 }\n \n-                diag_trait(err, self_ty, trait_id)\n+                diag_trait(&mut err, self_ty, trait_id);\n+                err\n             }\n             CallKind::DerefCoercion { deref_target, deref_target_ty, self_ty } => {\n                 let mut err = struct_span_err!(\n@@ -281,7 +282,8 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n \n-                diag_trait(err, self_ty, tcx.lang_items().deref_trait().unwrap())\n+                diag_trait(&mut err, self_ty, tcx.lang_items().deref_trait().unwrap());\n+                err\n             }\n             _ => struct_span_err!(\n                 ccx.tcx.sess,"}, {"sha": "f32b11e33c8d0468ae02ad2821713c344cd05503", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -202,6 +202,20 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Labels all the given spans with the provided label.\n+    /// See [`Self::span_label()`] for more information.\n+    pub fn span_labels(\n+        &mut self,\n+        spans: impl IntoIterator<Item = Span>,\n+        label: impl AsRef<str>,\n+    ) -> &mut Self {\n+        let label = label.as_ref();\n+        for span in spans {\n+            self.span_label(span, label);\n+        }\n+        self\n+    }\n+\n     pub fn replace_span_with(&mut self, after: Span) -> &mut Self {\n         let before = self.span.clone();\n         self.set_span(after);\n@@ -213,7 +227,7 @@ impl Diagnostic {\n         self\n     }\n \n-    crate fn note_expected_found(\n+    pub fn note_expected_found(\n         &mut self,\n         expected_label: &dyn fmt::Display,\n         expected: DiagnosticStyledString,\n@@ -223,7 +237,7 @@ impl Diagnostic {\n         self.note_expected_found_extra(expected_label, expected, found_label, found, &\"\", &\"\")\n     }\n \n-    crate fn note_unsuccessful_coercion(\n+    pub fn note_unsuccessful_coercion(\n         &mut self,\n         expected: DiagnosticStyledString,\n         found: DiagnosticStyledString,\n@@ -313,33 +327,33 @@ impl Diagnostic {\n \n     /// Prints the span with a note above it.\n     /// This is like [`Diagnostic::note()`], but it gets its own span.\n-    crate fn span_note<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n+    pub fn span_note<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n         self.sub(Level::Note, msg, sp.into(), None);\n         self\n     }\n \n     /// Add a warning attached to this diagnostic.\n-    crate fn warn(&mut self, msg: &str) -> &mut Self {\n+    pub fn warn(&mut self, msg: &str) -> &mut Self {\n         self.sub(Level::Warning, msg, MultiSpan::new(), None);\n         self\n     }\n \n     /// Prints the span with a warning above it.\n     /// This is like [`Diagnostic::warn()`], but it gets its own span.\n-    crate fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n+    pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n         self.sub(Level::Warning, msg, sp.into(), None);\n         self\n     }\n \n     /// Add a help message attached to this diagnostic.\n-    crate fn help(&mut self, msg: &str) -> &mut Self {\n+    pub fn help(&mut self, msg: &str) -> &mut Self {\n         self.sub(Level::Help, msg, MultiSpan::new(), None);\n         self\n     }\n \n     /// Prints the span with some help above it.\n     /// This is like [`Diagnostic::help()`], but it gets its own span.\n-    crate fn span_help<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n+    pub fn span_help<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self {\n         self.sub(Level::Help, msg, sp.into(), None);\n         self\n     }\n@@ -673,7 +687,7 @@ impl Diagnostic {\n         self.code.clone()\n     }\n \n-    crate fn set_primary_message<M: Into<String>>(&mut self, msg: M) -> &mut Self {\n+    pub fn set_primary_message<M: Into<String>>(&mut self, msg: M) -> &mut Self {\n         self.message[0] = (msg.into(), Style::NoStyle);\n         self\n     }"}, {"sha": "e0a5e6ef089c4a2f4461509d3580582c3e126759", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -59,23 +59,6 @@ macro_rules! forward {\n             self\n         }\n     };\n-\n-    // Forward pattern for &mut self -> &mut Self, with generic parameters.\n-    (\n-        $(#[$attrs:meta])*\n-        pub fn $n:ident<$($generic:ident: $bound:path),*>(\n-            &mut self,\n-            $($name:ident: $ty:ty),*\n-            $(,)?\n-        ) -> &mut Self\n-    ) => {\n-        $(#[$attrs])*\n-        #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n-        pub fn $n<$($generic: $bound),*>(&mut self, $($name: $ty),*) -> &mut Self {\n-            self.diagnostic.$n($($name),*);\n-            self\n-        }\n-    };\n }\n \n impl<'a> Deref for DiagnosticBuilder<'a> {\n@@ -172,6 +155,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         pub fn downgrade_to_delayed_bug(&mut self,) -> &mut Self\n     );\n \n+    forward!(\n     /// Appends a labeled span to the diagnostic.\n     ///\n     /// Labels are used to convey additional context for the diagnostic's primary span. They will\n@@ -184,24 +168,16 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// the diagnostic was constructed. However, the label span is *not* considered a\n     /// [\"primary span\"][`MultiSpan`]; only the `Span` supplied when creating the diagnostic is\n     /// primary.\n-    pub fn span_label(&mut self, span: Span, label: impl Into<String>) -> &mut Self {\n-        self.diagnostic.span_label(span, label);\n-        self\n-    }\n+    pub fn span_label(&mut self, span: Span, label: impl Into<String>) -> &mut Self);\n \n+    forward!(\n     /// Labels all the given spans with the provided label.\n     /// See [`Diagnostic::span_label()`] for more information.\n     pub fn span_labels(\n         &mut self,\n         spans: impl IntoIterator<Item = Span>,\n         label: impl AsRef<str>,\n-    ) -> &mut Self {\n-        let label = label.as_ref();\n-        for span in spans {\n-            self.diagnostic.span_label(span, label);\n-        }\n-        self\n-    }\n+    ) -> &mut Self);\n \n     forward!(pub fn note_expected_found(\n         &mut self,\n@@ -228,17 +204,17 @@ impl<'a> DiagnosticBuilder<'a> {\n     ) -> &mut Self);\n \n     forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_note<S: Into<MultiSpan>>(\n+    forward!(pub fn span_note(\n         &mut self,\n-        sp: S,\n+        sp: impl Into<MultiSpan>,\n         msg: &str,\n     ) -> &mut Self);\n     forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n+    forward!(pub fn span_warn(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> &mut Self);\n     forward!(pub fn help(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_help<S: Into<MultiSpan>>(\n+    forward!(pub fn span_help(\n         &mut self,\n-        sp: S,\n+        sp: impl Into<MultiSpan>,\n         msg: &str,\n     ) -> &mut Self);\n     forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n@@ -312,8 +288,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         applicability: Applicability,\n     ) -> &mut Self);\n \n-    forward!(pub fn set_primary_message<M: Into<String>>(&mut self, msg: M) -> &mut Self);\n-    forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n+    forward!(pub fn set_primary_message(&mut self, msg: impl Into<String>) -> &mut Self);\n+    forward!(pub fn set_span(&mut self, sp: impl Into<MultiSpan>) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n \n     /// Convenience function for internal use, clients should use one of the"}, {"sha": "0fae230813b00a63c99f2ed6811917d882025553", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1319,9 +1319,10 @@ impl Level {\n     }\n }\n \n+// FIXME(eddyb) this doesn't belong here AFAICT, should be moved to callsite.\n pub fn add_elided_lifetime_in_path_suggestion(\n     source_map: &SourceMap,\n-    db: &mut DiagnosticBuilder<'_>,\n+    diag: &mut Diagnostic,\n     n: usize,\n     path_span: Span,\n     incl_angl_brckt: bool,\n@@ -1353,7 +1354,7 @@ pub fn add_elided_lifetime_in_path_suggestion(\n             (insertion_span, anon_lts)\n         }\n     };\n-    db.span_suggestion(\n+    diag.span_suggestion(\n         replace_span,\n         &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n         suggestion,"}, {"sha": "ee2b5cf85bd4271ac2200964a97565275db8a5ce", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -16,7 +16,7 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_feature::Features;\n use rustc_lint_defs::builtin::{\n     RUST_2021_INCOMPATIBLE_OR_PATTERNS, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n@@ -49,11 +49,7 @@ crate struct ParserAnyMacro<'a> {\n     is_local: bool,\n }\n \n-crate fn annotate_err_with_kind(\n-    err: &mut DiagnosticBuilder<'_>,\n-    kind: AstFragmentKind,\n-    span: Span,\n-) {\n+crate fn annotate_err_with_kind(err: &mut Diagnostic, kind: AstFragmentKind, span: Span) {\n     match kind {\n         AstFragmentKind::Ty => {\n             err.span_label(span, \"this macro call doesn't expand to a type\");"}, {"sha": "36c5ce6884943345d55b16561d0dc0164ff29b28", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -58,7 +58,7 @@ use crate::traits::{\n };\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -85,7 +85,7 @@ pub mod nice_region_error;\n \n pub(super) fn note_and_explain_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     prefix: &str,\n     region: ty::Region<'tcx>,\n     suffix: &str,\n@@ -118,7 +118,7 @@ pub(super) fn note_and_explain_region<'tcx>(\n \n fn explain_free_region<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     prefix: &str,\n     region: ty::Region<'tcx>,\n     suffix: &str,\n@@ -194,7 +194,7 @@ fn msg_span_from_early_bound_and_free_regions<'tcx>(\n }\n \n fn emit_msg_span(\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     prefix: &str,\n     description: String,\n     span: Option<Span>,\n@@ -210,7 +210,7 @@ fn emit_msg_span(\n }\n \n fn label_msg_span(\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     prefix: &str,\n     description: String,\n     span: Option<Span>,\n@@ -471,11 +471,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     /// Adds a note if the types come from similarly named crates\n-    fn check_and_note_conflicting_crates(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        terr: &TypeError<'tcx>,\n-    ) {\n+    fn check_and_note_conflicting_crates(&self, err: &mut Diagnostic, terr: &TypeError<'tcx>) {\n         use hir::def_id::CrateNum;\n         use rustc_hir::definitions::DisambiguatedDefPathData;\n         use ty::print::Printer;\n@@ -557,7 +553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let report_path_match = |err: &mut DiagnosticBuilder<'_>, did1: DefId, did2: DefId| {\n+        let report_path_match = |err: &mut Diagnostic, did1: DefId, did2: DefId| {\n             // Only external crates, if either is from a local\n             // module we could have false positives\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n@@ -598,7 +594,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     fn note_error_origin(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         cause: &ObligationCause<'tcx>,\n         exp_found: Option<ty::error::ExpectedFound<Ty<'tcx>>>,\n         terr: &TypeError<'tcx>,\n@@ -792,7 +788,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     fn suggest_boxing_for_return_impl_trait(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         return_sp: Span,\n         arm_spans: impl Iterator<Item = Span>,\n     ) {\n@@ -1437,7 +1433,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n     pub fn note_type_err(\n         &self,\n-        diag: &mut DiagnosticBuilder<'tcx>,\n+        diag: &mut Diagnostic,\n         cause: &ObligationCause<'tcx>,\n         secondary_span: Option<(Span, String)>,\n         mut values: Option<ValuePairs<'tcx>>,\n@@ -1484,14 +1480,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 types_visitor\n             }\n \n-            fn report(&self, err: &mut DiagnosticBuilder<'_>) {\n+            fn report(&self, err: &mut Diagnostic) {\n                 self.add_labels_for_types(err, \"expected\", &self.expected);\n                 self.add_labels_for_types(err, \"found\", &self.found);\n             }\n \n             fn add_labels_for_types(\n                 &self,\n-                err: &mut DiagnosticBuilder<'_>,\n+                err: &mut Diagnostic,\n                 target: &str,\n                 types: &FxHashMap<TyCategory, FxHashSet<Span>>,\n             ) {\n@@ -1818,7 +1814,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         exp_span: Span,\n         exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n-        diag: &mut DiagnosticBuilder<'tcx>,\n+        diag: &mut Diagnostic,\n     ) {\n         debug!(\n             \"suggest_await_on_expect_found: exp_span={:?}, expected_ty={:?}, found_ty={:?}\",\n@@ -1906,7 +1902,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         cause: &ObligationCause<'tcx>,\n         exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n-        diag: &mut DiagnosticBuilder<'tcx>,\n+        diag: &mut Diagnostic,\n     ) {\n         debug!(\n             \"suggest_accessing_field_where_appropriate(cause={:?}, exp_found={:?})\",\n@@ -1955,7 +1951,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         exp_found: &ty::error::ExpectedFound<Ty<'tcx>>,\n-        diag: &mut DiagnosticBuilder<'tcx>,\n+        diag: &mut Diagnostic,\n     ) {\n         if let (ty::Adt(exp_def, exp_substs), ty::Ref(_, found_ty, _)) =\n             (exp_found.expected.kind(), exp_found.found.kind())\n@@ -2108,7 +2104,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     fn emit_tuple_wrap_err(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         span: Span,\n         found: Ty<'tcx>,\n         expected_fields: &List<Ty<'tcx>>,\n@@ -2340,7 +2336,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         fn binding_suggestion<'tcx, S: fmt::Display>(\n-            err: &mut DiagnosticBuilder<'tcx>,\n+            err: &mut Diagnostic,\n             type_param_span: Option<(Span, bool, bool)>,\n             bound_kind: GenericKind<'tcx>,\n             sub: S,\n@@ -2374,7 +2370,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         let new_binding_suggestion =\n-            |err: &mut DiagnosticBuilder<'tcx>,\n+            |err: &mut Diagnostic,\n              type_param_span: Option<(Span, bool, bool)>,\n              bound_kind: GenericKind<'tcx>| {\n                 let msg = \"consider introducing an explicit lifetime bound\";"}, {"sha": "88a65fbb4e613526c67bf5f0b59b357c0a021d27", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::{InferCtxt, Symbol};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n@@ -195,7 +195,7 @@ impl UseDiagnostic<'_> {\n         }\n     }\n \n-    fn attach_note(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn attach_note(&self, err: &mut Diagnostic) {\n         match *self {\n             Self::TryConversion { pre_ty, post_ty, .. } => {\n                 let intro = \"`?` implicitly converts the error value\";\n@@ -224,7 +224,7 @@ impl UseDiagnostic<'_> {\n \n /// Suggest giving an appropriate return type to a closure expression.\n fn closure_return_type_suggestion(\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     output: &FnRetTy<'_>,\n     body: &Body<'_>,\n     ret: &str,\n@@ -873,7 +873,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         segment: &hir::PathSegment<'_>,\n         e: &Expr<'_>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n     ) {\n         if let (Some(typeck_results), None) = (self.in_progress_typeck_results, &segment.args) {\n             let borrow = typeck_results.borrow();"}, {"sha": "bbbb0f79acc3e305e17e781924a29a955bdba07d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -7,7 +7,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::SubregionOrigin;\n \n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::{GenericParamKind, Ty};\n use rustc_middle::ty::Region;\n@@ -156,7 +156,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         sub: Region<'tcx>,\n         ty_sup: &Ty<'_>,\n         ty_sub: &Ty<'_>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n     ) {\n         if let (\n             hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },"}, {"sha": "0be7a67a1b8e0ebe7b5fe6dc3212069c4bb5da8b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -4,7 +4,7 @@ use crate::infer::ValuePairs;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -306,7 +306,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n     /// due to the number of combinations we have to deal with.\n     fn explain_actual_impl_that_was_found(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         sub_placeholder: Option<Region<'tcx>>,\n         sup_placeholder: Option<Region<'tcx>>,\n         has_sub: Option<usize>,"}, {"sha": "210743d7cef7e8d3184c9e7157d5638f0787563c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -5,7 +5,7 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n@@ -286,7 +286,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n pub fn suggest_new_region_bound(\n     tcx: TyCtxt<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     fn_returns: Vec<&rustc_hir::Ty<'_>>,\n     lifetime_name: String,\n     arg: Option<String>,\n@@ -483,7 +483,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     /// `'static` obligation. Suggest relaxing that implicit bound.\n     fn find_impl_on_dyn_trait(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         ty: Ty<'_>,\n         ctxt: &UnifyReceiverContext<'tcx>,\n     ) -> bool {\n@@ -514,7 +514,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n     fn suggest_constrain_dyn_trait_in_impl(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         found_dids: &FxHashSet<DefId>,\n         ident: Ident,\n         self_ty: &hir::Ty<'_>,"}, {"sha": "f44dbef46b8c34936cafdeb770e6a7f2a9d773cf", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,16 +1,12 @@\n use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder};\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub(super) fn note_region_origin(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        origin: &SubregionOrigin<'tcx>,\n-    ) {\n+    pub(super) fn note_region_origin(&self, err: &mut Diagnostic, origin: &SubregionOrigin<'tcx>) {\n         let mut label_or_note = |span, msg| {\n             let sub_count = err.children.iter().filter(|d| d.span.is_dummy()).count();\n             let expanded_sub_count = err.children.iter().filter(|d| !d.span.is_dummy()).count();"}, {"sha": "790169722917b1d6e776c1a351e80307380e77ff", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -31,7 +31,7 @@ use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticStyledString};\n use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -1469,17 +1469,17 @@ impl TypeAliasBounds {\n         }\n     }\n \n-    fn suggest_changing_assoc_types(ty: &hir::Ty<'_>, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_changing_assoc_types(ty: &hir::Ty<'_>, err: &mut Diagnostic) {\n         // Access to associates types should use `<T as Bound>::Assoc`, which does not need a\n         // bound.  Let's see if this type does that.\n \n         // We use a HIR visitor to walk the type.\n         use rustc_hir::intravisit::{self, Visitor};\n-        struct WalkAssocTypes<'a, 'db> {\n-            err: &'a mut DiagnosticBuilder<'db>,\n+        struct WalkAssocTypes<'a> {\n+            err: &'a mut Diagnostic,\n         }\n-        impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            fn visit_qpath(&mut self, qpath: &'v hir::QPath<'v>, id: hir::HirId, span: Span) {\n+        impl Visitor<'_> for WalkAssocTypes<'_> {\n+            fn visit_qpath(&mut self, qpath: &hir::QPath<'_>, id: hir::HirId, span: Span) {\n                 if TypeAliasBounds::is_type_variable_assoc(qpath) {\n                     self.err.span_help(\n                         span,"}, {"sha": "4388bb87bf0e2b70d342f53ae39c8848e5c33859", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -2,7 +2,7 @@ use std::cmp;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n@@ -202,12 +202,12 @@ impl<'a> LintDiagnosticBuilder<'a> {\n     }\n }\n \n-pub fn explain_lint_level_source<'s>(\n-    sess: &'s Session,\n+pub fn explain_lint_level_source(\n+    sess: &Session,\n     lint: &'static Lint,\n     level: Level,\n     src: LintLevelSource,\n-    err: &mut DiagnosticBuilder<'s>,\n+    err: &mut Diagnostic,\n ) {\n     let name = lint.name_lower();\n     match src {"}, {"sha": "6933ee743933ad20925b72cd8ed0d0392d1f45b2", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -7,7 +7,7 @@ use crate::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::NodeId;\n use rustc_attr::{self as attr, ConstStability, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_feature::GateIssue;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -167,7 +167,7 @@ pub fn deprecation_in_effect(depr: &Deprecation) -> bool {\n }\n \n pub fn deprecation_suggestion(\n-    diag: &mut DiagnosticBuilder<'_>,\n+    diag: &mut Diagnostic,\n     kind: &str,\n     suggestion: Option<Symbol>,\n     span: Span,"}, {"sha": "072e6346cdec945b7dd6e0c8cc8be6402ff44efb", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -15,7 +15,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, Ty, TyCtxt};\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::Symbol;\n@@ -841,7 +841,7 @@ impl ObjectSafetyViolation {\n         }\n     }\n \n-    pub fn solution(&self, err: &mut DiagnosticBuilder<'_>) {\n+    pub fn solution(&self, err: &mut Diagnostic) {\n         match *self {\n             ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {}\n             ObjectSafetyViolation::Method("}, {"sha": "58cf9fa7a8943e0ba393f636ceb2b8fc5d430d2c", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -7,7 +7,7 @@ use crate::ty::{\n     ProjectionTy, Term, Ty, TyCtxt, TypeAndMut,\n };\n \n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n@@ -129,7 +129,7 @@ impl<'tcx> Ty<'tcx> {\n \n pub fn suggest_arbitrary_trait_bound(\n     generics: &hir::Generics<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     param_name: &str,\n     constraint: &str,\n ) -> bool {\n@@ -159,7 +159,7 @@ pub fn suggest_arbitrary_trait_bound(\n \n fn suggest_removing_unsized_bound(\n     generics: &hir::Generics<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     param_name: &str,\n     param: &hir::GenericParam<'_>,\n     def_id: Option<DefId>,\n@@ -266,7 +266,7 @@ fn suggest_removing_unsized_bound(\n pub fn suggest_constraining_type_param(\n     tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     param_name: &str,\n     constraint: &str,\n     def_id: Option<DefId>,"}, {"sha": "5c0b5d0fa334424f3f6446ac8731de7ca4fd8586", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@ use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n-use rustc_errors::{pluralize, DiagnosticBuilder};\n+use rustc_errors::{pluralize, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n@@ -347,7 +347,8 @@ impl<'tcx> Ty<'tcx> {\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn note_and_explain_type_err(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         err: &TypeError<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         sp: Span,\n@@ -584,7 +585,8 @@ impl<T> Trait<T> for X {\n \n     fn suggest_constraint(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         msg: &str,\n         body_owner_def_id: DefId,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n@@ -671,7 +673,8 @@ impl<T> Trait<T> for X {\n     ///    fn that returns the type.\n     fn expected_projection(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n         values: &ExpectedFound<Ty<'tcx>>,\n         body_owner_def_id: DefId,\n@@ -766,7 +769,8 @@ fn foo(&self) -> Self::T { String::new() }\n     /// a return type. This can occur when dealing with `TryStream` (#71035).\n     fn suggest_constraining_opaque_associated_type(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         msg: &str,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n         ty: Ty<'tcx>,\n@@ -802,7 +806,8 @@ fn foo(&self) -> Self::T { String::new() }\n \n     fn point_at_methods_that_satisfy_associated_type(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         assoc_container_id: DefId,\n         current_method_ident: Option<Symbol>,\n         proj_ty_item_def_id: DefId,\n@@ -857,7 +862,8 @@ fn foo(&self) -> Self::T { String::new() }\n \n     fn point_at_associated_type(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         body_owner_def_id: DefId,\n         found: Ty<'tcx>,\n     ) -> bool {\n@@ -921,7 +927,8 @@ fn foo(&self) -> Self::T { String::new() }\n     /// type is defined on a supertrait of the one present in the bounds.\n     fn constrain_generic_bound_associated_type_structured_suggestion(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         trait_ref: &ty::TraitRef<'tcx>,\n         bounds: hir::GenericBounds<'_>,\n         assoc: &ty::AssocItem,\n@@ -958,7 +965,8 @@ fn foo(&self) -> Self::T { String::new() }\n     /// associated type to a given type `ty`.\n     fn constrain_associated_type_structured_suggestion(\n         self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         span: Span,\n         assoc: &ty::AssocItem,\n         assoc_substs: &[ty::GenericArg<'tcx>],"}, {"sha": "a2d0fb36eb243481343cee73ce3887bd1a6d7750", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -6,7 +6,7 @@ use super::{PatCtxt, PatternError};\n \n use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n-use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{error_code, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n@@ -281,12 +281,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n /// A path pattern was interpreted as a constant, not a new variable.\n /// This caused an irrefutable match failure in e.g. `let`.\n-fn const_not_var(\n-    err: &mut DiagnosticBuilder<'_>,\n-    tcx: TyCtxt<'_>,\n-    pat: &Pat<'_>,\n-    path: &hir::Path<'_>,\n-) {\n+fn const_not_var(err: &mut Diagnostic, tcx: TyCtxt<'_>, pat: &Pat<'_>, path: &hir::Path<'_>) {\n     let descr = path.res.descr();\n     err.span_label(\n         pat.span,\n@@ -594,7 +589,7 @@ crate fn pattern_not_covered_label(\n /// Point at the definition of non-covered `enum` variants.\n fn adt_defined_here<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     ty: Ty<'tcx>,\n     witnesses: &[DeconstructedPat<'p, 'tcx>],\n ) {"}, {"sha": "1d63b79adc53a8a93040303b125378f40f132fcb", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@\n \n use super::StringReader;\n use crate::token;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n #[rustfmt::skip] // for line breaks\n@@ -336,7 +336,7 @@ pub(super) fn check_for_substitution<'a>(\n     reader: &StringReader<'a>,\n     pos: BytePos,\n     ch: char,\n-    err: &mut DiagnosticBuilder<'a>,\n+    err: &mut Diagnostic,\n ) -> Option<token::TokenKind> {\n     let Some(&(_u_char, u_name, ascii_char)) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch) else {\n         return None;"}, {"sha": "a9a0d44c9a61308417d667a5f14c8f6b4acaa2aa", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@ use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Nonterminal};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{error_code, DiagnosticBuilder, PResult};\n+use rustc_errors::{error_code, Diagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n \n@@ -147,7 +147,7 @@ impl<'a> Parser<'a> {\n \n     fn annotate_following_item_if_applicable(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         attr_type: OuterAttributeType,\n     ) -> Option<Span> {"}, {"sha": "ccd8fa3dbe90037ccb1ec405f65995dcc3901a62", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic};\n use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n@@ -393,7 +393,7 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n-    fn check_too_many_raw_str_terminators(&mut self, err: &mut DiagnosticBuilder<'_>) -> bool {\n+    fn check_too_many_raw_str_terminators(&mut self, err: &mut Diagnostic) -> bool {\n         match (&self.prev_token.kind, &self.token.kind) {\n             (\n                 TokenKind::Literal(Lit {\n@@ -483,7 +483,7 @@ impl<'a> Parser<'a> {\n \n     pub fn maybe_annotate_with_ascription(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         maybe_expected_semicolon: bool,\n     ) {\n         if let Some((sp, likely_path)) = self.last_type_ascription.take() {\n@@ -767,7 +767,7 @@ impl<'a> Parser<'a> {\n     /// parenthesising the leftmost comparison.\n     fn attempt_chained_comparison_suggestion(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         inner_op: &Expr,\n         outer_op: &Spanned<AssocOp>,\n     ) -> bool /* advanced the cursor */ {\n@@ -890,7 +890,7 @@ impl<'a> Parser<'a> {\n                     \"comparison operators cannot be chained\",\n                 );\n \n-                let suggest = |err: &mut DiagnosticBuilder<'_>| {\n+                let suggest = |err: &mut Diagnostic| {\n                     err.span_suggestion_verbose(\n                         op.span.shrink_to_lo(),\n                         TURBOFISH_SUGGESTION_STR,\n@@ -1637,7 +1637,7 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parameter_without_type(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         pat: P<ast::Pat>,\n         require_name: bool,\n         first_param: bool,"}, {"sha": "8283fd0d207047924c82ac55b061c1974789ab0f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{Applicability, DiagnosticBuilder, PResult};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n@@ -2653,7 +2653,7 @@ impl<'a> Parser<'a> {\n         let mut base = ast::StructRest::None;\n         let mut recover_async = false;\n \n-        let mut async_block_err = |e: &mut DiagnosticBuilder<'_>, span: Span| {\n+        let mut async_block_err = |e: &mut Diagnostic, span: Span| {\n             recover_async = true;\n             e.span_label(span, \"`async` blocks are only allowed in Rust 2018 or later\");\n             e.help(&format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION));"}, {"sha": "a1d4758c8ed2515ba4e7e9de901a54bd9f573c10", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@ use std::ptr;\n use rustc_ast::{self as ast, Path};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n@@ -1031,7 +1031,7 @@ impl<'a> Resolver<'a> {\n \n     crate fn unresolved_macro_suggestions(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         macro_kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n         ident: Ident,\n@@ -1120,7 +1120,7 @@ impl<'a> Resolver<'a> {\n \n     crate fn add_typo_suggestion(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         suggestion: Option<TypoSuggestion>,\n         span: Span,\n     ) -> bool {\n@@ -1817,7 +1817,7 @@ fn find_span_immediately_after_crate_name(\n crate fn show_candidates(\n     definitions: &rustc_hir::definitions::Definitions,\n     session: &Session,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n     candidates: &[ImportSuggestion],"}, {"sha": "70be891aecc9acc4ef06b1bc9e9a3874f07812ca", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n@@ -606,11 +606,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         (err, candidates)\n     }\n \n-    fn detect_assoct_type_constraint_meant_as_path(\n-        &self,\n-        base_span: Span,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) {\n+    fn detect_assoct_type_constraint_meant_as_path(&self, base_span: Span, err: &mut Diagnostic) {\n         let Some(ty) = self.diagnostic_metadata.current_type_path else { return; };\n         let TyKind::Path(_, path) = &ty.kind else { return; };\n         for segment in &path.segments {\n@@ -675,11 +671,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     }\n \n     /// Given `where <T as Bar>::Baz: String`, suggest `where T: Bar<Baz = String>`.\n-    fn restrict_assoc_type_in_where_clause(\n-        &mut self,\n-        span: Span,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) -> bool {\n+    fn restrict_assoc_type_in_where_clause(&mut self, span: Span, err: &mut Diagnostic) -> bool {\n         // Detect that we are actually in a `where` predicate.\n         let (bounded_ty, bounds, where_span) =\n             if let Some(ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n@@ -875,7 +867,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     /// Returns `true` if able to provide context-dependent help.\n     fn smart_resolve_context_dependent_help(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         span: Span,\n         source: PathSource<'_>,\n         res: Res,\n@@ -885,7 +877,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let ns = source.namespace();\n         let is_expected = &|res| source.is_expected(res);\n \n-        let path_sep = |err: &mut DiagnosticBuilder<'_>, expr: &Expr| match expr.kind {\n+        let path_sep = |err: &mut Diagnostic, expr: &Expr| match expr.kind {\n             ExprKind::Field(_, ident) => {\n                 err.span_suggestion(\n                     expr.span,\n@@ -908,7 +900,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             _ => false,\n         };\n \n-        let find_span = |source: &PathSource<'_>, err: &mut DiagnosticBuilder<'_>| {\n+        let find_span = |source: &PathSource<'_>, err: &mut Diagnostic| {\n             match source {\n                 PathSource::Expr(Some(Expr { span, kind: ExprKind::Call(_, _), .. }))\n                 | PathSource::TupleStruct(span, _) => {\n@@ -1435,7 +1427,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         start.to(sm.next_point(start))\n     }\n \n-    fn type_ascription_suggestion(&self, err: &mut DiagnosticBuilder<'_>, base_span: Span) -> bool {\n+    fn type_ascription_suggestion(&self, err: &mut Diagnostic, base_span: Span) -> bool {\n         let sm = self.r.session.source_map();\n         let base_snippet = sm.span_to_snippet(base_span);\n         if let Some(&sp) = self.diagnostic_metadata.current_type_ascription.last() {\n@@ -1577,7 +1569,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     /// Adds a suggestion for using an enum's variant when an enum is used instead.\n     fn suggest_using_enum_variant(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         def_id: DefId,\n         span: Span,\n@@ -1910,7 +1902,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n     /// Returns whether to add `'static` lifetime to the suggested lifetime list.\n     crate fn report_elision_failure(\n         &mut self,\n-        db: &mut DiagnosticBuilder<'_>,\n+        // FIXME(eddyb) rename this since it's no longer a `DiagnosticBuilder`.\n+        db: &mut Diagnostic,\n         params: &[ElisionFailureInfo],\n     ) -> bool {\n         let mut m = String::new();\n@@ -2059,7 +2052,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n \n     crate fn add_missing_lifetime_specifiers_label(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         mut spans_with_counts: Vec<(Span, usize)>,\n         lifetime_names: &FxHashSet<Symbol>,\n         lifetime_spans: Vec<Span>,\n@@ -2090,7 +2083,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         }\n \n         let suggest_existing =\n-            |err: &mut DiagnosticBuilder<'_>,\n+            |err: &mut Diagnostic,\n              name: &str,\n              formatters: Vec<Option<Box<dyn Fn(&str) -> String>>>| {\n                 if let Some(MissingLifetimeSpot::HigherRanked { span: for_span, span_type }) =\n@@ -2174,7 +2167,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     Applicability::MaybeIncorrect,\n                 );\n             };\n-        let suggest_new = |err: &mut DiagnosticBuilder<'_>, suggs: Vec<Option<String>>| {\n+        let suggest_new = |err: &mut Diagnostic, suggs: Vec<Option<String>>| {\n             for missing in self.missing_named_lifetime_spots.iter().rev() {\n                 let mut introduce_suggestion = vec![];\n                 let msg;"}, {"sha": "206da43ffd459a2b69ef41278deafac3704d6d9e", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -9,7 +9,7 @@\n use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefIdMap, LocalDefId};\n@@ -1873,7 +1873,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     // or from `fn rah<'a>(T<'a>)` to `fn rah(T<'_>)`\n     fn suggest_eliding_single_use_lifetime(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         def_id: DefId,\n         lifetime: &hir::Lifetime,\n     ) {"}, {"sha": "ca6451b856da6c98ecf08cac0efb51864b96aab2", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -40,7 +40,7 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n@@ -3169,7 +3169,7 @@ impl<'a> Resolver<'a> {\n     /// ```\n     fn add_suggestion_for_rename_of_use(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         name: Symbol,\n         import: &Import<'_>,\n         binding_span: Span,\n@@ -3248,7 +3248,7 @@ impl<'a> Resolver<'a> {\n     /// as characters expected by span manipulations won't be present.\n     fn add_suggestion_for_duplicate_nested_use(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         import: &Import<'_>,\n         binding_span: Span,\n     ) {"}, {"sha": "5c71bef31c2f2999e59433eb3b659aadb0da2d83", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder};\n+use rustc_errors::{error_code, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n@@ -243,7 +243,7 @@ impl ParseSess {\n \n     /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n     /// parser to continue parsing the following operation as part of the same expression.\n-    pub fn expr_parentheses_needed(&self, err: &mut DiagnosticBuilder<'_>, span: Span) {\n+    pub fn expr_parentheses_needed(&self, err: &mut Diagnostic, span: Span) {\n         err.multipart_suggestion(\n             \"parentheses are required to parse this as an expression\",\n             vec![(span.shrink_to_lo(), \"(\".to_string()), (span.shrink_to_hi(), \")\".to_string())],"}, {"sha": "c83a60f5feb0549236314c8404f0f543c056ff03", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -19,7 +19,7 @@ use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n use rustc_span::edition::Edition;\n@@ -478,9 +478,9 @@ impl Session {\n \n     /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n     /// deduplicates on lint ID, span (if any), and message for this `Session`\n-    fn diag_once<'a, 'b>(\n-        &'a self,\n-        diag_builder: &'b mut DiagnosticBuilder<'a>,\n+    fn diag_once(\n+        &self,\n+        diag: &mut Diagnostic,\n         method: DiagnosticBuilderMethod,\n         msg_id: DiagnosticMessageId,\n         message: &str,\n@@ -491,39 +491,33 @@ impl Session {\n         if fresh {\n             match method {\n                 DiagnosticBuilderMethod::Note => {\n-                    diag_builder.note(message);\n+                    diag.note(message);\n                 }\n                 DiagnosticBuilderMethod::SpanNote => {\n                     let span = span_maybe.expect(\"`span_note` needs a span\");\n-                    diag_builder.span_note(span, message);\n+                    diag.span_note(span, message);\n                 }\n             }\n         }\n     }\n \n-    pub fn diag_span_note_once<'a, 'b>(\n-        &'a self,\n-        diag_builder: &'b mut DiagnosticBuilder<'a>,\n+    pub fn diag_span_note_once(\n+        &self,\n+        diag: &mut Diagnostic,\n         msg_id: DiagnosticMessageId,\n         span: Span,\n         message: &str,\n     ) {\n-        self.diag_once(\n-            diag_builder,\n-            DiagnosticBuilderMethod::SpanNote,\n-            msg_id,\n-            message,\n-            Some(span),\n-        );\n+        self.diag_once(diag, DiagnosticBuilderMethod::SpanNote, msg_id, message, Some(span));\n     }\n \n-    pub fn diag_note_once<'a, 'b>(\n-        &'a self,\n-        diag_builder: &'b mut DiagnosticBuilder<'a>,\n+    pub fn diag_note_once(\n+        &self,\n+        diag: &mut Diagnostic,\n         msg_id: DiagnosticMessageId,\n         message: &str,\n     ) {\n-        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, msg_id, message, None);\n+        self.diag_once(diag, DiagnosticBuilderMethod::Note, msg_id, message, None);\n     }\n \n     #[inline]"}, {"sha": "0f6997054b9e065ae391646dacb296c02caa3d8a", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -14,6 +14,7 @@ use crate::traits::{\n     PredicateObligations, SelectionContext,\n };\n //use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::CRATE_HIR_ID;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -50,7 +51,7 @@ pub struct OverlapResult<'tcx> {\n     pub involves_placeholder: bool,\n }\n \n-pub fn add_placeholder_note(err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n+pub fn add_placeholder_note(err: &mut Diagnostic) {\n     err.note(\n         \"this behavior recently changed as a result of a bug fix; \\\n          see rust-lang/rust#56105 for details\","}, {"sha": "396a7d37ca74862a9acf7db193597538a9ba8b64", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -12,7 +12,9 @@ use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCod\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorReported,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n@@ -1174,7 +1176,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     fn report_similar_impl_candidates(\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n     );\n \n     /// Gets the parent trait chain start\n@@ -1186,11 +1188,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     /// If the `Self` type of the unsatisfied trait `trait_ref` implements a trait\n     /// with the same path as `trait_ref`, a help message about\n     /// a probable version mismatch is added to `err`\n-    fn note_version_mismatch(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: &ty::PolyTraitRef<'tcx>,\n-    );\n+    fn note_version_mismatch(&self, err: &mut Diagnostic, trait_ref: &ty::PolyTraitRef<'tcx>);\n \n     /// Creates a `PredicateObligation` with `new_self_ty` replacing the existing type in the\n     /// `trait_ref`.\n@@ -1215,35 +1213,26 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         pred: ty::PolyTraitRef<'tcx>,\n     ) -> bool;\n \n-    fn note_obligation_cause(\n-        &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n-        obligation: &PredicateObligation<'tcx>,\n-    );\n+    fn note_obligation_cause(&self, err: &mut Diagnostic, obligation: &PredicateObligation<'tcx>);\n \n     fn suggest_unsized_bound_if_applicable(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     );\n \n     fn annotate_source_of_ambiguity(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         impls: &[DefId],\n         predicate: ty::Predicate<'tcx>,\n     );\n \n-    fn maybe_suggest_unsized_generics(\n-        &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n-        span: Span,\n-        node: Node<'hir>,\n-    );\n+    fn maybe_suggest_unsized_generics(&self, err: &mut Diagnostic, span: Span, node: Node<'hir>);\n \n     fn maybe_indirection_for_unsized(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         item: &'hir Item<'hir>,\n         param: &'hir GenericParam<'hir>,\n     ) -> bool;\n@@ -1572,7 +1561,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn report_similar_impl_candidates(\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n     ) {\n         if impl_candidates.is_empty() {\n             return;\n@@ -1649,11 +1638,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     /// If the `Self` type of the unsatisfied trait `trait_ref` implements a trait\n     /// with the same path as `trait_ref`, a help message about\n     /// a probable version mismatch is added to `err`\n-    fn note_version_mismatch(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        trait_ref: &ty::PolyTraitRef<'tcx>,\n-    ) {\n+    fn note_version_mismatch(&self, err: &mut Diagnostic, trait_ref: &ty::PolyTraitRef<'tcx>) {\n         let get_trait_impl = |trait_def_id| {\n             self.tcx.find_map_relevant_impl(trait_def_id, trait_ref.skip_binder().self_ty(), Some)\n         };\n@@ -1944,7 +1929,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn annotate_source_of_ambiguity(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         impls: &[DefId],\n         predicate: ty::Predicate<'tcx>,\n     ) {\n@@ -2088,11 +2073,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         })\n     }\n \n-    fn note_obligation_cause(\n-        &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n-        obligation: &PredicateObligation<'tcx>,\n-    ) {\n+    fn note_obligation_cause(&self, err: &mut Diagnostic, obligation: &PredicateObligation<'tcx>) {\n         // First, attempt to add note to this error with an async-await-specific\n         // message, and fall back to regular note otherwise.\n         if !self.maybe_note_obligation_cause_for_async_await(err, obligation) {\n@@ -2110,7 +2091,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn suggest_unsized_bound_if_applicable(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n         let (pred, item_def_id, span) = match (\n@@ -2139,7 +2120,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn maybe_suggest_unsized_generics<'hir>(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         span: Span,\n         node: Node<'hir>,\n     ) {\n@@ -2206,7 +2187,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn maybe_indirection_for_unsized<'hir>(\n         &self,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         item: &'hir Item<'hir>,\n         param: &'hir GenericParam<'hir>,\n     ) -> bool {"}, {"sha": "0338dd39cf63c08cbf41aaa14fdff18a6fc4cbe4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 49, "deletions": 68, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -10,7 +10,7 @@ use crate::traits::normalize_projection_type;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n-    error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style,\n+    error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, Style,\n };\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -47,64 +47,55 @@ pub enum GeneratorInteriorOrUpvar {\n pub trait InferCtxtExt<'tcx> {\n     fn suggest_restricting_param_bound(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         body_id: hir::HirId,\n     );\n \n     fn suggest_dereferences(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n-    fn get_closure_name(\n-        &self,\n-        def_id: DefId,\n-        err: &mut DiagnosticBuilder<'_>,\n-        msg: &str,\n-    ) -> Option<String>;\n+    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<String>;\n \n     fn suggest_fn_call(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         has_custom_message: bool,\n     ) -> bool;\n \n     fn suggest_remove_reference(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n-    fn suggest_remove_await(\n-        &self,\n-        obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    );\n+    fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic);\n \n     fn suggest_change_mut(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n     fn suggest_semicolon_removal(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n@@ -113,15 +104,15 @@ pub trait InferCtxtExt<'tcx> {\n \n     fn suggest_impl_trait(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         obligation: &PredicateObligation<'tcx>,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool;\n \n     fn point_at_returns_when_relevant(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     );\n \n@@ -135,21 +126,21 @@ pub trait InferCtxtExt<'tcx> {\n \n     fn suggest_fully_qualified_path(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         def_id: DefId,\n         span: Span,\n         trait_ref: DefId,\n     );\n \n     fn maybe_note_obligation_cause_for_async_await(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool;\n \n     fn note_obligation_cause_for_async_await(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n         interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n         inner_generator_body: Option<&hir::Body<'tcx>>,\n@@ -163,7 +154,7 @@ pub trait InferCtxtExt<'tcx> {\n \n     fn note_obligation_cause_code<T>(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         predicate: &T,\n         param_env: ty::ParamEnv<'tcx>,\n         cause_code: &ObligationCauseCode<'tcx>,\n@@ -172,12 +163,12 @@ pub trait InferCtxtExt<'tcx> {\n     ) where\n         T: fmt::Display;\n \n-    fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>);\n+    fn suggest_new_overflow_limit(&self, err: &mut Diagnostic);\n \n     /// Suggest to await before try: future? => future.await?\n     fn suggest_await_before_try(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         span: Span,\n@@ -202,7 +193,7 @@ fn suggest_restriction<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     generics: &hir::Generics<'tcx>,\n     msg: &str,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     fn_sig: Option<&hir::FnSig<'_>>,\n     projection: Option<&ty::ProjectionTy<'_>>,\n     trait_pred: ty::PolyTraitPredicate<'tcx>,\n@@ -329,7 +320,7 @@ fn suggest_restriction<'tcx>(\n impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_restricting_param_bound(\n         &self,\n-        mut err: &mut DiagnosticBuilder<'_>,\n+        mut err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         body_id: hir::HirId,\n     ) {\n@@ -493,7 +484,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_dereferences(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'tcx>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) {\n         // It only make sense when suggesting dereferences for arguments\n@@ -549,26 +540,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// Given a closure's `DefId`, return the given name of the closure.\n     ///\n     /// This doesn't account for reassignments, but it's only used for suggestions.\n-    fn get_closure_name(\n-        &self,\n-        def_id: DefId,\n-        err: &mut DiagnosticBuilder<'_>,\n-        msg: &str,\n-    ) -> Option<String> {\n-        let get_name =\n-            |err: &mut DiagnosticBuilder<'_>, kind: &hir::PatKind<'_>| -> Option<String> {\n-                // Get the local name of this closure. This can be inaccurate because\n-                // of the possibility of reassignment, but this should be good enough.\n-                match &kind {\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n-                        Some(format!(\"{}\", name))\n-                    }\n-                    _ => {\n-                        err.note(&msg);\n-                        None\n-                    }\n+    fn get_closure_name(&self, def_id: DefId, err: &mut Diagnostic, msg: &str) -> Option<String> {\n+        let get_name = |err: &mut Diagnostic, kind: &hir::PatKind<'_>| -> Option<String> {\n+            // Get the local name of this closure. This can be inaccurate because\n+            // of the possibility of reassignment, but this should be good enough.\n+            match &kind {\n+                hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, name, None) => {\n+                    Some(format!(\"{}\", name))\n                 }\n-            };\n+                _ => {\n+                    err.note(&msg);\n+                    None\n+                }\n+            }\n+        };\n \n         let hir = self.tcx.hir();\n         let hir_id = hir.local_def_id_to_hir_id(def_id.as_local()?);\n@@ -590,7 +575,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_fn_call(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) {\n         let self_ty = match trait_pred.self_ty().no_bound_vars() {\n@@ -683,7 +668,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         poly_trait_pred: ty::PolyTraitPredicate<'tcx>,\n         has_custom_message: bool,\n     ) -> bool {\n@@ -817,7 +802,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_remove_reference(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) {\n         let span = obligation.cause.span;\n@@ -874,11 +859,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_remove_await(\n-        &self,\n-        obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) {\n+    fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic) {\n         let span = obligation.cause.span;\n \n         if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code().peel_derives() {\n@@ -936,7 +917,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_change_mut(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) {\n         let points_at_arg = matches!(\n@@ -1012,7 +993,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     fn suggest_semicolon_removal(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) {\n@@ -1063,7 +1044,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// emitted.\n     fn suggest_impl_trait(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         obligation: &PredicateObligation<'tcx>,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n@@ -1256,7 +1237,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn point_at_returns_when_relevant(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n         match obligation.cause.code().peel_derives() {\n@@ -1345,7 +1326,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn suggest_fully_qualified_path(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         def_id: DefId,\n         span: Span,\n         trait_ref: DefId,\n@@ -1411,7 +1392,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// Returns `true` if an async-await specific note was added to the diagnostic.\n     fn maybe_note_obligation_cause_for_async_await(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> bool {\n         debug!(\n@@ -1639,7 +1620,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// `maybe_note_obligation_cause_for_async_await`'s documentation comment.\n     fn note_obligation_cause_for_async_await(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n         interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n         inner_generator_body: Option<&hir::Body<'tcx>>,\n@@ -1896,7 +1877,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn note_obligation_cause_code<T>(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         predicate: &T,\n         param_env: ty::ParamEnv<'tcx>,\n         cause_code: &ObligationCauseCode<'tcx>,\n@@ -2412,7 +2393,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_new_overflow_limit(&self, err: &mut Diagnostic) {\n         let suggested_limit = match self.tcx.recursion_limit() {\n             Limit(0) => Limit(2),\n             limit => limit * 2,\n@@ -2427,7 +2408,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn suggest_await_before_try(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n         span: Span,\n@@ -2615,7 +2596,7 @@ impl NextTypeParamName for &[hir::GenericParam<'_>] {\n }\n \n fn suggest_trait_object_return_type_alternatives(\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     ret_ty: Span,\n     trait_obj: &str,\n     is_object_safe: bool,"}, {"sha": "8bcb1ccb5846d42586dc3168dac96015641e5b86", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -29,7 +29,7 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::{Diagnostic, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n@@ -64,7 +64,7 @@ pub enum IntercrateAmbiguityCause {\n impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut Diagnostic) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }\n "}, {"sha": "f800e7a140297ab3003065160724531c8213eaa5", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_span::Span;\n use smallvec::smallvec;\n use smallvec::SmallVec;\n@@ -43,12 +43,7 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n \n     /// Adds diagnostic labels to `diag` for the expansion path of a trait through all intermediate\n     /// trait aliases.\n-    pub fn label_with_exp_info(\n-        &self,\n-        diag: &mut DiagnosticBuilder<'_>,\n-        top_label: &str,\n-        use_desc: &str,\n-    ) {\n+    pub fn label_with_exp_info(&self, diag: &mut Diagnostic, top_label: &str, use_desc: &str) {\n         diag.span_label(self.top().1, top_label);\n         if self.path.len() > 1 {\n             for (_, sp) in self.path.iter().rev().skip(1).take(self.path.len() - 2) {"}, {"sha": "b16bf33f06abf9a209048967a01614fa37cd25ba", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -49,7 +49,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        let add_braces_suggestion = |arg: &GenericArg<'_>, err: &mut DiagnosticBuilder<'_>| {\n+        let add_braces_suggestion = |arg: &GenericArg<'_>, err: &mut Diagnostic| {\n             let suggestions = vec![\n                 (arg.span().shrink_to_lo(), String::from(\"{ \")),\n                 (arg.span().shrink_to_hi(), String::from(\" }\")),"}, {"sha": "9529e1528a8b994007974f82d54a2789a4948b5c", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,6 +1,6 @@\n use crate::check::coercion::{AsCoercionSite, CoerceMany};\n use crate::check::{Diverges, Expectation, FnCtxt, Needs};\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n@@ -132,7 +132,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &cause,\n                 Some(&arm.body),\n                 arm_ty,\n-                Some(&mut |err: &mut DiagnosticBuilder<'_>| {\n+                Some(&mut |err: &mut Diagnostic| {\n                     let can_coerce_to_return_ty = match self.ret_coercion.as_ref() {\n                         Some(ret_coercion) if self.in_tail_expr => {\n                             let ret_ty = ret_coercion.borrow().expected_ty();"}, {"sha": "d5187c109e33d9f9166c2626a05d854ce735134a", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -2,7 +2,7 @@ use super::method::MethodCallee;\n use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{Namespace, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -277,7 +277,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// likely intention is to call the closure, suggest `(||{})()`. (#55851)\n     fn identify_bad_closure_def_and_call(\n         &self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         hir_id: hir::HirId,\n         callee_node: &hir::ExprKind<'_>,\n         callee_span: Span,\n@@ -304,7 +304,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// likely intention is to create an array containing tuples.\n     fn maybe_suggest_bad_array_definition(\n         &self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         call_expr: &'tcx hir::Expr<'tcx>,\n         callee_expr: &'tcx hir::Expr<'tcx>,\n     ) -> bool {"}, {"sha": "ed68bcfe433f8dd32d119b3c4676abf8a04090c7", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -37,7 +37,7 @@\n \n use crate::astconv::AstConv;\n use crate::check::FnCtxt;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1307,7 +1307,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         &mut self,\n         fcx: &FnCtxt<'a, 'tcx>,\n         cause: &ObligationCause<'tcx>,\n-        augment_error: &mut dyn FnMut(&mut DiagnosticBuilder<'_>),\n+        augment_error: &mut dyn FnMut(&mut Diagnostic),\n         label_unit_as_expected: bool,\n     ) {\n         self.coerce_inner(\n@@ -1330,7 +1330,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         cause: &ObligationCause<'tcx>,\n         expression: Option<&'tcx hir::Expr<'tcx>>,\n         mut expression_ty: Ty<'tcx>,\n-        augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder<'_>)>,\n+        augment_error: Option<&mut dyn FnMut(&mut Diagnostic)>,\n         label_expression_as_expected: bool,\n     ) {\n         // Incorporate whatever type inference information we have\n@@ -1603,7 +1603,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n     fn add_impl_trait_explanation<'a>(\n         &self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         cause: &ObligationCause<'tcx>,\n         fcx: &FnCtxt<'a, 'tcx>,\n         expected: Ty<'tcx>,"}, {"sha": "4e22e41588ad88540060cff90033ef545752fd12", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -4,7 +4,7 @@ use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::ObligationCause;\n \n use rustc_ast::util::parser::PREC_POSTFIX;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n@@ -23,7 +23,7 @@ use std::iter;\n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn emit_coerce_suggestions(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'tcx>,\n         expr_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n@@ -155,7 +155,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn annotate_expected_due_to_let_ty(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         error: TypeError<'_>,\n     ) {\n@@ -262,7 +262,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// sole field is of the found type, suggest such variants. (Issue #42764)\n     fn suggest_compatible_variants(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         expected: Ty<'tcx>,\n         expr_ty: Ty<'tcx>,\n@@ -899,7 +899,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn check_for_cast(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         checked_ty: Ty<'tcx>,\n         expected_ty: Ty<'tcx>,\n@@ -1039,7 +1039,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let in_const_context = self.tcx.hir().is_inside_const_context(expr.hir_id);\n \n         let suggest_fallible_into_or_lhs_from =\n-            |err: &mut DiagnosticBuilder<'_>, exp_to_found_is_fallible: bool| {\n+            |err: &mut Diagnostic, exp_to_found_is_fallible: bool| {\n                 // If we know the expression the expected type is derived from, we might be able\n                 // to suggest a widening conversion rather than a narrowing one (which may\n                 // panic). For example, given x: u8 and y: u32, if we know the span of \"x\",\n@@ -1083,7 +1083,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n         let suggest_to_change_suffix_or_into =\n-            |err: &mut DiagnosticBuilder<'_>,\n+            |err: &mut Diagnostic,\n              found_to_exp_is_fallible: bool,\n              exp_to_found_is_fallible: bool| {\n                 let exp_is_lhs =\n@@ -1282,11 +1282,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // Report the type inferred by the return statement.\n-    fn report_closure_inferred_return_type(\n-        &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        expected: Ty<'tcx>,\n-    ) {\n+    fn report_closure_inferred_return_type(&self, err: &mut Diagnostic, expected: Ty<'tcx>) {\n         if let Some(sp) = self.ret_coercion_span.get() {\n             // If the closure has an explicit return type annotation, or if\n             // the closure's return type has been inferred from outside"}, {"sha": "a335295587e7cbacf2df6512aa8eb95c9584bf9c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -25,6 +25,7 @@ use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructEx\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n+use rustc_errors::Diagnostic;\n use rustc_errors::ErrorReported;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n@@ -60,7 +61,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n-        extend_err: impl Fn(&mut DiagnosticBuilder<'_>),\n+        extend_err: impl Fn(&mut Diagnostic),\n     ) -> Ty<'tcx> {\n         self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected), extend_err)\n     }\n@@ -69,7 +70,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n-        extend_err: impl Fn(&mut DiagnosticBuilder<'_>),\n+        extend_err: impl Fn(&mut Diagnostic),\n     ) -> Ty<'tcx> {\n         let expected_ty = expected.to_option(&self).unwrap_or(self.tcx.types.bool);\n         let mut ty = self.check_expr_with_expectation(expr, expected);\n@@ -1923,7 +1924,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_await_on_field_access(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         field_ident: Ident,\n         base: &'tcx hir::Expr<'tcx>,\n         ty: Ty<'tcx>,\n@@ -2123,7 +2124,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn point_at_param_definition(&self, err: &mut DiagnosticBuilder<'_>, param: ty::ParamTy) {\n+    fn point_at_param_definition(&self, err: &mut Diagnostic, param: ty::ParamTy) {\n         let generics = self.tcx.generics_of(self.body_id.owner.to_def_id());\n         let generic_param = generics.type_param(&param, self.tcx);\n         if let ty::GenericParamDefKind::Type { synthetic: true, .. } = generic_param.kind {\n@@ -2142,7 +2143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_fields_on_recordish(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         def: &'tcx ty::AdtDef,\n         field: Ident,\n         access_span: Span,\n@@ -2171,7 +2172,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn maybe_suggest_array_indexing(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         base: &hir::Expr<'_>,\n         field: Ident,\n@@ -2195,7 +2196,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_first_deref_field(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         base: &hir::Expr<'_>,\n         field: Ident,"}, {"sha": "0fe5e74da89bfbf2cdcb98c8f5b4076ce121d4f0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -8,7 +8,7 @@ use crate::check::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy};\n \n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{Applicability, Diagnostic, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -953,7 +953,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(in super::super) fn note_internal_mutation_in_method(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -998,7 +998,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(in super::super) fn note_need_for_fn_pointer(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {"}, {"sha": "982fd49d0fac440044dec4ba191a96a0fcae4cdd", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -11,7 +11,7 @@ use crate::check::{\n \n use rustc_ast as ast;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticId};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -890,7 +890,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         blk: &'tcx hir::Block<'tcx>,\n         expected_ty: Ty<'tcx>,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n     ) {\n         if let Some((span_semi, boxed)) = self.could_remove_semicolon(blk, expected_ty) {\n             if let StatementAsExpression::NeedsBoxing = boxed {"}, {"sha": "9e4b88e3746806ccd0847f2302bbfd812dad4be4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -4,7 +4,7 @@ use crate::astconv::AstConv;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_span::{self, MultiSpan, Span};\n \n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n@@ -22,11 +22,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub(in super::super) fn suggest_semicolon_at_end(\n-        &self,\n-        span: Span,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) {\n+    pub(in super::super) fn suggest_semicolon_at_end(&self, span: Span, err: &mut Diagnostic) {\n         err.span_suggestion_short(\n             span.shrink_to_hi(),\n             \"consider using a semicolon here\",\n@@ -42,7 +38,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// - Possible missing return type if the return type is the default, and not `fn main()`.\n     pub fn suggest_mismatched_types_on_tail(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -81,7 +77,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ```\n     fn suggest_fn_call(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -211,7 +207,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn suggest_deref_ref_or_into(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -312,7 +308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// in the heap by calling `Box::new()`.\n     pub(in super::super) fn suggest_boxing_when_appropriate(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -347,7 +343,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// suggest a non-capturing closure\n     pub(in super::super) fn suggest_no_capture_closure(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) {\n@@ -382,7 +378,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(skip(self, err))]\n     pub(in super::super) fn suggest_calling_boxed_future_when_appropriate(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -477,7 +473,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// it suggests adding a semicolon.\n     fn suggest_missing_semicolon(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expression: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n     ) {\n@@ -518,7 +514,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// type.\n     pub(in super::super) fn suggest_missing_return_type(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         fn_decl: &hir::FnDecl<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n@@ -580,7 +576,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ```\n     fn try_suggest_return_impl_trait(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n         fn_id: hir::HirId,\n@@ -681,7 +677,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(in super::super) fn suggest_missing_break_or_return_expr(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &'tcx hir::Expr<'tcx>,\n         fn_decl: &hir::FnDecl<'_>,\n         expected: Ty<'tcx>,\n@@ -751,7 +747,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(in super::super) fn suggest_missing_parentheses(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n     ) {\n         let sp = self.tcx.sess.source_map().start_point(expr.span);"}, {"sha": "999aafbd5375a4de8baeb2ae158720c3dba5a42d", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -14,7 +14,7 @@ pub use self::MethodError::*;\n use crate::check::FnCtxt;\n use crate::ObligationCause;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n@@ -141,7 +141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, err, call_expr))]\n     crate fn suggest_method_call(\n         &self,\n-        err: &mut DiagnosticBuilder<'a>,\n+        err: &mut Diagnostic,\n         msg: &str,\n         method_name: Ident,\n         self_ty: Ty<'tcx>,"}, {"sha": "fadafe013b4c57387ec75a05301718c5ef5d3eb6", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@\n \n use crate::check::FnCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -98,7 +98,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let report_candidates = |span: Span,\n-                                 err: &mut DiagnosticBuilder<'_>,\n+                                 err: &mut Diagnostic,\n                                  mut sources: Vec<CandidateSource>,\n                                  sugg_span: Span| {\n             sources.sort();\n@@ -625,10 +625,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if self.is_fn_ty(rcvr_ty, span) {\n-                    fn report_function<T: std::fmt::Display>(\n-                        err: &mut DiagnosticBuilder<'_>,\n-                        name: T,\n-                    ) {\n+                    fn report_function<T: std::fmt::Display>(err: &mut Diagnostic, name: T) {\n                         err.note(\n                             &format!(\"`{}` is a function, perhaps you wish to call it\", name,),\n                         );\n@@ -1111,7 +1108,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     crate fn note_unmet_impls_on_type(\n         &self,\n-        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         errors: Vec<FulfillmentError<'tcx>>,\n     ) {\n         let all_local_types_needing_impls =\n@@ -1187,7 +1184,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_derive(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         unsatisfied_predicates: &[(\n             ty::Predicate<'tcx>,\n             Option<ty::Predicate<'tcx>>,\n@@ -1287,7 +1284,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_await_before_method(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         item_name: Ident,\n         ty: Ty<'tcx>,\n         call: &hir::Expr<'_>,\n@@ -1311,7 +1308,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_use_candidates(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         mut msg: String,\n         candidates: Vec<DefId>,\n     ) {\n@@ -1416,7 +1413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_valid_traits(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         valid_out_of_scope_traits: Vec<DefId>,\n     ) -> bool {\n         if !valid_out_of_scope_traits.is_empty() {\n@@ -1454,7 +1451,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn suggest_traits_to_import(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         rcvr_ty: Ty<'tcx>,\n         item_name: Ident,\n@@ -1983,7 +1980,7 @@ fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Op\n fn print_disambiguation_help<'tcx>(\n     item_name: Ident,\n     args: Option<&'tcx [hir::Expr<'tcx>]>,\n-    err: &mut DiagnosticBuilder<'_>,\n+    err: &mut Diagnostic,\n     trait_name: String,\n     rcvr_ty: Ty<'_>,\n     kind: ty::AssocKind,"}, {"sha": "5873b0f52a60eac6f1dbbb017cf21714841974dc", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@\n use super::method::MethodCallee;\n use super::{has_expected_num_generic_args, FnCtxt};\n use rustc_ast as ast;\n-use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{self, struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::adjustment::{\n@@ -483,7 +483,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// suggest calling the function. Returns `true` if suggestion would apply (even if not given).\n     fn add_type_neq_err_label(\n         &self,\n-        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         span: Span,\n         ty: Ty<'tcx>,\n         other_ty: Ty<'tcx>,\n@@ -545,7 +545,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rhs_expr: &'tcx hir::Expr<'tcx>,\n         lhs_ty: Ty<'tcx>,\n         rhs_ty: Ty<'tcx>,\n-        err: &mut rustc_errors::DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         is_assign: IsAssign,\n         op: hir::BinOp,\n     ) -> bool {\n@@ -937,7 +937,7 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n fn suggest_constraining_param(\n     tcx: TyCtxt<'_>,\n     body_id: hir::HirId,\n-    mut err: &mut DiagnosticBuilder<'_>,\n+    mut err: &mut Diagnostic,\n     lhs_ty: Ty<'_>,\n     rhs_ty: Ty<'_>,\n     missing_trait: &str,"}, {"sha": "3e01d73b0ba68b82b2b95950e569ac0b9be97539", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -2,7 +2,7 @@ use crate::check::FnCtxt;\n use rustc_ast as ast;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n@@ -512,7 +512,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    fn endpoint_has_type(&self, err: &mut DiagnosticBuilder<'_>, span: Span, ty: Ty<'_>) {\n+    fn endpoint_has_type(&self, err: &mut Diagnostic, span: Span, ty: Ty<'_>) {\n         if !ty.references_error() {\n             err.span_label(span, &format!(\"this is of type `{}`\", ty));\n         }\n@@ -645,7 +645,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn borrow_pat_suggestion(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n+        err: &mut Diagnostic,\n         pat: &Pat<'_>,\n         inner: &Pat<'_>,\n         expected: Ty<'tcx>,\n@@ -783,7 +783,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn maybe_suggest_range_literal(\n         &self,\n-        e: &mut DiagnosticBuilder<'_>,\n+        e: &mut Diagnostic,\n         opt_def_id: Option<hir::def_id::DefId>,\n         ident: Ident,\n     ) -> bool {"}, {"sha": "014d26280653b37297449432aa71e2755f44620a", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,5 +1,5 @@\n use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n use rustc_middle::hir::map::fn_sig;\n use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n@@ -370,7 +370,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     }\n \n     /// Builds the `expected 1 type argument / supplied 2 type arguments` message.\n-    fn notify(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn notify(&self, err: &mut Diagnostic) {\n         let (quantifier, bound) = self.get_quantifier_and_bound();\n         let provided_args = self.num_provided_args();\n \n@@ -422,7 +422,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest(&self, err: &mut Diagnostic) {\n         debug!(\n             \"suggest(self.provided {:?}, self.gen_args.span(): {:?})\",\n             self.num_provided_args(),\n@@ -449,7 +449,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// ```text\n     /// type Map = HashMap<String>;\n     /// ```\n-    fn suggest_adding_args(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_adding_args(&self, err: &mut Diagnostic) {\n         if self.gen_args.parenthesized {\n             return;\n         }\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_adding_lifetime_args(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_adding_lifetime_args(&self, err: &mut Diagnostic) {\n         debug!(\"suggest_adding_lifetime_args(path_segment: {:?})\", self.path_segment);\n         let num_missing_args = self.num_missing_lifetime_args();\n         let num_params_to_take = num_missing_args;\n@@ -547,7 +547,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_adding_type_and_const_args(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_adding_type_and_const_args(&self, err: &mut Diagnostic) {\n         let num_missing_args = self.num_missing_type_or_const_args();\n         let msg = format!(\"add missing {} argument{}\", self.kind(), pluralize!(num_missing_args));\n \n@@ -602,7 +602,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// ```text\n     /// type Map = HashMap<String, String, String, String>;\n     /// ```\n-    fn suggest_removing_args_or_generics(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn suggest_removing_args_or_generics(&self, err: &mut Diagnostic) {\n         let num_provided_lt_args = self.num_provided_lifetime_args();\n         let num_provided_type_const_args = self.num_provided_type_or_const_args();\n         let num_provided_args = num_provided_lt_args + num_provided_type_const_args;\n@@ -617,7 +617,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n         let remove_entire_generics = num_redundant_args >= self.gen_args.args.len();\n \n-        let remove_lifetime_args = |err: &mut DiagnosticBuilder<'_>| {\n+        let remove_lifetime_args = |err: &mut Diagnostic| {\n             let mut lt_arg_spans = Vec::new();\n             let mut found_redundant = false;\n             for arg in self.gen_args.args {\n@@ -659,7 +659,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             );\n         };\n \n-        let remove_type_or_const_args = |err: &mut DiagnosticBuilder<'_>| {\n+        let remove_type_or_const_args = |err: &mut Diagnostic| {\n             let mut gen_arg_spans = Vec::new();\n             let mut found_redundant = false;\n             for arg in self.gen_args.args {\n@@ -729,7 +729,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     }\n \n     /// Builds the `type defined here` message.\n-    fn show_definition(&self, err: &mut DiagnosticBuilder<'_>) {\n+    fn show_definition(&self, err: &mut Diagnostic) {\n         let mut spans: MultiSpan = if let Some(def_span) = self.tcx.def_ident_span(self.def_id) {\n             if self.tcx.sess.source_map().span_to_snippet(def_span).is_ok() {\n                 def_span.into()"}, {"sha": "3ebd28e83b1220689ae249b89e458fca6a343185", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -3,7 +3,7 @@\n //! [RFC 1946]: https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md\n \n use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::def::{\n     DefKind,\n     Namespace::{self, *},\n@@ -1434,7 +1434,7 @@ impl LinkCollector<'_, '_> {\n     ) {\n         // The resolved item did not match the disambiguator; give a better error than 'not found'\n         let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-        let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n+        let callback = |diag: &mut Diagnostic, sp: Option<rustc_span::Span>| {\n             let note = format!(\n                 \"this link resolved to {} {}, which is not {} {}\",\n                 resolved.article(),\n@@ -1866,7 +1866,7 @@ fn report_diagnostic(\n     lint: &'static Lint,\n     msg: &str,\n     DiagnosticInfo { item, ori_link: _, dox, link_range }: &DiagnosticInfo<'_>,\n-    decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n+    decorate: impl FnOnce(&mut Diagnostic, Option<rustc_span::Span>),\n ) {\n     let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n         Some(hir_id) => hir_id,\n@@ -2240,7 +2240,7 @@ fn ambiguity_error(\n /// disambiguator.\n fn suggest_disambiguator(\n     res: Res,\n-    diag: &mut DiagnosticBuilder<'_>,\n+    diag: &mut Diagnostic,\n     path_str: &str,\n     ori_link: &str,\n     sp: Option<rustc_span::Span>,"}, {"sha": "a20aa12c9ff4771a1a3e56543d980bb42b207ec6", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -489,7 +489,7 @@ fn emit_branches_sharing_code_lint(\n         add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit();\n     }\n \n-    let add_optional_msgs = |diag: &mut DiagnosticBuilder<'_>| {\n+    let add_optional_msgs = |diag: &mut Diagnostic| {\n         if add_expr_note {\n             diag.note(\"The end suggestion probably needs some adjustments to use the expression result correctly\");\n         }"}, {"sha": "d5430a8c91750784b0033ccb226c9d352c632b60", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n \n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n \n         fn suggestion<'tcx>(\n             cx: &LateContext<'tcx>,\n-            diag: &mut DiagnosticBuilder<'_>,\n+            diag: &mut Diagnostic,\n             generics_span: Span,\n             generics_suggestion_span: Span,\n             target: &ImplicitHasherType<'_>,"}, {"sha": "dd7177e0131ca5d3ef2ff523a6d68a1b023ccf26", "filename": "src/tools/clippy/clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,7 +1,7 @@\n //! checks for `#[inline]` on trait methods without bodies\n \n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::sugg::DiagnosticExt;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{TraitFn, TraitItem, TraitItemKind};"}, {"sha": "91d7274f5f5a899d4f271337e07badd620ef85dc", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_hir::{HirIdMap, HirIdSet};\n@@ -196,7 +196,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     }\n \n                     // Dereference suggestion\n-                    let sugg = |diag: &mut DiagnosticBuilder<'_>| {\n+                    let sugg = |diag: &mut Diagnostic| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n                                 if can_type_implement_copy(cx.tcx, cx.param_env, ty).is_ok() {"}, {"sha": "4cb79648ae36a054e13ce8aeda7f558fccb34d7a", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::return_ty;\n use clippy_utils::source::snippet;\n-use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::sugg::DiagnosticExt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "a927788e6a44ad9931c8bc7521fdea5f4006fa5c", "filename": "src/tools/clippy/clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -8,13 +8,13 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n use std::env;\n \n-fn docs_link(diag: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n+fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n             diag.help(&format!(\n@@ -145,7 +145,7 @@ pub fn span_lint_and_then<C, S, F>(cx: &C, lint: &'static Lint, sp: S, msg: &str\n where\n     C: LintContext,\n     S: Into<MultiSpan>,\n-    F: FnOnce(&mut DiagnosticBuilder<'_>),\n+    F: FnOnce(&mut Diagnostic),\n {\n     cx.struct_span_lint(lint, sp, |diag| {\n         let mut diag = diag.build(msg);\n@@ -169,7 +169,7 @@ pub fn span_lint_hir_and_then(\n     hir_id: HirId,\n     sp: impl Into<MultiSpan>,\n     msg: &str,\n-    f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n+    f: impl FnOnce(&mut Diagnostic),\n ) {\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n         let mut diag = diag.build(msg);\n@@ -219,7 +219,7 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n /// appear once per\n /// replacement. In human-readable format though, it only appears once before\n /// the whole suggestion.\n-pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg: I)\n+pub fn multispan_sugg<I>(diag: &mut Diagnostic, help_msg: &str, sugg: I)\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n@@ -232,7 +232,7 @@ where\n /// multiple spans. This is tracked in issue [rustfix#141](https://github.com/rust-lang/rustfix/issues/141).\n /// Suggestions with multiple spans will be silently ignored.\n pub fn multispan_sugg_with_applicability<I>(\n-    diag: &mut DiagnosticBuilder<'_>,\n+    diag: &mut Diagnostic,\n     help_msg: &str,\n     applicability: Applicability,\n     sugg: I,"}, {"sha": "63c442e70085a1015825b4731f3b079ccd985af1", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ff9e0aef03d48fdecc2d114311217010ec1d81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=02ff9e0aef03d48fdecc2d114311217010ec1d81", "patch": "@@ -673,8 +673,8 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n         })\n }\n \n-/// Convenience extension trait for `DiagnosticBuilder`.\n-pub trait DiagnosticBuilderExt<T: LintContext> {\n+/// Convenience extension trait for `Diagnostic`.\n+pub trait DiagnosticExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///\n     /// Correctly handles indentation of the attribute and item.\n@@ -721,7 +721,7 @@ pub trait DiagnosticBuilderExt<T: LintContext> {\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n-impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'_> {\n+impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n         cx: &T,"}]}