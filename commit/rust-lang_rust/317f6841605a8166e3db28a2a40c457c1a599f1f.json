{"sha": "317f6841605a8166e3db28a2a40c457c1a599f1f", "node_id": "C_kwDOAAsO6NoAKDMxN2Y2ODQxNjA1YTgxNjZlM2RiMjhhMmE0MGM0NTdjMWE1OTlmMWY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-03-11T23:58:14Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-03-11T23:59:32Z"}, "message": "diagnostics: do not spurriously claim something is \"not an iterator\"\n\nFixes a minor regression caused by #94746, where iter::Filter is\nspurriously declared \"not an iterator.\"", "tree": {"sha": "01391dd38e0cb5d0829ed11cd4cd2e7c59df0be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01391dd38e0cb5d0829ed11cd4cd2e7c59df0be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317f6841605a8166e3db28a2a40c457c1a599f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317f6841605a8166e3db28a2a40c457c1a599f1f", "html_url": "https://github.com/rust-lang/rust/commit/317f6841605a8166e3db28a2a40c457c1a599f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317f6841605a8166e3db28a2a40c457c1a599f1f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "335ffbfa547df94ac236f5c56130cecf99c8d82b", "url": "https://api.github.com/repos/rust-lang/rust/commits/335ffbfa547df94ac236f5c56130cecf99c8d82b", "html_url": "https://github.com/rust-lang/rust/commit/335ffbfa547df94ac236f5c56130cecf99c8d82b"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "ac71e9bde427c369934c7c14905029a62abff510", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/317f6841605a8166e3db28a2a40c457c1a599f1f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f6841605a8166e3db28a2a40c457c1a599f1f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=317f6841605a8166e3db28a2a40c457c1a599f1f", "patch": "@@ -574,6 +574,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // Pick out the list of unimplemented traits on the receiver.\n                     // This is used for custom error messages with the `#[rustc_on_unimplemented]` attribute.\n                     let mut unimplemented_traits = FxHashMap::default();\n+                    let mut unimplemented_traits_only = true;\n                     for (predicate, _parent_pred, cause) in &unsatisfied_predicates {\n                         if let (ty::PredicateKind::Trait(p), Some(cause)) =\n                             (predicate.kind().skip_binder(), cause.as_ref())\n@@ -596,6 +597,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n \n+                    // Make sure that, if any traits other than the found ones were involved,\n+                    // we don't don't report an unimplemented trait.\n+                    // We don't want to say that `iter::Cloned` is not an interator, just\n+                    // because of some non-Clone item being iterated over.\n+                    for (predicate, _parent_pred, _cause) in &unsatisfied_predicates {\n+                        match predicate.kind().skip_binder() {\n+                            ty::PredicateKind::Trait(p)\n+                                if unimplemented_traits.contains_key(&p.trait_ref.def_id) => {}\n+                            _ => {\n+                                unimplemented_traits_only = false;\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n                     let mut collect_type_param_suggestions =\n                         |self_ty: Ty<'tcx>, parent_pred: ty::Predicate<'tcx>, obligation: &str| {\n                             // We don't care about regions here, so it's fine to skip the binder here.\n@@ -839,7 +855,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .join(\"\\n\");\n                         let actual_prefix = actual.prefix_string(self.tcx);\n                         info!(\"unimplemented_traits.len() == {}\", unimplemented_traits.len());\n-                        let (primary_message, label) = if unimplemented_traits.len() == 1 {\n+                        let (primary_message, label) = if unimplemented_traits.len() == 1\n+                            && unimplemented_traits_only\n+                        {\n                             unimplemented_traits\n                                 .into_iter()\n                                 .next()"}, {"sha": "17d2292baaf683298c17e48edb0474e1b311f438", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/317f6841605a8166e3db28a2a40c457c1a599f1f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317f6841605a8166e3db28a2a40c457c1a599f1f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=317f6841605a8166e3db28a2a40c457c1a599f1f", "patch": "@@ -5,6 +5,6 @@\n use std::iter::once;\n fn main() {\n     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-    //~^ ERROR not an iterator\n+    //~^ ERROR the method\n     //~| ERROR type mismatch in closure arguments\n }"}, {"sha": "a8bcdf5efe91e30214a5f24f844e1d80dfd2f79a", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/317f6841605a8166e3db28a2a40c457c1a599f1f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/317f6841605a8166e3db28a2a40c457c1a599f1f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=317f6841605a8166e3db28a2a40c457c1a599f1f", "patch": "@@ -12,11 +12,11 @@ note: required by a bound in `filter`\n LL |         P: FnMut(&Self::Item) -> bool,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `filter`\n \n-error[E0599]: `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` is not an iterator\n+error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                       --------------  ^^^^^ `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` is not an iterator\n+   |                                       --------------  ^^^^^ method cannot be called on `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` due to unsatisfied trait bounds\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`"}]}