{"sha": "65698ae9f30f5ad72224edd1884fb4ddd1279366", "node_id": "C_kwDOAAsO6NoAKDY1Njk4YWU5ZjMwZjVhZDcyMjI0ZWRkMTg4NGZiNGRkZDEyNzkzNjY", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-11-22T05:29:00Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-12-09T01:24:39Z"}, "message": "Add LLVM KCFI support to the Rust compiler\n\nThis commit adds LLVM Kernel Control Flow Integrity (KCFI) support to\nthe Rust compiler. It initially provides forward-edge control flow\nprotection for operating systems kernels for Rust-compiled code only by\naggregating function pointers in groups identified by their return and\nparameter types. (See llvm/llvm-project@cff5bef.)\n\nForward-edge control flow protection for C or C++ and Rust -compiled\ncode \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code\nshare the same virtual address space) will be provided in later work as\npart of this project by identifying C char and integer type uses at the\ntime types are encoded (see Type metadata in the design document in the\ntracking issue #89653).\n\nLLVM KCFI can be enabled with -Zsanitizer=kcfi.\n\nCo-authored-by: bjorn3 <17426603+bjorn3@users.noreply.github.com>", "tree": {"sha": "d5f5845b0ff7e964255762d7ca97c16ca5ecb064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f5845b0ff7e964255762d7ca97c16ca5ecb064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65698ae9f30f5ad72224edd1884fb4ddd1279366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65698ae9f30f5ad72224edd1884fb4ddd1279366", "html_url": "https://github.com/rust-lang/rust/commit/65698ae9f30f5ad72224edd1884fb4ddd1279366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65698ae9f30f5ad72224edd1884fb4ddd1279366/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bc90fea3b441234a84b49fdafeb75815eebbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bc90fea3b441234a84b49fdafeb75815eebbab", "html_url": "https://github.com/rust-lang/rust/commit/b7bc90fea3b441234a84b49fdafeb75815eebbab"}], "stats": {"total": 259, "additions": 231, "deletions": 28}, "files": [{"sha": "51108df4406d5f75b4fb74cc252c65562901a555", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -4269,6 +4269,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"tracing\",\n+ \"twox-hash\",\n ]\n \n [[package]]\n@@ -5197,6 +5198,17 @@ dependencies = [\n  \"tracing-subscriber\",\n ]\n \n+[[package]]\n+name = \"twox-hash\"\n+version = \"1.6.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"rand 0.8.5\",\n+ \"static_assertions\",\n+]\n+\n [[package]]\n name = \"type-map\"\n version = \"0.4.0\""}, {"sha": "89a415cdb36cd2d8d98c0b1f132541e018364f39", "filename": "compiler/rustc_codegen_gcc/src/type_.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -300,4 +300,8 @@ impl<'gcc, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         // Unsupported.\n         self.context.new_rvalue_from_int(self.int_type, 0)\n     }\n+\n+    fn set_kcfi_type_metadata(&self, _function: RValue<'gcc>, _kcfi_typeid: u32) {\n+        // Unsupported.\n+    }\n }"}, {"sha": "668d929270530023e08c94352b9d7522b3871e75", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -88,7 +88,8 @@ pub(crate) unsafe fn codegen(\n             callee,\n             args.as_ptr(),\n             args.len() as c_uint,\n-            None,\n+            [].as_ptr(),\n+            0 as c_uint,\n         );\n         llvm::LLVMSetTailCall(ret, True);\n         if output.is_some() {\n@@ -132,8 +133,15 @@ pub(crate) unsafe fn codegen(\n         .enumerate()\n         .map(|(i, _)| llvm::LLVMGetParam(llfn, i as c_uint))\n         .collect::<Vec<_>>();\n-    let ret =\n-        llvm::LLVMRustBuildCall(llbuilder, ty, callee, args.as_ptr(), args.len() as c_uint, None);\n+    let ret = llvm::LLVMRustBuildCall(\n+        llbuilder,\n+        ty,\n+        callee,\n+        args.as_ptr(),\n+        args.len() as c_uint,\n+        [].as_ptr(),\n+        0 as c_uint,\n+    );\n     llvm::LLVMSetTailCall(ret, True);\n     llvm::LLVMBuildRetVoid(llbuilder);\n     llvm::LLVMDisposeBuilder(llbuilder);"}, {"sha": "83bffb20e0ce02c706f191199119627fefe1a4f5", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -20,6 +20,7 @@ use rustc_middle::ty::layout::{\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n+use rustc_symbol_mangling::typeid::kcfi_typeid_for_fnabi;\n use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n@@ -225,9 +226,25 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         debug!(\"invoke {:?} with args ({:?})\", llfn, args);\n \n         let args = self.check_call(\"invoke\", llty, llfn, args);\n-        let bundle = funclet.map(|funclet| funclet.bundle());\n-        let bundle = bundle.as_ref().map(|b| &*b.raw);\n+        let funclet_bundle = funclet.map(|funclet| funclet.bundle());\n+        let funclet_bundle = funclet_bundle.as_ref().map(|b| &*b.raw);\n+        let mut bundles = vec![funclet_bundle];\n+\n+        // Set KCFI operand bundle\n+        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n+        let kcfi_bundle =\n+            if self.tcx.sess.is_sanitizer_kcfi_enabled() && fn_abi.is_some() && is_indirect_call {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap());\n+                Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n+            } else {\n+                None\n+            };\n+        if kcfi_bundle.is_some() {\n+            let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n+            bundles.push(kcfi_bundle);\n+        }\n \n+        bundles.retain(|bundle| bundle.is_some());\n         let invoke = unsafe {\n             llvm::LLVMRustBuildInvoke(\n                 self.llbuilder,\n@@ -237,7 +254,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 args.len() as c_uint,\n                 then,\n                 catch,\n-                bundle,\n+                bundles.as_ptr(),\n+                bundles.len() as c_uint,\n                 UNNAMED,\n             )\n         };\n@@ -1143,7 +1161,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 llfn,\n                 args.as_ptr() as *const &llvm::Value,\n                 args.len() as c_uint,\n-                None,\n+                [].as_ptr(),\n+                0 as c_uint,\n             );\n         }\n     }\n@@ -1159,17 +1178,34 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         debug!(\"call {:?} with args ({:?})\", llfn, args);\n \n         let args = self.check_call(\"call\", llty, llfn, args);\n-        let bundle = funclet.map(|funclet| funclet.bundle());\n-        let bundle = bundle.as_ref().map(|b| &*b.raw);\n+        let funclet_bundle = funclet.map(|funclet| funclet.bundle());\n+        let funclet_bundle = funclet_bundle.as_ref().map(|b| &*b.raw);\n+        let mut bundles = vec![funclet_bundle];\n+\n+        // Set KCFI operand bundle\n+        let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n+        let kcfi_bundle =\n+            if self.tcx.sess.is_sanitizer_kcfi_enabled() && fn_abi.is_some() && is_indirect_call {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap());\n+                Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n+            } else {\n+                None\n+            };\n+        if kcfi_bundle.is_some() {\n+            let kcfi_bundle = kcfi_bundle.as_ref().map(|b| &*b.raw);\n+            bundles.push(kcfi_bundle);\n+        }\n \n+        bundles.retain(|bundle| bundle.is_some());\n         let call = unsafe {\n             llvm::LLVMRustBuildCall(\n                 self.llbuilder,\n                 llty,\n                 llfn,\n                 args.as_ptr() as *const &llvm::Value,\n                 args.len() as c_uint,\n-                bundle,\n+                bundles.as_ptr(),\n+                bundles.len() as c_uint,\n             )\n         };\n         if let Some(fn_abi) = fn_abi {"}, {"sha": "aa1735f38acfd1e8c4c65e49f1998939407e84af", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -250,6 +250,11 @@ pub unsafe fn create_module<'ll>(\n         );\n     }\n \n+    if sess.is_sanitizer_kcfi_enabled() {\n+        let kcfi = \"kcfi\\0\".as_ptr().cast();\n+        llvm::LLVMRustAddModuleFlag(llmod, llvm::LLVMModFlagBehavior::Override, kcfi, 1);\n+    }\n+\n     // Control Flow Guard is currently only supported by the MSVC linker on Windows.\n     if sess.target.is_like_msvc {\n         match sess.opts.cg.control_flow_guard {"}, {"sha": "6a575095f7e45dbc5e05a7b86cebd7ce2851925e", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -20,7 +20,7 @@ use crate::type_::Type;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::TypeMembershipMethods;\n use rustc_middle::ty::Ty;\n-use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n+use rustc_symbol_mangling::typeid::{kcfi_typeid_for_fnabi, typeid_for_fnabi};\n use smallvec::SmallVec;\n \n /// Declare a function.\n@@ -136,6 +136,11 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             self.set_type_metadata(llfn, typeid);\n         }\n \n+        if self.tcx.sess.is_sanitizer_kcfi_enabled() {\n+            let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n+            self.set_kcfi_type_metadata(llfn, kcfi_typeid);\n+        }\n+\n         llfn\n     }\n "}, {"sha": "9bcc39cc7601d22d3553c08688c104fdc7019f52", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -427,6 +427,7 @@ pub enum MetadataType {\n     MD_type = 19,\n     MD_vcall_visibility = 28,\n     MD_noundef = 29,\n+    MD_kcfi_type = 36,\n }\n \n /// LLVMRustAsmDialect\n@@ -1060,6 +1061,7 @@ extern \"C\" {\n     pub fn LLVMGlobalSetMetadata<'a>(Val: &'a Value, KindID: c_uint, Metadata: &'a Metadata);\n     pub fn LLVMRustGlobalAddMetadata<'a>(Val: &'a Value, KindID: c_uint, Metadata: &'a Metadata);\n     pub fn LLVMValueAsMetadata(Node: &Value) -> &Metadata;\n+    pub fn LLVMIsAFunction(Val: &Value) -> Option<&Value>;\n \n     // Operations on constants of any type\n     pub fn LLVMConstNull(Ty: &Type) -> &Value;\n@@ -1270,7 +1272,8 @@ extern \"C\" {\n         NumArgs: c_uint,\n         Then: &'a BasicBlock,\n         Catch: &'a BasicBlock,\n-        Bundle: Option<&OperandBundleDef<'a>>,\n+        OpBundles: *const Option<&OperandBundleDef<'a>>,\n+        NumOpBundles: c_uint,\n         Name: *const c_char,\n     ) -> &'a Value;\n     pub fn LLVMBuildLandingPad<'a>(\n@@ -1640,7 +1643,8 @@ extern \"C\" {\n         Fn: &'a Value,\n         Args: *const &'a Value,\n         NumArgs: c_uint,\n-        Bundle: Option<&OperandBundleDef<'a>>,\n+        OpBundles: *const Option<&OperandBundleDef<'a>>,\n+        NumOpBundles: c_uint,\n     ) -> &'a Value;\n     pub fn LLVMRustBuildMemCpy<'a>(\n         B: &Builder<'a>,"}, {"sha": "a5fab3479e71ef03e069e1427fedc897a41b1f09", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -316,4 +316,19 @@ impl<'ll, 'tcx> TypeMembershipMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             )\n         }\n     }\n+\n+    fn set_kcfi_type_metadata(&self, function: &'ll Value, kcfi_typeid: u32) {\n+        let kcfi_type_metadata = self.const_u32(kcfi_typeid);\n+        unsafe {\n+            llvm::LLVMGlobalSetMetadata(\n+                function,\n+                llvm::MD_kcfi_type as c_uint,\n+                llvm::LLVMMDNodeInContext2(\n+                    self.llcx,\n+                    &llvm::LLVMValueAsMetadata(kcfi_type_metadata),\n+                    1,\n+                ),\n+            )\n+        }\n+    }\n }"}, {"sha": "109161ccc836865e36ea8151bc61f236125347db", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -122,6 +122,7 @@ pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n pub trait TypeMembershipMethods<'tcx>: Backend<'tcx> {\n     fn set_type_metadata(&self, function: Self::Function, typeid: String);\n     fn typeid_metadata(&self, typeid: String) -> Self::Value;\n+    fn set_kcfi_type_metadata(&self, function: Self::Function, typeid: u32);\n }\n \n pub trait ArgAbiMethods<'tcx>: HasCodegen<'tcx> {"}, {"sha": "6d8e78a0f185dc6a16c577b6bb2a6c386f51389a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -394,7 +394,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(instruction_set, Normal, template!(List: \"set\"), ErrorPreceding),\n     gated!(\n         no_sanitize, Normal,\n-        template!(List: \"address, memory, thread\"), DuplicatesOk,\n+        template!(List: \"address, kcfi, memory, thread\"), DuplicatesOk,\n         experimental!(no_sanitize)\n     ),\n     gated!(no_coverage, Normal, template!(Word), WarnFollowing, experimental!(no_coverage)),"}, {"sha": "7dce80de561c89e0fe4e79b89ddec3ebb6bc0717", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -1859,6 +1859,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::ADDRESS;\n                     } else if item.has_name(sym::cfi) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::CFI;\n+                    } else if item.has_name(sym::kcfi) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::KCFI;\n                     } else if item.has_name(sym::memory) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.has_name(sym::memtag) {\n@@ -1872,7 +1874,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n+                            .note(\"expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "49d028009fa5ce406c006316db2f7ea01150c579", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -1460,13 +1460,13 @@ extern \"C\" void LLVMRustFreeOperandBundleDef(OperandBundleDef *Bundle) {\n \n extern \"C\" LLVMValueRef LLVMRustBuildCall(LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Fn,\n                                           LLVMValueRef *Args, unsigned NumArgs,\n-                                          OperandBundleDef *Bundle) {\n+                                          OperandBundleDef **OpBundles,\n+                                          unsigned NumOpBundles) {\n   Value *Callee = unwrap(Fn);\n   FunctionType *FTy = unwrap<FunctionType>(Ty);\n-  unsigned Len = Bundle ? 1 : 0;\n-  ArrayRef<OperandBundleDef> Bundles = makeArrayRef(Bundle, Len);\n   return wrap(unwrap(B)->CreateCall(\n-      FTy, Callee, makeArrayRef(unwrap(Args), NumArgs), Bundles));\n+      FTy, Callee, makeArrayRef(unwrap(Args), NumArgs),\n+      makeArrayRef(*OpBundles, NumOpBundles)));\n }\n \n extern \"C\" LLVMValueRef LLVMRustGetInstrProfIncrementIntrinsic(LLVMModuleRef M) {\n@@ -1506,14 +1506,14 @@ extern \"C\" LLVMValueRef\n LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Fn,\n                     LLVMValueRef *Args, unsigned NumArgs,\n                     LLVMBasicBlockRef Then, LLVMBasicBlockRef Catch,\n-                    OperandBundleDef *Bundle, const char *Name) {\n+                    OperandBundleDef **OpBundles, unsigned NumOpBundles,\n+                    const char *Name) {\n   Value *Callee = unwrap(Fn);\n   FunctionType *FTy = unwrap<FunctionType>(Ty);\n-  unsigned Len = Bundle ? 1 : 0;\n-  ArrayRef<OperandBundleDef> Bundles = makeArrayRef(Bundle, Len);\n   return wrap(unwrap(B)->CreateInvoke(FTy, Callee, unwrap(Then), unwrap(Catch),\n                                       makeArrayRef(unwrap(Args), NumArgs),\n-                                      Bundles, Name));\n+                                      makeArrayRef(*OpBundles, NumOpBundles),\n+                                      Name));\n }\n \n extern \"C\" void LLVMRustPositionBuilderAtStart(LLVMBuilderRef B,"}, {"sha": "088e9be28d3eea933de228e9ed8e4d06acb74808", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -368,7 +368,7 @@ mod desc {\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_oom_strategy: &str = \"either `panic` or `abort`\";\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n+    pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `kcfi`, `leak`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n     pub const parse_cfguard: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -675,6 +675,7 @@ mod parse {\n                 *slot |= match s {\n                     \"address\" => SanitizerSet::ADDRESS,\n                     \"cfi\" => SanitizerSet::CFI,\n+                    \"kcfi\" => SanitizerSet::KCFI,\n                     \"leak\" => SanitizerSet::LEAK,\n                     \"memory\" => SanitizerSet::MEMORY,\n                     \"memtag\" => SanitizerSet::MEMTAG,"}, {"sha": "f13f42cdf752da3eaff1e568c952cc02cec9a1e1", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -683,6 +683,10 @@ impl Session {\n         self.opts.unstable_opts.sanitizer.contains(SanitizerSet::CFI)\n     }\n \n+    pub fn is_sanitizer_kcfi_enabled(&self) -> bool {\n+        self.opts.unstable_opts.sanitizer.contains(SanitizerSet::KCFI)\n+    }\n+\n     /// Check whether this compile session and crate type use static crt.\n     pub fn crt_static(&self, crate_type: Option<CrateType>) -> bool {\n         if !self.target.crt_static_respected {\n@@ -1530,6 +1534,14 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n+    // LLVM CFI and KCFI are mutually exclusive\n+    if sess.is_sanitizer_cfi_enabled() && sess.is_sanitizer_kcfi_enabled() {\n+        sess.emit_err(CannotMixAndMatchSanitizers {\n+            first: \"cfi\".to_string(),\n+            second: \"kcfi\".to_string(),\n+        });\n+    }\n+\n     if sess.opts.unstable_opts.stack_protector != StackProtector::None {\n         if !sess.target.options.supports_stack_protector {\n             sess.emit_warning(StackProtectorNotSupportedForTarget {"}, {"sha": "55eae88caf4127aafc07f31468892f357b0f450c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -828,6 +828,7 @@ symbols! {\n         item_like_imports,\n         iter,\n         iter_repeat,\n+        kcfi,\n         keyword,\n         kind,\n         kreg,"}, {"sha": "4e447eab02e7c9d7e9dd581355282fa6a52de6c9", "filename": "compiler/rustc_symbol_mangling/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2FCargo.toml?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -10,6 +10,7 @@ bitflags = \"1.2.1\"\n tracing = \"0.1\"\n punycode = \"0.4.0\"\n rustc-demangle = \"0.1.21\"\n+twox-hash = \"1.6.3\"\n \n rustc_span = { path = \"../rustc_span\" }\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "53983bed718922b3521462a88794d327bd5eceae", "filename": "compiler/rustc_symbol_mangling/src/typeid.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -3,6 +3,8 @@\n \n use rustc_middle::ty::{FnSig, Ty, TyCtxt};\n use rustc_target::abi::call::FnAbi;\n+use std::hash::Hasher;\n+use twox_hash::XxHash64;\n \n mod typeid_itanium_cxx_abi;\n use typeid_itanium_cxx_abi::TypeIdOptions;\n@@ -16,3 +18,25 @@ pub fn typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>)\n pub fn typeid_for_fnsig<'tcx>(tcx: TyCtxt<'tcx>, fn_sig: &FnSig<'tcx>) -> String {\n     typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, TypeIdOptions::NO_OPTIONS)\n }\n+\n+/// Returns an LLVM KCFI type metadata identifier for the specified FnAbi.\n+pub fn kcfi_typeid_for_fnabi<'tcx>(tcx: TyCtxt<'tcx>, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> u32 {\n+    // An LLVM KCFI type metadata identifier is a 32-bit constant produced by taking the lower half\n+    // of the xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+    let mut hash: XxHash64 = Default::default();\n+    hash.write(\n+        typeid_itanium_cxx_abi::typeid_for_fnabi(tcx, fn_abi, TypeIdOptions::NO_OPTIONS).as_bytes(),\n+    );\n+    hash.finish() as u32\n+}\n+\n+/// Returns an LLVM KCFI type metadata identifier for the specified FnSig.\n+pub fn kcfi_typeid_for_fnsig<'tcx>(tcx: TyCtxt<'tcx>, fn_sig: &FnSig<'tcx>) -> u32 {\n+    // An LLVM KCFI type metadata identifier is a 32-bit constant produced by taking the lower half\n+    // of the xxHash64 of the type metadata identifier. (See llvm/llvm-project@cff5bef.)\n+    let mut hash: XxHash64 = Default::default();\n+    hash.write(\n+        typeid_itanium_cxx_abi::typeid_for_fnsig(tcx, fn_sig, TypeIdOptions::NO_OPTIONS).as_bytes(),\n+    );\n+    hash.finish() as u32\n+}"}, {"sha": "aca52e1478eb8ac44fd5294ac34a65422d27ec73", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -6,13 +6,16 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n+use super::{\n+    Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, SanitizerSet, Target, TargetOptions,\n+};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n         features: \"+strict-align,+neon,+fp-armv8\".into(),\n+        supported_sanitizers: SanitizerSet::KCFI,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(128),"}, {"sha": "65ab7b953a17baa4a2a3fc0b061d293912c47fda", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -803,7 +803,7 @@ impl ToJson for StackProbeType {\n \n bitflags::bitflags! {\n     #[derive(Default, Encodable, Decodable)]\n-    pub struct SanitizerSet: u8 {\n+    pub struct SanitizerSet: u16 {\n         const ADDRESS = 1 << 0;\n         const LEAK    = 1 << 1;\n         const MEMORY  = 1 << 2;\n@@ -812,6 +812,7 @@ bitflags::bitflags! {\n         const CFI     = 1 << 5;\n         const MEMTAG  = 1 << 6;\n         const SHADOWCALLSTACK = 1 << 7;\n+        const KCFI    = 1 << 8;\n     }\n }\n \n@@ -823,6 +824,7 @@ impl SanitizerSet {\n         Some(match self {\n             SanitizerSet::ADDRESS => \"address\",\n             SanitizerSet::CFI => \"cfi\",\n+            SanitizerSet::KCFI => \"kcfi\",\n             SanitizerSet::LEAK => \"leak\",\n             SanitizerSet::MEMORY => \"memory\",\n             SanitizerSet::MEMTAG => \"memtag\",\n@@ -858,6 +860,7 @@ impl IntoIterator for SanitizerSet {\n         [\n             SanitizerSet::ADDRESS,\n             SanitizerSet::CFI,\n+            SanitizerSet::KCFI,\n             SanitizerSet::LEAK,\n             SanitizerSet::MEMORY,\n             SanitizerSet::MEMTAG,\n@@ -2292,6 +2295,7 @@ impl Target {\n                             base.$key_name |= match s.as_str() {\n                                 Some(\"address\") => SanitizerSet::ADDRESS,\n                                 Some(\"cfi\") => SanitizerSet::CFI,\n+                                Some(\"kcfi\") => SanitizerSet::KCFI,\n                                 Some(\"leak\") => SanitizerSet::LEAK,\n                                 Some(\"memory\") => SanitizerSet::MEMORY,\n                                 Some(\"memtag\") => SanitizerSet::MEMTAG,"}, {"sha": "32060c35c11b835da211d0dee16e652294082cd8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -5,7 +5,7 @@\n // features.\n \n use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n-use super::{RelroLevel, StackProbeType, Target, TargetOptions};\n+use super::{RelroLevel, SanitizerSet, StackProbeType, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n@@ -20,6 +20,7 @@ pub fn target() -> Target {\n         features:\n             \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n                 .into(),\n+        supported_sanitizers: SanitizerSet::KCFI,\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         code_model: Some(CodeModel::Kernel),"}, {"sha": "c2eb852aec3c7662c1a7e1a3f92d23ecb3229631", "filename": "src/test/codegen/sanitizer-kcfi-add-kcfi-flag.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-add-kcfi-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-add-kcfi-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-add-kcfi-flag.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -0,0 +1,11 @@\n+// Verifies that \"kcfi\" module flag is added.\n+//\n+// needs-sanitizer-kcfi\n+// compile-flags: -Ctarget-feature=-crt-static -Zsanitizer=kcfi\n+\n+#![crate_type=\"lib\"]\n+\n+pub fn foo() {\n+}\n+\n+// CHECK: !{{[0-9]+}} = !{i32 4, !\"kcfi\", i32 1}"}, {"sha": "0afd9727517edf4c4e74930b08c9e87425250938", "filename": "src/test/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -0,0 +1,47 @@\n+// Verifies that KCFI type metadata for functions are emitted.\n+//\n+// revisions: aarch64 x86_64\n+// [aarch64] compile-flags: --target aarch64-unknown-none\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86_64] compile-flags: --target x86_64-unknown-none\n+// [x86_64] needs-llvm-components:\n+// compile-flags: -Cno-prepopulate-passes -Zsanitizer=kcfi\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+#[lang=\"copy\"]\n+trait Copy { }\n+\n+impl Copy for i32 {}\n+\n+pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}foo\n+    // FIXME(rcvalle): Change <unknown kind #36> to !kcfi_type when Rust is updated to LLVM 16\n+    // CHECK-SAME: {{.*}}!<unknown kind #36> ![[TYPE1:[0-9]+]]\n+    // CHECK: call i32 %f(i32 %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n+    f(arg)\n+}\n+\n+pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}bar\n+    // FIXME(rcvalle): Change <unknown kind #36> to !kcfi_type when Rust is updated to LLVM 16\n+    // CHECK-SAME: {{.*}}!<unknown kind #36> ![[TYPE2:[0-9]+]]\n+    // CHECK: call i32 %f(i32 %arg1, i32 %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n+    f(arg1, arg2)\n+}\n+\n+pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n+    // CHECK-LABEL: define{{.*}}baz\n+    // FIXME(rcvalle): Change <unknown kind #36> to !kcfi_type when Rust is updated to LLVM 16\n+    // CHECK-SAME: {{.*}}!<unknown kind #36> ![[TYPE3:[0-9]+]]\n+    // CHECK: call i32 %f(i32 %arg1, i32 %arg2, i32 %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n+    f(arg1, arg2, arg3)\n+}\n+\n+// CHECK: ![[TYPE1]] = !{i32 653723426}\n+// CHECK: ![[TYPE2]] = !{i32 412174924}\n+// CHECK: ![[TYPE3]] = !{i32 -636668840}"}, {"sha": "4600034952b395df64ffb824ea6a3b252be9beae", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `cfi`, `hwaddress`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\n+   = note: expected one of: `address`, `cfi`, `hwaddress`, `kcfi`, `memory`, `memtag`, `shadow-call-stack`, or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "eae9e80a397c44ee5bcf3b55eb0b11fd7b8fcff2", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -906,6 +906,7 @@ pub fn make_test_description<R: Read>(\n     let has_asm_support = config.has_asm_support();\n     let has_asan = util::ASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_cfi = util::CFI_SUPPORTED_TARGETS.contains(&&*config.target);\n+    let has_kcfi = util::KCFI_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n@@ -957,6 +958,7 @@ pub fn make_test_description<R: Read>(\n             && config.parse_name_directive(ln, \"needs-sanitizer-support\");\n         ignore |= !has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\");\n         ignore |= !has_cfi && config.parse_name_directive(ln, \"needs-sanitizer-cfi\");\n+        ignore |= !has_kcfi && config.parse_name_directive(ln, \"needs-sanitizer-kcfi\");\n         ignore |= !has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\");\n         ignore |= !has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\");\n         ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");"}, {"sha": "ccba313ee357bf10c387f58cc99a8f5c6e5ceca2", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -42,6 +42,8 @@ pub const CFI_SUPPORTED_TARGETS: &[&str] = &[\n     \"x86_64-unknown-netbsd\",\n ];\n \n+pub const KCFI_SUPPORTED_TARGETS: &[&str] = &[\"aarch64-linux-none\", \"x86_64-linux-none\"];\n+\n pub const LSAN_SUPPORTED_TARGETS: &[&str] = &[\n     // FIXME: currently broken, see #88132\n     // \"aarch64-apple-darwin\","}, {"sha": "36dec1d415f3089c324ae7bf77d318cdc3632247", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65698ae9f30f5ad72224edd1884fb4ddd1279366/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=65698ae9f30f5ad72224edd1884fb4ddd1279366", "patch": "@@ -214,6 +214,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"snap\",\n     \"stable_deref_trait\",\n     \"stacker\",\n+    \"static_assertions\",\n     \"syn\",\n     \"synstructure\",\n     \"tempfile\",\n@@ -234,6 +235,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"tracing-log\",\n     \"tracing-subscriber\",\n     \"tracing-tree\",\n+    \"twox-hash\",\n     \"type-map\",\n     \"typenum\",\n     \"unic-char-property\","}]}