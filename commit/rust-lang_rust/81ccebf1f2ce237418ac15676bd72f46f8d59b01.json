{"sha": "81ccebf1f2ce237418ac15676bd72f46f8d59b01", "node_id": "C_kwDOAAsO6NoAKDgxY2NlYmYxZjJjZTIzNzQxOGFjMTU2NzZiZDcyZjQ2ZjhkNTliMDE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-16T21:56:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-16T21:56:57Z"}, "message": "internal: Refactor lifetime completion context fields", "tree": {"sha": "fd4d0c28bd17fbc983618f99e0b70a3513d8b4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4d0c28bd17fbc983618f99e0b70a3513d8b4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ccebf1f2ce237418ac15676bd72f46f8d59b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ccebf1f2ce237418ac15676bd72f46f8d59b01", "html_url": "https://github.com/rust-lang/rust/commit/81ccebf1f2ce237418ac15676bd72f46f8d59b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ccebf1f2ce237418ac15676bd72f46f8d59b01/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbd52c78f4f2aa38ef0b5e4cf9709fae2c918f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbd52c78f4f2aa38ef0b5e4cf9709fae2c918f1", "html_url": "https://github.com/rust-lang/rust/commit/2fbd52c78f4f2aa38ef0b5e4cf9709fae2c918f1"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "283dc021d6ecb0c71339ded36c8ce09d35c5546f", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/81ccebf1f2ce237418ac15676bd72f46f8d59b01/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ccebf1f2ce237418ac15676bd72f46f8d59b01/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=81ccebf1f2ce237418ac15676bd72f46f8d59b01", "patch": "@@ -10,23 +10,27 @@\n use hir::ScopeDef;\n use syntax::ast;\n \n-use crate::{completions::Completions, context::CompletionContext};\n+use crate::{\n+    completions::Completions,\n+    context::{CompletionContext, LifetimeContext},\n+};\n \n /// Completes lifetimes.\n pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.lifetime_allowed {\n-        return;\n-    }\n+    let lp = match &ctx.lifetime_ctx {\n+        Some(LifetimeContext::Lifetime) => None,\n+        Some(LifetimeContext::LifetimeParam(param)) => param.as_ref(),\n+        _ => return,\n+    };\n     let lp_string;\n-    let param_lifetime =\n-        match (&ctx.name_syntax, ctx.lifetime_param_syntax.as_ref().and_then(|lp| lp.lifetime())) {\n-            (Some(ast::NameLike::Lifetime(lt)), Some(lp)) if lp == lt.clone() => return,\n-            (Some(_), Some(lp)) => {\n-                lp_string = lp.to_string();\n-                Some(&*lp_string)\n-            }\n-            _ => None,\n-        };\n+    let param_lifetime = match (&ctx.name_syntax, lp.and_then(|lp| lp.lifetime())) {\n+        (Some(ast::NameLike::Lifetime(lt)), Some(lp)) if lp == lt.clone() => return,\n+        (Some(_), Some(lp)) => {\n+            lp_string = lp.to_string();\n+            Some(&*lp_string)\n+        }\n+        _ => None,\n+    };\n \n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n@@ -42,7 +46,7 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n \n /// Completes labels.\n pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_label_ref {\n+    if !matches!(ctx.lifetime_ctx, Some(LifetimeContext::LabelRef)) {\n         return;\n     }\n     ctx.scope.process_all_names(&mut |name, res| {"}, {"sha": "25da46f1d7e00d3cc95338532539c983e043348b", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/81ccebf1f2ce237418ac15676bd72f46f8d59b01/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ccebf1f2ce237418ac15676bd72f46f8d59b01/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=81ccebf1f2ce237418ac15676bd72f46f8d59b01", "patch": "@@ -60,6 +60,14 @@ pub(super) struct PatternContext {\n     pub(super) is_param: Option<ParamKind>,\n }\n \n+#[derive(Debug)]\n+pub(super) enum LifetimeContext {\n+    LifetimeParam(Option<ast::LifetimeParam>),\n+    Lifetime,\n+    LabelRef,\n+    LabelDef,\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(crate) enum CallKind {\n     Pat,\n@@ -96,16 +104,12 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) impl_def: Option<ast::Impl>,\n     pub(super) name_syntax: Option<ast::NameLike>,\n \n-    // potentially set if we are completing a lifetime\n-    pub(super) lifetime_param_syntax: Option<ast::LifetimeParam>,\n-    pub(super) lifetime_allowed: bool,\n-    pub(super) is_label_ref: bool,\n-\n     pub(super) completion_location: Option<ImmediateLocation>,\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n     pub(super) previous_token: Option<SyntaxToken>,\n \n+    pub(super) lifetime_ctx: Option<LifetimeContext>,\n     pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) path_context: Option<PathCompletionContext>,\n     pub(super) locals: Vec<(String, Local)>,\n@@ -161,9 +165,7 @@ impl<'a> CompletionContext<'a> {\n             function_def: None,\n             impl_def: None,\n             name_syntax: None,\n-            lifetime_param_syntax: None,\n-            lifetime_allowed: false,\n-            is_label_ref: false,\n+            lifetime_ctx: None,\n             pattern_ctx: None,\n             completion_location: None,\n             prev_sibling: None,\n@@ -294,8 +296,14 @@ impl<'a> CompletionContext<'a> {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }\n \n-    pub(crate) fn expects_assoc_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n+    pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n+        match &self.completion_location {\n+            Some(\n+                ImmediateLocation::MethodCall { receiver, .. }\n+                | ImmediateLocation::FieldAccess { receiver, .. },\n+            ) => receiver.as_ref(),\n+            _ => None,\n+        }\n     }\n \n     pub(crate) fn has_dot_receiver(&self) -> bool {\n@@ -306,14 +314,8 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n-    pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n-        match &self.completion_location {\n-            Some(\n-                ImmediateLocation::MethodCall { receiver, .. }\n-                | ImmediateLocation::FieldAccess { receiver, .. },\n-            ) => receiver.as_ref(),\n-            _ => None,\n-        }\n+    pub(crate) fn expects_assoc_item(&self) -> bool {\n+        matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n     }\n \n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n@@ -676,19 +678,15 @@ impl<'a> CompletionContext<'a> {\n                 return;\n             }\n \n-            match_ast! {\n+            self.lifetime_ctx = Some(match_ast! {\n                 match parent {\n-                    ast::LifetimeParam(_it) => {\n-                        self.lifetime_allowed = true;\n-                        self.lifetime_param_syntax =\n-                            self.sema.find_node_at_offset_with_macros(original_file, offset);\n-                    },\n-                    ast::BreakExpr(_it) => self.is_label_ref = true,\n-                    ast::ContinueExpr(_it) => self.is_label_ref = true,\n-                    ast::Label(_it) => (),\n-                    _ => self.lifetime_allowed = true,\n+                    ast::LifetimeParam(_it) => LifetimeContext::LifetimeParam(self.sema.find_node_at_offset_with_macros(original_file, offset)),\n+                    ast::BreakExpr(_it) => LifetimeContext::LabelRef,\n+                    ast::ContinueExpr(_it) => LifetimeContext::LabelRef,\n+                    ast::Label(_it) => LifetimeContext::LabelDef,\n+                    _ => LifetimeContext::Lifetime,\n                 }\n-            }\n+            });\n         }\n     }\n "}]}