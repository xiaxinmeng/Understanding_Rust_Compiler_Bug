{"sha": "d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MWIyNTQxOWJlYzVhM2U4MzlmZGIxNmY3MjBjZmIxMmU1MmRkZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T07:35:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T07:35:44Z"}, "message": "Auto merge of #3786 - rust-lang:rustup, r=Manishearth\n\nRustup to rustc master (32471f7ea 2019-02-19)\n\nNone", "tree": {"sha": "e5111600508b18697e15e684ca290575404b3cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5111600508b18697e15e684ca290575404b3cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "html_url": "https://github.com/rust-lang/rust/commit/d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c10620da8cb58bf660fbca234b2fa1492e91bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c10620da8cb58bf660fbca234b2fa1492e91bd2", "html_url": "https://github.com/rust-lang/rust/commit/6c10620da8cb58bf660fbca234b2fa1492e91bd2"}, {"sha": "68476e1d13d1f90c5125156ce3a6b5f3febd1176", "url": "https://api.github.com/repos/rust-lang/rust/commits/68476e1d13d1f90c5125156ce3a6b5f3febd1176", "html_url": "https://github.com/rust-lang/rust/commit/68476e1d13d1f90c5125156ce3a6b5f3febd1176"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "db9dbea97dc7aa68541ecadcb220e160c8aed746", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "patch": "@@ -113,7 +113,7 @@ fn check_fn_inner<'a, 'tcx>(\n     let mut bounds_lts = Vec::new();\n     let types = generics.params.iter().filter(|param| match param.kind {\n         GenericParamKind::Type { .. } => true,\n-        GenericParamKind::Lifetime { .. } => false,\n+        _ => false,\n     });\n     for typ in types {\n         for bound in &typ.bounds {\n@@ -133,7 +133,7 @@ fn check_fn_inner<'a, 'tcx>(\n                 if let Some(ref params) = *params {\n                     let lifetimes = params.args.iter().filter_map(|arg| match arg {\n                         GenericArg::Lifetime(lt) => Some(lt),\n-                        GenericArg::Type(_) => None,\n+                        _ => None,\n                     });\n                     for bound in lifetimes {\n                         if bound.name != LifetimeName::Static && !bound.is_elided() {\n@@ -316,7 +316,7 @@ impl<'v, 't> RefVisitor<'v, 't> {\n             if !last_path_segment.parenthesized\n                 && !last_path_segment.args.iter().any(|arg| match arg {\n                     GenericArg::Lifetime(_) => true,\n-                    GenericArg::Type(_) => false,\n+                    _ => false,\n                 })\n             {\n                 let hir_id = self.cx.tcx.hir().node_to_hir_id(ty.id);"}, {"sha": "2f71facb2cd37022be6225a6c1ee6bbc8261c041", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 .and_then(|ps| ps.args.as_ref())\n                                 .map(|params| params.args.iter().find_map(|arg| match arg {\n                                     GenericArg::Type(ty) => Some(ty),\n-                                    GenericArg::Lifetime(_) => None,\n+                                    _ => None,\n                                 }).unwrap());\n                             then {\n                                 let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));"}, {"sha": "cddb1c7106d3a7a0530a607a9d770e2a24b3d40e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "patch": "@@ -235,7 +235,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: NodeId, opt_body_id:\n                     if !params.parenthesized;\n                     if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                         GenericArg::Type(ty) => Some(ty),\n-                        GenericArg::Lifetime(_) => None,\n+                        _ => None,\n                     });\n                     then {\n                         let replacement = snippet_opt(cx, inner.span);"}, {"sha": "513db90477dfc257d9089b1a7937dc37fd91d9ab", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "patch": "@@ -498,7 +498,7 @@ fn get_type_snippet(cx: &LateContext<'_, '_>, path: &QPath, to_ref_ty: Ty<'_>) -\n         if !params.parenthesized;\n         if let Some(to_ty) = params.args.iter().filter_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n-            GenericArg::Lifetime(_) => None,\n+            _ => None,\n         }).nth(1);\n         if let TyKind::Rptr(_, ref to_ty) = to_ty.node;\n         then {"}, {"sha": "7455f7d68fd0e99c47da7dfaf8cef519906b4047", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "patch": "@@ -223,7 +223,7 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n         if !params.parenthesized;\n         if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n-            GenericArg::Lifetime(_) => None,\n+            _ => None,\n         });\n         if let TyKind::Path(ref qpath) = ty.node;\n         if let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir().node_to_hir_id(ty.id)));\n@@ -267,7 +267,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         if let Some(ref last) = last_path_segment(qpath).args;\n                         if let Some(ty) = last.args.iter().find_map(|arg| match arg {\n                             GenericArg::Type(ty) => Some(ty),\n-                            GenericArg::Lifetime(_) => None,\n+                            _ => None,\n                         });\n                         // ty is now _ at this point\n                         if let TyKind::Path(ref ty_qpath) = ty.node;\n@@ -278,7 +278,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         if let Some(ref last) = last_path_segment(ty_qpath).args;\n                         if let Some(boxed_ty) = last.args.iter().find_map(|arg| match arg {\n                             GenericArg::Type(ty) => Some(ty),\n-                            GenericArg::Lifetime(_) => None,\n+                            _ => None,\n                         });\n                         then {\n                             let ty_ty = hir_ty_to_ty(cx.tcx, boxed_ty);\n@@ -327,7 +327,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                             .map_or_else(|| [].iter(), |params| params.args.iter())\n                             .filter_map(|arg| match arg {\n                                 GenericArg::Type(ty) => Some(ty),\n-                                GenericArg::Lifetime(_) => None,\n+                                _ => None,\n                             })\n                     }) {\n                         check_ty(cx, ty, is_local);\n@@ -340,7 +340,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                             .map_or_else(|| [].iter(), |params| params.args.iter())\n                             .filter_map(|arg| match arg {\n                                 GenericArg::Type(ty) => Some(ty),\n-                                GenericArg::Lifetime(_) => None,\n+                                _ => None,\n                             })\n                     }) {\n                         check_ty(cx, ty, is_local);\n@@ -351,7 +351,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                     if let Some(ref params) = seg.args {\n                         for ty in params.args.iter().filter_map(|arg| match arg {\n                             GenericArg::Type(ty) => Some(ty),\n-                            GenericArg::Lifetime(_) => None,\n+                            _ => None,\n                         }) {\n                             check_ty(cx, ty, is_local);\n                         }\n@@ -387,7 +387,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n                 if !params.parenthesized;\n                 if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n-                    GenericArg::Lifetime(_) => None,\n+                    _ => None,\n                 });\n                 then {\n                     if is_any_trait(inner) {\n@@ -2138,7 +2138,7 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n                 .iter()\n                 .filter_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n-                    GenericArg::Lifetime(_) => None,\n+                    _ => None,\n                 })\n                 .collect();\n             let params_len = params.len();"}, {"sha": "94f98a17e4f7461d0edaad9f9888d1a5134fe1d0", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61b25419bec5a3e839fdb16f720cfb12e52ddf1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=d61b25419bec5a3e839fdb16f720cfb12e52ddf1", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n                 let should_check = if let Some(ref params) = *parameters {\n                     !params.parenthesized && !params.args.iter().any(|arg| match arg {\n                         GenericArg::Lifetime(_) => true,\n-                        GenericArg::Type(_) => false,\n+                        _ => false,\n                     })\n                 } else {\n                     true"}]}