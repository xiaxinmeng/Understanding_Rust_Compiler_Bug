{"sha": "94b4de0e0793c8921d30e0fb886be712d17db6e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjRkZTBlMDc5M2M4OTIxZDMwZTBmYjg4NmJlNzEyZDE3ZGI2ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T02:35:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T02:35:01Z"}, "message": "Auto merge of #75800 - Aaron1011:feature/full-nt-tokens, r=petrochenkov\n\nAttach tokens to all AST types used in `Nonterminal`\n\nWe perform token capturing when we have outer attributes (for nonterminals that support attributes - e.g. `Stmt`), or when we parse a `Nonterminal` for a `macro_rules!` argument. The full list of `Nonterminals` affected by this PR is:\n\n* `NtBlock`\n* `NtStmt`\n* `NtTy`\n* `NtMeta`\n* `NtPath`\n* `NtVis`\n* `NtLiteral`\n\nOf these nonterminals, only `NtStmt` and `NtLiteral` (which is actually just an `Expr`), support outer attributes - the rest only ever have token capturing perform when they match a `macro_rules!` argument.\n\nThis makes progress towards solving https://github.com/rust-lang/rust/issues/43081 - we now collect tokens for everything that might need them. However, we still need to handle `#[cfg]`, inner attributes, and misc pretty-printing issues (e.g. #75734)\n\nI've separated the changes into (mostly) independent commits, which could be split into individual PRs for each `Nonterminal` variant. The purpose of having them all in one PR is to do a single Crater run for all of them.\n\nMost of the changes in this PR are trivial (adding `tokens: None` everywhere we construct the various AST structs). The significant changes are:\n\n* `ast::Visibility` is changed from `type Visibility = Spanned<VisibilityKind>` to a `struct Visibility { kind, span, tokens }`.\n* `maybe_collect_tokens` is made generic, and used for both `ast::Expr` and `ast::Stmt`.\n* Some of the statement-parsing functions are refactored so that we can capture the trailing semicolon.\n* `Nonterminal` and `Expr` both grew by 8 bytes, as some of the structs which are stored inline (rather than behind a `P`) now have an `Option<TokenStream>` field. Hopefully the performance impact of doing this is negligible.", "tree": {"sha": "8b60c90aefa2f7b55d4d006bd20ac391f0854212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b60c90aefa2f7b55d4d006bd20ac391f0854212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b4de0e0793c8921d30e0fb886be712d17db6e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b4de0e0793c8921d30e0fb886be712d17db6e5", "html_url": "https://github.com/rust-lang/rust/commit/94b4de0e0793c8921d30e0fb886be712d17db6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b4de0e0793c8921d30e0fb886be712d17db6e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee04f9a4dac3e72914862e9f2046eee70aedcbfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee04f9a4dac3e72914862e9f2046eee70aedcbfd", "html_url": "https://github.com/rust-lang/rust/commit/ee04f9a4dac3e72914862e9f2046eee70aedcbfd"}, {"sha": "fec047907572ef84bf128da9c4026e5ae5bcaa34", "url": "https://api.github.com/repos/rust-lang/rust/commits/fec047907572ef84bf128da9c4026e5ae5bcaa34", "html_url": "https://github.com/rust-lang/rust/commit/fec047907572ef84bf128da9c4026e5ae5bcaa34"}], "stats": {"total": 780, "additions": 645, "deletions": 135}, "files": [{"sha": "dee3a16f9b133a6153f0c3ff4a088b3fa298444e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -96,6 +96,7 @@ pub struct Path {\n     /// The segments in the path: the things separated by `::`.\n     /// Global paths begin with `kw::PathRoot`.\n     pub segments: Vec<PathSegment>,\n+    pub tokens: Option<TokenStream>,\n }\n \n impl PartialEq<Symbol> for Path {\n@@ -117,7 +118,7 @@ impl Path {\n     // Convert a span and an identifier to the corresponding\n     // one-segment path.\n     pub fn from_ident(ident: Ident) -> Path {\n-        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span }\n+        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n     }\n \n     pub fn is_global(&self) -> bool {\n@@ -540,6 +541,7 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`.\n     pub rules: BlockCheckMode,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n /// A match pattern.\n@@ -586,7 +588,7 @@ impl Pat {\n             _ => return None,\n         };\n \n-        Some(P(Ty { kind, id: self.id, span: self.span }))\n+        Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))\n     }\n \n     /// Walk top-down and call `it` in each place where a pattern occurs\n@@ -916,6 +918,7 @@ pub struct Stmt {\n     pub id: NodeId,\n     pub kind: StmtKind,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n impl Stmt {\n@@ -1068,7 +1071,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Expr, 104);\n+rustc_data_structures::static_assert_size!(Expr, 112);\n \n impl Expr {\n     /// Returns `true` if this expression would be valid somewhere that expects a value;\n@@ -1168,7 +1171,7 @@ impl Expr {\n             _ => return None,\n         };\n \n-        Some(P(Ty { kind, id: self.id, span: self.span }))\n+        Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))\n     }\n \n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1866,6 +1869,7 @@ pub struct Ty {\n     pub id: NodeId,\n     pub kind: TyKind,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -2144,7 +2148,7 @@ impl Param {\n     /// Builds a `Param` object from `ExplicitSelf`.\n     pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {\n         let span = eself.span.to(eself_ident.span);\n-        let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span });\n+        let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span, tokens: None });\n         let param = |mutbl, ty| Param {\n             attrs,\n             pat: P(Pat {\n@@ -2167,6 +2171,7 @@ impl Param {\n                     id: DUMMY_NODE_ID,\n                     kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),\n                     span,\n+                    tokens: None,\n                 }),\n             ),\n         }\n@@ -2416,6 +2421,7 @@ impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n pub struct AttrItem {\n     pub path: Path,\n     pub args: MacArgs,\n+    pub tokens: Option<TokenStream>,\n }\n \n /// A list of attributes.\n@@ -2485,7 +2491,12 @@ pub enum CrateSugar {\n     JustCrate,\n }\n \n-pub type Visibility = Spanned<VisibilityKind>;\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct Visibility {\n+    pub kind: VisibilityKind,\n+    pub span: Span,\n+    pub tokens: Option<TokenStream>,\n+}\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {"}, {"sha": "2782869fb885a13a773f432927d8c48a1d799eb5", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -330,7 +330,7 @@ crate fn mk_attr_id() -> AttrId {\n }\n \n pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attribute {\n-    mk_attr_from_item(style, AttrItem { path, args }, span)\n+    mk_attr_from_item(style, AttrItem { path, args, tokens: None }, span)\n }\n \n pub fn mk_attr_from_item(style: AttrStyle, item: AttrItem, span: Span) -> Attribute {\n@@ -415,7 +415,7 @@ impl MetaItem {\n                     }\n                 }\n                 let span = span.with_hi(segments.last().unwrap().ident.span.hi());\n-                Path { span, segments }\n+                Path { span, segments, tokens: None }\n             }\n             Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {\n                 token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),"}, {"sha": "425ef83b57af5ab203cb056f16dd40bb56e875d4", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -14,7 +14,7 @@ use crate::tokenstream::*;\n \n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n-use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n@@ -451,7 +451,7 @@ pub fn noop_visit_ty_constraint<T: MutVisitor>(\n }\n \n pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n-    let Ty { id, kind, span } = ty.deref_mut();\n+    let Ty { id, kind, span, tokens: _ } = ty.deref_mut();\n     vis.visit_id(id);\n     match kind {\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err | TyKind::Never | TyKind::CVarArgs => {}\n@@ -513,7 +513,7 @@ pub fn noop_visit_ident<T: MutVisitor>(Ident { name: _, span }: &mut Ident, vis:\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_path<T: MutVisitor>(Path { segments, span }: &mut Path, vis: &mut T) {\n+pub fn noop_visit_path<T: MutVisitor>(Path { segments, span, tokens: _ }: &mut Path, vis: &mut T) {\n     vis.visit_span(span);\n     for PathSegment { ident, id, args } in segments {\n         vis.visit_ident(ident);\n@@ -579,7 +579,7 @@ pub fn noop_visit_local<T: MutVisitor>(local: &mut P<Local>, vis: &mut T) {\n pub fn noop_visit_attribute<T: MutVisitor>(attr: &mut Attribute, vis: &mut T) {\n     let Attribute { kind, id: _, style: _, span } = attr;\n     match kind {\n-        AttrKind::Normal(AttrItem { path, args }) => {\n+        AttrKind::Normal(AttrItem { path, args, tokens: _ }) => {\n             vis.visit_path(path);\n             visit_mac_args(args, vis);\n         }\n@@ -709,7 +709,7 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         token::NtLifetime(ident) => vis.visit_ident(ident),\n         token::NtLiteral(expr) => vis.visit_expr(expr),\n         token::NtMeta(item) => {\n-            let AttrItem { path, args } = item.deref_mut();\n+            let AttrItem { path, args, tokens: _ } = item.deref_mut();\n             vis.visit_path(path);\n             visit_mac_args(args, vis);\n         }\n@@ -871,7 +871,7 @@ pub fn noop_visit_mt<T: MutVisitor>(MutTy { ty, mutbl: _ }: &mut MutTy, vis: &mu\n }\n \n pub fn noop_visit_block<T: MutVisitor>(block: &mut P<Block>, vis: &mut T) {\n-    let Block { id, stmts, rules: _, span } = block.deref_mut();\n+    let Block { id, stmts, rules: _, span, tokens: _ } = block.deref_mut();\n     vis.visit_id(id);\n     stmts.flat_map_in_place(|stmt| vis.flat_map_stmt(stmt));\n     vis.visit_span(span);\n@@ -978,11 +978,13 @@ pub fn noop_visit_mod<T: MutVisitor>(module: &mut Mod, vis: &mut T) {\n \n pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n     visit_clobber(krate, |Crate { module, attrs, span, proc_macros }| {\n+        let item_vis =\n+            Visibility { kind: VisibilityKind::Public, span: span.shrink_to_lo(), tokens: None };\n         let item = P(Item {\n             ident: Ident::invalid(),\n             attrs,\n             id: DUMMY_NODE_ID,\n-            vis: respan(span.shrink_to_lo(), VisibilityKind::Public),\n+            vis: item_vis,\n             span,\n             kind: ItemKind::Mod(module),\n             tokens: None,\n@@ -1284,12 +1286,15 @@ pub fn noop_filter_map_expr<T: MutVisitor>(mut e: P<Expr>, vis: &mut T) -> Optio\n }\n \n pub fn noop_flat_map_stmt<T: MutVisitor>(\n-    Stmt { kind, mut span, mut id }: Stmt,\n+    Stmt { kind, mut span, mut id, tokens }: Stmt,\n     vis: &mut T,\n ) -> SmallVec<[Stmt; 1]> {\n     vis.visit_id(&mut id);\n     vis.visit_span(&mut span);\n-    noop_flat_map_stmt_kind(kind, vis).into_iter().map(|kind| Stmt { id, kind, span }).collect()\n+    noop_flat_map_stmt_kind(kind, vis)\n+        .into_iter()\n+        .map(|kind| Stmt { id, kind, span, tokens: tokens.clone() })\n+        .collect()\n }\n \n pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n@@ -1314,13 +1319,13 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n     }\n }\n \n-pub fn noop_visit_vis<T: MutVisitor>(Spanned { node, span }: &mut Visibility, vis: &mut T) {\n-    match node {\n+pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n+    match &mut visibility.kind {\n         VisibilityKind::Public | VisibilityKind::Crate(_) | VisibilityKind::Inherited => {}\n         VisibilityKind::Restricted { path, id } => {\n             vis.visit_path(path);\n             vis.visit_id(id);\n         }\n     }\n-    vis.visit_span(span);\n+    vis.visit_span(&mut visibility.span);\n }"}, {"sha": "d5b3e87adc36a021c14b6b381c282848a042ac01", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -700,7 +700,7 @@ pub enum Nonterminal {\n \n // `Nonterminal` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Nonterminal, 40);\n+rustc_data_structures::static_assert_size!(Nonterminal, 48);\n \n #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum NonterminalKind {"}, {"sha": "86fd87f6c42c5a88977f617cab70a14ae9327f26", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -879,7 +879,7 @@ pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n }\n \n pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n-    if let VisibilityKind::Restricted { ref path, id } = vis.node {\n+    if let VisibilityKind::Restricted { ref path, id } = vis.kind {\n         visitor.visit_path(path, id);\n     }\n }"}, {"sha": "6d41b7836b12114f7e1c4577fadb6fbdae24998b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -251,7 +251,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::ExternCrate(orig_name) => hir::ItemKind::ExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n                 // Start with an empty prefix.\n-                let prefix = Path { segments: vec![], span: use_tree.span };\n+                let prefix = Path { segments: vec![], span: use_tree.span, tokens: None };\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis, ident, attrs)\n             }\n@@ -488,7 +488,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 *ident = tree.ident();\n \n                 // First, apply the prefix to the path.\n-                let mut path = Path { segments, span: path.span };\n+                let mut path = Path { segments, span: path.span, tokens: None };\n \n                 // Correctly resolve `self` imports.\n                 if path.segments.len() > 1\n@@ -540,8 +540,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n-                let path =\n-                    self.lower_path(id, &Path { segments, span: path.span }, ParamMode::Explicit);\n+                let path = self.lower_path(\n+                    id,\n+                    &Path { segments, span: path.span, tokens: None },\n+                    ParamMode::Explicit,\n+                );\n                 hir::ItemKind::Use(path, hir::UseKind::Glob)\n             }\n             UseTreeKind::Nested(ref trees) => {\n@@ -569,7 +572,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // for that we return the `{}` import (called the\n                 // `ListStem`).\n \n-                let prefix = Path { segments, span: prefix.span.to(path.span) };\n+                let prefix = Path { segments, span: prefix.span.to(path.span), tokens: None };\n \n                 // Add all the nested `PathListItem`s to the HIR.\n                 for &(ref use_tree, id) in trees {\n@@ -927,7 +930,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         v: &Visibility,\n         explicit_owner: Option<NodeId>,\n     ) -> hir::Visibility<'hir> {\n-        let node = match v.node {\n+        let node = match v.kind {\n             VisibilityKind::Public => hir::VisibilityKind::Public,\n             VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n             VisibilityKind::Restricted { ref path, id } => {"}, {"sha": "a28d022c66139c01e2c7de0e93e821dd0ee6d064", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -967,6 +967,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             AttrKind::Normal(ref item) => AttrKind::Normal(AttrItem {\n                 path: item.path.clone(),\n                 args: self.lower_mac_args(&item.args),\n+                tokens: None,\n             }),\n             AttrKind::DocComment(comment_kind, data) => AttrKind::DocComment(comment_kind, data),\n         };\n@@ -1106,6 +1107,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 id: node_id,\n                                 kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n                                 span: constraint.span,\n+                                tokens: None,\n                             },\n                             itctx,\n                         );"}, {"sha": "31c05325d1d258dcc32b4f78742b57ddd1246baf", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -198,13 +198,13 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn invalid_visibility(&self, vis: &Visibility, note: Option<&str>) {\n-        if let VisibilityKind::Inherited = vis.node {\n+        if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n \n         let mut err =\n             struct_span_err!(self.session, vis.span, E0449, \"unnecessary visibility qualifier\");\n-        if vis.node.is_pub() {\n+        if vis.kind.is_pub() {\n             err.span_label(vis.span, \"`pub` not permitted here because it's implied\");\n         }\n         if let Some(note) = note {"}, {"sha": "40643da2881a096e8d3f8c9b4cac5f8579b5d3f0", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -594,7 +594,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n-        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n+        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.kind {\n             gate_feature_post!(\n                 &self,\n                 crate_visibility_modifier,"}, {"sha": "d16b541c6999e7b52671b94e7cba7bca4ca9dcef", "filename": "compiler/rustc_ast_pretty/src/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -1359,7 +1359,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_visibility(&mut self, vis: &ast::Visibility) {\n-        match vis.node {\n+        match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n             ast::VisibilityKind::Crate(sugar) => match sugar {\n                 ast::CrateSugar::PubCrate => self.word_nbsp(\"pub(crate)\"),"}, {"sha": "b1a73a0bf02778ee001e706fec743a92834d91b6", "filename": "compiler/rustc_ast_pretty/src/pprust/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -1,7 +1,6 @@\n use super::*;\n \n use rustc_ast as ast;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n use rustc_span::with_default_session_globals;\n \n@@ -45,7 +44,11 @@ fn test_variant_to_string() {\n \n         let var = ast::Variant {\n             ident,\n-            vis: respan(rustc_span::DUMMY_SP, ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: rustc_span::DUMMY_SP,\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),"}, {"sha": "5ed8b69d92ab7841d9c1f39715fcc937804a3279", "filename": "compiler/rustc_builtin_macros/src/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcmdline_attrs.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -15,7 +15,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n         );\n \n         let start_span = parser.token.span;\n-        let AttrItem { path, args } = match parser.parse_attr_item() {\n+        let AttrItem { path, args, tokens: _ } = match parser.parse_attr_item() {\n             Ok(ai) => ai,\n             Err(mut err) => {\n                 err.emit();"}, {"sha": "c4d1c6eee31c4b0caf2d71ab6605a52f64ff18b1", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -61,6 +61,7 @@ pub fn expand_concat_idents<'cx>(\n                 id: ast::DUMMY_NODE_ID,\n                 kind: ast::TyKind::Path(None, ast::Path::from_ident(self.ident)),\n                 span: self.ident.span,\n+                tokens: None,\n             }))\n         }\n     }"}, {"sha": "d84b3956475d848be81faa7645c34327b4a5c08c", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -133,5 +133,5 @@ fn stmt_let_underscore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> as\n         span: sp,\n         attrs: ast::AttrVec::new(),\n     });\n-    ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n+    ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp, tokens: None }\n }"}, {"sha": "d235caec1031f580a2ec918ff7c6d7650e49a3f4", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -187,7 +187,6 @@ use rustc_ast::{GenericArg, GenericParamKind, VariantData};\n use rustc_attr as attr;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -532,7 +531,11 @@ impl<'a> TraitDef<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: self.span,\n                 ident,\n-                vis: respan(self.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: ast::Visibility {\n+                    span: self.span.shrink_to_lo(),\n+                    kind: ast::VisibilityKind::Inherited,\n+                    tokens: None,\n+                },\n                 attrs: Vec::new(),\n                 kind: ast::AssocItemKind::TyAlias(\n                     ast::Defaultness::Final,\n@@ -933,7 +936,11 @@ impl<'a> MethodDef<'a> {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n             span: trait_.span,\n-            vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: trait_lo_sp,\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             ident: method_ident,\n             kind: ast::AssocItemKind::Fn(def, sig, fn_generics, Some(body_block)),\n             tokens: None,"}, {"sha": "9c8e0fc2f016ccef14eb39ee1e048b82c783d024", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -75,6 +75,7 @@ fn call_intrinsic(\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n+        tokens: None,\n     }))\n }\n "}, {"sha": "3689e33be6f0f39b9bb7bea2a18bc42b9ed3665c", "filename": "compiler/rustc_builtin_macros/src/global_asm.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_asm.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -14,7 +14,6 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::DiagnosticBuilder;\n use rustc_expand::base::{self, *};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use smallvec::smallvec;\n@@ -30,7 +29,11 @@ pub fn expand_global_asm<'cx>(\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::ItemKind::GlobalAsm(P(global_asm)),\n-            vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: sp.shrink_to_lo(),\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             span: cx.with_def_site_ctxt(sp),\n             tokens: None,\n         })]),"}, {"sha": "c6ab3faf568979806feaf69aef02555a0996fc2a", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -98,7 +98,7 @@ pub fn inject(\n \n impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n-        if self.is_proc_macro_crate && self.in_root && vis.node.is_pub() {\n+        if self.is_proc_macro_crate && self.in_root && vis.kind.is_pub() {\n             self.handler.span_err(\n                 sp,\n                 \"`proc-macro` crate types currently cannot export any items other \\\n@@ -184,7 +184,7 @@ impl<'a> CollectProcMacros<'a> {\n             Vec::new()\n         };\n \n-        if self.in_root && item.vis.node.is_pub() {\n+        if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Derive(ProcMacroDerive {\n                 id: item.id,\n                 span: item.span,\n@@ -204,7 +204,7 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n-        if self.in_root && item.vis.node.is_pub() {\n+        if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 id: item.id,\n                 span: item.span,\n@@ -223,7 +223,7 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n-        if self.in_root && item.vis.node.is_pub() {\n+        if self.in_root && item.vis.kind.is_pub() {\n             self.macros.push(ProcMacro::Def(ProcMacroDef {\n                 id: item.id,\n                 span: item.span,"}, {"sha": "1de0b32f5196b3b27b8a5632b171cbfaf42ca88e", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -7,7 +7,6 @@ use rustc_ast::attr;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_session::Session;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -35,7 +34,11 @@ pub fn expand_test_case(\n     let sp = ecx.with_def_site_ctxt(attr_sp);\n     let mut item = anno_item.expect_item();\n     item = item.map(|mut item| {\n-        item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n+        item.vis = ast::Visibility {\n+            span: item.vis.span,\n+            kind: ast::VisibilityKind::Public,\n+            tokens: None,\n+        };\n         item.ident.span = item.ident.span.with_ctxt(sp.ctxt());\n         item.attrs.push(ecx.attribute(ecx.meta_word(sp, sym::rustc_test_marker)));\n         item\n@@ -292,7 +295,7 @@ pub fn expand_test_or_bench(\n         ),\n     );\n     test_const = test_const.map(|mut tc| {\n-        tc.vis.node = ast::VisibilityKind::Public;\n+        tc.vis.kind = ast::VisibilityKind::Public;\n         tc\n     });\n "}, {"sha": "0a60ca8faaa12db7ad2a90d34cb6f318d9cc11b4", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -10,7 +10,6 @@ use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n use rustc_session::Session;\n use rustc_span::hygiene::{AstPass, SyntaxContext, Transparency};\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n@@ -333,7 +332,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         attrs: vec![main_attr],\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n-        vis: respan(sp, ast::VisibilityKind::Public),\n+        vis: ast::Visibility { span: sp, kind: ast::VisibilityKind::Public, tokens: None },\n         span: sp,\n         tokens: None,\n     });"}, {"sha": "926e3dbfc52660009b4f8203268d265284156ca8", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -400,6 +400,7 @@ macro_rules! make_stmts_default {\n                 id: ast::DUMMY_NODE_ID,\n                 span: e.span,\n                 kind: ast::StmtKind::Expr(e),\n+                tokens: None\n             }]\n         })\n     };\n@@ -607,6 +608,7 @@ impl DummyResult {\n             id: ast::DUMMY_NODE_ID,\n             kind: if is_error { ast::TyKind::Err } else { ast::TyKind::Tup(Vec::new()) },\n             span: sp,\n+            tokens: None,\n         })\n     }\n }\n@@ -641,6 +643,7 @@ impl MacResult for DummyResult {\n             id: ast::DUMMY_NODE_ID,\n             kind: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n             span: self.span,\n+            tokens: None\n         }])\n     }\n "}, {"sha": "a5a7ee6c9a349532e3e1b9ee45f1a7c0f50fd048", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -3,7 +3,7 @@ use crate::base::ExtCtxt;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, PatKind, UnOp};\n-use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n use rustc_span::Span;\n@@ -46,15 +46,15 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             args,\n         });\n-        ast::Path { span, segments }\n+        ast::Path { span, segments, tokens: None }\n     }\n \n     pub fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy {\n         ast::MutTy { ty, mutbl }\n     }\n \n     pub fn ty(&self, span: Span, kind: ast::TyKind) -> P<ast::Ty> {\n-        P(ast::Ty { id: ast::DUMMY_NODE_ID, span, kind })\n+        P(ast::Ty { id: ast::DUMMY_NODE_ID, span, kind, tokens: None })\n     }\n \n     pub fn ty_path(&self, path: ast::Path) -> P<ast::Ty> {\n@@ -158,7 +158,12 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn stmt_expr(&self, expr: P<ast::Expr>) -> ast::Stmt {\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, span: expr.span, kind: ast::StmtKind::Expr(expr) }\n+        ast::Stmt {\n+            id: ast::DUMMY_NODE_ID,\n+            span: expr.span,\n+            kind: ast::StmtKind::Expr(expr),\n+            tokens: None,\n+        }\n     }\n \n     pub fn stmt_let(&self, sp: Span, mutbl: bool, ident: Ident, ex: P<ast::Expr>) -> ast::Stmt {\n@@ -176,7 +181,12 @@ impl<'a> ExtCtxt<'a> {\n             span: sp,\n             attrs: AttrVec::new(),\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span: sp }\n+        ast::Stmt {\n+            id: ast::DUMMY_NODE_ID,\n+            kind: ast::StmtKind::Local(local),\n+            span: sp,\n+            tokens: None,\n+        }\n     }\n \n     // Generates `let _: Type;`, which is usually used for type assertions.\n@@ -189,11 +199,16 @@ impl<'a> ExtCtxt<'a> {\n             span,\n             attrs: AttrVec::new(),\n         });\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span }\n+        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Local(local), span, tokens: None }\n     }\n \n     pub fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> ast::Stmt {\n-        ast::Stmt { id: ast::DUMMY_NODE_ID, kind: ast::StmtKind::Item(item), span: sp }\n+        ast::Stmt {\n+            id: ast::DUMMY_NODE_ID,\n+            kind: ast::StmtKind::Item(item),\n+            span: sp,\n+            tokens: None,\n+        }\n     }\n \n     pub fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> {\n@@ -203,11 +218,18 @@ impl<'a> ExtCtxt<'a> {\n                 id: ast::DUMMY_NODE_ID,\n                 span: expr.span,\n                 kind: ast::StmtKind::Expr(expr),\n+                tokens: None,\n             }],\n         )\n     }\n     pub fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n-        P(ast::Block { stmts, id: ast::DUMMY_NODE_ID, rules: BlockCheckMode::Default, span })\n+        P(ast::Block {\n+            stmts,\n+            id: ast::DUMMY_NODE_ID,\n+            rules: BlockCheckMode::Default,\n+            span,\n+            tokens: None,\n+        })\n     }\n \n     pub fn expr(&self, span: Span, kind: ast::ExprKind) -> P<ast::Expr> {\n@@ -578,7 +600,11 @@ impl<'a> ExtCtxt<'a> {\n             attrs,\n             id: ast::DUMMY_NODE_ID,\n             kind,\n-            vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: span.shrink_to_lo(),\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             span,\n             tokens: None,\n         })\n@@ -592,7 +618,11 @@ impl<'a> ExtCtxt<'a> {\n                 span: ty.span,\n                 ty,\n                 ident: None,\n-                vis: respan(vis_span, ast::VisibilityKind::Inherited),\n+                vis: ast::Visibility {\n+                    span: vis_span,\n+                    kind: ast::VisibilityKind::Inherited,\n+                    tokens: None,\n+                },\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n                 is_placeholder: false,\n@@ -611,7 +641,11 @@ impl<'a> ExtCtxt<'a> {\n             disr_expr: None,\n             id: ast::DUMMY_NODE_ID,\n             ident,\n-            vis: respan(vis_span, ast::VisibilityKind::Inherited),\n+            vis: ast::Visibility {\n+                span: vis_span,\n+                kind: ast::VisibilityKind::Inherited,\n+                tokens: None,\n+            },\n             span,\n             is_placeholder: false,\n         }"}, {"sha": "e5cfb866938e56a397a67e368cf1277e4831dd54", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -26,7 +26,6 @@ use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Limit;\n-use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{ExpnId, FileName, Span, DUMMY_SP};\n \n@@ -358,7 +357,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             kind: ast::ItemKind::Mod(krate.module),\n             ident: Ident::invalid(),\n             id: ast::DUMMY_NODE_ID,\n-            vis: respan(krate.span.shrink_to_lo(), ast::VisibilityKind::Public),\n+            vis: ast::Visibility {\n+                span: krate.span.shrink_to_lo(),\n+                kind: ast::VisibilityKind::Public,\n+                tokens: None,\n+            },\n             tokens: None,\n         })]);\n \n@@ -1393,10 +1396,10 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         // The placeholder expander gives ids to statements, so we avoid folding the id here.\n-        let ast::Stmt { id, kind, span } = stmt;\n+        let ast::Stmt { id, kind, span, tokens } = stmt;\n         noop_flat_map_stmt_kind(kind, self)\n             .into_iter()\n-            .map(|kind| ast::Stmt { id, kind, span })\n+            .map(|kind| ast::Stmt { id, kind, span, tokens: tokens.clone() })\n             .collect()\n     }\n \n@@ -1777,6 +1780,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 kind: ast::AttrKind::Normal(AttrItem {\n                     path: meta.path,\n                     args: meta.kind.mac_args(meta.span),\n+                    tokens: None,\n                 }),\n                 span: at.span,\n                 id: at.id,"}, {"sha": "4c9271a58df58b469691d61f7c18de909c6230c3", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -4,7 +4,7 @@ use crate::expand::{AstFragment, AstFragmentKind};\n use rustc_ast as ast;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n-use rustc_span::source_map::{dummy_spanned, DUMMY_SP};\n+use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Ident;\n \n use smallvec::{smallvec, SmallVec};\n@@ -18,15 +18,19 @@ pub fn placeholder(\n ) -> AstFragment {\n     fn mac_placeholder() -> ast::MacCall {\n         ast::MacCall {\n-            path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n+            path: ast::Path { span: DUMMY_SP, segments: Vec::new(), tokens: None },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n         }\n     }\n \n     let ident = Ident::invalid();\n     let attrs = Vec::new();\n-    let vis = vis.unwrap_or_else(|| dummy_spanned(ast::VisibilityKind::Inherited));\n+    let vis = vis.unwrap_or(ast::Visibility {\n+        span: DUMMY_SP,\n+        kind: ast::VisibilityKind::Inherited,\n+        tokens: None,\n+    });\n     let span = DUMMY_SP;\n     let expr_placeholder = || {\n         P(ast::Expr {\n@@ -37,7 +41,8 @@ pub fn placeholder(\n             tokens: None,\n         })\n     };\n-    let ty = || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span });\n+    let ty =\n+        || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span, tokens: None });\n     let pat =\n         || P(ast::Pat { id, kind: ast::PatKind::MacCall(mac_placeholder()), span, tokens: None });\n \n@@ -88,16 +93,19 @@ pub fn placeholder(\n             kind: ast::PatKind::MacCall(mac_placeholder()),\n             tokens: None,\n         })),\n-        AstFragmentKind::Ty => {\n-            AstFragment::Ty(P(ast::Ty { id, span, kind: ast::TyKind::MacCall(mac_placeholder()) }))\n-        }\n+        AstFragmentKind::Ty => AstFragment::Ty(P(ast::Ty {\n+            id,\n+            span,\n+            kind: ast::TyKind::MacCall(mac_placeholder()),\n+            tokens: None,\n+        })),\n         AstFragmentKind::Stmts => AstFragment::Stmts(smallvec![{\n             let mac = P(ast::MacCallStmt {\n                 mac: mac_placeholder(),\n                 style: ast::MacStmtStyle::Braces,\n                 attrs: ast::AttrVec::new(),\n             });\n-            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac) }\n+            ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac), tokens: None }\n         }]),\n         AstFragmentKind::Arms => AstFragment::Arms(smallvec![ast::Arm {\n             attrs: Default::default(),"}, {"sha": "f15eb413833ae0389cdab6a37291df953128d3ce", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -693,6 +693,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 rules,\n                 id: resolver.next_node_id(),\n                 span: rustc_span::DUMMY_SP,\n+                tokens: None,\n             }\n         }\n \n@@ -709,6 +710,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 id: resolver.next_node_id(),\n                 kind: ast::StmtKind::Expr(expr),\n                 span: rustc_span::DUMMY_SP,\n+                tokens: None,\n             }\n         }\n \n@@ -725,6 +727,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             id: self.resolver.next_node_id(),\n             span: rustc_span::DUMMY_SP,\n             kind: ast::StmtKind::Expr(loop_expr),\n+            tokens: None,\n         };\n \n         if self.within_static_or_const {"}, {"sha": "94abfac19c665cb426e4ccff96e3e8df40c95b98", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n-use rustc_span::source_map::{self, Span, Spanned};\n+use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Symbol;\n \n use rustc_data_structures::sync::Lrc;\n@@ -421,7 +421,11 @@ impl CStore {\n                 span,\n                 attrs: attrs.to_vec(),\n                 kind: ast::ItemKind::MacroDef(data.get_macro(id.index, sess)),\n-                vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: ast::Visibility {\n+                    span: span.shrink_to_lo(),\n+                    kind: ast::VisibilityKind::Inherited,\n+                    tokens: None,\n+                },\n                 tokens: None,\n             },\n             data.root.edition,"}, {"sha": "dedb9850b5a19f75a160250f5ea4615585511abe", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -268,21 +268,32 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         Nonterminal::NtItem(ref item) => {\n             prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span)\n         }\n+        Nonterminal::NtBlock(ref block) => block.tokens.clone(),\n+        Nonterminal::NtStmt(ref stmt) => {\n+            // FIXME: We currently only collect tokens for `:stmt`\n+            // matchers in `macro_rules!` macros. When we start collecting\n+            // tokens for attributes on statements, we will need to prepend\n+            // attributes here\n+            stmt.tokens.clone()\n+        }\n         Nonterminal::NtPat(ref pat) => pat.tokens.clone(),\n+        Nonterminal::NtTy(ref ty) => ty.tokens.clone(),\n         Nonterminal::NtIdent(ident, is_raw) => {\n             Some(tokenstream::TokenTree::token(token::Ident(ident.name, is_raw), ident.span).into())\n         }\n         Nonterminal::NtLifetime(ident) => {\n             Some(tokenstream::TokenTree::token(token::Lifetime(ident.name), ident.span).into())\n         }\n+        Nonterminal::NtMeta(ref attr) => attr.tokens.clone(),\n+        Nonterminal::NtPath(ref path) => path.tokens.clone(),\n+        Nonterminal::NtVis(ref vis) => vis.tokens.clone(),\n         Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n-        Nonterminal::NtExpr(ref expr) => {\n+        Nonterminal::NtExpr(ref expr) | Nonterminal::NtLiteral(ref expr) => {\n             if expr.tokens.is_none() {\n                 debug!(\"missing tokens for expr {:?}\", expr);\n             }\n             prepend_attrs(sess, &expr.attrs, expr.tokens.as_ref(), span)\n         }\n-        _ => None,\n     };\n \n     // FIXME(#43081): Avoid this pretty-print + reparse hack"}, {"sha": "98f94098bfc15fa9c4dca062ebd1780ee793b7d2", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -162,7 +162,7 @@ impl<'a> Parser<'a> {\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             let args = self.parse_attr_args()?;\n-            ast::AttrItem { path, args }\n+            ast::AttrItem { path, args, tokens: None }\n         })\n     }\n "}, {"sha": "e2a735188f95ced5501d65c959c8a3419f6dd4c2", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -28,7 +28,7 @@ pub(super) fn dummy_arg(ident: Ident) -> Param {\n         span: ident.span,\n         tokens: None,\n     });\n-    let ty = Ty { kind: TyKind::Err, span: ident.span, id: ast::DUMMY_NODE_ID };\n+    let ty = Ty { kind: TyKind::Err, span: ident.span, id: ast::DUMMY_NODE_ID, tokens: None };\n     Param {\n         attrs: AttrVec::default(),\n         id: ast::DUMMY_NODE_ID,\n@@ -75,7 +75,12 @@ impl RecoverQPath for Ty {\n         Some(P(self.clone()))\n     }\n     fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n-        Self { span: path.span, kind: TyKind::Path(qself, path), id: ast::DUMMY_NODE_ID }\n+        Self {\n+            span: path.span,\n+            kind: TyKind::Path(qself, path),\n+            id: ast::DUMMY_NODE_ID,\n+            tokens: None,\n+        }\n     }\n }\n \n@@ -896,7 +901,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<T>> {\n         self.expect(&token::ModSep)?;\n \n-        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP };\n+        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP, tokens: None };\n         self.parse_path_segments(&mut path.segments, T::PATH_STYLE)?;\n         path.span = ty_span.to(self.prev_token.span);\n "}, {"sha": "26ca99801277bb9081c54476a03b57f23f66f1fd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -187,7 +187,7 @@ impl<'a> Parser<'a> {\n \n     /// Error in-case a non-inherited visibility was parsed but no item followed.\n     fn error_on_unmatched_vis(&self, vis: &Visibility) {\n-        if let VisibilityKind::Inherited = vis.node {\n+        if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n         let vs = pprust::vis_to_string(&vis);\n@@ -296,7 +296,7 @@ impl<'a> Parser<'a> {\n         } else if self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis)?\n-        } else if vis.node.is_pub() && self.isnt_macro_invocation() {\n+        } else if vis.kind.is_pub() && self.isnt_macro_invocation() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n@@ -510,7 +510,12 @@ impl<'a> Parser<'a> {\n         {\n             let span = self.prev_token.span.between(self.token.span);\n             self.struct_span_err(span, \"missing trait in a trait impl\").emit();\n-            P(Ty { kind: TyKind::Path(None, err_path(span)), span, id: DUMMY_NODE_ID })\n+            P(Ty {\n+                kind: TyKind::Path(None, err_path(span)),\n+                span,\n+                id: DUMMY_NODE_ID,\n+                tokens: None,\n+            })\n         } else {\n             self.parse_ty()?\n         };\n@@ -782,7 +787,7 @@ impl<'a> Parser<'a> {\n     fn parse_use_tree(&mut self) -> PResult<'a, UseTree> {\n         let lo = self.token.span;\n \n-        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo() };\n+        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo(), tokens: None };\n         let kind = if self.check(&token::OpenDelim(token::Brace))\n             || self.check(&token::BinOp(token::Star))\n             || self.is_import_coupler()\n@@ -1046,7 +1051,7 @@ impl<'a> Parser<'a> {\n \n         // The user intended that the type be inferred,\n         // so treat this as if the user wrote e.g. `const A: _ = expr;`.\n-        P(Ty { kind: TyKind::Infer, span: id.span, id: ast::DUMMY_NODE_ID })\n+        P(Ty { kind: TyKind::Infer, span: id.span, id: ast::DUMMY_NODE_ID, tokens: None })\n     }\n \n     /// Parses an enum declaration.\n@@ -1413,7 +1418,7 @@ impl<'a> Parser<'a> {\n     /// Item macro invocations or `macro_rules!` definitions need inherited visibility.\n     /// If that's not the case, emit an error.\n     fn complain_if_pub_macro(&self, vis: &Visibility, macro_rules: bool) {\n-        if let VisibilityKind::Inherited = vis.node {\n+        if let VisibilityKind::Inherited = vis.kind {\n             return;\n         }\n "}, {"sha": "5eefae3af60e9b9d47819b713764f1d497589c22", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -22,7 +22,7 @@ use rustc_ast::{Async, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, Vi\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::source_map::{respan, Span, DUMMY_SP};\n+use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use tracing::debug;\n \n@@ -1022,14 +1022,22 @@ impl<'a> Parser<'a> {\n         if self.is_crate_vis() {\n             self.bump(); // `crate`\n             self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);\n-            return Ok(respan(self.prev_token.span, VisibilityKind::Crate(CrateSugar::JustCrate)));\n+            return Ok(Visibility {\n+                span: self.prev_token.span,\n+                kind: VisibilityKind::Crate(CrateSugar::JustCrate),\n+                tokens: None,\n+            });\n         }\n \n         if !self.eat_keyword(kw::Pub) {\n             // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no\n             // keyword to grab a span from for inherited visibility; an empty span at the\n             // beginning of the current token would seem to be the \"Schelling span\".\n-            return Ok(respan(self.token.span.shrink_to_lo(), VisibilityKind::Inherited));\n+            return Ok(Visibility {\n+                span: self.token.span.shrink_to_lo(),\n+                kind: VisibilityKind::Inherited,\n+                tokens: None,\n+            });\n         }\n         let lo = self.prev_token.span;\n \n@@ -1046,15 +1054,23 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `crate`\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 let vis = VisibilityKind::Crate(CrateSugar::PubCrate);\n-                return Ok(respan(lo.to(self.prev_token.span), vis));\n+                return Ok(Visibility {\n+                    span: lo.to(self.prev_token.span),\n+                    kind: vis,\n+                    tokens: None,\n+                });\n             } else if self.is_keyword_ahead(1, &[kw::In]) {\n                 // Parse `pub(in path)`.\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n                 let path = self.parse_path(PathStyle::Mod)?; // `path`\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n-                return Ok(respan(lo.to(self.prev_token.span), vis));\n+                return Ok(Visibility {\n+                    span: lo.to(self.prev_token.span),\n+                    kind: vis,\n+                    tokens: None,\n+                });\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))\n                 && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n             {\n@@ -1063,7 +1079,11 @@ impl<'a> Parser<'a> {\n                 let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n-                return Ok(respan(lo.to(self.prev_token.span), vis));\n+                return Ok(Visibility {\n+                    span: lo.to(self.prev_token.span),\n+                    kind: vis,\n+                    tokens: None,\n+                });\n             } else if let FollowedByType::No = fbt {\n                 // Provide this diagnostic if a type cannot follow;\n                 // in particular, if this is not a tuple struct.\n@@ -1072,7 +1092,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        Ok(respan(lo, VisibilityKind::Public))\n+        Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })\n     }\n \n     /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`"}, {"sha": "15660fd574c13a53daa7413282e0d90a6122ff3f", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 65, "deletions": 10, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -111,11 +111,28 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, \"expected an item keyword\"));\n                 }\n             },\n-            NonterminalKind::Block => token::NtBlock(self.parse_block()?),\n-            NonterminalKind::Stmt => match self.parse_stmt()? {\n-                Some(s) => token::NtStmt(s),\n-                None => return Err(self.struct_span_err(self.token.span, \"expected a statement\")),\n-            },\n+            NonterminalKind::Block => {\n+                let (mut block, tokens) = self.collect_tokens(|this| this.parse_block())?;\n+                // We have have eaten an NtBlock, which could already have tokens\n+                if block.tokens.is_none() {\n+                    block.tokens = Some(tokens);\n+                }\n+                token::NtBlock(block)\n+            }\n+            NonterminalKind::Stmt => {\n+                let (stmt, tokens) = self.collect_tokens(|this| this.parse_stmt())?;\n+                match stmt {\n+                    Some(mut s) => {\n+                        if s.tokens.is_none() {\n+                            s.tokens = Some(tokens);\n+                        }\n+                        token::NtStmt(s)\n+                    }\n+                    None => {\n+                        return Err(self.struct_span_err(self.token.span, \"expected a statement\"));\n+                    }\n+                }\n+            }\n             NonterminalKind::Pat => {\n                 let (mut pat, tokens) = self.collect_tokens(|this| this.parse_pat(None))?;\n                 // We have have eaten an NtPat, which could already have tokens\n@@ -133,8 +150,23 @@ impl<'a> Parser<'a> {\n                 }\n                 token::NtExpr(expr)\n             }\n-            NonterminalKind::Literal => token::NtLiteral(self.parse_literal_maybe_minus()?),\n-            NonterminalKind::Ty => token::NtTy(self.parse_ty()?),\n+            NonterminalKind::Literal => {\n+                let (mut lit, tokens) =\n+                    self.collect_tokens(|this| this.parse_literal_maybe_minus())?;\n+                // We have have eaten a nonterminal, which  could already have tokens\n+                if lit.tokens.is_none() {\n+                    lit.tokens = Some(tokens);\n+                }\n+                token::NtLiteral(lit)\n+            }\n+            NonterminalKind::Ty => {\n+                let (mut ty, tokens) = self.collect_tokens(|this| this.parse_ty())?;\n+                // We have an eaten an NtTy, which could already have tokens\n+                if ty.tokens.is_none() {\n+                    ty.tokens = Some(tokens);\n+                }\n+                token::NtTy(ty)\n+            }\n             // this could be handled like a token, since it is one\n             NonterminalKind::Ident => {\n                 if let Some((ident, is_raw)) = get_macro_ident(&self.token) {\n@@ -146,10 +178,33 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, msg));\n                 }\n             }\n-            NonterminalKind::Path => token::NtPath(self.parse_path(PathStyle::Type)?),\n-            NonterminalKind::Meta => token::NtMeta(P(self.parse_attr_item()?)),\n+            NonterminalKind::Path => {\n+                let (mut path, tokens) =\n+                    self.collect_tokens(|this| this.parse_path(PathStyle::Type))?;\n+                // We have have eaten an NtPath, which could already have tokens\n+                if path.tokens.is_none() {\n+                    path.tokens = Some(tokens);\n+                }\n+                token::NtPath(path)\n+            }\n+            NonterminalKind::Meta => {\n+                let (mut attr, tokens) = self.collect_tokens(|this| this.parse_attr_item())?;\n+                // We may have eaten a nonterminal, which could already have tokens\n+                if attr.tokens.is_none() {\n+                    attr.tokens = Some(tokens);\n+                }\n+                token::NtMeta(P(attr))\n+            }\n             NonterminalKind::TT => token::NtTT(self.parse_token_tree()),\n-            NonterminalKind::Vis => token::NtVis(self.parse_visibility(FollowedByType::Yes)?),\n+            NonterminalKind::Vis => {\n+                let (mut vis, tokens) =\n+                    self.collect_tokens(|this| this.parse_visibility(FollowedByType::Yes))?;\n+                // We may have etan an `NtVis`, which could already have tokens\n+                if vis.tokens.is_none() {\n+                    vis.tokens = Some(tokens);\n+                }\n+                token::NtVis(vis)\n+            }\n             NonterminalKind::Lifetime => {\n                 if self.check_lifetime() {\n                     token::NtLifetime(self.expect_lifetime().ident)"}, {"sha": "66ce015d02e4c6b561ac7610ae5e639c5957f2a8", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -64,7 +64,7 @@ impl<'a> Parser<'a> {\n             path_span = path_lo.to(self.prev_token.span);\n         } else {\n             path_span = self.token.span.to(self.token.span);\n-            path = ast::Path { segments: Vec::new(), span: path_span };\n+            path = ast::Path { segments: Vec::new(), span: path_span, tokens: None };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -81,7 +81,10 @@ impl<'a> Parser<'a> {\n         let qself = QSelf { ty, path_span, position: path.segments.len() };\n         self.parse_path_segments(&mut path.segments, style)?;\n \n-        Ok((qself, Path { segments: path.segments, span: lo.to(self.prev_token.span) }))\n+        Ok((\n+            qself,\n+            Path { segments: path.segments, span: lo.to(self.prev_token.span), tokens: None },\n+        ))\n     }\n \n     /// Recover from an invalid single colon, when the user likely meant a qualified path.\n@@ -144,7 +147,7 @@ impl<'a> Parser<'a> {\n         }\n         self.parse_path_segments(&mut segments, style)?;\n \n-        Ok(Path { segments, span: lo.to(self.prev_token.span) })\n+        Ok(Path { segments, span: lo.to(self.prev_token.span), tokens: None })\n     }\n \n     pub(super) fn parse_path_segments("}, {"sha": "64b959e83251d2c29c316c364546fffdfb1a2cd3", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -411,11 +411,11 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_block(&self, stmts: Vec<Stmt>, rules: BlockCheckMode, span: Span) -> P<Block> {\n-        P(Block { stmts, id: DUMMY_NODE_ID, rules, span })\n+        P(Block { stmts, id: DUMMY_NODE_ID, rules, span, tokens: None })\n     }\n \n     pub(super) fn mk_stmt(&self, span: Span, kind: StmtKind) -> Stmt {\n-        Stmt { id: DUMMY_NODE_ID, kind, span }\n+        Stmt { id: DUMMY_NODE_ID, kind, span, tokens: None }\n     }\n \n     fn mk_stmt_err(&self, span: Span) -> Stmt {"}, {"sha": "259764a317df808aea6dddfde6b50d43ad88f431", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -626,6 +626,6 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_ty(&self, span: Span, kind: TyKind) -> P<Ty> {\n-        P(Ty { kind, span, id: ast::DUMMY_NODE_ID })\n+        P(Ty { kind, span, id: ast::DUMMY_NODE_ID, tokens: None })\n     }\n }"}, {"sha": "03c2915f8486b233578af3e07909341748f6112f", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         speculative: bool,\n     ) -> Result<ty::Visibility, VisResolutionError<'ast>> {\n         let parent_scope = &self.parent_scope;\n-        match vis.node {\n+        match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n             ast::VisibilityKind::Crate(..) => {\n                 Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))"}, {"sha": "89ce89b2e9a94277b3875d97341d9cd6c6fd8f7b", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n         // because this means that they were generated in some fashion by the\n         // compiler and we don't need to consider them.\n         if let ast::ItemKind::Use(..) = item.kind {\n-            if item.vis.node.is_pub() || item.span.is_dummy() {\n+            if item.vis.kind.is_pub() || item.span.is_dummy() {\n                 return;\n             }\n         }"}, {"sha": "7a0503d68f348d04a350d608bd928b025ee1383d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -794,7 +794,7 @@ impl<'a> Resolver<'a> {\n                         }\n \n                         segms.push(ast::PathSegment::from_ident(ident));\n-                        let path = Path { span: name_binding.span, segments: segms };\n+                        let path = Path { span: name_binding.span, segments: segms, tokens: None };\n                         let did = match res {\n                             Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n                             _ => res.opt_def_id(),"}, {"sha": "dda084214b8f4097f671e890df82034ea1e08547", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -1967,7 +1967,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         if qself.is_none() {\n             let path_seg = |seg: &Segment| PathSegment::from_ident(seg.ident);\n-            let path = Path { segments: path.iter().map(path_seg).collect(), span };\n+            let path = Path { segments: path.iter().map(path_seg).collect(), span, tokens: None };\n             if let Ok((_, res)) =\n                 self.r.resolve_macro_path(&path, None, &self.parent_scope, false, false)\n             {"}, {"sha": "9f631705b2bf8d7ea97eeed71a21ccc51bf481b5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -83,6 +83,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     let enum_path = ast::Path {\n         span: suggestion.path.span,\n         segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+        tokens: None,\n     };\n     let enum_path_string = path_names_to_string(&enum_path);\n \n@@ -1065,7 +1066,8 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     path_segments.push(ast::PathSegment::from_ident(ident));\n                     let module_def_id = module.def_id().unwrap();\n                     if module_def_id == def_id {\n-                        let path = Path { span: name_binding.span, segments: path_segments };\n+                        let path =\n+                            Path { span: name_binding.span, segments: path_segments, tokens: None };\n                         result = Some((\n                             module,\n                             ImportSuggestion {\n@@ -1095,7 +1097,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 if let Res::Def(DefKind::Variant, _) = name_binding.res() {\n                     let mut segms = enum_import_suggestion.path.segments.clone();\n                     segms.push(ast::PathSegment::from_ident(ident));\n-                    variants.push(Path { span: name_binding.span, segments: segms });\n+                    variants.push(Path { span: name_binding.span, segments: segms, tokens: None });\n                 }\n             });\n             variants"}, {"sha": "c7913e844553113c090b68b0c86794fd5bf187e1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -3189,6 +3189,7 @@ impl<'a> Resolver<'a> {\n                     .chain(path_str.split(\"::\").skip(1).map(Ident::from_str))\n                     .map(|i| self.new_ast_path_segment(i))\n                     .collect(),\n+                tokens: None,\n             }\n         } else {\n             ast::Path {\n@@ -3198,6 +3199,7 @@ impl<'a> Resolver<'a> {\n                     .map(Ident::from_str)\n                     .map(|i| self.new_ast_path_segment(i))\n                     .collect(),\n+                tokens: None,\n             }\n         };\n         let module = self.get_module(module_id);"}, {"sha": "caf55bec53ddde6463c1ccb040907db7e31cc69b", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -62,7 +62,7 @@ fn expr(kind: ExprKind) -> P<Expr> {\n \n fn make_x() -> P<Expr> {\n     let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n-    let path = Path { segments: vec![seg], span: DUMMY_SP };\n+    let path = Path { segments: vec![seg], span: DUMMY_SP, tokens: None };\n     expr(ExprKind::Path(None, path))\n }\n \n@@ -113,6 +113,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                     id: DUMMY_NODE_ID,\n                     rules: BlockCheckMode::Default,\n                     span: DUMMY_SP,\n+                    tokens: None,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             },"}, {"sha": "3d7d476cf6c05e752942b440c9ef00f0c54d7db5", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "a4ce6061b4c9dca259eaca355ace7d110de387fd", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -1 +1 @@\n-{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":\"Empty\"}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}]},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]}}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"unsafety\":\"No\",\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"v1\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null}]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"inline\":true},\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"tokens\":null}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"span\":{\"lo\":0,\"hi\":0},\"proc_macros\":[]}"}, {"sha": "de008a3708ae8b814b131926e1964e94e7e9439a", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -1,10 +1,20 @@\n // aux-build:test-macros.rs\n // check-pass\n // compile-flags: -Z span-debug\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n extern crate test_macros;\n-use test_macros::print_bang;\n+use test_macros::{print_bang, print_bang_consume};\n+\n+macro_rules! test_matchers {\n+    ($expr:expr, $block:block, $stmt:stmt, $ty:ty, $ident:ident, $lifetime:lifetime,\n+     $meta:meta, $path:path, $vis:vis, $tt:tt, $lit:literal) => {\n+        print_bang_consume!($expr, $block, $stmt, $ty, $ident,\n+                            $lifetime, $meta, $path, $vis, $tt, $lit)\n+    }\n+}\n \n macro_rules! use_expr {\n     ($expr:expr) => {\n@@ -24,10 +34,23 @@ impl Foo {\n     #[allow(dead_code)]\n     fn use_self(self) {\n         drop(use_expr!(self));\n+        test_matchers!(\n+            1 + 1,\n+            { \"a\" },\n+            let a = 1,\n+            String,\n+            my_name,\n+            'a,\n+            my_val = 30,\n+            std::option::Option,\n+            pub(in some::path),\n+            [ a b c ],\n+            -30\n+        );\n     }\n \n     fn with_pat(use_pat!((a, b)): (u32, u32)) {\n-        println!(\"Args: {} {}\", a, b);\n+        let _ = (a, b);\n     }\n }\n "}, {"sha": "652bf6b6b22f507b0db29c44c66c72b8cde8d1ff", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "modified", "additions": 296, "deletions": 7, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -5,10 +5,299 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"self\",\n-                span: $DIR/capture-macro-rules-invoke.rs:26:24: 26:28 (#CTXT),\n+                span: $DIR/capture-macro-rules-invoke.rs:36:24: 36:28 (#0),\n             },\n         ],\n-        span: $DIR/capture-macro-rules-invoke.rs:11:21: 11:26 (#CTXT),\n+        span: $DIR/capture-macro-rules-invoke.rs:21:21: 21:26 (#3),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): 1 + 1, { \"a\" }, let a = 1;, String, my_name, 'a, my_val = 30,\n+std::option::Option, pub(in some::path) , [a b c], -30\n+PRINT-BANG RE-COLLECTED (DISPLAY): 1 + 1, { \"a\" }, let a = 1, String, my_name, 'a, my_val = 30,\n+std :: option :: Option, pub(in some :: path), [a b c], - 30\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:38:13: 38:14 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:38:15: 38:16 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:38:17: 38:18 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:29: 14:34 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:34: 14:35 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Str,\n+                        symbol: \"a\",\n+                        suffix: None,\n+                        span: $DIR/capture-macro-rules-invoke.rs:39:15: 39:18 (#0),\n+                    },\n+                ],\n+                span: $DIR/capture-macro-rules-invoke.rs:39:13: 39:20 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:36: 14:42 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:42: 14:43 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"let\",\n+                span: $DIR/capture-macro-rules-invoke.rs:40:13: 40:16 (#0),\n+            },\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/capture-macro-rules-invoke.rs:40:17: 40:18 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:40:19: 40:20 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:40:21: 40:22 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:44: 14:49 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:49: 14:50 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"String\",\n+                span: $DIR/capture-macro-rules-invoke.rs:41:13: 41:19 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:51: 14:54 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:54: 14:55 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"my_name\",\n+                span: $DIR/capture-macro-rules-invoke.rs:42:13: 42:20 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:14:56: 14:62 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:14:62: 14:63 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '\\'',\n+                spacing: Joint,\n+                span: $DIR/capture-macro-rules-invoke.rs:43:13: 43:15 (#0),\n+            },\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/capture-macro-rules-invoke.rs:43:13: 43:15 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:29: 15:38 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:38: 15:39 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"my_val\",\n+                span: $DIR/capture-macro-rules-invoke.rs:44:13: 44:19 (#0),\n+            },\n+            Punct {\n+                ch: '=',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:44:20: 44:21 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"30\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:44:22: 44:24 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:40: 15:45 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:45: 15:46 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"std\",\n+                span: $DIR/capture-macro-rules-invoke.rs:45:13: 45:16 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:18 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:18 (#0),\n+            },\n+            Ident {\n+                ident: \"option\",\n+                span: $DIR/capture-macro-rules-invoke.rs:45:18: 45:24 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Joint,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:26 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:26 (#0),\n+            },\n+            Ident {\n+                ident: \"Option\",\n+                span: $DIR/capture-macro-rules-invoke.rs:45:26: 45:32 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:47: 15:52 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:52: 15:53 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"pub\",\n+                span: $DIR/capture-macro-rules-invoke.rs:46:13: 46:16 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"in\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:17: 46:19 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"some\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:20: 46:24 (#0),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Joint,\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:26 (#0),\n+                    },\n+                    Punct {\n+                        ch: ':',\n+                        spacing: Alone,\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:26 (#0),\n+                    },\n+                    Ident {\n+                        ident: \"path\",\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:26: 46:30 (#0),\n+                    },\n+                ],\n+                span: $DIR/capture-macro-rules-invoke.rs:46:16: 46:31 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:54: 15:58 (#7),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:58: 15:59 (#7),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"a\",\n+                span: $DIR/capture-macro-rules-invoke.rs:47:15: 47:16 (#0),\n+            },\n+            Ident {\n+                ident: \"b\",\n+                span: $DIR/capture-macro-rules-invoke.rs:47:17: 47:18 (#0),\n+            },\n+            Ident {\n+                ident: \"c\",\n+                span: $DIR/capture-macro-rules-invoke.rs:47:19: 47:20 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:47:13: 47:22 (#0),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/capture-macro-rules-invoke.rs:15:63: 15:64 (#7),\n+    },\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '-',\n+                spacing: Alone,\n+                span: $DIR/capture-macro-rules-invoke.rs:48:13: 48:14 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"30\",\n+                suffix: None,\n+                span: $DIR/capture-macro-rules-invoke.rs:48:14: 48:16 (#0),\n+            },\n+        ],\n+        span: $DIR/capture-macro-rules-invoke.rs:15:65: 15:69 (#7),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): (a, b)\n@@ -21,21 +310,21 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"a\",\n-                        span: $DIR/capture-macro-rules-invoke.rs:29:27: 29:28 (#CTXT),\n+                        span: $DIR/capture-macro-rules-invoke.rs:52:27: 52:28 (#0),\n                     },\n                     Punct {\n                         ch: ',',\n                         spacing: Alone,\n-                        span: $DIR/capture-macro-rules-invoke.rs:29:28: 29:29 (#CTXT),\n+                        span: $DIR/capture-macro-rules-invoke.rs:52:28: 52:29 (#0),\n                     },\n                     Ident {\n                         ident: \"b\",\n-                        span: $DIR/capture-macro-rules-invoke.rs:29:30: 29:31 (#CTXT),\n+                        span: $DIR/capture-macro-rules-invoke.rs:52:30: 52:31 (#0),\n                     },\n                 ],\n-                span: $DIR/capture-macro-rules-invoke.rs:29:26: 29:32 (#CTXT),\n+                span: $DIR/capture-macro-rules-invoke.rs:52:26: 52:32 (#0),\n             },\n         ],\n-        span: $DIR/capture-macro-rules-invoke.rs:17:21: 17:25 (#CTXT),\n+        span: $DIR/capture-macro-rules-invoke.rs:27:21: 27:25 (#11),\n     },\n ]"}, {"sha": "67a463538568e9adf619ce3add880796f21c81c4", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -285,7 +285,7 @@ impl EarlyLintPass for EnumVariantNames {\n                             );\n                         }\n                     }\n-                    if item.vis.node.is_pub() {\n+                    if item.vis.kind.is_pub() {\n                         let matching = partial_match(mod_camel, &item_camel);\n                         let rmatching = partial_rmatch(mod_camel, &item_camel);\n                         let nchars = mod_camel.chars().count();\n@@ -316,7 +316,7 @@ impl EarlyLintPass for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let lint = match item.vis.node {\n+            let lint = match item.vis.kind {\n                 VisibilityKind::Public => PUB_ENUM_VARIANT_NAMES,\n                 _ => ENUM_VARIANT_NAMES,\n             };"}, {"sha": "9c623821fdddc3cee97deec82fc03398d43d299e", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -122,7 +122,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n \n fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data: &VariantData) {\n     fn is_private(field: &StructField) -> bool {\n-        matches!(field.vis.node, VisibilityKind::Inherited)\n+        matches!(field.vis.kind, VisibilityKind::Inherited)\n     }\n \n     fn is_non_exhaustive_marker(field: &StructField) -> bool {\n@@ -141,7 +141,7 @@ fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data:\n \n     let fields = data.fields();\n     let private_fields = fields.iter().filter(|f| is_private(f)).count();\n-    let public_fields = fields.iter().filter(|f| f.vis.node.is_pub()).count();\n+    let public_fields = fields.iter().filter(|f| f.vis.kind.is_pub()).count();\n \n     if_chain! {\n         if private_fields == 1 && public_fields >= 1 && public_fields == fields.len() - 1;"}, {"sha": "35b38eca14d1be6293e729d4ce3c370d0fef0a8a", "filename": "src/tools/clippy/clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -41,7 +41,7 @@ impl EarlyLintPass for SingleComponentPathImports {\n         if_chain! {\n             if !in_macro(item.span);\n             if cx.sess.opts.edition == Edition::Edition2018;\n-            if !item.vis.node.is_pub();\n+            if !item.vis.kind.is_pub();\n             if let ItemKind::Use(use_tree) = &item.kind;\n             if let segments = &use_tree.prefix.segments;\n             if segments.len() == 1;"}, {"sha": "0e9feef3746e75c9053e114e5c7fabb0bb0ad42b", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b4de0e0793c8921d30e0fb886be712d17db6e5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=94b4de0e0793c8921d30e0fb886be712d17db6e5", "patch": "@@ -394,7 +394,7 @@ pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n \n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {\n     use VisibilityKind::*;\n-    match (&l.node, &r.node) {\n+    match (&l.kind, &r.kind) {\n         (Public, Public) | (Inherited, Inherited) | (Crate(_), Crate(_)) => true,\n         (Restricted { path: l, .. }, Restricted { path: r, .. }) => eq_path(l, r),\n         _ => false,"}]}