{"sha": "85c4b4c7f249bdb33cba9ac738efbcb9000e4b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzRiNGM3ZjI0OWJkYjMzY2JhOWFjNzM4ZWZiY2I5MDAwZTRiODY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-01-05T15:57:47Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-01-05T17:34:14Z"}, "message": "use the correct supertrait substitution in `object_ty_for_trait`\n\nFixes #57156.", "tree": {"sha": "55822b000bf2e7504d54d3b97589a24e89ae9f70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55822b000bf2e7504d54d3b97589a24e89ae9f70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86", "html_url": "https://github.com/rust-lang/rust/commit/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68614265d312fc2cbe8a696f7dabb9416eb6f221", "url": "https://api.github.com/repos/rust-lang/rust/commits/68614265d312fc2cbe8a696f7dabb9416eb6f221", "html_url": "https://github.com/rust-lang/rust/commit/68614265d312fc2cbe8a696f7dabb9416eb6f221"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "3851187c39d96a851dd3e428b8a54291673f1dbf", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=85c4b4c7f249bdb33cba9ac738efbcb9000e4b86", "patch": "@@ -252,6 +252,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                                           method: &ty::AssociatedItem)\n                                           -> Option<MethodViolationCode>\n     {\n+        debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n         // Any method that has a `Self : Sized` requisite is otherwise\n         // exempt from the regulations.\n         if self.generics_require_sized_self(method.def_id) {\n@@ -270,6 +271,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                                  method: &ty::AssociatedItem)\n                                  -> bool\n     {\n+        debug!(\"is_vtable_safe_method({:?}, {:?})\", trait_def_id, method);\n         // Any method that has a `Self : Sized` requisite can't be called.\n         if self.generics_require_sized_self(method.def_id) {\n             return false;\n@@ -389,6 +391,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     fn receiver_for_self_ty(\n         self, receiver_ty: Ty<'tcx>, self_ty: Ty<'tcx>, method_def_id: DefId\n     ) -> Ty<'tcx> {\n+        debug!(\"receiver_for_self_ty({:?}, {:?}, {:?})\", receiver_ty, self_ty, method_def_id);\n         let substs = Substs::for_item(self, method_def_id, |param, _| {\n             if param.index == 0 {\n                 self_ty.into()\n@@ -397,7 +400,10 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             }\n         });\n \n-        receiver_ty.subst(self, substs)\n+        let result = receiver_ty.subst(self, substs);\n+        debug!(\"receiver_for_self_ty({:?}, {:?}, {:?}) = {:?}\",\n+               receiver_ty, self_ty, method_def_id, result);\n+        result\n     }\n \n     /// creates the object type for the current trait. For example,\n@@ -413,18 +419,26 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         );\n \n         let mut associated_types = traits::supertraits(self, ty::Binder::dummy(trait_ref))\n-            .flat_map(|trait_ref| self.associated_items(trait_ref.def_id()))\n-            .filter(|item| item.kind == ty::AssociatedKind::Type)\n+            .flat_map(|super_trait_ref| {\n+                self.associated_items(super_trait_ref.def_id())\n+                    .map(move |item| (super_trait_ref, item))\n+            })\n+            .filter(|(_, item)| item.kind == ty::AssociatedKind::Type)\n             .collect::<Vec<_>>();\n \n         // existential predicates need to be in a specific order\n-        associated_types.sort_by_cached_key(|item| self.def_path_hash(item.def_id));\n-\n-        let projection_predicates = associated_types.into_iter().map(|item| {\n+        associated_types.sort_by_cached_key(|(_, item)| self.def_path_hash(item.def_id));\n+\n+        let projection_predicates = associated_types.into_iter().map(|(super_trait_ref, item)| {\n+            // We *can* get bound lifetimes here in cases like\n+            // `trait MyTrait: for<'s> OtherTrait<&'s T, Output=bool>`.\n+            //\n+            // binder moved to (*)...\n+            let super_trait_ref = super_trait_ref.skip_binder();\n             ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-                ty: self.mk_projection(item.def_id, trait_ref.substs),\n+                ty: self.mk_projection(item.def_id, super_trait_ref.substs),\n                 item_def_id: item.def_id,\n-                substs: trait_ref.substs,\n+                substs: super_trait_ref.substs,\n             })\n         });\n \n@@ -433,7 +447,8 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         );\n \n         let object_ty = self.mk_dynamic(\n-            ty::Binder::dummy(existential_predicates),\n+            // (*) ... binder re-introduced here\n+            ty::Binder::bind(existential_predicates),\n             lifetime,\n         );\n "}, {"sha": "f20b0f41c7fa5ac535c67dcb901118b94d19cc65", "filename": "src/test/ui/issues/issue-57156.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86/src%2Ftest%2Fui%2Fissues%2Fissue-57156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c4b4c7f249bdb33cba9ac738efbcb9000e4b86/src%2Ftest%2Fui%2Fissues%2Fissue-57156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57156.rs?ref=85c4b4c7f249bdb33cba9ac738efbcb9000e4b86", "patch": "@@ -0,0 +1,23 @@\n+// compile-pass\n+\n+trait Foo<Args> {\n+    type Output;\n+}\n+\n+trait Bar<'a, T>: for<'s> Foo<&'s T, Output=bool> {\n+    fn cb(&self) -> Box<dyn Bar<'a, T, Output=bool>>;\n+}\n+\n+impl<'s> Foo<&'s ()> for () {\n+    type Output = bool;\n+}\n+\n+impl<'a> Bar<'a, ()> for () {\n+    fn cb(&self) -> Box<dyn Bar<'a, (), Output=bool>> {\n+        Box::new(*self)\n+    }\n+}\n+\n+fn main() {\n+    let _t = ().cb();\n+}"}]}