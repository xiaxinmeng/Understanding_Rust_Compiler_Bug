{"sha": "30fac74bf3c370173d9c2cf1e023a6128488f5db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZmFjNzRiZjNjMzcwMTczZDljMmNmMWUwMjNhNjEyODQ4OGY1ZGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-20T21:42:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:32:43Z"}, "message": "tutorial: Try to fit the early discussion of :: in better", "tree": {"sha": "d3cd32dd1ec3533fcb29b5d3f4ccbab053ed6667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cd32dd1ec3533fcb29b5d3f4ccbab053ed6667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30fac74bf3c370173d9c2cf1e023a6128488f5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30fac74bf3c370173d9c2cf1e023a6128488f5db", "html_url": "https://github.com/rust-lang/rust/commit/30fac74bf3c370173d9c2cf1e023a6128488f5db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30fac74bf3c370173d9c2cf1e023a6128488f5db/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbddd5ed3417dbdf6849a0ffb579cc2b0284d447", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbddd5ed3417dbdf6849a0ffb579cc2b0284d447", "html_url": "https://github.com/rust-lang/rust/commit/cbddd5ed3417dbdf6849a0ffb579cc2b0284d447"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "74943df8d001e5f71a6374cd067dddfc803bdec5", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30fac74bf3c370173d9c2cf1e023a6128488f5db/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/30fac74bf3c370173d9c2cf1e023a6128488f5db/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=30fac74bf3c370173d9c2cf1e023a6128488f5db", "patch": "@@ -128,7 +128,7 @@ we have a file `hello.rs` containing this program:\n \n ~~~~\n fn main() {\n-    io::println(\"hello?\");\n+    core::io::println(\"hello?\");\n }\n ~~~~\n \n@@ -142,8 +142,8 @@ error. If you introduce an error into the program (for example, by changing\n an error message like this:\n \n ~~~~ {.notrust}\n-hello.rs:2:4: 2:16 error: unresolved name: io::print_with_unicorns\n-hello.rs:2     io::print_with_unicorns(\"hello?\");\n+hello.rs:2:4: 2:16 error: unresolved name: core::io::print_with_unicorns\n+hello.rs:2     core::io::print_with_unicorns(\"hello?\");\n                ^~~~~~~~~~~~~~~~~~~~~~~\n ~~~~\n \n@@ -180,20 +180,21 @@ JavaScript, C#, or PHP), Rust will feel familiar. Code is arranged\n in blocks delineated by curly braces; there are control structures\n for branching and looping, like the familiar `if` and `while`; function\n calls are written `myfunc(arg1, arg2)`; operators are written the same\n-and mostly have the same precedence as in C; comments are again like C.\n+and mostly have the same precedence as in C; comments are again like C;\n+module names are separated with double-colon, `::`, as with C++.\n \n The main surface difference to be aware of is that the condition at\n the head of control structures like `if` and `while` do not require\n parentheses, while their bodies *must* be wrapped in\n braces. Single-statement, unbraced bodies are not allowed.\n \n ~~~~\n-# fn recalibrate_universe() -> bool { true }\n+# mod universe { fn recalibrate() -> bool { true } }\n fn main() {\n     /* A simple loop */\n     loop {\n         // A tricky calculation\n-        if recalibrate_universe() {\n+        if universe::recalibrate() {\n             return;\n         }\n     }\n@@ -209,16 +210,11 @@ let hi = \"hi\";\n let mut count = 0;\n \n while count < 10 {\n-    io::println(hi);\n+    core::io::println(fmt!(\"count: %?\", i));\n     count += 1;\n }\n ~~~~\n \n-The name of the function that prints a line of text, `io::println`, is\n-qualified: it refers to the function named `println` that's defined in the\n-module `io`. In Rust, a double colon separates parts of a\n-qualified name. For more details, see the section on [crates](#crates).\n-\n Although Rust can almost always infer the types of local variables, you\n can specify a variable's type by following it with a colon, then the type\n name. Constants, an the other hand, always require a type annotation."}]}