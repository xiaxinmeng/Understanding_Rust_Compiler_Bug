{"sha": "d98e174497529883c266037a53bb03936c90bb5a", "node_id": "C_kwDOAAsO6NoAKGQ5OGUxNzQ0OTc1Mjk4ODNjMjY2MDM3YTUzYmIwMzkzNmM5MGJiNWE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-05T03:46:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T03:46:25Z"}, "message": "Rollup merge of #110946 - RalfJung:tls-realstd, r=m-ou-se\n\navoid duplicating TLS state between test std and realstd\n\nThis basically re-lands https://github.com/rust-lang/rust/pull/100201 and https://github.com/rust-lang/rust/pull/106638, which got reverted by https://github.com/rust-lang/rust/pull/110861. This works around 2 Miri limitations:\n- Miri doesn't support the magic linker section that our Windows TLS support relies on, and instead knows where in std to find the symbol that stores the thread callback.\n- For macOS, Miri only supports at most one destructor to be registered per thread.\n\nThe 2nd would not be very hard to fix (though the intended destructor order is unclear); the first would be a lot of work to fix. Neither of these is a problem for regular Rust code, but in the std test suite we have essentially 2 copies of the std code and then these both become issues. To avoid that we have the std test crate import the TLS code from the real std instead of having its own copy.\n\nr? ``````@m-ou-se``````", "tree": {"sha": "80838847584752f6d30cb856535486083c0ecc17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80838847584752f6d30cb856535486083c0ecc17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98e174497529883c266037a53bb03936c90bb5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVHwRCRBK7hj4Ov3rIwAAAIcIAA6gVF2XTCWeB5IJcl7e4DRi\nu3PiEGMt6x+nHeUuCyX3OiopJODqw2cWmW6KmAhpGPINa3Hj5wVfinVUXTWsA1LV\n3nBej/WRUAJxy+3nfukbd0LEiT/DHZ4meYa/FKZUnbSpYGg8tcufxevSGswMpaiF\nJyWzgplAERmgPSX1XC2djmL0oLaFHa/fG/4VkN66YFRB04jXIwk64OErwZGRF4sX\nM95rSEaiDbLzCe7CAxXM41xqrZVKxOReZr45LDtOLDgQ5QaysZaA4isESgbKkuWD\nANqRglghkhNZZK4tZpvxolOWcgtSvCuPIIUlKnPi9COmke7bbtKDuYXgC/u+j/E=\n=LPgt\n-----END PGP SIGNATURE-----\n", "payload": "tree 80838847584752f6d30cb856535486083c0ecc17\nparent 74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d\nparent d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2\nauthor Yuki Okushi <jtitor@2k36.org> 1683258385 +0900\ncommitter GitHub <noreply@github.com> 1683258385 +0900\n\nRollup merge of #110946 - RalfJung:tls-realstd, r=m-ou-se\n\navoid duplicating TLS state between test std and realstd\n\nThis basically re-lands https://github.com/rust-lang/rust/pull/100201 and https://github.com/rust-lang/rust/pull/106638, which got reverted by https://github.com/rust-lang/rust/pull/110861. This works around 2 Miri limitations:\n- Miri doesn't support the magic linker section that our Windows TLS support relies on, and instead knows where in std to find the symbol that stores the thread callback.\n- For macOS, Miri only supports at most one destructor to be registered per thread.\n\nThe 2nd would not be very hard to fix (though the intended destructor order is unclear); the first would be a lot of work to fix. Neither of these is a problem for regular Rust code, but in the std test suite we have essentially 2 copies of the std code and then these both become issues. To avoid that we have the std test crate import the TLS code from the real std instead of having its own copy.\n\nr? ``````@m-ou-se``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98e174497529883c266037a53bb03936c90bb5a", "html_url": "https://github.com/rust-lang/rust/commit/d98e174497529883c266037a53bb03936c90bb5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98e174497529883c266037a53bb03936c90bb5a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d", "html_url": "https://github.com/rust-lang/rust/commit/74c4821045c68d42bb8b8a7c998bdb5c2a72bd0d"}, {"sha": "d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "html_url": "https://github.com/rust-lang/rust/commit/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "77f645883102c392796d1c925008beb22483f157", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d98e174497529883c266037a53bb03936c90bb5a/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98e174497529883c266037a53bb03936c90bb5a/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=d98e174497529883c266037a53bb03936c90bb5a", "patch": "@@ -1,5 +1,10 @@\n #![unstable(feature = \"thread_local_internals\", reason = \"should not be necessary\", issue = \"none\")]\n \n+// There are three thread-local implementations: \"static\", \"fast\", \"OS\".\n+// The \"OS\" thread local key type is accessed via platform-specific API calls and is slow, while the\n+// \"fast\" key type is accessed via code generated via LLVM, where TLS keys are set up by the linker.\n+// \"static\" is for single-threaded platforms where a global static is sufficient.\n+\n cfg_if::cfg_if! {\n     if #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))] {\n         #[doc(hidden)]"}, {"sha": "5d48ce1e03bc359bd1f418a9d718918a292b5f04", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d98e174497529883c266037a53bb03936c90bb5a/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98e174497529883c266037a53bb03936c90bb5a/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=d98e174497529883c266037a53bb03936c90bb5a", "patch": "@@ -18,7 +18,7 @@ pub macro thread_local_inner {\n         ) -> $crate::option::Option<&'static $t> {\n             const INIT_EXPR: $t = $init;\n \n-                        // On platforms without `#[thread_local]` we fall back to the\n+            // On platforms without `#[thread_local]` we fall back to the\n             // same implementation as below for os thread locals.\n             #[inline]\n             const fn __init() -> $t { INIT_EXPR }"}, {"sha": "f712c872708ac97c2510cbb0d859c6c1222026a5", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d98e174497529883c266037a53bb03936c90bb5a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98e174497529883c266037a53bb03936c90bb5a/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=d98e174497529883c266037a53bb03936c90bb5a", "patch": "@@ -193,22 +193,22 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[macro_use]\n mod local;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::local::{AccessError, LocalKey};\n-\n-// Provide the type used by the thread_local! macro to access TLS keys. This\n-// needs to be kept in sync with the macro itself (in `local.rs`).\n-// There are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n-// type is accessed via platform-specific API calls and is slow, while the \"fast\"\n-// key type is accessed via code generated via LLVM, where TLS keys are set up\n-// by the elf linker. \"static\" is for single-threaded platforms where a global\n-// static is sufficient.\n-\n-// Implementation details used by the thread_local!{} macro.\n-#[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-pub mod local_impl {\n-    pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+cfg_if::cfg_if! {\n+    if #[cfg(test)] {\n+        // Avoid duplicating the global state assoicated with thread-locals between this crate and\n+        // realstd. Miri relies on this.\n+        pub use realstd::thread::{local_impl, AccessError, LocalKey};\n+    } else {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use self::local::{AccessError, LocalKey};\n+\n+        // Implementation details used by the thread_local!{} macro.\n+        #[doc(hidden)]\n+        #[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n+        pub mod local_impl {\n+            pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}