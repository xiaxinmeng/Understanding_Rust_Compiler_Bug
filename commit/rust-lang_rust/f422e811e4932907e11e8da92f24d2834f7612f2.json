{"sha": "f422e811e4932907e11e8da92f24d2834f7612f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MjJlODExZTQ5MzI5MDdlMTFlOGRhOTJmMjRkMjgzNGY3NjEyZjI=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-03T06:45:41Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-11-03T06:45:41Z"}, "message": "preserve bindings order for Some", "tree": {"sha": "6408ccd8eb5e43395ea15fa8f31a3a741076f31d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6408ccd8eb5e43395ea15fa8f31a3a741076f31d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f422e811e4932907e11e8da92f24d2834f7612f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f422e811e4932907e11e8da92f24d2834f7612f2", "html_url": "https://github.com/rust-lang/rust/commit/f422e811e4932907e11e8da92f24d2834f7612f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f422e811e4932907e11e8da92f24d2834f7612f2/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bdce7bedd765438ce4f138cb0ce9335659e32d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce7bedd765438ce4f138cb0ce9335659e32d6", "html_url": "https://github.com/rust-lang/rust/commit/6bdce7bedd765438ce4f138cb0ce9335659e32d6"}], "stats": {"total": 497, "additions": 239, "deletions": 258}, "files": [{"sha": "e5fee5df06ab03ff6c7cd963bc361a3c727b71b3", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -45,20 +45,42 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> bool {\n         // repeatedly simplify match pairs until fixed point is reached\n         debug!(\"simplify_candidate(candidate={:?})\", candidate);\n+\n+        // exisiting_bindings and new_bindings exists to keep the semantics in order\n+        // reversing the binding order for bindings after `@` change binding order in places\n+        // it shouldn't be changed, for example `let (Some(a), Some(b)) = (x, y)`\n+        //\n+        // To avoid this, the binding occurs in the following manner:\n+        // * the bindings for one iteration of the following loop occurs in order (i.e. left to\n+        // right)\n+        // * the bindings from the previous iteration of the loop is prepended to the bindings from\n+        // the current iteration (in the implementation this is done by mem::swap and extend)\n+        // * after all iterations, these new bindings are then appended to the bindings that were\n+        // prexisting (i.e. `candidate.binding` when the function was called).\n+        //\n+        // example:\n+        // candidate.bindings = [1, 2, 3]\n+        // binding in iter 1: [4, 5]\n+        // binding in iter 2: [6, 7]\n+        //\n+        // final binding: [1, 2, 3, 6, 7, 4, 5]\n+        let mut exisiting_bindings = mem::take(&mut candidate.bindings);\n         let mut new_bindings = Vec::new();\n         loop {\n             let match_pairs = mem::take(&mut candidate.match_pairs);\n \n             if let [MatchPair { pattern: Pat { kind: box PatKind::Or { pats }, .. }, place }] =\n                 *match_pairs\n             {\n+                exisiting_bindings.extend_from_slice(&new_bindings);\n+                mem::swap(&mut candidate.bindings, &mut exisiting_bindings);\n                 candidate.subcandidates = self.create_or_subcandidates(candidate, place, pats);\n                 return true;\n             }\n \n             let mut changed = false;\n             for match_pair in match_pairs {\n-                match self.simplify_match_pair(match_pair, candidate, &mut new_bindings) {\n+                match self.simplify_match_pair(match_pair, candidate) {\n                     Ok(()) => {\n                         changed = true;\n                     }\n@@ -80,11 +102,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             //     let z = x.copy_field;\n             //     let y = x;\n             // }\n-            new_bindings.extend_from_slice(&candidate.bindings);\n+            candidate.bindings.extend_from_slice(&new_bindings);\n             mem::swap(&mut candidate.bindings, &mut new_bindings);\n-            new_bindings.clear();\n+            candidate.bindings.clear();\n \n             if !changed {\n+                exisiting_bindings.extend_from_slice(&new_bindings);\n+                mem::swap(&mut candidate.bindings, &mut exisiting_bindings);\n                 // Move or-patterns to the end, because they can result in us\n                 // creating additional candidates, so we want to test them as\n                 // late as possible.\n@@ -124,7 +148,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         match_pair: MatchPair<'pat, 'tcx>,\n         candidate: &mut Candidate<'pat, 'tcx>,\n-        bindings: &mut Vec<Binding<'tcx>>,\n     ) -> Result<(), MatchPair<'pat, 'tcx>> {\n         let tcx = self.hir.tcx();\n         match *match_pair.pattern.kind {\n@@ -152,7 +175,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             PatKind::Binding { name, mutability, mode, var, ty, ref subpattern, is_primary: _ } => {\n-                bindings.push(Binding {\n+                candidate.bindings.push(Binding {\n                     name,\n                     mutability,\n                     span: match_pair.pattern.span,"}, {"sha": "386726bfddc74676c302be2c9adcb203702664ac", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -52,13 +52,13 @@\n -     }\n - \n -     bb3: {\n-          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n-          _9 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n           StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n           _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:15: 5:16\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n+          _9 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:5:24: 5:25\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n-          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n+          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n -         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n +         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n       }"}, {"sha": "bc5934dec84e41961e0e4ed888b6a28e888175e8", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -59,13 +59,13 @@\n - \n -     bb4: {\n +     bb2: {\n-          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n-          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n           StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n           _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:15: 13:16\n+          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n+          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch.rs:13:24: 13:25\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n-          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n           StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n -         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n +         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n       }"}, {"sha": "b0357f1aecd61f7cf5f42f582a3403fbb81de9f2", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -71,16 +71,16 @@\n   \n -     bb4: {\n +     bb3: {\n-          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n-          _13 = (((_4.2: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n-          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n-          _12 = (((_4.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n           StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n           _11 = (((_4.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:15: 6:16\n+          StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n+          _12 = (((_4.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:24: 6:25\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n+          _13 = (((_4.2: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:33: 6:34\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n-          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n-          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n           StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n+          StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n -         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n +         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n       }"}, {"sha": "f51a08ed73068ade6eca6a0a03e6d1903420aa5b", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -109,10 +109,10 @@\n       }\n   \n +     bb2: {\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-+         _16 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n +         _15 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n++         _16 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n@@ -132,10 +132,10 @@\n       bb3: {\n -         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n -         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:21: 24:30\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-+         _21 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n +         _20 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n++         _21 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n@@ -155,10 +155,10 @@\n       bb4: {\n -         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n -         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-+         _26 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n +         _25 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n++         _26 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n@@ -178,10 +178,10 @@\n       bb5: {\n -         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n -         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:23: 26:34\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-+         _31 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n +         _30 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n++         _31 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n@@ -199,10 +199,10 @@\n       }\n   \n       bb6: {\n--         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n--         _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n -         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n -         _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+-         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+-         _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n -         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n -         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n -         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n@@ -214,8 +214,8 @@\n -         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n -         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n -         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+-         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n +         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:5: 28:7\n@@ -225,10 +225,10 @@\n       }\n   \n       bb7: {\n--         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n--         _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n -         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n -         _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+-         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+-         _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n -         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n -         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n -         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n@@ -240,16 +240,16 @@\n -         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n -         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n -         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n--         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n -         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+-         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n -     }\n - \n -     bb8: {\n--         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n--         _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n -         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n -         _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+-         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+-         _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n -         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n -         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n -         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n@@ -261,16 +261,16 @@\n -         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n -         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n -         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+-         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n -     }\n - \n -     bb9: {\n--         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n--         _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n -         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n -         _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+-         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+-         _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n -         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n -         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n -         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n@@ -282,8 +282,8 @@\n -         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n -         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n -         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n--         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n -         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+-         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n -     }\n - "}, {"sha": "05ef6721e65357d198f4631c37ba7888482bc565", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -109,10 +109,10 @@\n - \n -     bb6: {\n +     bb2: {\n-          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n-          _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n           _12 = (((*(_4.0: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n+          StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n+          _13 = (((*(_4.1: &ViewportPercentageLength)) as Vw).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n           StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:49\n           StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n           _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:38: 23:41\n@@ -124,18 +124,18 @@\n           ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:35: 23:50\n           StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n           StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n+          StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n +         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n       }\n   \n -     bb7: {\n +     bb3: {\n-          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n-          _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n           StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n           _17 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:14: 24:17\n+          StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n+          _18 = (((*(_4.1: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:24: 24:29\n           StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:49\n           StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n           _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:38: 24:41\n@@ -147,18 +147,18 @@\n           ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n           discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:35: 24:50\n           StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n-          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n           StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n+          StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:49: 24:50\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n +         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n       }\n   \n -     bb8: {\n +     bb4: {\n-          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n-          _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n           _22 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n+          StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n+          _23 = (((*(_4.1: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n           StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:55\n           StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n           _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:44: 25:47\n@@ -170,18 +170,18 @@\n           ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:39: 25:56\n           StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n           StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n+          StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n +         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n       }\n   \n -     bb9: {\n +     bb5: {\n-          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n-          _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n           StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n           _27 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:16: 26:19\n+          StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n+          _28 = (((*(_4.1: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:28: 26:33\n           StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:55\n           StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n           _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:44: 26:47\n@@ -193,8 +193,8 @@\n           ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n           discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:39: 26:56\n           StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n-          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n           StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n+          StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:55: 26:56\n -         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n +         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:8: 28:6\n       }"}, {"sha": "9a6094f12dfb164dd4fb6022cae9c417bd744c67", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -56,13 +56,13 @@\n       }\n   \n       bb4: {\n-          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n-          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n           StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n           _9 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:15: 9:16\n+          StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n+          _10 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:24: 9:25\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n+          StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n       }\n   "}, {"sha": "c3aecb4529351f5d66b072c399274e33af8fca64", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -42,13 +42,13 @@\n       }\n   \n       bb3: {\n-          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n-          _9 = (((_3.1: std::option::Option<bool>) as Some).0: bool); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n           StorageLive(_8);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:15: 20:16\n           _8 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:15: 20:16\n+          StorageLive(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n+          _9 = (((_3.1: std::option::Option<bool>) as Some).0: bool); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:24: 20:25\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n-          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n+          StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n           goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 22:6\n       }\n   "}, {"sha": "3ce659ccd14da3ec29b531edb83eac3fb776910e", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -8,7 +8,7 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n    |                 -- data moved here\n LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n-   |                        --- ...and here\n+   |            --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n@@ -22,7 +22,7 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n    |                 -- data moved here\n LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n-   |            --- ...and here\n+   |                        --- ...and here\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n "}, {"sha": "bce43f9df85c841d84b27aaabfb02bd9186a03e9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -17,8 +17,8 @@ fn main() {\n     let a @ (b, c) = (u(), u()); //~ ERROR use of partially moved value\n \n     match Ok(U) {\n-        a @ Ok(b) | a @ Err(b) => {} //~ ERROR use of partially moved value\n-                                     //~^ ERROR use of partially moved value\n+        a @ Ok(b) | a @ Err(b) => {} //~ ERROR use of moved value\n+                                     //~^ ERROR use of moved value\n     }\n \n     fn fun(a @ b: U) {} //~ ERROR use of moved value"}, {"sha": "bfb7b479731a6d91db7491a64a4189abfc858dd4", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -29,35 +29,27 @@ LL |     let a @ (b, c) = (u(), u());\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:9\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:20:16\n    |\n+LL |     match Ok(U) {\n+   |           ----- move occurs because value has type `std::result::Result<U, U>`, which does not implement the `Copy` trait\n LL |         a @ Ok(b) | a @ Err(b) => {}\n-   |         ^^^^^^^-^\n+   |         -------^-\n    |         |      |\n-   |         |      value partially moved here\n-   |         value used here after partial move\n-   |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         a @ Ok(ref b) | a @ Err(b) => {}\n-   |                ^^^\n+   |         |      value used here after move\n+   |         value moved here\n \n-error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-move-and-move.rs:20:21\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:20:29\n    |\n+LL |     match Ok(U) {\n+   |           ----- move occurs because value has type `std::result::Result<U, U>`, which does not implement the `Copy` trait\n LL |         a @ Ok(b) | a @ Err(b) => {}\n-   |                     ^^^^^^^^-^\n+   |                     --------^-\n    |                     |       |\n-   |                     |       value partially moved here\n-   |                     value used here after partial move\n-   |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         a @ Ok(b) | a @ Err(ref b) => {}\n-   |                             ^^^\n+   |                     |       value used here after move\n+   |                     value moved here\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:27:9"}, {"sha": "8a574f880ed8d0b9c2a6f9f9e667fd4ace4aa53f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -50,30 +50,33 @@ fn main() {\n         //~^ ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n-        //~| ERROR use of partially moved value\n+        //~| ERROR use of moved value\n         None => {}\n     }\n     match Some([U, U]) {\n         mut a @ Some([ref b, ref mut c]) => {}\n         //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n         None => {}\n     }\n     match Some(u()) {\n         a @ Some(ref b) => {}\n         //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n         None => {}\n     }\n     match Some((u(), u())) {\n         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n         //~^ ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n         //~| ERROR borrow of moved value\n-        //~| ERROR use of partially moved value\n+        //~| ERROR use of moved value\n         None => {}\n     }\n     match Some([u(), u()]) {\n         mut a @ Some([ref b, ref mut c]) => {}\n         //~^ ERROR borrow of moved value\n+        //~| ERROR borrow of moved value\n         None => {}\n     }\n }"}, {"sha": "79addf9d574b673f78cb18770d8de5573fc0a9ce", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -155,7 +155,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:62:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -165,7 +165,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -176,7 +176,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -186,7 +186,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -196,7 +196,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -280,35 +280,60 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:9\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:49:38\n    |\n+LL |     match Some((U, U)) {\n+   |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^\n+   |         -----------------------------^^^^^^^^^--\n    |         |                            |\n-   |         |                            value partially moved here\n-   |         value used here after partial move\n+   |         |                            value used here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:57:30\n    |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n+LL |     match Some([U, U]) {\n+   |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n+LL |         mut a @ Some([ref b, ref mut c]) => {}\n+   |         ---------------------^^^^^^^^^--\n+   |         |                    |\n+   |         |                    value borrowed here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:63:18\n    |\n-LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n-   |                                      ^^^\n+LL |     match Some(u()) {\n+   |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait\n+LL |         a @ Some(ref b) => {}\n+   |         ---------^^^^^-\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved here\n \n-error[E0382]: use of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:69:38\n    |\n+LL |     match Some((u(), u())) {\n+   |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^\n+   |         -----------------------------^^^^^^^^^--\n    |         |                            |\n-   |         |                            value partially moved here\n-   |         value used here after partial move\n-   |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n+   |         |                            value used here after move\n+   |         value moved here\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:30\n    |\n-LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n-   |                                      ^^^\n+LL |     match Some([u(), u()]) {\n+   |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n+LL |         mut a @ Some([ref b, ref mut c]) => {}\n+   |         ---------------------^^^^^^^^^--\n+   |         |                    |\n+   |         |                    value borrowed here after move\n+   |         value moved here\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:16:11\n@@ -321,6 +346,6 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "b9235eabd88f43dbd622e683a7b1a6554a269f6e", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -60,13 +60,11 @@ fn main() {\n     match Some([U, U]) {\n         ref mut a @ Some([b, mut c]) => {}\n         //~^ ERROR cannot move out of value because it is borrowed\n-        //~| ERROR borrow of partially moved value\n         None => {}\n     }\n     match Some(u()) {\n         ref a @ Some(b) => {}\n         //~^ ERROR cannot move out of value because it is borrowed\n-        //~| ERROR borrow of partially moved value\n         None => {}\n     }\n     match Some((u(), u())) {\n@@ -81,7 +79,6 @@ fn main() {\n     match Some([u(), u()]) {\n         ref mut a @ Some([b, mut c]) => {}\n         //~^ ERROR cannot move out of value because it is borrowed\n-        //~| ERROR borrow of partially moved value\n         None => {}\n     }\n }"}, {"sha": "50b2f8929f2251794dbee3687f39704bef8cfd05", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 8, "deletions": 53, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -140,7 +140,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:67:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:66:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -149,7 +149,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:73:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -159,7 +159,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:73:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -168,7 +168,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:73:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -177,7 +177,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:82:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:80:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -286,38 +286,8 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:61:9\n-   |\n-LL |         ref mut a @ Some([b, mut c]) => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^-----^^\n-   |         |                    |\n-   |         |                    value partially moved here\n-   |         value borrowed here after partial move\n-   |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         ref mut a @ Some([b, ref mut c]) => {}\n-   |                              ^^^\n-\n-error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:67:9\n-   |\n-LL |         ref a @ Some(b) => {}\n-   |         ^^^^^^^^^^^^^-^\n-   |         |            |\n-   |         |            value partially moved here\n-   |         value borrowed here after partial move\n-   |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         ref a @ Some(ref b) => {}\n-   |                      ^^^\n-\n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:73:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       ^^^^^^^^-----\n@@ -332,7 +302,7 @@ LL |         ref a @ Some((ref b @ ref mut c, ref d @ e)) => {}\n    |                               ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:73:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:71:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      ^^^^^^^^-\n@@ -346,21 +316,6 @@ help: borrow this field in the pattern to avoid moving the value\n LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              ^^^\n \n-error[E0382]: borrow of partially moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:82:9\n-   |\n-LL |         ref mut a @ Some([b, mut c]) => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^-----^^\n-   |         |                    |\n-   |         |                    value partially moved here\n-   |         value borrowed here after partial move\n-   |\n-   = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n-   |\n-LL |         ref mut a @ Some([b, ref mut c]) => {}\n-   |                              ^^^\n-\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n    |\n@@ -404,6 +359,6 @@ LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 39 previous errors\n+error: aborting due to 36 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "2d391cd7d0722ee97fcfc0f9bf31da76da4d57cf", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-        //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n             **z = None;\n             println!(\"{}\", *a);\n         }\n@@ -78,8 +78,8 @@ fn main() {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n             //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n             //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-            //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-            //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n+            //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n+            //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n             *b = U;\n             drop(a);\n         }\n@@ -90,8 +90,6 @@ fn main() {\n         //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n         //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n         //~| ERROR cannot assign to `*b`, as it is immutable for the pattern guard\n-        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n         _ => {}\n     }\n     match Ok(U) {\n@@ -105,8 +103,6 @@ fn main() {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n         //~^ ERROR cannot borrow value as mutable because it is also borrowed as immutable\n         //~| ERROR cannot borrow value as mutable because it is also borrowed as immutable\n-        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n-        //~| ERROR cannot borrow value as immutable because it is also borrowed as mutable\n         //~| ERROR cannot move out of `b` in pattern guard\n         //~| ERROR cannot move out of `b` in pattern guard\n         _ => {}"}, {"sha": "00136c2576423cf52bbddde3a05f9fcbe299d350", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 34, "deletions": 70, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:98:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:98:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:105:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:105:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:135:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:140:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -294,17 +294,17 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              |           value moved into `c` here\n    |                              value borrowed, by `b`, here\n \n-error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:9\n+error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^-----^\n+   |         ----------------------^^^^^-\n    |         |                     |\n    |         |                     immutable borrow occurs here\n    |         mutable borrow occurs here\n ...\n-LL |             println!(\"{}\", *a);\n-   |                            -- immutable borrow later used here\n+LL |             **z = None;\n+   |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n@@ -330,47 +330,29 @@ LL |     let ref a @ ref mut b = u();\n LL |     *b = u();\n    |     -------- mutable borrow later used here\n \n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n+error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-   |         ^^^^^^^^^^^---------^\n+   |         -----------^^^^^^^^^-\n    |         |          |\n    |         |          mutable borrow occurs here\n    |         immutable borrow occurs here\n ...\n-LL |             *b = U;\n-   |             ------ mutable borrow later used here\n+LL |             drop(a);\n+   |                  - immutable borrow later used here\n \n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n+error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-   |                                 ^^^^^^^^^^^^---------^\n+   |                                 ------------^^^^^^^^^-\n    |                                 |           |\n    |                                 |           mutable borrow occurs here\n    |                                 immutable borrow occurs here\n ...\n-LL |             *b = U;\n-   |             ------ mutable borrow later used here\n-\n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n-   |\n-LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n-   |         ^^^^^^^^^^^---------^                               ------ mutable borrow later used here\n-   |         |          |\n-   |         |          mutable borrow occurs here\n-   |         immutable borrow occurs here\n-\n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n-   |\n-LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n-   |                                 ^^^^^^^^^^^^---------^      ------ mutable borrow later used here\n-   |                                 |           |\n-   |                                 |           mutable borrow occurs here\n-   |                                 immutable borrow occurs here\n+LL |             drop(a);\n+   |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:61\n@@ -381,65 +363,47 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:98:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:105:9\n-   |\n-LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n-   |         ^^^^^^^^^^^---------^                                    - mutable borrow later used here\n-   |         |          |\n-   |         |          mutable borrow occurs here\n-   |         immutable borrow occurs here\n-\n-error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:105:33\n-   |\n-LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n-   |                                 ^^^^^^^^^^^^---------^           - mutable borrow later used here\n-   |                                 |           |\n-   |                                 |           mutable borrow occurs here\n-   |                                 immutable borrow occurs here\n-\n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:105:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:105:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -451,7 +415,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:125:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -463,7 +427,7 @@ LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:135:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^---------^^^^^^^^^^^^\n@@ -484,7 +448,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      |       value borrowed here after move\n    |                      move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 51 previous errors\n+error: aborting due to 47 previous errors\n \n Some errors have detailed explanations: E0382, E0502, E0507, E0594.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "339814e1e3167278085f400ad4e74bec7897902d", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -84,15 +84,15 @@ fn main() {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n             //~^ ERROR cannot borrow value as mutable more than once at a time\n             //~| ERROR cannot borrow value as mutable more than once at a time\n-            //~| ERROR cannot borrow value as mutable more than once at a time\n-            //~| ERROR cannot borrow value as mutable more than once at a time\n             *b = U;\n         }\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n             //~^ ERROR cannot borrow value as mutable more than once at a time\n             //~| ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n             *a = Err(U);\n \n             // FIXME: The binding name value used above makes for problematic diagnostics.\n@@ -103,6 +103,8 @@ fn main() {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n             //~^ ERROR cannot borrow value as mutable more than once at a time\n             //~| ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n+            //~| ERROR cannot borrow value as mutable more than once at a time\n             drop(a);\n         }\n     }"}, {"sha": "0370037f24210d9765a25f95462621ef8c5e71b7", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f422e811e4932907e11e8da92f24d2834f7612f2/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=f422e811e4932907e11e8da92f24d2834f7612f2", "patch": "@@ -168,7 +168,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -177,7 +177,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:93:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -283,28 +283,52 @@ LL |     *b = U;\n    |     ------ first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |         ^^^^^^^^^^^^^^^---------^\n+   |         ---------------^^^^^^^^^-\n    |         |              |\n-   |         |              first mutable borrow occurs here\n-   |         second mutable borrow occurs here\n+   |         |              second mutable borrow occurs here\n+   |         first mutable borrow occurs here\n ...\n-LL |             *b = U;\n-   |             ------ first borrow later used here\n+LL |             *a = Err(U);\n+   |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:84:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:91:53\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ----------------^^^^^^^^^-\n+   |                                     |               |\n+   |                                     |               second mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+...\n+LL |             *a = Err(U);\n+   |             ----------- first borrow later used here\n+\n+error[E0499]: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:24\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------------^^^^^^^^^-\n+   |         |              |\n+   |         |              second mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+...\n+LL |             drop(a);\n+   |                  - first borrow later used here\n+\n+error[E0499]: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:103:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-   |                                     ^^^^^^^^^^^^^^^^---------^\n+   |                                     ----------------^^^^^^^^^-\n    |                                     |               |\n-   |                                     |               first mutable borrow occurs here\n-   |                                     second mutable borrow occurs here\n+   |                                     |               second mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n ...\n-LL |             *b = U;\n-   |             ------ first borrow later used here\n+LL |             drop(a);\n+   |                  - first borrow later used here\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n@@ -316,7 +340,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      |           value borrowed here after move\n    |                      move occurs because value has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 31 previous errors\n \n Some errors have detailed explanations: E0382, E0499.\n For more information about an error, try `rustc --explain E0382`."}]}