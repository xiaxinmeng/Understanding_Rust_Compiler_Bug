{"sha": "8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNzA0ZjZkYzdmMGVkNmJlMTU1NDg2N2MyYTk1ZTRlMzIyY2MxYmM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-25T03:22:52Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-11T01:14:58Z"}, "message": "rustc: Remove the TyCtxt field from ParameterEnvironment.", "tree": {"sha": "eb21eda37a9bbad1371ce0c169ccca7f1b730713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb21eda37a9bbad1371ce0c169ccca7f1b730713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "html_url": "https://github.com/rust-lang/rust/commit/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0053b442f8cd5bf5e310a2664fc3a47a8f33da71", "url": "https://api.github.com/repos/rust-lang/rust/commits/0053b442f8cd5bf5e310a2664fc3a47a8f33da71", "html_url": "https://github.com/rust-lang/rust/commit/0053b442f8cd5bf5e310a2664fc3a47a8f33da71"}], "stats": {"total": 166, "additions": 82, "deletions": 84}, "files": [{"sha": "ffd7e9a7772429c4c6a8029a2aaba1803c119e25", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -92,7 +92,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // For region variables.\n     region_vars: RegionVarBindings<'a, 'tcx>,\n \n-    pub parameter_environment: ty::ParameterEnvironment<'a, 'tcx>,\n+    pub parameter_environment: ty::ParameterEnvironment<'gcx>,\n \n     // the set of predicates on which errors have been reported, to\n     // avoid reporting the same error twice.\n@@ -387,7 +387,7 @@ impl fmt::Display for FixupError {\n impl<'a, 'tcx> InferCtxt<'a, 'tcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                tables: &'a RefCell<ty::Tables<'tcx>>,\n-               param_env: Option<ty::ParameterEnvironment<'a, 'tcx>>,\n+               param_env: Option<ty::ParameterEnvironment<'tcx>>,\n                projection_mode: ProjectionMode)\n                -> Self {\n         InferCtxt {\n@@ -1440,7 +1440,7 @@ pub fn drain_fulfillment_cx<T>(&self,\n             // cases.\n             !traits::type_known_to_meet_builtin_bound(self, ty, ty::BoundCopy, span)\n         } else {\n-            ty.moves_by_default(&self.parameter_environment, span)\n+            ty.moves_by_default(self.tcx, &self.parameter_environment, span)\n         }\n     }\n \n@@ -1484,7 +1484,7 @@ pub fn drain_fulfillment_cx<T>(&self,\n         self.tables.borrow().upvar_capture_map.get(&upvar_id).cloned()\n     }\n \n-    pub fn param_env<'b>(&'b self) -> &'b ty::ParameterEnvironment<'b,'tcx> {\n+    pub fn param_env(&self) -> &ty::ParameterEnvironment<'tcx> {\n         &self.parameter_environment\n     }\n "}, {"sha": "063d6427f086c277ac2b5f07245674b498c985b7", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -18,7 +18,7 @@ pub use self::ObligationCauseCode::*;\n use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use ty::subst;\n-use ty::{self, Ty, TypeFoldable};\n+use ty::{self, Ty, TyCtxt, TypeFoldable};\n use infer::InferCtxt;\n \n use std::rc::Rc;\n@@ -378,9 +378,10 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx, 'tcx\n \n // FIXME: this is gonna need to be removed ...\n /// Normalizes the parameter environment, reporting errors if they occur.\n-pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvironment<'a,'tcx>,\n-                                             cause: ObligationCause<'tcx>)\n-                                             -> ty::ParameterEnvironment<'a,'tcx>\n+pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    unnormalized_env: ty::ParameterEnvironment<'tcx>,\n+    cause: ObligationCause<'tcx>)\n+    -> ty::ParameterEnvironment<'tcx>\n {\n     // I'm not wild about reporting errors here; I'd prefer to\n     // have the errors get reported at a defined place (e.g.,\n@@ -397,7 +398,6 @@ pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvi\n     // and errors will get reported then; so after typeck we\n     // can be sure that no errors should occur.\n \n-    let tcx = unnormalized_env.tcx;\n     let span = cause.span;\n     let body_id = cause.body_id;\n "}, {"sha": "ad1a7baadf9dfdc3e5bb7d7cf042ca1ec5b00dc0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -287,7 +287,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'cx, 'tcx> {\n+    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'tcx> {\n         self.infcx.param_env()\n     }\n "}, {"sha": "a7e253a45aa445555c5196088c26e55d9b06057a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -790,7 +790,7 @@ impl<'a, 'tcx> Layout {\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n                 let non_zero = !ty.is_unsafe_ptr();\n-                if pointee.is_sized(&infcx.parameter_environment, DUMMY_SP) {\n+                if pointee.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n                     Scalar { value: Pointer, non_zero: non_zero }\n                 } else {\n                     let unsized_part = tcx.struct_tail(pointee);\n@@ -883,7 +883,7 @@ impl<'a, 'tcx> Layout {\n                 // the unsized field. Several other pieces of code assume that the unsized\n                 // field is definitely the last one.\n                 if def.dtor_kind().has_drop_flag() &&\n-                   ty.is_sized(&infcx.parameter_environment, DUMMY_SP) {\n+                   ty.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n                     st.extend(dl, Some(Ok(&Scalar {\n                         value: Int(I8),\n                         non_zero: false"}, {"sha": "a65280bd012fc826c22dd9ad7130106b45611e70", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -1209,9 +1209,7 @@ impl<'tcx> TraitRef<'tcx> {\n /// future I hope to refine the representation of types so as to make\n /// more distinctions clearer.\n #[derive(Clone)]\n-pub struct ParameterEnvironment<'a, 'tcx:'a> {\n-    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-\n+pub struct ParameterEnvironment<'tcx> {\n     /// See `construct_free_substs` for details.\n     pub free_substs: Substs<'tcx>,\n \n@@ -1243,13 +1241,12 @@ pub struct ParameterEnvironment<'a, 'tcx:'a> {\n     pub free_id_outlive: CodeExtent,\n }\n \n-impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n+impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n     pub fn with_caller_bounds(&self,\n                               caller_bounds: Vec<ty::Predicate<'tcx>>)\n-                              -> ParameterEnvironment<'a,'tcx>\n+                              -> ParameterEnvironment<'tcx>\n     {\n         ParameterEnvironment {\n-            tcx: self.tcx,\n             free_substs: self.free_substs.clone(),\n             implicit_region_bound: self.implicit_region_bound,\n             caller_bounds: caller_bounds,\n@@ -1260,7 +1257,8 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n     }\n \n     /// Construct a parameter environment given an item, impl item, or trait item\n-    pub fn for_item(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId) -> ParameterEnvironment<'a, 'tcx> {\n+    pub fn for_item(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId)\n+                    -> ParameterEnvironment<'tcx> {\n         match tcx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n@@ -2546,14 +2544,14 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     ///\n     /// (Note that this implies that if `ty` has a destructor attached,\n     /// then `type_needs_drop` will definitely return `true` for `ty`.)\n-    pub fn type_needs_drop_given_env<'b>(self,\n-                                         ty: Ty<'tcx>,\n-                                         param_env: &ty::ParameterEnvironment<'b,'tcx>) -> bool {\n+    pub fn type_needs_drop_given_env(self,\n+                                     ty: Ty<'tcx>,\n+                                     param_env: &ty::ParameterEnvironment<'tcx>) -> bool {\n         // Issue #22536: We first query type_moves_by_default.  It sees a\n         // normalized version of the type, and therefore will definitely\n         // know whether the type implements Copy (and thus needs no\n         // cleanup/drop/zeroing) ...\n-        let implements_copy = !ty.moves_by_default(param_env, DUMMY_SP);\n+        let implements_copy = !ty.moves_by_default(self, param_env, DUMMY_SP);\n \n         if implements_copy { return false; }\n \n@@ -2803,13 +2801,12 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n     /// Construct a parameter environment suitable for static contexts or other contexts where there\n     /// are no free type/lifetime parameters in scope.\n-    pub fn empty_parameter_environment(self) -> ParameterEnvironment<'a,'tcx> {\n+    pub fn empty_parameter_environment(self) -> ParameterEnvironment<'tcx> {\n \n         // for an empty parameter environment, there ARE no free\n         // regions, so it shouldn't matter what we use for the free id\n         let free_id_outlive = self.region_maps.node_extent(ast::DUMMY_NODE_ID);\n-        ty::ParameterEnvironment { tcx: self,\n-                                   free_substs: Substs::empty(),\n+        ty::ParameterEnvironment { free_substs: Substs::empty(),\n                                    caller_bounds: Vec::new(),\n                                    implicit_region_bound: ty::ReEmpty,\n                                    selection_cache: traits::SelectionCache::new(),\n@@ -2856,7 +2853,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n                                            generics: &ty::Generics<'tcx>,\n                                            generic_predicates: &ty::GenericPredicates<'tcx>,\n                                            free_id_outlive: CodeExtent)\n-                                           -> ParameterEnvironment<'a, 'tcx>\n+                                           -> ParameterEnvironment<'tcx>\n     {\n         //\n         // Construct the free substs.\n@@ -2886,7 +2883,6 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         //\n \n         let unnormalized_env = ty::ParameterEnvironment {\n-            tcx: self,\n             free_substs: free_substs,\n             implicit_region_bound: ty::ReScope(free_id_outlive),\n             caller_bounds: predicates,\n@@ -2896,7 +2892,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         };\n \n         let cause = traits::ObligationCause::misc(span, free_id_outlive.node_id(&self.region_maps));\n-        traits::normalize_param_env_or_error(unnormalized_env, cause)\n+        traits::normalize_param_env_or_error(self, unnormalized_env, cause)\n     }\n \n     pub fn is_method_call(self, expr_id: NodeId) -> bool {"}, {"sha": "811b9238729b38e21affd3a1ede54e1ad1d4ca55", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -758,10 +758,9 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where 'tcx: 'a {\n+impl<'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'tcx> {\n     fn super_fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         ty::ParameterEnvironment {\n-            tcx: self.tcx,\n             free_substs: self.free_substs.fold_with(folder),\n             implicit_region_bound: self.implicit_region_bound.fold_with(folder),\n             caller_bounds: self.caller_bounds.fold_with(folder),"}, {"sha": "b2b0437a933c71e7c3b768e7f4a8bbe4dbfbbcfc", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -129,11 +129,10 @@ pub enum Representability {\n     SelfRecursive,\n }\n \n-impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n-    pub fn can_type_implement_copy(&self, self_type: Ty<'tcx>, span: Span)\n-                                   -> Result<(),CopyImplementationError> {\n-        let tcx = self.tcx;\n-\n+impl<'tcx> ParameterEnvironment<'tcx> {\n+    pub fn can_type_implement_copy<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                       self_type: Ty<'tcx>, span: Span)\n+                                       -> Result<(),CopyImplementationError> {\n         // FIXME: (@jroesch) float this code up\n         let infcx = InferCtxt::new(tcx, &tcx.tables, Some(self.clone()),\n                                    ProjectionMode::Topmost);\n@@ -509,12 +508,10 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n }\n \n impl<'a, 'tcx> ty::TyS<'tcx> {\n-    fn impls_bound(&'tcx self, param_env: &ParameterEnvironment<'a, 'tcx>,\n-                   bound: ty::BuiltinBound,\n-                   span: Span)\n-                   -> bool\n+    fn impls_bound(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                   param_env: &ParameterEnvironment<'tcx>,\n+                   bound: ty::BuiltinBound, span: Span) -> bool\n     {\n-        let tcx = param_env.tcx;\n         let infcx = InferCtxt::new(tcx, &tcx.tables, Some(param_env.clone()),\n                                    ProjectionMode::Topmost);\n \n@@ -528,7 +525,8 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     }\n \n     // FIXME (@jroesch): I made this public to use it, not sure if should be private\n-    pub fn moves_by_default(&'tcx self, param_env: &ParameterEnvironment<'a, 'tcx>,\n+    pub fn moves_by_default(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                            param_env: &ParameterEnvironment<'tcx>,\n                             span: Span) -> bool {\n         if self.flags.get().intersects(TypeFlags::MOVENESS_CACHED) {\n             return self.flags.get().intersects(TypeFlags::MOVES_BY_DEFAULT);\n@@ -550,7 +548,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             TyArray(..) | TySlice(_) | TyTrait(..) | TyTuple(..) |\n             TyClosure(..) | TyEnum(..) | TyStruct(..) |\n             TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n-        }.unwrap_or_else(|| !self.impls_bound(param_env, ty::BoundCopy, span));\n+        }.unwrap_or_else(|| !self.impls_bound(tcx, param_env, ty::BoundCopy, span));\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {\n@@ -564,17 +562,19 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n     }\n \n     #[inline]\n-    pub fn is_sized(&'tcx self, param_env: &ParameterEnvironment<'a, 'tcx>,\n+    pub fn is_sized(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    param_env: &ParameterEnvironment<'tcx>,\n                     span: Span) -> bool\n     {\n         if self.flags.get().intersects(TypeFlags::SIZEDNESS_CACHED) {\n             return self.flags.get().intersects(TypeFlags::IS_SIZED);\n         }\n \n-        self.is_sized_uncached(param_env, span)\n+        self.is_sized_uncached(tcx, param_env, span)\n     }\n \n-    fn is_sized_uncached(&'tcx self, param_env: &ParameterEnvironment<'a, 'tcx>,\n+    fn is_sized_uncached(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                         param_env: &ParameterEnvironment<'tcx>,\n                          span: Span) -> bool {\n         assert!(!self.needs_infer());\n \n@@ -588,7 +588,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n             TyEnum(..) | TyStruct(..) | TyProjection(..) | TyParam(..) |\n             TyInfer(..) | TyError => None\n-        }.unwrap_or_else(|| self.impls_bound(param_env, ty::BoundSized, span));\n+        }.unwrap_or_else(|| self.impls_bound(tcx, param_env, ty::BoundSized, span));\n \n         if !self.has_param_types() && !self.has_self_ty() {\n             self.flags.set(self.flags.get() | if result {"}, {"sha": "cf00f790e53e0beaa7169cb1af8c9497ca3ebf1a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -557,7 +557,7 @@ impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> fmt::Debug for ty::ParameterEnvironment<'a, 'tcx> {\n+impl<'tcx> fmt::Debug for ty::ParameterEnvironment<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"ParameterEnvironment(\\\n             free_substs={:?}, \\"}, {"sha": "894c9004c5e42a818331a961beda444141e6c248", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -92,7 +92,7 @@ struct CheckLoanCtxt<'a, 'tcx: 'a> {\n     dfcx_loans: &'a LoanDataFlow<'a, 'tcx>,\n     move_data: &'a move_data::FlowedMoveData<'a, 'tcx>,\n     all_loans: &'a [Loan<'tcx>],\n-    param_env: &'a ty::ParameterEnvironment<'a, 'tcx>,\n+    param_env: &'a ty::ParameterEnvironment<'tcx>,\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {"}, {"sha": "ca6d00a2baf3b3ec6764e9c9c9bd7ab115f390ac", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -627,13 +627,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         db.emit();\n     }\n \n-    pub fn report_use_of_moved_value<'b>(&self,\n-                                         use_span: Span,\n-                                         use_kind: MovedValueUseKind,\n-                                         lp: &LoanPath<'tcx>,\n-                                         the_move: &move_data::Move,\n-                                         moved_lp: &LoanPath<'tcx>,\n-                                         _param_env: &ty::ParameterEnvironment<'b,'tcx>) {\n+    pub fn report_use_of_moved_value(&self,\n+                                     use_span: Span,\n+                                     use_kind: MovedValueUseKind,\n+                                     lp: &LoanPath<'tcx>,\n+                                     the_move: &move_data::Move,\n+                                     moved_lp: &LoanPath<'tcx>,\n+                                     _param_env: &ty::ParameterEnvironment<'tcx>) {\n         let (verb, verb_participle) = match use_kind {\n             MovedInUse => (\"use\", \"used\"),\n             MovedInCapture => (\"capture\", \"captured\"),"}, {"sha": "3b44dcde449c5361bb3d853035e4a2b7df8de386", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -107,7 +107,7 @@ impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n //NOTE: appears to be the only place other then InferCtxt to contain a ParamEnv\n pub struct MatchCheckCtxt<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub param_env: ParameterEnvironment<'a, 'tcx>,\n+    pub param_env: ParameterEnvironment<'tcx>,\n }\n \n #[derive(Clone, PartialEq)]"}, {"sha": "360ebb747cb3c9bf93a22fe9758264830d8559db", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -497,10 +497,10 @@ impl LateLintPass for MissingCopyImplementations {\n         let parameter_environment = cx.tcx.empty_parameter_environment();\n         // FIXME (@jroesch) should probably inver this so that the parameter env still impls this\n         // method\n-        if !ty.moves_by_default(&parameter_environment, item.span) {\n+        if !ty.moves_by_default(cx.tcx, &parameter_environment, item.span) {\n             return;\n         }\n-        if parameter_environment.can_type_implement_copy(ty, item.span).is_ok() {\n+        if parameter_environment.can_type_implement_copy(cx.tcx, ty, item.span).is_ok() {\n             cx.span_lint(MISSING_COPY_IMPLEMENTATIONS,\n                          item.span,\n                          \"type could implement `Copy`; consider adding `impl \\"}, {"sha": "53a3b4221d6980e5a857eb1d5dea924f4108157a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -75,14 +75,15 @@ bitflags! {\n     }\n }\n \n-impl Qualif {\n+impl<'a, 'tcx> Qualif {\n     /// Remove flags which are impossible for the given type.\n-    fn restrict<'a, 'tcx>(&mut self, ty: Ty<'tcx>,\n-                          param_env: &ty::ParameterEnvironment<'a, 'tcx>) {\n-        if !ty.type_contents(param_env.tcx).interior_unsafe() {\n+    fn restrict(&mut self, ty: Ty<'tcx>,\n+                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                param_env: &ty::ParameterEnvironment<'tcx>) {\n+        if !ty.type_contents(tcx).interior_unsafe() {\n             *self = *self - Qualif::MUTABLE_INTERIOR;\n         }\n-        if !param_env.tcx.type_needs_drop_given_env(ty, param_env) {\n+        if !tcx.type_needs_drop_given_env(ty, param_env) {\n             *self = *self - Qualif::NEEDS_DROP;\n         }\n     }\n@@ -133,7 +134,7 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     rpo: ReversePostorder<'a, 'tcx>,\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    param_env: ty::ParameterEnvironment<'a, 'tcx>,\n+    param_env: ty::ParameterEnvironment<'tcx>,\n     qualif_map: &'a mut DefIdMap<Qualif>,\n     mir_map: Option<&'a MirMap<'tcx>>,\n     temp_qualif: Vec<Option<Qualif>>,\n@@ -146,7 +147,8 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n-    fn new(param_env: ty::ParameterEnvironment<'a, 'tcx>,\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+           param_env: ty::ParameterEnvironment<'tcx>,\n            qualif_map: &'a mut DefIdMap<Qualif>,\n            mir_map: Option<&'a MirMap<'tcx>>,\n            def_id: DefId,\n@@ -162,7 +164,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             def_id: def_id,\n             mir: mir,\n             rpo: rpo,\n-            tcx: param_env.tcx,\n+            tcx: tcx,\n             param_env: param_env,\n             qualif_map: qualif_map,\n             mir_map: mir_map,\n@@ -208,7 +210,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     /// Add the given type's qualification to self.qualif.\n     fn add_type(&mut self, ty: Ty<'tcx>) {\n         self.add(Qualif::MUTABLE_INTERIOR | Qualif::NEEDS_DROP);\n-        self.qualif.restrict(ty, &self.param_env);\n+        self.qualif.restrict(ty, self.tcx, &self.param_env);\n     }\n \n     /// Within the provided closure, self.qualif will start\n@@ -555,7 +557,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             }\n                             let ty = this.mir.lvalue_ty(this.tcx, lvalue)\n                                          .to_ty(this.tcx);\n-                            this.qualif.restrict(ty, &this.param_env);\n+                            this.qualif.restrict(ty, this.tcx, &this.param_env);\n                         }\n \n                         ProjectionElem::ConstantIndex {..} |\n@@ -939,7 +941,7 @@ fn qualify_const_item_cached<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         bug!(\"missing constant MIR for {}\", tcx.item_path_str(def_id))\n     });\n \n-    let mut qualifier = Qualifier::new(param_env, qualif_map, mir_map,\n+    let mut qualifier = Qualifier::new(tcx, param_env, qualif_map, mir_map,\n                                        def_id, mir, Mode::Const);\n     let qualif = qualifier.qualify_const();\n     qualifier.qualif_map.insert(def_id, qualif);\n@@ -991,7 +993,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n                 // This is ugly because Qualifier holds onto mir,\n                 // which can't be mutated until its scope ends.\n                 let (temps, candidates) = {\n-                    let mut qualifier = Qualifier::new(param_env, &mut qualif_map,\n+                    let mut qualifier = Qualifier::new(tcx, param_env, &mut qualif_map,\n                                                        None, def_id, mir, mode);\n                     if mode == Mode::ConstFn {\n                         // Enforce a constant-like CFG for `const fn`.\n@@ -1009,7 +1011,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n                 // Do the actual promotion, now that we know what's viable.\n                 promote_consts::promote_candidates(mir, tcx, temps, candidates);\n             } else {\n-                let mut qualifier = Qualifier::new(param_env, &mut qualif_map,\n+                let mut qualifier = Qualifier::new(tcx, param_env, &mut qualif_map,\n                                                    None, def_id, mir, mode);\n                 qualifier.qualify_const();\n             }"}, {"sha": "061f5b95c3bc24ec2d0d6e2ad4e4613078cf0b1c", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n \n struct RvalueContextDelegate<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: &'a ty::ParameterEnvironment<'a,'tcx>,\n+    param_env: &'a ty::ParameterEnvironment<'tcx>,\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for RvalueContextDelegate<'a, 'tcx> {\n@@ -65,7 +65,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for RvalueContextDelegate<'a, 'tcx> {\n                cmt: mc::cmt<'tcx>,\n                _: euv::ConsumeMode) {\n         debug!(\"consume; cmt: {:?}; type: {:?}\", *cmt, cmt.ty);\n-        if !cmt.ty.is_sized(self.param_env, span) {\n+        if !cmt.ty.is_sized(self.tcx, self.param_env, span) {\n             span_err!(self.tcx.sess, span, E0161,\n                 \"cannot move a value of type {0}: the size of {0} cannot be statically determined\",\n                 cmt.ty);"}, {"sha": "595e1130ab99c78c25d9be5bc7e696ca7c9eb640", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -1532,7 +1532,7 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &hir::Pat,\n \n         let llmatch;\n         let trmode;\n-        let moves_by_default = variable_ty.moves_by_default(&param_env, span);\n+        let moves_by_default = variable_ty.moves_by_default(tcx, &param_env, span);\n         match bm {\n             hir::BindByValue(_) if !moves_by_default || reassigned =>\n             {"}, {"sha": "6a98140ce2810663dac8d5b17ae07fff73b1606a", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -59,7 +59,7 @@ pub use context::{CrateContext, SharedCrateContext};\n \n /// Is the type's representation size known at compile time?\n pub fn type_is_sized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_sized(&tcx.empty_parameter_environment(), DUMMY_SP)\n+    ty.is_sized(tcx, &tcx.empty_parameter_environment(), DUMMY_SP)\n }\n \n pub fn type_is_fat_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -281,7 +281,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     pub llfn: ValueRef,\n \n     // always an empty parameter-environment NOTE: @jroesch another use of ParamEnv\n-    pub param_env: ty::ParameterEnvironment<'a, 'tcx>,\n+    pub param_env: ty::ParameterEnvironment<'tcx>,\n \n     // A pointer to where to store the return value. If the return type is\n     // immediate, this points to an alloca in the function. Otherwise, it's a"}, {"sha": "eda3ce1d1062c2f2cc900c6d7567d41362517395", "filename": "src/librustc_trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_trans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_trans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdatum.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -769,8 +769,8 @@ impl<'tcx, K: KindOps + fmt::Debug> Datum<'tcx, K> {\n          * affine values (since they must never be duplicated).\n          */\n \n-        assert!(!self.ty\n-                     .moves_by_default(&bcx.tcx().empty_parameter_environment(), DUMMY_SP));\n+        assert!(!self.ty.moves_by_default(bcx.tcx(),\n+            &bcx.tcx().empty_parameter_environment(), DUMMY_SP));\n         self.shallow_copy_raw(bcx, dst)\n     }\n "}, {"sha": "48dfbd6b37e26480fd04b9ff17c0667cdc0c2e03", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -239,7 +239,8 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_body_id);\n     let trait_param_env = impl_param_env.with_caller_bounds(hybrid_preds.into_vec());\n-    let trait_param_env = traits::normalize_param_env_or_error(trait_param_env,\n+    let trait_param_env = traits::normalize_param_env_or_error(tcx,\n+                                                               trait_param_env,\n                                                                normalize_cause.clone());\n     // FIXME(@jroesch) this seems ugly, but is a temporary change\n     infcx.parameter_environment = trait_param_env;"}, {"sha": "4bdb0539536ef03b0f17ca2389fdd54a8a1d4668", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -375,7 +375,7 @@ impl<'a, 'gcx, 'tcx> Deref for FnCtxt<'a, 'gcx, 'tcx> {\n impl<'a, 'tcx> Inherited<'a, 'tcx, 'tcx> {\n     fn new(ccx: &'a CrateCtxt<'a, 'tcx>,\n            tables: &'a RefCell<ty::Tables<'tcx>>,\n-           param_env: ty::ParameterEnvironment<'a, 'tcx>)\n+           param_env: ty::ParameterEnvironment<'tcx>)\n            -> Inherited<'a, 'tcx, 'tcx> {\n \n         Inherited {\n@@ -490,7 +490,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            fn_id: ast::NodeId,\n                            fn_span: Span,\n                            raw_fty: Ty<'tcx>,\n-                           param_env: ty::ParameterEnvironment<'a, 'tcx>)\n+                           param_env: ty::ParameterEnvironment<'tcx>)\n {\n     match raw_fty.sty {\n         ty::TyFnDef(_, _, ref fn_ty) => {\n@@ -1449,7 +1449,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx, 'tcx> {\n         }\n     }\n \n-    pub fn param_env(&self) -> &ty::ParameterEnvironment<'a,'tcx> {\n+    pub fn param_env(&self) -> &ty::ParameterEnvironment<'tcx> {\n         &self.parameter_environment\n     }\n "}, {"sha": "18ec9990979b7344d15c1fbcde274f338ceb1c47", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8a704f6dc7f0ed6be1554867c2a95e4e322cc1bc", "patch": "@@ -302,7 +302,7 @@ fn get_base_type_def_id(&self, span: Span, ty: Ty<'tcx>) -> Option<DefId> {\n             debug!(\"check_implementations_of_copy: self_type={:?} (free)\",\n                    self_type);\n \n-            match param_env.can_type_implement_copy(self_type, span) {\n+            match param_env.can_type_implement_copy(tcx, self_type, span) {\n                 Ok(()) => {}\n                 Err(CopyImplementationError::InfrigingField(name)) => {\n                        span_err!(tcx.sess, span, E0204,"}]}