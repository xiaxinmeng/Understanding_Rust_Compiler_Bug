{"sha": "2a8a0fc4237da544aca0d6631ee467891caad9ad", "node_id": "C_kwDOAAsO6NoAKDJhOGEwZmM0MjM3ZGE1NDRhY2EwZDY2MzFlZTQ2Nzg5MWNhYWQ5YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T23:53:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-14T23:53:11Z"}, "message": "Auto merge of #96883 - jackh726:early-binder-2, r=oli-obk\n\nAdd EarlyBinder\n\nChalk has no concept of `Param` (https://github.com/rust-lang/chalk/blob/e0ade19d139bc784384acc6736cd960c91dd55a1/chalk-ir/src/lib.rs#L579) or `ReEarlyBound` (https://github.com/rust-lang/chalk/blob/e0ade19d139bc784384acc6736cd960c91dd55a1/chalk-ir/src/lib.rs#L1308). Everything  is just \"bound\" - the equivalent of rustc's late-bound. It's not completely clear yet whether to move everything to the same time of binder in rustc or add `Param` and `ReEarlyBound` in Chalk.\n\nEither way, tracking when we have or haven't already substituted out these in rustc can be helpful.\n\nAs a first step, I'm just adding a `EarlyBinder` newtype that is required to call `subst`. I also add a couple \"transparent\" `bound_*` wrappers around a couple query that are often immediately substituted.\n\nr? `@nikomatsakis`", "tree": {"sha": "9a554210e3423b8808e0d3297a35b43247e4ce48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a554210e3423b8808e0d3297a35b43247e4ce48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a8a0fc4237da544aca0d6631ee467891caad9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8a0fc4237da544aca0d6631ee467891caad9ad", "html_url": "https://github.com/rust-lang/rust/commit/2a8a0fc4237da544aca0d6631ee467891caad9ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a8a0fc4237da544aca0d6631ee467891caad9ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b3681bf621bc0de91ffab711b2350068b4c466", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b3681bf621bc0de91ffab711b2350068b4c466", "html_url": "https://github.com/rust-lang/rust/commit/70b3681bf621bc0de91ffab711b2350068b4c466"}, {"sha": "06a1e8854c95d5be5db0bebe4630c691b604e792", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a1e8854c95d5be5db0bebe4630c691b604e792", "html_url": "https://github.com/rust-lang/rust/commit/06a1e8854c95d5be5db0bebe4630c691b604e792"}], "stats": {"total": 617, "additions": 400, "deletions": 217}, "files": [{"sha": "a3c9da302120471c8e65cc640107a8b299240999", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -13,7 +13,9 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{self, subst::Subst, suggest_constraining_type_params, PredicateKind, Ty};\n+use rustc_middle::ty::{\n+    self, subst::Subst, suggest_constraining_type_params, EarlyBinder, PredicateKind, Ty,\n+};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, Span};\n@@ -336,7 +338,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let find_fn_kind_from_did = |predicates: &[(ty::Predicate<'tcx>, Span)], substs| {\n             predicates.iter().find_map(|(pred, _)| {\n                 let pred = if let Some(substs) = substs {\n-                    pred.subst(tcx, substs).kind().skip_binder()\n+                    EarlyBinder(*pred).subst(tcx, substs).kind().skip_binder()\n                 } else {\n                     pred.kind().skip_binder()\n                 };"}, {"sha": "0fcac9a1c6c7b8ddddcd2155aa912a5c2bf112b6", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -477,8 +477,11 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     .infcx\n                     .tcx\n                     .mk_region(ty::ReVar(self.infcx.next_nll_region_var(FR).to_region_vid()));\n-                let va_list_ty =\n-                    self.infcx.tcx.type_of(va_list_did).subst(self.infcx.tcx, &[region.into()]);\n+                let va_list_ty = self\n+                    .infcx\n+                    .tcx\n+                    .bound_type_of(va_list_did)\n+                    .subst(self.infcx.tcx, &[region.into()]);\n \n                 unnormalized_input_tys = self.infcx.tcx.mk_type_list(\n                     unnormalized_input_tys.iter().copied().chain(iter::once(va_list_ty)),"}, {"sha": "5c56e6ee5f5b7502d835a57508a4f5cbf9a5514c", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::pretty::display_allocation;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n+use rustc_middle::ty::{self, subst::Subst, EarlyBinder, TyCtxt};\n use rustc_span::source_map::Span;\n use rustc_target::abi::{self, Abi};\n use std::borrow::Cow;\n@@ -47,7 +47,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n         \"Unexpected DefKind: {:?}\",\n         ecx.tcx.def_kind(cid.instance.def_id())\n     );\n-    let layout = ecx.layout_of(body.return_ty().subst(tcx, cid.instance.substs))?;\n+    let layout = ecx.layout_of(EarlyBinder(body.return_ty()).subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n "}, {"sha": "5ece19d7fb3d34ef843da492817fc9d1e43d447c", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -95,7 +95,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Allocate memory for `CallerLocation` struct.\n         let loc_ty = self\n             .tcx\n-            .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n+            .bound_type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n             .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         // This can fail if rustc runs out of memory right here. Trying to emit an error would be"}, {"sha": "02caae7a90a91d5185e367273793cdd63fdc9a1e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -70,7 +70,7 @@ use rustc_middle::ty::{\n     self,\n     error::TypeError,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    Binder, List, Region, Ty, TyCtxt, TypeFoldable,\n+    Binder, EarlyBinder, List, Region, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n@@ -961,12 +961,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         for (def_id, actual) in iter::zip(default_params, substs.iter().rev()) {\n             match actual.unpack() {\n                 GenericArgKind::Const(c) => {\n-                    if self.tcx.const_param_default(def_id).subst(self.tcx, substs) != c {\n+                    if EarlyBinder(self.tcx.const_param_default(def_id)).subst(self.tcx, substs)\n+                        != c\n+                    {\n                         break;\n                     }\n                 }\n                 GenericArgKind::Type(ty) => {\n-                    if self.tcx.type_of(def_id).subst(self.tcx, substs) != ty {\n+                    if self.tcx.bound_type_of(def_id).subst(self.tcx, substs) != ty {\n                         break;\n                     }\n                 }\n@@ -1383,8 +1385,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n-                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n-                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n+                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n                 let mut values = self.cmp_fn_sig(&sig1, &sig2);\n                 let path1 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did1, substs1));\n                 let path2 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did2, substs2));\n@@ -1395,7 +1397,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             (ty::FnDef(did1, substs1), ty::FnPtr(sig2)) => {\n-                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n                 let mut values = self.cmp_fn_sig(&sig1, sig2);\n                 values.0.push_highlighted(format!(\n                     \" {{{}}}\",\n@@ -1405,7 +1407,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             (ty::FnPtr(sig1), ty::FnDef(did2, substs2)) => {\n-                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n+                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n                 let mut values = self.cmp_fn_sig(sig1, &sig2);\n                 values.1.push_normal(format!(\n                     \" {{{}}}\",\n@@ -1847,9 +1849,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // Future::Output\n             let item_def_id = self.tcx.associated_item_def_ids(future_trait)[0];\n \n-            let bounds = self.tcx.explicit_item_bounds(*def_id);\n+            let bounds = self.tcx.bound_explicit_item_bounds(*def_id);\n \n-            for (predicate, _) in bounds {\n+            for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n                 let predicate = predicate.subst(self.tcx, substs);\n                 let output = predicate\n                     .kind()"}, {"sha": "92c0ed84057a6f572478c1669860963ca6c1256f", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -561,9 +561,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n         }\n \n-        let item_bounds = tcx.explicit_item_bounds(def_id);\n+        let item_bounds = tcx.bound_explicit_item_bounds(def_id);\n \n-        for (predicate, _) in item_bounds {\n+        for predicate in item_bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n             debug!(?predicate);\n             let predicate = predicate.subst(tcx, substs);\n "}, {"sha": "1c521c90686d6c0bf3392268bd405bd94fd29312", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n \n /// The `TypeOutlives` struct has the job of \"lowering\" a `T: 'a`\n /// obligation into a series of `'a: 'b` constraints and \"verifys\", as\n@@ -290,7 +290,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         debug!(\"projection_bounds(projection_ty={:?})\", projection_ty);\n         let tcx = self.tcx;\n         self.region_bounds_declared_on_associated_item(projection_ty.item_def_id)\n-            .map(move |r| r.subst(tcx, projection_ty.substs))\n+            .map(move |r| EarlyBinder(r).subst(tcx, projection_ty.substs))\n     }\n \n     /// Given the `DefId` of an associated item, returns any region"}, {"sha": "af18adac2ff79e72ce71dcb628409ba341df0201", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -2393,7 +2393,7 @@ impl<'tcx> Operand<'tcx> {\n         substs: SubstsRef<'tcx>,\n         span: Span,\n     ) -> Self {\n-        let ty = tcx.type_of(def_id).subst(tcx, substs);\n+        let ty = tcx.bound_type_of(def_id).subst(tcx, substs);\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,"}, {"sha": "c93b7a955022925bd0b01d2168dd9a2f8a7ac3b2", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -202,7 +202,9 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),\n-                AggregateKind::Adt(did, _, substs, _, _) => tcx.type_of(did).subst(tcx, substs),\n+                AggregateKind::Adt(did, _, substs, _, _) => {\n+                    tcx.bound_type_of(did).subst(tcx, substs)\n+                }\n                 AggregateKind::Closure(did, substs) => tcx.mk_closure(did, substs),\n                 AggregateKind::Generator(did, substs, movability) => {\n                     tcx.mk_generator(did, substs, movability)"}, {"sha": "1616b753433a83c0e47415865ca3e67836870677", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -1603,7 +1603,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn caller_location_ty(self) -> Ty<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n-            self.type_of(self.require_lang_item(LangItem::PanicLocation, None))\n+            self.bound_type_of(self.require_lang_item(LangItem::PanicLocation, None))\n                 .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n         )\n     }\n@@ -2332,7 +2332,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         ty_param.into()\n                     } else {\n                         assert!(has_default);\n-                        self.type_of(param.def_id).subst(self, substs).into()\n+                        self.bound_type_of(param.def_id).subst(self, substs).into()\n                     }\n                 }\n             });"}, {"sha": "d9b82ee0a76801e57e0ba70ee34328231489b40d", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -1,6 +1,7 @@\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::ty;\n use crate::ty::subst::{Subst, SubstsRef};\n+use crate::ty::EarlyBinder;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n@@ -229,7 +230,11 @@ impl<'tcx> GenericPredicates<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> InstantiatedPredicates<'tcx> {\n         InstantiatedPredicates {\n-            predicates: self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)).collect(),\n+            predicates: self\n+                .predicates\n+                .iter()\n+                .map(|(p, _)| EarlyBinder(*p).subst(tcx, substs))\n+                .collect(),\n             spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n         }\n     }\n@@ -243,7 +248,9 @@ impl<'tcx> GenericPredicates<'tcx> {\n         if let Some(def_id) = self.parent {\n             tcx.predicates_of(def_id).instantiate_into(tcx, instantiated, substs);\n         }\n-        instantiated.predicates.extend(self.predicates.iter().map(|(p, _)| p.subst(tcx, substs)));\n+        instantiated\n+            .predicates\n+            .extend(self.predicates.iter().map(|(p, _)| EarlyBinder(*p).subst(tcx, substs)));\n         instantiated.spans.extend(self.predicates.iter().map(|(_, sp)| *sp));\n     }\n "}, {"sha": "f088db00d02a18212ff5d9be135e32484a8dd82f", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -1,7 +1,7 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{InternalSubsts, Subst};\n-use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt, TypeFoldable};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -558,7 +558,11 @@ impl<'tcx> Instance<'tcx> {\n     where\n         T: TypeFoldable<'tcx> + Copy,\n     {\n-        if let Some(substs) = self.substs_for_mir_body() { v.subst(tcx, substs) } else { *v }\n+        if let Some(substs) = self.substs_for_mir_body() {\n+            EarlyBinder(*v).subst(tcx, substs)\n+        } else {\n+            *v\n+        }\n     }\n \n     #[inline(always)]"}, {"sha": "d187146476ab4e9f504bf165693b7b8a188cd608", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -2,7 +2,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::subst::Subst;\n-use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, subst::SubstsRef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeFoldable};\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_hir as hir;\n@@ -1706,7 +1706,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     ) -> Result<Layout<'tcx>, LayoutError<'tcx>> {\n         use SavedLocalEligibility::*;\n         let tcx = self.tcx;\n-        let subst_field = |ty: Ty<'tcx>| ty.subst(tcx, substs);\n+        let subst_field = |ty: Ty<'tcx>| EarlyBinder(ty).subst(tcx, substs);\n \n         let Some(info) = tcx.generator_layout(def_id) else {\n             return Err(LayoutError::Unknown(ty));\n@@ -2750,7 +2750,7 @@ impl<'tcx> ty::Instance<'tcx> {\n                 // track of a polymorphization `ParamEnv` to allow normalizing later.\n                 let mut sig = match *ty.kind() {\n                     ty::FnDef(def_id, substs) => tcx\n-                        .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))\n+                        .normalize_erasing_regions(tcx.param_env(def_id), tcx.bound_fn_sig(def_id))\n                         .subst(tcx, substs),\n                     _ => unreachable!(),\n                 };"}, {"sha": "1c552591b117ce6484c71f0892f78c9d68567e58", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -77,7 +77,7 @@ pub use self::sty::RegionKind::*;\n pub use self::sty::TyKind::*;\n pub use self::sty::{\n     Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar, BoundVariableKind,\n-    CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid, EarlyBoundRegion,\n+    CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid, EarlyBinder, EarlyBoundRegion,\n     ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig, FreeRegion, GenSig,\n     GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts, InlineConstSubstsParts, ParamConst,\n     ParamTy, PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig,\n@@ -735,7 +735,7 @@ impl<'tcx> Predicate<'tcx> {\n         let shifted_pred =\n             tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());\n         // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>\n-        let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);\n+        let new = EarlyBinder(shifted_pred).subst(tcx, trait_ref.skip_binder().substs);\n         // 3) ['x] + ['b] -> ['x, 'b]\n         let bound_vars =\n             tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));\n@@ -1931,7 +1931,7 @@ impl<'tcx> FieldDef {\n     /// Returns the type of this field. The resulting type is not normalized. The `subst` is\n     /// typically obtained via the second field of [`TyKind::Adt`].\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        tcx.type_of(self.did).subst(tcx, subst)\n+        tcx.bound_type_of(self.did).subst(tcx, subst)\n     }\n \n     /// Computes the `Ident` of this variant by looking up the `Span`"}, {"sha": "9bbbd7e2f7c5ee58fb8b78a60c087aca4a94357f", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -11,7 +11,7 @@ use crate::mir;\n use crate::traits::query::NoSolution;\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n use crate::ty::subst::{Subst, SubstsRef};\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, EarlyBinder, Ty, TyCtxt};\n \n #[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]\n pub enum NormalizationError<'tcx> {\n@@ -133,7 +133,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = value.subst(self, param_substs);\n+        let substituted = EarlyBinder(value).subst(self, param_substs);\n         self.normalize_erasing_regions(param_env, substituted)\n     }\n \n@@ -157,7 +157,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = value.subst(self, param_substs);\n+        let substituted = EarlyBinder(value).subst(self, param_substs);\n         self.try_normalize_erasing_regions(param_env, substituted)\n     }\n }"}, {"sha": "9d8124eb25db15e34a42059b0e0b77ca612cf892", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -115,12 +115,16 @@ pub trait Printer<'tcx>: Sized {\n \n             DefPathData::Impl => {\n                 let generics = self.tcx().generics_of(def_id);\n-                let mut self_ty = self.tcx().type_of(def_id);\n-                let mut impl_trait_ref = self.tcx().impl_trait_ref(def_id);\n-                if substs.len() >= generics.count() {\n-                    self_ty = self_ty.subst(self.tcx(), substs);\n-                    impl_trait_ref = impl_trait_ref.subst(self.tcx(), substs);\n-                }\n+                let self_ty = self.tcx().bound_type_of(def_id);\n+                let impl_trait_ref = self.tcx().bound_impl_trait_ref(def_id);\n+                let (self_ty, impl_trait_ref) = if substs.len() >= generics.count() {\n+                    (\n+                        self_ty.subst(self.tcx(), substs),\n+                        impl_trait_ref.map(|i| i.subst(self.tcx(), substs)),\n+                    )\n+                } else {\n+                    (self_ty.0, impl_trait_ref.map(|i| i.0))\n+                };\n                 self.print_impl_path(def_id, substs, self_ty, impl_trait_ref)\n             }\n \n@@ -203,7 +207,7 @@ pub trait Printer<'tcx>: Sized {\n                     has_default\n                         && substs[param.index as usize]\n                             == GenericArg::from(\n-                                self.tcx().type_of(param.def_id).subst(self.tcx(), substs),\n+                                self.tcx().bound_type_of(param.def_id).subst(self.tcx(), substs),\n                             )\n                 }\n                 ty::GenericParamDefKind::Const { has_default } => {"}, {"sha": "4c0bc2e4337c712ffd96f09cc6d90f744c4abf20", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -587,7 +587,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(\")\")\n             }\n             ty::FnDef(def_id, substs) => {\n-                let sig = self.tcx().fn_sig(def_id).subst(self.tcx(), substs);\n+                let sig = self.tcx().bound_fn_sig(def_id).subst(self.tcx(), substs);\n                 p!(print(sig), \" {{\", print_value_path(def_id, substs), \"}}\");\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n@@ -774,13 +774,13 @@ pub trait PrettyPrinter<'tcx>:\n \n         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n         // by looking up the projections associated with the def_id.\n-        let bounds = self.tcx().explicit_item_bounds(def_id);\n+        let bounds = self.tcx().bound_explicit_item_bounds(def_id);\n \n         let mut traits = BTreeMap::new();\n         let mut fn_traits = BTreeMap::new();\n         let mut is_sized = false;\n \n-        for (predicate, _) in bounds {\n+        for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n             let predicate = predicate.subst(self.tcx(), substs);\n             let bound_predicate = predicate.kind();\n "}, {"sha": "8677405eebedac5aa8443288f05734b56e0865b0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -159,7 +159,8 @@ pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n     let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances[i];\n         let variance_info = if variance == ty::Invariant {\n-            let ty = *cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));\n+            let ty =\n+                *cached_ty.get_or_insert_with(|| tcx.bound_type_of(ty_def_id).subst(tcx, a_subst));\n             ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n         } else {\n             ty::VarianceDiagInfo::default()"}, {"sha": "2c8cd4f933d0444a1b527ad4df6ade630b6f46a7", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -860,6 +860,27 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n     }\n }\n \n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::EarlyBinder<T> {\n+    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        self,\n+        folder: &mut F,\n+    ) -> Result<Self, F::Error> {\n+        self.try_map_bound(|ty| ty.try_fold_with(folder))\n+    }\n+\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        self.try_map_bound(|ty| ty.try_fold_with(folder))\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.as_ref().0.visit_with(visitor)\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        self.as_ref().0.visit_with(visitor)\n+    }\n+}\n+\n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,"}, {"sha": "a973a5c9b5053d6c311f371121f973db49315efc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -713,7 +713,9 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {\n         let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n-            variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))\n+            variant\n+                .iter()\n+                .map(move |field| EarlyBinder(layout.field_tys[*field]).subst(tcx, self.substs))\n         })\n     }\n \n@@ -1068,6 +1070,69 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Encodable, Decodable, HashStable)]\n+pub struct EarlyBinder<T>(pub T);\n+\n+impl<T> EarlyBinder<T> {\n+    pub fn as_ref(&self) -> EarlyBinder<&T> {\n+        EarlyBinder(&self.0)\n+    }\n+\n+    pub fn map_bound_ref<F, U>(&self, f: F) -> EarlyBinder<U>\n+    where\n+        F: FnOnce(&T) -> U,\n+    {\n+        self.as_ref().map_bound(f)\n+    }\n+\n+    pub fn map_bound<F, U>(self, f: F) -> EarlyBinder<U>\n+    where\n+        F: FnOnce(T) -> U,\n+    {\n+        let value = f(self.0);\n+        EarlyBinder(value)\n+    }\n+\n+    pub fn try_map_bound<F, U, E>(self, f: F) -> Result<EarlyBinder<U>, E>\n+    where\n+        F: FnOnce(T) -> Result<U, E>,\n+    {\n+        let value = f(self.0)?;\n+        Ok(EarlyBinder(value))\n+    }\n+}\n+\n+impl<T> EarlyBinder<Option<T>> {\n+    pub fn transpose(self) -> Option<EarlyBinder<T>> {\n+        self.0.map(|v| EarlyBinder(v))\n+    }\n+}\n+\n+impl<T, U> EarlyBinder<(T, U)> {\n+    pub fn transpose_tuple2(self) -> (EarlyBinder<T>, EarlyBinder<U>) {\n+        (EarlyBinder(self.0.0), EarlyBinder(self.0.1))\n+    }\n+}\n+\n+pub struct EarlyBinderIter<T> {\n+    t: T,\n+}\n+\n+impl<T: IntoIterator> EarlyBinder<T> {\n+    pub fn transpose_iter(self) -> EarlyBinderIter<T::IntoIter> {\n+        EarlyBinderIter { t: self.0.into_iter() }\n+    }\n+}\n+\n+impl<T: Iterator> Iterator for EarlyBinderIter<T> {\n+    type Item = EarlyBinder<T::Item>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.t.next().map(|i| EarlyBinder(i))\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub enum BoundVariableKind {\n@@ -2139,7 +2204,7 @@ impl<'tcx> Ty<'tcx> {\n \n     pub fn fn_sig(self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {\n         match self.kind() {\n-            FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),\n+            FnDef(def_id, substs) => tcx.bound_fn_sig(*def_id).subst(tcx, substs),\n             FnPtr(f) => *f,\n             Error(_) => {\n                 // ignore errors (#54954)\n@@ -2306,7 +2371,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n                 let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n-                (tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n+                (tcx.bound_type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n \n             // type parameters only have unit metadata if they're sized, so return true"}, {"sha": "48c71113d50329e1ffd10e18b1e0de330d031bc7", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -4,7 +4,7 @@ use crate::mir;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n-use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n+use crate::ty::{self, EarlyBinder, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n@@ -499,14 +499,19 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n }\n \n // Just call `foo.subst(tcx, substs)` to perform a substitution across `foo`.\n+#[rustc_on_unimplemented(message = \"Calling `subst` must now be done through an `EarlyBinder`\")]\n pub trait Subst<'tcx>: Sized {\n-    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self;\n+    type Inner;\n+\n+    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self::Inner;\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {\n-    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> T {\n+impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for EarlyBinder<T> {\n+    type Inner = T;\n+\n+    fn subst(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Self::Inner {\n         let mut folder = SubstFolder { tcx, substs, binders_passed: 0 };\n-        self.fold_with(&mut folder)\n+        self.0.fold_with(&mut folder)\n     }\n }\n "}, {"sha": "10520670069b476b854779093259b6ae4d176906", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -6,7 +6,8 @@ use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::{\n-    self, Const, DebruijnIndex, DefIdTree, List, ReEarlyBound, Ty, TyCtxt, TyKind::*, TypeFoldable,\n+    self, Const, DebruijnIndex, DefIdTree, EarlyBinder, List, ReEarlyBound, Ty, TyCtxt, TyKind::*,\n+    TypeFoldable,\n };\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n@@ -591,6 +592,32 @@ impl<'tcx> TyCtxt<'tcx> {\n         trace!(?expanded_type);\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n+\n+    pub fn bound_type_of(self, def_id: DefId) -> EarlyBinder<Ty<'tcx>> {\n+        EarlyBinder(self.type_of(def_id))\n+    }\n+\n+    pub fn bound_fn_sig(self, def_id: DefId) -> EarlyBinder<ty::PolyFnSig<'tcx>> {\n+        EarlyBinder(self.fn_sig(def_id))\n+    }\n+\n+    pub fn bound_impl_trait_ref(self, def_id: DefId) -> Option<EarlyBinder<ty::TraitRef<'tcx>>> {\n+        self.impl_trait_ref(def_id).map(|i| EarlyBinder(i))\n+    }\n+\n+    pub fn bound_explicit_item_bounds(\n+        self,\n+        def_id: DefId,\n+    ) -> EarlyBinder<&'tcx [(ty::Predicate<'tcx>, rustc_span::Span)]> {\n+        EarlyBinder(self.explicit_item_bounds(def_id))\n+    }\n+\n+    pub fn bound_item_bounds(\n+        self,\n+        def_id: DefId,\n+    ) -> EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n+        EarlyBinder(self.item_bounds(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {\n@@ -622,7 +649,7 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n             let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {\n                 Some(expanded_ty) => *expanded_ty,\n                 None => {\n-                    let generic_ty = self.tcx.type_of(def_id);\n+                    let generic_ty = self.tcx.bound_type_of(def_id);\n                     let concrete_ty = generic_ty.subst(self.tcx, substs);\n                     let expanded_ty = self.fold_ty(concrete_ty);\n                     self.expanded_cache.insert((def_id, substs), expanded_ty);"}, {"sha": "d7993ce1cf4fa9c6ae27a2b072983d9387a1f17e", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -834,7 +834,7 @@ fn trait_method<'tcx>(\n         .find(|item| item.kind == ty::AssocKind::Fn)\n         .expect(\"trait method not found\");\n \n-    let method_ty = tcx.type_of(item.def_id);\n+    let method_ty = tcx.bound_type_of(item.def_id);\n     let method_ty = method_ty.subst(tcx, substs);\n \n     ConstantKind::zero_sized(method_ty)"}, {"sha": "a9c8943ec1804112df37b7a8873b5475b6cc0760", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -177,7 +177,7 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n                     let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(arg.span));\n \n-                    tcx.type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n+                    tcx.bound_type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n                 } else {\n                     fn_sig.inputs()[index]\n                 };"}, {"sha": "54c3cc46b265f62cff50af3751e46e3473d32a9f", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -18,7 +18,9 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{\n+    self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable,\n+};\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi;\n@@ -383,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         );\n \n         let ret = ecx\n-            .layout_of(body.return_ty().subst(tcx, substs))\n+            .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n             .ok()\n             // Don't bother allocating memory for ZST types which have no values\n             // or for large values."}, {"sha": "6c0df98bc27131947bb7e67928eb55c3ad65c1c3", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeFoldable,\n+    self, ConstInt, ConstKind, EarlyBinder, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n@@ -378,7 +378,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         );\n \n         let ret = ecx\n-            .layout_of(body.return_ty().subst(tcx, substs))\n+            .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n             .ok()\n             // Don't bother allocating memory for ZST types which have no values\n             // or for large values."}, {"sha": "1f9bd90d11f683808389bfd93d69cbf1bd04348d", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{\n     self,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    PredicateKind, Ty, TyCtxt,\n+    EarlyBinder, PredicateKind, Ty, TyCtxt,\n };\n use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n@@ -90,7 +90,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                             // If the inner type matches the type bound by `Pointer`\n                             if inner_ty == bound_ty {\n                                 // Do a substitution using the parameters from the callsite\n-                                let subst_ty = inner_ty.subst(self.tcx, substs_ref);\n+                                let subst_ty = EarlyBinder(inner_ty).subst(self.tcx, substs_ref);\n                                 if let Some((fn_id, fn_substs)) =\n                                     FunctionItemRefChecker::is_fn_ref(subst_ty)\n                                 {"}, {"sha": "b7dec57b75768e0dac9f3489c1f6f82b1dd37803", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -247,7 +247,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         assert_eq!(self.state_adt_ref.variant(idx).fields.len(), 1);\n         let ty = self\n             .tcx\n-            .type_of(self.state_adt_ref.variant(idx).fields[0].did)\n+            .bound_type_of(self.state_adt_ref.variant(idx).fields[0].did)\n             .subst(self.tcx, self.state_substs);\n         expand_aggregate(\n             Place::return_place(),"}, {"sha": "012ce730755755e8d85f9604152e7895d959e748", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -260,7 +260,7 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n-                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, substs);\n+                let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n \n                 return Some(CallSite {\n                     callee,"}, {"sha": "016b3bc098073c68b11b6c9ece9b49614b403808", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n use rustc_index::vec::{Idx, IndexVec};\n@@ -70,7 +70,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             // of this function. Is this intentional?\n             if let Some(ty::Generator(gen_def_id, substs, _)) = ty.map(Ty::kind) {\n                 let body = tcx.optimized_mir(*gen_def_id).generator_drop().unwrap();\n-                let body = body.clone().subst(tcx, substs);\n+                let body = EarlyBinder(body.clone()).subst(tcx, substs);\n                 debug!(\"make_shim({:?}) = {:?}\", instance, body);\n                 return body;\n             }\n@@ -151,7 +151,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     } else {\n         InternalSubsts::identity_for_item(tcx, def_id)\n     };\n-    let sig = tcx.fn_sig(def_id).subst(tcx, substs);\n+    let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n     let sig = tcx.erase_late_bound_regions(sig);\n     let span = tcx.def_span(def_id);\n \n@@ -343,7 +343,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         // otherwise going to be TySelf and we can't index\n         // or access fields of a Place of type TySelf.\n         let substs = tcx.mk_substs_trait(self_ty, &[]);\n-        let sig = tcx.fn_sig(def_id).subst(tcx, substs);\n+        let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n         let sig = tcx.erase_late_bound_regions(sig);\n         let span = tcx.def_span(def_id);\n \n@@ -541,7 +541,7 @@ fn build_call_shim<'tcx>(\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n     if let Some(sig_substs) = sig_substs {\n-        sig = sig.subst(tcx, sig_substs);\n+        sig = EarlyBinder(sig).subst(tcx, sig_substs);\n     }\n \n     if let CallKind::Indirect(fnty) = call_kind {"}, {"sha": "dc1946bcdc2ebbf1b3a08dbaee4ede4030f6d35e", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -9,7 +9,9 @@ use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n+use rustc_middle::ty::{\n+    self, EarlyBinder, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy,\n+};\n use rustc_span::symbol::kw;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::Integer;\n@@ -297,7 +299,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n         let mut param_env = self.tcx.param_env_reveal_all_normalized(impl_def_id);\n         if !substs.is_empty() {\n-            param_env = param_env.subst(self.tcx, substs);\n+            param_env = EarlyBinder(param_env).subst(self.tcx, substs);\n         }\n \n         match &mut impl_trait_ref {"}, {"sha": "d09cc4fb62f3f6b6b81aeeea78af690276cf8aa4", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -135,8 +135,8 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n \n     let header = ty::ImplHeader {\n         impl_def_id,\n-        self_ty: tcx.type_of(impl_def_id).subst(tcx, impl_substs),\n-        trait_ref: tcx.impl_trait_ref(impl_def_id).subst(tcx, impl_substs),\n+        self_ty: tcx.bound_type_of(impl_def_id).subst(tcx, impl_substs),\n+        trait_ref: tcx.bound_impl_trait_ref(impl_def_id).map(|i| i.subst(tcx, impl_substs)),\n         predicates: tcx.predicates_of(impl_def_id).instantiate(tcx, impl_substs).predicates,\n     };\n "}, {"sha": "27ce08ea0453f184e7b84d9d1b6c8b32d47d5835", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -19,7 +19,7 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::thir;\n use rustc_middle::thir::abstract_const::{self, Node, NodeId, NotConstEvaluatable};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, DelaySpanBugEmitted, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DelaySpanBugEmitted, EarlyBinder, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n@@ -263,8 +263,10 @@ impl<'tcx> AbstractConst<'tcx> {\n     pub fn root(self, tcx: TyCtxt<'tcx>) -> Node<'tcx> {\n         let node = self.inner.last().copied().unwrap();\n         match node {\n-            Node::Leaf(leaf) => Node::Leaf(leaf.subst(tcx, self.substs)),\n-            Node::Cast(kind, operand, ty) => Node::Cast(kind, operand, ty.subst(tcx, self.substs)),\n+            Node::Leaf(leaf) => Node::Leaf(EarlyBinder(leaf).subst(tcx, self.substs)),\n+            Node::Cast(kind, operand, ty) => {\n+                Node::Cast(kind, operand, EarlyBinder(ty).subst(tcx, self.substs))\n+            }\n             // Don't perform substitution on the following as they can't directly contain generic params\n             Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => node,\n         }"}, {"sha": "4263a6fdf18415155c59ad8bb8ecc5dbb46baac9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         self.tcx.for_each_relevant_impl(trait_ref.def_id, trait_self_ty, |def_id| {\n             let impl_substs = self.fresh_substs_for_item(obligation.cause.span, def_id);\n-            let impl_trait_ref = tcx.impl_trait_ref(def_id).unwrap().subst(tcx, impl_substs);\n+            let impl_trait_ref = tcx.bound_impl_trait_ref(def_id).unwrap().subst(tcx, impl_substs);\n \n             let impl_self_ty = impl_trait_ref.self_ty();\n "}, {"sha": "e3e384798d3010d3a5ded3b8d7850819aca7642c", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -18,7 +18,7 @@ use rustc_errors::{FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n@@ -531,7 +531,7 @@ fn receiver_for_self_ty<'tcx>(\n         if param.index == 0 { self_ty.into() } else { tcx.mk_param_from_def(param) }\n     });\n \n-    let result = receiver_ty.subst(tcx, substs);\n+    let result = EarlyBinder(receiver_ty).subst(tcx, substs);\n     debug!(\n         \"receiver_for_self_ty({:?}, {:?}, {:?}) = {:?}\",\n         receiver_ty, self_ty, method_def_id, result"}, {"sha": "beaa56e1c1ca7f3cb85da0982f7544b36607f8cb", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -31,7 +31,7 @@ use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{MaxUniverse, TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;\n@@ -515,7 +515,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                         }\n \n                         let substs = substs.super_fold_with(self);\n-                        let generic_ty = self.tcx().type_of(def_id);\n+                        let generic_ty = self.tcx().bound_type_of(def_id);\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.depth += 1;\n                         let folded_ty = self.fold_ty(concrete_ty);\n@@ -1276,8 +1276,8 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),\n-        ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),\n+        ty::Projection(ref data) => tcx.bound_item_bounds(data.item_def_id).subst(tcx, data.substs),\n+        ty::Opaque(def_id, substs) => tcx.bound_item_bounds(def_id).subst(tcx, substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity.\n@@ -2032,7 +2032,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         Progress { term: err.into(), obligations: nested }\n     } else {\n         assoc_ty_own_obligations(selcx, obligation, &mut nested);\n-        Progress { term: term.subst(tcx, substs), obligations: nested }\n+        Progress { term: EarlyBinder(term).subst(tcx, substs), obligations: nested }\n     }\n }\n "}, {"sha": "6a81a7764afd9143047b90f89a9496c4a8e51898", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -217,7 +217,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                             self.infcx.report_overflow_error(&obligation, true);\n                         }\n \n-                        let generic_ty = self.tcx().type_of(def_id);\n+                        let generic_ty = self.tcx().bound_type_of(def_id);\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {"}, {"sha": "b9025c98fe7b71a421e3c9804d6c4df8aa6a1db1", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -12,7 +12,7 @@ use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty};\n+use rustc_middle::ty::{self, EarlyBinder, GenericParamDefKind, Ty};\n use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n use rustc_span::def_id::DefId;\n \n@@ -174,7 +174,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n             };\n \n-            let candidate_predicate = tcx.item_bounds(def_id)[idx].subst(tcx, substs);\n+            let candidate_predicate =\n+                tcx.bound_item_bounds(def_id).map_bound(|i| i[idx]).subst(tcx, substs);\n             let candidate = candidate_predicate\n                 .to_opt_poly_trait_pred()\n                 .expect(\"projection candidate is not a trait predicate\")\n@@ -500,7 +501,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // This maybe belongs in wf, but that can't (doesn't) handle\n             // higher-ranked things.\n             // Prevent, e.g., `dyn Iterator<Item = str>`.\n-            for bound in self.tcx().item_bounds(assoc_type) {\n+            for bound in self.tcx().bound_item_bounds(assoc_type).transpose_iter() {\n                 let subst_bound =\n                     if defs.count() == 0 {\n                         bound.subst(tcx, trait_predicate.trait_ref.substs)\n@@ -509,9 +510,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         substs.extend(trait_predicate.trait_ref.substs.iter());\n                         let mut bound_vars: smallvec::SmallVec<[ty::BoundVariableKind; 8]> =\n                             smallvec::SmallVec::with_capacity(\n-                                bound.kind().bound_vars().len() + defs.count(),\n+                                bound.0.kind().bound_vars().len() + defs.count(),\n                             );\n-                        bound_vars.extend(bound.kind().bound_vars().into_iter());\n+                        bound_vars.extend(bound.0.kind().bound_vars().into_iter());\n                         InternalSubsts::fill_single(&mut substs, defs, &mut |param, _| match param\n                             .kind\n                         {\n@@ -558,7 +559,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let assoc_ty_substs = tcx.intern_substs(&substs);\n \n                         let bound_vars = tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n-                        let bound = bound.kind().skip_binder().subst(tcx, assoc_ty_substs);\n+                        let bound =\n+                            EarlyBinder(bound.0.kind().skip_binder()).subst(tcx, assoc_ty_substs);\n                         tcx.mk_predicate(ty::Binder::bind_with_vars(bound, bound_vars))\n                     };\n                 let normalized_bound = normalize_with_depth_to(\n@@ -1005,10 +1007,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // The last field of the structure has to exist and contain type/const parameters.\n                 let (tail_field, prefix_fields) =\n                     def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n-                let tail_field_ty = tcx.type_of(tail_field.did);\n+                let tail_field_ty = tcx.bound_type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                for arg in tail_field_ty.walk() {\n+                for arg in tail_field_ty.0.walk() {\n                     if let Some(i) = maybe_unsizing_param_idx(arg) {\n                         unsizing_params.insert(i);\n                     }"}, {"sha": "1c9f83f8f34084306bc4fb63782d56920e6eac1d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -38,7 +38,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n-use rustc_middle::ty::{self, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n+use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::sym;\n \n@@ -1341,7 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n             }\n         };\n-        let bounds = tcx.item_bounds(def_id).subst(tcx, substs);\n+        let bounds = tcx.bound_item_bounds(def_id).subst(tcx, substs);\n \n         // The bounds returned by `item_bounds` may contain duplicates after\n         // normalization, so try to deduplicate when possible to avoid\n@@ -1795,11 +1795,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Adt(def, substs) => {\n                 let sized_crit = def.sized_constraint(self.tcx());\n                 // (*) binder moved here\n-                Where(\n-                    obligation.predicate.rebind({\n-                        sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()\n-                    }),\n-                )\n+                Where(obligation.predicate.rebind({\n+                    sized_crit.iter().map(|ty| EarlyBinder(*ty).subst(self.tcx(), substs)).collect()\n+                }))\n             }\n \n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,\n@@ -1962,7 +1960,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // We can resolve the `impl Trait` to its concrete type,\n                 // which enforces a DAG between the functions requiring\n                 // the auto trait bounds in question.\n-                t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])\n+                t.rebind(vec![self.tcx().bound_type_of(def_id).subst(self.tcx(), substs)])\n             }\n         }\n     }\n@@ -2068,12 +2066,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {\n-        let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n+        let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n \n         // Before we create the substitutions and everything, first\n         // consider a \"quick reject\". This avoids creating more types\n         // and so forth that we need to.\n-        if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {\n+        if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n             return Err(());\n         }\n \n@@ -2332,7 +2330,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 param_env,\n                 cause.clone(),\n                 recursion_depth,\n-                predicate.subst(tcx, substs),\n+                EarlyBinder(*predicate).subst(tcx, substs),\n                 &mut obligations,\n             );\n             obligations.push(Obligation { cause, recursion_depth, param_env, predicate });"}, {"sha": "bca1d15ada90f85ec2e4703e0ceb872a64b1ade6", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -85,7 +85,7 @@ pub fn translate_substs<'a, 'tcx>(\n         param_env, source_impl, source_substs, target_node\n     );\n     let source_trait_ref =\n-        infcx.tcx.impl_trait_ref(source_impl).unwrap().subst(infcx.tcx, &source_substs);\n+        infcx.tcx.bound_impl_trait_ref(source_impl).unwrap().subst(infcx.tcx, &source_substs);\n \n     // translate the Self and Param parts of the substitution, since those\n     // vary across impls"}, {"sha": "f2e31c068a0d37eeba1dc284bf30044059698b4a", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, EarlyBinder, ImplSubject, ToPredicate, Ty, TyCtxt, TypeFoldable};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n@@ -201,7 +201,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     impl_substs: SubstsRef<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n     let subject = selcx.tcx().impl_subject(impl_def_id);\n-    let subject = subject.subst(selcx.tcx(), impl_substs);\n+    let subject = EarlyBinder(subject).subst(selcx.tcx(), impl_substs);\n     let Normalized { value: subject, obligations: normalization_obligations1 } =\n         super::normalize(selcx, param_env, ObligationCause::dummy(), subject);\n "}, {"sha": "5b5b84991918840fda33de19c17d8630c6347157", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -8,7 +8,9 @@\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, AssocItemContainer, AssocKind, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{\n+    self, AssocItemContainer, AssocKind, EarlyBinder, Ty, TyCtxt, TypeFoldable,\n+};\n \n use rustc_ast::ast;\n use rustc_attr as attr;\n@@ -41,7 +43,7 @@ impl<'tcx> RustIrDatabase<'tcx> {\n         let predicates = self.interner.tcx.predicates_defined_on(def_id).predicates;\n         predicates\n             .iter()\n-            .map(|(wc, _)| wc.subst(self.interner.tcx, bound_vars))\n+            .map(|(wc, _)| EarlyBinder(*wc).subst(self.interner.tcx, bound_vars))\n             .filter_map(|wc| LowerInto::<\n                     Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>\n                     >::lower_into(wc, self.interner)).collect()\n@@ -55,7 +57,7 @@ impl<'tcx> RustIrDatabase<'tcx> {\n             .tcx\n             .explicit_item_bounds(def_id)\n             .iter()\n-            .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n+            .map(|(bound, _)| EarlyBinder(*bound).subst(self.interner.tcx, &bound_vars))\n             .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n@@ -272,15 +274,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let (inputs_and_output, iobinders, _) = crate::chalk::lowering::collect_bound_vars(\n             self.interner,\n             self.interner.tcx,\n-            sig.inputs_and_output().subst(self.interner.tcx, bound_vars),\n+            EarlyBinder(sig.inputs_and_output()).subst(self.interner.tcx, bound_vars),\n         );\n \n         let argument_types = inputs_and_output[..inputs_and_output.len() - 1]\n             .iter()\n-            .map(|t| t.subst(self.interner.tcx, &bound_vars).lower_into(self.interner))\n+            .map(|t| {\n+                EarlyBinder(*t).subst(self.interner.tcx, &bound_vars).lower_into(self.interner)\n+            })\n             .collect();\n \n-        let return_type = inputs_and_output[inputs_and_output.len() - 1]\n+        let return_type = EarlyBinder(inputs_and_output[inputs_and_output.len() - 1])\n             .subst(self.interner.tcx, &bound_vars)\n             .lower_into(self.interner);\n \n@@ -306,7 +310,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let bound_vars = bound_vars_for_item(self.interner.tcx, def_id);\n         let binders = binders_for(self.interner, bound_vars);\n \n-        let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n+        let trait_ref = self.interner.tcx.bound_impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n@@ -348,10 +352,10 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let all_impls = self.interner.tcx.all_impls(def_id);\n         let matched_impls = all_impls.filter(|impl_def_id| {\n             use chalk_ir::could_match::CouldMatch;\n-            let trait_ref = self.interner.tcx.impl_trait_ref(*impl_def_id).unwrap();\n+            let trait_ref = self.interner.tcx.bound_impl_trait_ref(*impl_def_id).unwrap();\n             let bound_vars = bound_vars_for_item(self.interner.tcx, *impl_def_id);\n \n-            let self_ty = trait_ref.self_ty();\n+            let self_ty = trait_ref.map_bound(|t| t.self_ty());\n             let self_ty = self_ty.subst(self.interner.tcx, bound_vars);\n             let lowered_ty = self_ty.lower_into(self.interner);\n \n@@ -463,7 +467,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let ty = self\n             .interner\n             .tcx\n-            .type_of(def_id)\n+            .bound_type_of(def_id)\n             .subst(self.interner.tcx, bound_vars)\n             .lower_into(self.interner);\n \n@@ -506,7 +510,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 .tcx\n                 .explicit_item_bounds(opaque_ty_id.0)\n                 .iter()\n-                .map(|(bound, _)| bound.subst(self.interner.tcx, &bound_vars))\n+                .map(|(bound, _)| EarlyBinder(*bound).subst(self.interner.tcx, &bound_vars))\n                 .map(|bound| {\n                     bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,"}, {"sha": "3fd0bb1814a65e1e6719a85f9b22431436bc1aba", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -5,7 +5,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, ParamEnvAnd, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::dropck_outlives::trivial_dropck_outlives;\n use rustc_trait_selection::traits::query::dropck_outlives::{\n@@ -271,9 +271,15 @@ fn dtorck_constraint_for_ty<'tcx>(\n                 tcx.at(span).adt_dtorck_constraint(def.did())?;\n             // FIXME: we can try to recursively `dtorck_constraint_on_ty`\n             // there, but that needs some way to handle cycles.\n-            constraints.dtorck_types.extend(dtorck_types.iter().map(|t| t.subst(tcx, substs)));\n-            constraints.outlives.extend(outlives.iter().map(|t| t.subst(tcx, substs)));\n-            constraints.overflows.extend(overflows.iter().map(|t| t.subst(tcx, substs)));\n+            constraints\n+                .dtorck_types\n+                .extend(dtorck_types.iter().map(|t| EarlyBinder(*t).subst(tcx, substs)));\n+            constraints\n+                .outlives\n+                .extend(outlives.iter().map(|t| EarlyBinder(*t).subst(tcx, substs)));\n+            constraints\n+                .overflows\n+                .extend(overflows.iter().map(|t| EarlyBinder(*t).subst(tcx, substs)));\n         }\n \n         // Objects must be alive in order for their destructor"}, {"sha": "861d3bc564fca8ed903728434abbd09a8044bdfd", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -6,7 +6,9 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArg, Subst, UserSelfTy, UserSubsts};\n-use rustc_middle::ty::{self, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable, Variance};\n+use rustc_middle::ty::{\n+    self, EarlyBinder, FnSig, Lift, PolyFnSig, Ty, TyCtxt, TypeFoldable, Variance,\n+};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Predicate, ToPredicate};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n@@ -115,7 +117,7 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        value.subst(self.tcx(), substs)\n+        EarlyBinder(value).subst(self.tcx(), substs)\n     }\n \n     fn relate_mir_and_user_ty("}, {"sha": "9ad44d14d61802e37e380508a1322cb3fbd5fcac", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::{sym, DUMMY_SP};\n \n@@ -204,7 +204,7 @@ fn drop_tys_helper<'tcx>(\n             match subty.kind() {\n                 ty::Adt(adt_id, subst) => {\n                     for subty in tcx.adt_drop_tys(adt_id.did())? {\n-                        vec.push(subty.subst(tcx, subst));\n+                        vec.push(EarlyBinder(subty).subst(tcx, subst));\n                     }\n                 }\n                 _ => vec.push(subty),\n@@ -237,7 +237,7 @@ fn drop_tys_helper<'tcx>(\n             Ok(Vec::new())\n         } else {\n             let field_tys = adt_def.all_fields().map(|field| {\n-                let r = tcx.type_of(field.did).subst(tcx, substs);\n+                let r = tcx.bound_type_of(field.did).subst(tcx, substs);\n                 debug!(\"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\", field, substs, r);\n                 r\n             });"}, {"sha": "23700e653e36a23359a66ebc382dd11183ec01f6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -2,7 +2,9 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits;\n \n@@ -33,7 +35,7 @@ fn sized_constraint_for_ty<'tcx>(\n             debug!(\"sized_constraint_for_ty({:?}) intermediate = {:?}\", ty, adt_tys);\n             adt_tys\n                 .iter()\n-                .map(|ty| ty.subst(tcx, substs))\n+                .map(|ty| EarlyBinder(*ty).subst(tcx, substs))\n                 .flat_map(|ty| sized_constraint_for_ty(tcx, adtdef, ty))\n                 .collect()\n         }\n@@ -442,7 +444,7 @@ pub fn conservative_is_privately_uninhabited_raw<'tcx>(\n             //     one uninhabited field.\n             def.variants().iter().all(|var| {\n                 var.fields.iter().any(|field| {\n-                    let ty = tcx.type_of(field.did).subst(tcx, substs);\n+                    let ty = tcx.bound_type_of(field.did).subst(tcx, substs);\n                     tcx.conservative_is_privately_uninhabited(param_env.and(ty))\n                 })\n             })"}, {"sha": "2ff32bdf9780502815a48fbfff71ae8146153826", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -26,7 +26,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GenericArg, GenericArgs};\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, Const, DefIdTree, EarlyBinder, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, BARE_TRAIT_OBJECTS};\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -523,7 +523,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 self.astconv\n                                     .normalize_ty(\n                                         self.span,\n-                                        tcx.at(self.span).type_of(param.def_id).subst(tcx, substs),\n+                                        EarlyBinder(tcx.at(self.span).type_of(param.def_id))\n+                                            .subst(tcx, substs),\n                                     )\n                                     .into()\n                             }\n@@ -543,7 +544,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n+                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                                .subst(tcx, substs.unwrap())\n+                                .into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()\n@@ -1292,7 +1295,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         item_segment: &hir::PathSegment<'_>,\n     ) -> Ty<'tcx> {\n         let substs = self.ast_path_substs_for_ty(span, did, item_segment);\n-        self.normalize_ty(span, self.tcx().at(span).type_of(did).subst(self.tcx(), substs))\n+        self.normalize_ty(\n+            span,\n+            EarlyBinder(self.tcx().at(span).type_of(did)).subst(self.tcx(), substs),\n+        )\n     }\n \n     fn conv_object_ty_poly_trait_ref(\n@@ -2441,7 +2447,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     true,\n                     None,\n                 );\n-                self.normalize_ty(span, tcx.at(span).type_of(def_id).subst(tcx, substs))\n+                EarlyBinder(self.normalize_ty(span, tcx.at(span).type_of(def_id)))\n+                    .subst(tcx, substs)\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length = match length {\n@@ -2684,7 +2691,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_ref.def_id,\n         )?;\n \n-        let fn_sig = tcx.fn_sig(assoc.def_id).subst(\n+        let fn_sig = tcx.bound_fn_sig(assoc.def_id).subst(\n             tcx,\n             trait_ref.substs.extend_to(tcx, assoc.def_id, |param, _| tcx.mk_param_from_def(param)),\n         );"}, {"sha": "0a84d41b4f31caa0cf99b50ecd5fb750761dd27a", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -339,7 +339,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let (fn_sig, def_id) = match *callee_ty.kind() {\n             ty::FnDef(def_id, subst) => {\n-                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, subst);\n+                let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, subst);\n \n                 // Unit testing: function items annotated with\n                 // `#[rustc_evaluate_where_clauses]` trigger special output"}, {"sha": "3e76738cc5d9e65367125e0d3e92ec4162fb0675", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -171,7 +171,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(span));\n         let region = fcx.next_region_var(RegionVariableOrigin::MiscVariable(span));\n \n-        Some(tcx.type_of(va_list_did).subst(tcx, &[region.into()]))\n+        Some(tcx.bound_type_of(va_list_did).subst(tcx, &[region.into()]))\n     } else {\n         None\n     };\n@@ -655,7 +655,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n-    let hidden_type = tcx.type_of(def_id).subst(tcx, substs);\n+    let hidden_type = tcx.bound_type_of(def_id.to_def_id()).subst(tcx, substs);\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let defining_use_anchor = match *origin {"}, {"sha": "c8fe046873603ec260af644723ce7a29595a0143", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -175,19 +175,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n             ty::Opaque(def_id, substs) => {\n-                let bounds = self.tcx.explicit_item_bounds(def_id);\n-                let sig = bounds.iter().find_map(|(pred, span)| match pred.kind().skip_binder() {\n-                    ty::PredicateKind::Projection(proj_predicate) => self\n-                        .deduce_sig_from_projection(\n-                            Some(*span),\n-                            pred.kind().rebind(proj_predicate.subst(self.tcx, substs)),\n-                        ),\n-                    _ => None,\n-                });\n+                let bounds = self.tcx.bound_explicit_item_bounds(def_id);\n+                let sig = bounds\n+                    .transpose_iter()\n+                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                    .find_map(|(pred, span)| match pred.0.kind().skip_binder() {\n+                        ty::PredicateKind::Projection(proj_predicate) => self\n+                            .deduce_sig_from_projection(\n+                                Some(span.0),\n+                                pred.0.kind().rebind(\n+                                    pred.map_bound(|_| proj_predicate).subst(self.tcx, substs),\n+                                ),\n+                            ),\n+                        _ => None,\n+                    });\n \n                 let kind = bounds\n-                    .iter()\n-                    .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n+                    .transpose_iter()\n+                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                    .filter_map(|(pred, _)| match pred.0.kind().skip_binder() {\n                         ty::PredicateKind::Trait(tp) => {\n                             self.tcx.fn_trait_kind_from_lang_item(tp.def_id())\n                         }\n@@ -668,25 +674,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ),\n         };\n \n-        let item_bounds = self.tcx.explicit_item_bounds(def_id);\n+        let item_bounds = self.tcx.bound_explicit_item_bounds(def_id);\n \n         // Search for a pending obligation like\n         //\n         // `<R as Future>::Output = T`\n         //\n         // where R is the return type we are expecting. This type `T`\n         // will be our output.\n-        let output_ty = item_bounds.iter().find_map(|&(predicate, span)| {\n-            let bound_predicate = predicate.subst(self.tcx, substs).kind();\n-            if let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder() {\n-                self.deduce_future_output_from_projection(\n-                    span,\n-                    bound_predicate.rebind(proj_predicate),\n-                )\n-            } else {\n-                None\n-            }\n-        });\n+        let output_ty = item_bounds\n+            .transpose_iter()\n+            .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+            .find_map(|(predicate, span)| {\n+                let bound_predicate = predicate.subst(self.tcx, substs).kind();\n+                if let ty::PredicateKind::Projection(proj_predicate) = bound_predicate.skip_binder()\n+                {\n+                    self.deduce_future_output_from_projection(\n+                        span.0,\n+                        bound_predicate.rebind(proj_predicate),\n+                    )\n+                } else {\n+                    None\n+                }\n+            });\n \n         debug!(\"deduce_future_output_from_obligations: output_ty={:?}\", output_ty);\n         output_ty"}, {"sha": "b857679520b8935b935291e0bf0be9918c190f01", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -265,9 +265,8 @@ fn compare_predicate_entailment<'tcx>(\n         let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n-        // First liberate late bound regions and subst placeholders\n-        let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, tcx.fn_sig(trait_m.def_id));\n-        let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n+        let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n+        let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, trait_sig);\n         // Add the resulting inputs and output as well-formed.\n@@ -1066,7 +1065,7 @@ crate fn compare_const_impl<'tcx>(\n \n         // Compute placeholder form of impl and trait const tys.\n         let impl_ty = tcx.type_of(impl_c.def_id);\n-        let trait_ty = tcx.type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n+        let trait_ty = tcx.bound_type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n         let mut cause = ObligationCause::new(\n             impl_c_span,\n             impl_c_hir_id,\n@@ -1452,14 +1451,15 @@ pub fn check_type_bounds<'tcx>(\n         };\n \n         let obligations = tcx\n-            .explicit_item_bounds(trait_ty.def_id)\n-            .iter()\n-            .map(|&(bound, span)| {\n+            .bound_explicit_item_bounds(trait_ty.def_id)\n+            .transpose_iter()\n+            .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+            .map(|(bound, span)| {\n                 debug!(?bound);\n                 let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n                 debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n \n-                traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n+                traits::Obligation::new(mk_cause(span.0), param_env, concrete_ty_bound)\n             })\n             .collect();\n         debug!(\"check_type_bounds: item_bounds={:?}\", obligations);"}, {"sha": "9caa4a40df71f838fd2b035f177b8edbf8d1ceae", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -8,7 +8,7 @@ use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Predicate, Ty, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::query::dropck_outlives::AtExt;\n@@ -84,7 +84,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n         let drop_impl_span = tcx.def_span(drop_impl_did);\n         let fresh_impl_substs =\n             infcx.fresh_substs_for_item(drop_impl_span, drop_impl_did.to_def_id());\n-        let fresh_impl_self_ty = drop_impl_ty.subst(tcx, fresh_impl_substs);\n+        let fresh_impl_self_ty = EarlyBinder(drop_impl_ty).subst(tcx, fresh_impl_substs);\n \n         let cause = &ObligationCause::misc(drop_impl_span, drop_impl_hir_id);\n         match infcx.at(cause, impl_param_env).eq(named_type, fresh_impl_self_ty) {"}, {"sha": "501ce31557ddab1a2ff30364fd5dc3389484b1ab", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -23,8 +23,8 @@ use rustc_middle::ty::subst::{\n     self, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSelfTy, UserSubsts,\n };\n use rustc_middle::ty::{\n-    self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, ToPolyTraitRef, ToPredicate,\n-    Ty, UserType,\n+    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, ToPolyTraitRef,\n+    ToPredicate, Ty, UserType,\n };\n use rustc_session::lint;\n use rustc_span::hygiene::DesugaringKind;\n@@ -347,7 +347,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         debug!(\"instantiate_type_scheme(value={:?}, substs={:?})\", value, substs);\n-        let value = value.subst(self.tcx, substs);\n+        let value = EarlyBinder(value).subst(self.tcx, substs);\n         let result = self.normalize_associated_types_in(span, value);\n         debug!(\"instantiate_type_scheme = {:?}\", result);\n         result\n@@ -838,9 +838,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let def_kind = self.tcx.def_kind(def_id);\n \n         let item_ty = if let DefKind::Variant = def_kind {\n-            self.tcx.type_of(self.tcx.parent(def_id))\n+            self.tcx.bound_type_of(self.tcx.parent(def_id))\n         } else {\n-            self.tcx.type_of(def_id)\n+            self.tcx.bound_type_of(def_id)\n         };\n         let substs = self.infcx.fresh_substs_for_item(span, def_id);\n         let ty = item_ty.subst(self.tcx, substs);\n@@ -1044,8 +1044,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let (sig, did, substs) = match (&expected.kind(), &found.kind()) {\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n-                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n-                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n+                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n                 if sig1 != sig2 {\n                     return;\n                 }\n@@ -1056,7 +1056,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (sig1, *did1, substs1)\n             }\n             (ty::FnDef(did, substs), ty::FnPtr(sig2)) => {\n-                let sig1 = self.tcx.fn_sig(*did).subst(self.tcx, substs);\n+                let sig1 = self.tcx.bound_fn_sig(*did).subst(self.tcx, substs);\n                 if sig1 != *sig2 {\n                     return;\n                 }\n@@ -1401,7 +1401,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // If we have a default, then we it doesn't matter that we're not\n                             // inferring the type arguments: we provide the default where any\n                             // is missing.\n-                            let default = tcx.type_of(param.def_id);\n+                            let default = tcx.bound_type_of(param.def_id);\n                             self.fcx\n                                 .normalize_ty(self.span, default.subst(tcx, substs.unwrap()))\n                                 .into()\n@@ -1415,7 +1415,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id).subst(tcx, substs.unwrap()).into()\n+                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                                .subst(tcx, substs.unwrap())\n+                                .into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "7fe710cf8f4f2e160abf807b6fe32d7ed34a1735", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -129,7 +129,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(1), kind: ty::BrEnv },\n             ));\n-            let va_list_ty = tcx.type_of(did).subst(tcx, &[region.into()]);\n+            let va_list_ty = tcx.bound_type_of(did).subst(tcx, &[region.into()]);\n             (tcx.mk_ref(env_region, ty::TypeAndMut { ty: va_list_ty, mutbl }), va_list_ty)\n         })\n     };"}, {"sha": "7992460f5464eef6073ae7005dc3123d0d59304a", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         debug!(\"method_predicates after subst = {:?}\", method_predicates);\n \n-        let sig = self.tcx.fn_sig(def_id);\n+        let sig = self.tcx.bound_fn_sig(def_id);\n \n         let sig = sig.subst(self.tcx, all_substs);\n         debug!(\"type scheme substituted, sig={:?}\", sig);"}, {"sha": "cb359434fdb9a864ddeaaa92c2d5c37573241895", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // N.B., instantiate late-bound regions first so that\n         // `instantiate_type_scheme` can normalize associated types that\n         // may reference those regions.\n-        let fn_sig = tcx.fn_sig(def_id);\n+        let fn_sig = tcx.bound_fn_sig(def_id);\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig).0;\n "}, {"sha": "0861d121a1f0e75cfad3fd2c386bb5b8d2a8dc9c", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, EarlyBinder, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{\n@@ -711,7 +711,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n \n             let (impl_ty, impl_substs) = self.impl_ty_and_substs(impl_def_id);\n-            let impl_ty = impl_ty.subst(self.tcx, impl_substs);\n+            let impl_ty = EarlyBinder(impl_ty).subst(self.tcx, impl_substs);\n \n             debug!(\"impl_ty: {:?}\", impl_ty);\n \n@@ -901,7 +901,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) -> bool {\n         match method.kind {\n             ty::AssocKind::Fn => {\n-                let fty = self.tcx.fn_sig(method.def_id);\n+                let fty = self.tcx.bound_fn_sig(method.def_id);\n                 self.probe(|_| {\n                     let substs = self.fresh_substs_for_item(self.span, method.def_id);\n                     let fty = fty.subst(self.tcx, substs);\n@@ -1771,7 +1771,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn xform_method_sig(&self, method: DefId, substs: SubstsRef<'tcx>) -> ty::FnSig<'tcx> {\n-        let fn_sig = self.tcx.fn_sig(method);\n+        let fn_sig = self.tcx.bound_fn_sig(method);\n         debug!(?fn_sig);\n \n         assert!(!substs.has_escaping_bound_vars());"}, {"sha": "50966868ec7d968a04c78325a00123192484ceef", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -21,7 +21,8 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    self, AdtKind, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -1388,7 +1389,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n             }\n             let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n-            let substituted_pred = pred.subst(tcx, substs);\n+            let substituted_pred = EarlyBinder(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n             if substituted_pred.has_param_types_or_consts()"}, {"sha": "52f9e386441a434e5595e2f49e9af0206487f821", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n use rustc_span::Span;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -137,7 +137,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n                         // `unsubstituted_predicate` is `U: 'b` in the\n                         // example above.  So apply the substitution to\n                         // get `T: 'a` (or `predicate`):\n-                        let predicate = unsubstituted_predicate.subst(tcx, substs);\n+                        let predicate = EarlyBinder(*unsubstituted_predicate).subst(tcx, substs);\n                         insert_outlives_predicate(\n                             tcx,\n                             predicate.0,\n@@ -287,7 +287,7 @@ pub fn check_explicit_predicates<'tcx>(\n             continue;\n         }\n \n-        let predicate = outlives_predicate.subst(tcx, substs);\n+        let predicate = EarlyBinder(*outlives_predicate).subst(tcx, substs);\n         debug!(\"predicate = {:?}\", &predicate);\n         insert_outlives_predicate(tcx, predicate.0, predicate.1, span, required_predicates);\n     }"}, {"sha": "805cc5c71d83a40c29d21424bcec1a05ff66eec9", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -15,14 +15,14 @@ crate struct BlanketImplFinder<'a, 'tcx> {\n impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n     crate fn get_blanket_impls(&mut self, item_def_id: DefId) -> Vec<Item> {\n         let param_env = self.cx.tcx.param_env(item_def_id);\n-        let ty = self.cx.tcx.type_of(item_def_id);\n+        let ty = self.cx.tcx.bound_type_of(item_def_id);\n \n         trace!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         self.cx.with_all_traits(|cx, all_traits| {\n             for &trait_def_id in all_traits {\n                 if !cx.cache.access_levels.is_public(trait_def_id)\n-                    || cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n+                    || cx.generated_synthetics.get(&(ty.0, trait_def_id)).is_some()\n                 {\n                     continue;\n                 }\n@@ -34,12 +34,12 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         trait_def_id,\n                         impl_def_id\n                     );\n-                    let trait_ref = cx.tcx.impl_trait_ref(impl_def_id).unwrap();\n-                    let is_param = matches!(trait_ref.self_ty().kind(), ty::Param(_));\n+                    let trait_ref = cx.tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+                    let is_param = matches!(trait_ref.0.self_ty().kind(), ty::Param(_));\n                     let may_apply = is_param && cx.tcx.infer_ctxt().enter(|infcx| {\n                         let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);\n                         let ty = ty.subst(infcx.tcx, substs);\n-                        let param_env = param_env.subst(infcx.tcx, substs);\n+                        let param_env = EarlyBinder(param_env).subst(infcx.tcx, substs);\n \n                         let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n                         let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n@@ -99,7 +99,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         continue;\n                     }\n \n-                    cx.generated_synthetics.insert((ty, trait_def_id));\n+                    cx.generated_synthetics.insert((ty.0, trait_def_id));\n \n                     impls.push(Item {\n                         name: None,\n@@ -115,15 +115,15 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             ),\n                             // FIXME(eddyb) compute both `trait_` and `for_` from\n                             // the post-inference `trait_ref`, as it's more accurate.\n-                            trait_: Some(trait_ref.clean(cx)),\n-                            for_: ty.clean(cx),\n+                            trait_: Some(trait_ref.0.clean(cx)),\n+                            for_: ty.0.clean(cx),\n                             items: cx.tcx\n                                 .associated_items(impl_def_id)\n                                 .in_definition_order()\n                                 .map(|x| x.clean(cx))\n                                 .collect::<Vec<_>>(),\n                             polarity: ty::ImplPolarity::Positive,\n-                            kind: ImplKind::Blanket(box trait_ref.self_ty().clean(cx)),\n+                            kind: ImplKind::Blanket(box trait_ref.0.self_ty().clean(cx)),\n                         }),\n                         cfg: None,\n                     });"}, {"sha": "6e18f381c59a441f6abf3304dcd38930e8e5e795", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, AdtKind, DefIdTree, Lift, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Lift, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -1634,7 +1634,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     .tcx\n                     .explicit_item_bounds(def_id)\n                     .iter()\n-                    .map(|(bound, _)| bound.subst(cx.tcx, substs))\n+                    .map(|(bound, _)| EarlyBinder(*bound).subst(cx.tcx, substs))\n                     .collect::<Vec<_>>();\n                 let mut regions = vec![];\n                 let mut has_sized = false;"}, {"sha": "530d6d4de35f1c2bceb58e92c6b8624c9db23c75", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, args);\n             let method_def_id = cx.typeck_results().type_dependent_def_id(body.value.hir_id).unwrap();\n             let substs = cx.typeck_results().node_substs(body.value.hir_id);\n-            let call_ty = cx.tcx.type_of(method_def_id).subst(cx.tcx, substs);\n+            let call_ty = cx.tcx.bound_type_of(method_def_id).subst(cx.tcx, substs);\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {"}, {"sha": "5c46d6c7df7056856ed7afcd3d37f09b70cd2808", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{Opaque, PredicateKind::Trait};\n+use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n             for &(p, _span) in preds {\n-                let p = p.subst(cx.tcx, subst);\n+                let p = EarlyBinder(p).subst(cx.tcx, subst);\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "9d8f8999ce409488a8c33f5c1c5a7dd0956a70a2", "filename": "src/tools/clippy/clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n             ExprKind::MethodCall(path, arguments, _) => {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n-                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n+                let method_type = cx.tcx.bound_type_of(def_id).subst(cx.tcx, substs);\n                 check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),"}, {"sha": "be6277332db4dbd5d7d9530388c36c62f46e4b13", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -307,7 +307,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     .non_enum_variant()\n                     .fields\n                     .iter()\n-                    .map(|f| cx.tcx.type_of(f.did).subst(cx.tcx, substs));\n+                    .map(|f| cx.tcx.bound_type_of(f.did).subst(cx.tcx, substs));\n                 let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::TypeErasure;\n                 };"}, {"sha": "a80c7ee4929584d3885810b7050972aa208f28bb", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{BinOp, BinOpKind, Block, Expr, ExprKind, HirId, Item, ItemKind,\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, FloatTy, ScalarInt, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n@@ -420,7 +420,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {\n-                    substs.subst(self.lcx.tcx, self.substs)\n+                    EarlyBinder(substs).subst(self.lcx.tcx, self.substs)\n                 };\n \n                 let result = self"}, {"sha": "b09eb8c6cd10b89c7756bfe350083c05700d2ac7", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8a0fc4237da544aca0d6631ee467891caad9ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=2a8a0fc4237da544aca0d6631ee467891caad9ad", "patch": "@@ -520,7 +520,7 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n         let ty = cx.typeck_results().expr_ty_adjusted(expr).peel_refs();\n         match *ty.kind() {\n             ty::Closure(_, subs) => Some(ExprFnSig::Closure(subs.as_closure().sig())),\n-            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst(cx.tcx, subs))),\n+            ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs))),\n             ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig)),\n             ty::Dynamic(bounds, _) => {\n                 let lang_items = cx.tcx.lang_items();"}]}