{"sha": "38c67e5c0d4297f45ab2b78a00b59f737796d160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YzY3ZTVjMGQ0Mjk3ZjQ1YWIyYjc4YTAwYjU5ZjczNzc5NmQxNjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:52:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:52:26Z"}, "message": "Avoid cyclic queries in name resolution when processing enums", "tree": {"sha": "b96b64b2be660a35b6bb706d0ce8c5ee27f7433a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b96b64b2be660a35b6bb706d0ce8c5ee27f7433a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c67e5c0d4297f45ab2b78a00b59f737796d160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c67e5c0d4297f45ab2b78a00b59f737796d160", "html_url": "https://github.com/rust-lang/rust/commit/38c67e5c0d4297f45ab2b78a00b59f737796d160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c67e5c0d4297f45ab2b78a00b59f737796d160/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deb40d52aaa1989402fc01d65da389dc92fb66fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/deb40d52aaa1989402fc01d65da389dc92fb66fa", "html_url": "https://github.com/rust-lang/rust/commit/deb40d52aaa1989402fc01d65da389dc92fb66fa"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "7c0d936910270c08ff02afab3c948592a4bc899a", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38c67e5c0d4297f45ab2b78a00b59f737796d160/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c67e5c0d4297f45ab2b78a00b59f737796d160/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=38c67e5c0d4297f45ab2b78a00b59f737796d160", "patch": "@@ -12,7 +12,7 @@ use ra_prof::profile;\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n use crate::{\n-    body::Expander, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n+    body::CfgExpander, db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace,\n     type_ref::TypeRef, visibility::RawVisibility, EnumId, HasModule, LocalEnumVariantId,\n     LocalStructFieldId, Lookup, ModuleId, StructId, UnionId, VariantId,\n };\n@@ -124,7 +124,7 @@ fn lower_enum(\n \n impl VariantData {\n     fn new(db: &dyn DefDatabase, flavor: InFile<ast::StructKind>, module_id: ModuleId) -> Self {\n-        let mut expander = Expander::new(db, flavor.file_id, module_id);\n+        let mut expander = CfgExpander::new(db, flavor.file_id, module_id.krate);\n         let mut trace = Trace::new_for_arena();\n         match lower_struct(db, &mut expander, &mut trace, &flavor) {\n             StructKind::Tuple => VariantData::Tuple(trace.into_arena()),\n@@ -178,7 +178,7 @@ impl HasChildSource for VariantId {\n                 it.lookup(db).container.module(db),\n             ),\n         };\n-        let mut expander = Expander::new(db, src.file_id, module_id);\n+        let mut expander = CfgExpander::new(db, src.file_id, module_id.krate);\n         let mut trace = Trace::new_for_map();\n         lower_struct(db, &mut expander, &mut trace, &src);\n         src.with_value(trace.into_map())\n@@ -194,7 +194,7 @@ pub enum StructKind {\n \n fn lower_struct(\n     db: &dyn DefDatabase,\n-    expander: &mut Expander,\n+    expander: &mut CfgExpander,\n     trace: &mut Trace<StructFieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {"}, {"sha": "7fac6ce66e3e9d7cdbce57d309cc82634d3b8087", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/38c67e5c0d4297f45ab2b78a00b59f737796d160/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c67e5c0d4297f45ab2b78a00b59f737796d160/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=38c67e5c0d4297f45ab2b78a00b59f737796d160", "patch": "@@ -25,32 +25,57 @@ use crate::{\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n use ra_cfg::CfgOptions;\n+use ra_db::CrateId;\n+\n+/// A subser of Exander that only deals with cfg attributes. We only need it to\n+/// avoid cyclic queries in crate def map during enum processing.\n+pub(crate) struct CfgExpander {\n+    cfg_options: CfgOptions,\n+    hygiene: Hygiene,\n+}\n \n pub(crate) struct Expander {\n+    cfg_expander: CfgExpander,\n     crate_def_map: Arc<CrateDefMap>,\n-    cfg_options: CfgOptions,\n     current_file_id: HirFileId,\n-    hygiene: Hygiene,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n     recursive_limit: usize,\n }\n \n+impl CfgExpander {\n+    pub(crate) fn new(\n+        db: &dyn DefDatabase,\n+        current_file_id: HirFileId,\n+        krate: CrateId,\n+    ) -> CfgExpander {\n+        let hygiene = Hygiene::new(db.upcast(), current_file_id);\n+        let cfg_options = db.crate_graph()[krate].cfg_options.clone();\n+        CfgExpander { cfg_options, hygiene }\n+    }\n+\n+    pub(crate) fn parse_attrs(&self, owner: &dyn ast::AttrsOwner) -> Attrs {\n+        Attrs::new(owner, &self.hygiene)\n+    }\n+\n+    pub(crate) fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n+        attrs.is_cfg_enabled(&self.cfg_options)\n+    }\n+}\n+\n impl Expander {\n     pub(crate) fn new(\n         db: &dyn DefDatabase,\n         current_file_id: HirFileId,\n         module: ModuleId,\n     ) -> Expander {\n+        let cfg_expander = CfgExpander::new(db, current_file_id, module.krate);\n         let crate_def_map = db.crate_def_map(module.krate);\n-        let hygiene = Hygiene::new(db.upcast(), current_file_id);\n         let ast_id_map = db.ast_id_map(current_file_id);\n-        let cfg_options = db.crate_graph()[module.krate].cfg_options.clone();\n         Expander {\n+            cfg_expander,\n             crate_def_map,\n-            cfg_options,\n             current_file_id,\n-            hygiene,\n             ast_id_map,\n             module,\n             recursive_limit: 0,\n@@ -87,7 +112,7 @@ impl Expander {\n                         ast_id_map: mem::take(&mut self.ast_id_map),\n                         bomb: DropBomb::new(\"expansion mark dropped\"),\n                     };\n-                    self.hygiene = Hygiene::new(db.upcast(), file_id);\n+                    self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n                     self.current_file_id = file_id;\n                     self.ast_id_map = db.ast_id_map(file_id);\n                     self.recursive_limit += 1;\n@@ -103,7 +128,7 @@ impl Expander {\n     }\n \n     pub(crate) fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {\n-        self.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n+        self.cfg_expander.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n         self.current_file_id = mark.file_id;\n         self.ast_id_map = mem::take(&mut mark.ast_id_map);\n         self.recursive_limit -= 1;\n@@ -115,15 +140,15 @@ impl Expander {\n     }\n \n     pub(crate) fn parse_attrs(&self, owner: &dyn ast::AttrsOwner) -> Attrs {\n-        Attrs::new(owner, &self.hygiene)\n+        self.cfg_expander.parse_attrs(owner)\n     }\n \n     pub(crate) fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n-        attrs.is_cfg_enabled(&self.cfg_options)\n+        self.cfg_expander.is_cfg_enabled(attrs)\n     }\n \n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        Path::from_src(path, &self.hygiene)\n+        Path::from_src(path, &self.cfg_expander.hygiene)\n     }\n \n     fn resolve_path_as_macro(&self, db: &dyn DefDatabase, path: &ModPath) -> Option<MacroDefId> {"}, {"sha": "98c74fe257b4bab593adbd5e0def01663cd4e4ea", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38c67e5c0d4297f45ab2b78a00b59f737796d160/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c67e5c0d4297f45ab2b78a00b59f737796d160/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=38c67e5c0d4297f45ab2b78a00b59f737796d160", "patch": "@@ -462,6 +462,14 @@ impl DefCollector<'_> {\n                 Some(ModuleDefId::AdtId(AdtId::EnumId(e))) => {\n                     tested_by!(glob_enum);\n                     // glob import from enum => just import all the variants\n+\n+                    // XXX: urgh, so this works by accident! Here, we look at\n+                    // the enum data, and, in theory, this might require us to\n+                    // look back at the crate_def_map, creating a cycle. For\n+                    // example, `enum E { crate::some_macro!(); }`. Luckely, the\n+                    // only kind of macro that is allowed inside enum is a\n+                    // `cfg_macro`, and we don't need to run name resolution for\n+                    // it, but this is sheer luck!\n                     let enum_data = self.db.enum_data(e);\n                     let resolutions = enum_data\n                         .variants"}]}