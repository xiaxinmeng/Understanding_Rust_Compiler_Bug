{"sha": "660fd4ab415e9543e4d677622aba309ca716ca12", "node_id": "C_kwDOAAsO6NoAKDY2MGZkNGFiNDE1ZTk1NDNlNGQ2Nzc2MjJhYmEzMDljYTcxNmNhMTI", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-04T09:00:53Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-04T09:00:53Z"}, "message": "Resolve only type params in type ns", "tree": {"sha": "8c78044e5bc27fe0e7fd5e22a366dbcc7c53a2f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c78044e5bc27fe0e7fd5e22a366dbcc7c53a2f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660fd4ab415e9543e4d677622aba309ca716ca12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660fd4ab415e9543e4d677622aba309ca716ca12", "html_url": "https://github.com/rust-lang/rust/commit/660fd4ab415e9543e4d677622aba309ca716ca12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660fd4ab415e9543e4d677622aba309ca716ca12/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa8749c44e1c91335002eb46d59b2a72e756bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa8749c44e1c91335002eb46d59b2a72e756bb3", "html_url": "https://github.com/rust-lang/rust/commit/4fa8749c44e1c91335002eb46d59b2a72e756bb3"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "2e0dbf82b77773e6129ee5e6687e9a79fa12fe64", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=660fd4ab415e9543e4d677622aba309ca716ca12", "patch": "@@ -70,7 +70,7 @@ impl PathResolution {\n             | PathResolution::Local(_)\n             | PathResolution::Macro(_)\n             | PathResolution::ConstParam(_) => None,\n-            PathResolution::TypeParam(param) => Some(TypeNs::GenericParam(param.merge().into())),\n+            PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n             PathResolution::AssocItem(AssocItem::Const(_) | AssocItem::Function(_)) => None,\n             PathResolution::AssocItem(AssocItem::TypeAlias(alias)) => {"}, {"sha": "c6462a2c78acdde526caf3724e30a82f41ad7691", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=660fd4ab415e9543e4d677622aba309ca716ca12", "patch": "@@ -34,7 +34,7 @@ use syntax::{\n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, BuiltinAttr, BuiltinType, Const, Field,\n     Function, Local, MacroDef, ModuleDef, Static, Struct, ToolModule, Trait, Type, TypeAlias,\n-    TypeOrConstParam, Variant,\n+    Variant,\n };\n use base_db::CrateId;\n \n@@ -609,10 +609,7 @@ fn resolve_hir_path_(\n \n         let res = match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n-            TypeNs::GenericParam(id) => match (TypeOrConstParam { id }).split(db) {\n-                either::Either::Left(x) => PathResolution::ConstParam(x),\n-                either::Either::Right(x) => PathResolution::TypeParam(x),\n-            },\n+            TypeNs::GenericParam(id) => PathResolution::TypeParam(id.into()),\n             TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => {\n                 PathResolution::Def(Adt::from(it).into())\n             }\n@@ -706,10 +703,7 @@ fn resolve_hir_path_qualifier(\n \n     resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n         TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n-        TypeNs::GenericParam(id) => match (TypeOrConstParam { id }).split(db) {\n-            either::Either::Left(x) => PathResolution::ConstParam(x),\n-            either::Either::Right(x) => PathResolution::TypeParam(x),\n-        },\n+        TypeNs::GenericParam(id) => PathResolution::TypeParam(id.into()),\n         TypeNs::AdtSelfType(it) | TypeNs::AdtId(it) => PathResolution::Def(Adt::from(it).into()),\n         TypeNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n         TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),"}, {"sha": "b5a11a1ba55ef38b5979151c5782441c3c0d4f3c", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=660fd4ab415e9543e4d677622aba309ca716ca12", "patch": "@@ -365,6 +365,13 @@ impl GenericParams {\n         where_predicates.shrink_to_fit();\n     }\n \n+    pub fn find_type_by_name(&self, name: &Name) -> Option<LocalTypeOrConstParamId> {\n+        self.types\n+            .iter()\n+            .filter(|x| matches!(x.1, TypeOrConstParamData::TypeParamData(_)))\n+            .find_map(|(id, p)| if p.name().as_ref() == Some(&name) { Some(id) } else { None })\n+    }\n+\n     pub fn find_type_or_const_by_name(&self, name: &Name) -> Option<LocalTypeOrConstParamId> {\n         self.types\n             .iter()"}, {"sha": "d5e62f226a037cc62a962c69e9beaaf1d8b4429f", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=660fd4ab415e9543e4d677622aba309ca716ca12", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     AdtId, AssocItemId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, ExternBlockId,\n     FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, ItemContainerId, LifetimeParamId,\n     LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n-    TypeOrConstParamId, VariantId,\n+    TypeOrConstParamId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -68,7 +68,7 @@ enum Scope {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum TypeNs {\n     SelfType(ImplId),\n-    GenericParam(TypeOrConstParamId),\n+    GenericParam(TypeParamId),\n     AdtId(AdtId),\n     AdtSelfType(AdtId),\n     // Yup, enum variants are added to the types ns, but any usage of variant as\n@@ -192,7 +192,7 @@ impl Resolver {\n                 Scope::GenericParams { .. } | Scope::ImplDefScope(_) if skip_to_mod => continue,\n \n                 Scope::GenericParams { params, def } => {\n-                    if let Some(local_id) = params.find_type_or_const_by_name(first_name) {\n+                    if let Some(local_id) = params.find_type_by_name(first_name) {\n                         let idx = if path.segments().len() == 1 { None } else { Some(1) };\n                         return Some((\n                             TypeNs::GenericParam("}, {"sha": "3147b6f330bd21d3833f6228f9e2c8b9c647b125", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660fd4ab415e9543e4d677622aba309ca716ca12/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=660fd4ab415e9543e4d677622aba309ca716ca12", "patch": "@@ -372,7 +372,7 @@ impl<'a> TyLoweringContext<'a> {\n                 _ => return None,\n             };\n         match resolution {\n-            TypeNs::GenericParam(param_id) => Some(param_id),\n+            TypeNs::GenericParam(param_id) => Some(param_id.into()),\n             _ => None,\n         }\n     }\n@@ -991,9 +991,9 @@ fn named_associated_type_shorthand_candidates<R>(\n                 return res;\n             }\n             // Handle `Self::Type` referring to own associated type in trait definitions\n-            if let GenericDefId::TraitId(trait_id) = param_id.parent {\n+            if let GenericDefId::TraitId(trait_id) = param_id.parent() {\n                 let generics = generics(db.upcast(), trait_id.into());\n-                if generics.params.types[param_id.local_id].is_trait_self() {\n+                if generics.params.types[param_id.local_id()].is_trait_self() {\n                     let trait_ref = TyBuilder::trait_ref(db, trait_id)\n                         .fill_with_bound_vars(DebruijnIndex::INNERMOST, 0)\n                         .build();"}]}