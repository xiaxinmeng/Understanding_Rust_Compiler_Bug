{"sha": "29f8cea5fd999629b3ca5e46e4150836c4233f05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZjhjZWE1ZmQ5OTk2MjliM2NhNWU0NmU0MTUwODM2YzQyMzNmMDU=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-22T05:46:32Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-22T05:46:32Z"}, "message": "Use existing match_var function", "tree": {"sha": "84fb5d3ec41749ce0f90ca3ed5a53161251ad54b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84fb5d3ec41749ce0f90ca3ed5a53161251ad54b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f8cea5fd999629b3ca5e46e4150836c4233f05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f8cea5fd999629b3ca5e46e4150836c4233f05", "html_url": "https://github.com/rust-lang/rust/commit/29f8cea5fd999629b3ca5e46e4150836c4233f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f8cea5fd999629b3ca5e46e4150836c4233f05/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2132e5c58c5b9493fdfa28dc70fd6c7e3fe47bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2132e5c58c5b9493fdfa28dc70fd6c7e3fe47bfa", "html_url": "https://github.com/rust-lang/rust/commit/2132e5c58c5b9493fdfa28dc70fd6c7e3fe47bfa"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "550b9f16e5a14239ac38ae579779f50a02c4a64c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29f8cea5fd999629b3ca5e46e4150836c4233f05/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f8cea5fd999629b3ca5e46e4150836c4233f05/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=29f8cea5fd999629b3ca5e46e4150836c4233f05", "patch": "@@ -12,8 +12,8 @@ use syntax::ast;\n use syntax::codemap::{Span, BytePos};\n use utils::{get_arg_name, get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, is_self, is_self_ty,\n             iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n-            match_type, method_chain_args, return_ty, remove_blocks, same_tys, single_segment_path, snippet, span_lint,\n-            span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n+            match_type, method_chain_args, match_var, return_ty, remove_blocks, same_tys, single_segment_path, snippet,\n+            span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n use utils::paths;\n use utils::sugg;\n use utils::const_to_u64;\n@@ -1141,13 +1141,6 @@ fn lint_unnecessary_fold(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::E\n     assert!(fold_args.len() == 3,\n         \"Expected fold_args to have three entries - the receiver, the initial value and the closure\");\n \n-    fn is_exactly_closure_param(expr: &hir::Expr, closure_param: ast::Name) -> bool {\n-        if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = expr.node {\n-            return path.segments.len() == 1 && &path.segments[0].name == &closure_param;\n-        }\n-        false\n-    }\n-\n     fn check_fold_with_op(\n         cx: &LateContext,\n         fold_args: &[hir::Expr],\n@@ -1169,8 +1162,8 @@ fn lint_unnecessary_fold(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::E\n             if let Some(first_arg_ident) = get_arg_name(&closure_body.arguments[0].pat);\n             if let Some(second_arg_ident) = get_arg_name(&closure_body.arguments[1].pat);\n \n-            if is_exactly_closure_param(&*left_expr, first_arg_ident);\n-            if replacement_has_args || is_exactly_closure_param(&*right_expr, second_arg_ident);\n+            if match_var(&*left_expr, first_arg_ident);\n+            if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n \n             then {\n                 // Span containing `.fold(...)`"}]}