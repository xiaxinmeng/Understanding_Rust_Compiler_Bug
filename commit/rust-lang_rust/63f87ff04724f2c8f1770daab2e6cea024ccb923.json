{"sha": "63f87ff04724f2c8f1770daab2e6cea024ccb923", "node_id": "C_kwDOAAsO6NoAKDYzZjg3ZmYwNDcyNGYyYzhmMTc3MGRhYWIyZTZjZWEwMjRjY2I5MjM", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-11T16:48:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-11T16:48:27Z"}, "message": "Deprioritize already-imported names", "tree": {"sha": "90f1e670d21ee9423008148fae85fd7d48c29545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f1e670d21ee9423008148fae85fd7d48c29545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f87ff04724f2c8f1770daab2e6cea024ccb923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f87ff04724f2c8f1770daab2e6cea024ccb923", "html_url": "https://github.com/rust-lang/rust/commit/63f87ff04724f2c8f1770daab2e6cea024ccb923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f87ff04724f2c8f1770daab2e6cea024ccb923/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "html_url": "https://github.com/rust-lang/rust/commit/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce"}], "stats": {"total": 168, "additions": 119, "deletions": 49}, "files": [{"sha": "b8a904a3a01bf2e98c2fd2556219c61fe06d2043", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -126,7 +126,7 @@ impl Completions {\n             cov_mark::hit!(qualified_path_doc_hidden);\n             return;\n         }\n-        self.add(render_resolution(RenderContext::new(ctx), local_name, resolution));\n+        self.add(render_resolution(RenderContext::new(ctx), local_name, resolution).build());\n     }\n \n     pub(crate) fn add_resolution_simple(\n@@ -138,7 +138,7 @@ impl Completions {\n         if ctx.is_scope_def_hidden(resolution) {\n             return;\n         }\n-        self.add(render_resolution_simple(RenderContext::new(ctx), local_name, resolution));\n+        self.add(render_resolution_simple(RenderContext::new(ctx), local_name, resolution).build());\n     }\n \n     pub(crate) fn add_macro(\n@@ -152,11 +152,14 @@ impl Completions {\n             Visible::Editable => true,\n             Visible::No => return,\n         };\n-        self.add(render_macro(\n-            RenderContext::new(ctx).private_editable(is_private_editable),\n-            local_name,\n-            mac,\n-        ));\n+        self.add(\n+            render_macro(\n+                RenderContext::new(ctx).private_editable(is_private_editable),\n+                local_name,\n+                mac,\n+            )\n+            .build(),\n+        );\n     }\n \n     pub(crate) fn add_function(\n@@ -170,11 +173,14 @@ impl Completions {\n             Visible::Editable => true,\n             Visible::No => return,\n         };\n-        self.add(render_fn(\n-            RenderContext::new(ctx).private_editable(is_private_editable),\n-            local_name,\n-            func,\n-        ));\n+        self.add(\n+            render_fn(\n+                RenderContext::new(ctx).private_editable(is_private_editable),\n+                local_name,\n+                func,\n+            )\n+            .build(),\n+        );\n     }\n \n     pub(crate) fn add_method(\n@@ -189,12 +195,15 @@ impl Completions {\n             Visible::Editable => true,\n             Visible::No => return,\n         };\n-        self.add(render_method(\n-            RenderContext::new(ctx).private_editable(is_private_editable),\n-            receiver,\n-            local_name,\n-            func,\n-        ));\n+        self.add(\n+            render_method(\n+                RenderContext::new(ctx).private_editable(is_private_editable),\n+                receiver,\n+                local_name,\n+                func,\n+            )\n+            .build(),\n+        );\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, konst: hir::Const) {\n@@ -235,7 +244,11 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        self.add_opt(render_variant_lit(RenderContext::new(ctx), None, variant, Some(path)));\n+        if let Some(builder) =\n+            render_variant_lit(RenderContext::new(ctx), None, variant, Some(path))\n+        {\n+            self.add(builder.build());\n+        }\n     }\n \n     pub(crate) fn add_enum_variant(\n@@ -244,7 +257,11 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        self.add_opt(render_variant_lit(RenderContext::new(ctx), local_name, variant, None));\n+        if let Some(builder) =\n+            render_variant_lit(RenderContext::new(ctx), local_name, variant, None)\n+        {\n+            self.add(builder.build());\n+        }\n     }\n \n     pub(crate) fn add_field(\n@@ -275,8 +292,11 @@ impl Completions {\n         path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_struct_literal(RenderContext::new(ctx), strukt, path, local_name);\n-        self.add_opt(item);\n+        if let Some(builder) =\n+            render_struct_literal(RenderContext::new(ctx), strukt, path, local_name)\n+        {\n+            self.add(builder.build());\n+        }\n     }\n \n     pub(crate) fn add_union_literal("}, {"sha": "76d708ae51a71ae5d7b8507feab67ca24a6d3528", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -205,7 +205,8 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n                     &user_input_lowercased,\n                 )\n             })\n-            .filter_map(|import| render_resolution_with_import(RenderContext::new(ctx), import)),\n+            .filter_map(|import| render_resolution_with_import(RenderContext::new(ctx), import))\n+            .map(|builder| builder.build()),\n     );\n     Some(())\n }"}, {"sha": "3f757f9816143dd7dbd5173edb99cb996b2a324b", "filename": "crates/ide_completion/src/completions/use_.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -1,11 +1,13 @@\n //! Completion for use trees\n \n use hir::ScopeDef;\n+use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n     context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n-    Completions,\n+    item::Builder,\n+    CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -39,6 +41,22 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                 None => return,\n             };\n \n+            let mut already_imported_names = FxHashSet::default();\n+            if let Some(list) = ctx.token.ancestors().find_map(ast::UseTreeList::cast) {\n+                let use_tree = list.parent_use_tree();\n+                if use_tree.path().as_ref() == Some(path) {\n+                    for tree in list.use_trees() {\n+                        if tree.is_simple_path() {\n+                            if let Some(name) =\n+                                tree.path().and_then(|path| path.as_single_name_ref())\n+                            {\n+                                already_imported_names.insert(name.to_string());\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n             match resolution {\n                 hir::PathResolution::Def(hir::ModuleDef::Module(module)) => {\n                     let module_scope = module.scope(ctx.db, Some(ctx.module));\n@@ -50,6 +68,9 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                         )\n                     };\n                     for (name, def) in module_scope {\n+                        let is_name_already_imported =\n+                            already_imported_names.contains(name.as_text().unwrap().as_str());\n+\n                         let add_resolution = match def {\n                             ScopeDef::Unknown if unknown_is_current(&name) => {\n                                 // for `use self::foo$0`, don't suggest `foo` as a completion\n@@ -61,7 +82,12 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                         };\n \n                         if add_resolution {\n-                            acc.add_resolution(ctx, name, def);\n+                            let mut builder = Builder::from_resolution(ctx, name, def);\n+                            builder.set_relevance(CompletionRelevance {\n+                                is_name_already_imported,\n+                                ..Default::default()\n+                            });\n+                            acc.add(builder.build());\n                         }\n                     }\n                 }"}, {"sha": "849ce0b40991657ee8a5584e2b1faf3ccaeb6e56", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -9,6 +9,11 @@ use stdx::{impl_from, never};\n use syntax::{SmolStr, TextRange};\n use text_edit::TextEdit;\n \n+use crate::{\n+    context::CompletionContext,\n+    render::{render_resolution, RenderContext},\n+};\n+\n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n /// `CompletionItem`, use `new` method and the `Builder` struct.\n@@ -134,6 +139,8 @@ pub struct CompletionRelevance {\n     pub is_local: bool,\n     /// This is set when trait items are completed in an impl of that trait.\n     pub is_item_from_trait: bool,\n+    /// This is set when an import is suggested whose name is already imported.\n+    pub is_name_already_imported: bool,\n     /// Set for method completions of the `core::ops` and `core::cmp` family.\n     pub is_op_method: bool,\n     /// Set for item completions that are private but in the workspace.\n@@ -200,6 +207,7 @@ impl CompletionRelevance {\n             type_match,\n             is_local,\n             is_item_from_trait,\n+            is_name_already_imported,\n             is_op_method,\n             is_private_editable,\n             postfix_match,\n@@ -214,6 +222,10 @@ impl CompletionRelevance {\n         if !is_op_method {\n             score += 10;\n         }\n+        // lower rank for conflicting import names\n+        if !is_name_already_imported {\n+            score += 1;\n+        }\n         if exact_name_match {\n             score += 10;\n         }\n@@ -413,6 +425,14 @@ pub(crate) struct Builder {\n }\n \n impl Builder {\n+    pub(crate) fn from_resolution(\n+        ctx: &CompletionContext,\n+        local_name: hir::Name,\n+        resolution: hir::ScopeDef,\n+    ) -> Self {\n+        render_resolution(RenderContext::new(ctx), local_name, resolution)\n+    }\n+\n     pub(crate) fn build(self) -> CompletionItem {\n         let _p = profile::span(\"item::Builder::build\");\n "}, {"sha": "810ef63ec39123aa037efd62fb41dc5ec52b65ad", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -18,7 +18,7 @@ use syntax::{SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n     context::{PathCompletionCtx, PathKind},\n-    item::CompletionRelevanceTypeMatch,\n+    item::{Builder, CompletionRelevanceTypeMatch},\n     render::{function::render_fn, literal::render_variant_lit, macro_::render_macro},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n };\n@@ -144,22 +144,22 @@ pub(crate) fn render_resolution(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n     resolution: ScopeDef,\n-) -> CompletionItem {\n+) -> Builder {\n     render_resolution_(ctx, local_name, None, resolution)\n }\n \n pub(crate) fn render_resolution_simple(\n     ctx: RenderContext<'_>,\n     local_name: hir::Name,\n     resolution: ScopeDef,\n-) -> CompletionItem {\n+) -> Builder {\n     render_resolution_simple_(ctx, local_name, None, resolution)\n }\n \n pub(crate) fn render_resolution_with_import(\n     ctx: RenderContext<'_>,\n     import_edit: LocatedImport,\n-) -> Option<CompletionItem> {\n+) -> Option<Builder> {\n     let resolution = ScopeDef::from(import_edit.original_item);\n     let local_name = match resolution {\n         ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n@@ -182,7 +182,7 @@ fn render_resolution_(\n     local_name: hir::Name,\n     import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n-) -> CompletionItem {\n+) -> Builder {\n     let _p = profile::span(\"render_resolution\");\n     use hir::ModuleDef::*;\n \n@@ -211,7 +211,7 @@ fn render_resolution_simple_(\n     local_name: hir::Name,\n     import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n-) -> CompletionItem {\n+) -> Builder {\n     let _p = profile::span(\"render_resolution\");\n     use hir::ModuleDef::*;\n \n@@ -292,7 +292,7 @@ fn render_resolution_simple_(\n     if let Some(import_to_add) = ctx.import_to_add {\n         item.add_import(import_to_add);\n     }\n-    item.build()\n+    item\n }\n \n fn scope_def_docs(db: &RootDatabase, resolution: ScopeDef) -> Option<hir::Documentation> {\n@@ -625,6 +625,7 @@ fn main() { let _: m::Spam = S$0 }\n                             ),\n                             is_local: false,\n                             is_item_from_trait: false,\n+                            is_name_already_imported: false,\n                             is_op_method: false,\n                             is_private_editable: false,\n                             postfix_match: None,\n@@ -648,6 +649,7 @@ fn main() { let _: m::Spam = S$0 }\n                             ),\n                             is_local: false,\n                             is_item_from_trait: false,\n+                            is_name_already_imported: false,\n                             is_op_method: false,\n                             is_private_editable: false,\n                             postfix_match: None,\n@@ -737,6 +739,7 @@ fn foo() { A { the$0 } }\n                             ),\n                             is_local: false,\n                             is_item_from_trait: false,\n+                            is_name_already_imported: false,\n                             is_op_method: false,\n                             is_private_editable: false,\n                             postfix_match: None,"}, {"sha": "38520e1832fcf11f280f3c0ea0c312e97333ae3d", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn render_fn(\n     ctx: RenderContext<'_>,\n     local_name: Option<hir::Name>,\n     func: hir::Function,\n-) -> CompletionItem {\n+) -> Builder {\n     let _p = profile::span(\"render_fn\");\n     render(ctx, local_name, func, FuncKind::Function)\n }\n@@ -32,7 +32,7 @@ pub(crate) fn render_method(\n     receiver: Option<hir::Name>,\n     local_name: Option<hir::Name>,\n     func: hir::Function,\n-) -> CompletionItem {\n+) -> Builder {\n     let _p = profile::span(\"render_method\");\n     render(ctx, local_name, func, FuncKind::Method(receiver))\n }\n@@ -42,7 +42,7 @@ fn render(\n     local_name: Option<hir::Name>,\n     func: hir::Function,\n     func_kind: FuncKind,\n-) -> CompletionItem {\n+) -> Builder {\n     let db = completion.db;\n \n     let name = local_name.unwrap_or_else(|| func.name(db));\n@@ -107,7 +107,7 @@ fn render(\n             }\n         }\n     }\n-    item.build()\n+    item\n }\n \n pub(super) fn add_call_parens<'b>("}, {"sha": "f1773137feddcb9a0b725d39717f94183fa5ca72", "filename": "crates/ide_completion/src/render/literal.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fliteral.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -5,7 +5,7 @@ use ide_db::SymbolKind;\n \n use crate::{\n     context::{CompletionContext, PathCompletionCtx},\n-    item::CompletionItem,\n+    item::{Builder, CompletionItem},\n     render::{\n         compute_ref_match, compute_type_match,\n         variant::{\n@@ -22,7 +22,7 @@ pub(crate) fn render_variant_lit(\n     local_name: Option<hir::Name>,\n     variant: hir::Variant,\n     path: Option<hir::ModPath>,\n-) -> Option<CompletionItem> {\n+) -> Option<Builder> {\n     let _p = profile::span(\"render_enum_variant\");\n     let db = ctx.db();\n \n@@ -35,7 +35,7 @@ pub(crate) fn render_struct_literal(\n     strukt: hir::Struct,\n     path: Option<hir::ModPath>,\n     local_name: Option<hir::Name>,\n-) -> Option<CompletionItem> {\n+) -> Option<Builder> {\n     let _p = profile::span(\"render_struct_literal\");\n     let db = ctx.db();\n \n@@ -48,7 +48,7 @@ fn render(\n     thing: Variant,\n     name: hir::Name,\n     path: Option<hir::ModPath>,\n-) -> Option<CompletionItem> {\n+) -> Option<Builder> {\n     let db = completion.db;\n     let kind = thing.kind(db);\n     let has_call_parens =\n@@ -112,7 +112,7 @@ fn render(\n     if let Some(import_to_add) = ctx.import_to_add {\n         item.add_import(import_to_add);\n     }\n-    Some(item.build())\n+    Some(item)\n }\n \n #[derive(Clone, Copy)]"}, {"sha": "ba18e5d2165b7abc91368f13855b508296f3dbbe", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f87ff04724f2c8f1770daab2e6cea024ccb923/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=63f87ff04724f2c8f1770daab2e6cea024ccb923", "patch": "@@ -4,13 +4,13 @@ use hir::{Documentation, HirDisplay};\n use ide_db::SymbolKind;\n use syntax::SmolStr;\n \n-use crate::{context::PathKind, item::CompletionItem, render::RenderContext};\n+use crate::{\n+    context::PathKind,\n+    item::{Builder, CompletionItem},\n+    render::RenderContext,\n+};\n \n-pub(crate) fn render_macro(\n-    ctx: RenderContext<'_>,\n-    name: hir::Name,\n-    macro_: hir::Macro,\n-) -> CompletionItem {\n+pub(crate) fn render_macro(ctx: RenderContext<'_>, name: hir::Name, macro_: hir::Macro) -> Builder {\n     let _p = profile::span(\"render_macro\");\n     render(ctx, name, macro_)\n }\n@@ -19,7 +19,7 @@ fn render(\n     ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     name: hir::Name,\n     macro_: hir::Macro,\n-) -> CompletionItem {\n+) -> Builder {\n     let source_range = if completion.is_immediately_after_macro_bang() {\n         cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n         completion.token.parent().map_or_else(|| ctx.source_range(), |it| it.text_range())\n@@ -66,7 +66,7 @@ fn render(\n         item.add_import(import_to_add);\n     }\n \n-    item.build()\n+    item\n }\n \n fn label("}]}