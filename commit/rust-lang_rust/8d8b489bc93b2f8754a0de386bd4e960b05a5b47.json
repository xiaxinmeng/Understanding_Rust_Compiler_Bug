{"sha": "8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOGI0ODliYzkzYjJmODc1NGEwZGUzODZiZDRlOTYwYjA1YTViNDc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-07-31T18:23:12Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:38Z"}, "message": "Add intrinsics for SIMD arithmetic.", "tree": {"sha": "cfa8a3ea71868dee34bd1855a0e1da21c5b45237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa8a3ea71868dee34bd1855a0e1da21c5b45237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "html_url": "https://github.com/rust-lang/rust/commit/8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d8b489bc93b2f8754a0de386bd4e960b05a5b47/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecb3df5a91b71e31e242737d9203b2798bd489de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb3df5a91b71e31e242737d9203b2798bd489de", "html_url": "https://github.com/rust-lang/rust/commit/ecb3df5a91b71e31e242737d9203b2798bd489de"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "a31668ad212325798a15182561eeebd72e158dcb", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8d8b489bc93b2f8754a0de386bd4e960b05a5b47/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8b489bc93b2f8754a0de386bd4e960b05a5b47/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "patch": "@@ -1496,5 +1496,35 @@ fn generic_simd_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n         require!(false, \"SIMD cast intrinsic monomorphised with incompatible cast\");\n     }\n+    macro_rules! arith {\n+        ($($name: ident: $($($p: ident),* => $call: expr),*;)*) => {\n+            $(\n+                if name == stringify!($name) {\n+                    let in_ = arg_tys[0].simd_type(tcx);\n+                    match in_.sty {\n+                        $(\n+                            $(ty::$p(_))|* => {\n+                                return $call(bcx, llargs[0], llargs[1], call_debug_location)\n+                            }\n+                            )*\n+                        _ => {},\n+                    }\n+                    require!(false,\n+                             \"{} intrinsic monomorphised with invalid type\",\n+                             name)\n+                })*\n+        }\n+    }\n+    arith! {\n+        simd_add: TyUint, TyInt => Add, TyFloat => FAdd;\n+        simd_sub: TyUint, TyInt => Sub, TyFloat => FSub;\n+        simd_mul: TyUint, TyInt => Mul, TyFloat => FMul;\n+        simd_div: TyFloat => FDiv;\n+        simd_shl: TyUint, TyInt => Shl;\n+        simd_shr: TyUint => LShr, TyInt => AShr;\n+        simd_and: TyUint, TyInt => And;\n+        simd_or: TyUint, TyInt => Or;\n+        simd_xor: TyUint, TyInt => Xor;\n+    }\n     bcx.sess().span_bug(call_info.span, \"unknown SIMD intrinsic\");\n }"}, {"sha": "2f19d4d9ec23d8808367200c9283352c8b3509fa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d8b489bc93b2f8754a0de386bd4e960b05a5b47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8b489bc93b2f8754a0de386bd4e960b05a5b47/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "patch": "@@ -5344,6 +5344,11 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"simd_eq\" | \"simd_ne\" | \"simd_lt\" | \"simd_le\" | \"simd_gt\" | \"simd_ge\" => {\n                 (2, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 1))\n             }\n+            \"simd_add\" | \"simd_sub\" | \"simd_mul\" |\n+            \"simd_div\" | \"simd_shl\" | \"simd_shr\" |\n+            \"simd_and\" | \"simd_or\" | \"simd_xor\" => {\n+                (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0))\n+            }\n             \"simd_insert\" => (2, vec![param(ccx, 0), tcx.types.u32, param(ccx, 1)], param(ccx, 0)),\n             \"simd_extract\" => (2, vec![param(ccx, 0), tcx.types.u32], param(ccx, 1)),\n             \"simd_cast\" => (2, vec![param(ccx, 0)], param(ccx, 1)),"}]}