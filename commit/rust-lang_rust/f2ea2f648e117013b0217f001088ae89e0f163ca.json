{"sha": "f2ea2f648e117013b0217f001088ae89e0f163ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZWEyZjY0OGUxMTcwMTNiMDIxN2YwMDEwODhhZTg5ZTBmMTYzY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-08T02:21:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-08T02:21:55Z"}, "message": "Auto merge of #77729 - petrochenkov:mergetarg, r=Mark-Simulacrum\n\nrustc_target: Move some target options from `Target` to `TargetOptions`\n\nThe only reason for `Target` to `TargetOptions` to be separate structures is that options in `TargetOptions` have reasonable defaults and options in `Target` don't.\n(Otherwise all the options logically belong to a single `Target` struct.)\n\nThis PR moves a number of options with reasonable defaults from `Target` to `TargetOptions`, so they no longer needs to be specified explicitly for majority of the targets.\nThe move also allows to inherit the options from `rustc_target/src/spec/*_base.rs` files in a nicer way.\nI didn't change any specific option values here.\n\nThe moved options are `target_c_int_width` (defaults to `\"32\"`), `target_endian` (defaults to `\"little\"`), `target_os` (defaults to `\"none\"`), `target_env` (defaults to `\"\"`), `target_vendor` (defaults to `\"unknown\"`) and `linker_flavor` (defaults to `LinkerFlavor::Gcc`).\n\nNext steps (in later PRs):\n- Find a way to merge `TargetOptions` into `Target`\n- If not, always access `TargetOptions` fields through `Deref` making it a part of `Target` at least logically (`session.target.target.options.foo` -> `session.target.target.foo`)\n- ~Eliminate `session::config::Config` and use `Target` instead (`session.target.target.foo` -> `session.target.foo`)~ Done in https://github.com/rust-lang/rust/pull/77943.\n- Avoid tautologies in option names (`target.target_os` -> `target.os`)\n- Resolve _ https://github.com/rust-lang/rust/issues/77730 (rustc_target: The differences between `target_os = \"none\"` and `target_os = \"unknown\"`, and `target_vendor = \"unknown\"` and `target_vendor = \"\"` are unclear) noticed during implementation of this PR.", "tree": {"sha": "b7de93bef167297744953525a7fa9a600dbf488b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7de93bef167297744953525a7fa9a600dbf488b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ea2f648e117013b0217f001088ae89e0f163ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ea2f648e117013b0217f001088ae89e0f163ca", "html_url": "https://github.com/rust-lang/rust/commit/f2ea2f648e117013b0217f001088ae89e0f163ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ea2f648e117013b0217f001088ae89e0f163ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "771cc7ffc35b832bf35fecb22860eabb70c91da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/771cc7ffc35b832bf35fecb22860eabb70c91da5", "html_url": "https://github.com/rust-lang/rust/commit/771cc7ffc35b832bf35fecb22860eabb70c91da5"}, {"sha": "c0c0597e099a6c6b1f3b47e839a630c5bc97aab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c0597e099a6c6b1f3b47e839a630c5bc97aab9", "html_url": "https://github.com/rust-lang/rust/commit/c0c0597e099a6c6b1f3b47e839a630c5bc97aab9"}], "stats": {"total": 1383, "additions": 322, "deletions": 1061}, "files": [{"sha": "098651614d0c4e28668d32e91f8e0e0fdfb071d5", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts();\n+    let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"apple-a12\".to_string();\n     base.max_atomic_width = Some(128);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), \"arm64\".to_string()]);\n@@ -16,15 +16,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target,\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: arch.to_string(),\n-        target_os: \"macos\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "2218c6c6da7a8c600eb3669c61e8c03a25265dc8", "filename": "compiler/rustc_target/src/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_ios.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::Arm64);\n+    let base = opts(\"ios\", Arch::Arm64);\n     Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             eliminate_frame_pointer: false,"}, {"sha": "a83de77dc2a9127f30d2b92e444f0c299cc2cca4", "filename": "compiler/rustc_target/src/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_tvos.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::Arm64);\n+    let base = opts(\"tvos\", Arch::Arm64);\n     Target {\n         llvm_target: \"arm64-apple-tvos\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"tvos\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".to_string(),\n             eliminate_frame_pointer: false,"}, {"sha": "1252741f9797dc6b7fb90c9279c792f88c0d3aab", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-fuchsia\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"fuchsia\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "fa6108df206b4021f45fb7d764f90a1610def2cf", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // See https://developer.android.com/ndk/guides/abis.html#arm64-v8a\n // for target ABI requirements.\n@@ -11,15 +11,9 @@ pub fn target() -> Target {\n     base.features = \"+neon,+fp-armv8\".to_string();\n     Target {\n         llvm_target: \"aarch64-linux-android\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"android\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "1369d9d079856a9c262be7e22b8bb3fbff1385ca", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n@@ -8,15 +8,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     }\n }"}, {"sha": "67f69b40e55cdefc74924db1aafdae42ef63b73e", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_cloudabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::cloudabi_base::opts();\n@@ -8,15 +8,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"aarch64-unknown-cloudabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"cloudabi\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "d48389d4a35c28e709c74029a37b6cf46d23085b", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-unknown-freebsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"freebsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "44beb2f6ad8d37686aef0469a3f388f486cac5f2", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-unknown-hermit\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"hermit\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n     }\n }"}, {"sha": "9d9698a440dce120bd3d0547945112973ab70f4a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_env: \"gnu\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}_mcount\".to_string(),"}, {"sha": "2dd703b66ffd781fda290bbf53a0d8adc19dfad4", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_env: \"musl\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}_mcount\".to_string(),"}, {"sha": "81e383ca5f1935cfd748625f3e2fc041ecd2ec7f", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n@@ -7,15 +7,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"aarch64-unknown-netbsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "1088807f2c290282c62da87be6c26ac3054f4eb2", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,6 +10,8 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),\n         executables: true,\n@@ -23,15 +25,9 @@ pub fn target() -> Target {\n     };\n     Target {\n         llvm_target: \"aarch64-unknown-none\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     }\n }"}, {"sha": "044c9fa1de8c74e1fc85803211cd917f067556c0", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,6 +10,8 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),\n         executables: true,\n@@ -23,15 +25,9 @@ pub fn target() -> Target {\n     };\n     Target {\n         llvm_target: \"aarch64-unknown-none\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     }\n }"}, {"sha": "83ba1ecd1d3e3e3e22dd3eabdc63005b4f40caf3", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n@@ -7,15 +7,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"aarch64-unknown-openbsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"openbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "b9c9325831d82e62475f2cfc234e3f04298f619c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-unknown-redox\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"redox\".to_string(),\n-        target_env: \"relibc\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "e0a81df2b0deca700eaeb1e2372a60827e43dec7", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n@@ -7,15 +7,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p:64:64-i32:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"uwp\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     }\n }"}, {"sha": "beb8ce30cc93ba5d164b8365d4451ac310ace329", "filename": "compiler/rustc_target/src/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "1bd5eb6988c2674be0218a3fd615f2fb8642d53a", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,6 +2,7 @@ use crate::spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n+    base.target_os = \"android\".to_string();\n     // Many of the symbols defined in compiler-rt are also defined in libgcc.\n     // Android's linker doesn't like that by default.\n     base.pre_link_args"}, {"sha": "045d9967f305a1be0cf8826bb9f6db9fdc3b9ac6", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,7 +2,7 @@ use std::env;\n \n use crate::spec::{LinkArgs, TargetOptions};\n \n-pub fn opts() -> TargetOptions {\n+pub fn opts(os: &str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n     // segfaulting at runtime when run on 10.6. Rust by default supports macOS\n@@ -17,6 +17,8 @@ pub fn opts() -> TargetOptions {\n     let version = macos_deployment_target();\n \n     TargetOptions {\n+        target_os: os.to_string(),\n+        target_vendor: \"apple\".to_string(),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,"}, {"sha": "092401f11462edb6465c6f215c1f3a1d0f67e248", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -31,14 +31,14 @@ fn link_env_remove(arch: Arch) -> Vec<String> {\n     }\n }\n \n-pub fn opts(arch: Arch) -> TargetOptions {\n+pub fn opts(os: &str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,\n         executables: true,\n         link_env_remove: link_env_remove(arch),\n         has_elf_tls: false,\n         eliminate_frame_pointer: false,\n-        ..super::apple_base::opts()\n+        ..super::apple_base::opts(os)\n     }\n }"}, {"sha": "43537569e7d4edba75630a5c7cca003f20698d61", "filename": "compiler/rustc_target/src/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n@@ -8,15 +8,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"android\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "dca0b1ec2e4f1822d0bb929ffa348014556b7732", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(64);\n     Target {\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),"}, {"sha": "ee71ae61972339387a9221efa04b0b0a51855d54", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(64);\n     Target {\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),"}, {"sha": "6938a0436020b982dc350cc4b87826ae670a0b90", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -12,15 +12,9 @@ pub fn target() -> Target {\n         // to determine the calling convention and float ABI, and it doesn't\n         // support the \"musleabi\" value.\n         llvm_target: \"arm-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "4adf3a338930795a9027a5d5ca813d7a8b0b2e1f", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -12,15 +12,9 @@ pub fn target() -> Target {\n         // uses it to determine the calling convention and float ABI, and it\n         // doesn't support the \"musleabihf\" value.\n         llvm_target: \"arm-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "7bfa5baecb5d8cd0141208b9d5291b556e1fc734", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -6,17 +6,14 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     Target {\n         llvm_target: \"armebv7r-unknown-none-eabi\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_vendor: String::new(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: RelocModel::Static,"}, {"sha": "7afc933a28ff9e58ba58c25343ea607475864401", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -6,17 +6,14 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     Target {\n         llvm_target: \"armebv7r-unknown-none-eabihf\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_vendor: String::new(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: RelocModel::Static,"}, {"sha": "c58fa7407b4092de4016371961f2e068553ccda4", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n         llvm_target: \"armv4t-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),"}, {"sha": "049a031398a89169cbffc95cc295ba9fbc6a3419", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n         llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),"}, {"sha": "77cf8bb76d30f5f4d8e2b110814b0ca93f211543", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::linux_musl_base::opts();\n@@ -7,15 +7,9 @@ pub fn target() -> Target {\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n         llvm_target: \"armv5te-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+soft-float,+strict-align\".to_string(),"}, {"sha": "981d615f6843eedfafedf9e23b02502126bd3c86", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,15 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::freebsd_base::opts();\n     Target {\n         llvm_target: \"armv6-unknown-freebsd-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"freebsd\".to_string(),\n-        target_env: \"gnueabihf\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n+            target_env: \"gnueabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),"}, {"sha": "8417a8f2801a6575e2b34a97b8d39cfb0619ee6d", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,21 +1,16 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.max_atomic_width = Some(64);\n     Target {\n         llvm_target: \"armv6-unknown-netbsdelf-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: \"eabihf\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n+            target_env: \"eabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             target_mcount: \"__mcount\".to_string(),"}, {"sha": "051a394657cbd466fd1125c53505a4378e492521", "filename": "compiler/rustc_target/src/spec/armv7_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_apple_ios.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::Armv7);\n+    let base = opts(\"ios\", Arch::Armv7);\n     Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "9aa378a8018fc68453bef4c24df7932955605136", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,15 +16,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"android\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "921640d0aa601df9531efe3b13c500be223cb4df", "filename": "compiler/rustc_target/src/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::cloudabi_base::opts();\n@@ -10,15 +10,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"armv7-unknown-cloudabi-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"cloudabi\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "88d5c86cfab02743b7a1e316f55873cff814b51c", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,15 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::freebsd_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-freebsd-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"freebsd\".to_string(),\n-        target_env: \"gnueabihf\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n+            target_env: \"gnueabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),"}, {"sha": "2a31bf4e332d2e86c24ef27925c707f4f205bd5b", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // This target is for glibc Linux on ARMv7 without thumb-mode, NEON or\n // hardfloat.\n@@ -7,15 +7,9 @@ pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),"}, {"sha": "d04400b79dfc1e34a354da0e7499be8ead5cb7cd", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // This target is for glibc Linux on ARMv7 without NEON or\n // thumb-mode. See the thumbv7neon variant for enabling both.\n@@ -7,15 +7,9 @@ pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort"}, {"sha": "ebbbd61fc11b00bffe250eaa11f2bb07ac1581c6", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // This target is for musl Linux on ARMv7 without thumb-mode, NEON or\n // hardfloat.\n@@ -12,15 +12,9 @@ pub fn target() -> Target {\n         // to determine the calling convention and float ABI, and it doesn't\n         // support the \"musleabi\" value.\n         llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),"}, {"sha": "ee603aa0684a1f28b9313bc377dc5aded38f27d6", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // This target is for musl Linux on ARMv7 without thumb-mode or NEON.\n \n@@ -9,15 +9,9 @@ pub fn target() -> Target {\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n         // target."}, {"sha": "09c531ebc8af37a2d4dab1d3e77996e34f3983eb", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,15 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::netbsd_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-netbsdelf-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: \"eabihf\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n+            target_env: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "6a43054067fe5ef2e4b33823457b1221fd93fd66", "filename": "compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,12 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let base = super::vxworks_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),"}, {"sha": "b6b34e27562865a08e9ff4d5c85cbadf5961ed9c", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -21,6 +21,8 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),\n         executables: true,\n@@ -34,15 +36,9 @@ pub fn target() -> Target {\n     };\n     Target {\n         llvm_target: \"armv7a-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     }\n }"}, {"sha": "8b9df361844d365ab7e37f035bc4f7f8c42770f7", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,6 +9,8 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),\n         executables: true,\n@@ -22,15 +24,9 @@ pub fn target() -> Target {\n     };\n     Target {\n         llvm_target: \"armv7a-none-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     }\n }"}, {"sha": "fdd74d276198ad557e214806f2fc814d96ce778e", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -6,17 +6,13 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     Target {\n         llvm_target: \"armv7r-unknown-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            target_vendor: String::new(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: RelocModel::Static,"}, {"sha": "7baafea90b9a8979b87ba8fc4e82d142e0f070b1", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -6,17 +6,13 @@ use crate::spec::{Target, TargetOptions};\n pub fn target() -> Target {\n     Target {\n         llvm_target: \"armv7r-unknown-none-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            target_vendor: String::new(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: RelocModel::Static,"}, {"sha": "be74136a2d67596a577d0142d9eb7bcdf568d574", "filename": "compiler/rustc_target/src/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7s_apple_ios.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::Armv7s);\n+    let base = opts(\"ios\", Arch::Armv7s);\n     Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "268af87cfe916dea4e9b70b8b44e2f1a434181e6", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,14 +8,10 @@ pub fn target(target_cpu: String) -> Target {\n         arch: \"avr\".to_string(),\n         data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".to_string(),\n         llvm_target: \"avr-unknown-unknown\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 16,\n-        linker_flavor: LinkerFlavor::Gcc,\n-        target_os: \"unknown\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        target_c_int_width: 16.to_string(),\n         options: TargetOptions {\n+            target_c_int_width: \"16\".to_string(),\n+            target_os: \"unknown\".to_string(),\n             cpu: target_cpu.clone(),\n             exe_suffix: \".elf\".to_string(),\n "}, {"sha": "0053adb85525090bb050e1d966ba7f1e38343774", "filename": "compiler/rustc_target/src/spec/cloudabi_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -12,6 +12,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"cloudabi\".to_string(),\n         executables: true,\n         target_family: None,\n         linker_is_gnu: true,"}, {"sha": "a182e37dd803ca3b8e35ad25c61520db7eed3a53", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,6 +16,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"dragonfly\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "2553511774363967f964a080bbcd06c4005b9604", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,6 +16,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"freebsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "97998eed8862be41c703892c6b1bbf4794151f43", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -20,6 +20,9 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"fuchsia\".to_string(),\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Ld,\n         dynamic_linking: true,"}, {"sha": "3d9dd44e7867ad5106a312a10861ec98a34fdf93", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,6 +2,7 @@ use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n+        target_os: \"haiku\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: false,"}, {"sha": "2953646afd0357c71ed74f9ca67daa488e3840e7", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,6 +9,8 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"hermit\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,\n         has_elf_tls: true,"}, {"sha": "7d06cbd62f595afc826479754530e27aa98714cd", "filename": "compiler/rustc_target/src/spec/hermit_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,6 +9,8 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"hermit\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         disable_redzone: true,\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,"}, {"sha": "73d5e2057f95564783edfe5f47d4e49f0fd3ac89", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, Target};\n+use crate::spec::{LinkArgs, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -19,9 +19,7 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: concat!(\n             \"e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32\",\n             \":32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32\",\n@@ -30,10 +28,6 @@ pub fn target() -> Target {\n         )\n         .to_string(),\n         arch: \"hexagon\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "302306ee57990a2d1cd1d6eb6b318544d0a1db60", "filename": "compiler/rustc_target/src/spec/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi386_apple_ios.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,21 +1,15 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::I386);\n+    let base = opts(\"ios\", Arch::I386);\n     Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n     }\n }"}, {"sha": "ac295aa3587c384154f566a78aae2c7e636d8f87", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts();\n+    let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n@@ -17,17 +17,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target,\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"macos\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "52059b930d134b8b9e8aa0549f15a2f064ab2e7c", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n // See https://developer.android.com/ndk/guides/abis.html#x86\n // for target ABI requirements.\n@@ -15,17 +15,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-linux-android\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"android\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "4979a5b3bc8485e331530f60ee69655d5419abcb", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -18,17 +18,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "e7a5643eaaa2406d304260314571179974a4257a", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -22,17 +22,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     }\n }"}, {"sha": "0cdb9f9de56c446932c98bffc9c38fbe2af2713e", "filename": "compiler/rustc_target/src/spec/i686_unknown_cloudabi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_cloudabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,17 +10,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-cloudabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"cloudabi\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "fc1c8607d654cf9e3d96a6eec0f50246eb98da7b", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -11,17 +11,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-freebsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"freebsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "22c8ba547531564de58608d57fb14871d994d9a6", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,17 +9,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-haiku\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"haiku\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "62b02d841c21dbdeb226a3b7c34393aca9d00f40", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,17 +9,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "1673b2a1802453eebceaa063212b9731d264cc60", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -24,17 +24,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "2568fabfb0509271d9d3daa83856a727bf417a2e", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,17 +9,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-netbsdelf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "87642efdee8f7eb989947f0ac087a6fd4e07d4f1", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,17 +10,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-openbsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"openbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "5af3a6b41e2cbd49e879300a0c6fc22fa0aad1a3", "filename": "compiler/rustc_target/src/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_uefi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,7 +5,7 @@\n // The cdecl ABI is used. It differs from the stdcall or fastcall ABI.\n // \"i686-unknown-windows\" is used to get the minimal subset of windows-specific features.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::uefi_msvc_base::opts();\n@@ -78,17 +78,11 @@ pub fn target() -> Target {\n     // remove -gnu and use the default one.\n     Target {\n         llvm_target: \"i686-unknown-windows-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n             .to_string(),\n-        target_os: \"uefi\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"x86\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n \n         options: base,\n     }"}, {"sha": "a3de93efb7820b3ce599508985b5afb0eaf4eb5a", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -17,17 +17,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"uwp\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "ce6200be81fd48fc02dd5c335005254753d10173", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n@@ -8,17 +8,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:32-n8:16:32-a:0:32-S32\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"uwp\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     }\n }"}, {"sha": "c0825358cabbcc6ab19ce1cfa879603113314236", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,17 +9,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"i686-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "625f7b18b2511926ba0b2511e1de4e1f28b7e4ce", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,6 +16,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"illumos\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,"}, {"sha": "6d1e610d0e96512319fe41ac226c6a6d37487689", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -17,6 +17,9 @@ pub fn opts() -> TargetOptions {\n     args.insert(LinkerFlavor::Gcc, vec![]);\n \n     TargetOptions {\n+        target_os: \"l4re\".to_string(),\n+        target_env: \"uclibc\".to_string(),\n+        linker_flavor: LinkerFlavor::Ld,\n         executables: true,\n         has_elf_tls: false,\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "b3a850591fd0764c04ea123c6d61f4ae38e07dc9", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -19,6 +19,8 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "9c883f9a188f9381ad85977e1c46d258e24f03d6", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,6 +8,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_env: \"gnu\".to_string(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         stack_probes: true,"}, {"sha": "3a44d3326eba6669ccba64a5d0f8f3f596fbcd15", "filename": "compiler/rustc_target/src/spec/linux_musl_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -4,6 +4,7 @@ use crate::spec::TargetOptions;\n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n \n+    base.target_env = \"musl\".to_string();\n     base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();\n     base.post_link_objects_fallback = crt_objects::post_musl_fallback();\n     base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);"}, {"sha": "ce7c79c16446d7e2ed17e16b8e8b8e92c247226b", "filename": "compiler/rustc_target/src/spec/linux_uclibc_base.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -0,0 +1,5 @@\n+use crate::spec::TargetOptions;\n+\n+pub fn opts() -> TargetOptions {\n+    TargetOptions { target_env: \"uclibc\".to_string(), ..super::linux_base::opts() }\n+}"}, {"sha": "f0a266a63af94c3020f4812734b4a10ddfa2aaa5", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mips64-unknown-linux-gnuabi64\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),"}, {"sha": "805a965bc0fe7b076b333d4c24179425908b7825", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -8,15 +8,13 @@ pub fn target() -> Target {\n     Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n         llvm_target: \"mips64-unknown-linux-musl\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "f47b058bd082ad7b4815f628e4e91a9730541d1b", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,17 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mips64el-unknown-linux-gnuabi64\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),"}, {"sha": "5c985eb842ca339b8f91b7ea5dd78cb6d7c27706", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -8,15 +8,9 @@ pub fn target() -> Target {\n     Target {\n         // LLVM doesn't recognize \"muslabi64\" yet.\n         llvm_target: \"mips64el-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "1fc668613641f7767c66176cb46b81e920518c9d", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mips-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "ed03f5d990ed59f8bf30668fc4df60928ea3c0a7", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -8,15 +8,13 @@ pub fn target() -> Target {\n     base.crt_static_default = false;\n     Target {\n         llvm_target: \"mips-unknown-linux-musl\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "fa1d789bfa8c987a83efa78949e64b96e2b188bc", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,24 +1,19 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mips-unknown-linux-uclibc\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"uclibc\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n             target_mcount: \"_mcount\".to_string(),\n \n-            ..super::linux_base::opts()\n+            ..super::linux_uclibc_base::opts()\n         },\n     }\n }"}, {"sha": "3f426e2e5fe6664a5b53d0bf7b67157ee1d374fe", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,17 +10,14 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"mipsel-sony-psp\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"psp\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"sony\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            target_os: \"psp\".to_string(),\n+            target_vendor: \"sony\".to_string(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips2\".to_string(),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "16fbab58140feeb075619c7455cc04a9a088e532", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,17 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsel-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),"}, {"sha": "d1b603cd9de281a68405eb786339d5c372cbf7a2", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -8,15 +8,9 @@ pub fn target() -> Target {\n     base.crt_static_default = false;\n     Target {\n         llvm_target: \"mipsel-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "a09f7ad012103783e89ac1942a011eeae1c7f6b1", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,25 +1,19 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsel-unknown-linux-uclibc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"uclibc\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n             target_mcount: \"_mcount\".to_string(),\n \n-            ..super::linux_base::opts()\n+            ..super::linux_uclibc_base::opts()\n         },\n     }\n }"}, {"sha": "60c4c3bb051c612666f6dd1766433b8086a6f136", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,17 +9,13 @@ use crate::spec::{PanicStrategy, Target, TargetOptions};\n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsel-unknown-none\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            target_vendor: String::new(),\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float,+noabicalls\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "417ee6e043beba57989733e6ee6159feca151bef", "filename": "compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsisa32r6-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "cf273c6ab2bb510a293418478a808d1a70e3472a", "filename": "compiler/rustc_target/src/spec/mipsisa32r6el_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,17 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsisa32r6el-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             cpu: \"mips32r6\".to_string(),"}, {"sha": "1d82395f53601cd57b690354ecdde51eb3856026", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,18 +1,13 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsisa64r6-unknown-linux-gnuabi64\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),"}, {"sha": "aadd36235bf9717ce5d1e5aca438a949f97ec732", "filename": "compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,17 +1,11 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"mipsisa64r6el-unknown-linux-gnuabi64\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),"}, {"sha": "895114b026e31c87ad76266e7dfcc7a4550ceebb", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 58, "deletions": 38, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -38,6 +38,7 @@ use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n+use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{fmt, io};\n@@ -64,6 +65,7 @@ mod l4re_base;\n mod linux_base;\n mod linux_kernel_base;\n mod linux_musl_base;\n+mod linux_uclibc_base;\n mod msvc_base;\n mod netbsd_base;\n mod openbsd_base;\n@@ -664,26 +666,13 @@ supported_targets! {\n pub struct Target {\n     /// Target triple to pass to LLVM.\n     pub llvm_target: String,\n-    /// String to use as the `target_endian` `cfg` variable.\n-    pub target_endian: String,\n     /// Number of bits in a pointer. Influences the `target_pointer_width` `cfg` variable.\n     pub pointer_width: u32,\n-    /// Width of c_int type\n-    pub target_c_int_width: String,\n-    /// OS name to use for conditional compilation.\n-    pub target_os: String,\n-    /// Environment name to use for conditional compilation.\n-    pub target_env: String,\n-    /// Vendor name to use for conditional compilation.\n-    pub target_vendor: String,\n     /// Architecture to use for ABI considerations. Valid options include: \"x86\",\n     /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\", and others.\n     pub arch: String,\n     /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n-    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n-    /// on the command line.\n-    pub linker_flavor: LinkerFlavor,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n }\n@@ -707,6 +696,20 @@ pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,\n \n+    /// String to use as the `target_endian` `cfg` variable. Defaults to \"little\".\n+    pub target_endian: String,\n+    /// Width of c_int type. Defaults to \"32\".\n+    pub target_c_int_width: String,\n+    /// OS name to use for conditional compilation. Defaults to \"none\".\n+    pub target_os: String,\n+    /// Environment name to use for conditional compilation. Defaults to \"\".\n+    pub target_env: String,\n+    /// Vendor name to use for conditional compilation. Defaults to \"unknown\".\n+    pub target_vendor: String,\n+    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n+    /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n+    pub linker_flavor: LinkerFlavor,\n+\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n@@ -985,6 +988,12 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n+            target_endian: \"little\".to_string(),\n+            target_c_int_width: \"32\".to_string(),\n+            target_os: \"none\".to_string(),\n+            target_env: String::new(),\n+            target_vendor: \"unknown\".to_string(),\n+            linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             lld_flavor: LldFlavor::Ld,\n             pre_link_args: LinkArgs::new(),\n@@ -1075,6 +1084,17 @@ impl Default for TargetOptions {\n     }\n }\n \n+/// `TargetOptions` being a separate type is basically an implementation detail of `Target` that is\n+/// used for providing defaults. Perhaps there's a way to merge `TargetOptions` into `Target` so\n+/// this `Deref` implementation is no longer necessary.\n+impl Deref for Target {\n+    type Target = TargetOptions;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.options\n+    }\n+}\n+\n impl Target {\n     /// Given a function ABI, turn it into the correct ABI for this target.\n     pub fn adjust_abi(&self, abi: Abi) -> Abi {\n@@ -1135,27 +1155,13 @@ impl Target {\n                 .ok_or_else(|| format!(\"Field {} in target specification is required\", name))\n         };\n \n-        let get_opt_field = |name: &str, default: &str| {\n-            obj.find(name)\n-                .and_then(|s| s.as_string())\n-                .map(|s| s.to_string())\n-                .unwrap_or_else(|| default.to_string())\n-        };\n-\n         let mut base = Target {\n             llvm_target: get_req_field(\"llvm-target\")?,\n-            target_endian: get_req_field(\"target-endian\")?,\n             pointer_width: get_req_field(\"target-pointer-width\")?\n                 .parse::<u32>()\n                 .map_err(|_| \"target-pointer-width must be an integer\".to_string())?,\n-            target_c_int_width: get_req_field(\"target-c-int-width\")?,\n             data_layout: get_req_field(\"data-layout\")?,\n             arch: get_req_field(\"arch\")?,\n-            target_os: get_req_field(\"os\")?,\n-            target_env: get_opt_field(\"env\", \"\"),\n-            target_vendor: get_opt_field(\"vendor\", \"unknown\"),\n-            linker_flavor: LinkerFlavor::from_str(&*get_req_field(\"linker-flavor\")?)\n-                .ok_or_else(|| format!(\"linker flavor must be {}\", LinkerFlavor::one_of()))?,\n             options: Default::default(),\n         };\n \n@@ -1166,6 +1172,12 @@ impl Target {\n                     base.options.$key_name = s.to_string();\n                 }\n             } );\n+            ($key_name:ident = $json_name:expr) => ( {\n+                let name = $json_name;\n+                if let Some(s) = obj.find(&name).and_then(Json::as_string) {\n+                    base.options.$key_name = s.to_string();\n+                }\n+            } );\n             ($key_name:ident, bool) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_boolean) {\n@@ -1301,11 +1313,13 @@ impl Target {\n             } );\n             ($key_name:ident, LinkerFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.find(&name[..]).and_then(|o| o.as_string().map(|s| {\n-                    LinkerFlavor::from_str(&s).ok_or_else(|| {\n-                        Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n-                                     Use 'em', 'gcc', 'ld' or 'msvc.\", s))\n-                    })\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match LinkerFlavor::from_str(s) {\n+                        Some(linker_flavor) => base.options.$key_name = linker_flavor,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n+                                                      Use {}\", s, LinkerFlavor::one_of()))),\n+                    }\n+                    Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n             ($key_name:ident, crt_objects_fallback) => ( {\n@@ -1392,6 +1406,12 @@ impl Target {\n         }\n \n         key!(is_builtin, bool);\n+        key!(target_endian);\n+        key!(target_c_int_width);\n+        key!(target_os = \"os\");\n+        key!(target_env = \"env\");\n+        key!(target_vendor = \"vendor\");\n+        key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n         key!(lld_flavor, LldFlavor)?;\n         key!(pre_link_objects, link_objects);\n@@ -1619,17 +1639,17 @@ impl ToJson for Target {\n         }\n \n         target_val!(llvm_target);\n-        target_val!(target_endian);\n         d.insert(\"target-pointer-width\".to_string(), self.pointer_width.to_string().to_json());\n-        target_val!(target_c_int_width);\n         target_val!(arch);\n-        target_val!(target_os, \"os\");\n-        target_val!(target_env, \"env\");\n-        target_val!(target_vendor, \"vendor\");\n         target_val!(data_layout);\n-        target_val!(linker_flavor);\n \n         target_option_val!(is_builtin);\n+        target_option_val!(target_endian);\n+        target_option_val!(target_c_int_width);\n+        target_option_val!(target_os, \"os\");\n+        target_option_val!(target_env, \"env\");\n+        target_option_val!(target_vendor, \"vendor\");\n+        target_option_val!(linker_flavor);\n         target_option_val!(linker);\n         target_option_val!(lld_flavor);\n         target_option_val!(pre_link_objects);"}, {"sha": "48b6d1be9ceb85ac4c40bafb1d2bbaac5f8e7ce5", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,15 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+use crate::spec::{PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"msp430-none-elf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 16,\n-        target_c_int_width: \"16\".to_string(),\n         data_layout: \"e-m:e-p:16:16-i32:16-i64:16-f32:16-f64:16-a:8-n8:16-S16\".to_string(),\n         arch: \"msp430\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n+            target_c_int_width: \"16\".to_string(),\n+            target_vendor: String::new(),\n             executables: true,\n \n             // The LLVM backend currently can't generate object files. To"}, {"sha": "8cd6735a8c1ecbdac14ec6d5f8a09794f1359324", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -18,6 +18,7 @@ pub fn opts() -> TargetOptions {\n     pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n \n     TargetOptions {\n+        linker_flavor: LinkerFlavor::Msvc,\n         executables: true,\n         is_like_windows: true,\n         is_like_msvc: true,"}, {"sha": "437b50b6f1100a3525389255972c3eadd9af502a", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -14,6 +14,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"netbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "f759724445e247e94cf2e6d8fcba010d9741aafd", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -6,18 +6,12 @@ pub fn target() -> Target {\n         arch: \"nvptx64\".to_string(),\n         data_layout: \"e-i64:64-i128:128-v16:16-v32:32-n16:32:64\".to_string(),\n         llvm_target: \"nvptx64-nvidia-cuda\".to_string(),\n-\n-        target_os: \"cuda\".to_string(),\n-        target_vendor: \"nvidia\".to_string(),\n-        target_env: String::new(),\n-\n-        linker_flavor: LinkerFlavor::PtxLinker,\n-\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n \n         options: TargetOptions {\n+            target_os: \"cuda\".to_string(),\n+            target_vendor: \"nvidia\".to_string(),\n+            linker_flavor: LinkerFlavor::PtxLinker,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".to_string()),\n "}, {"sha": "5e83e79d9ed7df8962c2618b61c20e380838edfd", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,6 +16,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"openbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "3d20f15b39154d16ecd602373a9201afaa5c9497", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc64-unknown-freebsd\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        target_os: \"freebsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "e52643eb8932fb473db097ea4100cc0021d7e379", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -12,15 +12,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "315192929ac033aa0dc0855eac8e0a19cf438085", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "a31256761a42a8cc2712410f34d8df3308a0b295", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { ..base },\n+        options: TargetOptions { target_endian: \"big\".to_string(), ..base },\n     }\n }"}, {"sha": "4cf296c3fa78c780835921648bf2aaef06d31efd", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "41756028cbef96058fae06ce0f5966ea1fa4dca4", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "f3ec02c10d20cd4403a8cf3f33faae299b24f364", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -7,15 +7,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "4e3ffca0a0871966095b5ff5f7d7bf1fb810cdd2", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -7,15 +7,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "1d5c19b5420443e2083e4737c144a9631f4ffa54", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -7,15 +7,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-musl\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "4d7eb8d010047632b5cb22c27a16413cf6f43660", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -7,15 +7,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc-unknown-netbsd\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"__mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "dc6a4e28a3dc9e0f117fe3dd8e7486b64a82e630", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { features: \"+secure-plt\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            features: \"+secure-plt\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "1ce3fa21918e8a4ca7144260b7f07e83a8061483", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,16 +8,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),\n             ..base"}, {"sha": "04409a1cd04781076d37cc05e2bccd6c63795253", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -19,6 +19,8 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"redox\".to_string(),\n+        target_env: \"relibc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "f9405d9dfb63a1d6bed7d1087fed3370d9d75240", "filename": "compiler/rustc_target/src/spec/riscv32gc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32gc_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,17 +1,11 @@\n-use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"riscv32-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_env: \"gnu\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         arch: \"riscv32\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),"}, {"sha": "a31a08a8cf93da6f1a243b5083cc4455329251ff", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,16 +5,11 @@ pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         llvm_target: \"riscv32\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"riscv32\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv32\".to_string(),\n             max_atomic_width: Some(0),"}, {"sha": "2ee53fdc4016dbe5cb41c3e19b0ed16fafb64fbd", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,16 +5,11 @@ pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         llvm_target: \"riscv32\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"riscv32\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv32\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "89d760e082f19d05f36d7ee9887681b045a5fc4f", "filename": "compiler/rustc_target/src/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,16 +5,11 @@ pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n         llvm_target: \"riscv32\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"riscv32\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv32\".to_string(),\n             max_atomic_width: Some(0),"}, {"sha": "3b7ff47a540096cadf28444b2809ba1168912ee9", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,17 +1,11 @@\n-use crate::spec::{CodeModel, LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{CodeModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"riscv64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_env: \"gnu\".to_string(),\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         arch: \"riscv64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             unsupported_abis: super::riscv_base::unsupported_abis(),\n             code_model: Some(CodeModel::Medium),"}, {"sha": "33a785fdfee4838fe31de8362d3062121ac930e1", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,16 +5,11 @@ pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         llvm_target: \"riscv64\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"riscv64\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv64\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "908367ee2006eaab26293fdd012798df3a90dbec", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,16 +5,11 @@ pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n         llvm_target: \"riscv64\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"riscv64\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv64\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "69b880cdb81bb09910fdc8a644b6f3ac0d8a2c0d", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,7 +1,8 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n+    base.target_endian = \"big\".to_string();\n     // z10 is the oldest CPU supported by LLVM\n     base.cpu = \"z10\".to_string();\n     // FIXME: The data_layout string below and the ABI implementation in\n@@ -13,15 +14,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64\".to_string(),\n         arch: \"s390x\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "1454d83e93610e2d2c95515117eb6c63bba413c7", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,6 +2,8 @@ use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n+        target_os: \"solaris\".to_string(),\n+        target_vendor: \"sun\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,"}, {"sha": "f02b01a514b4a17682ae5f301bbf1ebe26709d35", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,21 +1,16 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n+    base.target_endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n \n     Target {\n         llvm_target: \"sparc64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "de35bb8fe14998d59f5b22df780f3dfbc81acfb9", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,15 +8,13 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"sparc64-unknown-netbsd\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            target_endian: \"big\".to_string(),\n+            target_mcount: \"__mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "301c91e432cadc9e62756a575b56a9dca6bd1c3d", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,21 +2,16 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n+    base.target_endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n     Target {\n         llvm_target: \"sparc64-unknown-openbsd\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n-        target_os: \"openbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "071175819f41cef4d258ab96b25599a4cfd8ab9d", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,21 +2,16 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n+    base.target_endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());\n \n     Target {\n         llvm_target: \"sparc-unknown-linux-gnu\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-p:32:32-i64:64-f128:64-n32-S64\".to_string(),\n         arch: \"sparc\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "e8c30dcbf8507bb9b23e4bd221fda6b739b9851b", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,26 +2,21 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n+    base.target_endian = \"big\".to_string();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n \n     Target {\n         llvm_target: \"sparcv9-sun-solaris\".to_string(),\n-        target_endian: \"big\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         // Use \"sparc64\" instead of \"sparcv9\" here, since the former is already\n         // used widely in the source base.  If we ever needed ABI\n         // differentiation from the sparc64, we could, but that would probably\n         // just be confusing.\n         arch: \"sparc64\".to_string(),\n-        target_os: \"solaris\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"sun\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "cc955799d2f73a1e083ecc57571e8add845291d5", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -27,11 +27,13 @@\n // differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n // build scripts / gcc flags.\n \n-use crate::spec::{PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n+        target_vendor: String::new(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n         // In most cases, LLD is good enough\n         linker: Some(\"rust-lld\".to_string()),"}, {"sha": "d87c06d49cbc232d3d9d8a3960351ee21798d58c", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -13,12 +13,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv4t-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"\".to_string(),\n         arch: \"arm\".to_string(),\n         /* Data layout args are '-' separated:\n          * little endian\n@@ -30,8 +25,8 @@ pub fn target() -> Target {\n          * All other elements are default\n          */\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n-        linker_flavor: LinkerFlavor::Ld,\n         options: TargetOptions {\n+            linker_flavor: LinkerFlavor::Ld,\n             linker: Some(\"arm-none-eabi-ld\".to_string()),\n             linker_is_gnu: true,\n "}, {"sha": "11c8bf46348738ed19fd75c389590771381b5877", "filename": "compiler/rustc_target/src/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n // Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv6m-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them"}, {"sha": "8131a6e2ea444fd8bf40706aab6eeff53b1c4a0b", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -23,15 +23,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n \n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),"}, {"sha": "a2c1b6bb90c97bca4cdf9b94363be32a7b510d30", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n+use crate::spec::{PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n@@ -11,15 +11,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"uwp\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n             cpu: \"generic\".to_string(),"}, {"sha": "141eb7e78b9e4902f6227273fe0db3f507448090", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,20 +9,14 @@\n // To opt-in to hardware accelerated floating point operations, you can use, for example,\n // `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv7em-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n     }"}, {"sha": "f5bd054f8598ca61ba69e1a1e91b4167fe24ed0c", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -8,20 +8,14 @@\n //\n // To opt into double precision hardware support, use the `-C target-feature=+fp64` flag.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv7em-none-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the"}, {"sha": "7af28cd9c9f9b9a2d001a1fde3369663a8fea099", "filename": "compiler/rustc_target/src/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n // Targets the Cortex-M3 processor (ARMv7-M)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv7m-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n     }"}, {"sha": "41fdbc2f0a013b0dff15be161642921b15a4dfb3", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,15 +16,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"armv7-none-linux-android\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"android\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { unsupported_abis: super::arm_base::unsupported_abis(), ..base },\n     }\n }"}, {"sha": "561da4d15cd618cac92dccc50e793e1bd35bd05a", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // This target is for glibc Linux on ARMv7 with thumb mode enabled\n // (for consistency with Android and Debian-based distributions)\n@@ -10,15 +10,9 @@ pub fn target() -> Target {\n     let base = super::linux_base::opts();\n     Target {\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort"}, {"sha": "5b1fc74bdd06b27d188da5eeda0d359831c0b11e", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n // This target is for musl Linux on ARMv7 with thumb mode enabled\n // (for consistency with Android and Debian-based distributions)\n@@ -13,15 +13,9 @@ pub fn target() -> Target {\n         // uses it to determine the calling convention and float ABI, and LLVM\n         // doesn't support the \"musleabihf\" value.\n         llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         // Most of these settings are copied from the thumbv7neon_unknown_linux_gnueabihf\n         // target."}, {"sha": "a2200bc64e7d1bc01972bed9928c017b4927cb71", "filename": "compiler/rustc_target/src/spec/thumbv8m_base_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n // Targets the Cortex-M23 processor (Baseline ARMv8-M)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv8m.base-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             // ARMv8-M baseline doesn't support unaligned loads/stores so we disable them"}, {"sha": "67cdbab4860a3a6f469dfcbd7bb66eaaa465fd8b", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n // Targets the Cortex-M33 processor (Armv8-M Mainline architecture profile),\n // without the Floating Point extension.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv8m.main-none-eabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n     }"}, {"sha": "49748f5ec6da4e7f8091b8aeac5fed1be8774854", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n // Targets the Cortex-M33 processor (Armv8-M Mainline architecture profile),\n // with the Floating Point extension.\n \n-use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n         llvm_target: \"thumbv8m.main-none-eabihf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n \n         options: TargetOptions {\n             // If the Floating Point extension is implemented in the Cortex-M33"}, {"sha": "91a39f7b9b4ef024b92c27d9510f14edafead135", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -37,6 +37,8 @@ pub fn opts() -> TargetOptions {\n         .extend(pre_link_args_msvc);\n \n     TargetOptions {\n+        target_os: \"uefi\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n         disable_redzone: true,\n         exe_suffix: \".efi\".to_string(),\n         allows_weak_linkage: false,"}, {"sha": "e8044e4dc1a9108b748c7aac72562879f4f4ace5", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -17,6 +17,9 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n+        target_os: \"vxworks\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"wrs\".to_string(),\n         linker: Some(\"wr-c++\".to_string()),\n         exe_suffix: \".vxe\".to_string(),\n         dynamic_linking: true,"}, {"sha": "dbafe362f2aedc423e7248971b75b77c345d77d7", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -17,6 +17,8 @@ pub fn target() -> Target {\n     );\n \n     let opts = TargetOptions {\n+        target_os: \"emscripten\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".to_string(),\n@@ -30,15 +32,9 @@ pub fn target() -> Target {\n     };\n     Target {\n         llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"emscripten\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n-        linker_flavor: LinkerFlavor::Em,\n         options: opts,\n     }\n }"}, {"sha": "4401772788b104b73bdf34a2fb9908255e7a0ee7", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -15,6 +15,8 @@ use super::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n+    options.target_os = \"unknown\".to_string();\n+    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n \n     // Make sure clang uses LLD as its linker and is configured appropriately\n@@ -32,15 +34,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"wasm32-unknown-unknown\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"unknown\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n         options,\n     }\n }"}, {"sha": "6f5316e30f6d5e9e53cb64265477c6b25f306677", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -78,6 +78,9 @@ use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n \n+    options.target_os = \"wasi\".to_string();\n+    options.target_vendor = String::new();\n+    options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     options\n         .pre_link_args\n         .entry(LinkerFlavor::Gcc)\n@@ -106,15 +109,9 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"wasm32-wasi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"wasi\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n         options,\n     }\n }"}, {"sha": "37188a59eb5b31b29ad4d8d1a57ad32ea1b29ec2", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -62,6 +62,9 @@ pub fn opts() -> TargetOptions {\n     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);\n \n     TargetOptions {\n+        target_os: \"windows\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"pc\".to_string(),\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n         linker: Some(\"gcc\".to_string()),"}, {"sha": "c1101623867851e41f3b132ff4f482d23dc0462b", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -4,6 +4,9 @@ pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();\n \n     TargetOptions {\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"pc\".to_string(),\n         dynamic_linking: true,\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),"}, {"sha": "225b94c37558127f6dc813f6c59cf6258ee6d986", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -25,6 +25,7 @@ pub fn opts() -> TargetOptions {\n     late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n \n     TargetOptions {\n+        target_vendor: \"uwp\".to_string(),\n         executables: false,\n         limit_rdylib_exports: false,\n         late_link_args,"}, {"sha": "380d685dacfc98cdc8522696b6c56d5417ff0812", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -3,6 +3,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n+    opts.target_vendor = \"uwp\".to_string();\n     let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n     opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n     opts.pre_link_args"}, {"sha": "6cd4daa7a7443c5e41e2a22cf96d6ee363d57b69", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,7 +1,7 @@\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut base = super::apple_base::opts();\n+    let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"core2\".to_string();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n@@ -20,16 +20,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target,\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: arch.to_string(),\n-        target_os: \"macos\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "c9c7eeb723198ca76ccbe5ef6955572cc16746e8", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::X86_64);\n+    let base = opts(\"ios\", Arch::X86_64);\n     Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n     }\n }"}, {"sha": "6b360e5495be71d856f07d40b4991affcf55a31f", "filename": "compiler/rustc_target/src/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,20 +1,14 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::X86_64_macabi);\n+    let base = opts(\"ios\", Arch::X86_64_macabi);\n     Target {\n         llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n     }\n }"}, {"sha": "5b2a62a23fd8c604a80caed8bdd4218dbfbfae5e", "filename": "compiler/rustc_target/src/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_tvos.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,19 +1,13 @@\n use super::apple_sdk_base::{opts, Arch};\n-use crate::spec::{LinkerFlavor, Target, TargetOptions};\n+use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let base = opts(Arch::X86_64);\n+    let base = opts(\"tvos\", Arch::X86_64);\n     Target {\n         llvm_target: \"x86_64-apple-tvos\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"tvos\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"apple\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n     }\n }"}, {"sha": "550d308ed8f7879355718b2947faa921641484d3", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -55,6 +55,10 @@ pub fn target() -> Target {\n         \"TEXT_SIZE\",\n     ];\n     let opts = TargetOptions {\n+        target_os: \"unknown\".into(),\n+        target_env: \"sgx\".into(),\n+        target_vendor: \"fortanix\".into(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         dynamic_linking: false,\n         executables: true,\n         linker_is_gnu: true,\n@@ -76,16 +80,10 @@ pub fn target() -> Target {\n     };\n     Target {\n         llvm_target: \"x86_64-elf\".into(),\n-        target_endian: \"little\".into(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".into(),\n-        target_os: \"unknown\".into(),\n-        target_env: \"sgx\".into(),\n-        target_vendor: \"fortanix\".into(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .into(),\n         arch: \"x86_64\".into(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     }\n }"}, {"sha": "6c049c2635c79b7484c10e45921cfa04146abf0f", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::fuchsia_base::opts();\n@@ -8,16 +8,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-fuchsia\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"fuchsia\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: String::new(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n     }\n }"}, {"sha": "27327160178a09f311b06f7c6b0e68bcd8419889", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -11,16 +11,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-linux-android\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"android\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "43e683ddbcc84f750c681dc547e1ee34813e132c", "filename": "compiler/rustc_target/src/spec/x86_64_linux_kernel.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_kernel.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -16,16 +16,10 @@ pub fn target() -> Target {\n     Target {\n         // FIXME: Some dispute, the linux-on-clang folks think this should use \"Linux\"\n         llvm_target: \"x86_64-elf\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n-        target_os: \"none\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"x86_64\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n \n         options: base,\n     }"}, {"sha": "36726ab4aedab3c3b34587078c9546eaa50e882e", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -14,16 +14,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "72bbb10323c31abdea7831d27b3499eeef7245be", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n@@ -8,16 +8,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     }\n }"}, {"sha": "511a45599356c11f69ac5c804be1b36acdf8021f", "filename": "compiler/rustc_target/src/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -2,6 +2,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n+    base.target_vendor = \"rumprun\".to_string();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.linker = Some(\"x86_64-rumprun-netbsd-gcc\".to_string());\n@@ -15,16 +16,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-rumprun-netbsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"rumprun\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "6ccf78402e1497e99bce6f5ede469da0be50f920", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-pc-solaris\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"solaris\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"sun\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "cf57f4ec624610efccb27a9bc263ec575b4d6e50", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_cloudabi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,16 +10,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-cloudabi\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"cloudabi\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "30aa2909873a339b15582f049daad011d623ed4c", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-dragonfly\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"dragonfly\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "ee904d762421f3a71a11fd40fd67abff903b64b1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-freebsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"freebsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "ea7e068e516a93a8b1c4945d241892ced5c6092f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -11,16 +11,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-haiku\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"haiku\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "4005aaf58b1330541b496081b07c92150196ba52", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"hermit\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n     }\n }"}, {"sha": "b72d529363afb62fb1ffcbf2a7f7cc189f8312aa", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_hermit_kernel.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_hermit_kernel.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::hermit_kernel_base::opts();\n@@ -11,16 +11,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-hermit\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"hermit\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: base,\n     }\n }"}, {"sha": "d3f9349d99b8e6ec71fca6912b5141927d87fe62", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,16 +10,10 @@ pub fn target() -> Target {\n         // LLVM does not currently have a separate illumos target,\n         // so we still pass Solaris to it\n         llvm_target: \"x86_64-pc-solaris\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"illumos\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "1fbd0bb4cec254b7bfa7062c26c364ec4e0f204f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_l4re_uclibc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::l4re_base::opts();\n@@ -7,16 +7,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-l4re-uclibc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"l4re\".to_string(),\n-        target_env: \"uclibc\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Ld,\n         options: base,\n     }\n }"}, {"sha": "1f368ff161191ddc88cdd0a938c3cbf6ec6b268a", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "375b22fd92b934c690fedd429a5e1ad37c0df3d1", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -13,17 +13,11 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnux32\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 32,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-\\\n             i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "3669c10981e19a668736f353f01eff4e7cbcfc36", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,16 +10,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"linux\".to_string(),\n-        target_env: \"musl\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "656ef90892cbe1973b636537ee0ae9b202488cc2", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-netbsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"netbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "0fe01f09c2e8526808eeee1d393c34b7f368df4b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-openbsd\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"openbsd\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "cdd445b2614b2bb4bb61b4b1b248528f4d2dd824", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -9,16 +9,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-redox\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"redox\".to_string(),\n-        target_env: \"relibc\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "b7dcce5f895c8bd0a470b460bf47cdcd1bb495e0", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_uefi.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -5,7 +5,7 @@\n // The win64 ABI is used. It differs from the sysv64 ABI, so we must use a windows target with\n // LLVM. \"x86_64-unknown-windows\" is used to get the minimal subset of windows-specific features.\n \n-use crate::spec::{CodeModel, LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{CodeModel, Target};\n \n pub fn target() -> Target {\n     let mut base = super::uefi_msvc_base::opts();\n@@ -30,16 +30,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-windows\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n-        target_os: \"uefi\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n         arch: \"x86_64\".to_string(),\n-        linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n \n         options: base,\n     }"}, {"sha": "57913ba0dab6ec6208fd3d4723b15b13c194c494", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -13,16 +13,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"uwp\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}, {"sha": "27c579ed5bc670e885e3afd6092e3bfe9c1c05c3", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_msvc.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n@@ -8,16 +8,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-msvc\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"uwp\".to_string(),\n-        linker_flavor: LinkerFlavor::Msvc,\n         options: base,\n     }\n }"}, {"sha": "163af6fd8e175edd5e5c970b629bb39daecee25d", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ea2f648e117013b0217f001088ae89e0f163ca/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=f2ea2f648e117013b0217f001088ae89e0f163ca", "patch": "@@ -10,16 +10,10 @@ pub fn target() -> Target {\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-gnu\".to_string(),\n-        target_endian: \"little\".to_string(),\n         pointer_width: 64,\n-        target_c_int_width: \"32\".to_string(),\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n         options: base,\n     }\n }"}]}