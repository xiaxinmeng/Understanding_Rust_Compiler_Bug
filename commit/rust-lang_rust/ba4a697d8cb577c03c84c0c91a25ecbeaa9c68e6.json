{"sha": "ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNGE2OTdkOGNiNTc3YzAzYzg0YzBjOTFhMjVlY2JlYWE5YzY4ZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T15:34:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-08T15:34:41Z"}, "message": "move fuzz-invariants to the library", "tree": {"sha": "8967481740bf2f7c097a056544cf5ef76d076ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8967481740bf2f7c097a056544cf5ef76d076ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "html_url": "https://github.com/rust-lang/rust/commit/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a60b9ad963db87c6431de7a9b57e0d2241efdeab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a60b9ad963db87c6431de7a9b57e0d2241efdeab", "html_url": "https://github.com/rust-lang/rust/commit/a60b9ad963db87c6431de7a9b57e0d2241efdeab"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "da87180bb4dae8696cb5112040cfb2d458445cbb", "filename": "crates/libsyntax2/fuzz/fuzz_targets/parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/crates%2Flibsyntax2%2Ffuzz%2Ffuzz_targets%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/crates%2Flibsyntax2%2Ffuzz%2Ffuzz_targets%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ffuzz%2Ffuzz_targets%2Fparser.rs?ref=ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "patch": "@@ -4,9 +4,6 @@ extern crate libsyntax2;\n \n fuzz_target!(|data: &[u8]| {\n     if let Ok(text) = std::str::from_utf8(data) {\n-        let x = libsyntax2::File::parse(text);\n-        let _ = x.ast();\n-        let _ = x.syntax();\n-        let _ = x.errors();\n+        libsyntax2::utils::check_fuzz_invariants(text)\n     }\n });"}, {"sha": "d955c01e723352843a8b02ac47540203743cdfaa", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "patch": "@@ -66,7 +66,9 @@ impl File {\n     fn new(green: GreenNode, errors: Vec<SyntaxError>) -> File {\n         let root = SyntaxRoot::new(green, errors);\n         let root = SyntaxNode::new_owned(root);\n-        validate_block_structure(root.borrowed());\n+        if cfg!(debug_assertions) {\n+            utils::validate_block_structure(root.borrowed());\n+        }\n         File { root }\n     }\n     pub fn parse(text: &str) -> File {\n@@ -112,40 +114,6 @@ impl File {\n     }\n }\n \n-#[cfg(not(debug_assertions))]\n-fn validate_block_structure(_: SyntaxNodeRef) {}\n-\n-#[cfg(debug_assertions)]\n-fn validate_block_structure(root: SyntaxNodeRef) {\n-    let mut stack = Vec::new();\n-    for node in algo::walk::preorder(root) {\n-        match node.kind() {\n-            SyntaxKind::L_CURLY => {\n-                stack.push(node)\n-            }\n-            SyntaxKind::R_CURLY => {\n-                if let Some(pair) = stack.pop() {\n-                    assert_eq!(\n-                        node.parent(),\n-                        pair.parent(),\n-                        \"\\nunpaired curleys:\\n{}\\n{}\\n\",\n-                        root.text(),\n-                        utils::dump_tree(root),\n-                    );\n-                    assert!(\n-                        node.next_sibling().is_none() && pair.prev_sibling().is_none(),\n-                        \"\\nfloating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n-                        node,\n-                        root.text(),\n-                        node.text(),\n-                    );\n-                }\n-            }\n-            _ => (),\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone)]\n pub struct AtomEdit {\n     pub delete: TextRange,"}, {"sha": "671dd7afa7824994f968d8dd99cd5bbd328be27c", "filename": "crates/libsyntax2/src/utils.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/crates%2Flibsyntax2%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6/crates%2Flibsyntax2%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Futils.rs?ref=ba4a697d8cb577c03c84c0c91a25ecbeaa9c68e6", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::Write;\n use {\n-    algo::walk::{walk, WalkEvent},\n-    SyntaxNodeRef, TreeRoot,\n+    algo::walk::{preorder, walk, WalkEvent},\n+    SyntaxKind, File, SyntaxNodeRef, TreeRoot,\n };\n \n /// Parse a file and create a string representation of the resulting parse tree.\n@@ -45,3 +45,41 @@ pub fn dump_tree(syntax: SyntaxNodeRef) -> String {\n \n     return buf;\n }\n+\n+pub fn check_fuzz_invariants(text: &str) {\n+    let file = File::parse(text);\n+    let root = file.syntax();\n+    validate_block_structure(root);\n+    let _ = file.ast();\n+    let _ = file.errors();\n+}\n+\n+pub(crate) fn validate_block_structure(root: SyntaxNodeRef) {\n+    let mut stack = Vec::new();\n+    for node in preorder(root) {\n+        match node.kind() {\n+            SyntaxKind::L_CURLY => {\n+                stack.push(node)\n+            }\n+            SyntaxKind::R_CURLY => {\n+                if let Some(pair) = stack.pop() {\n+                    assert_eq!(\n+                        node.parent(),\n+                        pair.parent(),\n+                        \"\\nunpaired curleys:\\n{}\\n{}\\n\",\n+                        root.text(),\n+                        dump_tree(root),\n+                    );\n+                    assert!(\n+                        node.next_sibling().is_none() && pair.prev_sibling().is_none(),\n+                        \"\\nfloating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n+                        node,\n+                        root.text(),\n+                        node.text(),\n+                    );\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+}"}]}