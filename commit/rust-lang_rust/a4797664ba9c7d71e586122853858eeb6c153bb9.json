{"sha": "a4797664ba9c7d71e586122853858eeb6c153bb9", "node_id": "C_kwDOAAsO6NoAKGE0Nzk3NjY0YmE5YzdkNzFlNTg2MTIyODUzODU4ZWViNmMxNTNiYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T10:09:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-04T10:09:04Z"}, "message": "Auto merge of #89489 - FabianWolff:issue-89485, r=oli-obk\n\nFix unsound optimization with explicit variant discriminants\n\nFixes #89485.", "tree": {"sha": "91d3ec9f96e9a97ae3f8bdf247c20c89482c079c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d3ec9f96e9a97ae3f8bdf247c20c89482c079c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4797664ba9c7d71e586122853858eeb6c153bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4797664ba9c7d71e586122853858eeb6c153bb9", "html_url": "https://github.com/rust-lang/rust/commit/a4797664ba9c7d71e586122853858eeb6c153bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4797664ba9c7d71e586122853858eeb6c153bb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44593aeb1387b1be355aeaf0040d5927bd80f060", "url": "https://api.github.com/repos/rust-lang/rust/commits/44593aeb1387b1be355aeaf0040d5927bd80f060", "html_url": "https://github.com/rust-lang/rust/commit/44593aeb1387b1be355aeaf0040d5927bd80f060"}, {"sha": "dd9b4763a4805e508cafd9aa49eebda27e5298c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9b4763a4805e508cafd9aa49eebda27e5298c0", "html_url": "https://github.com/rust-lang/rust/commit/dd9b4763a4805e508cafd9aa49eebda27e5298c0"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "e436d73226a5515d12b2ffabc69868c53153963f", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a4797664ba9c7d71e586122853858eeb6c153bb9/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4797664ba9c7d71e586122853858eeb6c153bb9/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=a4797664ba9c7d71e586122853858eeb6c153bb9", "patch": "@@ -544,6 +544,12 @@ pub struct SimplifyBranchSame;\n \n impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        // This optimization is disabled by default for now due to\n+        // soundness concerns; see issue #89485 and PR #89489.\n+        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+            return;\n+        }\n+\n         trace!(\"Running SimplifyBranchSame on {:?}\", body.source);\n         let finder = SimplifyBranchSameOptimizationFinder { body, tcx };\n         let opts = finder.find();\n@@ -706,12 +712,24 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n         let helper = |rhs: &Rvalue<'tcx>,\n                       place: &Place<'tcx>,\n                       variant_index: &VariantIdx,\n+                      switch_value: u128,\n                       side_to_choose| {\n             let place_type = place.ty(self.body, self.tcx).ty;\n             let adt = match *place_type.kind() {\n                 ty::Adt(adt, _) if adt.is_enum() => adt,\n                 _ => return StatementEquality::NotEqual,\n             };\n+            // We need to make sure that the switch value that targets the bb with\n+            // SetDiscriminant is the same as the variant discriminant.\n+            let variant_discr = adt.discriminant_for_variant(self.tcx, *variant_index).val;\n+            if variant_discr != switch_value {\n+                trace!(\n+                    \"NO: variant discriminant {} does not equal switch value {}\",\n+                    variant_discr,\n+                    switch_value\n+                );\n+                return StatementEquality::NotEqual;\n+            }\n             let variant_is_fieldless = adt.variants[*variant_index].fields.is_empty();\n             if !variant_is_fieldless {\n                 trace!(\"NO: variant {:?} was not fieldless\", variant_index);\n@@ -740,20 +758,28 @@ impl<'a, 'tcx> SimplifyBranchSameOptimizationFinder<'a, 'tcx> {\n             (\n                 StatementKind::Assign(box (_, rhs)),\n                 StatementKind::SetDiscriminant { place, variant_index },\n-            )\n-            // we need to make sure that the switch value that targets the bb with SetDiscriminant (y), is the same as the variant index\n-            if Some(variant_index.index() as u128) == y_target_and_value.value => {\n+            ) if y_target_and_value.value.is_some() => {\n                 // choose basic block of x, as that has the assign\n-                helper(rhs, place, variant_index, x_target_and_value.target)\n+                helper(\n+                    rhs,\n+                    place,\n+                    variant_index,\n+                    y_target_and_value.value.unwrap(),\n+                    x_target_and_value.target,\n+                )\n             }\n             (\n                 StatementKind::SetDiscriminant { place, variant_index },\n                 StatementKind::Assign(box (_, rhs)),\n-            )\n-            // we need to make sure that the switch value that targets the bb with SetDiscriminant (x), is the same as the variant index\n-            if Some(variant_index.index() as u128) == x_target_and_value.value  => {\n+            ) if x_target_and_value.value.is_some() => {\n                 // choose basic block of y, as that has the assign\n-                helper(rhs, place, variant_index, y_target_and_value.target)\n+                helper(\n+                    rhs,\n+                    place,\n+                    variant_index,\n+                    x_target_and_value.value.unwrap(),\n+                    y_target_and_value.target,\n+                )\n             }\n             _ => {\n                 trace!(\"NO: statements `{:?}` and `{:?}` not considered equal\", x, y);"}, {"sha": "cb507eefebbe53e743cbf634b0ffb98710bf43cb", "filename": "src/test/ui/mir/issue-89485.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4797664ba9c7d71e586122853858eeb6c153bb9/src%2Ftest%2Fui%2Fmir%2Fissue-89485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4797664ba9c7d71e586122853858eeb6c153bb9/src%2Ftest%2Fui%2Fmir%2Fissue-89485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-89485.rs?ref=a4797664ba9c7d71e586122853858eeb6c153bb9", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for issue #89485.\n+\n+// run-pass\n+\n+#[derive(Debug, Eq, PartialEq)]\n+pub enum Type {\n+    A = 1,\n+    B = 2,\n+}\n+pub fn encode(v: Type) -> Type {\n+    match v {\n+        Type::A => Type::B,\n+        _ => v,\n+    }\n+}\n+fn main() {\n+  assert_eq!(Type::B, encode(Type::A));\n+}"}]}