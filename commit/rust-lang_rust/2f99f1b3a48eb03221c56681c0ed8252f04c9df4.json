{"sha": "2f99f1b3a48eb03221c56681c0ed8252f04c9df4", "node_id": "C_kwDOAAsO6NoAKDJmOTlmMWIzYTQ4ZWIwMzIyMWM1NjY4MWMwZWQ4MjUyZjA0YzlkZjQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T14:36:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T14:36:50Z"}, "message": "Rollup merge of #97562 - compiler-errors:comment-poly_project_and_unify_type, r=lcnr\n\nFix comment in `poly_project_and_unify_type`\n\nRenamed some variants to match `ProjectAndUnifyResult`", "tree": {"sha": "556eec1b85d3f8af5b2d6b83a1b6f4183dacb60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556eec1b85d3f8af5b2d6b83a1b6f4183dacb60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f99f1b3a48eb03221c56681c0ed8252f04c9df4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil3mCCRBK7hj4Ov3rIwAAXa4IABoKula75F6QKPq4UeAyq8Ce\nWe+bTSzehBLuGsWF1dEyS1eav0L6UbwmjiV0flxC/RRjCijoiyrThQxawOlc4Mlu\nXlttG9qaOuby4sHEEwrirjGO2x7TGrZrfcR315h83Dk0XVEMjdRqRxl2Zq95Fp1k\nWXsgLkzHKCBGVfhEMDe37ec1hxcdC3HKHr5G0yOmDOfamepK4QcPRlcWTT51SoNA\naXl+gbR6XBrLsdfypq/F2WCca1ZrDQ7Y73U5oOAbvx2hFWyYfEzThiu6XYVIs+NN\nk57KtGuREvOV1qh8wX7eFaKtJwpcBs/ZOKxaRysLfLeVAOsoKpE7cE+F/EZbkaY=\n=xbxv\n-----END PGP SIGNATURE-----\n", "payload": "tree 556eec1b85d3f8af5b2d6b83a1b6f4183dacb60c\nparent e1d2e65463e9bc5b75f92209a9e22a6ba7b7aa24\nparent c00d9bf3249142915eabc49fc1d96dda1ee3fc1c\nauthor Yuki Okushi <jtitor@2k36.org> 1654094210 +0900\ncommitter GitHub <noreply@github.com> 1654094210 +0900\n\nRollup merge of #97562 - compiler-errors:comment-poly_project_and_unify_type, r=lcnr\n\nFix comment in `poly_project_and_unify_type`\n\nRenamed some variants to match `ProjectAndUnifyResult`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99f1b3a48eb03221c56681c0ed8252f04c9df4", "html_url": "https://github.com/rust-lang/rust/commit/2f99f1b3a48eb03221c56681c0ed8252f04c9df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f99f1b3a48eb03221c56681c0ed8252f04c9df4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d2e65463e9bc5b75f92209a9e22a6ba7b7aa24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d2e65463e9bc5b75f92209a9e22a6ba7b7aa24", "html_url": "https://github.com/rust-lang/rust/commit/e1d2e65463e9bc5b75f92209a9e22a6ba7b7aa24"}, {"sha": "c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c", "html_url": "https://github.com/rust-lang/rust/commit/c00d9bf3249142915eabc49fc1d96dda1ee3fc1c"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "641b915f373625ab9d52685eaa4328cb792e0538", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f99f1b3a48eb03221c56681c0ed8252f04c9df4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99f1b3a48eb03221c56681c0ed8252f04c9df4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=2f99f1b3a48eb03221c56681c0ed8252f04c9df4", "patch": "@@ -145,15 +145,28 @@ impl<'tcx> ProjectionCandidateSet<'tcx> {\n     }\n }\n \n-/// Takes the place of a\n+/// States returned from `poly_project_and_unify_type`. Takes the place\n+/// of the old return type, which was:\n+/// ```ignore (not-rust)\n /// Result<\n ///     Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,\n ///     MismatchedProjectionTypes<'tcx>,\n /// >\n+/// ```\n pub(super) enum ProjectAndUnifyResult<'tcx> {\n+    /// The projection bound holds subject to the given obligations. If the\n+    /// projection cannot be normalized because the required trait bound does\n+    /// not hold, this is returned, with `obligations` being a predicate that\n+    /// cannot be proven.\n     Holds(Vec<PredicateObligation<'tcx>>),\n+    /// The projection cannot be normalized due to ambiguity. Resolving some\n+    /// inference variables in the projection may fix this.\n     FailedNormalization,\n+    /// The project cannot be normalized because `poly_project_and_unify_type`\n+    /// is called recursively while normalizing the same projection.\n     Recursive,\n+    // the projection can be normalized, but is not equal to the expected type.\n+    // Returns the type error that arose from the mismatch.\n     MismatchedProjectionTypes(MismatchedProjectionTypes<'tcx>),\n }\n \n@@ -163,19 +176,6 @@ pub(super) enum ProjectAndUnifyResult<'tcx> {\n /// ```\n /// If successful, this may result in additional obligations. Also returns\n /// the projection cache key used to track these additional obligations.\n-///\n-/// ## Returns\n-///\n-/// - `Err(_)`: the projection can be normalized, but is not equal to the\n-///   expected type.\n-/// - `Ok(Err(InProgress))`: this is called recursively while normalizing\n-///   the same projection.\n-/// - `Ok(Ok(None))`: The projection cannot be normalized due to ambiguity\n-///   (resolving some inference variables in the projection may fix this).\n-/// - `Ok(Ok(Some(obligations)))`: The projection bound holds subject to\n-///    the given obligations. If the projection cannot be normalized because\n-///    the required trait bound doesn't hold this returned with `obligations`\n-///    being a predicate that cannot be proven.\n #[instrument(level = \"debug\", skip(selcx))]\n pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,"}]}