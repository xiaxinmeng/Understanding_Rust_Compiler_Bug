{"sha": "a90850995f9f177c910ba548f1a6312353673926", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDg1MDk5NWY5ZjE3N2M5MTBiYTU0OGYxYTYzMTIzNTM2NzM5MjY=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-11-11T02:33:59Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-11-11T02:33:59Z"}, "message": "Fixes for stdio and processes on Redox", "tree": {"sha": "d224a0893e2ae959923286d9cdcc64f820f5939a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d224a0893e2ae959923286d9cdcc64f820f5939a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90850995f9f177c910ba548f1a6312353673926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90850995f9f177c910ba548f1a6312353673926", "html_url": "https://github.com/rust-lang/rust/commit/a90850995f9f177c910ba548f1a6312353673926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90850995f9f177c910ba548f1a6312353673926/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced32a08f3bf7325bf3fe6488e21b108f996abc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced32a08f3bf7325bf3fe6488e21b108f996abc5", "html_url": "https://github.com/rust-lang/rust/commit/ced32a08f3bf7325bf3fe6488e21b108f996abc5"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "26bc46931bd5f6be780979f7bcf4b496cbfc3cbf", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a90850995f9f177c910ba548f1a6312353673926/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90850995f9f177c910ba548f1a6312353673926/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=a90850995f9f177c910ba548f1a6312353673926", "patch": "@@ -28,7 +28,7 @@\n #![panic_runtime]\n #![feature(panic_runtime)]\n #![cfg_attr(unix, feature(libc))]\n-#![cfg_attr(windows, feature(core_intrinsics))]\n+#![cfg_attr(any(target_os = \"redox\", windows), feature(core_intrinsics))]\n \n // Rust's \"try\" function, but if we're aborting on panics we just call the\n // function as there's nothing else we need to do here.\n@@ -61,7 +61,7 @@ pub unsafe extern fn __rust_start_panic(_data: usize, _vtable: usize) -> u32 {\n         libc::abort();\n     }\n \n-    #[cfg(windows)]\n+    #[cfg(any(target_os = \"redox\", windows))]\n     unsafe fn abort() -> ! {\n         core::intrinsics::abort();\n     }"}, {"sha": "b75d9ec6520a4519062de54d60cd91d46eba5d45", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a90850995f9f177c910ba548f1a6312353673926/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90850995f9f177c910ba548f1a6312353673926/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=a90850995f9f177c910ba548f1a6312353673926", "patch": "@@ -69,6 +69,7 @@ mod imp;\n \n // i686-pc-windows-gnu and all others\n #[cfg(any(all(unix, not(target_os = \"emscripten\")),\n+          target_os = \"redox\",\n           all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n #[path = \"gcc.rs\"]\n mod imp;"}, {"sha": "27bc5f0890ce91f223d47eaddbe3cd7d64a071ef", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=a90850995f9f177c910ba548f1a6312353673926", "patch": "@@ -81,11 +81,17 @@ impl Read for StdinRaw {\n }\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n+    #[cfg(not(target_os = \"redox\"))]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    #[cfg(target_os = \"redox\")]\n+    fn flush(&mut self) -> io::Result<()> { self.0.flush() }\n }\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n+    #[cfg(not(target_os = \"redox\"))]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    #[cfg(target_os = \"redox\")]\n+    fn flush(&mut self) -> io::Result<()> { self.0.flush() }\n }\n \n enum Maybe<T> {"}, {"sha": "786d7676612109c734609aa7b791a5c1db94f3ca", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=a90850995f9f177c910ba548f1a6312353673926", "patch": "@@ -50,8 +50,7 @@ impl FileDesc {\n \n     pub fn set_cloexec(&self) -> io::Result<()> {\n         ::sys_common::util::dumb_print(format_args!(\"{}: set cloexec\\n\", self.fd));\n-        //unimplemented!();\n-        Ok(())\n+        unimplemented!();\n     }\n \n     pub fn set_nonblocking(&self, _nonblocking: bool) -> io::Result<()> {"}, {"sha": "934cf20bf07d64dbaa905de86ef7c95c21505c74", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=a90850995f9f177c910ba548f1a6312353673926", "patch": "@@ -264,7 +264,21 @@ impl Command {\n             env::set_var(key, val);\n         }\n \n-        if let Err(err) = libc::exec(&self.program, &args) {\n+        let program = if self.program.contains(':') || self.program.contains('/') {\n+            self.program.to_owned()\n+        } else {\n+            let mut path_env = ::env::var(\"PATH\").unwrap_or(\".\".to_string());\n+\n+            if ! path_env.ends_with('/') {\n+                path_env.push('/');\n+            }\n+\n+            path_env.push_str(&self.program);\n+\n+            path_env\n+        };\n+\n+        if let Err(err) = libc::exec(&program, &args) {\n             io::Error::from_raw_os_error(err.errno as i32)\n         } else {\n             panic!(\"return from exec without err\");"}, {"sha": "50062186903366fca5249a66635c8af719887fb0", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90850995f9f177c910ba548f1a6312353673926/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=a90850995f9f177c910ba548f1a6312353673926", "patch": "@@ -10,6 +10,7 @@\n \n use io;\n use libc;\n+use sys::cvt;\n use sys::fd::FileDesc;\n \n pub struct Stdin(());\n@@ -43,6 +44,10 @@ impl Stdout {\n         fd.into_raw();\n         ret\n     }\n+\n+    pub fn flush(&self) -> io::Result<()> {\n+        cvt(libc::fsync(libc::STDOUT_FILENO)).and(Ok(()))\n+    }\n }\n \n impl Stderr {\n@@ -54,6 +59,10 @@ impl Stderr {\n         fd.into_raw();\n         ret\n     }\n+\n+    pub fn flush(&self) -> io::Result<()> {\n+        cvt(libc::fsync(libc::STDERR_FILENO)).and(Ok(()))\n+    }\n }\n \n // FIXME: right now this raw stderr handle is used in a few places because\n@@ -63,7 +72,10 @@ impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         Stderr::write(self, data)\n     }\n-    fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        cvt(libc::fsync(libc::STDERR_FILENO)).and(Ok(()))\n+    }\n }\n \n pub const EBADF_ERR: i32 = ::libc::EBADF;"}]}