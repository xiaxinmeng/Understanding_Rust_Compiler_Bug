{"sha": "460915be73a95c0cc3c1bcf74059bee9a7e0199a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDkxNWJlNzNhOTVjMGNjM2MxYmNmNzQwNTliZWU5YTdlMDE5OWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T16:27:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T15:42:07Z"}, "message": "make `UniverseIndex` hashable, rename \"sub-\" to \"superuniverse\"\n\nThe only name was silly. U1 can contain everything from U0 *plus* more\nthings.", "tree": {"sha": "b4a3e6fd652536aaf470febce47ca6c8aec6c348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a3e6fd652536aaf470febce47ca6c8aec6c348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460915be73a95c0cc3c1bcf74059bee9a7e0199a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460915be73a95c0cc3c1bcf74059bee9a7e0199a", "html_url": "https://github.com/rust-lang/rust/commit/460915be73a95c0cc3c1bcf74059bee9a7e0199a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460915be73a95c0cc3c1bcf74059bee9a7e0199a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5", "html_url": "https://github.com/rust-lang/rust/commit/28df2bf7b5093bb45845bfaadfcfb91eef5d00d5"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "884aa956556c57fa139e035d88fc3f7c182c37d2", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -593,7 +593,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     where\n         T : TypeFoldable<'tcx>,\n     {\n-        let new_universe = self.create_subuniverse();\n+        let new_universe = self.create_superuniverse();\n \n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n             self.tcx.mk_region(ty::RePlaceholder(ty::Placeholder {"}, {"sha": "f50c6960254ad34d065ee78d5353c59026f744e6", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -1494,12 +1494,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Create and return a new subunivese of the current universe;\n-    /// update `self.universe` to that new subuniverse. At present,\n+    /// update `self.universe` to that new universe. At present,\n     /// used only in the NLL subtyping code, which uses the new\n     /// universe-based scheme instead of the more limited leak-check\n     /// scheme.\n-    pub fn create_subuniverse(&self) -> ty::UniverseIndex {\n-        let u = self.universe.get().subuniverse();\n+    pub fn create_superuniverse(&self) -> ty::UniverseIndex {\n+        let u = self.universe.get().superuniverse();\n         self.universe.set(u);\n         u\n     }"}, {"sha": "3cccac1bedc776df70854efd5ff543951762c483", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -1457,7 +1457,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// presence of `for<..>` binders to control what sets of names are\n /// visible. Universes are arranged into a tree: the root universe\n /// contains names that are always visible. But when you enter into\n-/// some subuniverse, then it may add names that are only visible\n+/// some superuniverse, then it may add names that are only visible\n /// within that subtree (but it can still name the names of its\n /// ancestor universes).\n ///\n@@ -1471,10 +1471,10 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// ```\n ///\n /// The struct name `Foo` is in the root universe U0. But the type\n-/// parameter `T`, introduced on `bar`, is in a subuniverse U1 --\n+/// parameter `T`, introduced on `bar`, is in a superuniverse U1 --\n /// i.e., within `bar`, we can name both `T` and `Foo`, but outside of\n /// `bar`, we cannot name `T`. Then, within the type of `y`, the\n-/// region `'a` is in a subuniverse U2 of U1, because we can name it\n+/// region `'a` is in a superuniverse U2 of U1, because we can name it\n /// inside the fn type but not outside.\n ///\n /// Universes are used to do type- and trait-checking around these\n@@ -1489,52 +1489,54 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// type -- an idealized representative of \"types in general\" that we\n /// use for checking generic functions.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n-pub struct UniverseIndex(u32);\n+pub struct UniverseIndex { private: u32 }\n+\n+impl_stable_hash_for!(struct UniverseIndex { private });\n \n impl UniverseIndex {\n     /// The root universe, where things that the user defined are\n     /// visible.\n-    pub const ROOT: Self = UniverseIndex(0);\n+    pub const ROOT: Self = UniverseIndex { private: 0 };\n \n     /// The \"max universe\" -- this isn't really a valid universe, but\n     /// it's useful sometimes as a \"starting value\" when you are\n     /// taking the minimum of a (non-empty!) set of universes.\n-    pub const MAX: Self = UniverseIndex(::std::u32::MAX);\n+    pub const MAX: Self = UniverseIndex { private: ::std::u32::MAX };\n \n     /// Creates a universe index from the given integer.  Not to be\n     /// used lightly lest you pick a bad value. But sometimes we\n     /// convert universe indices into integers and back for various\n     /// reasons.\n     pub fn from_u32(index: u32) -> Self {\n-        UniverseIndex(index)\n+        UniverseIndex { private: index }\n     }\n \n-    /// A \"subuniverse\" corresponds to being inside a `forall` quantifier.\n+    /// A \"superuniverse\" corresponds to being inside a `forall` quantifier.\n     /// So, for example, suppose we have this type in universe `U`:\n     ///\n     /// ```\n     /// for<'a> fn(&'a u32)\n     /// ```\n     ///\n     /// Once we \"enter\" into this `for<'a>` quantifier, we are in a\n-    /// subuniverse of `U` -- in this new universe, we can name the\n+    /// superuniverse of `U` -- in this new universe, we can name the\n     /// region `'a`, but that region was not nameable from `U` because\n     /// it was not in scope there.\n-    pub fn subuniverse(self) -> UniverseIndex {\n-        UniverseIndex(self.0.checked_add(1).unwrap())\n+    pub fn superuniverse(self) -> UniverseIndex {\n+        UniverseIndex::from_u32(self.private.checked_add(1).unwrap())\n     }\n \n     /// True if the names in this universe are a subset of the names in `other`.\n     pub fn is_subset_of(self, other: UniverseIndex) -> bool {\n-        self.0 <= other.0\n+        self.private <= other.private\n     }\n \n     pub fn as_u32(&self) -> u32 {\n-        self.0\n+        self.private\n     }\n \n     pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+        self.private as usize\n     }\n }\n \n@@ -1546,7 +1548,7 @@ impl fmt::Debug for UniverseIndex {\n \n impl From<u32> for UniverseIndex {\n     fn from(index: u32) -> Self {\n-        UniverseIndex(index)\n+        UniverseIndex::from_u32(index)\n     }\n }\n "}, {"sha": "273799bd4bd34b9d71b0d9c5c2b01e76d680158e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -57,6 +57,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::ty::ClosureKind,\n     ::ty::IntVarValue,\n     ::ty::ParamTy,\n+    ::ty::UniverseIndex,\n     ::ty::Variance,\n     ::syntax_pos::Span,\n }"}, {"sha": "ca5759183c759fd2049eac7cff196b93bacda06d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -112,7 +112,7 @@ struct RegionDefinition<'tcx> {\n     /// Which universe is this region variable defined in? This is\n     /// most often `ty::UniverseIndex::ROOT`, but when we encounter\n     /// forall-quantifiers like `for<'a> { 'a = 'b }`, we would create\n-    /// the variable for `'a` in a subuniverse.\n+    /// the variable for `'a` in a superuniverse.\n     universe: ty::UniverseIndex,\n \n     /// If this is 'static or an early-bound region, then this is"}, {"sha": "3bd3cb2995b383a1c627624769b52406b5a372e3", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -148,7 +148,7 @@ crate enum RegionElement {\n     /// a lifetime parameter).\n     RootUniversalRegion(RegionVid),\n \n-    /// A subuniverse from a subuniverse (e.g., instantiated from a\n+    /// A superuniverse from a superuniverse (e.g., instantiated from a\n     /// `for<'a> fn(&'a u32)` type).\n     PlaceholderRegion(ty::Placeholder),\n }"}, {"sha": "a7657a57451702282a396e8cf356a52431cfa2f5", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460915be73a95c0cc3c1bcf74059bee9a7e0199a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=460915be73a95c0cc3c1bcf74059bee9a7e0199a", "patch": "@@ -159,7 +159,7 @@ trait TypeRelatingDelegate<'tcx> {\n     fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n-    fn next_subuniverse(&mut self) -> ty::UniverseIndex;\n+    fn next_superuniverse(&mut self) -> ty::UniverseIndex;\n \n     /// Creates a new region variable representing a higher-ranked\n     /// region that is instantiated existentially. This creates an\n@@ -218,8 +218,8 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'gcx, 'tcx> {\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n-    fn next_subuniverse(&mut self) -> ty::UniverseIndex {\n-        self.infcx.create_subuniverse()\n+    fn next_superuniverse(&mut self) -> ty::UniverseIndex {\n+        self.infcx.create_superuniverse()\n     }\n \n     fn next_existential_region_var(&mut self) -> ty::Region<'tcx> {\n@@ -324,7 +324,7 @@ where\n                     // new universe for the placeholders we will make\n                     // from here out.\n                     let universe = lazy_universe.unwrap_or_else(|| {\n-                        let universe = delegate.next_subuniverse();\n+                        let universe = delegate.next_superuniverse();\n                         lazy_universe = Some(universe);\n                         universe\n                     });"}]}