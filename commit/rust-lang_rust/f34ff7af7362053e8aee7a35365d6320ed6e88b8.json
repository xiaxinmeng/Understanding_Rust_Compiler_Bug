{"sha": "f34ff7af7362053e8aee7a35365d6320ed6e88b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNGZmN2FmNzM2MjA1M2U4YWVlN2EzNTM2NWQ2MzIwZWQ2ZTg4Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-19T19:20:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-19T19:20:20Z"}, "message": "Auto merge of #25495 - alexcrichton:process-pid, r=aturon\n\nThis commits adds a method to the `std::process` module to get the process\r\nidentifier of the child as a `u32`. On Windows the underlying identifier is\r\nalready a `u32`, and on Unix the type is typically defined as `c_int` (`i32` for\r\nalmost all our supported platforms), but the actually pid is normally a small\r\npositive number.\r\n\r\nEventually we may add functions to load information about a process based on its\r\nidentifier or the ability to terminate a process based on its identifier, but\r\nfor now this function should enable this sort of functionality to exist outside\r\nthe standard library.", "tree": {"sha": "743382e396ca1b5e133b11f313febc9421ed4780", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/743382e396ca1b5e133b11f313febc9421ed4780"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f34ff7af7362053e8aee7a35365d6320ed6e88b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f34ff7af7362053e8aee7a35365d6320ed6e88b8", "html_url": "https://github.com/rust-lang/rust/commit/f34ff7af7362053e8aee7a35365d6320ed6e88b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f34ff7af7362053e8aee7a35365d6320ed6e88b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca207a65c82d7581076772846ef424f1a64449b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca207a65c82d7581076772846ef424f1a64449b", "html_url": "https://github.com/rust-lang/rust/commit/aca207a65c82d7581076772846ef424f1a64449b"}, {"sha": "1ec7a697328fb10e7135b87557ff0a5ea702dd8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec7a697328fb10e7135b87557ff0a5ea702dd8d", "html_url": "https://github.com/rust-lang/rust/commit/1ec7a697328fb10e7135b87557ff0a5ea702dd8d"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "ae9316ddd622b1d3a6fb90a1623cefd89fc49a35", "filename": "src/libstd/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=f34ff7af7362053e8aee7a35365d6320ed6e88b8", "patch": "@@ -456,6 +456,12 @@ impl Child {\n         unsafe { self.handle.kill() }\n     }\n \n+    /// Returns the OS-assigned process identifier associated with this child.\n+    #[unstable(feature = \"process_id\", reason = \"api recently added\")]\n+    pub fn id(&self) -> u32 {\n+        self.handle.id()\n+    }\n+\n     /// Waits for the child to exit completely, returning the status that it\n     /// exited with. This function will continue to have the same return value\n     /// after it has been called at least once."}, {"sha": "f4bc597304097c85b91ca0d17a807e042da92391", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=f34ff7af7362053e8aee7a35365d6320ed6e88b8", "patch": "@@ -315,6 +315,10 @@ impl Process {\n         fail(&mut output)\n     }\n \n+    pub fn id(&self) -> u32 {\n+        self.pid as u32\n+    }\n+\n     pub fn wait(&self) -> io::Result<ExitStatus> {\n         let mut status = 0 as c_int;\n         try!(cvt_r(|| unsafe { c::waitpid(self.pid, &mut status, 0) }));"}, {"sha": "e9b850856e1f86c79b4af6d139c833bb6aa2d913", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=f34ff7af7362053e8aee7a35365d6320ed6e88b8", "patch": "@@ -482,6 +482,7 @@ extern \"system\" {\n                                dwMilliseconds: libc::DWORD) -> libc::DWORD;\n     pub fn SwitchToThread() -> libc::BOOL;\n     pub fn Sleep(dwMilliseconds: libc::DWORD);\n+    pub fn GetProcessId(handle: libc::HANDLE) -> libc::DWORD;\n }\n \n #[link(name = \"userenv\")]"}, {"sha": "bc4762c197e1429eb3fa60133a5ade26bdcd84ba", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f34ff7af7362053e8aee7a35365d6320ed6e88b8/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=f34ff7af7362053e8aee7a35365d6320ed6e88b8", "patch": "@@ -193,6 +193,12 @@ impl Process {\n         Ok(())\n     }\n \n+    pub fn id(&self) -> u32 {\n+        unsafe {\n+            c::GetProcessId(self.handle.raw()) as u32\n+        }\n+    }\n+\n     pub fn wait(&self) -> io::Result<ExitStatus> {\n         use libc::{STILL_ACTIVE, INFINITE, WAIT_OBJECT_0};\n         use libc::{GetExitCodeProcess, WaitForSingleObject};"}]}