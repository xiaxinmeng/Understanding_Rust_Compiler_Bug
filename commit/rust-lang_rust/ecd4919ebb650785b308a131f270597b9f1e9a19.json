{"sha": "ecd4919ebb650785b308a131f270597b9f1e9a19", "node_id": "C_kwDOAAsO6NoAKGVjZDQ5MTllYmI2NTA3ODViMzA4YTEzMWYyNzA1OTdiOWYxZTlhMTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T03:39:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T06:32:14Z"}, "message": "Remove unnecessary sigils around `Symbol::as_str()` calls.", "tree": {"sha": "19c124024c4f5b0dee44fd664bf6ea317cd36c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19c124024c4f5b0dee44fd664bf6ea317cd36c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd4919ebb650785b308a131f270597b9f1e9a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd4919ebb650785b308a131f270597b9f1e9a19", "html_url": "https://github.com/rust-lang/rust/commit/ecd4919ebb650785b308a131f270597b9f1e9a19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd4919ebb650785b308a131f270597b9f1e9a19/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a89a063ba05e2f1fc608cbccf42378f25de298a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89a063ba05e2f1fc608cbccf42378f25de298a7", "html_url": "https://github.com/rust-lang/rust/commit/a89a063ba05e2f1fc608cbccf42378f25de298a7"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "489945b513da4a975740c70031cb53cf9cd22e15", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -486,7 +486,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribut\n \n fn check_semver(cx: &LateContext<'_>, span: Span, lit: &Lit) {\n     if let LitKind::Str(is, _) = lit.kind {\n-        if Version::parse(&is.as_str()).is_ok() {\n+        if Version::parse(is.as_str()).is_ok() {\n             return;\n         }\n     }\n@@ -619,7 +619,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                     MetaItemKind::Word => {\n                         if_chain! {\n                             if let Some(ident) = meta.ident();\n-                            if let Some(os) = find_os(&*ident.name.as_str());\n+                            if let Some(os) = find_os(ident.name.as_str());\n                             then {\n                                 mismatched.push((os, ident.span));\n                             }"}, {"sha": "43ad0f7605c106bdf4ce1a4899a99c955e295a00", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -272,7 +272,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                 .copied()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| {\n-                    let path: &str = &path.ident.name.as_str();\n+                    let path: &str = path.ident.name.as_str();\n                     a == path\n                 })\n                 .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, args[0].span)?, neg_method)))"}, {"sha": "31cc3698592b35d26440a901ef34a3cb926bda92", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -321,8 +321,8 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let TyKind::Path(QPath::Resolved(None, tp)) = &ty.kind;\n         if let [int] = &*tp.segments;\n         then {\n-            let name = &int.ident.name.as_str();\n-            candidates.iter().find(|c| name == *c).copied()\n+            let name = int.ident.name.as_str();\n+            candidates.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }\n@@ -335,8 +335,8 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n         if let QPath::Resolved(_, path) = *path;\n         if let [ty] = &*path.segments;\n         then {\n-            let name = &ty.ident.name.as_str();\n-            INTS.iter().find(|c| name == *c).copied()\n+            let name = ty.ident.name.as_str();\n+            INTS.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }"}, {"sha": "3650e4f91a001020c8952f518ae89af0b3bc3a19", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -437,7 +437,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n \n     for attr in attrs {\n         if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n+            let (comment, current_spans) = strip_doc_comment_decoration(comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym::doc) {"}, {"sha": "689ac6184bffb1d7b5762a5e6dc9bc47474b5d08", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -153,7 +153,7 @@ fn check_variant(\n             );\n         }\n     }\n-    let first = &def.variants[0].ident.name.as_str();\n+    let first = def.variants[0].ident.name.as_str();\n     let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n     let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n     for var in def.variants {"}, {"sha": "6903073fbcd85760aaba967cf135d9f37d0165d8", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n             if let LitKind::Float(sym, lit_float_ty) = lit.node;\n             then {\n                 let sym_str = sym.as_str();\n-                let formatter = FloatFormat::new(&sym_str);\n+                let formatter = FloatFormat::new(sym_str);\n                 // Try to bail out if the float is for sure fine.\n                 // If its within the 2 decimal digits of being out of precision we\n                 // check if the parsed representation is the same as the string"}, {"sha": "5098ea349f9aa05fc3a98804bd134f16f6a6c997", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -696,7 +696,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             let recv_ty = cx.typeck_results().expr_ty(&args[0]);\n \n             if recv_ty.is_floating_point() {\n-                match &*path.ident.name.as_str() {\n+                match path.ident.name.as_str() {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),"}, {"sha": "0af6b3b7d464ef67ab1e7b1ba16dcbe2ac802dca", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -42,7 +42,7 @@ declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n impl LateLintPass<'_> for IterNotReturningIterator {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n-        let name: &str = &impl_item.ident.name.as_str();\n+        let name = impl_item.ident.name.as_str();\n         if_chain! {\n             if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n             let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "ba895f35faa267a1d7e0545bdc6f8bdf978f3afd", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -31,7 +31,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let mut applicability = Applicability::MaybeIncorrect;\n             let is_empty_sugg = \"next().is_none()\".to_string();\n-            let method_name = &*method.ident.name.as_str();\n+            let method_name = method.ident.name.as_str();\n             let sugg = if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n                         is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n                         is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n@@ -210,7 +210,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n                     if let Some(hir_id) = self.current_statement_hir_id {\n                         self.hir_id_uses_map.insert(hir_id, self.uses.len());\n                     }\n-                    match &*method_name.ident.name.as_str() {\n+                    match method_name.ident.name.as_str() {\n                         \"into_iter\" => self.uses.push(Some(IterFunction {\n                             func: IterFunctionKind::IntoIter,\n                             span: expr.span,"}, {"sha": "98acd1c1a75b2b0d3e5310166bb3dc828d3c2da1", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -966,7 +966,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                         for pat in inner.iter() {\n                             if let PatKind::Binding(_, id, ident, None) = pat.kind {\n                                 if ident.as_str().starts_with('_') && !is_local_used(cx, arm.body, id) {\n-                                    ident_bind_name = (&ident.name.as_str()).to_string();\n+                                    ident_bind_name = ident.name.as_str().to_string();\n                                     matching_wild = true;\n                                 }\n                             }"}, {"sha": "6ae334d902995c236def94ed8ea16a45af4393da", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -2154,7 +2154,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n-                    &item.ident.name.as_str(),\n+                    item.ident.name.as_str(),\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,"}, {"sha": "566e15ab2a6d640aff7e55090733d58c4313762b", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -75,7 +75,7 @@ impl LateLintPass<'_> for ImportRename {\n             if let Some(import) = match snip.split_once(\" as \") {\n                 None => Some(snip.as_str()),\n                 Some((import, rename)) => {\n-                    if rename.trim() == &*name.as_str() {\n+                    if rename.trim() == name.as_str() {\n                         None\n                     } else {\n                         Some(import.trim())"}, {"sha": "25fbcb3c6094bb828802221a63e3b8c539654921", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -224,14 +224,14 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n                     if existing_name.len - count != 1\n-                        || levenstein_not_1(&interned_name, &existing_name.interned.as_str())\n+                        || levenstein_not_1(&interned_name, existing_name.interned.as_str())\n                     {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n                     if count - existing_name.len != 1\n-                        || levenstein_not_1(&existing_name.interned.as_str(), &interned_name)\n+                        || levenstein_not_1(existing_name.interned.as_str(), &interned_name)\n                     {\n                         continue;\n                     }"}, {"sha": "4722c031006be465d66049cbab8acfc4ea59c4a8", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -104,7 +104,7 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n     };\n     if_chain! {\n         if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n-        let name = &*mac_name.as_str();\n+        let name = mac_name.as_str();\n         if let Some(braces) = mac_braces.macro_braces.get(name);\n         if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n         // we must check only invocation sites"}, {"sha": "e58ca95fa042000639a305af32ea1aa8999b2f7b", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(&*path_lit.as_str());\n+            if let pushed_path = Path::new(path_lit.as_str());\n             if let Some(pushed_path_lit) = pushed_path.to_str();\n             if pushed_path.has_root();\n             if let Some(root) = pushed_path.components().next();"}, {"sha": "b6d04334de9e50e71b538e4f81cb40b525c65036", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -150,7 +150,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n \n     if let ExprKind::Lit(ref lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {\n-            let r = &r.as_str();\n+            let r = r.as_str();\n             let offset = if let StrStyle::Raw(n) = style { 2 + n } else { 1 };\n             match parser.parse(r) {\n                 Ok(r) => {"}, {"sha": "20e38dc564eb4138e197cbe05c2e8975fb58fdeb", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -89,7 +89,7 @@ fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option\n     if_chain! {\n         if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n         if let Some(slice) = &args.get(0);\n-        if let Some(method) = SortingKind::from_stable_name(&method_name.ident.name.as_str());\n+        if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n             let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");"}, {"sha": "60f0ffde0940f5e8e7d85ac429998929bf71037b", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -330,7 +330,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if let ExprKind::MethodCall(path, _, [recv], _) = &e.kind;\n             if path.ident.name == sym!(into_bytes);\n             if let ExprKind::MethodCall(path, _, [recv], _) = &recv.kind;\n-            if matches!(&*path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n+            if matches!(path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n             if let ExprKind::Lit(lit) = &recv.kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;\n "}, {"sha": "6d9aff474214c30420508b7390b28d874f2e5f32", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {\n-                        let result = match &*symbol.as_str() {\n+                        let result = match symbol.as_str() {\n                             \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n                             \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n                             _ => return,"}, {"sha": "bfd17a6874994390a025d51c58922b10f99ed6b6", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -94,7 +94,7 @@ impl EarlyLintPass for UnusedUnit {\n \n         if_chain! {\n             if segments.len() == 1;\n-            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&&*segments[0].ident.name.as_str());\n+            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&segments[0].ident.name.as_str());\n             if let Some(args) = &segments[0].args;\n             if let ast::GenericArgs::Parenthesized(generic_args) = &**args;\n             if let ast::FnRetTy::Ty(ty) = &generic_args.output;"}, {"sha": "f9add927b49b86d7c3b993750b91993decb6fba8", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -371,9 +371,9 @@ impl EarlyLintPass for Write {\n /// Return this and a boolean indicating whether it only consisted of a newline.\n fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n     let sp = fmtstr.span;\n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n-    if *contents == r\"\\n\" {\n+    if contents == r\"\\n\" {\n         return (sp, true);\n     }\n \n@@ -484,7 +484,7 @@ impl Write {\n             StrStyle::Raw(n) => Some(n as usize),\n         };\n \n-        let mut parser = Parser::new(&str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n+        let mut parser = Parser::new(str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n         let mut args = SimpleFormatArgs::default();\n \n         while let Some(arg) = parser.next() {\n@@ -589,7 +589,7 @@ impl Write {\n                     lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n-                LitKind::Byte | LitKind::Char => match &*lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -671,7 +671,7 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     let mut last_was_cr = false;\n     let mut should_lint = false;\n \n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n     let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n         let c = c.unwrap();"}, {"sha": "25a84d16650896e090c49bfa0f68237f9a616b9d", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -113,7 +113,7 @@ pub fn get_attr<'a>(\n fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n-            if let Ok(value) = FromStr::from_str(&value.as_str()) {\n+            if let Ok(value) = FromStr::from_str(value.as_str()) {\n                 f(value);\n             } else {\n                 sess.span_err(attr.span, \"not a number\");"}, {"sha": "61e529a6079c935b65c3345b68dffaf5fded8f9e", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -47,7 +47,7 @@ impl ops::BitOrAssign for EagernessSuggestion {\n /// Determine the eagerness of the given function call.\n fn fn_eagerness(cx: &LateContext<'tcx>, fn_id: DefId, name: Symbol, args: &'tcx [Expr<'_>]) -> EagernessSuggestion {\n     use EagernessSuggestion::{Eager, Lazy, NoChange};\n-    let name = &*name.as_str();\n+    let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n         Some(id) => cx.tcx.type_of(id),"}, {"sha": "1a4da1627b7842eecb83d3f85f5f7f3271cad66b", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd4919ebb650785b308a131f270597b9f1e9a19/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=ecd4919ebb650785b308a131f270597b9f1e9a19", "patch": "@@ -372,7 +372,7 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n                 crate::meets_msrv(\n                     msrv,\n-                    &RustcVersion::parse(&since.as_str())\n+                    &RustcVersion::parse(since.as_str())\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {"}]}