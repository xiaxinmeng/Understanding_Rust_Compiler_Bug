{"sha": "2025a96ee1a699722da73993995b6f0572374757", "node_id": "C_kwDOAAsO6NoAKDIwMjVhOTZlZTFhNjk5NzIyZGE3Mzk5Mzk5NWI2ZjA1NzIzNzQ3NTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-06T04:42:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T03:17:14Z"}, "message": "Fast path some binder relations", "tree": {"sha": "67eadd15bfb397233abc546c4ee44e52050f2ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67eadd15bfb397233abc546c4ee44e52050f2ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2025a96ee1a699722da73993995b6f0572374757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2025a96ee1a699722da73993995b6f0572374757", "html_url": "https://github.com/rust-lang/rust/commit/2025a96ee1a699722da73993995b6f0572374757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2025a96ee1a699722da73993995b6f0572374757/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed9749324aed9e97741abf569a022353e269a9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9749324aed9e97741abf569a022353e269a9df", "html_url": "https://github.com/rust-lang/rust/commit/ed9749324aed9e97741abf569a022353e269a9df"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "17f932e78a105516238a42bad2dd8c1fe64fa02e", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -178,6 +178,11 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n+        // A binder is equal to itself if it's structually equal to itself\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n         if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n             self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;\n             self.fields.higher_ranked_sub(b, a, self.a_is_expected)?;"}, {"sha": "21b68ce998997a6826645c6ad0036f2af522bb7d", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -103,6 +103,11 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n+        // GLB of a binder and itself is just itself\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n         if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n             // When higher-ranked types are involved, computing the GLB is"}, {"sha": "c07ac1d3ace92a4375b03797534a725c7b26911e", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -103,6 +103,11 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n+        // LUB of a binder and itself is just itself\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n         if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n             // When higher-ranked types are involved, computing the LUB is"}, {"sha": "79a1afa469e894769f346884482635f53c9bf37d", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -213,6 +213,11 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n+        // A binder is always a subtype of itself if it's structually equal to itself\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n         self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;\n         Ok(a)\n     }"}, {"sha": "e480414a35896ff91136efc8eaa49c456186fb35", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -235,7 +235,7 @@ pub struct ImplHeader<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, TypeFoldable, TypeVisitable)]\n pub enum ImplSubject<'tcx> {\n     Trait(TraitRef<'tcx>),\n     Inherent(Ty<'tcx>),"}, {"sha": "1873bf0711fc4d1f3403c65dc4bce3ca3edb7826", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -106,7 +106,7 @@ pub trait TypeRelation<'tcx>: Sized {\n         T: Relate<'tcx>;\n }\n \n-pub trait Relate<'tcx>: TypeFoldable<'tcx> + Copy {\n+pub trait Relate<'tcx>: TypeFoldable<'tcx> + PartialEq + Copy {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Self,\n@@ -351,7 +351,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug, Clone, TypeFoldable, TypeVisitable)]\n+#[derive(PartialEq, Copy, Debug, Clone, TypeFoldable, TypeVisitable)]\n struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);\n \n impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {"}, {"sha": "64033c351b1bfbdf60e9f9e7033c1c69c8ceb016", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -217,7 +217,7 @@ static_assert_size!(TyKind<'_>, 32);\n /// * `GR`: The \"return type\", which is the type of value returned upon\n ///   completion of the generator.\n /// * `GW`: The \"generator witness\".\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with a tuple containing the types of the upvars.\n@@ -348,7 +348,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n }\n \n /// Similar to `ClosureSubsts`; see the above documentation for more.\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub struct GeneratorSubsts<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }"}, {"sha": "d34b7a29623cfcfa30ee313b3d1779ecf493ebcf", "filename": "src/test/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.rs?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -0,0 +1,16 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+\n+fn id(\n+    f: &dyn Fn(u32),\n+) -> &dyn Fn(\n+    &dyn Fn(\n+        &dyn Fn(\n+            &dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(u32))))))))),\n+        ),\n+    ),\n+) {\n+    f\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "71e196c32276e4b3c62360eba1fa0a4df5e87dda", "filename": "src/test/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2025a96ee1a699722da73993995b6f0572374757/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2025a96ee1a699722da73993995b6f0572374757/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr?ref=2025a96ee1a699722da73993995b6f0572374757", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/hang-on-deeply-nested-dyn.rs:12:5\n+   |\n+LL |   ) -> &dyn Fn(\n+   |  ______-\n+LL | |     &dyn Fn(\n+LL | |         &dyn Fn(\n+LL | |             &dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(&dyn Fn(u32))))))))),\n+LL | |         ),\n+LL | |     ),\n+LL | | ) {\n+   | |_- expected `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn Fn(u32) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a))` because of return type\n+LL |       f\n+   |       ^ expected reference, found `u32`\n+   |\n+   = note: expected reference `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a ...) + 'a)) + 'a)) + 'a))`\n+           the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/hang-on-deeply-nested-dyn/hang-on-deeply-nested-dyn.long-type-hash.txt'\n+              found reference `&dyn Fn(u32)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}