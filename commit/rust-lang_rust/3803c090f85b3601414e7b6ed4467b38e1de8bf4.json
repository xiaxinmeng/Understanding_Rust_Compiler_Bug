{"sha": "3803c090f85b3601414e7b6ed4467b38e1de8bf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDNjMDkwZjg1YjM2MDE0MTRlN2I2ZWQ0NDY3YjM4ZTFkZThiZjQ=", "commit": {"author": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2021-05-29T08:08:00Z"}, "committer": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2021-05-29T08:08:00Z"}, "message": "Rename IoSlice(Mut)::advance to advance_slice\n\nTo make way for a new IoSlice(Mut)::advance function that advances a\nsingle slice.\n\nAlso changes the signature to accept a `&mut &mut [IoSlice]`, not\nreturning anything. This will better match the future IoSlice::advance\nfunction.", "tree": {"sha": "8e3dc94e00c0425a8ba807f1c72f833a642489e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e3dc94e00c0425a8ba807f1c72f833a642489e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3803c090f85b3601414e7b6ed4467b38e1de8bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3803c090f85b3601414e7b6ed4467b38e1de8bf4", "html_url": "https://github.com/rust-lang/rust/commit/3803c090f85b3601414e7b6ed4467b38e1de8bf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3803c090f85b3601414e7b6ed4467b38e1de8bf4/comments", "author": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4664725ae03ef9becae413a1e56b5010f88fdc46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4664725ae03ef9becae413a1e56b5010f88fdc46", "html_url": "https://github.com/rust-lang/rust/commit/4664725ae03ef9becae413a1e56b5010f88fdc46"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "39b5ba41843c6ec6bb4199e31c2a5eed3db796ae", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3803c090f85b3601414e7b6ed4467b38e1de8bf4/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3803c090f85b3601414e7b6ed4467b38e1de8bf4/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=3803c090f85b3601414e7b6ed4467b38e1de8bf4", "patch": "@@ -253,6 +253,7 @@ mod tests;\n \n use crate::cmp;\n use crate::fmt;\n+use crate::mem::replace;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n use crate::slice;\n@@ -1070,13 +1071,13 @@ impl<'a> IoSliceMut<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as read.\n-    /// bufs = IoSliceMut::advance(bufs, 10);\n+    /// IoSliceMut::advance_slice(&mut bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     /// ```\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n     #[inline]\n-    pub fn advance<'b>(bufs: &'b mut [IoSliceMut<'a>], n: usize) -> &'b mut [IoSliceMut<'a>] {\n+    pub fn advance_slice(bufs: &mut &mut [IoSliceMut<'a>], n: usize) {\n         // Number of buffers to remove.\n         let mut remove = 0;\n         // Total length of all the to be removed buffers.\n@@ -1090,11 +1091,10 @@ impl<'a> IoSliceMut<'a> {\n             }\n         }\n \n-        let bufs = &mut bufs[remove..];\n+        *bufs = &mut replace(bufs, &mut [])[remove..];\n         if !bufs.is_empty() {\n             bufs[0].0.advance(n - accumulated_len)\n         }\n-        bufs\n     }\n }\n \n@@ -1179,12 +1179,12 @@ impl<'a> IoSlice<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as written.\n-    /// bufs = IoSlice::advance(bufs, 10);\n+    /// IoSlice::advance_slice(&mut bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n     #[inline]\n-    pub fn advance<'b>(bufs: &'b mut [IoSlice<'a>], n: usize) -> &'b mut [IoSlice<'a>] {\n+    pub fn advance_slice(bufs: &mut &mut [IoSlice<'a>], n: usize) {\n         // Number of buffers to remove.\n         let mut remove = 0;\n         // Total length of all the to be removed buffers.\n@@ -1198,11 +1198,10 @@ impl<'a> IoSlice<'a> {\n             }\n         }\n \n-        let bufs = &mut bufs[remove..];\n+        *bufs = &mut replace(bufs, &mut [])[remove..];\n         if !bufs.is_empty() {\n             bufs[0].0.advance(n - accumulated_len)\n         }\n-        bufs\n     }\n }\n \n@@ -1511,7 +1510,7 @@ pub trait Write {\n     fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {\n         // Guarantee that bufs is empty if it contains no data,\n         // to avoid calling write_vectored if there is no data to be written.\n-        bufs = IoSlice::advance(bufs, 0);\n+        IoSlice::advance_slice(&mut bufs, 0);\n         while !bufs.is_empty() {\n             match self.write_vectored(bufs) {\n                 Ok(0) => {\n@@ -1520,7 +1519,7 @@ pub trait Write {\n                         &\"failed to write whole buffer\",\n                     ));\n                 }\n-                Ok(n) => bufs = IoSlice::advance(bufs, n),\n+                Ok(n) => IoSlice::advance_slice(&mut bufs, n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }"}, {"sha": "0618a03a68084ec08ece29dd51b56b511d6b9c3b", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3803c090f85b3601414e7b6ed4467b38e1de8bf4/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3803c090f85b3601414e7b6ed4467b38e1de8bf4/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=3803c090f85b3601414e7b6ed4467b38e1de8bf4", "patch": "@@ -353,7 +353,7 @@ fn test_read_to_end_capacity() -> io::Result<()> {\n }\n \n #[test]\n-fn io_slice_mut_advance() {\n+fn io_slice_mut_advance_slice() {\n     let mut buf1 = [1; 8];\n     let mut buf2 = [2; 16];\n     let mut buf3 = [3; 8];\n@@ -364,75 +364,75 @@ fn io_slice_mut_advance() {\n     ][..];\n \n     // Only in a single buffer..\n-    bufs = IoSliceMut::advance(bufs, 1);\n+    IoSliceMut::advance_slice(&mut bufs, 1);\n     assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n     assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n     // Removing a buffer, leaving others as is.\n-    bufs = IoSliceMut::advance(bufs, 7);\n+    IoSliceMut::advance_slice(&mut bufs, 7);\n     assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n     // Removing a buffer and removing from the next buffer.\n-    bufs = IoSliceMut::advance(bufs, 18);\n+    IoSliceMut::advance_slice(&mut bufs, 18);\n     assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n }\n \n #[test]\n-fn io_slice_mut_advance_empty_slice() {\n-    let empty_bufs = &mut [][..];\n+fn io_slice_mut_advance_slice_empty_slice() {\n+    let mut empty_bufs = &mut [][..];\n     // Shouldn't panic.\n-    IoSliceMut::advance(empty_bufs, 1);\n+    IoSliceMut::advance_slice(&mut empty_bufs, 1);\n }\n \n #[test]\n-fn io_slice_mut_advance_beyond_total_length() {\n+fn io_slice_mut_advance_slice_beyond_total_length() {\n     let mut buf1 = [1; 8];\n     let mut bufs = &mut [IoSliceMut::new(&mut buf1)][..];\n \n     // Going beyond the total length should be ok.\n-    bufs = IoSliceMut::advance(bufs, 9);\n+    IoSliceMut::advance_slice(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n \n #[test]\n-fn io_slice_advance() {\n+fn io_slice_advance_slice() {\n     let buf1 = [1; 8];\n     let buf2 = [2; 16];\n     let buf3 = [3; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1), IoSlice::new(&buf2), IoSlice::new(&buf3)][..];\n \n     // Only in a single buffer..\n-    bufs = IoSlice::advance(bufs, 1);\n+    IoSlice::advance_slice(&mut bufs, 1);\n     assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n     assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n     // Removing a buffer, leaving others as is.\n-    bufs = IoSlice::advance(bufs, 7);\n+    IoSlice::advance_slice(&mut bufs, 7);\n     assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n     // Removing a buffer and removing from the next buffer.\n-    bufs = IoSlice::advance(bufs, 18);\n+    IoSlice::advance_slice(&mut bufs, 18);\n     assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n }\n \n #[test]\n-fn io_slice_advance_empty_slice() {\n-    let empty_bufs = &mut [][..];\n+fn io_slice_advance_slice_empty_slice() {\n+    let mut empty_bufs = &mut [][..];\n     // Shouldn't panic.\n-    IoSlice::advance(empty_bufs, 1);\n+    IoSlice::advance_slice(&mut empty_bufs, 1);\n }\n \n #[test]\n-fn io_slice_advance_beyond_total_length() {\n+fn io_slice_advance_slice_beyond_total_length() {\n     let buf1 = [1; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1)][..];\n \n     // Going beyond the total length should be ok.\n-    bufs = IoSlice::advance(bufs, 9);\n+    IoSlice::advance_slice(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n "}]}