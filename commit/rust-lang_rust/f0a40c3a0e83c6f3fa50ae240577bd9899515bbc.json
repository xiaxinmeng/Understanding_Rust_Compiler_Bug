{"sha": "f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "node_id": "C_kwDOAAsO6NoAKGYwYTQwYzNhMGU4M2M2ZjNmYTUwYWUyNDA1NzdiZDk4OTk1MTViYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T12:17:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T12:17:24Z"}, "message": "Auto merge of #14583 - Veykril:macro-def-err, r=Veykril\n\ninternal: Report macro definition errors on the definition\n\nWe still report them on the call site as well for the time being, and the diagnostic doesn't know where the error in the definition comes from, but that can be done later on", "tree": {"sha": "3e4eb6d58cb5170989a3b0e3281e5f2d77a0b0ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4eb6d58cb5170989a3b0e3281e5f2d77a0b0ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "html_url": "https://github.com/rust-lang/rust/commit/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3888fd601ad33d1689e41e4f150c882e10e2243", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3888fd601ad33d1689e41e4f150c882e10e2243", "html_url": "https://github.com/rust-lang/rust/commit/a3888fd601ad33d1689e41e4f150c882e10e2243"}, {"sha": "a5558cdfe50dc105d31c93edb6848a07005e7d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5558cdfe50dc105d31c93edb6848a07005e7d85", "html_url": "https://github.com/rust-lang/rust/commit/a5558cdfe50dc105d31c93edb6848a07005e7d85"}], "stats": {"total": 129, "additions": 115, "deletions": 14}, "files": [{"sha": "928aadfbcccabc0fd51eda026bec0b8eb53510f9", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -190,8 +190,9 @@ impl Expander {\n \n         let file_id = call_id.as_file();\n \n-        let raw_node = match db.parse_or_expand(file_id) {\n-            Some(it) => it,\n+        let raw_node = match db.parse_or_expand_with_err(file_id) {\n+            // FIXME: report parse errors\n+            Some(it) => it.syntax_node(),\n             None => {\n                 // Only `None` if the macro expansion produced no usable AST.\n                 if err.is_none() {"}, {"sha": "6d2c88660f934a797a6e16a1cf9cd2952aa3b92a", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -641,7 +641,12 @@ impl<'a> AssocItemCollector<'a> {\n                     self.items.push((item.name.clone(), def.into()));\n                 }\n                 AssocItem::MacroCall(call) => {\n-                    if let Some(root) = self.db.parse_or_expand(self.expander.current_file_id()) {\n+                    if let Some(root) =\n+                        self.db.parse_or_expand_with_err(self.expander.current_file_id())\n+                    {\n+                        // FIXME: report parse errors\n+                        let root = root.syntax_node();\n+\n                         let call = &item_tree[call];\n \n                         let ast_id_map = self.db.ast_id_map(self.expander.current_file_id());"}, {"sha": "1d625fa3c7c9ed071a49f726da80dc065125ab01", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -1374,6 +1374,8 @@ impl DefCollector<'_> {\n \n         // Then, fetch and process the item tree. This will reuse the expansion result from above.\n         let item_tree = self.db.file_item_tree(file_id);\n+        // FIXME: report parse errors for the macro expansion here\n+\n         let mod_dir = self.mod_dirs[&module_id].clone();\n         ModCollector {\n             def_collector: &mut *self,"}, {"sha": "a57896e5460f53346f36427b0af5b940b73cf8d2", "filename": "crates/hir-def/src/nameres/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -34,6 +34,8 @@ pub enum DefDiagnosticKind {\n     InvalidDeriveTarget { ast: AstId<ast::Item>, id: usize },\n \n     MalformedDerive { ast: AstId<ast::Adt>, id: usize },\n+\n+    MacroDefError { ast: AstId<ast::Macro>, message: String },\n }\n \n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "d93f3b08d336cc8781ef60fdb048f29e89c12ae7", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -99,6 +99,8 @@ pub trait ExpandDatabase: SourceDatabase {\n     /// file or a macro expansion.\n     #[salsa::transparent]\n     fn parse_or_expand(&self, file_id: HirFileId) -> Option<SyntaxNode>;\n+    #[salsa::transparent]\n+    fn parse_or_expand_with_err(&self, file_id: HirFileId) -> Option<Parse<SyntaxNode>>;\n     /// Implementation for the macro case.\n     fn parse_macro_expansion(\n         &self,\n@@ -252,13 +254,23 @@ fn parse_or_expand(db: &dyn ExpandDatabase, file_id: HirFileId) -> Option<Syntax\n     match file_id.repr() {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n-            // FIXME: Note how we convert from `Parse` to `SyntaxNode` here,\n-            // forgetting about parse errors.\n             db.parse_macro_expansion(macro_file).value.map(|(it, _)| it.syntax_node())\n         }\n     }\n }\n \n+fn parse_or_expand_with_err(\n+    db: &dyn ExpandDatabase,\n+    file_id: HirFileId,\n+) -> Option<Parse<SyntaxNode>> {\n+    match file_id.repr() {\n+        HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).to_syntax()),\n+        HirFileIdRepr::MacroFile(macro_file) => {\n+            db.parse_macro_expansion(macro_file).value.map(|(parse, _)| parse)\n+        }\n+    }\n+}\n+\n fn parse_macro_expansion(\n     db: &dyn ExpandDatabase,\n     macro_file: MacroFile,"}, {"sha": "6b646f5e4fa101a25a3a511fc8ab8079fc3010b2", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -187,7 +187,10 @@ fn lazy_expand(\n     );\n \n     let err = db.macro_expand_error(id);\n-    let value = db.parse_or_expand(id.as_file()).map(|node| InFile::new(id.as_file(), node));\n+    let value =\n+        db.parse_or_expand_with_err(id.as_file()).map(|node| InFile::new(id.as_file(), node));\n+    // FIXME: report parse errors\n+    let value = value.map(|it| it.map(|it| it.syntax_node()));\n \n     ExpandResult { value, err }\n }"}, {"sha": "b735decfcb34c2809722d04483bbcf49e3c9f1f1", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -39,6 +39,7 @@ diagnostics![\n     InvalidDeriveTarget,\n     IncoherentImpl,\n     MacroError,\n+    MacroDefError,\n     MalformedDerive,\n     MismatchedArgCount,\n     MissingFields,\n@@ -131,6 +132,13 @@ pub struct MacroError {\n     pub message: String,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct MacroDefError {\n+    pub node: InFile<AstPtr<ast::Macro>>,\n+    pub message: String,\n+    pub name: Option<TextRange>,\n+}\n+\n #[derive(Debug)]\n pub struct UnimplementedBuiltinMacro {\n     pub node: InFile<SyntaxNodePtr>,"}, {"sha": "7e9b89db7a1f60bfd77e9a5cd30583300fbce3a4", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -46,6 +46,7 @@ use hir_def::{\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::ReprOptions,\n+    macro_id_to_def_id,\n     nameres::{self, diagnostics::DefDiagnostic, ModuleOrigin},\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n@@ -86,12 +87,12 @@ pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n         AnyDiagnostic, BreakOutsideOfLoop, ExpectedFunction, InactiveCode, IncoherentImpl,\n-        IncorrectCase, InvalidDeriveTarget, MacroError, MalformedDerive, MismatchedArgCount,\n-        MissingFields, MissingMatchArms, MissingUnsafe, NeedMut, NoSuchField, PrivateAssocItem,\n-        PrivateField, ReplaceFilterMapNextWithFindMap, TypeMismatch, UndeclaredLabel,\n-        UnimplementedBuiltinMacro, UnreachableLabel, UnresolvedExternCrate, UnresolvedField,\n-        UnresolvedImport, UnresolvedMacroCall, UnresolvedMethodCall, UnresolvedModule,\n-        UnresolvedProcMacro, UnusedMut,\n+        IncorrectCase, InvalidDeriveTarget, MacroDefError, MacroError, MalformedDerive,\n+        MismatchedArgCount, MissingFields, MissingMatchArms, MissingUnsafe, NeedMut, NoSuchField,\n+        PrivateAssocItem, PrivateField, ReplaceFilterMapNextWithFindMap, TypeMismatch,\n+        UndeclaredLabel, UnimplementedBuiltinMacro, UnreachableLabel, UnresolvedExternCrate,\n+        UnresolvedField, UnresolvedImport, UnresolvedMacroCall, UnresolvedMethodCall,\n+        UnresolvedModule, UnresolvedProcMacro, UnusedMut,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope, TypeInfo, VisibleTraits},\n@@ -563,6 +564,7 @@ impl Module {\n             }\n             emit_def_diagnostic(db, acc, diag);\n         }\n+\n         for decl in self.declarations(db) {\n             match decl {\n                 ModuleDef::Module(m) => {\n@@ -601,9 +603,11 @@ impl Module {\n                     }\n                     acc.extend(decl.diagnostics(db))\n                 }\n+                ModuleDef::Macro(m) => emit_macro_def_diagnostics(db, acc, m),\n                 _ => acc.extend(decl.diagnostics(db)),\n             }\n         }\n+        self.legacy_macros(db).into_iter().for_each(|m| emit_macro_def_diagnostics(db, acc, m));\n \n         let inherent_impls = db.inherent_impls_in_crate(self.id.krate());\n \n@@ -685,8 +689,31 @@ impl Module {\n     }\n }\n \n+fn emit_macro_def_diagnostics(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, m: Macro) {\n+    let id = macro_id_to_def_id(db.upcast(), m.id);\n+    if let Err(e) = db.macro_def(id) {\n+        let Some(ast) = id.ast_id().left() else {\n+                never!(\"MacroDefError for proc-macro: {:?}\", e);\n+                return;\n+            };\n+        emit_def_diagnostic_(\n+            db,\n+            acc,\n+            &DefDiagnosticKind::MacroDefError { ast, message: e.to_string() },\n+        );\n+    }\n+}\n+\n fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag: &DefDiagnostic) {\n-    match &diag.kind {\n+    emit_def_diagnostic_(db, acc, &diag.kind)\n+}\n+\n+fn emit_def_diagnostic_(\n+    db: &dyn HirDatabase,\n+    acc: &mut Vec<AnyDiagnostic>,\n+    diag: &DefDiagnosticKind,\n+) {\n+    match diag {\n         DefDiagnosticKind::UnresolvedModule { ast: declaration, candidates } => {\n             let decl = declaration.to_node(db.upcast());\n             acc.push(\n@@ -794,6 +821,17 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                 None => stdx::never!(\"derive diagnostic on item without derive attribute\"),\n             }\n         }\n+        DefDiagnosticKind::MacroDefError { ast, message } => {\n+            let node = ast.to_node(db.upcast());\n+            acc.push(\n+                MacroDefError {\n+                    node: InFile::new(ast.file_id, AstPtr::new(&node)),\n+                    name: node.name().map(|it| it.syntax().text_range()),\n+                    message: message.clone(),\n+                }\n+                .into(),\n+            );\n+        }\n     }\n }\n "}, {"sha": "af74015cf993d368cb87f336ce8b9c3490a285a8", "filename": "crates/ide-diagnostics/src/handlers/macro_error.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmacro_error.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -9,6 +9,16 @@ pub(crate) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) ->\n     Diagnostic::new(\"macro-error\", d.message.clone(), display_range).experimental()\n }\n \n+// Diagnostic: macro-error\n+//\n+// This diagnostic is shown for macro expansion errors.\n+pub(crate) fn macro_def_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroDefError) -> Diagnostic {\n+    // Use more accurate position if available.\n+    let display_range =\n+        ctx.resolve_precise_location(&d.node.clone().map(|it| it.syntax_node_ptr()), d.name);\n+    Diagnostic::new(\"macro-def-error\", d.message.clone(), display_range).experimental()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::{\n@@ -188,6 +198,7 @@ fn f() {\n       \"#,\n         );\n     }\n+\n     #[test]\n     fn dollar_crate_in_builtin_macro() {\n         check_diagnostics(\n@@ -209,6 +220,24 @@ macro_rules! outer {\n fn f() {\n     outer!();\n } //^^^^^^^^ error: leftover tokens\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn def_diagnostic() {\n+        check_diagnostics(\n+            r#\"\n+macro_rules! foo {\n+           //^^^ error: expected subtree\n+    f => {};\n+}\n+\n+fn f() {\n+    foo!();\n+  //^^^ error: invalid macro definition: expected subtree\n+\n+}\n \"#,\n         )\n     }"}, {"sha": "59976ecf29cf87e7518f53f93b38082a977dc2fc", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a40c3a0e83c6f3fa50ae240577bd9899515bbc/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=f0a40c3a0e83c6f3fa50ae240577bd9899515bbc", "patch": "@@ -249,7 +249,7 @@ pub fn diagnostics(\n \n     let mut diags = Vec::new();\n     if let Some(m) = module {\n-        m.diagnostics(db, &mut diags)\n+        m.diagnostics(db, &mut diags);\n     }\n \n     for diag in diags {\n@@ -263,6 +263,7 @@ pub fn diagnostics(\n             AnyDiagnostic::IncoherentImpl(d) => handlers::incoherent_impl::incoherent_impl(&ctx, &d),\n             AnyDiagnostic::IncorrectCase(d) => handlers::incorrect_case::incorrect_case(&ctx, &d),\n             AnyDiagnostic::InvalidDeriveTarget(d) => handlers::invalid_derive_target::invalid_derive_target(&ctx, &d),\n+            AnyDiagnostic::MacroDefError(d) => handlers::macro_error::macro_def_error(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => handlers::macro_error::macro_error(&ctx, &d),\n             AnyDiagnostic::MalformedDerive(d) => handlers::malformed_derive::malformed_derive(&ctx, &d),\n             AnyDiagnostic::MismatchedArgCount(d) => handlers::mismatched_arg_count::mismatched_arg_count(&ctx, &d),"}]}