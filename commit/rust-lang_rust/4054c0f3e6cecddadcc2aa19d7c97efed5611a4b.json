{"sha": "4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "node_id": "C_kwDOAAsO6NoAKDQwNTRjMGYzZTZjZWNkZGFkY2MyYWExOWQ3Yzk3ZWZlZDU2MTFhNGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-12T13:06:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-05-15T11:38:26Z"}, "message": "Reduce clean::Type size by replacing a DefId (only used to check for display) with a boolean", "tree": {"sha": "81b14c8e599d98ed98d5c05b3456f5ce56a8a830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b14c8e599d98ed98d5c05b3456f5ce56a8a830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "html_url": "https://github.com/rust-lang/rust/commit/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1ec3260d79497080ca86540562d410ba67d2a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ec3260d79497080ca86540562d410ba67d2a95", "html_url": "https://github.com/rust-lang/rust/commit/e1ec3260d79497080ca86540562d410ba67d2a95"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "e133372bc2303d677357538c89c8cac04b4bbaae", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "patch": "@@ -384,15 +384,24 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n         let lifted = self.lift_to_tcx(cx.tcx).unwrap();\n         let trait_ = lifted.trait_ref(cx.tcx).clean(cx);\n         let self_type = self.self_ty().clean(cx);\n+        let self_def_id = self_type.def_id(&cx.cache);\n+        let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n         Type::QPath {\n             assoc: Box::new(projection_to_path_segment(*self, cx)),\n-            self_def_id: self_type.def_id(&cx.cache),\n+            should_show_cast,\n             self_type: box self_type,\n             trait_,\n         }\n     }\n }\n \n+fn compute_should_show_cast(self_def_id: Option<DefId>, trait_: &Path, self_type: &Type) -> bool {\n+    !trait_.segments.is_empty()\n+        && self_def_id\n+            .zip(Some(trait_.def_id()))\n+            .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_)\n+}\n+\n fn projection_to_path_segment(ty: ty::ProjectionTy<'_>, cx: &mut DocContext<'_>) -> PathSegment {\n     let item = cx.tcx.associated_item(ty.item_def_id);\n     let generics = cx.tcx.generics_of(ty.item_def_id);\n@@ -421,8 +430,12 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     // the cleaning process of the type itself. To resolve this and have the\n                     // `self_def_id` set, we override it here.\n                     // See https://github.com/rust-lang/rust/issues/85454\n-                    if let QPath { ref mut self_def_id, .. } = default {\n-                        *self_def_id = Some(cx.tcx.parent(self.def_id));\n+                    if let QPath { ref mut should_show_cast, ref trait_, ref self_type, .. } =\n+                        default\n+                    {\n+                        let self_def_id = cx.tcx.parent(self.def_id);\n+                        *should_show_cast =\n+                            compute_should_show_cast(self_def_id, trait_, self_type);\n                     }\n \n                     Some(default)\n@@ -1309,10 +1322,13 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 segments: trait_segments.iter().map(|x| x.clean(cx)).collect(),\n             };\n             register_res(cx, trait_.res);\n+            let self_def_id = DefId::local(qself.hir_id.owner.local_def_index);\n+            let self_type = qself.clean(cx);\n+            let should_show_cast = compute_should_show_cast(Some(self_def_id), &trait_, &self_type);\n             Type::QPath {\n                 assoc: Box::new(p.segments.last().expect(\"segments were empty\").clean(cx)),\n-                self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n-                self_type: box qself.clean(cx),\n+                should_show_cast,\n+                self_type: box self_type,\n                 trait_,\n             }\n         }\n@@ -1326,10 +1342,13 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             };\n             let trait_ = hir::Path { span, res, segments: &[] }.clean(cx);\n             register_res(cx, trait_.res);\n+            let self_def_id = res.opt_def_id();\n+            let self_type = qself.clean(cx);\n+            let should_show_cast = compute_should_show_cast(self_def_id, &trait_, &self_type);\n             Type::QPath {\n                 assoc: Box::new(segment.clean(cx)),\n-                self_def_id: res.opt_def_id(),\n-                self_type: box qself.clean(cx),\n+                should_show_cast,\n+                self_type: box self_type,\n                 trait_,\n             }\n         }"}, {"sha": "0bbfc6d6af0fbba54b066e824ff32f240a62de6e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "patch": "@@ -1560,10 +1560,8 @@ crate enum Type {\n     QPath {\n         assoc: Box<PathSegment>,\n         self_type: Box<Type>,\n-        /// FIXME: This is a hack that should be removed; see [this discussion][1].\n-        ///\n-        /// [1]: https://github.com/rust-lang/rust/pull/85479#discussion_r635729093\n-        self_def_id: Option<DefId>,\n+        /// FIXME: compute this field on demand.\n+        should_show_cast: bool,\n         trait_: Path,\n     },\n \n@@ -1576,7 +1574,7 @@ crate enum Type {\n \n // `Type` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Type, 80);\n+rustc_data_structures::static_assert_size!(Type, 72);\n \n impl Type {\n     /// When comparing types for equality, it can help to ignore `&` wrapping.\n@@ -2180,7 +2178,7 @@ crate enum GenericArg {\n // `GenericArg` can occur many times in a single `Path`, so make sure it\n // doesn't increase in size unexpectedly.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericArg, 88);\n+rustc_data_structures::static_assert_size!(GenericArg, 80);\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericArgs {"}, {"sha": "abfeb96f6bfd41c3caefa956e21f2a832195b115", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4054c0f3e6cecddadcc2aa19d7c97efed5611a4b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4054c0f3e6cecddadcc2aa19d7c97efed5611a4b", "patch": "@@ -982,11 +982,7 @@ fn fmt_type<'cx>(\n                 write!(f, \"impl {}\", print_generic_bounds(bounds, cx))\n             }\n         }\n-        clean::QPath { ref assoc, ref self_type, ref trait_, ref self_def_id } => {\n-            let should_show_cast = !trait_.segments.is_empty()\n-                && self_def_id\n-                    .zip(Some(trait_.def_id()))\n-                    .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_);\n+        clean::QPath { ref assoc, ref self_type, ref trait_, should_show_cast } => {\n             if f.alternate() {\n                 if should_show_cast {\n                     write!(f, \"<{:#} as {:#}>::\", self_type.print(cx), trait_.print(cx))?"}]}