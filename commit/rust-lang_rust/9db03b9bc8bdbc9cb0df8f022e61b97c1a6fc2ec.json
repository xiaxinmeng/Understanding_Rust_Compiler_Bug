{"sha": "9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "node_id": "C_kwDOAAsO6NoAKDlkYjAzYjliYzhiZGJjOWNiMGRmOGYwMjJlNjFiOTdjMWE2ZmMyZWM", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-06T17:33:23Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-07T00:52:52Z"}, "message": "suggest swapping a struct and a trait\n\nfmt", "tree": {"sha": "3e85069a5a4f413d3135157e0170fa8f519d1a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e85069a5a4f413d3135157e0170fa8f519d1a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "html_url": "https://github.com/rust-lang/rust/commit/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d", "html_url": "https://github.com/rust-lang/rust/commit/395a09c3dafe0c7838c9ca41d2b47bb5e79a5b6d"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "688ba89c689c8c913fb4261ae56e4af44d6eeaf1", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -496,6 +496,9 @@ struct DiagnosticMetadata<'ast> {\n \n     /// The current impl items (used to suggest).\n     current_impl_items: Option<&'ast [P<AssocItem>]>,\n+\n+    /// When processing impl trait\n+    currently_processing_impl_trait: Option<(TraitRef, Ty)>,\n }\n \n struct LateResolutionVisitor<'a, 'b, 'ast> {\n@@ -2066,18 +2069,22 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn with_optional_trait_ref<T>(\n         &mut self,\n         opt_trait_ref: Option<&TraitRef>,\n+        self_type: &'ast Ty,\n         f: impl FnOnce(&mut Self, Option<DefId>) -> T,\n     ) -> T {\n         let mut new_val = None;\n         let mut new_id = None;\n         if let Some(trait_ref) = opt_trait_ref {\n             let path: Vec<_> = Segment::from_path(&trait_ref.path);\n+            self.diagnostic_metadata.currently_processing_impl_trait =\n+                Some((trait_ref.clone(), self_type.clone()));\n             let res = self.smart_resolve_path_fragment(\n                 None,\n                 &path,\n                 PathSource::Trait(AliasPossibility::No),\n                 Finalize::new(trait_ref.ref_id, trait_ref.path.span),\n             );\n+            self.diagnostic_metadata.currently_processing_impl_trait = None;\n             if let Some(def_id) = res.base_res().opt_def_id() {\n                 new_id = Some(def_id);\n                 new_val = Some((self.r.expect_module(def_id), trait_ref.clone()));\n@@ -2118,7 +2125,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             this.with_self_rib(Res::SelfTy { trait_: None, alias_to: None }, |this| {\n                 this.with_lifetime_rib(LifetimeRibKind::AnonymousCreateParameter(item_id), |this| {\n                     // Resolve the trait reference, if necessary.\n-                    this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n+                    this.with_optional_trait_ref(opt_trait_reference.as_ref(), self_type, |this, trait_id| {\n                         let item_def_id = this.r.local_def_id(item_id);\n \n                         // Register the trait definitions from here."}, {"sha": "2266b4a1ecbe5b3c51946ba3c5d0927342a911d3", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -145,6 +145,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n \n+        debug!(?res, ?source);\n+\n         // Make the base error.\n         struct BaseError<'a> {\n             msg: String,\n@@ -248,6 +250,25 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let code = source.error_code(res.is_some());\n         let mut err =\n             self.r.session.struct_span_err_with_code(base_error.span, &base_error.msg, code);\n+        if let Some((trait_ref, self_ty)) =\n+            self.diagnostic_metadata.currently_processing_impl_trait.clone()\n+            && let TyKind::Path(_, self_ty_path) = &self_ty.kind\n+            && let PathResult::Module(ModuleOrUniformRoot::Module(module)) = self.resolve_path(&Segment::from_path(self_ty_path), Some(TypeNS), None)\n+            && let ModuleKind::Def(DefKind::Trait, ..) = module.kind\n+            && trait_ref.path.span == span\n+            && let PathSource::Trait(_) = source\n+            && let Some(Res::Def(DefKind::Struct, _)) = res\n+            && let Ok(self_ty_str) =\n+                self.r.session.source_map().span_to_snippet(self_ty.span)\n+            && let Ok(trait_ref_str) =\n+                self.r.session.source_map().span_to_snippet(trait_ref.path.span)\n+        {\n+                err.multipart_suggestion(\n+                    \"consider swapping the struct and the trait\",\n+                    vec![(trait_ref.path.span, self_ty_str), (self_ty.span, trait_ref_str)],\n+                    Applicability::MaybeIncorrect,\n+                );\n+        }\n \n         if let Some(sugg) = base_error.suggestion {\n             err.span_suggestion_verbose(sugg.0, sugg.1, sugg.2, Applicability::MaybeIncorrect);"}, {"sha": "456cf6dbe270d7edfa687d1b3c34a6f6e9453395", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -338,7 +338,7 @@ impl<'a> FileNameDisplay<'a> {\n     pub fn to_string_lossy(&self) -> Cow<'a, str> {\n         match self.inner {\n             FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),\n-            _ => Cow::from(format!(\"{}\", self)),\n+            _ => Cow::from(self.to_string()),\n         }\n     }\n }"}, {"sha": "a32e943daf8924ad6329dfa74175bd69f8bb0928", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.rs?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+\n+pub trait Trait<'a, T> {}\n+\n+pub struct Struct<T> {}\n+\n+impl<'a, T> Struct<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found struct `Struct`\n+//~| ERROR trait objects must include the `dyn` keyword\n+\n+fn main() {}"}, {"sha": "aa9d09a797b7e02bb5c8524cd88650bdf4608b42", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -0,0 +1,27 @@\n+error[E0404]: expected trait, found struct `Struct`\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:7:13\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^^ not a trait\n+   |\n+help: consider swapping the struct and the trait\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~~\n+\n+error[E0782]: trait objects must include the `dyn` keyword\n+  --> $DIR/suggest-swapping-self-ty-and-trait-edition-2021.rs:7:27\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |                           ^^^^^^^^^^^^\n+   |\n+help: add `dyn` keyword before this trait\n+   |\n+LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n+LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   | \n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0404, E0782.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "d74cc86f7eac03f2dff677243349b69049ae1b4f", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.rs?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -0,0 +1,10 @@\n+pub trait Trait<'a, T> {}\n+\n+pub struct Struct<T> {}\n+\n+impl<'a, T> Struct<T> for Trait<'a, T> {}\n+//~^ ERROR expected trait, found struct `Struct`\n+//~| WARNING trait objects without an explicit `dyn` are deprecated\n+//~| WARNING this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+\n+fn main() {}"}, {"sha": "f5f22f03cd9ac33c36aee660ced37c91fe945fd1", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr?ref=9db03b9bc8bdbc9cb0df8f022e61b97c1a6fc2ec", "patch": "@@ -0,0 +1,29 @@\n+error[E0404]: expected trait, found struct `Struct`\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:5:13\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |             ^^^^^^^^^ not a trait\n+   |\n+help: consider swapping the struct and the trait\n+   |\n+LL | impl<'a, T> Trait<'a, T> for Struct<T> {}\n+   |             ~~~~~~~~~~~~     ~~~~~~~~~\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/suggest-swapping-self-ty-and-trait.rs:5:27\n+   |\n+LL | impl<'a, T> Struct<T> for Trait<'a, T> {}\n+   |                           ^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+help: use `dyn`\n+   |\n+LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n+LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n+   | \n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0404`."}]}