{"sha": "955d2eea452b82f7286de902424d2cf5d4b78401", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NWQyZWVhNDUyYjgyZjcyODZkZTkwMjQyNGQyY2Y1ZDRiNzg0MDE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T17:44:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-21T17:44:05Z"}, "message": "add test loggin API to db", "tree": {"sha": "8bb3a522b44b70b39164f2ec3daa8ae2e551f6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb3a522b44b70b39164f2ec3daa8ae2e551f6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955d2eea452b82f7286de902424d2cf5d4b78401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955d2eea452b82f7286de902424d2cf5d4b78401", "html_url": "https://github.com/rust-lang/rust/commit/955d2eea452b82f7286de902424d2cf5d4b78401", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955d2eea452b82f7286de902424d2cf5d4b78401/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f36cef7d33edb7624f041d6eec7e597e2d6d80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f36cef7d33edb7624f041d6eec7e597e2d6d80b", "html_url": "https://github.com/rust-lang/rust/commit/1f36cef7d33edb7624f041d6eec7e597e2d6d80b"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "7c28c9a2b13f08d253c4d69b3861494e6c9eb311", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/955d2eea452b82f7286de902424d2cf5d4b78401/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955d2eea452b82f7286de902424d2cf5d4b78401/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=955d2eea452b82f7286de902424d2cf5d4b78401", "patch": "@@ -1,5 +1,6 @@\n use std::sync::Arc;\n \n+use parking_lot::Mutex;\n use ra_editor::LineIndex;\n use ra_syntax::{SourceFileNode, SyntaxNode};\n use salsa::{self, Database};\n@@ -18,6 +19,11 @@ use crate::{\n \n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n+    #[cfg(test)]\n+    events: Mutex<Option<Vec<salsa::Event<RootDatabase>>>>,\n+    #[cfg(not(test))]\n+    events: (),\n+\n     runtime: salsa::Runtime<RootDatabase>,\n     id_maps: IdMaps,\n }\n@@ -26,11 +32,22 @@ impl salsa::Database for RootDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n         &self.runtime\n     }\n+\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<RootDatabase>) {\n+        #[cfg(test)]\n+        {\n+            let mut events = self.events.lock();\n+            if let Some(events) = &mut *events {\n+                events.push(event());\n+            }\n+        }\n+    }\n }\n \n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n+            events: Default::default(),\n             runtime: salsa::Runtime::default(),\n             id_maps: IdMaps::default(),\n         };\n@@ -55,6 +72,7 @@ pub(crate) fn check_canceled(db: &impl salsa::Database) -> Cancelable<()> {\n impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n+            events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n             id_maps: self.id_maps.clone(),\n         })\n@@ -67,6 +85,29 @@ impl IdDatabase for RootDatabase {\n     }\n }\n \n+#[cfg(test)]\n+impl RootDatabase {\n+    pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<RootDatabase>> {\n+        *self.events.lock() = Some(Vec::new());\n+        f();\n+        let events = self.events.lock().take().unwrap();\n+        events\n+    }\n+\n+    pub(crate) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n+        let events = self.log(f);\n+        events\n+            .into_iter()\n+            .filter_map(|e| match e.kind {\n+                // This pretty horrible, but `Debug` is the only way to inspect\n+                // QueryDescriptor at the moment.\n+                salsa::EventKind::WillExecute { descriptor } => Some(format!(\"{:?}\", descriptor)),\n+                _ => None,\n+            })\n+            .collect()\n+    }\n+}\n+\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl crate::input::FilesDatabase {"}, {"sha": "648ec5e434eea87e714a07ec427f5559cdc0e5b1", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/955d2eea452b82f7286de902424d2cf5d4b78401/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955d2eea452b82f7286de902424d2cf5d4b78401/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=955d2eea452b82f7286de902424d2cf5d4b78401", "patch": "@@ -358,7 +358,8 @@ where\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        mock_analysis::analysis_and_position,\n+        AnalysisChange,\n+        mock_analysis::{MockAnalysis, analysis_and_position},\n         descriptors::{DescriptorDatabase, module::ModuleDescriptor},\n         input::FilesDatabase,\n };\n@@ -396,4 +397,65 @@ mod tests {\n         let resolution = &item_map.per_module[&module_id].items[&name];\n         assert!(resolution.def_id.is_some());\n     }\n+\n+    #[test]\n+    fn typing_inside_a_function_should_not_invalidate_item_map() {\n+        let mock_analysis = MockAnalysis::with_files(\n+            \"\n+            //- /lib.rs\n+            mod foo;\n+\n+            use crate::foo::bar::Baz;\n+\n+            fn foo() -> i32 {\n+                1 + 1\n+            }\n+            //- /foo/mod.rs\n+            pub mod bar;\n+\n+            //- /foo/bar.rs\n+            pub struct Baz;\n+        \",\n+        );\n+\n+        let file_id = mock_analysis.id_of(\"/lib.rs\");\n+        let mut host = mock_analysis.analysis_host();\n+\n+        let source_root = host.analysis().imp.db.file_source_root(file_id);\n+\n+        {\n+            let db = host.analysis().imp.db;\n+            let events = db.log_executed(|| {\n+                db._item_map(source_root).unwrap();\n+            });\n+            assert!(format!(\"{:?}\", events).contains(\"_item_map\"))\n+        }\n+\n+        let mut change = AnalysisChange::new();\n+\n+        change.change_file(\n+            file_id,\n+            \"\n+            mod foo;\n+\n+            use crate::foo::bar::Baz;\n+\n+            fn foo() -> i32 { 92 }\n+        \"\n+            .to_string(),\n+        );\n+\n+        host.apply_change(change);\n+\n+        {\n+            let db = host.analysis().imp.db;\n+            let events = db.log_executed(|| {\n+                db._item_map(source_root).unwrap();\n+            });\n+            // assert!(\n+            //     !format!(\"{:?}\", events).contains(\"_item_map\"),\n+            //     \"{:#?}\", events\n+            // )\n+        }\n+    }\n }"}]}