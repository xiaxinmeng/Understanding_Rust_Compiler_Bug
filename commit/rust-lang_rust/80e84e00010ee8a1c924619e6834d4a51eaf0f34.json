{"sha": "80e84e00010ee8a1c924619e6834d4a51eaf0f34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTg0ZTAwMDEwZWU4YTFjOTI0NjE5ZTY4MzRkNGE1MWVhZjBmMzQ=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-05-30T15:38:15Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-05-31T10:50:14Z"}, "message": "Use RHS's struct def ID for error messages in pattern matching\n\nFixes #14541", "tree": {"sha": "b66bc8664595ce4735b7673189012d0ee88e5c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66bc8664595ce4735b7673189012d0ee88e5c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e84e00010ee8a1c924619e6834d4a51eaf0f34", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e84e00010ee8a1c924619e6834d4a51eaf0f34", "html_url": "https://github.com/rust-lang/rust/commit/80e84e00010ee8a1c924619e6834d4a51eaf0f34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e84e00010ee8a1c924619e6834d4a51eaf0f34/comments", "author": null, "committer": null, "parents": [{"sha": "faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "html_url": "https://github.com/rust-lang/rust/commit/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "36606ae816e3c140f8aee82b95e1ab91f3c17971", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80e84e00010ee8a1c924619e6834d4a51eaf0f34/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e84e00010ee8a1c924619e6834d4a51eaf0f34/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=80e84e00010ee8a1c924619e6834d4a51eaf0f34", "patch": "@@ -298,9 +298,8 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n /// `etc` is true if the pattern said '...' and false otherwise.\n pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n                                span: Span,\n-                               path: &ast::Path,\n                                fields: &[ast::FieldPat],\n-                               class_fields: Vec<ty::field_ty> ,\n+                               class_fields: Vec<ty::field_ty>,\n                                class_id: ast::DefId,\n                                substitutions: &ty::substs,\n                                etc: bool) {\n@@ -333,13 +332,12 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n                 found_fields.insert(index);\n             }\n             None => {\n-                let name = pprust::path_to_str(path);\n                 // Check the pattern anyway, so that attempts to look\n                 // up its type won't fail\n                 check_pat(pcx, field.pat, ty::mk_err());\n                 tcx.sess.span_err(span,\n                     format!(\"struct `{}` does not have a field named `{}`\",\n-                            name,\n+                            ty::item_path_str(tcx, class_id),\n                             token::get_ident(field.ident)).as_slice());\n             }\n         }\n@@ -390,7 +388,7 @@ pub fn check_struct_pat(pcx: &pat_ctxt, pat_id: ast::NodeId, span: Span,\n         }\n     }\n \n-    check_struct_pat_fields(pcx, span, path, fields, class_fields, struct_id,\n+    check_struct_pat_fields(pcx, span, fields, class_fields, struct_id,\n                             substitutions, etc);\n }\n \n@@ -413,7 +411,7 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n             // Get the struct fields from this struct-like enum variant.\n             let class_fields = ty::lookup_struct_fields(tcx, variant_id);\n \n-            check_struct_pat_fields(pcx, span, path, fields, class_fields,\n+            check_struct_pat_fields(pcx, span, fields, class_fields,\n                                     variant_id, substitutions, etc);\n         }\n         Some(&ast::DefStruct(..)) | Some(&ast::DefVariant(..)) => {"}, {"sha": "2dcfeac513c3273c778bb1d8654a08f9e5bd954b", "filename": "src/test/compile-fail/issue-14541.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80e84e00010ee8a1c924619e6834d4a51eaf0f34/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e84e00010ee8a1c924619e6834d4a51eaf0f34/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs?ref=80e84e00010ee8a1c924619e6834d4a51eaf0f34", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct vec2 { y: f32 }\n+struct vec3 { y: f32, z: f32 }\n+\n+fn make(v: vec2) {\n+    let vec3 { y: _, z: _ } = v;\n+    //~^ ERROR mismatched types: expected `vec2` but found `vec3`\n+    //~^^ ERROR struct `vec2` does not have a field named `z`\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}]}