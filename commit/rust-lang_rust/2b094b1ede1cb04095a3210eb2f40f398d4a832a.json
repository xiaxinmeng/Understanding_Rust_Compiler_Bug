{"sha": "2b094b1ede1cb04095a3210eb2f40f398d4a832a", "node_id": "C_kwDOAAsO6NoAKDJiMDk0YjFlZGUxY2IwNDA5NWEzMjEwZWIyZjQwZjM5OGQ0YTgzMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-18T22:01:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-18T22:01:39Z"}, "message": "Auto merge of #105446 - erikdesjardins:vt-size, r=nikic\n\nAdd 0..=isize::MAX range metadata to size loads from vtables\n\nThis is the (much belated) size counterpart to #91569.\n\nInspired by https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Range.20metadata.20for.20.60size_of_val.60.20and.20other.20isize.3A.3AMAX.20limits. This could help optimize layout computations based on the size of a dyn trait. Though, admittedly, adding this to vtables wouldn't be as beneficial as adding it to slice len, which is used much more often.\n\nMiri detects this UB already: https://github.com/rust-lang/rust/blob/b7cc99142ad0cfe47e2fe9f7a82eaf5b672c0573/compiler/rustc_const_eval/src/interpret/traits.rs#L119-L121\n(In fact Miri goes further, [assuming a 48-bit address space on 64-bit platforms](https://github.com/rust-lang/rust/blob/9db224fc908059986c179fc6ec433944e9cfce50/compiler/rustc_abi/src/lib.rs#L312-L331), but I don't think we can assume that in an optimization.)", "tree": {"sha": "ec3775f15dcec456448837bfa51911bc1af0c194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec3775f15dcec456448837bfa51911bc1af0c194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b094b1ede1cb04095a3210eb2f40f398d4a832a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b094b1ede1cb04095a3210eb2f40f398d4a832a", "html_url": "https://github.com/rust-lang/rust/commit/2b094b1ede1cb04095a3210eb2f40f398d4a832a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b094b1ede1cb04095a3210eb2f40f398d4a832a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0dc9efff14ac0a1eeceffd1e605e37eeb8362a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dc9efff14ac0a1eeceffd1e605e37eeb8362a0", "html_url": "https://github.com/rust-lang/rust/commit/d0dc9efff14ac0a1eeceffd1e605e37eeb8362a0"}, {"sha": "e01d944c6c33a76cdbd1a257743d8c41a8203e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01d944c6c33a76cdbd1a257743d8c41a8203e89", "html_url": "https://github.com/rust-lang/rust/commit/e01d944c6c33a76cdbd1a257743d8c41a8203e89"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "4582d3c6badf99491254930d6e7c0f3ee6d7cff8", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b094b1ede1cb04095a3210eb2f40f398d4a832a/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b094b1ede1cb04095a3210eb2f40f398d4a832a/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=2b094b1ede1cb04095a3210eb2f40f398d4a832a", "patch": "@@ -774,6 +774,18 @@ impl Integer {\n         }\n     }\n \n+    /// Returns the largest signed value that can be represented by this Integer.\n+    #[inline]\n+    pub fn signed_max(self) -> i128 {\n+        match self {\n+            I8 => i8::MAX as i128,\n+            I16 => i16::MAX as i128,\n+            I32 => i32::MAX as i128,\n+            I64 => i64::MAX as i128,\n+            I128 => i128::MAX,\n+        }\n+    }\n+\n     /// Finds the smallest Integer type which can represent the signed value.\n     #[inline]\n     pub fn fit_signed(x: i128) -> Integer {"}, {"sha": "0f6e6032f9bffb68a2a7098886643f284cb40ea0", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b094b1ede1cb04095a3210eb2f40f398d4a832a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b094b1ede1cb04095a3210eb2f40f398d4a832a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=2b094b1ede1cb04095a3210eb2f40f398d4a832a", "patch": "@@ -29,6 +29,9 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let align = meth::VirtualIndex::from_index(ty::COMMON_VTABLE_ENTRIES_ALIGN)\n                 .get_usize(bx, vtable);\n \n+            // Size is always <= isize::MAX.\n+            let size_bound = bx.data_layout().ptr_sized_integer().signed_max() as u128;\n+            bx.range_metadata(size, WrappingRange { start: 0, end: size_bound });\n             // Alignment is always nonzero.\n             bx.range_metadata(align, WrappingRange { start: 1, end: !0 });\n "}, {"sha": "a75609260eda49f874c909be5583d6693d98c148", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b094b1ede1cb04095a3210eb2f40f398d4a832a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b094b1ede1cb04095a3210eb2f40f398d4a832a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=2b094b1ede1cb04095a3210eb2f40f398d4a832a", "patch": "@@ -110,10 +110,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     _ => bug!(),\n                 };\n                 let value = meth::VirtualIndex::from_index(idx).get_usize(bx, vtable);\n-                if name == sym::vtable_align {\n+                match name {\n+                    // Size is always <= isize::MAX.\n+                    sym::vtable_size => {\n+                        let size_bound = bx.data_layout().ptr_sized_integer().signed_max() as u128;\n+                        bx.range_metadata(value, WrappingRange { start: 0, end: size_bound });\n+                    },\n                     // Alignment is always nonzero.\n-                    bx.range_metadata(value, WrappingRange { start: 1, end: !0 });\n-                };\n+                    sym::vtable_align => bx.range_metadata(value, WrappingRange { start: 1, end: !0 }),\n+                    _ => {}\n+                }\n                 value\n             }\n             sym::pref_align_of"}, {"sha": "54f6e7f992fe65f3bdbdfa3d953ada730ab4b3dd", "filename": "src/test/codegen/dst-vtable-align-nonzero.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b094b1ede1cb04095a3210eb2f40f398d4a832a/src%2Ftest%2Fcodegen%2Fdst-vtable-align-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b094b1ede1cb04095a3210eb2f40f398d4a832a/src%2Ftest%2Fcodegen%2Fdst-vtable-align-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdst-vtable-align-nonzero.rs?ref=2b094b1ede1cb04095a3210eb2f40f398d4a832a", "patch": "@@ -1,6 +1,7 @@\n-// compile-flags: -O\n+// compile-flags: -O -Z merge-functions=disabled\n \n #![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n \n // This test checks that we annotate alignment loads from vtables with nonzero range metadata,\n // and that this allows LLVM to eliminate redundant `align >= 1` checks.\n@@ -42,4 +43,19 @@ pub fn does_not_eliminate_runtime_check_when_align_2(\n     &x.dst\n }\n \n+// CHECK-LABEL: @align_load_from_align_of_val\n+#[no_mangle]\n+pub fn align_load_from_align_of_val(x: &dyn Trait) -> usize {\n+    // CHECK: {{%[0-9]+}} = load [[USIZE]], {{.+}} !range [[RANGE_META]]\n+    core::mem::align_of_val(x)\n+}\n+\n+// CHECK-LABEL: @align_load_from_vtable_align_intrinsic\n+#[no_mangle]\n+pub unsafe fn align_load_from_vtable_align_intrinsic(x: &dyn Trait) -> usize {\n+    let (data, vtable): (*const (), *const ()) = core::mem::transmute(x);\n+    // CHECK: {{%[0-9]+}} = load [[USIZE]], {{.+}} !range [[RANGE_META]]\n+    core::intrinsics::vtable_align(vtable)\n+}\n+\n // CHECK: [[RANGE_META]] = !{[[USIZE]] 1, [[USIZE]] 0}"}, {"sha": "671c8abdebd275ba60960fa7033a55308740e025", "filename": "src/test/codegen/dst-vtable-size-range.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2b094b1ede1cb04095a3210eb2f40f398d4a832a/src%2Ftest%2Fcodegen%2Fdst-vtable-size-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b094b1ede1cb04095a3210eb2f40f398d4a832a/src%2Ftest%2Fcodegen%2Fdst-vtable-size-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdst-vtable-size-range.rs?ref=2b094b1ede1cb04095a3210eb2f40f398d4a832a", "patch": "@@ -0,0 +1,35 @@\n+// compile-flags: -O -Z merge-functions=disabled\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+// Check that we annotate size loads from vtables with 0..(isize::MAX + 1) range metadata.\n+\n+pub trait Trait {\n+    fn f(&self);\n+}\n+\n+// Note that rustc uses inclusive bounds, but LLVM uses exclusive bounds for range metadata.\n+// CHECK-LABEL: @generate_exclusive_bound\n+#[no_mangle]\n+pub fn generate_exclusive_bound() -> usize {\n+    // CHECK: ret [[USIZE:i[0-9]+]] [[EXCLUSIVE_BOUND:[-0-9]+]]\n+    isize::MAX as usize + 1\n+}\n+\n+// CHECK-LABEL: @size_load_from_size_of_val\n+#[no_mangle]\n+pub fn size_load_from_size_of_val(x: &dyn Trait) -> usize {\n+    // CHECK: {{%[0-9]+}} = load [[USIZE]], {{.+}} !range [[RANGE_META:![0-9]+]]\n+    core::mem::size_of_val(x)\n+}\n+\n+// CHECK-LABEL: @size_load_from_vtable_size_intrinsic\n+#[no_mangle]\n+pub unsafe fn size_load_from_vtable_size_intrinsic(x: &dyn Trait) -> usize {\n+    let (data, vtable): (*const (), *const ()) = core::mem::transmute(x);\n+    // CHECK: {{%[0-9]+}} = load [[USIZE]], {{.+}} !range [[RANGE_META]]\n+    core::intrinsics::vtable_size(vtable)\n+}\n+\n+// CHECK: [[RANGE_META]] = !{[[USIZE]] 0, [[USIZE]] [[EXCLUSIVE_BOUND]]}"}]}