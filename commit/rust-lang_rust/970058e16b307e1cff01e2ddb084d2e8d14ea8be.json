{"sha": "970058e16b307e1cff01e2ddb084d2e8d14ea8be", "node_id": "C_kwDOAAsO6NoAKDk3MDA1OGUxNmIzMDdlMWNmZjAxZTJkZGIwODRkMmU4ZDE0ZWE4YmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-11T00:35:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-11T00:35:36Z"}, "message": "Auto merge of #112512 - matthiaskrgr:rollup-o2jh1jx, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #112475 (Fix issue for module name when surround the struct literal with parentheses)\n - #112477 (Give more helpful progress messages in `Assemble`)\n - #112484 (Fix ntdll linkage issues on Windows UWP platforms)\n - #112492 (Migrate GUI colors test to original CSS color format)\n - #112493 (iat selection: normalize self ty & completely erase bound vars)\n - #112497 (abs_sub: fix typo 0[-:][+.]0)\n - #112498 (Update links to Rust Reference in diagnostic)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8d33cb2cd310d8dcd2bc2ddf27891c2f0c848601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d33cb2cd310d8dcd2bc2ddf27891c2f0c848601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970058e16b307e1cff01e2ddb084d2e8d14ea8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970058e16b307e1cff01e2ddb084d2e8d14ea8be", "html_url": "https://github.com/rust-lang/rust/commit/970058e16b307e1cff01e2ddb084d2e8d14ea8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970058e16b307e1cff01e2ddb084d2e8d14ea8be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a50010de397df570b38fe67bda435b665e2d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a50010de397df570b38fe67bda435b665e2d86", "html_url": "https://github.com/rust-lang/rust/commit/b8a50010de397df570b38fe67bda435b665e2d86"}, {"sha": "46b64aaef097cab420311834eb58b5d05ea408a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/46b64aaef097cab420311834eb58b5d05ea408a7", "html_url": "https://github.com/rust-lang/rust/commit/46b64aaef097cab420311834eb58b5d05ea408a7"}], "stats": {"total": 338, "additions": 292, "deletions": 46}, "files": [{"sha": "1037a49acdf32efd6d72dfc1ef7868828fb32095", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -26,10 +26,9 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n-use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::middle::stability::AllowUnstable;\n-use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n@@ -43,7 +42,10 @@ use rustc_trait_selection::traits::error_reporting::{\n     report_object_safety_error, suggestions::NextTypeParamName,\n };\n use rustc_trait_selection::traits::wf::object_region_bounds;\n-use rustc_trait_selection::traits::{self, astconv_object_safety_violations, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, astconv_object_safety_violations, NormalizeExt, ObligationCtxt,\n+};\n+use rustc_type_ir::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n@@ -2442,6 +2444,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             return Ok(None);\n         }\n \n+        if !tcx.features().inherent_associated_types {\n+            tcx.sess\n+                .delay_span_bug(span, \"found inherent assoc type without the feature being gated\");\n+        }\n+\n         //\n         // Select applicable inherent associated type candidates modulo regions.\n         //\n@@ -2465,30 +2472,61 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut fulfillment_errors = Vec::new();\n         let mut applicable_candidates: Vec<_> = infcx.probe(|_| {\n-            let universe = infcx.create_next_universe();\n-\n             // Regions are not considered during selection.\n-            // FIXME(non_lifetime_binders): Here we are \"truncating\" or \"flattening\" the universes\n-            // of type and const binders. Is that correct in the selection phase? See also #109505.\n-            let self_ty = tcx.replace_escaping_bound_vars_uncached(\n-                self_ty,\n-                FnMutDelegate {\n-                    regions: &mut |_| tcx.lifetimes.re_erased,\n-                    types: &mut |bv| {\n-                        tcx.mk_placeholder(ty::PlaceholderType { universe, bound: bv })\n-                    },\n-                    consts: &mut |bv, ty| {\n-                        tcx.mk_const(ty::PlaceholderConst { universe, bound: bv }, ty)\n-                    },\n-                },\n-            );\n+            let self_ty = self_ty\n+                .fold_with(&mut BoundVarEraser { tcx, universe: infcx.create_next_universe() });\n+\n+            struct BoundVarEraser<'tcx> {\n+                tcx: TyCtxt<'tcx>,\n+                universe: ty::UniverseIndex,\n+            }\n+\n+            // FIXME(non_lifetime_binders): Don't assign the same universe to each placeholder.\n+            impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarEraser<'tcx> {\n+                fn interner(&self) -> TyCtxt<'tcx> {\n+                    self.tcx\n+                }\n+\n+                fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+                    if r.is_late_bound() { self.tcx.lifetimes.re_erased } else { r }\n+                }\n+\n+                fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+                    match *ty.kind() {\n+                        ty::Bound(_, bv) => self.tcx.mk_placeholder(ty::PlaceholderType {\n+                            universe: self.universe,\n+                            bound: bv,\n+                        }),\n+                        _ => ty.super_fold_with(self),\n+                    }\n+                }\n+\n+                fn fold_const(\n+                    &mut self,\n+                    ct: ty::Const<'tcx>,\n+                ) -> <TyCtxt<'tcx> as rustc_type_ir::Interner>::Const {\n+                    assert!(!ct.ty().has_escaping_bound_vars());\n+\n+                    match ct.kind() {\n+                        ty::ConstKind::Bound(_, bv) => self.tcx.mk_const(\n+                            ty::PlaceholderConst { universe: self.universe, bound: bv },\n+                            ct.ty(),\n+                        ),\n+                        _ => ct.super_fold_with(self),\n+                    }\n+                }\n+            }\n+\n+            let InferOk { value: self_ty, obligations } =\n+                infcx.at(&cause, param_env).normalize(self_ty);\n \n             candidates\n                 .iter()\n                 .copied()\n                 .filter(|&(impl_, _)| {\n                     infcx.probe(|_| {\n                         let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n+                        ocx.register_obligations(obligations.clone());\n \n                         let impl_substs = infcx.fresh_substs_for_item(span, impl_);\n                         let impl_ty = tcx.type_of(impl_).subst(tcx, impl_substs);"}, {"sha": "35eec2c8e1b17f2112471aba5997a557127f9ff9", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -695,7 +695,7 @@ parse_struct_literal_body_without_path =\n \n parse_struct_literal_needing_parens =\n     invalid struct literal\n-    .suggestion = you might need to surround the struct literal in parentheses\n+    .suggestion = you might need to surround the struct literal with parentheses\n \n parse_struct_literal_not_allowed_here = struct literals are not allowed here\n     .suggestion = surround the struct literal with parentheses"}, {"sha": "461a34b67db6f778ad12ff4853501655944170c4", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -158,7 +158,7 @@ pub(crate) fn emit_unescape_error(\n \n                 diag.help(\n                     \"for more information, visit \\\n-                     <https://static.rust-lang.org/doc/master/reference.html#literals>\",\n+                     <https://doc.rust-lang.org/reference/tokens.html#literals>\",\n                 );\n             }\n             diag.emit();"}, {"sha": "228eff1269f1157fa84260101027a607bba264ab", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -751,13 +751,24 @@ impl<'a> Parser<'a> {\n                     tail.could_be_bare_literal = true;\n                     if maybe_struct_name.is_ident() && can_be_struct_literal {\n                         // Account for `if Example { a: one(), }.is_pos() {}`.\n-                        Err(self.sess.create_err(StructLiteralNeedingParens {\n-                            span: maybe_struct_name.span.to(expr.span),\n-                            sugg: StructLiteralNeedingParensSugg {\n-                                before: maybe_struct_name.span.shrink_to_lo(),\n-                                after: expr.span.shrink_to_hi(),\n-                            },\n-                        }))\n+                        // expand `before` so that we take care of module path such as:\n+                        // `foo::Bar { ... } `\n+                        // we expect to suggest `(foo::Bar { ... })` instead of `foo::(Bar { ... })`\n+                        let sm = self.sess.source_map();\n+                        let before = maybe_struct_name.span.shrink_to_lo();\n+                        if let Ok(extend_before) = sm.span_extend_prev_while(before, |t| {\n+                            t.is_alphanumeric() || t == ':' || t == '_'\n+                        }) {\n+                            Err(self.sess.create_err(StructLiteralNeedingParens {\n+                                span: maybe_struct_name.span.to(expr.span),\n+                                sugg: StructLiteralNeedingParensSugg {\n+                                    before: extend_before.shrink_to_lo(),\n+                                    after: expr.span.shrink_to_hi(),\n+                                },\n+                            }))\n+                        } else {\n+                            return None;\n+                        }\n                     } else {\n                         self.sess.emit_err(StructLiteralBodyWithoutPath {\n                             span: expr.span,"}, {"sha": "c53fe084c4db0f2f01779c5255975d701d69bc9a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -744,6 +744,21 @@ impl SourceMap {\n         })\n     }\n \n+    /// Extends the given `Span` to previous character while the previous character matches the predicate\n+    pub fn span_extend_prev_while(\n+        &self,\n+        span: Span,\n+        f: impl Fn(char) -> bool,\n+    ) -> Result<Span, SpanSnippetError> {\n+        self.span_to_source(span, |s, start, _end| {\n+            let n = s[..start]\n+                .char_indices()\n+                .rfind(|&(_, c)| !f(c))\n+                .map_or(start, |(i, _)| start - i - 1);\n+            Ok(span.with_lo(span.lo() - BytePos(n as u32)))\n+        })\n+    }\n+\n     /// Extends the given `Span` to just before the next occurrence of `c`.\n     pub fn span_extend_to_next_char(&self, sp: Span, c: char, accept_newlines: bool) -> Span {\n         if let Ok(next_source) = self.span_to_next_source(sp) {"}, {"sha": "bed90418be116790c39cff4e44c2b2a993eb550e", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -528,7 +528,7 @@ impl f32 {\n \n     /// The positive difference of two numbers.\n     ///\n-    /// * If `self <= other`: `0:0`\n+    /// * If `self <= other`: `0.0`\n     /// * Else: `self - other`\n     ///\n     /// # Examples"}, {"sha": "e72de05ca41ed7eeedd049e6e52f580411c11263", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -530,7 +530,7 @@ impl f64 {\n \n     /// The positive difference of two numbers.\n     ///\n-    /// * If `self <= other`: `0:0`\n+    /// * If `self <= other`: `0.0`\n     /// * Else: `self - other`\n     ///\n     /// # Examples"}, {"sha": "5fc6136ba1fc7e9b049615b6ca0aed50857b4b61", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -19,6 +19,7 @@ pub use windows_sys::*;\n pub type DWORD = c_ulong;\n pub type NonZeroDWORD = NonZero_c_ulong;\n pub type LARGE_INTEGER = c_longlong;\n+#[cfg_attr(target_vendor = \"uwp\", allow(unused))]\n pub type LONG = c_long;\n pub type UINT = c_uint;\n pub type WCHAR = u16;\n@@ -267,6 +268,8 @@ pub unsafe fn getaddrinfo(\n     windows_sys::getaddrinfo(node.cast::<u8>(), service.cast::<u8>(), hints, res)\n }\n \n+cfg_if::cfg_if! {\n+if #[cfg(not(target_vendor = \"uwp\"))] {\n pub unsafe fn NtReadFile(\n     filehandle: BorrowedHandle<'_>,\n     event: HANDLE,\n@@ -313,6 +316,8 @@ pub unsafe fn NtWriteFile(\n         key.map(|k| k as *const u32).unwrap_or(ptr::null()),\n     )\n }\n+}\n+}\n \n // Functions that aren't available on every version of Windows that we support,\n // but we still use them and just provide some form of a fallback implementation.\n@@ -376,4 +381,54 @@ compat_fn_with_fallback! {\n     ) -> NTSTATUS {\n         panic!(\"keyed events not available\")\n     }\n+\n+    // These functions are available on UWP when lazily loaded. They will fail WACK if loaded statically.\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn NtCreateFile(\n+        filehandle: *mut HANDLE,\n+        desiredaccess: FILE_ACCESS_RIGHTS,\n+        objectattributes: *const OBJECT_ATTRIBUTES,\n+        iostatusblock: *mut IO_STATUS_BLOCK,\n+        allocationsize: *const i64,\n+        fileattributes: FILE_FLAGS_AND_ATTRIBUTES,\n+        shareaccess: FILE_SHARE_MODE,\n+        createdisposition: NTCREATEFILE_CREATE_DISPOSITION,\n+        createoptions: NTCREATEFILE_CREATE_OPTIONS,\n+        eabuffer: *const ::core::ffi::c_void,\n+        ealength: u32\n+    ) -> NTSTATUS {\n+        STATUS_NOT_IMPLEMENTED\n+    }\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn NtReadFile(\n+        filehandle: BorrowedHandle<'_>,\n+        event: HANDLE,\n+        apcroutine: PIO_APC_ROUTINE,\n+        apccontext: *mut c_void,\n+        iostatusblock: &mut IO_STATUS_BLOCK,\n+        buffer: *mut crate::mem::MaybeUninit<u8>,\n+        length: ULONG,\n+        byteoffset: Option<&LARGE_INTEGER>,\n+        key: Option<&ULONG>\n+    ) -> NTSTATUS {\n+        STATUS_NOT_IMPLEMENTED\n+    }\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn NtWriteFile(\n+        filehandle: BorrowedHandle<'_>,\n+        event: HANDLE,\n+        apcroutine: PIO_APC_ROUTINE,\n+        apccontext: *mut c_void,\n+        iostatusblock: &mut IO_STATUS_BLOCK,\n+        buffer: *const u8,\n+        length: ULONG,\n+        byteoffset: Option<&LARGE_INTEGER>,\n+        key: Option<&ULONG>\n+    ) -> NTSTATUS {\n+        STATUS_NOT_IMPLEMENTED\n+    }\n+    #[cfg(target_vendor = \"uwp\")]\n+    pub fn RtlNtStatusToDosError(Status: NTSTATUS) -> u32 {\n+        Status as u32\n+    }\n }"}, {"sha": "2cf1ade99ce547052f9a11fa823c1410ffd62a26", "filename": "library/std/src/sys/windows/c/windows_sys.lst", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.lst", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.lst", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.lst?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -1930,6 +1930,7 @@ Windows.Win32.Foundation.SetLastError\n Windows.Win32.Foundation.STATUS_DELETE_PENDING\n Windows.Win32.Foundation.STATUS_END_OF_FILE\n Windows.Win32.Foundation.STATUS_INVALID_PARAMETER\n+Windows.Win32.Foundation.STATUS_NOT_IMPLEMENTED\n Windows.Win32.Foundation.STATUS_PENDING\n Windows.Win32.Foundation.STATUS_SUCCESS\n Windows.Win32.Foundation.TRUE"}, {"sha": "8c8b006a1d3d319602bc3baee9eeeec4c4b161e1", "filename": "library/std/src/sys/windows/c/windows_sys.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Fwindows_sys.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -3888,6 +3888,7 @@ pub type STARTUPINFOW_FLAGS = u32;\n pub const STATUS_DELETE_PENDING: NTSTATUS = -1073741738i32;\n pub const STATUS_END_OF_FILE: NTSTATUS = -1073741807i32;\n pub const STATUS_INVALID_PARAMETER: NTSTATUS = -1073741811i32;\n+pub const STATUS_NOT_IMPLEMENTED: NTSTATUS = -1073741822i32;\n pub const STATUS_PENDING: NTSTATUS = 259i32;\n pub const STATUS_SUCCESS: NTSTATUS = 0i32;\n pub const STD_ERROR_HANDLE: STD_HANDLE = 4294967284u32;"}, {"sha": "5d8fd13785a09e6a4b05eef54254b27e7d071f25", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -1,5 +1,3 @@\n-use crate::ffi::c_void;\n-use crate::io;\n use crate::mem;\n use crate::ptr;\n use crate::sys::c;\n@@ -25,6 +23,9 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n #[cfg(not(target_vendor = \"uwp\"))]\n #[inline(never)]\n fn fallback_rng() -> (u64, u64) {\n+    use crate::ffi::c_void;\n+    use crate::io;\n+\n     let mut v = (0, 0);\n     let ret = unsafe {\n         c::RtlGenRandom(&mut v as *mut _ as *mut c_void, mem::size_of_val(&v) as c::ULONG)"}, {"sha": "c28fe9022ec0046324128dc33a200fc8871168cf", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -1488,6 +1488,10 @@ impl Step for Assemble {\n             // Ensure that `libLLVM.so` ends up in the newly created target directory,\n             // so that tools using `rustc_private` can use it.\n             dist::maybe_install_llvm_target(builder, target_compiler.host, &sysroot);\n+            // Lower stages use `ci-rustc-sysroot`, not stageN\n+            if target_compiler.stage == builder.top_stage {\n+                builder.info(&format!(\"Creating a sysroot for stage{stage} compiler (use `rustup toolchain link 'name' build/host/stage{stage}`)\", stage=target_compiler.stage));\n+            }\n             return target_compiler;\n         }\n \n@@ -1525,11 +1529,18 @@ impl Step for Assemble {\n \n         let stage = target_compiler.stage;\n         let host = target_compiler.host;\n-        let msg = if build_compiler.host == host {\n-            format!(\"Assembling stage{} compiler\", stage)\n+        let (host_info, dir_name) = if build_compiler.host == host {\n+            (\"\".into(), \"host\".into())\n         } else {\n-            format!(\"Assembling stage{} compiler ({})\", stage, host)\n+            (format!(\" ({host})\"), host.to_string())\n         };\n+        // NOTE: \"Creating a sysroot\" is somewhat inconsistent with our internal terminology, since\n+        // sysroots can temporarily be empty until we put the compiler inside. However,\n+        // `ensure(Sysroot)` isn't really something that's user facing, so there shouldn't be any\n+        // ambiguity.\n+        let msg = format!(\n+            \"Creating a sysroot for stage{stage} compiler{host_info} (use `rustup toolchain link 'name' build/{dir_name}/stage{stage}`)\"\n+        );\n         builder.info(&msg);\n \n         // Link in all dylibs to the libdir"}, {"sha": "c5c386ce750ce11d7b04eaa3977e98a8698cfd12", "filename": "tests/rustdoc-gui/search-reexport.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Frustdoc-gui%2Fsearch-reexport.goml", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Frustdoc-gui%2Fsearch-reexport.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsearch-reexport.goml?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -17,7 +17,7 @@ assert-attribute: (\n assert-text: (\"//a[@class='result-import']\", \"test_docs::TheStdReexport\")\n click: \"//a[@class='result-import']\"\n // We check that it has the background modified thanks to the focus.\n-wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"rgb(73, 74, 61)\"})\n+wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"#494a3d\"})\n \n // We now check that the alias is working as well on the reexport.\n // To be SURE that the search will be run.\n@@ -30,4 +30,4 @@ assert-text: (\n )\n // Same thing again, we click on it to ensure the background is once again set as expected.\n click: \"//a[@class='result-import']\"\n-wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"rgb(73, 74, 61)\"})\n+wait-for-css: (\"//*[@id='reexport.TheStdReexport']\", {\"background-color\": \"#494a3d\"})"}, {"sha": "1180577bd5421b8b4f5ab480471c25e24ee865c6", "filename": "tests/ui/associated-inherent-types/issue-111404-0.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-0.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<T>(T);\n+\n+impl<'a> Foo<fn(&'a ())> {\n+    type Assoc = &'a ();\n+}\n+\n+fn bar(_: for<'a> fn(Foo<fn(Foo<fn(&'a ())>::Assoc)>::Assoc)) {}\n+\n+fn main() {}"}, {"sha": "f4ad5d7ff6c03703884e36ade4d1ae7853d637a2", "filename": "tests/ui/associated-inherent-types/issue-111404-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -0,0 +1,13 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<T>(T);\n+\n+impl<'a> Foo<fn(&'a ())> {\n+    type Assoc = &'a ();\n+}\n+\n+fn bar(_: fn(Foo<for<'b> fn(Foo<fn(&'b ())>::Assoc)>::Assoc)) {}\n+//~^ ERROR higher-ranked subtype error\n+\n+fn main() {}"}, {"sha": "c55f1432389c786cb0b6c2a07ebcf43b6f38477f", "filename": "tests/ui/associated-inherent-types/issue-111404-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-111404-1.rs:10:1\n+   |\n+LL | fn bar(_: fn(Foo<for<'b> fn(Foo<fn(&'b ())>::Assoc)>::Assoc)) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9dc0a3380631e70e56be7583216bcad7c9af44bf", "filename": "tests/ui/lexer/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flexer%2Flex-bad-char-literals-1.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -16,7 +16,7 @@ error: unknown character escape: `\\u{25cf}`\n LL |     '\\\u25cf'\n    |       ^ unknown character escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n    |\n LL |     r\"\\\u25cf\"\n@@ -28,7 +28,7 @@ error: unknown character escape: `\\u{25cf}`\n LL |     \"\\\u25cf\"\n    |       ^ unknown character escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n    |\n LL |     r\"\\\u25cf\""}, {"sha": "06df82d288b598e815f82cff65e529967a772f0d", "filename": "tests/ui/parser/bad-escape-suggest-raw-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let ok = r\"ab\\[c\";\n     let bad = \"ab\\[c\";\n     //~^ ERROR unknown character escape: `[`\n-    //~| HELP for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+    //~| HELP for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n     //~| HELP if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n }"}, {"sha": "45d24bc0fb3625c6d87e0f5cb87be6fca5cecbe7", "filename": "tests/ui/parser/bad-escape-suggest-raw-string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbad-escape-suggest-raw-string.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -4,7 +4,7 @@ error: unknown character escape: `[`\n LL |     let bad = \"ab\\[c\";\n    |                   ^ unknown character escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n help: if you meant to write a literal backslash (perhaps escaping in a regular expression), consider a raw string literal\n    |\n LL |     let bad = r\"ab\\[c\";"}, {"sha": "5b414c8927e2ce52b73de21e9f39132e1787737a", "filename": "tests/ui/parser/byte-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbyte-literals.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -4,15 +4,15 @@ error: unknown byte escape: `f`\n LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n \n error: unknown byte escape: `f`\n   --> $DIR/byte-literals.rs:6:8\n    |\n LL |     b'\\f';\n    |        ^ unknown byte escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n \n error: invalid character in numeric character escape: `Z`\n   --> $DIR/byte-literals.rs:7:10"}, {"sha": "655b6998e85ff0239179e926170a83ccd18453df", "filename": "tests/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -4,15 +4,15 @@ error: unknown byte escape: `f`\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n \n error: unknown byte escape: `f`\n   --> $DIR/byte-string-literals.rs:4:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n    |\n-   = help: for more information, visit <https://static.rust-lang.org/doc/master/reference.html#literals>\n+   = help: for more information, visit <https://doc.rust-lang.org/reference/tokens.html#literals>\n \n error: invalid character in numeric character escape: `Z`\n   --> $DIR/byte-string-literals.rs:5:10"}, {"sha": "56096f706a8a7c647cd67e2feaa4c08881006520", "filename": "tests/ui/parser/issues/issue-111692.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.rs?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -0,0 +1,32 @@\n+mod module {\n+    #[derive(Eq, PartialEq)]\n+    pub struct Type {\n+        pub x: u8,\n+        pub y: u8,\n+    }\n+\n+    pub const C: u8 = 32u8;\n+}\n+\n+fn test(x: module::Type) {\n+    if x == module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn test2(x: module::Type) {\n+    if x ==module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+\n+fn test3(x: module::Type) {\n+    if x == Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn test4(x: module::Type) {\n+    if x == demo_module::Type { x: module::C, y: 1 } { //~ ERROR invalid struct literal\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "068b0483b0fd38ecb4d8efe2e855818b1d2175ec", "filename": "tests/ui/parser/issues/issue-111692.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-111692.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -0,0 +1,46 @@\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:12:21\n+   |\n+LL |     if x == module::Type { x: module::C, y: 1 } {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x == (module::Type { x: module::C, y: 1 }) {\n+   |             +                                   +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:17:20\n+   |\n+LL |     if x ==module::Type { x: module::C, y: 1 } {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x ==(module::Type { x: module::C, y: 1 }) {\n+   |            +                                   +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:23:13\n+   |\n+LL |     if x == Type { x: module::C, y: 1 } {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x == (Type { x: module::C, y: 1 }) {\n+   |             +                           +\n+\n+error: invalid struct literal\n+  --> $DIR/issue-111692.rs:28:26\n+   |\n+LL |     if x == demo_module::Type { x: module::C, y: 1 } {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal with parentheses\n+   |\n+LL |     if x == (demo_module::Type { x: module::C, y: 1 }) {\n+   |             +                                        +\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dedbad9094594d9ab9b6cdecea9d44625419bef7", "filename": "tests/ui/parser/method-call-on-struct-literal-in-if-condition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/970058e16b307e1cff01e2ddb084d2e8d14ea8be/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr?ref=970058e16b307e1cff01e2ddb084d2e8d14ea8be", "patch": "@@ -4,7 +4,7 @@ error: invalid struct literal\n LL |     if Example { a: one(), }.is_pos() {\n    |        ^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: you might need to surround the struct literal in parentheses\n+help: you might need to surround the struct literal with parentheses\n    |\n LL |     if (Example { a: one(), }).is_pos() {\n    |        +                     +"}]}