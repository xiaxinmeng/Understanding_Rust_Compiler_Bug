{"sha": "e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2Zjk4MGY5YjgwNGFjYjQyZTcyYmE0YjA3MTMyMGNhOWU3ZjIyZTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T06:35:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "extract parse_pat_range_starting_with_path", "tree": {"sha": "322b64cb448f34d9da2ccabb96c81dd6f256cc24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322b64cb448f34d9da2ccabb96c81dd6f256cc24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "html_url": "https://github.com/rust-lang/rust/commit/e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f980f9b804acb42e72ba4b071320ca9e7f22e0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "html_url": "https://github.com/rust-lang/rust/commit/e32bd69d0f7443bf76af4a8129fc43b381e5afaa"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "5c53a497ff475801b9c8e06e7095cd45245fe578", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e6f980f9b804acb42e72ba4b071320ca9e7f22e0/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f980f9b804acb42e72ba4b071320ca9e7f22e0/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=e6f980f9b804acb42e72ba4b071320ca9e7f22e0", "patch": "@@ -3,7 +3,7 @@ use super::{Parser, PResult, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac_};\n-use crate::ast::{BindingMode, Ident, Mutability, Path, Expr, ExprKind};\n+use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n use crate::parse::token::{self};\n use crate::print::pprust;\n use crate::source_map::{respan, Span, Spanned};\n@@ -167,20 +167,7 @@ impl<'a> Parser<'a> {\n                 match self.token.kind {\n                     token::Not if qself.is_none() => self.parse_pat_mac_invoc(lo, path)?,\n                     token::DotDotDot | token::DotDotEq | token::DotDot => {\n-                        let (end_kind, form) = match self.token.kind {\n-                            token::DotDot => (RangeEnd::Excluded, \"..\"),\n-                            token::DotDotDot => (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\"),\n-                            token::DotDotEq => (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\"),\n-                            _ => panic!(\"can only parse `..`/`...`/`..=` for ranges \\\n-                                         (checked above)\"),\n-                        };\n-                        let op_span = self.token.span;\n-                        // Parse range\n-                        let span = lo.to(self.prev_span);\n-                        let begin = self.mk_expr(span, ExprKind::Path(qself, path), ThinVec::new());\n-                        self.bump();\n-                        let end = self.parse_pat_range_end_opt(&begin, form)?;\n-                        PatKind::Range(begin, end, respan(op_span, end_kind))\n+                        self.parse_pat_range_starting_with_path(lo, qself, path)?\n                     }\n                     token::OpenDelim(token::Brace) => {\n                         if qself.is_some() {\n@@ -350,6 +337,29 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Mac(mac))\n     }\n \n+    /// Parse a range pattern `$path $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n+    /// The `$path` has already been parsed and the next token is the `$form`.\n+    fn parse_pat_range_starting_with_path(\n+        &mut self,\n+        lo: Span,\n+        qself: Option<QSelf>,\n+        path: Path\n+    ) -> PResult<'a, PatKind> {\n+        let (end_kind, form) = match self.token.kind {\n+            token::DotDot => (RangeEnd::Excluded, \"..\"),\n+            token::DotDotDot => (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\"),\n+            token::DotDotEq => (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\"),\n+            _ => panic!(\"can only parse `..`/`...`/`..=` for ranges (checked above)\"),\n+        };\n+        let op_span = self.token.span;\n+        // Parse range\n+        let span = lo.to(self.prev_span);\n+        let begin = self.mk_expr(span, ExprKind::Path(qself, path), ThinVec::new());\n+        self.bump();\n+        let end = self.parse_pat_range_end_opt(&begin, form)?;\n+        Ok(PatKind::Range(begin, end, respan(op_span, end_kind)))\n+    }\n+\n     // Helper function to decide whether to parse as ident binding\n     // or to try to do something more complex like range patterns.\n     fn parse_as_ident(&mut self) -> bool {"}]}