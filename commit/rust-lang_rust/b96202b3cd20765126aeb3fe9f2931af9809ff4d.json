{"sha": "b96202b3cd20765126aeb3fe9f2931af9809ff4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NjIwMmIzY2QyMDc2NTEyNmFlYjNmZTlmMjkzMWFmOTgwOWZmNGQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-03T03:44:59Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-03T03:44:59Z"}, "message": "Update for changes in rustc.", "tree": {"sha": "99b1c1045e960c222d43bf7aa4e70b47b733203d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99b1c1045e960c222d43bf7aa4e70b47b733203d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96202b3cd20765126aeb3fe9f2931af9809ff4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96202b3cd20765126aeb3fe9f2931af9809ff4d", "html_url": "https://github.com/rust-lang/rust/commit/b96202b3cd20765126aeb3fe9f2931af9809ff4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96202b3cd20765126aeb3fe9f2931af9809ff4d/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244ae8eac7b4e0ea668f69feb25c525fb4b22281", "url": "https://api.github.com/repos/rust-lang/rust/commits/244ae8eac7b4e0ea668f69feb25c525fb4b22281", "html_url": "https://github.com/rust-lang/rust/commit/244ae8eac7b4e0ea668f69feb25c525fb4b22281"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1a52434f9fc1fe4816102419288b3cc5d87ef213", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b96202b3cd20765126aeb3fe9f2931af9809ff4d/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96202b3cd20765126aeb3fe9f2931af9809ff4d/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=b96202b3cd20765126aeb3fe9f2931af9809ff4d", "patch": "@@ -771,7 +771,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match (field_index, &self.tcx.struct_tail(ty).sty) {\n                     (1, &ty::TyStr) |\n                     (1, &ty::TySlice(_)) => Ok(self.tcx.types.usize),\n-                    (1, &ty::TyTrait(_)) |\n+                    (1, &ty::TyDynamic(..)) |\n                     (0, _) => Ok(self.tcx.mk_imm_ptr(self.tcx.types.u8)),\n                     _ => bug!(\"invalid fat pointee type: {}\", ty),\n                 }\n@@ -1009,7 +1009,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 trace!(\"deref to {} on {:?}\", pointee_type, val);\n \n                 match self.tcx.struct_tail(pointee_type).sty {\n-                    ty::TyTrait(_) => {\n+                    ty::TyDynamic(..) => {\n                         let (ptr, vtable) = val.expect_ptr_vtable_pair(&self.memory)?;\n                         (ptr, LvalueExtra::Vtable(vtable))\n                     },\n@@ -1462,7 +1462,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     trace!(\"reading fat pointer extra of type {}\", ty);\n                     let extra = ptr.offset(self.memory.pointer_size());\n                     let extra = match self.tcx.struct_tail(ty).sty {\n-                        ty::TyTrait(..) => PrimVal::from_ptr(self.memory.read_ptr(extra)?),\n+                        ty::TyDynamic(..) => PrimVal::from_ptr(self.memory.read_ptr(extra)?),\n                         ty::TySlice(..) |\n                         ty::TyStr => PrimVal::from_uint(self.memory.read_usize(extra)?),\n                         _ => bug!(\"unsized primval ptr read from {:?}\", ty),\n@@ -1529,14 +1529,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let ptr = PrimVal::from_ptr(ptr);\n                         self.write_value(Value::ByValPair(ptr, len), dest, dest_ty)?;\n                     }\n-                    (&ty::TyTrait(_), &ty::TyTrait(_)) => {\n+                    (&ty::TyDynamic(..), &ty::TyDynamic(..)) => {\n                         // For now, upcasts are limited to changes in marker\n                         // traits, and hence never actually require an actual\n                         // change to the vtable.\n                         self.write_value(src, dest, dest_ty)?;\n                     },\n-                    (_, &ty::TyTrait(ref data)) => {\n-                        let trait_ref = data.principal.with_self_ty(self.tcx, src_pointee_ty);\n+                    (_, &ty::TyDynamic(ref data, _)) => {\n+                        let trait_ref = data.principal().unwrap().with_self_ty(self.tcx, src_pointee_ty);\n                         let trait_ref = self.tcx.erase_regions(&trait_ref);\n                         let vtable = self.get_vtable(trait_ref)?;\n                         let ptr = src.read_ptr(&self.memory)?;"}, {"sha": "706fadd0ab41ac785dec82ab0e88f8a63671ca49", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b96202b3cd20765126aeb3fe9f2931af9809ff4d/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96202b3cd20765126aeb3fe9f2931af9809ff4d/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=b96202b3cd20765126aeb3fe9f2931af9809ff4d", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Value::ByValPair(ptr, extra) => Lvalue::Ptr {\n                         ptr: ptr.to_ptr(),\n                         extra: match self.tcx.struct_tail(ty).sty {\n-                            ty::TyTrait(_) => LvalueExtra::Vtable(extra.to_ptr()),\n+                            ty::TyDynamic(..) => LvalueExtra::Vtable(extra.to_ptr()),\n                             ty::TyStr | ty::TySlice(_) => LvalueExtra::Length(extra.try_as_uint()?),\n                             _ => bug!(\"invalid fat pointer type: {}\", ptr_ty),\n                         },\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         Ok((size, align))\n                     }\n                 }\n-                ty::TyTrait(..) => {\n+                ty::TyDynamic(..) => {\n                     let (_, vtable) = value.expect_ptr_vtable_pair(&self.memory)?;\n                     // the second entry in the vtable is the dynamic size of the object.\n                     let size = self.memory.read_usize(vtable.offset(pointer_size))?;"}, {"sha": "e95d68a67db1ec8e56a18b444987dce8bfcf5d16", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b96202b3cd20765126aeb3fe9f2931af9809ff4d/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96202b3cd20765126aeb3fe9f2931af9809ff4d/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=b96202b3cd20765126aeb3fe9f2931af9809ff4d", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Value::ByValPair(prim_ptr, extra) => {\n                         let ptr = prim_ptr.to_ptr();\n                         let extra = match self.tcx.struct_tail(contents_ty).sty {\n-                            ty::TyTrait(_) => LvalueExtra::Vtable(extra.to_ptr()),\n+                            ty::TyDynamic(..) => LvalueExtra::Vtable(extra.to_ptr()),\n                             ty::TyStr | ty::TySlice(_) => LvalueExtra::Length(extra.try_as_uint()?),\n                             _ => bug!(\"invalid fat pointer type: {}\", ty),\n                         };\n@@ -640,7 +640,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 };\n                 self.drop_fields(fields.iter().cloned().zip(offsets.iter().cloned()), lval, drop)?;\n             },\n-            ty::TyTrait(_) => {\n+            ty::TyDynamic(..) => {\n                 let (ptr, vtable) = match lval {\n                     Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } => (ptr, vtable),\n                     _ => bug!(\"expected an lvalue with a vtable\"),"}]}