{"sha": "b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "node_id": "C_kwDOAAsO6NoAKGI4NjdkNDFlZDQyYzhlZjVjZDEzYTc4ZDI5OTU3N2MzZDRhYjU4OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T11:08:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T11:08:58Z"}, "message": "Auto merge of #97825 - Dylan-DPC:rollup-ya51k1k, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97058 (Various refactors to the incr comp workproduct handling)\n - #97301 (Allow unstable items to be re-exported unstably without requiring the feature be enabled)\n - #97738 (Fix ICEs from zsts within unsized types with non-zero offsets)\n - #97771 (Remove SIGIO reference on Haiku)\n - #97808 (Add some unstable target features for the wasm target codegen)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b2c93488715e7c74bcaae4fc28b6ee571d39a7d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c93488715e7c74bcaae4fc28b6ee571d39a7d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "html_url": "https://github.com/rust-lang/rust/commit/b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b867d41ed42c8ef5cd13a78d299577c3d4ab589b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bd0a950d98e4736ba841da859d1ef0e5ea0b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bd0a950d98e4736ba841da859d1ef0e5ea0b7a", "html_url": "https://github.com/rust-lang/rust/commit/d8bd0a950d98e4736ba841da859d1ef0e5ea0b7a"}, {"sha": "3d8e8546048cc94b9640c1f9e50ae1a0d75df9ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8e8546048cc94b9640c1f9e50ae1a0d75df9ce", "html_url": "https://github.com/rust-lang/rust/commit/3d8e8546048cc94b9640c1f9e50ae1a0d75df9ce"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "05457ce15e9a7d8bfce0d6747bd888373e25f033", "filename": "src/driver/aot.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b867d41ed42c8ef5cd13a78d299577c3d4ab589b/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b867d41ed42c8ef5cd13a78d299577c3d4ab589b/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "patch": "@@ -66,11 +66,7 @@ fn emit_module(\n     let work_product = if backend_config.disable_incr_cache {\n         None\n     } else {\n-        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n-            tcx.sess,\n-            &name,\n-            &Some(tmp_file.clone()),\n-        )\n+        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(tcx.sess, &name, &tmp_file)\n     };\n \n     ModuleCodegenResult(\n@@ -84,29 +80,24 @@ fn reuse_workproduct_for_cgu(\n     cgu: &CodegenUnit<'_>,\n     work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n ) -> CompiledModule {\n-    let mut object = None;\n-    let work_product = cgu.work_product(tcx);\n-    if let Some(saved_file) = &work_product.saved_file {\n-        let obj_out =\n-            tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n-        object = Some(obj_out.clone());\n-        let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n-        if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n-            tcx.sess.err(&format!(\n-                \"unable to copy {} to {}: {}\",\n-                source_file.display(),\n-                obj_out.display(),\n-                err\n-            ));\n-        }\n+    let work_product = cgu.previous_work_product(tcx);\n+    let obj_out = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n+    let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &work_product.saved_file);\n+    if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n+        tcx.sess.err(&format!(\n+            \"unable to copy {} to {}: {}\",\n+            source_file.display(),\n+            obj_out.display(),\n+            err\n+        ));\n     }\n \n     work_products.insert(cgu.work_product_id(), work_product);\n \n     CompiledModule {\n         name: cgu.name().to_string(),\n         kind: ModuleKind::Regular,\n-        object,\n+        object: Some(obj_out),\n         dwarf_object: None,\n         bytecode: None,\n     }"}]}