{"sha": "d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "node_id": "C_kwDOAAsO6NoAKGQ3YWNhMjJlN2ZkOWZkZmRjNjBlMzAxMTdlNTRlZDQ3OWZkN2JmN2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T16:36:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-27T16:36:05Z"}, "message": "Auto merge of #95345 - dtolnay:escape0, r=Dylan-DPC\n\nDebug print char 0 as '\\0' rather than '\\u{0}'\n\n```rust\nprintln!(\"{:?}\", \"foo\\0\");\n```\n\n- **Before:** `\"foo\\u{0}\"`\n- **After:** `\"foo\\0\"`\n\n```rust\nprintln!(\"{:?}\", '\\0');\n```\n\n- **Before:** `'\\u{0}'`\n- **After:** `'\\0'`\n\n`'\\0'` will be more recognizable to everyone than `'\\u{0}'` because it's how we talk about character 0 in all of our docs and example code, such as https://doc.rust-lang.org/std/ffi/index.html, https://doc.rust-lang.org/std/ffi/struct.CStr.html, https://doc.rust-lang.org/std/ffi/struct.CString.html.", "tree": {"sha": "34f9834640f08cb7c178145550a235ea663f3d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f9834640f08cb7c178145550a235ea663f3d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "html_url": "https://github.com/rust-lang/rust/commit/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "100f12d17026fccfc5d80527b5976dd66b228b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/100f12d17026fccfc5d80527b5976dd66b228b13", "html_url": "https://github.com/rust-lang/rust/commit/100f12d17026fccfc5d80527b5976dd66b228b13"}, {"sha": "2ac9efbe950419979050ff14feb7fb89df4806a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac9efbe950419979050ff14feb7fb89df4806a0", "html_url": "https://github.com/rust-lang/rust/commit/2ac9efbe950419979050ff14feb7fb89df4806a0"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "67e12c612dbb14855252a621c9cd132941469025", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "patch": "@@ -69,7 +69,7 @@ fn test_format_macro_interface() {\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n     t!(format!(\"{:?}\", \"foo\\n\\\"bar\\\"\\r\\n\\'baz\\'\\t\\\\qux\\\\\"), r#\"\"foo\\n\\\"bar\\\"\\r\\n'baz'\\t\\\\qux\\\\\"\"#);\n-    t!(format!(\"{:?}\", \"foo\\0bar\\x01baz\\u{7f}q\\u{75}x\"), r#\"\"foo\\u{0}bar\\u{1}baz\\u{7f}qux\"\"#);\n+    t!(format!(\"{:?}\", \"foo\\0bar\\x01baz\\u{7f}q\\u{75}x\"), r#\"\"foo\\0bar\\u{1}baz\\u{7f}qux\"\"#);\n     t!(format!(\"{:o}\", 10_usize), \"12\");\n     t!(format!(\"{:x}\", 10_usize), \"a\");\n     t!(format!(\"{:X}\", 10_usize), \"A\");"}, {"sha": "32396e35696c0a52b80b03e1e0c78f18e3cab5f2", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "patch": "@@ -1116,7 +1116,7 @@ fn test_escape_debug() {\n     assert_eq!(\"abc\".escape_debug().to_string(), \"abc\");\n     assert_eq!(\"a c\".escape_debug().to_string(), \"a c\");\n     assert_eq!(\"\u00e9\u00e8\u00ea\".escape_debug().to_string(), \"\u00e9\u00e8\u00ea\");\n-    assert_eq!(\"\\r\\n\\t\".escape_debug().to_string(), \"\\\\r\\\\n\\\\t\");\n+    assert_eq!(\"\\0\\r\\n\\t\".escape_debug().to_string(), \"\\\\0\\\\r\\\\n\\\\t\");\n     assert_eq!(\"'\\\"\\\\\".escape_debug().to_string(), \"\\\\'\\\\\\\"\\\\\\\\\");\n     assert_eq!(\"\\u{7f}\\u{ff}\".escape_debug().to_string(), \"\\\\u{7f}\\u{ff}\");\n     assert_eq!(\"\\u{100}\\u{ffff}\".escape_debug().to_string(), \"\\u{100}\\\\u{ffff}\");"}, {"sha": "f75cd74ee2de6a99ac13c9c7c0e327f5415c9e49", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "patch": "@@ -421,6 +421,7 @@ impl char {\n     #[inline]\n     pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {\n         let init_state = match self {\n+            '\\0' => EscapeDefaultState::Backslash('0'),\n             '\\t' => EscapeDefaultState::Backslash('t'),\n             '\\r' => EscapeDefaultState::Backslash('r'),\n             '\\n' => EscapeDefaultState::Backslash('n'),"}, {"sha": "8542e5c70d40c00241e0045971d1afcd97dc4290", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "patch": "@@ -197,7 +197,7 @@ fn test_escape_debug() {\n     assert_eq!(string('~'), \"~\");\n     assert_eq!(string('\u00e9'), \"\u00e9\");\n     assert_eq!(string('\u6587'), \"\u6587\");\n-    assert_eq!(string('\\x00'), \"\\\\u{0}\");\n+    assert_eq!(string('\\x00'), \"\\\\0\");\n     assert_eq!(string('\\x1f'), \"\\\\u{1f}\");\n     assert_eq!(string('\\x7f'), \"\\\\u{7f}\");\n     assert_eq!(string('\\u{80}'), \"\\\\u{80}\");"}, {"sha": "7a2441047b5e202a726116963eca9a87f6c80dc3", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=d7aca22e7fd9fdfdc60e30117e54ed479fd7bf7a", "patch": "@@ -50,17 +50,17 @@ LL ~         match $s { $($t)+ => {}\n LL ~         '\\u{10fffe}'..='\\u{10ffff}' => todo!() }\n    |\n \n-error[E0004]: non-exhaustive patterns: `'\\u{0}'` not covered\n+error[E0004]: non-exhaustive patterns: `'\\0'` not covered\n   --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8\n    |\n LL |     m!('a', ALMOST_MIN..);\n-   |        ^^^ pattern `'\\u{0}'` not covered\n+   |        ^^^ pattern `'\\0'` not covered\n    |\n    = note: the matched value is of type `char`\n help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n-LL ~         '\\u{0}' => todo!() }\n+LL ~         '\\0' => todo!() }\n    |\n \n error[E0004]: non-exhaustive patterns: `'\\u{10ffff}'` not covered"}]}