{"sha": "fe4e32a4e655846976475ef0a7dc5837eab796fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNGUzMmE0ZTY1NTg0Njk3NjQ3NWVmMGE3ZGM1ODM3ZWFiNzk2ZmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-12T20:46:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-12T20:46:54Z"}, "message": "Rollup merge of #62623 - pnkfelix:issue-62614-downgrade-indirect-structural-match-lint-to-allow, r=zackmdavis\n\ndowngrade indirect_structural_match lint to allow\n\nThis is a short-term band-aid for the regression aspect of #62614.", "tree": {"sha": "a060f5b049425798bdf7dc8470ae34c4e7e5b22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a060f5b049425798bdf7dc8470ae34c4e7e5b22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe4e32a4e655846976475ef0a7dc5837eab796fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdKPG/CRBK7hj4Ov3rIwAAdHIIAIgubsdwPdcQUKz5pk4HNg8X\nDuvjXX64235u04EjXfKT9jnGli/CIdHfOcxlnUBs3Xn45vzJ6Oz/FlF5EO5aqjHg\nLq+xcu84gaR1WTWVAJ9lM7vvXLxGSrU4i9avLgnw0Nci4fLL69ZVIDOtitOyEb/5\n8btqFI/h46CpF9BSbswOfWCd+z59A8Y2fm9ynUtnZHN8LEkB0r7eCxSVizdLjzId\nrqABmA7Z1+wiFJj3DctbOi9ELNJkzMsBmRbQoVIgvTb9bctWIi19g2WSXqcYaq+D\nTmiDhWFNw66pSzSuEgCC3R7SOBZCiTHSkAWgmsX5vi6VzNLRQEtI3Tf3K0KFmg4=\n=pZtq\n-----END PGP SIGNATURE-----\n", "payload": "tree a060f5b049425798bdf7dc8470ae34c4e7e5b22b\nparent b1d6163622398bf289ffb1d34503647e730f2b7c\nparent 44d27ba28df30f80d039f0486cac46d7fb265fa3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562964414 +0200\ncommitter GitHub <noreply@github.com> 1562964414 +0200\n\nRollup merge of #62623 - pnkfelix:issue-62614-downgrade-indirect-structural-match-lint-to-allow, r=zackmdavis\n\ndowngrade indirect_structural_match lint to allow\n\nThis is a short-term band-aid for the regression aspect of #62614.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4e32a4e655846976475ef0a7dc5837eab796fe", "html_url": "https://github.com/rust-lang/rust/commit/fe4e32a4e655846976475ef0a7dc5837eab796fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe4e32a4e655846976475ef0a7dc5837eab796fe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d6163622398bf289ffb1d34503647e730f2b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d6163622398bf289ffb1d34503647e730f2b7c", "html_url": "https://github.com/rust-lang/rust/commit/b1d6163622398bf289ffb1d34503647e730f2b7c"}, {"sha": "44d27ba28df30f80d039f0486cac46d7fb265fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/44d27ba28df30f80d039f0486cac46d7fb265fa3", "html_url": "https://github.com/rust-lang/rust/commit/44d27ba28df30f80d039f0486cac46d7fb265fa3"}], "stats": {"total": 113, "additions": 99, "deletions": 14}, "files": [{"sha": "d1cae76de60a1b0a052eb87210729eef24971c6f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -350,7 +350,8 @@ declare_lint! {\n \n declare_lint! {\n     pub INDIRECT_STRUCTURAL_MATCH,\n-    Warn,\n+    // defaulting to allow until rust-lang/rust#62614 is fixed.\n+    Allow,\n     \"pattern with const indirectly referencing non-`#[structural_match]` type\"\n }\n \n@@ -451,6 +452,7 @@ declare_lint_pass! {\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n+        INDIRECT_STRUCTURAL_MATCH,\n     ]\n }\n "}, {"sha": "055886bf3676cd169c1787459ebb1461d3a5db6c", "filename": "src/test/ui/issues/issue-55511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55511.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -1,5 +1,5 @@\n+#![warn(indirect_structural_match)]\n use std::cell::Cell;\n-\n trait Foo<'a> {\n     const C: Option<Cell<&'a u32>>;\n }"}, {"sha": "e094256f5c8271cd9d8353822f7fdadf472bb88e", "filename": "src/test/ui/issues/issue-55511.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55511.stderr?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `std::cell::Cell` in a pattern, `std::cell::C\n LL |         <() as Foo<'static>>::C => { }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/issue-55511.rs:1:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "dca8aaef1500d84484f8f0c5dba4495bc0b4c2e1", "filename": "src/test/ui/rfc1445/allow-use-behind-cousin-variant.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-use-behind-cousin-variant.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -0,0 +1,59 @@\n+// rust-lang/rust#62614: we want to allow matching on constants of types that\n+// have non-structural-match variants, *if* the constant itself does not use\n+// any such variant.\n+\n+// NOTE: for now, deliberately leaving the lint `indirect_structural_match` set\n+// to its default, so that we will not issue a diangostic even if\n+// rust-lang/rust#62614 remains an open issue.\n+\n+// run-pass\n+\n+struct Sum(u32, u32);\n+\n+impl PartialEq for Sum {\n+    fn eq(&self, other: &Self) -> bool { self.0 + self.1 == other.0 + other.1 }\n+}\n+\n+impl Eq for Sum { }\n+\n+#[derive(PartialEq, Eq)]\n+enum Eek {\n+    TheConst,\n+    UnusedByTheConst(Sum)\n+}\n+\n+const THE_CONST: Eek = Eek::TheConst;\n+const SUM_THREE: Eek = Eek::UnusedByTheConst(Sum(3,0));\n+\n+const EEK_ZERO: &[Eek] = &[];\n+const EEK_ONE: &[Eek] = &[THE_CONST];\n+\n+pub fn main() {\n+    match Eek::UnusedByTheConst(Sum(1,2)) {\n+        ref sum if sum == &SUM_THREE => { println!(\"Hello 0\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match Eek::TheConst {\n+        THE_CONST => { println!(\"Hello 1\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+\n+    match & &Eek::TheConst {\n+        & & THE_CONST => { println!(\"Hello 2\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match & & &[][..] {\n+        & & EEK_ZERO => { println!(\"Hello 3\"); }\n+        & & EEK_ONE => { println!(\"Gbye\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+\n+    match & & &[Eek::TheConst][..] {\n+        & & EEK_ZERO => { println!(\"Gby\"); }\n+        & & EEK_ONE => { println!(\"Hello 4\"); }\n+        _ => { println!(\"Gbye\"); }\n+    }\n+}"}, {"sha": "584e7a00f0993339f42c09b510c531685443b63e", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n struct NoDerive(i32);\n \n // This impl makes NoDerive irreflexive."}, {"sha": "0328db5a49cf3c90b4ab42f013ae328c056f975b", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "5281d576066daa70918ddbd9c2bdc4a85011a0c5", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "54579e487a6b9d5e1f184b8d53e6b619104fd604", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "5d601c2c006f7b9f3616c269259c7d805f80a47c", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-doubly-indirect-param.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "2a24316898b5d0ec85fda2cb37fa6b985a66b3b3", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "4ac19afa706b0c3857416111155fc6d77a9f7999", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-embedded.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-embedded.stderr?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-indirect-struct-embedded.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "64e777f23223441833e0f918f1ac7c8e67958043", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,7 @@\n // through that we had intended to reject.\n //\n // See discussion on rust-lang/rust#62307 and rust-lang/rust#62339\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n struct NoDerive(i32);"}, {"sha": "4000a4798785420b356c2e98d3ae006a54951742", "filename": "src/test/ui/rfc1445/cant-hide-behind-indirect-struct-param.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-indirect-struct-param.stderr?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be a\n LL |         WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/cant-hide-behind-indirect-struct-param.rs:7:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}, {"sha": "98943a9666a9ae842b3a510da52eabbf4d9c6872", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -10,7 +10,7 @@\n \n // Issue 62307 pointed out a case where the checking for\n // `#[structural_match]` was too shallow.\n-\n+#![warn(indirect_structural_match)]\n // run-pass\n \n #[derive(Debug)]"}, {"sha": "0e158c2fda5607682ffbf88d403b15fdae984246", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe4e32a4e655846976475ef0a7dc5837eab796fe/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=fe4e32a4e655846976475ef0a7dc5837eab796fe", "patch": "@@ -4,7 +4,11 @@ warning: to use a constant of type `B` in a pattern, `B` must be annotated with\n LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n    |         ^^^^^\n    |\n-   = note: #[warn(indirect_structural_match)] on by default\n+note: lint level defined here\n+  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:9\n+   |\n+LL | #![warn(indirect_structural_match)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n "}]}