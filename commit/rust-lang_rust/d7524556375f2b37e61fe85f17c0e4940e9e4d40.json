{"sha": "d7524556375f2b37e61fe85f17c0e4940e9e4d40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTI0NTU2Mzc1ZjJiMzdlNjFmZTg1ZjE3YzBlNDk0MGU5ZTRkNDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T08:37:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T08:37:57Z"}, "message": "introduce project model", "tree": {"sha": "88ab8e2be5612cdc055d8a920864b42a4f2a15f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ab8e2be5612cdc055d8a920864b42a4f2a15f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7524556375f2b37e61fe85f17c0e4940e9e4d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7524556375f2b37e61fe85f17c0e4940e9e4d40", "html_url": "https://github.com/rust-lang/rust/commit/d7524556375f2b37e61fe85f17c0e4940e9e4d40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7524556375f2b37e61fe85f17c0e4940e9e4d40/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/541170420bb6f9a5c0e8d6f56865567fd8ae0f93", "html_url": "https://github.com/rust-lang/rust/commit/541170420bb6f9a5c0e8d6f56865567fd8ae0f93"}], "stats": {"total": 148, "additions": 145, "deletions": 3}, "files": [{"sha": "c3e7a6238583025783ceae0a3c2878d80d63bfd2", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7524556375f2b37e61fe85f17c0e4940e9e4d40/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d7524556375f2b37e61fe85f17c0e4940e9e4d40/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=d7524556375f2b37e61fe85f17c0e4940e9e4d40", "patch": "@@ -19,6 +19,7 @@ languageserver-types = \"0.49.0\"\n walkdir = \"2.2.0\"\n im = { version = \"11.0.1\", features = [\"arc\"] }\n text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n+cargo_metadata = \"0.6.0\"\n \n libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }"}, {"sha": "096b94a6d5b766727da24b6266b00fe94b8131aa", "filename": "crates/server/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7524556375f2b37e61fe85f17c0e4940e9e4d40/crates%2Fserver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7524556375f2b37e61fe85f17c0e4940e9e4d40/crates%2Fserver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Flib.rs?ref=d7524556375f2b37e61fe85f17c0e4940e9e4d40", "patch": "@@ -13,12 +13,14 @@ extern crate log;\n extern crate drop_bomb;\n extern crate url_serde;\n extern crate walkdir;\n+extern crate im;\n+extern crate relative_path;\n+extern crate cargo_metadata;\n+\n+extern crate gen_lsp_server;\n extern crate libeditor;\n extern crate libanalysis;\n extern crate libsyntax2;\n-extern crate gen_lsp_server;\n-extern crate im;\n-extern crate relative_path;\n \n mod caps;\n pub mod req;\n@@ -27,6 +29,7 @@ mod main_loop;\n mod vfs;\n mod path_map;\n mod server_world;\n+mod project_model;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n pub use caps::server_capabilities;"}, {"sha": "a33b34dd0fc453175ebf8144b304280050fb46c4", "filename": "crates/server/src/project_model.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/d7524556375f2b37e61fe85f17c0e4940e9e4d40/crates%2Fserver%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7524556375f2b37e61fe85f17c0e4940e9e4d40/crates%2Fserver%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fproject_model.rs?ref=d7524556375f2b37e61fe85f17c0e4940e9e4d40", "patch": "@@ -0,0 +1,138 @@\n+use std::{\n+    collections::HashMap,\n+    path::{Path, PathBuf},\n+};\n+use libsyntax2::SmolStr;\n+use cargo_metadata::{metadata_run, CargoOpt};\n+use Result;\n+\n+#[derive(Debug)]\n+pub struct CargoWorkspace {\n+    ws_members: Vec<Package>,\n+    packages: Vec<PackageData>,\n+    targets: Vec<TargetData>,\n+}\n+\n+#[derive(Clone, Copy, Debug)]\n+pub struct Package(usize);\n+#[derive(Clone, Copy, Debug)]\n+pub struct Target(usize);\n+\n+#[derive(Debug)]\n+struct PackageData {\n+    name: SmolStr,\n+    manifest: PathBuf,\n+    targets: Vec<Target>\n+}\n+\n+#[derive(Debug)]\n+struct TargetData {\n+    pkg: Package,\n+    name: SmolStr,\n+    root: PathBuf,\n+    kind: TargetKind,\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+pub enum TargetKind {\n+    Bin, Lib, Example, Test, Bench, Other,\n+}\n+\n+impl Package {\n+    pub fn name(self, ws: &CargoWorkspace) -> &str {\n+        ws.pkg(self).name.as_str()\n+    }\n+    pub fn manifest(self, ws: &CargoWorkspace) -> &Path {\n+        ws.pkg(self).manifest.as_path()\n+    }\n+    pub fn targets<'a>(self, ws: &'a CargoWorkspace) -> impl Iterator<Item=Target> + 'a {\n+        ws.pkg(self).targets.iter().cloned()\n+    }\n+}\n+\n+impl Target {\n+    pub fn pkg(self, ws: &CargoWorkspace) -> Package {\n+        ws.tgt(self).pkg\n+    }\n+    pub fn name(self, ws: &CargoWorkspace) -> &str {\n+        ws.tgt(self).name.as_str()\n+    }\n+    pub fn root(self, ws: &CargoWorkspace) -> &Path {\n+        ws.tgt(self).root.as_path()\n+    }\n+    pub fn kind(self, ws: &CargoWorkspace) -> TargetKind {\n+        ws.tgt(self).kind\n+    }\n+}\n+\n+impl CargoWorkspace {\n+    pub fn from_path(path: &Path) -> Result<CargoWorkspace> {\n+        let meta = metadata_run(\n+            Some(path),\n+            true,\n+            Some(CargoOpt::AllFeatures)\n+        ).map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n+        let mut pkg_by_id = HashMap::new();\n+        let mut packages = Vec::new();\n+        let mut targets = Vec::new();\n+        for meta_pkg in meta.packages {\n+            let pkg = Package(packages.len());\n+            pkg_by_id.insert(meta_pkg.id.clone(), pkg);\n+            let mut pkg_data = PackageData {\n+                name: meta_pkg.name.into(),\n+                manifest: PathBuf::from(meta_pkg.manifest_path),\n+                targets: Vec::new(),\n+            };\n+            for meta_tgt in meta_pkg.targets {\n+                let tgt = Target(targets.len());\n+                targets.push(TargetData {\n+                    pkg,\n+                    name: meta_tgt.name.into(),\n+                    root: PathBuf::from(meta_tgt.src_path),\n+                    kind: TargetKind::new(meta_tgt.kind.as_slice()),\n+                });\n+                pkg_data.targets.push(tgt);\n+            }\n+            packages.push(pkg_data)\n+        }\n+        let ws_members = meta.workspace_members\n+            .iter()\n+            .map(|it| pkg_by_id[&it.raw])\n+            .collect();\n+\n+        Ok(CargoWorkspace { packages, targets, ws_members })\n+    }\n+    pub fn packages<'a>(&'a self) -> impl Iterator<Item=Package> + 'a {\n+        (0..self.packages.len()).map(Package)\n+    }\n+    pub fn ws_members<'a>(&'a self) -> impl Iterator<Item=Package> + 'a {\n+        self.ws_members.iter().cloned()\n+    }\n+    pub fn target_by_roo(&self, root: &Path) -> Option<Target> {\n+        self.packages()\n+            .filter_map(|pkg| pkg.targets(self).find(|it| it.root(self) == root))\n+            .next()\n+    }\n+    fn pkg(&self, pkg: Package) -> &PackageData {\n+        &self.packages[pkg.0]\n+    }\n+    fn tgt(&self, tgt: Target) -> &TargetData {\n+        &self.targets[tgt.0]\n+    }\n+}\n+\n+impl TargetKind {\n+    fn new(kinds: &[String]) -> TargetKind {\n+        for kind in kinds {\n+            return match kind.as_str() {\n+                \"bin\" => TargetKind::Bin,\n+                \"test\" => TargetKind::Test,\n+                \"bench\" => TargetKind::Bench,\n+                \"example\" => TargetKind::Example,\n+                _ if kind.contains(\"lib\") => TargetKind::Lib,\n+                _ => continue,\n+            }\n+        }\n+        TargetKind::Other\n+    }\n+}"}]}