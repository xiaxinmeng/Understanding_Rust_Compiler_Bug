{"sha": "f83c22f24f2f497c454531e101cf63bf825e3bd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4M2MyMmYyNGYyZjQ5N2M0NTQ1MzFlMTAxY2Y2M2JmODI1ZTNiZDU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T03:03:04Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T04:26:59Z"}, "message": "Add trailing comma to a single arg in multiline", "tree": {"sha": "69e6a0cdceb630460c8ca27288b53b2c52925f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e6a0cdceb630460c8ca27288b53b2c52925f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83c22f24f2f497c454531e101cf63bf825e3bd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83c22f24f2f497c454531e101cf63bf825e3bd5", "html_url": "https://github.com/rust-lang/rust/commit/f83c22f24f2f497c454531e101cf63bf825e3bd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83c22f24f2f497c454531e101cf63bf825e3bd5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4cd9584b380b196d9f599916180136c66694d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cd9584b380b196d9f599916180136c66694d71", "html_url": "https://github.com/rust-lang/rust/commit/b4cd9584b380b196d9f599916180136c66694d71"}], "stats": {"total": 97, "additions": 79, "deletions": 18}, "files": [{"sha": "ad0d654175de754dfe63e31398fac441ed214962", "filename": "src/expr.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f83c22f24f2f497c454531e101cf63bf825e3bd5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c22f24f2f497c454531e101cf63bf825e3bd5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f83c22f24f2f497c454531e101cf63bf825e3bd5", "patch": "@@ -1655,24 +1655,24 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                                                 shape,\n                                                 used_width + 2 * paren_overhead,\n                                                 used_width + paren_overhead)\n-            .ok_or(Ordering::Greater)?;\n+        .ok_or(Ordering::Greater)?;\n \n     let span_lo = context.codemap.span_after(span, \"(\");\n     let span = mk_sp(span_lo, span.hi);\n \n-    let list_str = rewrite_call_args(context,\n-                                     args,\n-                                     span,\n-                                     nested_shape,\n-                                     one_line_width,\n-                                     force_trailing_comma)\n-            .ok_or(Ordering::Less)?;\n+    let (extendable, list_str) = rewrite_call_args(context,\n+                                                   args,\n+                                                   span,\n+                                                   nested_shape,\n+                                                   one_line_width,\n+                                                   force_trailing_comma)\n+        .ok_or(Ordering::Less)?;\n     let arg_one_line_budget = min(one_line_width, context.config.fn_call_width());\n     Ok(format!(\"{}{}\",\n                callee_str,\n                wrap_args_with_parens(context,\n                                      &list_str,\n-                                     is_extendable(args),\n+                                     extendable,\n                                      arg_one_line_budget,\n                                      shape,\n                                      nested_shape)))\n@@ -1684,7 +1684,7 @@ fn rewrite_call_args(context: &RewriteContext,\n                      shape: Shape,\n                      one_line_width: usize,\n                      force_trailing_comma: bool)\n-                     -> Option<String> {\n+                     -> Option<(bool, String)> {\n     let items = itemize_list(context.codemap,\n                              args.iter(),\n                              \")\",\n@@ -1717,12 +1717,12 @@ fn rewrite_call_args(context: &RewriteContext,\n             shape.block()\n         };\n         let rewrite = args.last().unwrap().rewrite(context, arg_shape);\n+        swap(&mut item_vec[args.len() - 1].item, &mut orig_last);\n \n         if let Some(rewrite) = rewrite {\n             let rewrite_first_line = Some(rewrite[..first_line_width(&rewrite)].to_owned());\n             placeholder = Some(rewrite);\n \n-            swap(&mut item_vec[args.len() - 1].item, &mut orig_last);\n             item_vec[args.len() - 1].item = rewrite_first_line;\n         }\n     }\n@@ -1765,18 +1765,27 @@ fn rewrite_call_args(context: &RewriteContext,\n         config: context.config,\n     };\n \n+    let args_in_single_line =\n+        item_vec\n+            .iter()\n+            .rev()\n+            .skip(1)\n+            .all(|item| item.item.as_ref().map_or(false, |s| !s.contains('\\n')));\n+\n     match write_list(&item_vec, &fmt) {\n         // If arguments do not fit in a single line and do not contain newline,\n         // try to put it on the next line. Try this only when we are in block mode\n         // and not rewriting macro.\n         Some(ref s) if context.config.fn_call_style() == IndentStyle::Block &&\n                        !context.inside_macro &&\n-                       (first_line_width(s) > one_line_width ||\n+                       (!can_be_overflowed(context, args) && args.len() == 1 && s.contains('\\n') ||\n+                        first_line_width(s) > one_line_width ||\n                         first_line_width(s) > context.config.fn_call_width()) => {\n             fmt.trailing_separator = SeparatorTactic::Vertical;\n-            write_list(&item_vec, &fmt)\n+            fmt.tactic = DefinitiveListTactic::Vertical;\n+            write_list(&item_vec, &fmt).map(|rw| (false, rw))\n         }\n-        rewrite @ _ => rewrite,\n+        rewrite @ _ => rewrite.map(|rw| (args_in_single_line && is_extendable(args), rw)),\n     }\n }\n \n@@ -2091,7 +2100,7 @@ pub fn rewrite_tuple(context: &RewriteContext,\n         return rewrite_tuple_type(context, items.iter().map(|x| &**x), span, shape);\n     }\n \n-    // We use the same rule as funcation call for rewriting tuple with multiple expressions.\n+    // We use the same rule as funcation call for rewriting tuple.\n     // 1 = \",\"\n     rewrite_call_inner(context,\n                        &String::new(),\n@@ -2100,7 +2109,7 @@ pub fn rewrite_tuple(context: &RewriteContext,\n                        span,\n                        shape,\n                        items.len() == 1)\n-            .ok()\n+        .ok()\n }\n \n pub fn rewrite_unary_prefix<R: Rewrite>(context: &RewriteContext,"}, {"sha": "6f613fb10bb4a656394ef920c3ddb5475d066bde", "filename": "tests/source/configs-fn_call_style-block-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Fsource%2Fconfigs-fn_call_style-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Fsource%2Fconfigs-fn_call_style-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block-trailing-comma.rs?ref=f83c22f24f2f497c454531e101cf63bf825e3bd5", "patch": "@@ -4,4 +4,5 @@\n // rustfmt should not add trailing comma when rewriting macro. See #1528.\n fn a() {\n     panic!(\"this is a long string that goes past the maximum line length causing rustfmt to insert a comma here:\");\n+    foo(oooptoptoptoptptooptoptoptoptptooptoptoptoptptoptoptoptoptpt());\n }"}, {"sha": "27f7ff67da9a507353456787e32631ce5eaae8dd", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=f83c22f24f2f497c454531e101cf63bf825e3bd5", "patch": "@@ -191,6 +191,19 @@ fn combine_block() {\n         },\n     );\n \n+    do_thing(\n+        x,\n+        (\n+            1,\n+            2,\n+            3,\n+            |param| {\n+                action();\n+                foo(param)\n+            },\n+        ),\n+    );\n+\n     Ok(\n         some_function(\n             lllllllllong_argument_one,\n@@ -226,6 +239,21 @@ fn combine_block() {\n             long_argument_two,\n             long_argument_three,\n         )),\n+        Some(x) => |x| {\n+            let y = x + 1;\n+            let z = y + 1;\n+            z\n+        },\n+        Some(x) => (1, 2, |x| {\n+            let y = x + 1;\n+            let z = y + 1;\n+            z\n+        }),\n+        Some(x) => SomeStruct {\n+            f1: long_argument_one,\n+            f2: long_argument_two,\n+            f3: long_argument_three,\n+        },\n         None => Ok(SomeStruct {\n             f1: long_argument_one,\n             f2: long_argument_two,"}, {"sha": "ebdf41d0e3b3c9d13c511fc4c23d120131949d7d", "filename": "tests/target/configs-fn_call_style-block-trailing-comma.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Ftarget%2Fconfigs-fn_call_style-block-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Ftarget%2Fconfigs-fn_call_style-block-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block-trailing-comma.rs?ref=f83c22f24f2f497c454531e101cf63bf825e3bd5", "patch": "@@ -4,4 +4,7 @@\n // rustfmt should not add trailing comma when rewriting macro. See #1528.\n fn a() {\n     panic!(\"this is a long string that goes past the maximum line length causing rustfmt to insert a comma here:\");\n+    foo(\n+        oooptoptoptoptptooptoptoptoptptooptoptoptoptptoptoptoptoptpt(),\n+    );\n }"}, {"sha": "cd19d8bb838c3d4988f9b32a1b1398a9be94000a", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=f83c22f24f2f497c454531e101cf63bf825e3bd5", "patch": "@@ -36,7 +36,7 @@ fn issue1420() {\n         r#\"\n         # Getting started\n         ...\n-    \"#\n+    \"#,\n     )\n         .running(waltz)\n }"}, {"sha": "b4d86ed82f5bdc3298700123782883609f63d6e8", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83c22f24f2f497c454531e101cf63bf825e3bd5/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=f83c22f24f2f497c454531e101cf63bf825e3bd5", "patch": "@@ -102,7 +102,7 @@ fn arrays() {\n             Weighted { weight: 1, item: 1 },\n             Weighted { weight: x, item: 2 },\n             Weighted { weight: 1, item: 3 },\n-        ]\n+        ],\n     );\n \n     let z = [\n@@ -257,6 +257,11 @@ fn combine_block() {\n         foo(param)\n     });\n \n+    do_thing(x, (1, 2, 3, |param| {\n+        action();\n+        foo(param)\n+    }));\n+\n     Ok(some_function(\n         lllllllllong_argument_one,\n         lllllllllong_argument_two,\n@@ -286,6 +291,21 @@ fn combine_block() {\n             long_argument_two,\n             long_argument_three,\n         )),\n+        Some(x) => |x| {\n+            let y = x + 1;\n+            let z = y + 1;\n+            z\n+        },\n+        Some(x) => (1, 2, |x| {\n+            let y = x + 1;\n+            let z = y + 1;\n+            z\n+        }),\n+        Some(x) => SomeStruct {\n+            f1: long_argument_one,\n+            f2: long_argument_two,\n+            f3: long_argument_three,\n+        },\n         None => Ok(SomeStruct {\n             f1: long_argument_one,\n             f2: long_argument_two,"}]}