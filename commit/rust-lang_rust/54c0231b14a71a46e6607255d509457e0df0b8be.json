{"sha": "54c0231b14a71a46e6607255d509457e0df0b8be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YzAyMzFiMTRhNzFhNDZlNjYwNzI1NWQ1MDk0NTdlMGRmMGI4YmU=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-24T15:21:29Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-24T21:52:13Z"}, "message": "Abort earlier upon multi-panics\n\nThe double-panic `abort` is run after the logging code, to provide\nfeedback in case of a double-panic. This means that if the panic\nlogging fails with a panic, the `abort` might never be reached.\n\nThis should not normally occur, but if the `on_panic` function detects\nmore than 2 panics, aborting *before* logging makes panic handling\nsomewhat more robust, as it avoids an infinite recursion, which would\neventually crash the process, but also make the problem harder to\ndebug.\n\nThis handles the FIXME about what to do if the thread printing panics.", "tree": {"sha": "41ef410ea263c71bb40005b6aae4c4fbf3615f4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ef410ea263c71bb40005b6aae4c4fbf3615f4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54c0231b14a71a46e6607255d509457e0df0b8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54c0231b14a71a46e6607255d509457e0df0b8be", "html_url": "https://github.com/rust-lang/rust/commit/54c0231b14a71a46e6607255d509457e0df0b8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54c0231b14a71a46e6607255d509457e0df0b8be/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b84909b00dcf5f762778b4aa9783770c69416d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b84909b00dcf5f762778b4aa9783770c69416d", "html_url": "https://github.com/rust-lang/rust/commit/c7b84909b00dcf5f762778b4aa9783770c69416d"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "2b2af350c992cc874737ccfe547e65ef9f7ffc2b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54c0231b14a71a46e6607255d509457e0df0b8be/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54c0231b14a71a46e6607255d509457e0df0b8be/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=54c0231b14a71a46e6607255d509457e0df0b8be", "patch": "@@ -52,7 +52,6 @@ fn log_panic(obj: &(Any+Send), file: &'static str, line: u32,\n     let prev = LOCAL_STDERR.with(|s| s.borrow_mut().take());\n     match (prev, err.as_mut()) {\n         (Some(mut stderr), _) => {\n-            // FIXME: what to do when the thread printing panics?\n             write(&mut *stderr);\n             let mut s = Some(stderr);\n             LOCAL_STDERR.with(|slot| {\n@@ -71,6 +70,17 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n         count\n     });\n \n+    // If this is the third nested call, on_panic triggered the last panic,\n+    // otherwise the double-panic check would have aborted the process.\n+    // Even if it is likely that on_panic was unable to log the backtrace,\n+    // abort immediately to avoid infinite recursion, so that attaching a\n+    // debugger provides a useable stacktrace.\n+    if panics >= 3 {\n+        util::dumb_print(format_args!(\"thread panicked while processing \\\n+                                       panic. aborting.\"));\n+        unsafe { intrinsics::abort() }\n+    }\n+\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     let log_backtrace = panics >= 2 || backtrace::log_enabled();"}]}