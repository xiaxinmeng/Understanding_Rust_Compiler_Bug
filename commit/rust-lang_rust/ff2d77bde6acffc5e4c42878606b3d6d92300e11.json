{"sha": "ff2d77bde6acffc5e4c42878606b3d6d92300e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMmQ3N2JkZTZhY2ZmYzVlNGM0Mjg3ODYwNmIzZDZkOTIzMDBlMTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-06T14:14:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T14:14:47Z"}, "message": "Merge #3029\n\n3029: Docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "76b0a8bbf94b0c68dd3aa891e0d9ea5cdf067863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b0a8bbf94b0c68dd3aa891e0d9ea5cdf067863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2d77bde6acffc5e4c42878606b3d6d92300e11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePB9XCRBK7hj4Ov3rIwAAdHIIAHn5xzQ0VLSByX7ucoQvWoqF\nh9QXhreYZYEULJqHSKAMUMTUaySQkwIgorMk7Tttmf2iiljTtGdE9nVSHRy0ot4e\nigtcCDXwToheW8OpixYQF8yrxsGUMURE08f8Rw+pHHp0jBwZZb2/cFPGslY6lfHy\n30aTxk2CHVUX45ObDzGMACCvTg+ai4AB+Uhu6yWCIaJhMXm/tPVZS0JC13iQh/pa\nWn5KZcj/uFvptAxrMbtY8oxshuXEw9JgKjM8sHRnYD51gf/oPNNHH650g8QYGWh6\nqm2mK+HE526cHcRF3F5a70/SYamP8hvutDzXd5J7NjNrIKpnpoiyMgX5L08tfjY=\n=zSF6\n-----END PGP SIGNATURE-----\n", "payload": "tree 76b0a8bbf94b0c68dd3aa891e0d9ea5cdf067863\nparent 19de59a9233a09a9b70a96a6c49213b119819c46\nparent 355c98fd0861acf0f0fddad08cbc923fee0698fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580998487 +0000\ncommitter GitHub <noreply@github.com> 1580998487 +0000\n\nMerge #3029\n\n3029: Docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2d77bde6acffc5e4c42878606b3d6d92300e11", "html_url": "https://github.com/rust-lang/rust/commit/ff2d77bde6acffc5e4c42878606b3d6d92300e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2d77bde6acffc5e4c42878606b3d6d92300e11/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19de59a9233a09a9b70a96a6c49213b119819c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/19de59a9233a09a9b70a96a6c49213b119819c46", "html_url": "https://github.com/rust-lang/rust/commit/19de59a9233a09a9b70a96a6c49213b119819c46"}, {"sha": "355c98fd0861acf0f0fddad08cbc923fee0698fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/355c98fd0861acf0f0fddad08cbc923fee0698fb", "html_url": "https://github.com/rust-lang/rust/commit/355c98fd0861acf0f0fddad08cbc923fee0698fb"}], "stats": {"total": 748, "additions": 428, "deletions": 320}, "files": [{"sha": "9346edc968e845ae369a3db4980d73bcadd96bd9", "filename": "Cargo.lock", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1123,6 +1123,37 @@ dependencies = [\n [[package]]\n name = \"ra_ide\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"either\",\n+ \"format-buf\",\n+ \"fst\",\n+ \"indexmap\",\n+ \"insta\",\n+ \"itertools\",\n+ \"join_to_string\",\n+ \"log\",\n+ \"once_cell\",\n+ \"proptest\",\n+ \"ra_assists\",\n+ \"ra_cfg\",\n+ \"ra_db\",\n+ \"ra_fmt\",\n+ \"ra_hir\",\n+ \"ra_ide_db\",\n+ \"ra_prof\",\n+ \"ra_syntax\",\n+ \"ra_text_edit\",\n+ \"rand 0.7.3\",\n+ \"rayon\",\n+ \"rustc-hash\",\n+ \"superslice\",\n+ \"test_utils\",\n+ \"unicase\",\n+]\n+\n+[[package]]\n+name = \"ra_ide_db\"\n+version = \"0.1.0\"\n dependencies = [\n  \"either\",\n  \"format-buf\","}, {"sha": "9ace35229da7867fdc61efcbc6d9d188e3466190", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -28,6 +28,7 @@ once_cell = \"1.2.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n+ra_ide_db = { path = \"../ra_ide_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }"}, {"sha": "f26047570f380b2dd9a9de9b0248a0036eb1465c", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,13 +1,13 @@\n //! FIXME: write short doc here\n \n+use either::Either;\n+use ra_assists::{AssistAction, AssistLabel};\n use ra_db::{FilePosition, FileRange};\n+use ra_ide_db::RootDatabase;\n+\n+use crate::{imports_locator::ImportsLocatorIde, FileId, SourceChange, SourceFileEdit};\n \n-use crate::{\n-    db::RootDatabase, imports_locator::ImportsLocatorIde, FileId, SourceChange, SourceFileEdit,\n-};\n-use either::Either;\n pub use ra_assists::AssistId;\n-use ra_assists::{AssistAction, AssistLabel};\n \n #[derive(Debug)]\n pub struct Assist {"}, {"sha": "f984f40ad70f26fd1eedb5c8ffa1646976fb34cc", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -3,14 +3,14 @@\n use indexmap::IndexMap;\n \n use hir::db::AstDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode, TextRange,\n };\n \n use crate::{\n     call_info::FnCallNode,\n-    db::RootDatabase,\n     display::{ShortLabel, ToNav},\n     expand::descend_into_macros,\n     goto_definition, references, FilePosition, NavigationTarget, RangeInfo,"}, {"sha": "f2b29306e63eaae366c4107c25b27c17692572ee", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,15 +1,13 @@\n //! FIXME: write short doc here\n use hir::db::AstDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, ArgListOwner},\n     match_ast, AstNode, SyntaxNode,\n };\n-\n use test_utils::tested_by;\n \n-use crate::{\n-    db::RootDatabase, expand::descend_into_macros, CallInfo, FilePosition, FunctionSignature,\n-};\n+use crate::{expand::descend_into_macros, CallInfo, FilePosition, FunctionSignature};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {"}, {"sha": "fedc02e14b37cb6c3c791a8ffe3f403f06f6544b", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -17,6 +17,7 @@ mod complete_postfix;\n mod complete_macro_in_item_position;\n \n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n \n #[cfg(test)]\n use crate::completion::completion_item::do_completion;\n@@ -25,7 +26,7 @@ use crate::{\n         completion_context::CompletionContext,\n         completion_item::{CompletionKind, Completions},\n     },\n-    db, FilePosition,\n+    FilePosition,\n };\n \n pub use crate::completion::completion_item::{\n@@ -54,7 +55,7 @@ pub use crate::completion::completion_item::{\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n-pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Option<Completions> {\n+pub(crate) fn completions(db: &RootDatabase, position: FilePosition) -> Option<Completions> {\n     let original_parse = db.parse(position.file_id);\n     let ctx = CompletionContext::new(db, &original_parse, position)?;\n "}, {"sha": "5a0407fd7b46f1906ba665356c006ee47a3abd33", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n     ast, AstNode, Parse, SourceFile,\n@@ -8,13 +9,13 @@ use ra_syntax::{\n };\n use ra_text_edit::AtomTextEdit;\n \n-use crate::{db, FilePosition};\n+use crate::FilePosition;\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n-    pub(super) db: &'a db::RootDatabase,\n+    pub(super) db: &'a RootDatabase,\n     pub(super) analyzer: hir::SourceAnalyzer,\n     pub(super) offset: TextUnit,\n     pub(super) token: SyntaxToken,\n@@ -48,7 +49,7 @@ pub(crate) struct CompletionContext<'a> {\n \n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n-        db: &'a db::RootDatabase,\n+        db: &'a RootDatabase,\n         original_parse: &'a Parse<ast::SourceFile>,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {"}, {"sha": "22bd497231afd258415726d32ea7f143a2bf6f43", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -5,6 +5,7 @@ use std::cell::RefCell;\n use hir::diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink};\n use itertools::Itertools;\n use ra_db::{RelativePath, SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     algo,\n@@ -13,7 +14,7 @@ use ra_syntax::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{db::RootDatabase, Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit};\n+use crate::{Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit};\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {"}, {"sha": "c23e08e9a31cf32dab16cd7a317c7b5f667e2cbb", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -4,13 +4,11 @@ use std::fmt::{self, Display};\n \n use hir::{Docs, Documentation, HasSource, HirDisplay};\n use join_to_string::join;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n use std::convert::From;\n \n-use crate::{\n-    db,\n-    display::{generic_parameters, where_predicates},\n-};\n+use crate::display::{generic_parameters, where_predicates};\n \n #[derive(Debug)]\n pub enum CallableKind {\n@@ -48,13 +46,13 @@ impl FunctionSignature {\n         self\n     }\n \n-    pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n+    pub(crate) fn from_hir(db: &RootDatabase, function: hir::Function) -> Self {\n         let doc = function.docs(db);\n         let ast_node = function.source(db).value;\n         FunctionSignature::from(&ast_node).with_doc_opt(doc)\n     }\n \n-    pub(crate) fn from_struct(db: &db::RootDatabase, st: hir::Struct) -> Option<Self> {\n+    pub(crate) fn from_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n         let node: ast::StructDef = st.source(db).value;\n         match node.kind() {\n             ast::StructKind::Record(_) => return None,\n@@ -86,10 +84,7 @@ impl FunctionSignature {\n         )\n     }\n \n-    pub(crate) fn from_enum_variant(\n-        db: &db::RootDatabase,\n-        variant: hir::EnumVariant,\n-    ) -> Option<Self> {\n+    pub(crate) fn from_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Option<Self> {\n         let node: ast::EnumVariant = variant.source(db).value;\n         match node.kind() {\n             ast::StructKind::Record(_) | ast::StructKind::Unit => return None,\n@@ -126,7 +121,7 @@ impl FunctionSignature {\n         )\n     }\n \n-    pub(crate) fn from_macro(db: &db::RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n+    pub(crate) fn from_macro(db: &RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n         let node: ast::MacroCall = macro_def.source(db).value;\n \n         let params = vec![];"}, {"sha": "906aab1eba92b0f9d07eb4c4605d3c61617a1755", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -3,14 +3,15 @@\n use either::Either;\n use hir::{AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n     SyntaxKind::{self, BIND_PAT, TYPE_PARAM},\n     TextRange,\n };\n \n-use crate::{db::RootDatabase, expand::original_range, FileSymbol};\n+use crate::{expand::original_range, FileSymbol};\n \n use super::short_label::ShortLabel;\n "}, {"sha": "9f3aaa3a3fcca75effa1056c944f10612a72b292", "filename": "crates/ra_ide/src/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -3,9 +3,10 @@ use std::iter::successors;\n \n use hir::{InFile, Origin};\n use ra_db::FileId;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken, TextRange};\n \n-use crate::{db::RootDatabase, FileRange};\n+use crate::FileRange;\n \n pub(crate) fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> FileRange {\n     if let Some((range, Origin::Call)) = original_range_and_origin(db, node) {"}, {"sha": "af2783befb3d1e3f123fdcfa2b838f2248d8d283", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,14 +1,15 @@\n //! This modules implements \"expand macro\" functionality in the IDE\n \n-use crate::{db::RootDatabase, FilePosition};\n use hir::db::AstDatabase;\n use ra_db::SourceDatabase;\n-use rustc_hash::FxHashMap;\n-\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{find_node_at_offset, replace_descendants},\n     ast, AstNode, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode, WalkEvent, T,\n };\n+use rustc_hash::FxHashMap;\n+\n+use crate::FilePosition;\n \n pub struct ExpandedMacro {\n     pub name: String,\n@@ -185,15 +186,15 @@ fn some_thing() -> u32 {\n         //- /lib.rs\n         macro_rules! match_ast {\n             (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n-        \n+\n             (match ($node:expr) {\n                 $( ast::$ast:ident($it:ident) => $res:block, )*\n                 _ => $catch_all:expr $(,)?\n             }) => {{\n                 $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n                 { $catch_all }\n             }};\n-        }        \n+        }\n \n         fn main() {\n             mat<|>ch_ast! {\n@@ -227,11 +228,11 @@ fn some_thing() -> u32 {\n             r#\"\n         //- /lib.rs\n         macro_rules! match_ast {\n-            (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };        \n+            (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n             (match ($node:expr) {}) => {{}};\n-        }        \n+        }\n \n-        fn main() {        \n+        fn main() {\n             let p = f(|it| {\n                 let res = mat<|>ch_ast! { match c {}};\n                 Some(res)\n@@ -254,9 +255,9 @@ fn some_thing() -> u32 {\n         }\n         macro_rules! foo {\n             () => {bar!()};\n-        }        \n+        }\n \n-        fn main() {        \n+        fn main() {\n             let res = fo<|>o!();\n         }\n         \"#,\n@@ -277,9 +278,9 @@ fn some_thing() -> u32 {\n         }\n         macro_rules! foo {\n             () => {$crate::bar!()};\n-        }        \n+        }\n \n-        fn main() {        \n+        fn main() {\n             let res = fo<|>o!();\n         }\n         \"#,"}, {"sha": "726963a33e33fc2f7505f6f301624a64054d6c07", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,6 +1,10 @@\n //! FIXME: write short doc here\n \n+use std::iter::successors;\n+\n+use hir::db::AstDatabase;\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, AstNode, AstToken},\n@@ -9,9 +13,7 @@ use ra_syntax::{\n     SyntaxNode, SyntaxToken, TextRange, TextUnit, TokenAtOffset, T,\n };\n \n-use crate::{db::RootDatabase, expand::descend_into_macros, FileId, FileRange};\n-use hir::db::AstDatabase;\n-use std::iter::successors;\n+use crate::{expand::descend_into_macros, FileId, FileRange};\n \n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n     let src = db.parse(frange.file_id).tree();\n@@ -512,8 +514,8 @@ fn bar(){}\n     fn test_extend_trait_bounds_list_in_where_clause() {\n         do_check(\n             r#\"\n-fn foo<R>() \n-    where \n+fn foo<R>()\n+    where\n         R: req::Request + 'static,\n         R::Params: DeserializeOwned<|> + panic::UnwindSafe + 'static,\n         R::Result: Serialize + 'static,"}, {"sha": "e9329a72c90f0af15c73bdb5dbde76554466423a", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{db::AstDatabase, InFile, SourceBinder};\n+use ra_ide_db::{symbol_index, RootDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode,\n@@ -9,7 +10,6 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::RootDatabase,\n     display::{ShortLabel, ToNav},\n     expand::descend_into_macros,\n     references::{classify_name_ref, NameKind::*},\n@@ -94,7 +94,7 @@ pub(crate) fn reference_definition(\n     };\n \n     // Fallback index based approach:\n-    let navs = crate::symbol_index::index_resolve(sb.db, name_ref.value)\n+    let navs = symbol_index::index_resolve(sb.db, name_ref.value)\n         .into_iter()\n         .map(|s| s.to_nav(sb.db))\n         .collect();"}, {"sha": "11ad6d137213767afdc76d7dcf493bcbd6c96632", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n use hir::db::AstDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n-    db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n-    RangeInfo,\n+    display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget, RangeInfo,\n };\n \n pub(crate) fn goto_type_definition("}, {"sha": "315b8819048146fcf2a3ca4b49f7ed149c58a028", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -2,6 +2,7 @@\n \n use hir::{db::AstDatabase, Adt, HasSource, HirDisplay, SourceBinder};\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n@@ -11,7 +12,6 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::RootDatabase,\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},"}, {"sha": "64a2dadc85eb603757a1cf4fe65efd1d598ccd88", "filename": "crates/ra_ide/src/impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimpls.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -2,9 +2,10 @@\n \n use hir::{Crate, ImplBlock, SourceBinder};\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n-use crate::{db::RootDatabase, display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n pub(crate) fn goto_implementation(\n     db: &RootDatabase,"}, {"sha": "cfd58aafeb521af50517ee70a616a1f57435a6f0", "filename": "crates/ra_ide/src/imports_locator.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,17 +1,20 @@\n //! This module contains an import search funcionality that is provided to the ra_assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n-use crate::{\n-    db::RootDatabase,\n-    references::{classify_name, NameDefinition, NameKind},\n-    symbol_index::{self, FileSymbol},\n-    Query,\n-};\n use hir::{db::HirDatabase, ModuleDef, SourceBinder};\n use ra_assists::ImportsLocator;\n+use ra_ide_db::{\n+    symbol_index::{self, FileSymbol},\n+    RootDatabase,\n+};\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n+use crate::{\n+    references::{classify_name, NameDefinition, NameKind},\n+    Query,\n+};\n+\n pub(crate) struct ImportsLocatorIde<'a> {\n     source_binder: SourceBinder<'a, RootDatabase>,\n }"}, {"sha": "6b0d3d996fac2c5e49f7ec977d3b20b749f00f8b", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -2,13 +2,14 @@\n \n use hir::{HirDisplay, SourceAnalyzer, SourceBinder};\n use once_cell::unsync::Lazy;\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-use crate::{db::RootDatabase, FileId, FunctionSignature};\n+use crate::{FileId, FunctionSignature};\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum InlayKind {"}, {"sha": "5fb111a90d9feca25ed64a0aab99c53ed7ed3d6e", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 91, "deletions": 56, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -10,12 +10,8 @@\n // For proving that RootDatabase is RefUnwindSafe.\n #![recursion_limit = \"128\"]\n \n-mod db;\n pub mod mock_analysis;\n-mod symbol_index;\n-mod change;\n mod source_change;\n-mod feature_flags;\n \n mod status;\n mod completion;\n@@ -35,14 +31,11 @@ mod assists;\n mod diagnostics;\n mod syntax_tree;\n mod folding_ranges;\n-mod line_index;\n-mod line_index_utils;\n mod join_lines;\n mod typing;\n mod matching_brace;\n mod display;\n mod inlay_hints;\n-mod wasm_shims;\n mod expand;\n mod expand_macro;\n \n@@ -58,24 +51,24 @@ use ra_db::{\n     salsa::{self, ParallelDatabase},\n     CheckCanceled, Env, FileLoader, SourceDatabase,\n };\n+use ra_ide_db::{\n+    symbol_index::{self, FileSymbol},\n+    LineIndexDatabase,\n+};\n use ra_syntax::{SourceFile, TextRange, TextUnit};\n \n-use crate::{db::LineIndexDatabase, display::ToNav, symbol_index::FileSymbol};\n+use crate::display::ToNav;\n \n pub use crate::{\n     assists::{Assist, AssistId},\n     call_hierarchy::CallItem,\n-    change::{AnalysisChange, LibraryData},\n     completion::{CompletionItem, CompletionItemKind, InsertTextFormat},\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n-    feature_flags::FeatureFlags,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n     inlay_hints::{InlayHint, InlayKind},\n-    line_index::{LineCol, LineIndex},\n-    line_index_utils::translate_offset_with_edit,\n     references::{\n         Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n     },\n@@ -88,6 +81,14 @@ pub use hir::Documentation;\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n };\n+pub use ra_ide_db::{\n+    change::{AnalysisChange, LibraryData},\n+    feature_flags::FeatureFlags,\n+    line_index::{LineCol, LineIndex},\n+    line_index_utils::translate_offset_with_edit,\n+    symbol_index::Query,\n+    RootDatabase,\n+};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n@@ -99,46 +100,6 @@ pub struct Diagnostic {\n     pub severity: Severity,\n }\n \n-#[derive(Debug)]\n-pub struct Query {\n-    query: String,\n-    lowercased: String,\n-    only_types: bool,\n-    libs: bool,\n-    exact: bool,\n-    limit: usize,\n-}\n-\n-impl Query {\n-    pub fn new(query: String) -> Query {\n-        let lowercased = query.to_lowercase();\n-        Query {\n-            query,\n-            lowercased,\n-            only_types: false,\n-            libs: false,\n-            exact: false,\n-            limit: usize::max_value(),\n-        }\n-    }\n-\n-    pub fn only_types(&mut self) {\n-        self.only_types = true;\n-    }\n-\n-    pub fn libs(&mut self) {\n-        self.libs = true;\n-    }\n-\n-    pub fn exact(&mut self) {\n-        self.exact = true;\n-    }\n-\n-    pub fn limit(&mut self, limit: usize) {\n-        self.limit = limit\n-    }\n-}\n-\n /// Info associated with a text range.\n #[derive(Debug)]\n pub struct RangeInfo<T> {\n@@ -163,7 +124,7 @@ pub struct CallInfo {\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug)]\n pub struct AnalysisHost {\n-    db: db::RootDatabase,\n+    db: RootDatabase,\n }\n \n impl Default for AnalysisHost {\n@@ -174,7 +135,7 @@ impl Default for AnalysisHost {\n \n impl AnalysisHost {\n     pub fn new(lru_capcity: Option<usize>, feature_flags: FeatureFlags) -> AnalysisHost {\n-        AnalysisHost { db: db::RootDatabase::new(lru_capcity, feature_flags) }\n+        AnalysisHost { db: RootDatabase::new(lru_capcity, feature_flags) }\n     }\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n@@ -224,7 +185,7 @@ impl AnalysisHost {\n /// `Analysis` are canceled (most method return `Err(Canceled)`).\n #[derive(Debug)]\n pub struct Analysis {\n-    db: salsa::Snapshot<db::RootDatabase>,\n+    db: salsa::Snapshot<RootDatabase>,\n }\n \n // As a general design guideline, `Analysis` API are intended to be independent\n@@ -505,7 +466,7 @@ impl Analysis {\n     }\n \n     /// Performs an operation on that may be Canceled.\n-    fn with_db<F: FnOnce(&db::RootDatabase) -> T + std::panic::UnwindSafe, T>(\n+    fn with_db<F: FnOnce(&RootDatabase) -> T + std::panic::UnwindSafe, T>(\n         &self,\n         f: F,\n     ) -> Cancelable<T> {\n@@ -518,3 +479,77 @@ fn analysis_is_send() {\n     fn is_send<T: Send>() {}\n     is_send::<Analysis>();\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n+    use ra_syntax::{\n+        SmolStr,\n+        SyntaxKind::{FN_DEF, STRUCT_DEF},\n+    };\n+\n+    #[test]\n+    fn test_world_symbols_with_no_container() {\n+        let code = r#\"\n+    enum FooInner { }\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert!(s.container_name().is_none());\n+    }\n+\n+    #[test]\n+    fn test_world_symbols_include_container_name() {\n+        let code = r#\"\n+fn foo() {\n+    enum FooInner { }\n+}\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+\n+        let code = r#\"\n+mod foo {\n+    struct FooInner;\n+}\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+    }\n+\n+    #[test]\n+    fn test_world_symbols_are_case_sensitive() {\n+        let code = r#\"\n+fn foo() {}\n+\n+struct Foo;\n+        \"#;\n+\n+        let symbols = get_symbols_matching(code, \"Foo\");\n+\n+        let fn_match = symbols.iter().find(|s| s.name() == \"foo\").map(|s| s.kind());\n+        let struct_match = symbols.iter().find(|s| s.name() == \"Foo\").map(|s| s.kind());\n+\n+        assert_eq!(fn_match, Some(FN_DEF));\n+        assert_eq!(struct_match, Some(STRUCT_DEF));\n+    }\n+\n+    fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n+        let (analysis, _) = single_file(text);\n+        analysis.symbol_search(Query::new(query.into())).unwrap()\n+    }\n+}"}, {"sha": "e0332da88f0718ce87d18731bbc7f78f13db2697", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,12 +1,13 @@\n //! FIXME: write short doc here\n \n use ra_db::{CrateId, FileId, FilePosition, SourceDatabase};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstNode},\n };\n \n-use crate::{db::RootDatabase, NavigationTarget};\n+use crate::NavigationTarget;\n \n /// This returns `Vec` because a module may be included from several places. We\n /// don't handle this case yet though, so the Vec has length at most one."}, {"sha": "b47f8bcd9e42eb24d69941702682accadacd68bb", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -17,16 +17,15 @@ mod search_scope;\n use hir::{InFile, SourceBinder};\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n     match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TextUnit, TokenAtOffset,\n };\n \n-use crate::{\n-    db::RootDatabase, display::ToNav, FilePosition, FileRange, NavigationTarget, RangeInfo,\n-};\n+use crate::{display::ToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n \n pub(crate) use self::{\n     classify::{classify_name, classify_name_ref},"}, {"sha": "758ea4e8b789bb6d6208de8e55163fa30918583f", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -9,7 +9,7 @@ use super::{\n     name_definition::{from_assoc_item, from_module_def, from_struct_field},\n     NameDefinition, NameKind,\n };\n-use crate::db::RootDatabase;\n+use ra_ide_db::RootDatabase;\n \n pub(crate) fn classify_name(\n     sb: &mut SourceBinder<RootDatabase>,"}, {"sha": "71565e6d395d8031a1ca60ea9e6c855886eff28d", "filename": "crates/ra_ide/src/references/name_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -9,7 +9,7 @@ use hir::{\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n-use crate::db::RootDatabase;\n+use ra_ide_db::RootDatabase;\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum NameKind {"}, {"sha": "08e77c01fbd0ef1f24bc0c2ff3023d5440ed909c", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -2,14 +2,14 @@\n \n use hir::ModuleSource;\n use ra_db::{RelativePath, RelativePathBuf, SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset, ast, lex_single_valid_syntax_kind, AstNode, SyntaxKind, SyntaxNode,\n };\n use ra_text_edit::TextEdit;\n \n use crate::{\n-    db::RootDatabase, FileId, FilePosition, FileSystemEdit, RangeInfo, SourceChange,\n-    SourceFileEdit, TextRange,\n+    FileId, FilePosition, FileSystemEdit, RangeInfo, SourceChange, SourceFileEdit, TextRange,\n };\n \n use super::find_all_refs;"}, {"sha": "97c65c2cd49217aefb81be9807318939ec051df4", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -10,7 +10,7 @@ use ra_prof::profile;\n use ra_syntax::{AstNode, TextRange};\n use rustc_hash::FxHashMap;\n \n-use crate::db::RootDatabase;\n+use ra_ide_db::RootDatabase;\n \n use super::{NameDefinition, NameKind};\n "}, {"sha": "b6b0c70f9dbf4dc184f6429e1cfcc9d427015543", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -3,12 +3,13 @@\n use hir::InFile;\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, ModuleItemOwner, NameOwner},\n     match_ast, SyntaxNode, TextRange,\n };\n \n-use crate::{db::RootDatabase, FileId};\n+use crate::FileId;\n \n #[derive(Debug)]\n pub struct Runnable {"}, {"sha": "30eb5c995e6376dd4878403518e052c29656b854", "filename": "crates/ra_ide/src/status.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fstatus.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -10,14 +10,14 @@ use ra_db::{\n     },\n     FileTextQuery, SourceRootId,\n };\n+use ra_ide_db::{\n+    symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n+    RootDatabase,\n+};\n use ra_prof::{memory_usage, Bytes};\n use ra_syntax::{ast, Parse, SyntaxNode};\n \n-use crate::{\n-    db::RootDatabase,\n-    symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n-    FileId,\n-};\n+use crate::FileId;\n \n fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n     db.query(ra_db::ParseQuery).entries::<SyntaxTreeStats>()"}, {"sha": "c5d249fe8e3211b198690ff5e4abf0d5389bc1b2", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -4,14 +4,14 @@ use rustc_hash::FxHashMap;\n \n use hir::{HirFileId, InFile, Name, SourceAnalyzer, SourceBinder};\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken, TextRange,\n     WalkEvent, T,\n };\n \n use crate::{\n-    db::RootDatabase,\n     expand::descend_into_macros_with_analyzer,\n     references::{\n         classify_name, classify_name_ref,"}, {"sha": "55966daf3bdc0387771d8aebee75f9592a8748ed", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n-use crate::db::RootDatabase;\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo, AstNode, NodeOrToken, SourceFile,\n     SyntaxKind::{RAW_STRING, STRING},"}, {"sha": "e5d1779fdc140742207bf3af7b4cf51696516b44", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -15,6 +15,7 @@\n \n use ra_db::{FilePosition, SourceDatabase};\n use ra_fmt::leading_indent;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstToken},\n@@ -24,7 +25,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEdit;\n \n-use crate::{db::RootDatabase, source_change::SingleFileChange, SourceChange, SourceFileEdit};\n+use crate::{source_change::SingleFileChange, SourceChange, SourceFileEdit};\n \n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n     let parse = db.parse(position.file_id);"}, {"sha": "1b7905eb3d61b738677043134035afdfca2b50b2", "filename": "crates/ra_ide_db/Cargo.toml", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -0,0 +1,48 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_ide_db\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+\n+[lib]\n+doctest = false\n+\n+[features]\n+wasm = []\n+\n+[dependencies]\n+either = \"1.5\"\n+format-buf = \"1.0.0\"\n+indexmap = \"1.3.0\"\n+itertools = \"0.8.0\"\n+join_to_string = \"0.1.3\"\n+log = \"0.4.5\"\n+rayon = \"1.0.2\"\n+fst = { version = \"0.3.1\", default-features = false }\n+rustc-hash = \"1.0\"\n+unicase = \"2.2.0\"\n+superslice = \"1.0.0\"\n+rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n+once_cell = \"1.2.0\"\n+\n+ra_syntax = { path = \"../ra_syntax\" }\n+ra_text_edit = { path = \"../ra_text_edit\" }\n+ra_db = { path = \"../ra_db\" }\n+ra_cfg = { path = \"../ra_cfg\" }\n+ra_fmt = { path = \"../ra_fmt\" }\n+ra_prof = { path = \"../ra_prof\" }\n+test_utils = { path = \"../test_utils\" }\n+ra_assists = { path = \"../ra_assists\" }\n+\n+# ra_ide should depend only on the top-level `hir` package. if you need\n+# something from some `hir_xxx` subpackage, reexport the API via `hir`.\n+hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n+\n+[dev-dependencies]\n+insta = \"0.13.0\"\n+\n+[dev-dependencies.proptest]\n+version = \"0.9.0\"\n+# Disable `fork` feature to allow compiling on webassembly\n+default-features = false\n+features = [\"std\", \"bit-set\", \"break-dead-code\"]"}, {"sha": "4668784d3f13e46db5a1cf7974ed106a2947b04a", "filename": "crates/ra_ide_db/src/change.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! Defines a unit of change that can applied to a state of IDE to get the next\n+//! state. Changes are transactional.\n \n use std::{fmt, sync::Arc, time};\n \n@@ -14,8 +15,8 @@ use rayon::prelude::*;\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    db::{DebugData, RootDatabase},\n     symbol_index::{SymbolIndex, SymbolsDatabase},\n+    DebugData, RootDatabase,\n };\n \n #[derive(Default)]\n@@ -168,12 +169,12 @@ impl LibraryData {\n const GC_COOLDOWN: time::Duration = time::Duration::from_millis(100);\n \n impl RootDatabase {\n-    pub(crate) fn request_cancellation(&mut self) {\n+    pub fn request_cancellation(&mut self) {\n         let _p = profile(\"RootDatabase::request_cancellation\");\n         self.salsa_runtime_mut().synthetic_write(Durability::LOW);\n     }\n \n-    pub(crate) fn apply_change(&mut self, change: AnalysisChange) {\n+    pub fn apply_change(&mut self, change: AnalysisChange) {\n         let _p = profile(\"RootDatabase::apply_change\");\n         self.request_cancellation();\n         log::info!(\"apply_change {:?}\", change);\n@@ -245,7 +246,7 @@ impl RootDatabase {\n         self.set_source_root_with_durability(root_id, Arc::new(source_root), durability);\n     }\n \n-    pub(crate) fn maybe_collect_garbage(&mut self) {\n+    pub fn maybe_collect_garbage(&mut self) {\n         if cfg!(feature = \"wasm\") {\n             return;\n         }\n@@ -255,7 +256,7 @@ impl RootDatabase {\n         }\n     }\n \n-    pub(crate) fn collect_garbage(&mut self) {\n+    pub fn collect_garbage(&mut self) {\n         if cfg!(feature = \"wasm\") {\n             return;\n         }\n@@ -282,7 +283,7 @@ impl RootDatabase {\n         self.query(hir::db::BodyQuery).sweep(sweep);\n     }\n \n-    pub(crate) fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n+    pub fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n         let mut acc: Vec<(String, Bytes)> = vec![];\n         let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n         macro_rules! sweep_each_query {", "previous_filename": "crates/ra_ide/src/change.rs"}, {"sha": "1b3cabf4d95f570e0b461d0575b5c98c99db3e06", "filename": "crates/ra_ide_db/src/feature_flags.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! See docs for `FeatureFlags`.\n \n use rustc_hash::FxHashMap;\n ", "previous_filename": "crates/ra_ide/src/feature_flags.rs"}, {"sha": "e922d1e5f9c1d349c581fb98f2a9b9b890f8fd30", "filename": "crates/ra_ide_db/src/lib.rs", "status": "renamed", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,4 +1,13 @@\n-//! FIXME: write short doc here\n+//! This crate defines the core datastructure representing IDE state -- `RootDatabase`.\n+//!\n+//! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n+\n+pub mod line_index;\n+pub mod line_index_utils;\n+pub mod feature_flags;\n+pub mod symbol_index;\n+pub mod change;\n+mod wasm_shims;\n \n use std::sync::Arc;\n \n@@ -9,10 +18,7 @@ use ra_db::{\n };\n use rustc_hash::FxHashMap;\n \n-use crate::{\n-    symbol_index::{self, SymbolsDatabase},\n-    FeatureFlags, LineIndex,\n-};\n+use crate::{feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::SymbolsDatabase};\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n@@ -25,12 +31,12 @@ use crate::{\n     hir::db::HirDatabaseStorage\n )]\n #[derive(Debug)]\n-pub(crate) struct RootDatabase {\n+pub struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    pub(crate) feature_flags: Arc<FeatureFlags>,\n+    pub feature_flags: Arc<FeatureFlags>,\n     pub(crate) debug_data: Arc<DebugData>,\n-    pub(crate) last_gc: crate::wasm_shims::Instant,\n-    pub(crate) last_gc_check: crate::wasm_shims::Instant,\n+    pub last_gc: crate::wasm_shims::Instant,\n+    pub last_gc_check: crate::wasm_shims::Instant,\n }\n \n impl FileLoader for RootDatabase {\n@@ -109,7 +115,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n }\n \n #[salsa::query_group(LineIndexDatabaseStorage)]\n-pub(crate) trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n+pub trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n     fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;\n }\n ", "previous_filename": "crates/ra_ide/src/db.rs"}, {"sha": "452c87ac513523931a42b0ebb06e25d04f0a0426", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,6 +1,7 @@\n-//! FIXME: write short doc here\n+//! `LineIndex` maps flat `TextUnit` offsets into `(Line, Column)`\n+//! representation.\n \n-use crate::TextUnit;\n+use ra_syntax::TextUnit;\n use rustc_hash::FxHashMap;\n use superslice::Ext;\n ", "previous_filename": "crates/ra_ide/src/line_index.rs"}, {"sha": "435b06511663ff8653ba90fdfc36f2daff80c49d", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "renamed", "additions": 87, "deletions": 77, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,9 +1,87 @@\n-//! FIXME: write short doc here\n+//! Code actions can specify desirable final position of the cursor.\n+//!\n+//! The position is specified as a `TextUnit` in the final file. We need to send\n+//! it in `(Line, Column)` coordinate though. However, we only have a LineIndex\n+//! for a file pre-edit!\n+//!\n+//! Code in this module applies this \"to (Line, Column) after edit\"\n+//! transformation.\n \n-use crate::{line_index::Utf16Char, LineCol, LineIndex};\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n \n+use crate::line_index::{LineCol, LineIndex, Utf16Char};\n+\n+pub fn translate_offset_with_edit(\n+    line_index: &LineIndex,\n+    offset: TextUnit,\n+    text_edit: &TextEdit,\n+) -> LineCol {\n+    let mut state = Edits::from_text_edit(&text_edit);\n+\n+    let mut res = RunningLineCol::new();\n+\n+    macro_rules! test_step {\n+        ($x:ident) => {\n+            match &$x {\n+                Step::Newline(n) => {\n+                    if offset < *n {\n+                        return res.to_line_col(offset);\n+                    } else {\n+                        res.add_line(*n);\n+                    }\n+                }\n+                Step::Utf16Char(x) => {\n+                    if offset < x.end() {\n+                        // if the offset is inside a multibyte char it's invalid\n+                        // clamp it to the start of the char\n+                        let clamp = offset.min(x.start());\n+                        return res.to_line_col(clamp);\n+                    } else {\n+                        res.adjust_col(*x);\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    for orig_step in LineIndexStepIter::from(line_index) {\n+        loop {\n+            let translated_step = state.translate_step(&orig_step);\n+            match state.next_steps(&translated_step) {\n+                NextSteps::Use => {\n+                    test_step!(translated_step);\n+                    break;\n+                }\n+                NextSteps::ReplaceMany(ns) => {\n+                    for n in ns {\n+                        test_step!(n);\n+                    }\n+                    break;\n+                }\n+                NextSteps::AddMany(ns) => {\n+                    for n in ns {\n+                        test_step!(n);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    loop {\n+        match state.next_inserted_steps() {\n+            None => break,\n+            Some(ns) => {\n+                for n in ns {\n+                    test_step!(n);\n+                }\n+            }\n+        }\n+    }\n+\n+    res.to_line_col(offset)\n+}\n+\n #[derive(Debug, Clone)]\n enum Step {\n     Newline(TextUnit),\n@@ -17,7 +95,7 @@ struct LineIndexStepIter<'a> {\n     utf16_chars: Option<(TextUnit, std::slice::Iter<'a, Utf16Char>)>,\n }\n \n-impl<'a> LineIndexStepIter<'a> {\n+impl LineIndexStepIter<'_> {\n     fn from(line_index: &LineIndex) -> LineIndexStepIter {\n         let mut x = LineIndexStepIter { line_index, next_newline_idx: 0, utf16_chars: None };\n         // skip first newline since it's not real\n@@ -26,7 +104,7 @@ impl<'a> LineIndexStepIter<'a> {\n     }\n }\n \n-impl<'a> Iterator for LineIndexStepIter<'a> {\n+impl Iterator for LineIndexStepIter<'_> {\n     type Item = Step;\n     fn next(&mut self) -> Option<Step> {\n         self.utf16_chars\n@@ -54,7 +132,7 @@ struct OffsetStepIter<'a> {\n     offset: TextUnit,\n }\n \n-impl<'a> Iterator for OffsetStepIter<'a> {\n+impl Iterator for OffsetStepIter<'_> {\n     type Item = Step;\n     fn next(&mut self) -> Option<Step> {\n         let (next, next_offset) = self\n@@ -220,84 +298,16 @@ impl RunningLineCol {\n     }\n }\n \n-pub fn translate_offset_with_edit(\n-    line_index: &LineIndex,\n-    offset: TextUnit,\n-    text_edit: &TextEdit,\n-) -> LineCol {\n-    let mut state = Edits::from_text_edit(&text_edit);\n-\n-    let mut res = RunningLineCol::new();\n-\n-    macro_rules! test_step {\n-        ($x:ident) => {\n-            match &$x {\n-                Step::Newline(n) => {\n-                    if offset < *n {\n-                        return res.to_line_col(offset);\n-                    } else {\n-                        res.add_line(*n);\n-                    }\n-                }\n-                Step::Utf16Char(x) => {\n-                    if offset < x.end() {\n-                        // if the offset is inside a multibyte char it's invalid\n-                        // clamp it to the start of the char\n-                        let clamp = offset.min(x.start());\n-                        return res.to_line_col(clamp);\n-                    } else {\n-                        res.adjust_col(*x);\n-                    }\n-                }\n-            }\n-        };\n-    }\n-\n-    for orig_step in LineIndexStepIter::from(line_index) {\n-        loop {\n-            let translated_step = state.translate_step(&orig_step);\n-            match state.next_steps(&translated_step) {\n-                NextSteps::Use => {\n-                    test_step!(translated_step);\n-                    break;\n-                }\n-                NextSteps::ReplaceMany(ns) => {\n-                    for n in ns {\n-                        test_step!(n);\n-                    }\n-                    break;\n-                }\n-                NextSteps::AddMany(ns) => {\n-                    for n in ns {\n-                        test_step!(n);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    loop {\n-        match state.next_inserted_steps() {\n-            None => break,\n-            Some(ns) => {\n-                for n in ns {\n-                    test_step!(n);\n-                }\n-            }\n-        }\n-    }\n-\n-    res.to_line_col(offset)\n-}\n-\n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use crate::line_index;\n     use proptest::{prelude::*, proptest};\n     use ra_text_edit::test_utils::{arb_offset, arb_text_with_edit};\n     use ra_text_edit::TextEdit;\n \n+    use crate::line_index;\n+\n+    use super::*;\n+\n     #[derive(Debug)]\n     struct ArbTextWithEditAndOffset {\n         text: String,", "previous_filename": "crates/ra_ide/src/line_index_utils.rs"}, {"sha": "64ddf2f95e2aca72e694265efeb07a9881ee58e6", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "renamed", "additions": 56, "deletions": 89, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -19,6 +19,7 @@\n //! for each library (which is assumed to never change) and an FST for each Rust\n //! file in the current workspace, and run a query against the union of all\n //! those FSTs.\n+\n use std::{\n     fmt,\n     hash::{Hash, Hasher},\n@@ -29,7 +30,7 @@ use std::{\n use fst::{self, Streamer};\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n-    SourceDatabaseExt, SourceRootId,\n+    FileId, SourceDatabaseExt, SourceRootId,\n };\n use ra_syntax::{\n     ast::{self, NameOwner},\n@@ -40,10 +41,50 @@ use ra_syntax::{\n #[cfg(not(feature = \"wasm\"))]\n use rayon::prelude::*;\n \n-use crate::{db::RootDatabase, FileId, Query};\n+use crate::RootDatabase;\n+\n+#[derive(Debug)]\n+pub struct Query {\n+    query: String,\n+    lowercased: String,\n+    only_types: bool,\n+    libs: bool,\n+    exact: bool,\n+    limit: usize,\n+}\n+\n+impl Query {\n+    pub fn new(query: String) -> Query {\n+        let lowercased = query.to_lowercase();\n+        Query {\n+            query,\n+            lowercased,\n+            only_types: false,\n+            libs: false,\n+            exact: false,\n+            limit: usize::max_value(),\n+        }\n+    }\n+\n+    pub fn only_types(&mut self) {\n+        self.only_types = true;\n+    }\n+\n+    pub fn libs(&mut self) {\n+        self.libs = true;\n+    }\n+\n+    pub fn exact(&mut self) {\n+        self.exact = true;\n+    }\n+\n+    pub fn limit(&mut self, limit: usize) {\n+        self.limit = limit\n+    }\n+}\n \n #[salsa::query_group(SymbolsDatabaseStorage)]\n-pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n+pub trait SymbolsDatabase: hir::db::HirDatabase {\n     fn file_symbols(&self, file_id: FileId) -> Arc<SymbolIndex>;\n     #[salsa::input]\n     fn library_symbols(&self, id: SourceRootId) -> Arc<SymbolIndex>;\n@@ -68,7 +109,7 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n-pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n+pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n     struct Snap(salsa::Snapshot<RootDatabase>);\n     impl Clone for Snap {\n@@ -110,16 +151,16 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol>\n     query.search(&buf)\n }\n \n-pub(crate) fn index_resolve(db: &RootDatabase, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n+pub fn index_resolve(db: &RootDatabase, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n     let name = name_ref.text();\n     let mut query = Query::new(name.to_string());\n     query.exact();\n     query.limit(4);\n-    crate::symbol_index::world_symbols(db, query)\n+    world_symbols(db, query)\n }\n \n #[derive(Default)]\n-pub(crate) struct SymbolIndex {\n+pub struct SymbolIndex {\n     symbols: Vec<FileSymbol>,\n     map: fst::Map,\n }\n@@ -178,11 +219,11 @@ impl SymbolIndex {\n         SymbolIndex { symbols, map }\n     }\n \n-    pub(crate) fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.symbols.len()\n     }\n \n-    pub(crate) fn memory_size(&self) -> usize {\n+    pub fn memory_size(&self) -> usize {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n@@ -262,12 +303,12 @@ fn is_type(kind: SyntaxKind) -> bool {\n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) struct FileSymbol {\n-    pub(crate) file_id: FileId,\n-    pub(crate) name: SmolStr,\n-    pub(crate) ptr: SyntaxNodePtr,\n-    pub(crate) name_range: Option<TextRange>,\n-    pub(crate) container_name: Option<SmolStr>,\n+pub struct FileSymbol {\n+    pub file_id: FileId,\n+    pub name: SmolStr,\n+    pub ptr: SyntaxNodePtr,\n+    pub name_range: Option<TextRange>,\n+    pub container_name: Option<SmolStr>,\n }\n \n fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec<FileSymbol> {\n@@ -329,77 +370,3 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n         container_name: None,\n     })\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n-    use ra_syntax::{\n-        SmolStr,\n-        SyntaxKind::{FN_DEF, STRUCT_DEF},\n-    };\n-\n-    #[test]\n-    fn test_world_symbols_with_no_container() {\n-        let code = r#\"\n-    enum FooInner { }\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name(), \"FooInner\");\n-        assert!(s.container_name().is_none());\n-    }\n-\n-    #[test]\n-    fn test_world_symbols_include_container_name() {\n-        let code = r#\"\n-fn foo() {\n-    enum FooInner { }\n-}\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name(), \"FooInner\");\n-        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n-\n-        let code = r#\"\n-mod foo {\n-    struct FooInner;\n-}\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name(), \"FooInner\");\n-        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n-    }\n-\n-    #[test]\n-    fn test_world_symbols_are_case_sensitive() {\n-        let code = r#\"\n-fn foo() {}\n-\n-struct Foo;\n-        \"#;\n-\n-        let symbols = get_symbols_matching(code, \"Foo\");\n-\n-        let fn_match = symbols.iter().find(|s| s.name() == \"foo\").map(|s| s.kind());\n-        let struct_match = symbols.iter().find(|s| s.name() == \"Foo\").map(|s| s.kind());\n-\n-        assert_eq!(fn_match, Some(FN_DEF));\n-        assert_eq!(struct_match, Some(STRUCT_DEF));\n-    }\n-\n-    fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n-        let (analysis, _) = single_file(text);\n-        analysis.symbol_search(Query::new(query.into())).unwrap()\n-    }\n-}", "previous_filename": "crates/ra_ide/src/symbol_index.rs"}, {"sha": "7af9f9d9bb7bdafcd852e474572a1aca06dcadd0", "filename": "crates/ra_ide_db/src/wasm_shims.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fwasm_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d77bde6acffc5e4c42878606b3d6d92300e11/crates%2Fra_ide_db%2Fsrc%2Fwasm_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fwasm_shims.rs?ref=ff2d77bde6acffc5e4c42878606b3d6d92300e11", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! A version of `std::time::Instant` that doesn't panic in WASM.\n \n #[cfg(not(feature = \"wasm\"))]\n pub use std::time::Instant;", "previous_filename": "crates/ra_ide/src/wasm_shims.rs"}]}