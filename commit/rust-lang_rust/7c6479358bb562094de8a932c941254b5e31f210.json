{"sha": "7c6479358bb562094de8a932c941254b5e31f210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjQ3OTM1OGJiNTYyMDk0ZGU4YTkzMmM5NDEyNTRiNWUzMWYyMTA=", "commit": {"author": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2017-05-06T19:14:44Z"}, "committer": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2017-05-06T19:14:44Z"}, "message": "Respect file_lines within format_lines() function", "tree": {"sha": "1cd858edecba01cca4d6779a8ba4938637a4c507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd858edecba01cca4d6779a8ba4938637a4c507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c6479358bb562094de8a932c941254b5e31f210", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEz+31Or6w9EWGEiCukUmbp1Q7H0cFAlkOINMACgkQkUmbp1Q7\nH0etSwf/TEddbamJM6fFVGJeTL9TZiLHHm85NqbKul0iu3te9XMx1/y3XjNtA1XN\nubxu0OrNLxGY3D8WQ6UKyVBb11dfBmhO83tlQumWZtzmjSzt39DvJ7qc78KRHlYT\nL11GoFC2wE+9CBaMMO/kgZKBEeHLDXqLKyIQauxyhoL6Mg5aE+i22sxqQkP32wAI\nJzNn9Nl26CyE/zwQRrRV2i6oADjTR/oy34daUvGWNzz71ERyWj6lf9BcgQsMERVD\nlm9vipUiLumnyhwW+1QblPecsR6KdCMC1MLKlV29ouADJ2KhNAdm7K+0S/Ax5V9T\n5kX/0j2Mapy7E7u9YZgEHik8m0zgyg==\n=CocC\n-----END PGP SIGNATURE-----", "payload": "tree 1cd858edecba01cca4d6779a8ba4938637a4c507\nparent 75a13868dab681dfc31fbe31d76fff413bfe7c9e\nauthor Jonathan Behrens <fintelia@gmail.com> 1494098084 -0400\ncommitter Jonathan Behrens <fintelia@gmail.com> 1494098084 -0400\n\nRespect file_lines within format_lines() function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6479358bb562094de8a932c941254b5e31f210", "html_url": "https://github.com/rust-lang/rust/commit/7c6479358bb562094de8a932c941254b5e31f210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c6479358bb562094de8a932c941254b5e31f210/comments", "author": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a13868dab681dfc31fbe31d76fff413bfe7c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a13868dab681dfc31fbe31d76fff413bfe7c9e", "html_url": "https://github.com/rust-lang/rust/commit/75a13868dab681dfc31fbe31d76fff413bfe7c9e"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "3db75e1ce7e629004ad7709fb56ef0ffa13e2bdb", "filename": "src/file_lines.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c6479358bb562094de8a932c941254b5e31f210/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6479358bb562094de8a932c941254b5e31f210/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=7c6479358bb562094de8a932c941254b5e31f210", "patch": "@@ -144,6 +144,20 @@ impl FileLines {\n             Err(_) => false,\n         }\n     }\n+\n+    pub fn contains_line(&self, file_name: &str, line: usize) -> bool {\n+        let map = match self.0 {\n+            // `None` means \"all lines in all files\".\n+            None => return true,\n+            Some(ref map) => map,\n+        };\n+\n+        match canonicalize_path_string(file_name)\n+                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n+            Ok(ranges) => ranges.iter().any(|r| r.lo <= line && r.hi >= line),\n+            Err(_) => false,\n+        }\n+    }\n }\n \n /// FileLines files iterator."}, {"sha": "ac736369f6f38cd0846fec740938bd274d2e2365", "filename": "src/lib.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7c6479358bb562094de8a932c941254b5e31f210/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6479358bb562094de8a932c941254b5e31f210/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7c6479358bb562094de8a932c941254b5e31f210", "patch": "@@ -481,27 +481,35 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n             continue;\n         }\n \n-        // Add warnings for bad todos/ fixmes\n-        if let Some(issue) = issue_seeker.inspect(c) {\n-            errors.push(FormattingError {\n-                            line: cur_line,\n-                            kind: ErrorKind::BadIssue(issue),\n-                        });\n-        }\n+        let format_line = config.file_lines.contains_line(name, cur_line as usize);\n \n-        if c == '\\n' {\n-            // Check for (and record) trailing whitespace.\n-            if let Some(lw) = last_wspace {\n-                trims.push((cur_line, lw, b));\n-                line_len -= 1;\n-            }\n-            // Check for any line width errors we couldn't correct.\n-            if config.error_on_line_overflow && line_len > config.max_width {\n+        if format_line {\n+            // Add warnings for bad todos/ fixmes\n+            if let Some(issue) = issue_seeker.inspect(c) {\n                 errors.push(FormattingError {\n                                 line: cur_line,\n-                                kind: ErrorKind::LineOverflow(line_len, config.max_width),\n+                                kind: ErrorKind::BadIssue(issue),\n                             });\n             }\n+        }\n+\n+        if c == '\\n' {\n+            if format_line {\n+                // Check for (and record) trailing whitespace.\n+                if let Some(lw) = last_wspace {\n+                    trims.push((cur_line, lw, b));\n+                    line_len -= 1;\n+                }\n+\n+                // Check for any line width errors we couldn't correct.\n+                if config.error_on_line_overflow && line_len > config.max_width {\n+                    errors.push(FormattingError {\n+                                    line: cur_line,\n+                                    kind: ErrorKind::LineOverflow(line_len, config.max_width),\n+                                });\n+                }\n+            }\n+\n             line_len = 0;\n             cur_line += 1;\n             newline_count += 1;"}]}