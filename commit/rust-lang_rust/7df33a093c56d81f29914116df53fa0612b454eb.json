{"sha": "7df33a093c56d81f29914116df53fa0612b454eb", "node_id": "C_kwDOAAsO6NoAKDdkZjMzYTA5M2M1NmQ4MWYyOTkxNDExNmRmNTNmYTA2MTJiNDU0ZWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-17T22:26:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-17T22:26:59Z"}, "message": "Account for RPITITs in opt_suggest_box_span", "tree": {"sha": "ae9088cf283ac9c377322ed9de5d32b02aee5591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9088cf283ac9c377322ed9de5d32b02aee5591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7df33a093c56d81f29914116df53fa0612b454eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7df33a093c56d81f29914116df53fa0612b454eb", "html_url": "https://github.com/rust-lang/rust/commit/7df33a093c56d81f29914116df53fa0612b454eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7df33a093c56d81f29914116df53fa0612b454eb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c53c3bb6190319e210c94164b05a17997073f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c53c3bb6190319e210c94164b05a17997073f2", "html_url": "https://github.com/rust-lang/rust/commit/65c53c3bb6190319e210c94164b05a17997073f2"}], "stats": {"total": 74, "additions": 71, "deletions": 3}, "files": [{"sha": "7c56b8a9c7fd55e818cd24752f50f21ce1e54765", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7df33a093c56d81f29914116df53fa0612b454eb/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df33a093c56d81f29914116df53fa0612b454eb/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=7df33a093c56d81f29914116df53fa0612b454eb", "patch": "@@ -526,7 +526,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     }\n                 })?;\n-                let opaque_ty = self.tcx.mk_opaque(rpit_def_id, substs);\n \n                 if !self.can_coerce(first_ty, expected) || !self.can_coerce(second_ty, expected) {\n                     return None;\n@@ -540,13 +539,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) => {\n-                                assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n+                                // FIXME(rpitit): This will need to be fixed when we move to associated types\n+                                assert!(matches!(\n+                                    *trait_pred.trait_ref.self_ty().kind(),\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                                    if def_id == rpit_def_id && substs == substs\n+                                ));\n                                 ty::PredicateKind::Clause(ty::Clause::Trait(\n                                     trait_pred.with_self_ty(self.tcx, ty),\n                                 ))\n                             }\n                             ty::PredicateKind::Clause(ty::Clause::Projection(mut proj_pred)) => {\n-                                assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n+                                assert!(matches!(\n+                                    *proj_pred.projection_ty.self_ty().kind(),\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                                    if def_id == rpit_def_id && substs == substs\n+                                ));\n                                 proj_pred = proj_pred.with_self_ty(self.tcx, ty);\n                                 ty::PredicateKind::Clause(ty::Clause::Projection(proj_pred))\n                             }"}, {"sha": "a4d483dee7a53c6e9fdfe5c22e61134694770279", "filename": "src/test/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7df33a093c56d81f29914116df53fa0612b454eb/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df33a093c56d81f29914116df53fa0612b454eb/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=7df33a093c56d81f29914116df53fa0612b454eb", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n+\n+struct TestA {}\n+struct TestB {}\n+\n+impl TestTrait for TestA {\n+    type Output = ();\n+}\n+impl TestTrait for TestB {\n+    type Output = ();\n+}\n+\n+trait TestTrait {\n+    type Output;\n+}\n+\n+impl<A, B> TestTrait for GreeterOutput<A, B>\n+where\n+    A: TestTrait<Output = ()>,\n+    B: TestTrait<Output = ()>,\n+{\n+    type Output = ();\n+}\n+\n+enum GreeterOutput<A, B>\n+where\n+    A: TestTrait<Output = ()>,\n+    B: TestTrait<Output = ()>,\n+{\n+    SayHello(A),\n+    SayGoodbye(B),\n+}\n+\n+trait Greeter {\n+    fn test_func(&self, func: &str) -> impl TestTrait<Output = ()> {\n+        match func {\n+            \"SayHello\" => GreeterOutput::SayHello(TestA {}),\n+            \"SayGoodbye\" => GreeterOutput::SayGoodbye(TestB {}),\n+            _ => GreeterOutput::SayHello(TestA {}),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "d681ecf25e8afb2f08706f45912ac1853c5c55dc", "filename": "src/test/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7df33a093c56d81f29914116df53fa0612b454eb/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7df33a093c56d81f29914116df53fa0612b454eb/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.stderr?ref=7df33a093c56d81f29914116df53fa0612b454eb", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:3:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}