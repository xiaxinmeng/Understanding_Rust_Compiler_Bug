{"sha": "199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OWVkMjBhYTZhYTY0Y2E1OGI0YTkyNDM5NWJmOWUxZTcxY2Y4YTg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-22T22:08:08Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-25T20:25:59Z"}, "message": "Fix `$crate`-related regressions.", "tree": {"sha": "5771d5cf0d2982179dd1d27deca587eab655a070", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5771d5cf0d2982179dd1d27deca587eab655a070"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "html_url": "https://github.com/rust-lang/rust/commit/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f26f7e0c23b6dcd00f21eae66d7a302cfa17bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f26f7e0c23b6dcd00f21eae66d7a302cfa17bf", "html_url": "https://github.com/rust-lang/rust/commit/67f26f7e0c23b6dcd00f21eae66d7a302cfa17bf"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "210cabdd8ece4609839e3e17c3789b4cde67c4ac", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "patch": "@@ -845,6 +845,10 @@ impl<'a> ModuleS<'a> {\n             _ => false,\n         }\n     }\n+\n+    fn is_local(&self) -> bool {\n+        self.normal_ancestor_id.is_some()\n+    }\n }\n \n impl<'a> fmt::Debug for ModuleS<'a> {\n@@ -1585,8 +1589,7 @@ impl<'a> Resolver<'a> {\n                 ctxt = ctxt.source().0;\n             }\n             let module = self.invocations[&ctxt.source().1].module.get();\n-            let crate_root =\n-                if module.def_id().unwrap().is_local() { self.graph_root } else { module };\n+            let crate_root = if module.is_local() { self.graph_root } else { module };\n             return Success(PrefixFound(crate_root, 1))\n         }\n \n@@ -2569,7 +2572,8 @@ impl<'a> Resolver<'a> {\n         let unqualified_def = resolve_identifier_with_fallback(self, None);\n         let qualified_binding = self.resolve_module_relative_path(span, segments, namespace);\n         match (qualified_binding, unqualified_def) {\n-            (Ok(binding), Some(ref ud)) if binding.def() == ud.def => {\n+            (Ok(binding), Some(ref ud)) if binding.def() == ud.def &&\n+                                           segments[0].identifier.name.as_str() != \"$crate\" => {\n                 self.session\n                     .add_lint(lint::builtin::UNUSED_QUALIFICATIONS,\n                               id,"}, {"sha": "af9b21dadd1d083b08d9126053109004c78cab46", "filename": "src/test/compile-fail/lint-qualification.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs?ref=199ed20aa6aa64ca58b4a924395bf9e1e71cf8a8", "patch": "@@ -18,4 +18,11 @@ fn main() {\n     use foo::bar;\n     foo::bar(); //~ ERROR: unnecessary qualification\n     bar();\n+\n+    let _ = || -> Result<(), ()> { try!(Ok(())); Ok(()) }; // issue #37345\n+\n+    macro_rules! m {\n+        () => { $crate::foo::bar(); }\n+    }\n+    m!(); // issue #37357\n }"}]}