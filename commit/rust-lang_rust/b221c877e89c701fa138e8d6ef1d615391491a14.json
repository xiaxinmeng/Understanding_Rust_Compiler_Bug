{"sha": "b221c877e89c701fa138e8d6ef1d615391491a14", "node_id": "C_kwDOAAsO6NoAKGIyMjFjODc3ZTg5YzcwMWZhMTM4ZThkNmVmMWQ2MTUzOTE0OTFhMTQ", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-11-30T15:50:44Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-11-30T15:51:42Z"}, "message": "Apply cfg-bootstrap switch", "tree": {"sha": "f6a7e45d38e4db399a2675d883d19ed7b8d6021e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6a7e45d38e4db399a2675d883d19ed7b8d6021e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b221c877e89c701fa138e8d6ef1d615391491a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b221c877e89c701fa138e8d6ef1d615391491a14", "html_url": "https://github.com/rust-lang/rust/commit/b221c877e89c701fa138e8d6ef1d615391491a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b221c877e89c701fa138e8d6ef1d615391491a14/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9bc25dc34acae765a68d26c7dd5a4c439badc95", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bc25dc34acae765a68d26c7dd5a4c439badc95", "html_url": "https://github.com/rust-lang/rust/commit/e9bc25dc34acae765a68d26c7dd5a4c439badc95"}], "stats": {"total": 47, "additions": 9, "deletions": 38}, "files": [{"sha": "ceaae9d66cd53feff5ea853dee19eca8359bcf6d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -3,7 +3,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "65c2614c102a58f9aabd4ffc8a6328891ec4a727", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -6,7 +6,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(nll)]"}, {"sha": "c721c4b8d7c191d40ab7ae069fbe7a67bf6b6d88", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -1,7 +1,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(if_let_guard)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "2d6be5527b256167ab19b03ad35fcbc35c4858fd", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -30,7 +30,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_order_by)]\n #![feature(iter_zip)]\n #![feature(never_type)]"}, {"sha": "d01b74930c958d807222866485befabebc36150e", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "f1e5f4830446cb0a5b41c8b106953c7f39572853", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -13,7 +13,6 @@\n #![feature(drain_filter)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]"}, {"sha": "f87cbb7f41755b544bf697dd019a2447458dded6", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -58,7 +58,6 @@ This API is completely unstable and subject to change.\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(if_let_guard)]\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]"}, {"sha": "1bb257acff76a905e10207f36b555d3a9262b179", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -105,7 +105,6 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(inherent_ascii_escape)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n #![feature(iter_zip)]"}, {"sha": "39ccbaaaf7b33c22fd7d923df4fdc23ef62f4b4b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -330,11 +330,9 @@ impl<T: Ord, const N: usize> Ord for [T; N] {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"copy_clone_array_lib\", since = \"1.58.0\")]\n impl<T: Copy, const N: usize> Copy for [T; N] {}\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"copy_clone_array_lib\", since = \"1.58.0\")]\n impl<T: Clone, const N: usize> Clone for [T; N] {\n     #[inline]\n@@ -348,12 +346,10 @@ impl<T: Clone, const N: usize> Clone for [T; N] {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n trait SpecArrayClone: Clone {\n     fn clone<const N: usize>(array: &[Self; N]) -> [Self; N];\n }\n \n-#[cfg(not(bootstrap))]\n impl<T: Clone> SpecArrayClone for T {\n     #[inline]\n     default fn clone<const N: usize>(array: &[T; N]) -> [T; N] {\n@@ -363,7 +359,6 @@ impl<T: Clone> SpecArrayClone for T {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl<T: Copy> SpecArrayClone for T {\n     #[inline]\n     fn clone<const N: usize>(array: &[T; N]) -> [T; N] {"}, {"sha": "b0f9368b0c068587764a754bad5ced58c91dbbf8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -159,14 +159,12 @@\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n-#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(derive_default_enum)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n-#![cfg_attr(bootstrap, feature(doc_primitive))]\n-#![cfg_attr(not(bootstrap), feature(rustdoc_internals))]\n+#![feature(rustdoc_internals)]\n #![feature(exhaustive_patterns)]\n #![feature(doc_cfg_hide)]\n #![feature(extern_types)]\n@@ -198,7 +196,7 @@\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]\n-#![cfg_attr(not(bootstrap), feature(asm_const))]\n+#![feature(asm_const)]\n //\n // Target features:\n #![feature(aarch64_target_feature)]\n@@ -408,13 +406,11 @@ pub mod arch {\n #[allow(rustdoc::bare_urls)]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n #[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n-#[cfg(not(bootstrap))]\n mod core_simd;\n \n #[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n #[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n-#[cfg(not(bootstrap))]\n pub mod simd {\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n     pub use crate::core_simd::simd::*;"}, {"sha": "9a29094b52c468d336512a919fc5a2be4b1942c0", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -789,7 +789,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_raw_ptr_deref))]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized."}, {"sha": "52a2e464e3a7ce1c908c87f8411570d9597b7633", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -82,7 +82,7 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[cfg_attr(not(bootstrap), lang = \"generator_return\")]\n+    #[lang = \"generator_return\"]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "d98db3f57c0f4acdc4797d1381212876c078daf7", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -131,7 +131,7 @@ pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a m\n }\n \n // In debug builds checks that `data` pointer is aligned and non-null and that slice with given `len` would cover less than half the address space\n-#[cfg(all(not(bootstrap), debug_assertions))]\n+#[cfg(debug_assertions)]\n #[unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n const fn debug_check_data_len<T>(data: *const T, len: usize) {\n@@ -161,7 +161,7 @@ const fn debug_check_data_len<T>(data: *const T, len: usize) {\n     );\n }\n \n-#[cfg(not(all(not(bootstrap), debug_assertions)))]\n+#[cfg(not(debug_assertions))]\n const fn debug_check_data_len<T>(_data: *const T, _len: usize) {}\n \n /// Converts a reference to T into a slice of length 1 (without copying)."}, {"sha": "746d1cacfd0fb050071f7365409f0ca9354dd17f", "filename": "library/core/src/time.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -182,7 +182,6 @@ impl Duration {\n     #[inline]\n     #[must_use]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,\n@@ -482,7 +481,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n             let mut nanos = self.nanos + rhs.nanos;\n@@ -543,7 +541,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n             let nanos = if self.nanos >= rhs.nanos {\n@@ -602,7 +599,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n         // Multiply nanoseconds as u64, because it cannot overflow that way.\n         let total_nanos = self.nanos as u64 * rhs as u64;\n@@ -660,7 +656,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n         if rhs != 0 {\n             let secs = self.secs / (rhs as u64);"}, {"sha": "908631afd939f2eb88f09e52182caead43d95f58", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -58,11 +58,10 @@\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]\n-#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(result_into_ok_or_err)]\n-#![cfg_attr(not(bootstrap), feature(portable_simd))]\n+#![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n@@ -108,7 +107,6 @@ mod pattern;\n mod pin;\n mod ptr;\n mod result;\n-#[cfg(not(bootstrap))]\n mod simd;\n mod slice;\n mod str;"}, {"sha": "41b94cb294cfe1fc5035ec284f7a2592684883be", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b221c877e89c701fa138e8d6ef1d615391491a14/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b221c877e89c701fa138e8d6ef1d615391491a14", "patch": "@@ -264,8 +264,7 @@\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n #![feature(const_option)]\n-#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n-#![cfg_attr(not(bootstrap), feature(const_mut_refs))]\n+#![feature(const_mut_refs)]\n #![feature(const_socketaddr)]\n #![feature(const_trait_impl)]\n #![feature(container_error_extra)]\n@@ -275,9 +274,7 @@\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n #![feature(doc_cfg_hide)]\n-#![cfg_attr(bootstrap, feature(doc_primitive))]\n-#![cfg_attr(bootstrap, feature(doc_keyword))]\n-#![cfg_attr(not(bootstrap), feature(rustdoc_internals))]\n+#![feature(rustdoc_internals)]\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]\n #![feature(dropck_eyepatch)]\n@@ -323,7 +320,7 @@\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n #![feature(pin_static_ref)]\n-#![cfg_attr(not(bootstrap), feature(portable_simd))]\n+#![feature(portable_simd)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(rustc_attrs)]\n@@ -476,7 +473,6 @@ pub use core::ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(bootstrap))]\n pub use core::simd;\n #[unstable(feature = \"async_stream\", issue = \"79024\")]\n pub use core::stream;"}]}