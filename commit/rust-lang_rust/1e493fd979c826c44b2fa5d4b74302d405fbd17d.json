{"sha": "1e493fd979c826c44b2fa5d4b74302d405fbd17d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDkzZmQ5NzljODI2YzQ0YjJmYTVkNGI3NDMwMmQ0MDVmYmQxN2Q=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-20T19:50:34Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2016-05-23T14:03:44Z"}, "message": "Add explanations about what derived trait implementations do", "tree": {"sha": "02d2e434c51323ab1b64a58f867eb1d5caf51f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d2e434c51323ab1b64a58f867eb1d5caf51f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e493fd979c826c44b2fa5d4b74302d405fbd17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e493fd979c826c44b2fa5d4b74302d405fbd17d", "html_url": "https://github.com/rust-lang/rust/commit/1e493fd979c826c44b2fa5d4b74302d405fbd17d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e493fd979c826c44b2fa5d4b74302d405fbd17d/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c6b6c200befdef9d5882a8edf135efc20de905a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6b6c200befdef9d5882a8edf135efc20de905a", "html_url": "https://github.com/rust-lang/rust/commit/4c6b6c200befdef9d5882a8edf135efc20de905a"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "cfb29cf479d83a92929456aa0c90d1ea57af8d7b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=1e493fd979c826c44b2fa5d4b74302d405fbd17d", "patch": "@@ -48,7 +48,8 @@ use marker::Sized;\n \n /// A common trait for cloning an object.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d\n+/// implementation of `clone()` calls `clone()` on each field.\n ///\n /// Types that are `Copy` should have a trivial implementation of `Clone`. More formally:\n /// if `T: Copy`, `x: T`, and `y: &T`, then `let x = y.clone();` is equivalent to `let x = *y;`."}, {"sha": "cd0bbcd33569cc0f4aa4e670e8190b29e2192445", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=1e493fd979c826c44b2fa5d4b74302d405fbd17d", "patch": "@@ -58,7 +58,10 @@ use option::Option::{self, Some};\n /// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n /// only if `a != b`.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, two\n+/// instances are equal if all fields are equal, and non equal if any fields\n+/// are not equal. When `derive`d on enums, each variant is equal to itself\n+/// and not equal to the other variants.\n ///\n /// # Examples\n ///\n@@ -96,7 +99,9 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n /// This property cannot be checked by the compiler, and therefore `Eq` implies\n /// `PartialEq`, and has no extra methods.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]`. When `derive`d, because `Eq` has\n+/// no extra methods, it is only informing the compiler that this is an\n+/// equivalence relation rather than a partial equivalence relation.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // FIXME #13101: this method is used solely by #[deriving] to"}, {"sha": "6579e5dab543245ccd56934ec787974880d00adf", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1e493fd979c826c44b2fa5d4b74302d405fbd17d", "patch": "@@ -318,7 +318,11 @@ impl<'a> Display for Arguments<'a> {\n ///\n /// [module]: ../../std/fmt/index.html\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]` if all fields implement `Debug`. When\n+/// `derive`d for structs, it will use the name of the `struct`, then `{`, then a\n+/// comma-separated list of each field's name and `Debug` value, then `}`. For\n+/// `enum`s, it will use the name of the variant and, if applicable, `(`, then the\n+/// `Debug` values of the fields, then `)`.\n ///\n /// # Examples\n ///"}, {"sha": "7f0d7517a57c034ab3f9406387e7d94f606086cc", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=1e493fd979c826c44b2fa5d4b74302d405fbd17d", "patch": "@@ -97,7 +97,9 @@ mod sip;\n /// In other words, if two keys are equal, their hashes should also be equal.\n /// `HashMap` and `HashSet` both rely on this behavior.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]` if all fields implement `Hash`.\n+/// When `derive`d, the resulting hash will be the combination of the values\n+/// from calling `.hash()` on each field.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "e519071a56eeaa25718555d2ac5dd538b7511041", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e493fd979c826c44b2fa5d4b74302d405fbd17d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=1e493fd979c826c44b2fa5d4b74302d405fbd17d", "patch": "@@ -173,7 +173,8 @@ pub trait Unsize<T: ?Sized> {\n ///\n /// # Derivable\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]` if all of its components implement `Copy` and the type\n+/// implements `Clone`. The implementation will copy the bytes of each field using `memcpy`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {"}]}