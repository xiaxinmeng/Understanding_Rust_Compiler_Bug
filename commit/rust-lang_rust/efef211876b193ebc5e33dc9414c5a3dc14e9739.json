{"sha": "efef211876b193ebc5e33dc9414c5a3dc14e9739", "node_id": "C_kwDOAAsO6NoAKGVmZWYyMTE4NzZiMTkzZWJjNWUzM2RjOTQxNGM1YTNkYzE0ZTk3Mzk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-19T09:26:37Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-21T11:46:03Z"}, "message": "Make use of `pointer::is_aligned[_to]`", "tree": {"sha": "14f041a2c9702f9392b9fbf40ed6ff9e9f0d50cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f041a2c9702f9392b9fbf40ed6ff9e9f0d50cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efef211876b193ebc5e33dc9414c5a3dc14e9739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efef211876b193ebc5e33dc9414c5a3dc14e9739", "html_url": "https://github.com/rust-lang/rust/commit/efef211876b193ebc5e33dc9414c5a3dc14e9739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efef211876b193ebc5e33dc9414c5a3dc14e9739/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed084ba292609da9fe05808f186b72453013c094", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed084ba292609da9fe05808f186b72453013c094", "html_url": "https://github.com/rust-lang/rust/commit/ed084ba292609da9fe05808f186b72453013c094"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "99bfb2a45ed90434fc79f63d492ed539313bb330", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=efef211876b193ebc5e33dc9414c5a3dc14e9739", "patch": "@@ -38,6 +38,7 @@\n #![feature(const_str_from_utf8)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(panic_update_hook)]\n+#![feature(pointer_is_aligned)]\n #![feature(slice_flatten)]\n #![feature(thin_box)]\n #![feature(bench_black_box)]"}, {"sha": "e008b0cc35718dd8fe0533cb41f61ac66c44eb41", "filename": "library/alloc/tests/thin_box.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Falloc%2Ftests%2Fthin_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Falloc%2Ftests%2Fthin_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fthin_box.rs?ref=efef211876b193ebc5e33dc9414c5a3dc14e9739", "patch": "@@ -48,11 +48,11 @@ fn verify_aligned<T>(ptr: *const T) {\n     // practice these checks are mostly just smoke-detectors for an extremely\n     // broken `ThinBox` impl, since it's an extremely subtle piece of code.\n     let ptr = core::hint::black_box(ptr);\n-    let align = core::mem::align_of::<T>();\n     assert!(\n-        (ptr.addr() & (align - 1)) == 0 && !ptr.is_null(),\n-        \"misaligned ThinBox data; valid pointers to `{}` should be aligned to {align}: {ptr:p}\",\n-        core::any::type_name::<T>(),\n+        ptr.is_aligned() && !ptr.is_null(),\n+        \"misaligned ThinBox data; valid pointers to `{ty}` should be aligned to {align}: {ptr:p}\",\n+        ty = core::any::type_name::<T>(),\n+        align = core::mem::align_of::<T>(),\n     );\n }\n "}, {"sha": "5cae6da9a567b2b21090781113253a1f09f0202d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=efef211876b193ebc5e33dc9414c5a3dc14e9739", "patch": "@@ -2139,7 +2139,7 @@ pub(crate) use assert_unsafe_precondition;\n /// Checks whether `ptr` is properly aligned with respect to\n /// `align_of::<T>()`.\n pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n-    !ptr.is_null() && ptr.addr() % mem::align_of::<T>() == 0\n+    !ptr.is_null() && ptr.is_aligned()\n }\n \n /// Checks whether the regions of memory starting at `src` and `dst` of size"}, {"sha": "ab7335e69c928fe6edaacd5b78ca38f0093902b9", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=efef211876b193ebc5e33dc9414c5a3dc14e9739", "patch": "@@ -284,6 +284,7 @@\n #![feature(panic_can_unwind)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n+#![feature(pointer_is_aligned)]\n #![feature(portable_simd)]\n #![feature(prelude_2024)]\n #![feature(provide_any)]"}, {"sha": "a2c8ab7f38d5487c400132a04c7cc89608fb09ae", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efef211876b193ebc5e33dc9414c5a3dc14e9739/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=efef211876b193ebc5e33dc9414c5a3dc14e9739", "patch": "@@ -115,7 +115,7 @@ pub unsafe trait UserSafe {\n     /// * the pointer is null.\n     /// * the pointed-to range is not in user memory.\n     unsafe fn check_ptr(ptr: *const Self) {\n-        let is_aligned = |p: *const u8| -> bool { 0 == p.addr() & (Self::align_of() - 1) };\n+        let is_aligned = |p: *const u8| -> bool { p.is_aligned_to(Self::align_of()) };\n \n         assert!(is_aligned(ptr as *const u8));\n         assert!(is_user_range(ptr as _, mem::size_of_val(unsafe { &*ptr })));\n@@ -367,7 +367,7 @@ pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize)\n         unsafe {\n             copy_bytewise_to_userspace(src, dst, len);\n         }\n-    } else if len % 8 == 0 && dst as usize % 8 == 0 {\n+    } else if len % 8 == 0 && dst.is_aligned_to(8) {\n         // Copying 8-byte aligned quadwords: copy quad word per quad word\n         unsafe {\n             copy_aligned_quadwords_to_userspace(src, dst, len);"}]}