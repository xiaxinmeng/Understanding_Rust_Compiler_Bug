{"sha": "2a916a617f6c6c62536a3b164f4b15ea58eaa148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOTE2YTYxN2Y2YzZjNjI1MzZhM2IxNjRmNGIxNWVhNThlYWExNDg=", "commit": {"author": {"name": "Jo Liss", "email": "joliss42@gmail.com", "date": "2017-06-27T17:23:31Z"}, "committer": {"name": "Thomas Heck", "email": "t@b128.net", "date": "2018-12-08T12:30:54Z"}, "message": "Short-circuit Rc/Arc equality checking on equal pointers where T: Eq\n\nCloses #42655", "tree": {"sha": "30f5354f47c10620b07eada34f83fd651d7cc0c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30f5354f47c10620b07eada34f83fd651d7cc0c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a916a617f6c6c62536a3b164f4b15ea58eaa148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a916a617f6c6c62536a3b164f4b15ea58eaa148", "html_url": "https://github.com/rust-lang/rust/commit/2a916a617f6c6c62536a3b164f4b15ea58eaa148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a916a617f6c6c62536a3b164f4b15ea58eaa148/comments", "author": {"login": "joliss", "id": 524783, "node_id": "MDQ6VXNlcjUyNDc4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/524783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joliss", "html_url": "https://github.com/joliss", "followers_url": "https://api.github.com/users/joliss/followers", "following_url": "https://api.github.com/users/joliss/following{/other_user}", "gists_url": "https://api.github.com/users/joliss/gists{/gist_id}", "starred_url": "https://api.github.com/users/joliss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joliss/subscriptions", "organizations_url": "https://api.github.com/users/joliss/orgs", "repos_url": "https://api.github.com/users/joliss/repos", "events_url": "https://api.github.com/users/joliss/events{/privacy}", "received_events_url": "https://api.github.com/users/joliss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chpio", "id": 545659, "node_id": "MDQ6VXNlcjU0NTY1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/545659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chpio", "html_url": "https://github.com/chpio", "followers_url": "https://api.github.com/users/chpio/followers", "following_url": "https://api.github.com/users/chpio/following{/other_user}", "gists_url": "https://api.github.com/users/chpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/chpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chpio/subscriptions", "organizations_url": "https://api.github.com/users/chpio/orgs", "repos_url": "https://api.github.com/users/chpio/repos", "events_url": "https://api.github.com/users/chpio/events{/privacy}", "received_events_url": "https://api.github.com/users/chpio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9772d02774534aa4ccd0b328364403d5b6cda1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9772d02774534aa4ccd0b328364403d5b6cda1d0", "html_url": "https://github.com/rust-lang/rust/commit/9772d02774534aa4ccd0b328364403d5b6cda1d0"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "85bde5f63ce8e19f151a407936a56fa5ccef27ca", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a916a617f6c6c62536a3b164f4b15ea58eaa148/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a916a617f6c6c62536a3b164f4b15ea58eaa148/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=2a916a617f6c6c62536a3b164f4b15ea58eaa148", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(specialization)]\n #![allow(deprecated)]\n \n //! Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\n@@ -906,6 +907,9 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     ///\n     /// Two `Rc`s are equal if their inner values are equal.\n     ///\n+    /// If `T` also implements `Eq`, two `Rc`s that point to the same value are\n+    /// always equal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -916,14 +920,17 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     /// assert!(five == Rc::new(5));\n     /// ```\n     #[inline(always)]\n-    fn eq(&self, other: &Rc<T>) -> bool {\n+    default fn eq(&self, other: &Rc<T>) -> bool {\n         **self == **other\n     }\n \n     /// Inequality for two `Rc`s.\n     ///\n     /// Two `Rc`s are unequal if their inner values are unequal.\n     ///\n+    /// If `T` also implements `Eq`, two `Rc`s that point to the same value are\n+    /// never unequal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -934,11 +941,25 @@ impl<T: ?Sized + PartialEq> PartialEq for Rc<T> {\n     /// assert!(five != Rc::new(6));\n     /// ```\n     #[inline(always)]\n-    fn ne(&self, other: &Rc<T>) -> bool {\n+    default fn ne(&self, other: &Rc<T>) -> bool {\n         **self != **other\n     }\n }\n \n+#[doc(hidden)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + Eq> PartialEq for Rc<T> {\n+    #[inline(always)]\n+    fn eq(&self, other: &Rc<T>) -> bool {\n+        Rc::ptr_eq(self, other) || **self == **other\n+    }\n+\n+    #[inline(always)]\n+    fn ne(&self, other: &Rc<T>) -> bool {\n+        !Rc::ptr_eq(self, other) && **self != **other\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Eq> Eq for Rc<T> {}\n "}, {"sha": "d6863238cd4b6973b57a7bee7f68d8c3a1f47f77", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a916a617f6c6c62536a3b164f4b15ea58eaa148/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a916a617f6c6c62536a3b164f4b15ea58eaa148/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=2a916a617f6c6c62536a3b164f4b15ea58eaa148", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(specialization)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n //! Thread-safe reference-counting pointers.\n@@ -1293,6 +1294,9 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// Two `Arc`s are equal if their inner values are equal.\n     ///\n+    /// If `T` also implements `Eq`, two `Arc`s that point to the same value are\n+    /// always equal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1302,14 +1306,17 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// assert!(five == Arc::new(5));\n     /// ```\n-    fn eq(&self, other: &Arc<T>) -> bool {\n-        *(*self) == *(*other)\n+    default fn eq(&self, other: &Arc<T>) -> bool {\n+        **self == **other\n     }\n \n     /// Inequality for two `Arc`s.\n     ///\n     /// Two `Arc`s are unequal if their inner values are unequal.\n     ///\n+    /// If `T` also implements `Eq`, two `Arc`s that point to the same value are\n+    /// never unequal.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1319,8 +1326,21 @@ impl<T: ?Sized + PartialEq> PartialEq for Arc<T> {\n     ///\n     /// assert!(five != Arc::new(6));\n     /// ```\n+    default fn ne(&self, other: &Arc<T>) -> bool {\n+        **self != **other\n+    }\n+}\n+#[doc(hidden)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized + Eq> PartialEq for Arc<T> {\n+    #[inline(always)]\n+    fn eq(&self, other: &Arc<T>) -> bool {\n+        Arc::ptr_eq(self, other) || **self == **other\n+    }\n+\n+    #[inline(always)]\n     fn ne(&self, other: &Arc<T>) -> bool {\n-        *(*self) != *(*other)\n+        !Arc::ptr_eq(self, other) && **self != **other\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}