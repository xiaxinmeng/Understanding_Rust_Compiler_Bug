{"sha": "84c17c200a90f8dd015a46e87531f726f6a3e2b9", "node_id": "C_kwDOAAsO6NoAKDg0YzE3YzIwMGE5MGY4ZGQwMTVhNDZlODc1MzFmNzI2ZjZhM2UyYjk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-21T11:08:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-21T11:08:07Z"}, "message": "Rollup merge of #94033 - joshtriplett:documentation-is-running-better-go-catch-it, r=m-ou-se\n\nImprove docs for `is_running` to explain use case", "tree": {"sha": "0472a99d20a1b858dae991974d933900b8763377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0472a99d20a1b858dae991974d933900b8763377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c17c200a90f8dd015a46e87531f726f6a3e2b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisaaXCRBK7hj4Ov3rIwAANvYIADCsgMyEs773XE85pbJX0E3F\nYoryP+6vNKASIYNKgYJVp13gCT80snMvpRRX8F0bwDJIHDEXd3xDoBdARmOvyEPI\nviLehXcfN/NUo4pPrgDafxLApHzdErv80o2ZivCdVPiXC+X6eFHG57Jkef1I4lZE\nWHtA8eeXUKV9CJOhUQ9RJyGJMi7wJn7le/oANQIlSqfSgoKQqORnyZQpS8rIcFnD\negwTt7QrmGEolsJWi7R3rU3KNlsDsI8j4n+40jlkbFdIr8XYQt0nltarakMAA/1A\nIO/Sjbq/pIgQSXX0Q34bio8ofmZq3PVD8z4g/cbRATBvVEg7adlEcARu7lzU6n0=\n=Oipy\n-----END PGP SIGNATURE-----\n", "payload": "tree 0472a99d20a1b858dae991974d933900b8763377\nparent abace0a1f17986d89aedf610819deab2b4afee56\nparent 7098a714e8dffe32ae10a27a18a3d73b23431a55\nauthor Yuki Okushi <jtitor@2k36.org> 1655809687 +0900\ncommitter GitHub <noreply@github.com> 1655809687 +0900\n\nRollup merge of #94033 - joshtriplett:documentation-is-running-better-go-catch-it, r=m-ou-se\n\nImprove docs for `is_running` to explain use case\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c17c200a90f8dd015a46e87531f726f6a3e2b9", "html_url": "https://github.com/rust-lang/rust/commit/84c17c200a90f8dd015a46e87531f726f6a3e2b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c17c200a90f8dd015a46e87531f726f6a3e2b9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abace0a1f17986d89aedf610819deab2b4afee56", "url": "https://api.github.com/repos/rust-lang/rust/commits/abace0a1f17986d89aedf610819deab2b4afee56", "html_url": "https://github.com/rust-lang/rust/commit/abace0a1f17986d89aedf610819deab2b4afee56"}, {"sha": "7098a714e8dffe32ae10a27a18a3d73b23431a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/7098a714e8dffe32ae10a27a18a3d73b23431a55", "html_url": "https://github.com/rust-lang/rust/commit/7098a714e8dffe32ae10a27a18a3d73b23431a55"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "0a6a7cfe976cc31b9bb6344793bb42f9f3769f6a", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84c17c200a90f8dd015a46e87531f726f6a3e2b9/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c17c200a90f8dd015a46e87531f726f6a3e2b9/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=84c17c200a90f8dd015a46e87531f726f6a3e2b9", "patch": "@@ -1487,13 +1487,14 @@ impl<T> JoinHandle<T> {\n \n     /// Checks if the associated thread has finished running its main function.\n     ///\n+    /// `is_finished` supports implementing a non-blocking join operation, by checking\n+    /// `is_finished`, and calling `join` if it returns `true`. This function does not block. To\n+    /// block while waiting on the thread to finish, use [`join`][Self::join].\n+    ///\n     /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n     /// However, once this returns `true`, [`join`][Self::join] can be expected\n     /// to return quickly, without blocking for any significant amount of time.\n-    ///\n-    /// This function does not block. To block while waiting on the thread to finish,\n-    /// use [`join`][Self::join].\n     #[stable(feature = \"thread_is_running\", since = \"1.61.0\")]\n     pub fn is_finished(&self) -> bool {\n         Arc::strong_count(&self.0.packet) == 1"}, {"sha": "a387a09dc8b156813a956f7bad47272ee533665c", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84c17c200a90f8dd015a46e87531f726f6a3e2b9/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c17c200a90f8dd015a46e87531f726f6a3e2b9/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=84c17c200a90f8dd015a46e87531f726f6a3e2b9", "patch": "@@ -308,13 +308,14 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n \n     /// Checks if the associated thread has finished running its main function.\n     ///\n+    /// `is_finished` supports implementing a non-blocking join operation, by checking\n+    /// `is_finished`, and calling `join` if it returns `false`. This function does not block. To\n+    /// block while waiting on the thread to finish, use [`join`][Self::join].\n+    ///\n     /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n     /// However, once this returns `true`, [`join`][Self::join] can be expected\n     /// to return quickly, without blocking for any significant amount of time.\n-    ///\n-    /// This function does not block. To block while waiting on the thread to finish,\n-    /// use [`join`][Self::join].\n     #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn is_finished(&self) -> bool {\n         Arc::strong_count(&self.0.packet) == 1"}]}