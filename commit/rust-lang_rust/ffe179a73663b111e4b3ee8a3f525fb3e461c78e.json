{"sha": "ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZTE3OWE3MzY2M2IxMTFlNGIzZWU4YTNmNTI1ZmIzZTQ2MWM3OGU=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-29T18:50:56Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T18:27:11Z"}, "message": "Pass attributes as token tree to DefCollector", "tree": {"sha": "15a479dad38fe31c524f0deff725a701782ec90d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a479dad38fe31c524f0deff725a701782ec90d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2U6/8ACgkQztOS3gxI\nPQCo2hAAsWV39d80XY16DEk5BUGqVtBUlb2Gv2akQD4qwU2kc5RtKeoOPYZ/Z4Q7\nq6ZVxkECip2+0rJMd9mAsiNMJ951BzMGv6JRFV3cDCQh61zkb0G51r786GBreN0H\nGtDEOI2uE43oIpV3Gkjc1msbNok2Rgy7ak24SxzW6B5ANdFEx+53YLUd2ekJwYhf\nBk2XY5Kqg7/ihT5T8uSddeOQnll90YW7ZAnSHNaOA6x7q6HV1GpAbWxU56/fwEeE\nC1mB7la8WDPsubS3J2sfm3eg+f7JX0y08qMfCmckwy/DVKI9qQAA8L9fg4o6ihxw\nGCKHotnDeQA0twRmBTbSfByFHrZmxMsgYL4xFafA587TRsNlhCzbKCiQmPbneu7G\nX2/wCgOOhm/W9GoSa5HEgEJ/hNTpBcLUKHSK5GK2jkB+W7iSzzoDmNwHbUYlEXu9\nPtg6rkxdoIlpiIlTrHXBUgf5vi1YbO6xMEyoUkSUnjg+SqGlhnsicGmu2A+BI/vd\nDejMpLK8vueNHg+UbkZQHqcdyPG2kNIFv0dh3AvC27rRbp0e38WxBZrgA6zVRwie\nFQEOD8skxjinjz+q+XuuSOnb6itckmzayk/cEGe+UJYiNnQiFw/Trz+UOBIK95N5\nb0Lkd99MAeVFQq9FN3AfwJ6rTat81gqIac/XwJzc7TTGHTsgcGI=\n=VRHX\n-----END PGP SIGNATURE-----", "payload": "tree 15a479dad38fe31c524f0deff725a701782ec90d\nparent ba3ec8b1508e6f07159fd78ed569bbf47e9936ba\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1569783056 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1570040831 +0800\n\nPass attributes as token tree to DefCollector\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "html_url": "https://github.com/rust-lang/rust/commit/ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/comments", "author": null, "committer": null, "parents": [{"sha": "ba3ec8b1508e6f07159fd78ed569bbf47e9936ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3ec8b1508e6f07159fd78ed569bbf47e9936ba", "html_url": "https://github.com/rust-lang/rust/commit/ba3ec8b1508e6f07159fd78ed569bbf47e9936ba"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "40e56dfe04461a23a8b4509866105e58f61f152a", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "patch": "@@ -523,7 +523,7 @@ where\n         // `#[macro_use] extern crate` is hoisted to imports macros before collecting\n         // any other items.\n         for item in items {\n-            if let raw::RawItem::Import(import_id) = *item {\n+            if let raw::RawItemKind::Import(import_id) = item.kind {\n                 let import = self.raw_items[import_id].clone();\n                 if import.is_extern_crate && import.is_macro_use {\n                     self.def_collector.import_macros_from_extern_crate(self.module_id, &import);\n@@ -532,15 +532,14 @@ where\n         }\n \n         for item in items {\n-            match *item {\n-                raw::RawItem::Module(m) => self.collect_module(&self.raw_items[m]),\n-                raw::RawItem::Import(import_id) => self.def_collector.unresolved_imports.push((\n-                    self.module_id,\n-                    import_id,\n-                    self.raw_items[import_id].clone(),\n-                )),\n-                raw::RawItem::Def(def) => self.define_def(&self.raw_items[def]),\n-                raw::RawItem::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n+            match item.kind {\n+                raw::RawItemKind::Module(m) => self.collect_module(&self.raw_items[m]),\n+                raw::RawItemKind::Import(import_id) => self\n+                    .def_collector\n+                    .unresolved_imports\n+                    .push((self.module_id, import_id, self.raw_items[import_id].clone())),\n+                raw::RawItemKind::Def(def) => self.define_def(&self.raw_items[def]),\n+                raw::RawItemKind::Macro(mac) => self.collect_macro(&self.raw_items[mac]),\n             }\n         }\n     }"}, {"sha": "cacbcb5177fca01dd10eb8bcdbe3b3d6ed6e73ad", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "patch": "@@ -2,6 +2,7 @@\n \n use std::{ops::Index, sync::Arc};\n \n+use mbe::ast_to_token_tree;\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n@@ -28,6 +29,8 @@ pub struct RawItems {\n     items: Vec<RawItem>,\n }\n \n+type Attrs = Arc<[tt::Subtree]>;\n+\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImportSourceMap {\n     map: ArenaMap<ImportId, ImportSourcePtr>,\n@@ -119,8 +122,14 @@ impl Index<Macro> for RawItems {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq, Clone)]\n+pub(super) struct RawItem {\n+    pub(super) attrs: Attrs,\n+    pub(super) kind: RawItemKind,\n+}\n+\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub(super) enum RawItem {\n+pub(super) enum RawItemKind {\n     Module(Module),\n     Import(ImportId),\n     Def(Def),\n@@ -215,6 +224,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n     }\n \n     fn add_item(&mut self, current_module: Option<Module>, item: ast::ModuleItem) {\n+        let attrs = self.parse_attrs(&item);\n         let (kind, name) = match item {\n             ast::ModuleItem::Module(module) => {\n                 self.add_module(current_module, module);\n@@ -263,7 +273,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         if let Some(name) = name {\n             let name = name.as_name();\n             let def = self.raw_items.defs.alloc(DefData { name, kind });\n-            self.push_item(current_module, RawItem::Def(def))\n+            self.push_item(current_module, attrs, RawItemKind::Def(def));\n         }\n     }\n \n@@ -272,6 +282,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n             Some(it) => it.as_name(),\n             None => return,\n         };\n+        let attrs = self.parse_attrs(&module);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n         let is_macro_use = module.has_atom_attr(\"macro_use\");\n@@ -283,7 +294,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n                 attr_path,\n                 is_macro_use,\n             });\n-            self.push_item(current_module, RawItem::Module(item));\n+            self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n \n@@ -297,14 +308,15 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n                 is_macro_use,\n             });\n             self.process_module(Some(item), item_list);\n-            self.push_item(current_module, RawItem::Module(item));\n+            self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n         tested_by!(name_res_works_for_broken_modules);\n     }\n \n     fn add_use_item(&mut self, current_module: Option<Module>, use_item: ast::UseItem) {\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n+        let attrs = self.parse_attrs(&use_item);\n \n         Path::expand_use_item(\n             Source { ast: use_item, file_id: self.file_id },\n@@ -318,7 +330,12 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n                     is_extern_crate: false,\n                     is_macro_use: false,\n                 };\n-                self.push_import(current_module, import_data, Either::A(AstPtr::new(use_tree)));\n+                self.push_import(\n+                    current_module,\n+                    attrs.clone(),\n+                    import_data,\n+                    Either::A(AstPtr::new(use_tree)),\n+                );\n             },\n         )\n     }\n@@ -331,6 +348,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         if let Some(name_ref) = extern_crate.name_ref() {\n             let path = Path::from_name_ref(&name_ref);\n             let alias = extern_crate.alias().and_then(|a| a.name()).map(|it| it.as_name());\n+            let attrs = self.parse_attrs(&extern_crate);\n             let is_macro_use = extern_crate.has_atom_attr(\"macro_use\");\n             let import_data = ImportData {\n                 path,\n@@ -340,7 +358,12 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n                 is_extern_crate: true,\n                 is_macro_use,\n             };\n-            self.push_import(current_module, import_data, Either::B(AstPtr::new(&extern_crate)));\n+            self.push_import(\n+                current_module,\n+                attrs,\n+                import_data,\n+                Either::B(AstPtr::new(&extern_crate)),\n+            );\n         }\n     }\n \n@@ -358,29 +381,38 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         let export = m.attrs().filter_map(|x| x.simple_name()).any(|name| name == \"macro_export\");\n \n         let m = self.raw_items.macros.alloc(MacroData { ast_id, path, name, export });\n-        self.push_item(current_module, RawItem::Macro(m));\n+        self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n \n     fn push_import(\n         &mut self,\n         current_module: Option<Module>,\n+        attrs: Attrs,\n         data: ImportData,\n         source: ImportSourcePtr,\n     ) {\n         let import = self.raw_items.imports.alloc(data);\n         self.source_map.insert(import, source);\n-        self.push_item(current_module, RawItem::Import(import))\n+        self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n \n-    fn push_item(&mut self, current_module: Option<Module>, item: RawItem) {\n+    fn push_item(&mut self, current_module: Option<Module>, attrs: Attrs, kind: RawItemKind) {\n         match current_module {\n             Some(module) => match &mut self.raw_items.modules[module] {\n                 ModuleData::Definition { items, .. } => items,\n                 ModuleData::Declaration { .. } => unreachable!(),\n             },\n             None => &mut self.raw_items.items,\n         }\n-        .push(item)\n+        .push(RawItem { attrs, kind })\n+    }\n+\n+    fn parse_attrs(&self, item: &impl ast::AttrsOwner) -> Attrs {\n+        item.attrs()\n+            .flat_map(|attr| attr.value())\n+            .flat_map(|tt| ast_to_token_tree(&tt))\n+            .map(|(tt, _)| tt)\n+            .collect()\n     }\n }\n "}, {"sha": "34b22c3e2ac93a752b2aeed5dc51decf9816d358", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "patch": "@@ -1962,6 +1962,7 @@ impl AstNode for ModuleItem {\n         }\n     }\n }\n+impl ast::AttrsOwner for ModuleItem {}\n impl ModuleItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Name {"}, {"sha": "5f7d8c3bfc305894e766dda29e3418f3b7e9ce8c", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/ffe179a73663b111e4b3ee8a3f525fb3e461c78e/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=ffe179a73663b111e4b3ee8a3f525fb3e461c78e", "patch": "@@ -397,7 +397,8 @@ Grammar(\n         ),\n         \"ModuleItem\": (\n             enum: [\"StructDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"TypeAliasDef\", \"ImplBlock\",\n-                   \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\", \"Module\" ]\n+                   \"UseItem\", \"ExternCrateItem\", \"ConstDef\", \"StaticDef\", \"Module\" ],\n+            traits: [\"AttrsOwner\"]\n         ),\n         \"ImplItem\": (\n             enum: [\"FnDef\", \"TypeAliasDef\", \"ConstDef\"]"}]}