{"sha": "b8418da1b6b0aba1864270090d65e1c670115d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NDE4ZGExYjZiMGFiYTE4NjQyNzAwOTBkNjVlMWM2NzAxMTVkOTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-15T13:01:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T03:00:51Z"}, "message": "port qquote to use dvec", "tree": {"sha": "3685cd54d5f40dd042da89565086994013ffdb57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3685cd54d5f40dd042da89565086994013ffdb57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8418da1b6b0aba1864270090d65e1c670115d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8418da1b6b0aba1864270090d65e1c670115d99", "html_url": "https://github.com/rust-lang/rust/commit/b8418da1b6b0aba1864270090d65e1c670115d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8418da1b6b0aba1864270090d65e1c670115d99/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4be2c676f713f0dcbad2343db5af81b3caa4966", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4be2c676f713f0dcbad2343db5af81b3caa4966", "html_url": "https://github.com/rust-lang/rust/commit/b4be2c676f713f0dcbad2343db5af81b3caa4966"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "12685ce9a331f7da270b853728763c537d13ee97", "filename": "src/librustsyntax/ext/qquote.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b8418da1b6b0aba1864270090d65e1c670115d99/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8418da1b6b0aba1864270090d65e1c670115d99/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fqquote.rs?ref=b8418da1b6b0aba1864270090d65e1c670115d99", "patch": "@@ -6,16 +6,17 @@ import ext::base::*;\n import ext::build::*;\n import parse::parser;\n import parse::parser::parse_from_source_str;\n+import dvec::{dvec, extensions};\n \n import print::*;\n import io::*;\n \n import codemap::span;\n \n type aq_ctxt = @{lo: uint,\n-                 mut gather: [{lo: uint, hi: uint,\n-                                   e: @ast::expr,\n-                                   constr: str}]};\n+                 gather: dvec<{lo: uint, hi: uint,\n+                               e: @ast::expr,\n+                               constr: str}>};\n enum fragment {\n     from_expr(@ast::expr),\n     from_ty(@ast::ty)\n@@ -101,20 +102,22 @@ fn gather_anti_quotes<N: qq_helper>(lo: uint, node: N) -> aq_ctxt\n               visit_ty: {|node, &&cx, v|\n                   visit_aq(node, \"from_ty\", cx, v)}\n               with *default_visitor()};\n-    let cx = @{lo:lo, mut gather: []};\n+    let cx = @{lo:lo, gather: dvec()};\n     node.visit(cx, mk_vt(v));\n     // FIXME: Maybe this is an overkill (merge_sort), it might be better\n     //   to just keep the gather array in sorted order ... (Issue #2250)\n-    cx.gather = std::sort::merge_sort({|a,b| a.lo < b.lo}, copy cx.gather);\n+    cx.gather.swap { |v|\n+        vec::to_mut(std::sort::merge_sort({|a,b| a.lo < b.lo}, v))\n+    };\n     ret cx;\n }\n \n fn visit_aq<T:qq_helper>(node: T, constr: str, &&cx: aq_ctxt, v: vt<aq_ctxt>)\n {\n     alt (node.extract_mac()) {\n       some(mac_aq(sp, e)) {\n-        cx.gather += [{lo: sp.lo - cx.lo, hi: sp.hi - cx.lo,\n-                       e: e, constr: constr}];\n+        cx.gather.push({lo: sp.lo - cx.lo, hi: sp.hi - cx.lo,\n+                        e: e, constr: constr});\n       }\n       _ {node.visit(cx, v);}\n     }\n@@ -196,7 +199,7 @@ fn finish<T: qq_helper>\n     let qcx = gather_anti_quotes(sp.lo, node);\n     let cx = qcx;\n \n-    uint::range(1u, vec::len(cx.gather)) {|i|\n+    uint::range(1u, cx.gather.len()) {|i|\n         assert cx.gather[i-1u].lo < cx.gather[i].lo;\n         // ^^ check that the vector is sorted\n         assert cx.gather[i-1u].hi <= cx.gather[i].lo;\n@@ -207,7 +210,7 @@ fn finish<T: qq_helper>\n     enum state {active, skip(uint), blank};\n     let mut state = active;\n     let mut i = 0u, j = 0u;\n-    let g_len = vec::len(cx.gather);\n+    let g_len = cx.gather.len();\n     str::chars_iter(*str) {|ch|\n         if (j < g_len && i == cx.gather[j].lo) {\n             assert ch == '$';\n@@ -261,7 +264,7 @@ fn finish<T: qq_helper>\n         rcall = mk_call(cx,sp,\n                         [\"syntax\", \"ext\", \"qquote\", \"replace\"],\n                         [pcall,\n-                         mk_vec_e(cx,sp, vec::map(gather) {|g|\n+                         mk_vec_e(cx,sp, qcx.gather.map_to_vec {|g|\n                              mk_call(cx,sp,\n                                      [\"syntax\", \"ext\", \"qquote\", g.constr],\n                                      [g.e])}),"}]}