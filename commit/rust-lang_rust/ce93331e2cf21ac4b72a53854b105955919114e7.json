{"sha": "ce93331e2cf21ac4b72a53854b105955919114e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTMzMzFlMmNmMjFhYzRiNzJhNTM4NTRiMTA1OTU1OTE5MTE0ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T18:36:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T18:36:53Z"}, "message": "Auto merge of #71255 - Dylan-DPC:rollup-u5yl04z, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #69642 (Use query to determine whether function needs const checking)\n - #71239 (Rename `asm` test directory in favor of `llvm_asm`)\n - #71246 (Implement `Clone` for `liballoc::collections::linked_list::Cursor`.)\n - #71247 (Remove unnecessary variable intialization)\n - #71254 (Minor fix and addition to doc comments)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "34c8457090bd69c12170219b7b4a600814074924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c8457090bd69c12170219b7b4a600814074924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce93331e2cf21ac4b72a53854b105955919114e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce93331e2cf21ac4b72a53854b105955919114e7", "html_url": "https://github.com/rust-lang/rust/commit/ce93331e2cf21ac4b72a53854b105955919114e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce93331e2cf21ac4b72a53854b105955919114e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d67f576b56e8fc98a31123e5963f8d00e40611c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "html_url": "https://github.com/rust-lang/rust/commit/8d67f576b56e8fc98a31123e5963f8d00e40611c"}, {"sha": "4132642e8a485fff5b8aa1d68ae3d0c32b514eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4132642e8a485fff5b8aa1d68ae3d0c32b514eb5", "html_url": "https://github.com/rust-lang/rust/commit/4132642e8a485fff5b8aa1d68ae3d0c32b514eb5"}], "stats": {"total": 143, "additions": 87, "deletions": 56}, "files": [{"sha": "243ebb453d3ea0915561a29ffd73a1f50909bf9d", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1197,6 +1197,14 @@ pub struct Cursor<'a, T: 'a> {\n     list: &'a LinkedList<T>,\n }\n \n+#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n+impl<T> Clone for Cursor<'_, T> {\n+    fn clone(&self) -> Self {\n+        let Cursor { index, current, list } = *self;\n+        Cursor { index, current, list }\n+    }\n+}\n+\n #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n impl<T: fmt::Debug> fmt::Debug for Cursor<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "4063d290993a14c311ea81b2d6ddbb0b39c936bf", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -2611,14 +2611,14 @@ impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {\n     type Iter = iter::Cloned<Successors<'b>>;\n }\n \n+/// `Location` represents the position of the start of the statement; or, if\n+/// `statement_index` equals the number of statements, then the start of the\n+/// terminator.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable)]\n pub struct Location {\n     /// The block that the location is within.\n     pub block: BasicBlock,\n \n-    /// The location is the position of the start of the statement; or, if\n-    /// `statement_index` equals the number of statements, then the start of the\n-    /// terminator.\n     pub statement_index: usize,\n }\n "}, {"sha": "bb33372692d27b97444cf9b9dede3eabb37ab195", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -95,8 +95,16 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n     let node = tcx.hir().get(hir_id);\n \n-    if let Some(whitelisted) = is_const_intrinsic(tcx, def_id) {\n-        whitelisted\n+    if let hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) =\n+        node\n+    {\n+        // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n+        // foreign items cannot be evaluated at compile-time.\n+        if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = tcx.hir().get_foreign_abi(hir_id) {\n+            tcx.lookup_const_stability(def_id).is_some()\n+        } else {\n+            false\n+        }\n     } else if let Some(fn_like) = FnLikeNode::from_node(node) {\n         if fn_like.constness() == hir::Constness::Const {\n             return true;\n@@ -112,21 +120,6 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-/// Const evaluability whitelist is here to check evaluability at the\n-/// top level beforehand.\n-fn is_const_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> Option<bool> {\n-    if tcx.is_closure(def_id) {\n-        return None;\n-    }\n-\n-    match tcx.fn_sig(def_id).abi() {\n-        Abi::RustIntrinsic | Abi::PlatformIntrinsic => {\n-            Some(tcx.lookup_const_stability(def_id).is_some())\n-        }\n-        _ => None,\n-    }\n-}\n-\n /// Checks whether the given item is an `impl` that has a `const` modifier.\n fn is_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "efb84ef35f35da06684eee9b57590811ecf441b0", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -254,6 +254,7 @@ pub fn write_mir_pretty<'tcx>(\n     Ok(())\n }\n \n+/// Write out a human-readable textual representation for the given function.\n pub fn write_mir_fn<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     src: MirSource<'tcx>,"}, {"sha": "f409b040c69d4d76a58e3e7d13e98f5223e3cd26", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -74,16 +74,16 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body<'_>, hir_map: Map<'_>) -> Option<Self> {\n-        let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n-\n-        let owner = hir_map.body_owner(body.id());\n-        let const_kind = match hir_map.body_owner_kind(owner) {\n+    fn for_body(body: &hir::Body<'_>, tcx: TyCtxt<'_>) -> Option<Self> {\n+        let owner = tcx.hir().body_owner(body.id());\n+        let const_kind = match tcx.hir().body_owner_kind(owner) {\n             hir::BodyOwnerKind::Const => Self::Const,\n             hir::BodyOwnerKind::Static(Mutability::Mut) => Self::StaticMut,\n             hir::BodyOwnerKind::Static(Mutability::Not) => Self::Static,\n \n-            hir::BodyOwnerKind::Fn if is_const_fn(owner) => Self::ConstFn,\n+            hir::BodyOwnerKind::Fn if tcx.is_const_fn_raw(tcx.hir().local_def_id(owner)) => {\n+                Self::ConstFn\n+            }\n             hir::BodyOwnerKind::Fn | hir::BodyOwnerKind::Closure => return None,\n         };\n \n@@ -211,7 +211,7 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n-        let kind = ConstKind::for_body(body, self.tcx.hir());\n+        let kind = ConstKind::for_body(body, self.tcx);\n         self.recurse_into(kind, |this| intravisit::walk_body(this, body));\n     }\n "}, {"sha": "dbda735aa99c85df8a9091158ea7f98a95c27137", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -975,18 +975,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n-        let uty = expected.to_option(self).and_then(|uty| match uty.kind {\n-            ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n-            _ => None,\n-        });\n-\n         let element_ty = if !args.is_empty() {\n-            let coerce_to = uty.unwrap_or_else(|| {\n-                self.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::TypeInference,\n-                    span: expr.span,\n+            let coerce_to = expected\n+                .to_option(self)\n+                .and_then(|uty| match uty.kind {\n+                    ty::Array(ty, _) | ty::Slice(ty) => Some(ty),\n+                    _ => None,\n                 })\n-            });\n+                .unwrap_or_else(|| {\n+                    self.next_ty_var(TypeVariableOrigin {\n+                        kind: TypeVariableOriginKind::TypeInference,\n+                        span: expr.span,\n+                    })\n+                });\n             let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);\n             assert_eq!(self.diverges.get(), Diverges::Maybe);\n             for e in args {"}, {"sha": "ca06bdab27b96d3aa5d7fc7c22979e06a763172d", "filename": "src/test/ui/llvm-asm/issue-51431.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-51431.rs"}, {"sha": "b4b39a2a44ec3c92c0d806d0f8e03d0018fa2d8e", "filename": "src/test/ui/llvm-asm/issue-51431.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-51431.stderr"}, {"sha": "f2e097222bd7d5d203386628a8e92ae114b5188c", "filename": "src/test/ui/llvm-asm/issue-54067.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-54067.rs"}, {"sha": "fd4d9bdd23dbf578b987ce9f88f2145d15b01541", "filename": "src/test/ui/llvm-asm/issue-62046.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-62046.rs"}, {"sha": "cf27052df05aa6aed400e478207c76880158c55a", "filename": "src/test/ui/llvm-asm/issue-62046.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-62046.stderr"}, {"sha": "ecce7bfdf5bba9732ba72810968e8fe6772d4621", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-69092.rs"}, {"sha": "35f77edc3c402b942dea095312cad4c12e4406e0", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/issue-69092.stderr"}, {"sha": "9f5662cbd1e93604784b25b7926d57886999aca2", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-bad-clobber.rs"}, {"sha": "9ecd12caa0e2a796244db5ff2085dac567b7ec1a", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,5 +1,5 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/asm-bad-clobber.rs:22:42\n+  --> $DIR/llvm-asm-bad-clobber.rs:22:42\n    |\n LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n    |                                          ^^^^^^^", "previous_filename": "src/test/ui/asm/asm-bad-clobber.stderr"}, {"sha": "b791ec3e8c8b1eff6e456018a8b866ef7d569f59", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-in-bad-modifier.rs"}, {"sha": "e94ac94f59f9a2d7b157a514c7f968815c8d587e", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,11 +1,11 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/asm-in-bad-modifier.rs:23:44\n+  --> $DIR/llvm-asm-in-bad-modifier.rs:23:44\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n    |                                            ^^^^\n \n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/asm-in-bad-modifier.rs:24:44\n+  --> $DIR/llvm-asm-in-bad-modifier.rs:24:44\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n    |                                            ^^^^", "previous_filename": "src/test/ui/asm/asm-in-bad-modifier.stderr"}, {"sha": "5d45f5084c5eec399396315a493b2c134f4a410b", "filename": "src/test/ui/llvm-asm/llvm-asm-literal-escaping.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-literal-escaping.rs"}, {"sha": "3c44fc90ef3f216403962fbaa3c0e26c021df73b", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-misplaced-option.rs"}, {"sha": "21fd27825a18552369408a034021b72a35502d0f", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,11 +1,11 @@\n warning: unrecognized option\n-  --> $DIR/asm-misplaced-option.rs:24:69\n+  --> $DIR/llvm-asm-misplaced-option.rs:24:69\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n    |                                                                     ^^^^\n \n warning: expected a clobber, found an option\n-  --> $DIR/asm-misplaced-option.rs:31:85\n+  --> $DIR/llvm-asm-misplaced-option.rs:31:85\n    |\n LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n    |                                                                                     ^^^^^^^^^^", "previous_filename": "src/test/ui/asm/asm-misplaced-option.stderr"}, {"sha": "1a46879f9f291bdd54fa8bdcf416cff8fba83303", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-out-assign-imm.rs"}, {"sha": "e110aec220936963288d7beaf96517a645439e51", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:24:39\n+  --> $DIR/llvm-asm-out-assign-imm.rs:24:39\n    |\n LL |     let x: isize;\n    |         - help: make this binding mutable: `mut x`", "previous_filename": "src/test/ui/asm/asm-out-assign-imm.stderr"}, {"sha": "d198437c5089411db2203a6ac68f3cff5312151e", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-out-no-modifier.rs"}, {"sha": "1f2b272792435ce78dea3d461767dfc31d829598", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,5 +1,5 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/asm-out-no-modifier.rs:22:34\n+  --> $DIR/llvm-asm-out-no-modifier.rs:22:34\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n    |                                  ^^^", "previous_filename": "src/test/ui/asm/asm-out-no-modifier.stderr"}, {"sha": "d45498d4bb4a1b9782afd1acc06a4ab077e9d6f6", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-out-read-uninit.rs"}, {"sha": "a22ebe4e4d9dbdba3d3722b692e9375efb60f590", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/asm-out-read-uninit.rs:22:48\n+  --> $DIR/llvm-asm-out-read-uninit.rs:22:48\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n    |                                                ^ use of possibly-uninitialized `x`", "previous_filename": "src/test/ui/asm/asm-out-read-uninit.stderr"}, {"sha": "d458be815296bc5afbfb2c216a6b9596b60f9031", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "previous_filename": "src/test/ui/asm/asm-parse-errors.rs"}, {"sha": "1fd46809f3eedcf64696f065e82623546096f8b9", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -1,65 +1,65 @@\n error: macro requires a string literal as an argument\n-  --> $DIR/asm-parse-errors.rs:4:5\n+  --> $DIR/llvm-asm-parse-errors.rs:4:5\n    |\n LL |     llvm_asm!();\n    |     ^^^^^^^^^^^^ string literal required\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:5:23\n+  --> $DIR/llvm-asm-parse-errors.rs:5:23\n    |\n LL |     llvm_asm!(\"nop\" : struct);\n    |                       ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:6:35\n+  --> $DIR/llvm-asm-parse-errors.rs:6:35\n    |\n LL |     llvm_asm!(\"mov %eax, $$0x2\" : struct);\n    |                                   ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:7:44\n+  --> $DIR/llvm-asm-parse-errors.rs:7:44\n    |\n LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n    |                                            ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:8:44\n+  --> $DIR/llvm-asm-parse-errors.rs:8:44\n    |\n LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n    |                                            ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:9:49\n+  --> $DIR/llvm-asm-parse-errors.rs:9:49\n    |\n LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n    |                                                 ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:10:56\n+  --> $DIR/llvm-asm-parse-errors.rs:10:56\n    |\n LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n    |                                                        ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/asm-parse-errors.rs:11:56\n+  --> $DIR/llvm-asm-parse-errors.rs:11:56\n    |\n LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n    |                                                        ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:12:41\n+  --> $DIR/llvm-asm-parse-errors.rs:12:41\n    |\n LL |     llvm_asm!(\"mov $$0x200, %eax\" : : : struct);\n    |                                         ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/asm-parse-errors.rs:13:50\n+  --> $DIR/llvm-asm-parse-errors.rs:13:50\n    |\n LL |     llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n    |                                                  ^^^^^^ not a string literal\n \n error: inline assembly must be a string literal\n-  --> $DIR/asm-parse-errors.rs:14:15\n+  --> $DIR/llvm-asm-parse-errors.rs:14:15\n    |\n LL |     llvm_asm!(123);\n    |               ^^^", "previous_filename": "src/test/ui/asm/asm-parse-errors.stderr"}, {"sha": "f7af1b506f0dba01b4d8c4239329c8850901e744", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.rs?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #69615.\n+\n+#![feature(const_trait_impl, const_fn)]\n+#![allow(incomplete_features)]\n+\n+pub trait MyTrait {\n+    fn method(&self);\n+}\n+\n+impl const MyTrait for () {\n+    fn method(&self) {\n+        match *self {} //~ ERROR `match` is not allowed in a `const fn`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "563a9afe5bb84e9231cd943fc403172533476ae5", "filename": "src/test/ui/rfc-2632-const-trait-impl/hir-const-check.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce93331e2cf21ac4b72a53854b105955919114e7/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fhir-const-check.stderr?ref=ce93331e2cf21ac4b72a53854b105955919114e7", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `match` is not allowed in a `const fn`\n+  --> $DIR/hir-const-check.rs:12:9\n+   |\n+LL |         match *self {}\n+   |         ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}