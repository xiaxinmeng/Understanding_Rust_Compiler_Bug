{"sha": "a05914e2dcf196c226a9a93c6609e57970be7e23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNTkxNGUyZGNmMTk2YzIyNmE5YTkzYzY2MDllNTc5NzBiZTdlMjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T16:16:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-13T07:09:02Z"}, "message": "check return type even for uninhabited case", "tree": {"sha": "e274b7f6efceb3343e38f168a79a7653843741d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e274b7f6efceb3343e38f168a79a7653843741d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05914e2dcf196c226a9a93c6609e57970be7e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05914e2dcf196c226a9a93c6609e57970be7e23", "html_url": "https://github.com/rust-lang/rust/commit/a05914e2dcf196c226a9a93c6609e57970be7e23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05914e2dcf196c226a9a93c6609e57970be7e23/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b75ec0a91f548a5a37afc050474ce47f3e74a40", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b75ec0a91f548a5a37afc050474ce47f3e74a40", "html_url": "https://github.com/rust-lang/rust/commit/5b75ec0a91f548a5a37afc050474ce47f3e74a40"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "d8ec014b852f83777bb150b9936b8a538d90169a", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a05914e2dcf196c226a9a93c6609e57970be7e23/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05914e2dcf196c226a9a93c6609e57970be7e23/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a05914e2dcf196c226a9a93c6609e57970be7e23", "patch": "@@ -375,18 +375,19 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         return err!(FunctionArgCountMismatch);\n                     }\n                     // Don't forget to check the return type!\n+                    let callee_ret = self.eval_place(&mir::Place::Local(mir::RETURN_PLACE))?;\n                     if let Some(caller_ret) = dest {\n-                        let callee_ret = self.eval_place(&mir::Place::Local(mir::RETURN_PLACE))?;\n                         if !Self::check_argument_compat(caller_ret.layout, callee_ret.layout) {\n                             return err!(FunctionRetMismatch(\n                                 caller_ret.layout.ty, callee_ret.layout.ty\n                             ));\n                         }\n                     } else {\n-                        // FIXME: The caller thinks this function cannot return. How do\n-                        // we verify that the callee agrees?\n-                        // On the plus side, the the callee ever writes to its return place,\n-                        // that will be detected as UB (because we set that to NULL above).\n+                        if !callee_ret.layout.abi.is_uninhabited() {\n+                            return err!(FunctionRetMismatch(\n+                                self.tcx.types.never, callee_ret.layout.ty\n+                            ));\n+                        }\n                     }\n                     Ok(())\n                 })();"}]}