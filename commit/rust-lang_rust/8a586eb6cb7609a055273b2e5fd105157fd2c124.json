{"sha": "8a586eb6cb7609a055273b2e5fd105157fd2c124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTg2ZWI2Y2I3NjA5YTA1NTI3M2IyZTVmZDEwNTE1N2ZkMmMxMjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-06T14:27:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-06T14:27:20Z"}, "message": "Rustup to rustc 1.33.0-nightly (68fe5182c 2019-01-05)", "tree": {"sha": "4d1322d795e680136f1f485b376d938ca1aaf50c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d1322d795e680136f1f485b376d938ca1aaf50c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a586eb6cb7609a055273b2e5fd105157fd2c124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a586eb6cb7609a055273b2e5fd105157fd2c124", "html_url": "https://github.com/rust-lang/rust/commit/8a586eb6cb7609a055273b2e5fd105157fd2c124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a586eb6cb7609a055273b2e5fd105157fd2c124/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f313aad313fafaacdbe7733a5e1829bd3cac02", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f313aad313fafaacdbe7733a5e1829bd3cac02", "html_url": "https://github.com/rust-lang/rust/commit/70f313aad313fafaacdbe7733a5e1829bd3cac02"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "a4177552cb3a085f045e64590c8dd723304a65d3", "filename": "src/constant.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=8a586eb6cb7609a055273b2e5fd105157fd2c124", "patch": "@@ -3,7 +3,7 @@ use std::borrow::Cow;\n use rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocKind, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n-use rustc::ty::Const;\n+use rustc::ty::{Const, LazyConst};\n use rustc_mir::interpret::{\n     EvalContext, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer, StackPopCleanup,\n };\n@@ -61,7 +61,6 @@ pub fn trans_promoted<'a, 'tcx: 'a>(\n         }))\n         .unwrap();\n \n-    let const_ = force_eval_const(fx, const_);\n     trans_const_place(fx, const_)\n }\n \n@@ -76,10 +75,10 @@ pub fn trans_constant<'a, 'tcx: 'a>(\n \n pub fn force_eval_const<'a, 'tcx: 'a>(\n     fx: &FunctionCx<'a, 'tcx, impl Backend>,\n-    const_: &'tcx Const<'tcx>,\n-) -> &'tcx Const<'tcx> {\n-    match const_.val {\n-        ConstValue::Unevaluated(def_id, ref substs) => {\n+    const_: &'tcx LazyConst<'tcx>,\n+) -> Const<'tcx> {\n+    match *const_ {\n+        LazyConst::Unevaluated(def_id, ref substs) => {\n             let param_env = ParamEnv::reveal_all();\n             let instance = Instance::resolve(fx.tcx, param_env, def_id, substs).unwrap();\n             let cid = GlobalId {\n@@ -88,13 +87,13 @@ pub fn force_eval_const<'a, 'tcx: 'a>(\n             };\n             fx.tcx.const_eval(param_env.and(cid)).unwrap()\n         }\n-        _ => const_,\n+        LazyConst::Evaluated(const_) => const_,\n     }\n }\n \n fn trans_const_value<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    const_: &'tcx Const<'tcx>,\n+    const_: Const<'tcx>,\n ) -> CValue<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n@@ -124,7 +123,7 @@ fn trans_const_value<'a, 'tcx: 'a>(\n \n fn trans_const_place<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    const_: &'tcx Const<'tcx>,\n+    const_: Const<'tcx>,\n ) -> CPlace<'tcx> {\n     // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n     let result = || -> EvalResult<'tcx, &'tcx Allocation> {\n@@ -146,7 +145,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n                 span: DUMMY_SP,\n                 ty: const_.ty,\n                 user_ty: None,\n-                literal: const_,\n+                literal: fx.tcx.intern_lazy_const(LazyConst::Evaluated(const_)),\n             })),\n             None,\n         )?;"}, {"sha": "2b0c44c2f6f533c2404d3491502ed1ded1f46297", "filename": "src/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=8a586eb6cb7609a055273b2e5fd105157fd2c124", "patch": "@@ -352,6 +352,11 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n             ret.write_cvalue(fx, needs_drop);\n         };\n+        panic_if_uninhabited, <T> () {\n+            if fx.layout_of(T).abi.is_uninhabited() {\n+                crate::trap::trap_panic(&mut fx.bcx);\n+            }\n+        };\n \n         _ if intrinsic.starts_with(\"atomic_fence\"), () {};\n         _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), () {};"}, {"sha": "7df9b6ae42eeb94423cf27bbea555b0b309f88d6", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8a586eb6cb7609a055273b2e5fd105157fd2c124", "patch": "@@ -103,7 +103,7 @@ mod prelude {\n \n pub struct Caches<'tcx> {\n     pub context: Context,\n-    pub vtables: HashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), DataId>,\n+    pub vtables: HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n }\n \n impl<'tcx> Default for Caches<'tcx> {"}, {"sha": "61455c6a70a09d1df73dc4376702025587bf43b2", "filename": "src/vtable.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a586eb6cb7609a055273b2e5fd105157fd2c124/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=8a586eb6cb7609a055273b2e5fd105157fd2c124", "patch": "@@ -51,7 +51,7 @@ pub fn get_ptr_and_method_ref<'a, 'tcx: 'a>(\n pub fn get_vtable<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n-    trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n+    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n     let data_id = if let Some(data_id) = fx.caches.vtables.get(&(ty, trait_ref)) {\n         *data_id\n@@ -68,7 +68,7 @@ pub fn get_vtable<'a, 'tcx: 'a>(\n fn build_vtable<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     ty: Ty<'tcx>,\n-    trait_ref: ty::PolyExistentialTraitRef<'tcx>,\n+    trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> DataId {\n     let tcx = fx.tcx;\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n@@ -81,9 +81,14 @@ fn build_vtable<'a, 'tcx: 'a>(\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n \n-    let trait_ref = trait_ref.with_self_ty(tcx, ty);\n-    let methods = tcx.vtable_methods(trait_ref);\n-    let methods = methods.iter().cloned().map(|opt_mth| {\n+    let methods_root;\n+    let methods = if let Some(trait_ref) = trait_ref {\n+        methods_root = tcx.vtable_methods(trait_ref.with_self_ty(tcx, ty));\n+        methods_root.iter()\n+    } else {\n+        (&[]).iter()\n+    };\n+    let methods = methods.cloned().map(|opt_mth| {\n         opt_mth.map_or(None, |(def_id, substs)| {\n             Some(import_function(\n                 tcx,"}]}