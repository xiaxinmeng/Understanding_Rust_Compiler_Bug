{"sha": "7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTk1MzdjY2NjN2E2MzM4YmNkOWM4OTJhMWZkYjRhNjAwOGRjMWE=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-10T05:32:47Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-10T05:32:47Z"}, "message": "Support completion for macros", "tree": {"sha": "8c6a25f27708815935511897071c749ecd6111e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6a25f27708815935511897071c749ecd6111e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl13NYEACgkQztOS3gxI\nPQDHZA//bxeqMCPDjN1KY0Zcou2o9QC2nu0c8wlET/nAma91lpDL7wC9knjVuTNt\nLlS2qTXnbaeliJwtLvQ9dQ1lmAm81/1mUN94wv3Ef2GAisIv6h5gxlbYalCw7cUs\n9rilwVjGz2wOLYIy3ruEyS1w/hRFjs+B+oCwdlTSED8r76ffDE6bTigHhDm3LQID\nIWYUNsZJydaaZ8RGIwo4O+oYNM5UKW/SnRW3uSm1SH380PdzPln5r93pmJFDeNMB\n2gLKiMRc2LZYnqHNr2mL594N0mMxtO1O5zZuR0PHcm6bkMllI5a75lqq2y4eiQr8\nHHmyShbtjzbLbpswZIRVO5GyDv7D5zMJnJyKXz9J6EBuQAg1Ohb08hIwyB2XvMNS\nPeh0Z0E9MWIHHzNaP6HSk5dCPGtuizmj2DGyJaHg/O0ViCZ3lHOozGqFPh64UPoI\njfQATH6SJdzMyD+451bTekv1syHeRJ5CnCfV/TO3zWUql/i+b0fbVOD3tIvRgzFf\n8hwGo9pvUmrhwzGK8oS2sH7v9b6dWWAx0nv7Q7HnNmjR3dsiopl0MMrJMQdxaDWN\nQLQYYNn8l3fWKzkBctxh1YLjPJQjdVgGhhkXVK7/Fn4DgniW+DciU4yCpfWMXmME\nBsFnnahe0rWjLmYcsg1x9Gxzqs/3NtdKOwwC8jtTpQwfdroLs3c=\n=kduS\n-----END PGP SIGNATURE-----", "payload": "tree 8c6a25f27708815935511897071c749ecd6111e3\nparent e2ebb467bdf3ebb7d29260adb95c56594c6db282\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1568093567 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1568093567 +0800\n\nSupport completion for macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "html_url": "https://github.com/rust-lang/rust/commit/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/comments", "author": null, "committer": null, "parents": [{"sha": "e2ebb467bdf3ebb7d29260adb95c56594c6db282", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ebb467bdf3ebb7d29260adb95c56594c6db282", "html_url": "https://github.com/rust-lang/rust/commit/e2ebb467bdf3ebb7d29260adb95c56594c6db282"}], "stats": {"total": 297, "additions": 295, "deletions": 2}, "files": [{"sha": "55c78d305ca2a005717c44d1dddd30be67c847a8", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "patch": "@@ -584,6 +584,42 @@ mod tests {\n         kind: Function,\n         detail: \"fn foo()\",\n     },\n+]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_quantified_macros() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                #[macro_export]\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    let _ = crate::<|>\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [179; 179),\n+        delete: [179; 179),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"#[macro_export]\\nmacro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [179; 179),\n+        delete: [179; 179),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n ]\"###\n         );\n     }"}, {"sha": "e2e1d7872ae37f16e98a0181c0d65419132c7eae", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "patch": "@@ -6,6 +6,15 @@ use rustc_hash::FxHashMap;\n use crate::completion::{CompletionContext, CompletionItem, CompletionKind, Completions};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n+    // Show only macros in top level.\n+    if ctx.is_new_item {\n+        for (name, res) in ctx.analyzer.all_names(ctx.db) {\n+            if res.get_macros().is_some() {\n+                acc.add_resolution(ctx, name.to_string(), &res.only_macros());\n+            }\n+        }\n+    }\n+\n     if !ctx.is_trivial_path {\n         return;\n     }\n@@ -532,4 +541,224 @@ mod tests {\n ]\"#\n         );\n     }\n+\n+    #[test]\n+    fn completes_macros_as_value() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                #[macro_use]\n+                mod m1 {\n+                    macro_rules! bar {\n+                        () => {}\n+                    }\n+                }\n+\n+                mod m2 {\n+                    macro_rules! nope {\n+                        () => {}\n+                    }\n+\n+                    #[macro_export]\n+                    macro_rules! baz {\n+                        () => {}\n+                    }\n+                }\n+\n+                fn main() {\n+                    let v = <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"bar\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"bar!\",\n+        kind: Macro,\n+        detail: \"macro_rules! bar\",\n+    },\n+    CompletionItem {\n+        label: \"baz\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"baz!\",\n+        kind: Macro,\n+        detail: \"#[macro_export]\\nmacro_rules! baz\",\n+    },\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"m1\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"m1\",\n+        kind: Module,\n+    },\n+    CompletionItem {\n+        label: \"m2\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"m2\",\n+        kind: Module,\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [252; 252),\n+        delete: [252; 252),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_both_macro_and_value() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn foo() {\n+                    <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [49; 49),\n+        delete: [49; 49),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [49; 49),\n+        delete: [49; 49),\n+        insert: \"foo()$0\",\n+        kind: Function,\n+        detail: \"fn foo()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_macros_as_type() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    let x: <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [57; 57),\n+        delete: [57; 57),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [57; 57),\n+        delete: [57; 57),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_macros_as_stmt() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    <|>\n+                }\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [50; 50),\n+        delete: [50; 50),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+    CompletionItem {\n+        label: \"main\",\n+        source_range: [50; 50),\n+        delete: [50; 50),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        detail: \"fn main()\",\n+    },\n+]\"##\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_macros_as_item() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn foo() {}\n+\n+                <|>\n+                \"\n+            ),\n+            @r##\"[\n+    CompletionItem {\n+        label: \"foo\",\n+        source_range: [46; 46),\n+        delete: [46; 46),\n+        insert: \"foo!\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+    },\n+]\"##\n+        );\n+    }\n }"}, {"sha": "1b706bb131d6dbe39f6630b618a5f8e1f0eafea6", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "patch": "@@ -8,7 +8,7 @@ use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use crate::display::{const_label, function_label, type_label};\n+use crate::display::{const_label, function_label, macro_label, type_label};\n \n impl Completions {\n     pub(crate) fn add_field(\n@@ -43,8 +43,14 @@ impl Completions {\n     ) {\n         use hir::ModuleDef::*;\n \n+        if let Some(macro_) = resolution.get_macros() {\n+            self.add_macro(ctx, Some(local_name.clone()), macro_);\n+        }\n+\n         let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n         let def = match def {\n+            // Only insert once if it is just a macro name\n+            None if resolution.get_macros().is_some() => return,\n             None => {\n                 self.add(CompletionItem::new(\n                     CompletionKind::Reference,\n@@ -98,6 +104,22 @@ impl Completions {\n         self.add_function_with_name(ctx, None, func)\n     }\n \n+    fn add_macro(&mut self, ctx: &CompletionContext, name: Option<String>, macro_: hir::MacroDef) {\n+        let ast_node = macro_.source(ctx.db).ast;\n+        if let Some(name) = name {\n+            let detail = macro_label(&ast_node);\n+\n+            let builder =\n+                CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n+                    .kind(CompletionItemKind::Macro)\n+                    .set_documentation(macro_.docs(ctx.db))\n+                    .detail(detail)\n+                    .insert_snippet(format!(\"{}!\", name));\n+\n+            self.add(builder);\n+        }\n+    }\n+\n     fn add_function_with_name(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "a980c56bc05ec9a5f920cc026b49add400e25680", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=7de9537cccc7a6338bcd9c892a1fdb4a6008dc1a", "patch": "@@ -7,7 +7,7 @@ mod structure;\n mod short_label;\n \n use ra_syntax::{\n-    ast::{self, AstNode, TypeParamsOwner},\n+    ast::{self, AstNode, AttrsOwner, NameOwner, TypeParamsOwner},\n     SyntaxKind::{ATTR, COMMENT},\n };\n \n@@ -61,6 +61,12 @@ pub(crate) fn where_predicates<N: TypeParamsOwner>(node: &N) -> Vec<String> {\n     res\n }\n \n+pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n+    let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n+    let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n+    format!(\"{}macro_rules! {}\", vis, name)\n+}\n+\n pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n     rust_code_markup_with_doc::<_, &str>(val, None)\n }"}]}