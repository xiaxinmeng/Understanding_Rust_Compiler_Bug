{"sha": "974817d4932fd447f724c4527360a258952ffd48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NDgxN2Q0OTMyZmQ0NDdmNzI0YzQ1MjczNjBhMjU4OTUyZmZkNDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-19T01:32:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-21T15:13:34Z"}, "message": "when pop skol, also remove from proj cache", "tree": {"sha": "abf55340848ec3df65ca2773cbdd155dfc028a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf55340848ec3df65ca2773cbdd155dfc028a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974817d4932fd447f724c4527360a258952ffd48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974817d4932fd447f724c4527360a258952ffd48", "html_url": "https://github.com/rust-lang/rust/commit/974817d4932fd447f724c4527360a258952ffd48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974817d4932fd447f724c4527360a258952ffd48/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5b6467c33f7f86b4964b08b37726f7611a8f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5b6467c33f7f86b4964b08b37726f7611a8f0c", "html_url": "https://github.com/rust-lang/rust/commit/da5b6467c33f7f86b4964b08b37726f7611a8f0c"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "069fb3e7967765fd84f4e4d2823d9d0f5f199be7", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/974817d4932fd447f724c4527360a258952ffd48/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974817d4932fd447f724c4527360a258952ffd48/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=974817d4932fd447f724c4527360a258952ffd48", "patch": "@@ -839,5 +839,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"pop_skolemized({:?})\", skol_map);\n         let skol_regions: FnvHashSet<_> = skol_map.values().cloned().collect();\n         self.region_vars.pop_skolemized(&skol_regions, &snapshot.region_vars_snapshot);\n+        self.projection_cache.borrow_mut().partial_rollback(&snapshot.projection_cache_snapshot);\n     }\n }"}, {"sha": "71196306121ceefdf7df8f00911aaf428d43d022", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/974817d4932fd447f724c4527360a258952ffd48/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974817d4932fd447f724c4527360a258952ffd48/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=974817d4932fd447f724c4527360a258952ffd48", "patch": "@@ -167,7 +167,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             infcx.skolemize_late_bound_regions(&obligation.predicate, snapshot);\n \n         let skol_obligation = obligation.with(skol_predicate);\n-        match project_and_unify_type(selcx, &skol_obligation) {\n+        let r = match project_and_unify_type(selcx, &skol_obligation) {\n             Ok(result) => {\n                 let span = obligation.cause.span;\n                 match infcx.leak_check(false, span, &skol_map, snapshot) {\n@@ -178,7 +178,9 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             Err(e) => {\n                 Err(e)\n             }\n-        }\n+        };\n+\n+        r\n     })\n }\n \n@@ -1396,6 +1398,10 @@ impl<'tcx> ProjectionCache<'tcx> {\n         self.map.rollback_to(snapshot.snapshot);\n     }\n \n+    pub fn partial_rollback(&mut self, snapshot: &ProjectionCacheSnapshot) {\n+        self.map.partial_rollback(&snapshot.snapshot);\n+    }\n+\n     pub fn commit(&mut self, snapshot: ProjectionCacheSnapshot) {\n         self.map.commit(snapshot.snapshot);\n     }"}, {"sha": "23a67b3bd93ca345ae3d13fd74b8a2bbc10d9d6f", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/974817d4932fd447f724c4527360a258952ffd48/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974817d4932fd447f724c4527360a258952ffd48/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=974817d4932fd447f724c4527360a258952ffd48", "patch": "@@ -11,6 +11,7 @@\n use fnv::FnvHashMap;\n use std::hash::Hash;\n use std::ops;\n+use std::mem;\n \n #[cfg(test)]\n mod test;\n@@ -31,6 +32,7 @@ enum UndoLog<K, V> {\n     CommittedSnapshot,\n     Inserted(K),\n     Overwrite(K, V),\n+    Noop,\n }\n \n impl<K, V> SnapshotMap<K, V>\n@@ -100,24 +102,29 @@ impl<K, V> SnapshotMap<K, V>\n         }\n     }\n \n+    pub fn partial_rollback(&mut self, snapshot: &Snapshot) {\n+        self.assert_open_snapshot(snapshot);\n+        for i in (snapshot.len + 1..self.undo_log.len()).rev() {\n+            let reverse = match self.undo_log[i] {\n+                UndoLog::OpenSnapshot => false,\n+                UndoLog::CommittedSnapshot => false,\n+                UndoLog::Noop => false,\n+                UndoLog::Inserted(..) => true,\n+                UndoLog::Overwrite(..) => true,\n+            };\n+\n+            if reverse {\n+                let entry = mem::replace(&mut self.undo_log[i], UndoLog::Noop);\n+                self.reverse(entry);\n+            }\n+        }\n+    }\n+\n     pub fn rollback_to(&mut self, snapshot: Snapshot) {\n         self.assert_open_snapshot(&snapshot);\n         while self.undo_log.len() > snapshot.len + 1 {\n-            match self.undo_log.pop().unwrap() {\n-                UndoLog::OpenSnapshot => {\n-                    panic!(\"cannot rollback an uncommitted snapshot\");\n-                }\n-\n-                UndoLog::CommittedSnapshot => {}\n-\n-                UndoLog::Inserted(key) => {\n-                    self.map.remove(&key);\n-                }\n-\n-                UndoLog::Overwrite(key, old_value) => {\n-                    self.map.insert(key, old_value);\n-                }\n-            }\n+            let entry = self.undo_log.pop().unwrap();\n+            self.reverse(entry);\n         }\n \n         let v = self.undo_log.pop().unwrap();\n@@ -127,6 +134,26 @@ impl<K, V> SnapshotMap<K, V>\n         });\n         assert!(self.undo_log.len() == snapshot.len);\n     }\n+\n+    fn reverse(&mut self, entry: UndoLog<K, V>) {\n+        match entry {\n+            UndoLog::OpenSnapshot => {\n+                panic!(\"cannot rollback an uncommitted snapshot\");\n+            }\n+\n+            UndoLog::CommittedSnapshot => {}\n+\n+            UndoLog::Inserted(key) => {\n+                self.map.remove(&key);\n+            }\n+\n+            UndoLog::Overwrite(key, old_value) => {\n+                self.map.insert(key, old_value);\n+            }\n+\n+            UndoLog::Noop => {}\n+        }\n+    }\n }\n \n impl<'k, K, V> ops::Index<&'k K> for SnapshotMap<K, V>"}]}