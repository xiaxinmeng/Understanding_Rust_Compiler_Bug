{"sha": "48853a361a5ff0e8215301c62f259a26eed7aa72", "node_id": "C_kwDOAAsO6NoAKDQ4ODUzYTM2MWE1ZmYwZTgyMTUzMDFjNjJmMjU5YTI2ZWVkN2FhNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-20T17:38:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-20T17:38:29Z"}, "message": "Auto merge of #100809 - matthiaskrgr:rollup-xkpd5ii, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #99415 (Initial implementation of REUSE)\n - #99544 (Expose `Utf8Lossy` as `Utf8Chunks`)\n - #100585 (Fix trailing space showing up in example)\n - #100596 (Remove unnecessary stderr files)\n - #100642 (Update fortanix-sgx-abi and export some useful SGX usercall traits)\n - #100691 (Make `same_type_modulo_infer` a proper `TypeRelation`)\n - #100693 (Add LLVM15-specific codegen test for `try`/`?`s that now optimize away)\n - #100710 (Windows: Load synch functions together)\n - #100807 (Add TaKO8Ki to translation-related mention groups)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c489e6126995afb021a83e16c75797964e3d6983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c489e6126995afb021a83e16c75797964e3d6983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48853a361a5ff0e8215301c62f259a26eed7aa72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48853a361a5ff0e8215301c62f259a26eed7aa72", "html_url": "https://github.com/rust-lang/rust/commit/48853a361a5ff0e8215301c62f259a26eed7aa72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48853a361a5ff0e8215301c62f259a26eed7aa72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd01122b5c62a04e64b4109c5576eeea9ae4145b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd01122b5c62a04e64b4109c5576eeea9ae4145b", "html_url": "https://github.com/rust-lang/rust/commit/dd01122b5c62a04e64b4109c5576eeea9ae4145b"}, {"sha": "0be081976cba41453e61195a58c3dca097763549", "url": "https://api.github.com/repos/rust-lang/rust/commits/0be081976cba41453e61195a58c3dca097763549", "html_url": "https://github.com/rust-lang/rust/commit/0be081976cba41453e61195a58c3dca097763549"}], "stats": {"total": 1298, "additions": 946, "deletions": 352}, "files": [{"sha": "e040f73b9e1f7ecba73a62ac925c7bd45d2370af", "filename": ".reuse/dep5", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/.reuse%2Fdep5", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/.reuse%2Fdep5", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.reuse%2Fdep5?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,28 @@\n+Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\n+Files-Excluded:\n+ src/llvm-project\n+\n+Files: *\n+Copyright: The Rust Project Developers (see https://thanks.rust-lang.org)\n+License: MIT or Apache-2.0\n+\n+Files: library/std/src/sync/mpsc/mpsc_queue.rs\n+       library/std/src/sync/mpsc/spsc_queue.rs\n+Copyright: 2010-2011 Dmitry Vyukov\n+License: BSD-2-Clause\n+\n+Files: src/librustdoc/html/static/fonts/FiraSans*\n+Copyright: 2014, Mozilla Foundation, 2014, Telefonica S.A.\n+License: OFL-1.1\n+\n+Files: src/librustdoc/html/static/fonts/NanumBarun*\n+Copyright: 2010 NAVER Corporation\n+License: OFL-1.1\n+\n+Files: src/librustdoc/html/static/fonts/SourceCodePro*\n+Copyright: 2010, 2012 Adobe Systems Incorporated\n+License: OFL-1.1\n+\n+Files: src/librustdoc/html/static/fonts/SourceSerif4*\n+Copyright: 2014-2021 Adobe Systems Incorporated\n+License: OFL-1.1"}, {"sha": "293fc30903df063f6a47077ce405b9a6d8f10852", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -1421,9 +1421,9 @@ dependencies = [\n \n [[package]]\n name = \"fortanix-sgx-abi\"\n-version = \"0.3.3\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c56c422ef86062869b2d57ae87270608dc5929969dd130a6e248979cf4fb6ca6\"\n+checksum = \"57cafc2274c10fab234f176b25903ce17e690fca7597090d50880e047a0389c5\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "137069b823873b8bcf42979bcf8e9371052d26a2", "filename": "LICENSES/Apache-2.0.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FApache-2.0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FApache-2.0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSES%2FApache-2.0.txt?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,73 @@\n+Apache License\n+Version 2.0, January 2004\n+http://www.apache.org/licenses/\n+\n+TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+1. Definitions.\n+\n+\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n+\n+\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n+\n+\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n+\n+\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n+\n+\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n+\n+\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n+\n+\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n+\n+\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n+\n+2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n+\n+3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n+\n+4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n+\n+     (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n+\n+     (b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n+\n+     (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n+\n+     (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n+\n+     You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n+\n+5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n+\n+6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n+\n+7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n+\n+8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n+\n+9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n+\n+END OF TERMS AND CONDITIONS\n+\n+APPENDIX: How to apply the Apache License to your work.\n+\n+To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.\n+\n+Copyright [yyyy] [name of copyright owner]\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License."}, {"sha": "5f662b354cd40cd5339d5aa05d74b15405138230", "filename": "LICENSES/BSD-2-Clause.txt", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FBSD-2-Clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FBSD-2-Clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSES%2FBSD-2-Clause.txt?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,9 @@\n+Copyright (c) <year> <owner> \n+\n+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n+\n+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n+\n+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."}, {"sha": "2071b23b0e08594ea6bc99ac71129ef992abf498", "filename": "LICENSES/MIT.txt", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FMIT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FMIT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSES%2FMIT.txt?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,9 @@\n+MIT License\n+\n+Copyright (c) <year> <copyright holders>\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}, {"sha": "6fe84ee21ebe5d2b54dc63b53b4d5c404c083409", "filename": "LICENSES/OFL-1.1.txt", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FOFL-1.1.txt", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/LICENSES%2FOFL-1.1.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSES%2FOFL-1.1.txt?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,43 @@\n+SIL OPEN FONT LICENSE\n+\n+Version 1.1 - 26 February 2007\n+\n+PREAMBLE\n+\n+The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.\n+\n+The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.\n+\n+DEFINITIONS\n+\n+\"Font Software\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.\n+\n+\"Reserved Font Name\" refers to any names specified as such after the copyright statement(s).\n+\n+\"Original Version\" refers to the collection of Font Software components as distributed by the Copyright Holder(s).\n+\n+\"Modified Version\" refers to any derivative made by adding to, deleting, or substituting \u2014 in part or in whole \u2014 any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.\n+\n+\"Author\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.\n+\n+PERMISSION & CONDITIONS\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:\n+\n+1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.\n+\n+2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.\n+\n+3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.\n+\n+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.\n+\n+5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.\n+\n+TERMINATION\n+\n+This license becomes null and void if any of the above conditions are not met.\n+\n+DISCLAIMER\n+\n+THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE."}, {"sha": "8fb5f159136be5fbabbee0cd3b16e55dd2eefdb1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 79, "deletions": 53, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -66,6 +66,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n     self, error::TypeError, Binder, List, Region, Subst, Ty, TyCtxt, TypeFoldable,\n     TypeSuperVisitable, TypeVisitable,\n@@ -2661,67 +2662,92 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Float types, respectively). When comparing two ADTs, these rules apply recursively.\n     pub fn same_type_modulo_infer(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         let (a, b) = self.resolve_vars_if_possible((a, b));\n-        match (a.kind(), b.kind()) {\n-            (&ty::Adt(def_a, substs_a), &ty::Adt(def_b, substs_b)) => {\n-                if def_a != def_b {\n-                    return false;\n-                }\n+        SameTypeModuloInfer(self).relate(a, b).is_ok()\n+    }\n+}\n \n-                substs_a\n-                    .types()\n-                    .zip(substs_b.types())\n-                    .all(|(a, b)| self.same_type_modulo_infer(a, b))\n-            }\n-            (&ty::FnDef(did_a, substs_a), &ty::FnDef(did_b, substs_b)) => {\n-                if did_a != did_b {\n-                    return false;\n-                }\n+struct SameTypeModuloInfer<'a, 'tcx>(&'a InferCtxt<'a, 'tcx>);\n \n-                substs_a\n-                    .types()\n-                    .zip(substs_b.types())\n-                    .all(|(a, b)| self.same_type_modulo_infer(a, b))\n-            }\n-            (&ty::Int(_) | &ty::Uint(_), &ty::Infer(ty::InferTy::IntVar(_)))\n+impl<'tcx> TypeRelation<'tcx> for SameTypeModuloInfer<'_, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.0.tcx\n+    }\n+\n+    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n+        // Unused, only for consts which we treat as always equal\n+        ty::ParamEnv::empty()\n+    }\n+\n+    fn tag(&self) -> &'static str {\n+        \"SameTypeModuloInfer\"\n+    }\n+\n+    fn a_is_expected(&self) -> bool {\n+        true\n+    }\n+\n+    fn relate_with_variance<T: relate::Relate<'tcx>>(\n+        &mut self,\n+        _variance: ty::Variance,\n+        _info: ty::VarianceDiagInfo<'tcx>,\n+        a: T,\n+        b: T,\n+    ) -> relate::RelateResult<'tcx, T> {\n+        self.relate(a, b)\n+    }\n+\n+    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n+        match (a.kind(), b.kind()) {\n+            (ty::Int(_) | ty::Uint(_), ty::Infer(ty::InferTy::IntVar(_)))\n             | (\n-                &ty::Infer(ty::InferTy::IntVar(_)),\n-                &ty::Int(_) | &ty::Uint(_) | &ty::Infer(ty::InferTy::IntVar(_)),\n+                ty::Infer(ty::InferTy::IntVar(_)),\n+                ty::Int(_) | ty::Uint(_) | ty::Infer(ty::InferTy::IntVar(_)),\n             )\n-            | (&ty::Float(_), &ty::Infer(ty::InferTy::FloatVar(_)))\n+            | (ty::Float(_), ty::Infer(ty::InferTy::FloatVar(_)))\n             | (\n-                &ty::Infer(ty::InferTy::FloatVar(_)),\n-                &ty::Float(_) | &ty::Infer(ty::InferTy::FloatVar(_)),\n+                ty::Infer(ty::InferTy::FloatVar(_)),\n+                ty::Float(_) | ty::Infer(ty::InferTy::FloatVar(_)),\n             )\n-            | (&ty::Infer(ty::InferTy::TyVar(_)), _)\n-            | (_, &ty::Infer(ty::InferTy::TyVar(_))) => true,\n-            (&ty::Ref(_, ty_a, mut_a), &ty::Ref(_, ty_b, mut_b)) => {\n-                mut_a == mut_b && self.same_type_modulo_infer(ty_a, ty_b)\n-            }\n-            (&ty::RawPtr(a), &ty::RawPtr(b)) => {\n-                a.mutbl == b.mutbl && self.same_type_modulo_infer(a.ty, b.ty)\n-            }\n-            (&ty::Slice(a), &ty::Slice(b)) => self.same_type_modulo_infer(a, b),\n-            (&ty::Array(a_ty, a_ct), &ty::Array(b_ty, b_ct)) => {\n-                self.same_type_modulo_infer(a_ty, b_ty) && a_ct == b_ct\n-            }\n-            (&ty::Tuple(a), &ty::Tuple(b)) => {\n-                if a.len() != b.len() {\n-                    return false;\n-                }\n-                std::iter::zip(a.iter(), b.iter()).all(|(a, b)| self.same_type_modulo_infer(a, b))\n-            }\n-            (&ty::FnPtr(a), &ty::FnPtr(b)) => {\n-                let a = a.skip_binder().inputs_and_output;\n-                let b = b.skip_binder().inputs_and_output;\n-                if a.len() != b.len() {\n-                    return false;\n-                }\n-                std::iter::zip(a.iter(), b.iter()).all(|(a, b)| self.same_type_modulo_infer(a, b))\n-            }\n-            // FIXME(compiler-errors): This needs to be generalized more\n-            _ => a == b,\n+            | (ty::Infer(ty::InferTy::TyVar(_)), _)\n+            | (_, ty::Infer(ty::InferTy::TyVar(_))) => Ok(a),\n+            (ty::Infer(_), _) | (_, ty::Infer(_)) => Err(TypeError::Mismatch),\n+            _ => relate::super_relate_tys(self, a, b),\n         }\n     }\n+\n+    fn regions(\n+        &mut self,\n+        a: ty::Region<'tcx>,\n+        b: ty::Region<'tcx>,\n+    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n+        if (a.is_var() && b.is_free_or_static()) || (b.is_var() && a.is_free_or_static()) || a == b\n+        {\n+            Ok(a)\n+        } else {\n+            Err(TypeError::Mismatch)\n+        }\n+    }\n+\n+    fn binders<T>(\n+        &mut self,\n+        a: ty::Binder<'tcx, T>,\n+        b: ty::Binder<'tcx, T>,\n+    ) -> relate::RelateResult<'tcx, ty::Binder<'tcx, T>>\n+    where\n+        T: relate::Relate<'tcx>,\n+    {\n+        Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+    }\n+\n+    fn consts(\n+        &mut self,\n+        a: ty::Const<'tcx>,\n+        _b: ty::Const<'tcx>,\n+    ) -> relate::RelateResult<'tcx, ty::Const<'tcx>> {\n+        // FIXME(compiler-errors): This could at least do some first-order\n+        // relation\n+        Ok(a)\n+    }\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {"}, {"sha": "0070575f2136ac8e6c4a36ef4ff4fdaaf04806b3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -1617,6 +1617,10 @@ impl<'tcx> Region<'tcx> {\n             _ => self.is_free(),\n         }\n     }\n+\n+    pub fn is_var(self) -> bool {\n+        matches!(self.kind(), ty::ReVar(_))\n+    }\n }\n \n /// Type utilities"}, {"sha": "e10aaefebe6e4b1574957331c9ac5f061f5379e6", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -145,6 +145,7 @@\n #![feature(unchecked_math)]\n #![feature(unicode_internals)]\n #![feature(unsize)]\n+#![feature(utf8_chunks)]\n #![feature(std_internals)]\n //\n // Language features:"}, {"sha": "b94b1b1ce216a0630d402bfc97c65816fb5cca46", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -71,6 +71,8 @@ pub use core::str::{RSplit, Split};\n pub use core::str::{RSplitN, SplitN};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{RSplitTerminator, SplitTerminator};\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+pub use core::str::{Utf8Chunk, Utf8Chunks};\n \n /// Note: `str` in `Concat<str>` is not meaningful here.\n /// This type parameter of the trait only exists to enable another impl."}, {"sha": "7bee894d3e404e98840b289869460ced1ddb5a04", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -58,9 +58,9 @@ use core::ops::Bound::{Excluded, Included, Unbounded};\n use core::ops::{self, Index, IndexMut, Range, RangeBounds};\n use core::ptr;\n use core::slice;\n-#[cfg(not(no_global_oom_handling))]\n-use core::str::lossy;\n use core::str::pattern::Pattern;\n+#[cfg(not(no_global_oom_handling))]\n+use core::str::Utf8Chunks;\n \n #[cfg(not(no_global_oom_handling))]\n use crate::borrow::{Cow, ToOwned};\n@@ -628,11 +628,11 @@ impl String {\n     #[cfg(not(no_global_oom_handling))]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n-        let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();\n+        let mut iter = Utf8Chunks::new(v);\n \n         let first_valid = if let Some(chunk) = iter.next() {\n-            let lossy::Utf8LossyChunk { valid, broken } = chunk;\n-            if broken.is_empty() {\n+            let valid = chunk.valid();\n+            if chunk.invalid().is_empty() {\n                 debug_assert_eq!(valid.len(), v.len());\n                 return Cow::Borrowed(valid);\n             }\n@@ -647,9 +647,9 @@ impl String {\n         res.push_str(first_valid);\n         res.push_str(REPLACEMENT);\n \n-        for lossy::Utf8LossyChunk { valid, broken } in iter {\n-            res.push_str(valid);\n-            if !broken.is_empty() {\n+        for chunk in iter {\n+            res.push_str(chunk.valid());\n+            if !chunk.invalid().is_empty() {\n                 res.push_str(REPLACEMENT);\n             }\n         }"}, {"sha": "72b6dc28185404bce5fdcc17f148bb00f63935c7", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -623,7 +623,7 @@ impl u8 {\n     ///\n     /// - U+0021 ..= U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n     /// - U+003A ..= U+0040 `: ; < = > ? @`, or\n-    /// - U+005B ..= U+0060 ``[ \\ ] ^ _ ` ``, or\n+    /// - U+005B ..= U+0060 `` [ \\ ] ^ _ ` ``, or\n     /// - U+007B ..= U+007E `{ | } ~`\n     ///\n     /// # Examples"}, {"sha": "59f873d1268ce0cb1defb4de89a773c9062b0aeb", "filename": "library/core/src/str/lossy.rs", "status": "modified", "additions": 157, "deletions": 87, "changes": 244, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Flossy.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -1,51 +1,170 @@\n-use crate::char;\n-use crate::fmt::{self, Write};\n-use crate::mem;\n+use crate::fmt;\n+use crate::fmt::Formatter;\n+use crate::fmt::Write;\n+use crate::iter::FusedIterator;\n \n use super::from_utf8_unchecked;\n use super::validations::utf8_char_width;\n \n-/// Lossy UTF-8 string.\n-#[unstable(feature = \"str_internals\", issue = \"none\")]\n-pub struct Utf8Lossy {\n-    bytes: [u8],\n+/// An item returned by the [`Utf8Chunks`] iterator.\n+///\n+/// A `Utf8Chunk` stores a sequence of [`u8`] up to the first broken character\n+/// when decoding a UTF-8 string.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(utf8_chunks)]\n+///\n+/// use std::str::Utf8Chunks;\n+///\n+/// // An invalid UTF-8 string\n+/// let bytes = b\"foo\\xF1\\x80bar\";\n+///\n+/// // Decode the first `Utf8Chunk`\n+/// let chunk = Utf8Chunks::new(bytes).next().unwrap();\n+///\n+/// // The first three characters are valid UTF-8\n+/// assert_eq!(\"foo\", chunk.valid());\n+///\n+/// // The fourth character is broken\n+/// assert_eq!(b\"\\xF1\\x80\", chunk.invalid());\n+/// ```\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct Utf8Chunk<'a> {\n+    valid: &'a str,\n+    invalid: &'a [u8],\n }\n \n-impl Utf8Lossy {\n+impl<'a> Utf8Chunk<'a> {\n+    /// Returns the next validated UTF-8 substring.\n+    ///\n+    /// This substring can be empty at the start of the string or between\n+    /// broken UTF-8 characters.\n     #[must_use]\n-    pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {\n-        // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.\n-        unsafe { mem::transmute(bytes) }\n+    #[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+    pub fn valid(&self) -> &'a str {\n+        self.valid\n     }\n \n-    pub fn chunks(&self) -> Utf8LossyChunksIter<'_> {\n-        Utf8LossyChunksIter { source: &self.bytes }\n+    /// Returns the invalid sequence that caused a failure.\n+    ///\n+    /// The returned slice will have a maximum length of 3 and starts after the\n+    /// substring given by [`valid`]. Decoding will resume after this sequence.\n+    ///\n+    /// If empty, this is the last chunk in the string. If non-empty, an\n+    /// unexpected byte was encountered or the end of the input was reached\n+    /// unexpectedly.\n+    ///\n+    /// Lossy decoding would replace this sequence with [`U+FFFD REPLACEMENT\n+    /// CHARACTER`].\n+    ///\n+    /// [`valid`]: Self::valid\n+    /// [`U+FFFD REPLACEMENT CHARACTER`]: crate::char::REPLACEMENT_CHARACTER\n+    #[must_use]\n+    #[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+    pub fn invalid(&self) -> &'a [u8] {\n+        self.invalid\n     }\n }\n \n-/// Iterator over lossy UTF-8 string\n-#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n+#[must_use]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n+pub struct Debug<'a>(&'a [u8]);\n+\n #[unstable(feature = \"str_internals\", issue = \"none\")]\n-#[allow(missing_debug_implementations)]\n-pub struct Utf8LossyChunksIter<'a> {\n+impl fmt::Debug for Debug<'_> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        f.write_char('\"')?;\n+\n+        for chunk in Utf8Chunks::new(self.0) {\n+            // Valid part.\n+            // Here we partially parse UTF-8 again which is suboptimal.\n+            {\n+                let valid = chunk.valid();\n+                let mut from = 0;\n+                for (i, c) in valid.char_indices() {\n+                    let esc = c.escape_debug();\n+                    // If char needs escaping, flush backlog so far and write, else skip\n+                    if esc.len() != 1 {\n+                        f.write_str(&valid[from..i])?;\n+                        for c in esc {\n+                            f.write_char(c)?;\n+                        }\n+                        from = i + c.len_utf8();\n+                    }\n+                }\n+                f.write_str(&valid[from..])?;\n+            }\n+\n+            // Broken parts of string as hex escape.\n+            for &b in chunk.invalid() {\n+                write!(f, \"\\\\x{:02X}\", b)?;\n+            }\n+        }\n+\n+        f.write_char('\"')\n+    }\n+}\n+\n+/// An iterator used to decode a slice of mostly UTF-8 bytes to string slices\n+/// ([`&str`]) and byte slices ([`&[u8]`][byteslice]).\n+///\n+/// If you want a simple conversion from UTF-8 byte slices to string slices,\n+/// [`from_utf8`] is easier to use.\n+///\n+/// [byteslice]: slice\n+/// [`from_utf8`]: super::from_utf8\n+///\n+/// # Examples\n+///\n+/// This can be used to create functionality similar to\n+/// [`String::from_utf8_lossy`] without allocating heap memory:\n+///\n+/// ```\n+/// #![feature(utf8_chunks)]\n+///\n+/// use std::str::Utf8Chunks;\n+///\n+/// fn from_utf8_lossy<F>(input: &[u8], mut push: F) where F: FnMut(&str) {\n+///     for chunk in Utf8Chunks::new(input) {\n+///         push(chunk.valid());\n+///\n+///         if !chunk.invalid().is_empty() {\n+///             push(\"\\u{FFFD}\");\n+///         }\n+///     }\n+/// }\n+/// ```\n+///\n+/// [`String::from_utf8_lossy`]: ../../std/string/struct.String.html#method.from_utf8_lossy\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+#[derive(Clone)]\n+pub struct Utf8Chunks<'a> {\n     source: &'a [u8],\n }\n \n-#[unstable(feature = \"str_internals\", issue = \"none\")]\n-#[derive(PartialEq, Eq, Debug)]\n-pub struct Utf8LossyChunk<'a> {\n-    /// Sequence of valid chars.\n-    /// Can be empty between broken UTF-8 chars.\n-    pub valid: &'a str,\n-    /// Single broken char, empty if none.\n-    /// Empty iff iterator item is last.\n-    pub broken: &'a [u8],\n+impl<'a> Utf8Chunks<'a> {\n+    /// Creates a new iterator to decode the bytes.\n+    #[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+    pub fn new(bytes: &'a [u8]) -> Self {\n+        Self { source: bytes }\n+    }\n+\n+    #[doc(hidden)]\n+    #[unstable(feature = \"str_internals\", issue = \"none\")]\n+    pub fn debug(&self) -> Debug<'_> {\n+        Debug(self.source)\n+    }\n }\n \n-impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n-    type Item = Utf8LossyChunk<'a>;\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+impl<'a> Iterator for Utf8Chunks<'a> {\n+    type Item = Utf8Chunk<'a>;\n \n-    fn next(&mut self) -> Option<Utf8LossyChunk<'a>> {\n+    fn next(&mut self) -> Option<Utf8Chunk<'a>> {\n         if self.source.is_empty() {\n             return None;\n         }\n@@ -130,71 +249,22 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n \n         // SAFETY: `valid_up_to <= i` because it is only ever assigned via\n         // `valid_up_to = i` and `i` only increases.\n-        let (valid, broken) = unsafe { inspected.split_at_unchecked(valid_up_to) };\n+        let (valid, invalid) = unsafe { inspected.split_at_unchecked(valid_up_to) };\n \n-        Some(Utf8LossyChunk {\n+        Some(Utf8Chunk {\n             // SAFETY: All bytes up to `valid_up_to` are valid UTF-8.\n             valid: unsafe { from_utf8_unchecked(valid) },\n-            broken,\n+            invalid,\n         })\n     }\n }\n \n-impl fmt::Display for Utf8Lossy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // If we're the empty string then our iterator won't actually yield\n-        // anything, so perform the formatting manually\n-        if self.bytes.is_empty() {\n-            return \"\".fmt(f);\n-        }\n-\n-        for Utf8LossyChunk { valid, broken } in self.chunks() {\n-            // If we successfully decoded the whole chunk as a valid string then\n-            // we can return a direct formatting of the string which will also\n-            // respect various formatting flags if possible.\n-            if valid.len() == self.bytes.len() {\n-                assert!(broken.is_empty());\n-                return valid.fmt(f);\n-            }\n-\n-            f.write_str(valid)?;\n-            if !broken.is_empty() {\n-                f.write_char(char::REPLACEMENT_CHARACTER)?;\n-            }\n-        }\n-        Ok(())\n-    }\n-}\n-\n-impl fmt::Debug for Utf8Lossy {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_char('\"')?;\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+impl FusedIterator for Utf8Chunks<'_> {}\n \n-        for Utf8LossyChunk { valid, broken } in self.chunks() {\n-            // Valid part.\n-            // Here we partially parse UTF-8 again which is suboptimal.\n-            {\n-                let mut from = 0;\n-                for (i, c) in valid.char_indices() {\n-                    let esc = c.escape_debug();\n-                    // If char needs escaping, flush backlog so far and write, else skip\n-                    if esc.len() != 1 {\n-                        f.write_str(&valid[from..i])?;\n-                        for c in esc {\n-                            f.write_char(c)?;\n-                        }\n-                        from = i + c.len_utf8();\n-                    }\n-                }\n-                f.write_str(&valid[from..])?;\n-            }\n-\n-            // Broken parts of string as hex escape.\n-            for &b in broken {\n-                write!(f, \"\\\\x{:02x}\", b)?;\n-            }\n-        }\n-\n-        f.write_char('\"')\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+impl fmt::Debug for Utf8Chunks<'_> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"Utf8Chunks\").field(\"source\", &self.debug()).finish()\n     }\n }"}, {"sha": "e44e025aaf169de175343e98c5d8a0d6769dc8f7", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -22,9 +22,9 @@ use crate::slice::{self, SliceIndex};\n \n pub mod pattern;\n \n-#[unstable(feature = \"str_internals\", issue = \"none\")]\n-#[allow(missing_docs)]\n-pub mod lossy;\n+mod lossy;\n+#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]\n+pub use lossy::{Utf8Chunk, Utf8Chunks};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use converts::{from_utf8, from_utf8_unchecked};"}, {"sha": "59510d3cc2ae0e372771c966c56038fad7c81873", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -99,6 +99,7 @@\n #![feature(waker_getters)]\n #![feature(slice_flatten)]\n #![feature(provide_any)]\n+#![feature(utf8_chunks)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "9d3f0b65fdb942749795781a30b9c991a61b79f6", "filename": "library/core/tests/str_lossy.rs", "status": "modified", "additions": 69, "deletions": 69, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Ftests%2Fstr_lossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fcore%2Ftests%2Fstr_lossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fstr_lossy.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -1,85 +1,85 @@\n-use core::str::lossy::*;\n+use core::str::Utf8Chunks;\n \n #[test]\n fn chunks() {\n-    let mut iter = Utf8Lossy::from_bytes(b\"hello\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"hello\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n+    macro_rules! assert_chunks {\n+        ( $string:expr, $(($valid:expr, $invalid:expr)),* $(,)? ) => {{\n+            let mut iter = Utf8Chunks::new($string);\n+            $(\n+                let chunk = iter.next().expect(\"missing chunk\");\n+                assert_eq!($valid, chunk.valid());\n+                assert_eq!($invalid, chunk.invalid());\n+            )*\n+            assert_eq!(None, iter.next());\n+        }};\n+    }\n \n-    let mut iter = Utf8Lossy::from_bytes(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes()).chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-\n-    let mut iter = Utf8Lossy::from_bytes(b\"Hello\\xC2 There\\xFF Goodbye\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"Hello\", broken: b\"\\xC2\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \" There\", broken: b\"\\xFF\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \" Goodbye\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-\n-    let mut iter = Utf8Lossy::from_bytes(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"Hello\", broken: b\"\\xC0\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \" There\", broken: b\"\\xE6\\x83\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \" Goodbye\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-\n-    let mut iter = Utf8Lossy::from_bytes(b\"\\xF5foo\\xF5\\x80bar\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xF5\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"foo\", broken: b\"\\xF5\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"bar\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-\n-    let mut iter = Utf8Lossy::from_bytes(b\"\\xF1foo\\xF1\\x80bar\\xF1\\x80\\x80baz\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xF1\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"foo\", broken: b\"\\xF1\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"bar\", broken: b\"\\xF1\\x80\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"baz\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-\n-    let mut iter = Utf8Lossy::from_bytes(b\"\\xF4foo\\xF4\\x80bar\\xF4\\xBFbaz\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xF4\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"foo\", broken: b\"\\xF4\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"bar\", broken: b\"\\xF4\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xBF\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"baz\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-\n-    let mut iter = Utf8Lossy::from_bytes(b\"\\xF0\\x80\\x80\\x80foo\\xF0\\x90\\x80\\x80bar\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xF0\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"foo\\u{10000}bar\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n+    assert_chunks!(b\"hello\", (\"hello\", b\"\"));\n+    assert_chunks!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes(), (\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", b\"\"));\n+    assert_chunks!(\n+        b\"Hello\\xC2 There\\xFF Goodbye\",\n+        (\"Hello\", b\"\\xC2\"),\n+        (\" There\", b\"\\xFF\"),\n+        (\" Goodbye\", b\"\"),\n+    );\n+    assert_chunks!(\n+        b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\",\n+        (\"Hello\", b\"\\xC0\"),\n+        (\"\", b\"\\x80\"),\n+        (\" There\", b\"\\xE6\\x83\"),\n+        (\" Goodbye\", b\"\"),\n+    );\n+    assert_chunks!(\n+        b\"\\xF5foo\\xF5\\x80bar\",\n+        (\"\", b\"\\xF5\"),\n+        (\"foo\", b\"\\xF5\"),\n+        (\"\", b\"\\x80\"),\n+        (\"bar\", b\"\"),\n+    );\n+    assert_chunks!(\n+        b\"\\xF1foo\\xF1\\x80bar\\xF1\\x80\\x80baz\",\n+        (\"\", b\"\\xF1\"),\n+        (\"foo\", b\"\\xF1\\x80\"),\n+        (\"bar\", b\"\\xF1\\x80\\x80\"),\n+        (\"baz\", b\"\"),\n+    );\n+    assert_chunks!(\n+        b\"\\xF4foo\\xF4\\x80bar\\xF4\\xBFbaz\",\n+        (\"\", b\"\\xF4\"),\n+        (\"foo\", b\"\\xF4\\x80\"),\n+        (\"bar\", b\"\\xF4\"),\n+        (\"\", b\"\\xBF\"),\n+        (\"baz\", b\"\"),\n+    );\n+    assert_chunks!(\n+        b\"\\xF0\\x80\\x80\\x80foo\\xF0\\x90\\x80\\x80bar\",\n+        (\"\", b\"\\xF0\"),\n+        (\"\", b\"\\x80\"),\n+        (\"\", b\"\\x80\"),\n+        (\"\", b\"\\x80\"),\n+        (\"foo\\u{10000}bar\", b\"\"),\n+    );\n \n     // surrogates\n-    let mut iter = Utf8Lossy::from_bytes(b\"\\xED\\xA0\\x80foo\\xED\\xBF\\xBFbar\").chunks();\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xED\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xA0\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\x80\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"foo\", broken: b\"\\xED\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xBF\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"\", broken: b\"\\xBF\" }), iter.next());\n-    assert_eq!(Some(Utf8LossyChunk { valid: \"bar\", broken: b\"\" }), iter.next());\n-    assert_eq!(None, iter.next());\n-}\n-\n-#[test]\n-fn display() {\n-    assert_eq!(\n-        \"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\",\n-        &Utf8Lossy::from_bytes(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\").to_string()\n+    assert_chunks!(\n+        b\"\\xED\\xA0\\x80foo\\xED\\xBF\\xBFbar\",\n+        (\"\", b\"\\xED\"),\n+        (\"\", b\"\\xA0\"),\n+        (\"\", b\"\\x80\"),\n+        (\"foo\", b\"\\xED\"),\n+        (\"\", b\"\\xBF\"),\n+        (\"\", b\"\\xBF\"),\n+        (\"bar\", b\"\"),\n     );\n }\n \n #[test]\n fn debug() {\n     assert_eq!(\n-        \"\\\"Hello\\\\xc0\\\\x80 There\\\\xe6\\\\x83 Goodbye\\\\u{10d4ea}\\\"\",\n+        \"\\\"Hello\\\\xC0\\\\x80 There\\\\xE6\\\\x83 Goodbye\\\\u{10d4ea}\\\"\",\n         &format!(\n             \"{:?}\",\n-            Utf8Lossy::from_bytes(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\\xf4\\x8d\\x93\\xaa\")\n-        )\n+            Utf8Chunks::new(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\\xf4\\x8d\\x93\\xaa\").debug(),\n+        ),\n     );\n }"}, {"sha": "3da9565a86d78588282ca040d7a5e4a676f0b1a2", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -39,7 +39,7 @@ rand = \"0.7\"\n dlmalloc = { version = \"0.2.3\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]\n-fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n+fortanix-sgx-abi = { version = \"0.5.0\", features = ['rustc-dep-of-std'] }\n \n [target.'cfg(target_os = \"hermit\")'.dependencies]\n hermit-abi = { version = \"0.2.0\", features = ['rustc-dep-of-std'] }"}, {"sha": "8627be854225f5d69cb88fb7df2ecb4cd9cea75b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -258,6 +258,7 @@\n #![feature(staged_api)]\n #![feature(thread_local)]\n #![feature(try_blocks)]\n+#![feature(utf8_chunks)]\n //\n // Library features (core):\n #![feature(array_error_internals)]"}, {"sha": "da100b689db847f4080808e670c82ef7b26b9c4e", "filename": "library/std/src/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -26,6 +26,7 @@ pub mod usercalls {\n             free, insecure_time, launch_thread, read, read_alloc, send, wait, write,\n         };\n         pub use crate::sys::abi::usercalls::raw::{do_usercall, Usercalls as UsercallNrs};\n+        pub use crate::sys::abi::usercalls::raw::{Register, RegisterArgument, ReturnValue};\n \n         // fortanix-sgx-abi re-exports\n         pub use crate::sys::abi::usercalls::raw::Error;"}, {"sha": "fe8392f78cd1ed2241971e29a8c1e95f369f928c", "filename": "library/std/src/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -56,6 +56,8 @@ unsafe impl UserSafeSized for Usercall {}\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n unsafe impl UserSafeSized for Return {}\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+unsafe impl UserSafeSized for Cancel {}\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n unsafe impl<T: UserSafeSized> UserSafeSized for [T; 2] {}\n \n /// A type that can be represented in memory as one or more `UserSafeSized`s."}, {"sha": "e19e843267a909ce9ee61a65bb76a9575ea1c8a9", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -292,12 +292,17 @@ fn check_os_error(err: Result) -> i32 {\n     }\n }\n \n-trait FromSgxResult {\n+/// Translate the raw result of an SGX usercall.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait FromSgxResult {\n+    /// Return type\n     type Return;\n \n+    /// Translate the raw result of an SGX usercall.\n     fn from_sgx_result(self) -> IoResult<Self::Return>;\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T> FromSgxResult for (Result, T) {\n     type Return = T;\n \n@@ -310,6 +315,7 @@ impl<T> FromSgxResult for (Result, T) {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl FromSgxResult for Result {\n     type Return = ();\n "}, {"sha": "10c1456d4fd051265db52fecdb67545c8348dabe", "filename": "library/std/src/sys/sgx/abi/usercalls/raw.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fraw.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -37,14 +37,23 @@ pub unsafe fn do_usercall(\n     (a, b)\n }\n \n-type Register = u64;\n+/// A value passed or returned in a CPU register.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub type Register = u64;\n \n-trait RegisterArgument {\n+/// Translate a type from/to Register to be used as an argument.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait RegisterArgument {\n+    /// Translate a Register to Self.\n     fn from_register(_: Register) -> Self;\n+    /// Translate self to a Register.\n     fn into_register(self) -> Register;\n }\n \n-trait ReturnValue {\n+/// Translate a pair of Registers to the raw usercall return value.\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub trait ReturnValue {\n+    /// Translate a pair of Registers to the raw usercall return value.\n     fn from_registers(call: &'static str, regs: (Register, Register)) -> Self;\n }\n \n@@ -68,6 +77,7 @@ macro_rules! define_usercalls {\n \n macro_rules! define_ra {\n     (< $i:ident > $t:ty) => {\n+        #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n         impl<$i> RegisterArgument for $t {\n             fn from_register(a: Register) -> Self {\n                 a as _\n@@ -78,6 +88,7 @@ macro_rules! define_ra {\n         }\n     };\n     ($i:ty as $t:ty) => {\n+        #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n         impl RegisterArgument for $t {\n             fn from_register(a: Register) -> Self {\n                 a as $i as _\n@@ -88,6 +99,7 @@ macro_rules! define_ra {\n         }\n     };\n     ($t:ty) => {\n+        #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n         impl RegisterArgument for $t {\n             fn from_register(a: Register) -> Self {\n                 a as _\n@@ -112,6 +124,7 @@ define_ra!(usize as isize);\n define_ra!(<T> *const T);\n define_ra!(<T> *mut T);\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl RegisterArgument for bool {\n     fn from_register(a: Register) -> bool {\n         if a != 0 { true } else { false }\n@@ -121,6 +134,7 @@ impl RegisterArgument for bool {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: RegisterArgument> RegisterArgument for Option<NonNull<T>> {\n     fn from_register(a: Register) -> Option<NonNull<T>> {\n         NonNull::new(a as _)\n@@ -130,12 +144,14 @@ impl<T: RegisterArgument> RegisterArgument for Option<NonNull<T>> {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl ReturnValue for ! {\n     fn from_registers(call: &'static str, _regs: (Register, Register)) -> Self {\n         rtabort!(\"Usercall {call}: did not expect to be re-entered\");\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl ReturnValue for () {\n     fn from_registers(call: &'static str, usercall_retval: (Register, Register)) -> Self {\n         rtassert!(usercall_retval.0 == 0);\n@@ -144,13 +160,15 @@ impl ReturnValue for () {\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: RegisterArgument> ReturnValue for T {\n     fn from_registers(call: &'static str, usercall_retval: (Register, Register)) -> Self {\n         rtassert!(usercall_retval.1 == 0);\n         T::from_register(usercall_retval.0)\n     }\n }\n \n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n impl<T: RegisterArgument, U: RegisterArgument> ReturnValue for (T, U) {\n     fn from_registers(_call: &'static str, regs: (Register, Register)) -> Self {\n         (T::from_register(regs.0), U::from_register(regs.1))"}, {"sha": "017e2af29d4f4c0936801876706dc54373925610", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -11,7 +11,7 @@ use crate::str;\n use crate::sync::Arc;\n use crate::sys_common::{AsInner, IntoInner};\n \n-use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n+use core::str::Utf8Chunks;\n \n #[cfg(test)]\n #[path = \"../unix/os_str/tests.rs\"]\n@@ -29,26 +29,32 @@ pub struct Slice {\n }\n \n impl fmt::Debug for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Writes out a valid unicode string with the correct escape sequences\n-\n-        formatter.write_str(\"\\\"\")?;\n-        for Utf8LossyChunk { valid, broken } in Utf8Lossy::from_bytes(&self.inner).chunks() {\n-            for c in valid.chars().flat_map(|c| c.escape_debug()) {\n-                formatter.write_char(c)?\n-            }\n-\n-            for b in broken {\n-                write!(formatter, \"\\\\x{:02X}\", b)?;\n-            }\n-        }\n-        formatter.write_str(\"\\\"\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&Utf8Chunks::new(&self.inner).debug(), f)\n     }\n }\n \n impl fmt::Display for Slice {\n-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // If we're the empty string then our iterator won't actually yield\n+        // anything, so perform the formatting manually\n+        if self.inner.is_empty() {\n+            return \"\".fmt(f);\n+        }\n+\n+        for chunk in Utf8Chunks::new(&self.inner) {\n+            let valid = chunk.valid();\n+            // If we successfully decoded the whole chunk as a valid string then\n+            // we can return a direct formatting of the string which will also\n+            // respect various formatting flags if possible.\n+            if chunk.invalid().is_empty() {\n+                return valid.fmt(f);\n+            }\n+\n+            f.write_str(valid)?;\n+            f.write_char(char::REPLACEMENT_CHARACTER)?;\n+        }\n+        Ok(())\n     }\n }\n "}, {"sha": "22ba0c9235041fad2281af728d872f1eb184136d", "filename": "library/std/src/sys/unix/os_str/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -8,3 +8,11 @@ fn slice_debug_output() {\n \n     assert_eq!(output, expected);\n }\n+\n+#[test]\n+fn display() {\n+    assert_eq!(\n+        \"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\",\n+        Slice::from_u8_slice(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\").to_string(),\n+    );\n+}"}, {"sha": "ef3f6a9ba175545c9b10c1a72df432989feb6121", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -228,6 +228,8 @@ pub const IPV6_ADD_MEMBERSHIP: c_int = 12;\n pub const IPV6_DROP_MEMBERSHIP: c_int = 13;\n pub const MSG_PEEK: c_int = 0x2;\n \n+pub const LOAD_LIBRARY_SEARCH_SYSTEM32: u32 = 0x800;\n+\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct linger {\n@@ -1030,6 +1032,7 @@ extern \"system\" {\n     pub fn GetProcAddress(handle: HMODULE, name: LPCSTR) -> *mut c_void;\n     pub fn GetModuleHandleA(lpModuleName: LPCSTR) -> HMODULE;\n     pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n+    pub fn LoadLibraryExA(lplibfilename: *const i8, hfile: HANDLE, dwflags: u32) -> HINSTANCE;\n \n     pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);\n     pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n@@ -1250,21 +1253,16 @@ compat_fn_with_fallback! {\n     }\n }\n \n-compat_fn_with_fallback! {\n-    pub static SYNCH_API: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n-    #[allow(unused)]\n-    fn WakeByAddressSingle(Address: LPVOID) -> () {\n-        // This fallback is currently tightly coupled to its use in Parker::unpark.\n-        //\n-        // FIXME: If `WakeByAddressSingle` needs to be used anywhere other than\n-        // Parker::unpark then this fallback will be wrong and will need to be decoupled.\n-        crate::sys::windows::thread_parker::unpark_keyed_event(Address)\n-    }\n+compat_fn_optional! {\n+    crate::sys::compat::load_synch_functions();\n+    pub fn WaitOnAddress(\n+        Address: LPVOID,\n+        CompareAddress: LPVOID,\n+        AddressSize: SIZE_T,\n+        dwMilliseconds: DWORD\n+    );\n+    pub fn WakeByAddressSingle(Address: LPVOID);\n }\n-pub use crate::sys::compat::WaitOnAddress;\n-// Change exported name of `WakeByAddressSingle` to make the strange fallback\n-// behaviour clear.\n-pub use WakeByAddressSingle::call as wake_by_address_single_or_unpark_keyed_event;\n \n compat_fn_with_fallback! {\n     pub static NTDLL: &CStr = ansi_str!(\"ntdll\");"}, {"sha": "9c8ddc3aa1d256f6ecbd43d067b388c54c8129b9", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 69, "deletions": 52, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -21,6 +21,7 @@\n \n use crate::ffi::{c_void, CStr};\n use crate::ptr::NonNull;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::c;\n \n /// Helper macro for creating CStrs from literals and symbol names.\n@@ -74,6 +75,20 @@ impl Module {\n         NonNull::new(module).map(Self)\n     }\n \n+    /// Load the library (if not already loaded)\n+    ///\n+    /// # Safety\n+    ///\n+    /// The module must not be unloaded.\n+    pub unsafe fn load_system_library(name: &CStr) -> Option<Self> {\n+        let module = c::LoadLibraryExA(\n+            name.as_ptr(),\n+            crate::ptr::null_mut(),\n+            c::LOAD_LIBRARY_SEARCH_SYSTEM32,\n+        );\n+        NonNull::new(module).map(Self)\n+    }\n+\n     // Try to get the address of a function.\n     pub fn proc_address(self, name: &CStr) -> Option<NonNull<c_void>> {\n         // SAFETY:\n@@ -144,61 +159,63 @@ macro_rules! compat_fn_with_fallback {\n     )*)\n }\n \n-/// Optionally load `WaitOnAddress`.\n-/// Unlike the dynamic loading described above, this does not have a fallback.\n+/// Optionally loaded functions.\n ///\n-/// This is rexported from sys::c. You should prefer to import\n-/// from there in case this changes again in the future.\n-pub mod WaitOnAddress {\n-    use super::*;\n-    use crate::mem;\n-    use crate::ptr;\n-    use crate::sync::atomic::{AtomicBool, AtomicPtr, Ordering};\n-    use crate::sys::c;\n-\n-    static MODULE_NAME: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n-    static SYMBOL_NAME: &CStr = ansi_str!(\"WaitOnAddress\");\n-\n-    // WaitOnAddress function signature.\n-    type F = unsafe extern \"system\" fn(\n-        Address: c::LPVOID,\n-        CompareAddress: c::LPVOID,\n-        AddressSize: c::SIZE_T,\n-        dwMilliseconds: c::DWORD,\n-    );\n-\n-    // A place to store the loaded function atomically.\n-    static WAIT_ON_ADDRESS: AtomicPtr<c_void> = AtomicPtr::new(ptr::null_mut());\n-\n-    // We can skip trying to load again if we already tried.\n-    static LOAD_MODULE: AtomicBool = AtomicBool::new(true);\n-\n-    #[inline(always)]\n-    pub fn option() -> Option<F> {\n-        let f = WAIT_ON_ADDRESS.load(Ordering::Acquire);\n-        if !f.is_null() { Some(unsafe { mem::transmute(f) }) } else { try_load() }\n-    }\n+/// Actual loading of the function defers to $load_functions.\n+macro_rules! compat_fn_optional {\n+    ($load_functions:expr;\n+    $(\n+        $(#[$meta:meta])*\n+        $vis:vis fn $symbol:ident($($argname:ident: $argtype:ty),*) $(-> $rettype:ty)?;\n+    )+) => (\n+        $(\n+            pub mod $symbol {\n+                use super::*;\n+                use crate::ffi::c_void;\n+                use crate::mem;\n+                use crate::ptr::{self, NonNull};\n+                use crate::sync::atomic::{AtomicPtr, Ordering};\n+\n+                pub(in crate::sys) static PTR: AtomicPtr<c_void> = AtomicPtr::new(ptr::null_mut());\n+\n+                type F = unsafe extern \"system\" fn($($argtype),*) $(-> $rettype)?;\n+\n+                #[inline(always)]\n+                pub fn option() -> Option<F> {\n+                    let f = PTR.load(Ordering::Acquire);\n+                    if !f.is_null() { Some(unsafe { mem::transmute(f) }) } else { try_load() }\n+                }\n \n-    #[cold]\n-    fn try_load() -> Option<F> {\n-        if LOAD_MODULE.load(Ordering::Acquire) {\n-            // load the module\n-            let mut wait_on_address = None;\n-            if let Some(func) = try_load_inner() {\n-                WAIT_ON_ADDRESS.store(func.as_ptr(), Ordering::Release);\n-                wait_on_address = Some(unsafe { mem::transmute(func) });\n+                #[cold]\n+                fn try_load() -> Option<F> {\n+                    $load_functions;\n+                    NonNull::new(PTR.load(Ordering::Acquire)).map(|f| unsafe { mem::transmute(f) })\n+                }\n             }\n-            // Don't try to load the module again even if loading failed.\n-            LOAD_MODULE.store(false, Ordering::Release);\n-            wait_on_address\n-        } else {\n-            None\n-        }\n-    }\n+        )+\n+    )\n+}\n \n-    // In the future this could be a `try` block but until then I think it's a\n-    // little bit cleaner as a separate function.\n-    fn try_load_inner() -> Option<NonNull<c_void>> {\n-        unsafe { Module::new(MODULE_NAME)?.proc_address(SYMBOL_NAME) }\n+/// Load all needed functions from \"api-ms-win-core-synch-l1-2-0\".\n+pub(super) fn load_synch_functions() {\n+    fn try_load() -> Option<()> {\n+        const MODULE_NAME: &CStr = ansi_str!(\"api-ms-win-core-synch-l1-2-0\");\n+        const WAIT_ON_ADDRESS: &CStr = ansi_str!(\"WaitOnAddress\");\n+        const WAKE_BY_ADDRESS_SINGLE: &CStr = ansi_str!(\"WakeByAddressSingle\");\n+\n+        // Try loading the library and all the required functions.\n+        // If any step fails, then they all fail.\n+        let library = unsafe { Module::load_system_library(MODULE_NAME) }?;\n+        let wait_on_address = library.proc_address(WAIT_ON_ADDRESS)?;\n+        let wake_by_address_single = library.proc_address(WAKE_BY_ADDRESS_SINGLE)?;\n+\n+        c::WaitOnAddress::PTR.store(wait_on_address.as_ptr(), Ordering::Release);\n+        c::WakeByAddressSingle::PTR.store(wake_by_address_single.as_ptr(), Ordering::Release);\n+        Some(())\n     }\n+\n+    // Try to load the module but skip loading if a previous attempt failed.\n+    static LOAD_MODULE: AtomicBool = AtomicBool::new(true);\n+    let module_loaded = LOAD_MODULE.load(Ordering::Acquire) && try_load().is_some();\n+    LOAD_MODULE.store(module_loaded, Ordering::Release)\n }"}, {"sha": "2f7ae863b6a453b48e389671e24d932646b1668f", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -198,8 +198,18 @@ impl Parker {\n         // with park().\n         if self.state.swap(NOTIFIED, Release) == PARKED {\n             unsafe {\n-                // This calls either WakeByAddressSingle or unpark_keyed_event (see below).\n-                c::wake_by_address_single_or_unpark_keyed_event(self.ptr());\n+                if let Some(wake_by_address_single) = c::WakeByAddressSingle::option() {\n+                    wake_by_address_single(self.ptr());\n+                } else {\n+                    // If we run NtReleaseKeyedEvent before the waiting thread runs\n+                    // NtWaitForKeyedEvent, this (shortly) blocks until we can wake it up.\n+                    // If the waiting thread wakes up before we run NtReleaseKeyedEvent\n+                    // (e.g. due to a timeout), this blocks until we do wake up a thread.\n+                    // To prevent this thread from blocking indefinitely in that case,\n+                    // park_impl() will, after seeing the state set to NOTIFIED after\n+                    // waking up, call NtWaitForKeyedEvent again to unblock us.\n+                    c::NtReleaseKeyedEvent(keyed_event_handle(), self.ptr(), 0, ptr::null_mut());\n+                }\n             }\n         }\n     }\n@@ -209,19 +219,6 @@ impl Parker {\n     }\n }\n \n-// This function signature makes it compatible with c::WakeByAddressSingle\n-// so that it can be used as a fallback for that function.\n-pub unsafe extern \"C\" fn unpark_keyed_event(address: c::LPVOID) {\n-    // If we run NtReleaseKeyedEvent before the waiting thread runs\n-    // NtWaitForKeyedEvent, this (shortly) blocks until we can wake it up.\n-    // If the waiting thread wakes up before we run NtReleaseKeyedEvent\n-    // (e.g. due to a timeout), this blocks until we do wake up a thread.\n-    // To prevent this thread from blocking indefinitely in that case,\n-    // park_impl() will, after seeing the state set to NOTIFIED after\n-    // waking up, call NtWaitForKeyedEvent again to unblock us.\n-    c::NtReleaseKeyedEvent(keyed_event_handle(), address, 0, ptr::null_mut());\n-}\n-\n fn keyed_event_handle() -> c::HANDLE {\n     const INVALID: c::HANDLE = ptr::invalid_mut(!0);\n     static HANDLE: AtomicPtr<libc::c_void> = AtomicPtr::new(INVALID);"}, {"sha": "c6723d91c8bb4cd9632f52ec2a637783da620067", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -1,4 +1,7 @@\n FROM ubuntu:18.04\n+# FIXME: when bumping the version, remove the Python 3.6-specific changes in\n+# the reuse-requirements.in file, regenerate reuse-requirements.txt and remove\n+# this comment.\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n@@ -8,6 +11,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   curl \\\n   ca-certificates \\\n   python3 \\\n+  python3-pip \\\n+  python3-pkg-resources \\\n   git \\\n   cmake \\\n   sudo \\\n@@ -27,6 +32,9 @@ RUN npm install eslint@8.6.0 -g\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+COPY host-x86_64/mingw-check/reuse-requirements.txt /tmp/\n+RUN pip3 install --no-deps --require-hashes -r /tmp/reuse-requirements.txt\n+\n COPY host-x86_64/mingw-check/validate-toolstate.sh /scripts/\n COPY host-x86_64/mingw-check/validate-error-codes.sh /scripts/\n \n@@ -40,6 +48,7 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            python3 ../x.py doc --stage 0 library/test && \\\n            /scripts/validate-toolstate.sh && \\\n            /scripts/validate-error-codes.sh && \\\n+           reuse lint && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es6 ../src/librustdoc/html/static/js/*.js && \\\n            eslint -c ../src/librustdoc/html/static/.eslintrc.js ../src/librustdoc/html/static/js/*.js"}, {"sha": "4964f40aa39adaf30ae30d846d981655df2635e5", "filename": "src/ci/docker/host-x86_64/mingw-check/reuse-requirements.in", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Freuse-requirements.in", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Freuse-requirements.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Freuse-requirements.in?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,22 @@\n+# This is the template for reuse-requirements.txt.\n+#\n+# The pip-tools project is used to generate the file again. To install it, the\n+# recommended way is to:\n+#\n+# - Install pipx from https://github.com/pypa/pipx\n+# - Run `pipx install pip-tools`\n+#\n+# Once pip-tools is installed, run this command to regenerate the .txt file:\n+#\n+#    pip-compile --allow-unsafe --generate-hashes reuse-requirements.in\n+#\n+\n+reuse\n+\n+# Some packages dropped support for Python 3.6, which is the version used in\n+# this builder (due to Ubuntu 18.04). This should be removed once we bump the\n+# Ubuntu version of the builder.\n+jinja2 < 3.1\n+markupsafe < 2.1\n+requests < 2.28\n+setuptools < 59.7"}, {"sha": "10a5f73879082ce111af651a779a5c0c1bf2c2af", "filename": "src/ci/docker/host-x86_64/mingw-check/reuse-requirements.txt", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Freuse-requirements.txt", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Freuse-requirements.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Freuse-requirements.txt?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,145 @@\n+#\n+# This file is autogenerated by pip-compile with python 3.10\n+# To update, run:\n+#\n+#    pip-compile --allow-unsafe --generate-hashes reuse-requirements.in\n+#\n+binaryornot==0.4.4 \\\n+    --hash=sha256:359501dfc9d40632edc9fac890e19542db1a287bbcfa58175b66658392018061 \\\n+    --hash=sha256:b8b71173c917bddcd2c16070412e369c3ed7f0528926f70cac18a6c97fd563e4\n+    # via reuse\n+boolean-py==3.8 \\\n+    --hash=sha256:cc24e20f985d60cd4a3a5a1c0956dd12611159d32a75081dabd0c9ab981acaa4 \\\n+    --hash=sha256:d75da0fd0354425fa64f6bbc6cec6ae1485d0eec3447b73187ff8cbf9b572e26\n+    # via\n+    #   license-expression\n+    #   reuse\n+certifi==2022.6.15 \\\n+    --hash=sha256:84c85a9078b11105f04f3036a9482ae10e4621616db313fe045dd24743a0820d \\\n+    --hash=sha256:fe86415d55e84719d75f8b69414f6438ac3547d2078ab91b67e779ef69378412\n+    # via requests\n+chardet==5.0.0 \\\n+    --hash=sha256:0368df2bfd78b5fc20572bb4e9bb7fb53e2c094f60ae9993339e8671d0afb8aa \\\n+    --hash=sha256:d3e64f022d254183001eccc5db4040520c0f23b1a3f33d6413e099eb7f126557\n+    # via\n+    #   binaryornot\n+    #   python-debian\n+charset-normalizer==2.0.12 \\\n+    --hash=sha256:2857e29ff0d34db842cd7ca3230549d1a697f96ee6d3fb071cfa6c7393832597 \\\n+    --hash=sha256:6881edbebdb17b39b4eaaa821b438bf6eddffb4468cf344f09f89def34a8b1df\n+    # via requests\n+idna==3.3 \\\n+    --hash=sha256:84d9dd047ffa80596e0f246e2eab0b391788b0503584e8945f2368256d2735ff \\\n+    --hash=sha256:9d643ff0a55b762d5cdb124b8eaa99c66322e2157b69160bc32796e824360e6d\n+    # via requests\n+jinja2==3.0.3 \\\n+    --hash=sha256:077ce6014f7b40d03b47d1f1ca4b0fc8328a692bd284016f806ed0eaca390ad8 \\\n+    --hash=sha256:611bb273cd68f3b993fabdc4064fc858c5b47a973cb5aa7999ec1ba405c87cd7\n+    # via\n+    #   -r reuse-requirements.in\n+    #   reuse\n+license-expression==21.6.14 \\\n+    --hash=sha256:324246eed8e138b4139fefdc0e9dc4161d5075e3929e56983966d37298dca30e \\\n+    --hash=sha256:9de87a427c9a449eee7913472fb9ed03b63036295547369fdbf95f76a8b924b2\n+    # via\n+    #   -r reuse-requirements.in\n+    #   reuse\n+markupsafe==2.0.1 \\\n+    --hash=sha256:01a9b8ea66f1658938f65b93a85ebe8bc016e6769611be228d797c9d998dd298 \\\n+    --hash=sha256:023cb26ec21ece8dc3907c0e8320058b2e0cb3c55cf9564da612bc325bed5e64 \\\n+    --hash=sha256:0446679737af14f45767963a1a9ef7620189912317d095f2d9ffa183a4d25d2b \\\n+    --hash=sha256:04635854b943835a6ea959e948d19dcd311762c5c0c6e1f0e16ee57022669194 \\\n+    --hash=sha256:0717a7390a68be14b8c793ba258e075c6f4ca819f15edfc2a3a027c823718567 \\\n+    --hash=sha256:0955295dd5eec6cb6cc2fe1698f4c6d84af2e92de33fbcac4111913cd100a6ff \\\n+    --hash=sha256:0d4b31cc67ab36e3392bbf3862cfbadac3db12bdd8b02a2731f509ed5b829724 \\\n+    --hash=sha256:10f82115e21dc0dfec9ab5c0223652f7197feb168c940f3ef61563fc2d6beb74 \\\n+    --hash=sha256:168cd0a3642de83558a5153c8bd34f175a9a6e7f6dc6384b9655d2697312a646 \\\n+    --hash=sha256:1d609f577dc6e1aa17d746f8bd3c31aa4d258f4070d61b2aa5c4166c1539de35 \\\n+    --hash=sha256:1f2ade76b9903f39aa442b4aadd2177decb66525062db244b35d71d0ee8599b6 \\\n+    --hash=sha256:20dca64a3ef2d6e4d5d615a3fd418ad3bde77a47ec8a23d984a12b5b4c74491a \\\n+    --hash=sha256:2a7d351cbd8cfeb19ca00de495e224dea7e7d919659c2841bbb7f420ad03e2d6 \\\n+    --hash=sha256:2d7d807855b419fc2ed3e631034685db6079889a1f01d5d9dac950f764da3dad \\\n+    --hash=sha256:2ef54abee730b502252bcdf31b10dacb0a416229b72c18b19e24a4509f273d26 \\\n+    --hash=sha256:36bc903cbb393720fad60fc28c10de6acf10dc6cc883f3e24ee4012371399a38 \\\n+    --hash=sha256:37205cac2a79194e3750b0af2a5720d95f786a55ce7df90c3af697bfa100eaac \\\n+    --hash=sha256:3c112550557578c26af18a1ccc9e090bfe03832ae994343cfdacd287db6a6ae7 \\\n+    --hash=sha256:3dd007d54ee88b46be476e293f48c85048603f5f516008bee124ddd891398ed6 \\\n+    --hash=sha256:4296f2b1ce8c86a6aea78613c34bb1a672ea0e3de9c6ba08a960efe0b0a09047 \\\n+    --hash=sha256:47ab1e7b91c098ab893b828deafa1203de86d0bc6ab587b160f78fe6c4011f75 \\\n+    --hash=sha256:49e3ceeabbfb9d66c3aef5af3a60cc43b85c33df25ce03d0031a608b0a8b2e3f \\\n+    --hash=sha256:4dc8f9fb58f7364b63fd9f85013b780ef83c11857ae79f2feda41e270468dd9b \\\n+    --hash=sha256:4efca8f86c54b22348a5467704e3fec767b2db12fc39c6d963168ab1d3fc9135 \\\n+    --hash=sha256:53edb4da6925ad13c07b6d26c2a852bd81e364f95301c66e930ab2aef5b5ddd8 \\\n+    --hash=sha256:5855f8438a7d1d458206a2466bf82b0f104a3724bf96a1c781ab731e4201731a \\\n+    --hash=sha256:594c67807fb16238b30c44bdf74f36c02cdf22d1c8cda91ef8a0ed8dabf5620a \\\n+    --hash=sha256:5b6d930f030f8ed98e3e6c98ffa0652bdb82601e7a016ec2ab5d7ff23baa78d1 \\\n+    --hash=sha256:5bb28c636d87e840583ee3adeb78172efc47c8b26127267f54a9c0ec251d41a9 \\\n+    --hash=sha256:60bf42e36abfaf9aff1f50f52644b336d4f0a3fd6d8a60ca0d054ac9f713a864 \\\n+    --hash=sha256:611d1ad9a4288cf3e3c16014564df047fe08410e628f89805e475368bd304914 \\\n+    --hash=sha256:6300b8454aa6930a24b9618fbb54b5a68135092bc666f7b06901f897fa5c2fee \\\n+    --hash=sha256:63f3268ba69ace99cab4e3e3b5840b03340efed0948ab8f78d2fd87ee5442a4f \\\n+    --hash=sha256:6557b31b5e2c9ddf0de32a691f2312a32f77cd7681d8af66c2692efdbef84c18 \\\n+    --hash=sha256:693ce3f9e70a6cf7d2fb9e6c9d8b204b6b39897a2c4a1aa65728d5ac97dcc1d8 \\\n+    --hash=sha256:6a7fae0dd14cf60ad5ff42baa2e95727c3d81ded453457771d02b7d2b3f9c0c2 \\\n+    --hash=sha256:6c4ca60fa24e85fe25b912b01e62cb969d69a23a5d5867682dd3e80b5b02581d \\\n+    --hash=sha256:6fcf051089389abe060c9cd7caa212c707e58153afa2c649f00346ce6d260f1b \\\n+    --hash=sha256:7d91275b0245b1da4d4cfa07e0faedd5b0812efc15b702576d103293e252af1b \\\n+    --hash=sha256:89c687013cb1cd489a0f0ac24febe8c7a666e6e221b783e53ac50ebf68e45d86 \\\n+    --hash=sha256:8d206346619592c6200148b01a2142798c989edcb9c896f9ac9722a99d4e77e6 \\\n+    --hash=sha256:905fec760bd2fa1388bb5b489ee8ee5f7291d692638ea5f67982d968366bef9f \\\n+    --hash=sha256:97383d78eb34da7e1fa37dd273c20ad4320929af65d156e35a5e2d89566d9dfb \\\n+    --hash=sha256:984d76483eb32f1bcb536dc27e4ad56bba4baa70be32fa87152832cdd9db0833 \\\n+    --hash=sha256:99df47edb6bda1249d3e80fdabb1dab8c08ef3975f69aed437cb69d0a5de1e28 \\\n+    --hash=sha256:9f02365d4e99430a12647f09b6cc8bab61a6564363f313126f775eb4f6ef798e \\\n+    --hash=sha256:a30e67a65b53ea0a5e62fe23682cfe22712e01f453b95233b25502f7c61cb415 \\\n+    --hash=sha256:ab3ef638ace319fa26553db0624c4699e31a28bb2a835c5faca8f8acf6a5a902 \\\n+    --hash=sha256:aca6377c0cb8a8253e493c6b451565ac77e98c2951c45f913e0b52facdcff83f \\\n+    --hash=sha256:add36cb2dbb8b736611303cd3bfcee00afd96471b09cda130da3581cbdc56a6d \\\n+    --hash=sha256:b2f4bf27480f5e5e8ce285a8c8fd176c0b03e93dcc6646477d4630e83440c6a9 \\\n+    --hash=sha256:b7f2d075102dc8c794cbde1947378051c4e5180d52d276987b8d28a3bd58c17d \\\n+    --hash=sha256:baa1a4e8f868845af802979fcdbf0bb11f94f1cb7ced4c4b8a351bb60d108145 \\\n+    --hash=sha256:be98f628055368795d818ebf93da628541e10b75b41c559fdf36d104c5787066 \\\n+    --hash=sha256:bf5d821ffabf0ef3533c39c518f3357b171a1651c1ff6827325e4489b0e46c3c \\\n+    --hash=sha256:c47adbc92fc1bb2b3274c4b3a43ae0e4573d9fbff4f54cd484555edbf030baf1 \\\n+    --hash=sha256:cdfba22ea2f0029c9261a4bd07e830a8da012291fbe44dc794e488b6c9bb353a \\\n+    --hash=sha256:d6c7ebd4e944c85e2c3421e612a7057a2f48d478d79e61800d81468a8d842207 \\\n+    --hash=sha256:d7f9850398e85aba693bb640262d3611788b1f29a79f0c93c565694658f4071f \\\n+    --hash=sha256:d8446c54dc28c01e5a2dbac5a25f071f6653e6e40f3a8818e8b45d790fe6ef53 \\\n+    --hash=sha256:deb993cacb280823246a026e3b2d81c493c53de6acfd5e6bfe31ab3402bb37dd \\\n+    --hash=sha256:e0f138900af21926a02425cf736db95be9f4af72ba1bb21453432a07f6082134 \\\n+    --hash=sha256:e9936f0b261d4df76ad22f8fee3ae83b60d7c3e871292cd42f40b81b70afae85 \\\n+    --hash=sha256:f0567c4dc99f264f49fe27da5f735f414c4e7e7dd850cfd8e69f0862d7c74ea9 \\\n+    --hash=sha256:f5653a225f31e113b152e56f154ccbe59eeb1c7487b39b9d9f9cdb58e6c79dc5 \\\n+    --hash=sha256:f826e31d18b516f653fe296d967d700fddad5901ae07c622bb3705955e1faa94 \\\n+    --hash=sha256:f8ba0e8349a38d3001fae7eadded3f6606f0da5d748ee53cc1dab1d6527b9509 \\\n+    --hash=sha256:f9081981fe268bd86831e5c75f7de206ef275defcb82bc70740ae6dc507aee51 \\\n+    --hash=sha256:fa130dd50c57d53368c9d59395cb5526eda596d3ffe36666cd81a44d56e48872\n+    # via\n+    #   -r reuse-requirements.in\n+    #   jinja2\n+python-debian==0.1.44 \\\n+    --hash=sha256:11bd6f01c46da57982bdd66dd595e2d240feb32a85de3fd37c452102fd0337ab \\\n+    --hash=sha256:65592fe3b64f6c6c93d94e2d2599db5e0c22831d3bcff07cb7b96d3840b1333e\n+    # via reuse\n+requests==2.26.0 \\\n+    --hash=sha256:6c1246513ecd5ecd4528a0906f910e8f0f9c6b8ec72030dc9fd154dc1a6efd24 \\\n+    --hash=sha256:b8aa58f8cf793ffd8782d3d8cb19e66ef36f7aba4353eec859e74678b01b07a7\n+    # via\n+    #   -r reuse-requirements.in\n+    #   reuse\n+reuse==1.0.0 \\\n+    --hash=sha256:db3022be2d87f69c8f508b928023de3026f454ce17d01e22f770f7147ac1e8d4 \\\n+    --hash=sha256:e2605e796311c424465d741ea2a1e1ad03bbb90b921d74750119c331ca5af46e\n+    # via -r reuse-requirements.in\n+urllib3==1.26.10 \\\n+    --hash=sha256:8298d6d56d39be0e3bc13c1c97d133f9b45d797169a0e11cdd0e0489d786f7ec \\\n+    --hash=sha256:879ba4d1e89654d9769ce13121e0f94310ea32e8d2f8cf587b77c08bbcdb30d6\n+    # via requests\n+\n+# The following packages are considered to be unsafe in a requirements file:\n+setuptools==59.6.0 \\\n+    --hash=sha256:22c7348c6d2976a52632c67f7ab0cdf40147db7789f9aed18734643fe9cf3373 \\\n+    --hash=sha256:4ce92f1e1f8f01233ee9952c04f6b81d1e02939d6e1b488428154974a4d0783e\n+    # via\n+    #   -r reuse-requirements.in\n+    #   reuse"}, {"sha": "d239387768e6b9fec95d21dc86b0fad4908b0e0d", "filename": "src/test/codegen/try_question_mark_nop.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Ftest%2Fcodegen%2Ftry_question_mark_nop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Ftest%2Fcodegen%2Ftry_question_mark_nop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftry_question_mark_nop.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,54 @@\n+// min-llvm-version: 15.0\n+// compile-flags: -O -Z merge-functions=disabled --edition=2021\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+#![feature(try_blocks)]\n+\n+// These are now NOPs in LLVM 15, presumably thanks to nikic's change mentioned in\n+// <https://github.com/rust-lang/rust/issues/85133#issuecomment-1072168354>.\n+// Unfortunately, as of 2022-08-17 they're not yet nops for `u64`s nor `Option`.\n+\n+use std::ops::ControlFlow::{self, Continue, Break};\n+\n+// CHECK-LABEL: @result_nop_match_32\n+#[no_mangle]\n+pub fn result_nop_match_32(x: Result<i32, u32>) -> Result<i32, u32> {\n+    // CHECK: start\n+    // CHECK-NEXT: ret i64 %0\n+    match x {\n+        Ok(x) => Ok(x),\n+        Err(x) => Err(x),\n+    }\n+}\n+\n+// CHECK-LABEL: @result_nop_traits_32\n+#[no_mangle]\n+pub fn result_nop_traits_32(x: Result<i32, u32>) -> Result<i32, u32> {\n+    // CHECK: start\n+    // CHECK-NEXT: ret i64 %0\n+    try {\n+        x?\n+    }\n+}\n+\n+// CHECK-LABEL: @control_flow_nop_match_32\n+#[no_mangle]\n+pub fn control_flow_nop_match_32(x: ControlFlow<i32, u32>) -> ControlFlow<i32, u32> {\n+    // CHECK: start\n+    // CHECK-NEXT: ret i64 %0\n+    match x {\n+        Continue(x) => Continue(x),\n+        Break(x) => Break(x),\n+    }\n+}\n+\n+// CHECK-LABEL: @control_flow_nop_traits_32\n+#[no_mangle]\n+pub fn control_flow_nop_traits_32(x: ControlFlow<i32, u32>) -> ControlFlow<i32, u32> {\n+    // CHECK: start\n+    // CHECK-NEXT: ret i64 %0\n+    try {\n+        x?\n+    }\n+}"}, {"sha": "8b2b87223a58a2d5d473d8bb0d3afeedde9a5857", "filename": "src/test/ui/associated-types/higher-ranked-projection.badbase.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr?ref=dd01122b5c62a04e64b4109c5576eeea9ae4145b", "patch": "@@ -1,17 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/higher-ranked-projection.rs:25:5\n-   |\n-LL |     foo(());\n-   |     ^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected reference `&'a ()`\n-              found reference `&()`\n-note: the lifetime requirement is introduced here\n-  --> $DIR/higher-ranked-projection.rs:16:33\n-   |\n-LL |     where for<'a> &'a T: Mirror<Image=U>\n-   |                                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "217392aa35b15967ede005455b3e0f328ce14506", "filename": "src/test/ui/associated-types/higher-ranked-projection.badnll.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr?ref=dd01122b5c62a04e64b4109c5576eeea9ae4145b", "patch": "@@ -1,2 +0,0 @@\n-error: unknown debugging option: `borrowck`\n-"}, {"sha": "5599cd410baadd8e734d6d0e48120b4ea0b48b27", "filename": "src/test/ui/implied-bounds/issue-100690.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-100690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-100690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-100690.rs?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,45 @@\n+// This code (probably) _should_ compile, but it currently does not because we\n+// are not smart enough about implied bounds.\n+\n+use std::io;\n+\n+fn real_dispatch<T, F>(f: F) -> Result<(), io::Error>\n+//~^ NOTE required by a bound in this\n+where\n+    F: FnOnce(&mut UIView<T>) -> Result<(), io::Error> + Send + 'static,\n+    //~^ NOTE required by this bound in `real_dispatch`\n+    //~| NOTE required by a bound in `real_dispatch`\n+{\n+    todo!()\n+}\n+\n+#[derive(Debug)]\n+struct UIView<'a, T: 'a> {\n+    _phantom: std::marker::PhantomData<&'a mut T>,\n+}\n+\n+trait Handle<'a, T: 'a, V, R> {\n+    fn dispatch<F>(&self, f: F) -> Result<(), io::Error>\n+    where\n+        F: FnOnce(&mut V) -> R + Send + 'static;\n+}\n+\n+#[derive(Debug, Clone)]\n+struct TUIHandle<T> {\n+    _phantom: std::marker::PhantomData<T>,\n+}\n+\n+impl<'a, T: 'a> Handle<'a, T, UIView<'a, T>, Result<(), io::Error>> for TUIHandle<T> {\n+    fn dispatch<F>(&self, f: F) -> Result<(), io::Error>\n+    where\n+        F: FnOnce(&mut UIView<'a, T>) -> Result<(), io::Error> + Send + 'static,\n+    {\n+        real_dispatch(f)\n+        //~^ ERROR expected a `FnOnce<(&mut UIView<'_, T>,)>` closure, found `F`\n+        //~| NOTE expected an `FnOnce<(&mut UIView<'_, T>,)>` closure, found `F`\n+        //~| NOTE expected a closure with arguments\n+        //~| NOTE required by a bound introduced by this call\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3f6af70d8ed932fce4fe851280ec6b46ddc90469", "filename": "src/test/ui/implied-bounds/issue-100690.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-100690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-100690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-100690.stderr?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: expected a `FnOnce<(&mut UIView<'_, T>,)>` closure, found `F`\n+  --> $DIR/issue-100690.rs:37:23\n+   |\n+LL |         real_dispatch(f)\n+   |         ------------- ^ expected an `FnOnce<(&mut UIView<'_, T>,)>` closure, found `F`\n+   |         |\n+   |         required by a bound introduced by this call\n+   |\n+   = note: expected a closure with arguments `(&mut UIView<'a, T>,)`\n+              found a closure with arguments `(&mut UIView<'_, T>,)`\n+note: required by a bound in `real_dispatch`\n+  --> $DIR/issue-100690.rs:9:8\n+   |\n+LL | fn real_dispatch<T, F>(f: F) -> Result<(), io::Error>\n+   |    ------------- required by a bound in this\n+...\n+LL |     F: FnOnce(&mut UIView<T>) -> Result<(), io::Error> + Send + 'static,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `real_dispatch`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "217392aa35b15967ede005455b3e0f328ce14506", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nllleak.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllleak.stderr?ref=dd01122b5c62a04e64b4109c5576eeea9ae4145b", "patch": "@@ -1,2 +0,0 @@\n-error: unknown debugging option: `borrowck`\n-"}, {"sha": "217392aa35b15967ede005455b3e0f328ce14506", "filename": "src/test/ui/lub-glb/old-lub-glb-hr-noteq1.nllnoleak.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllnoleak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd01122b5c62a04e64b4109c5576eeea9ae4145b/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllnoleak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr-noteq1.nllnoleak.stderr?ref=dd01122b5c62a04e64b4109c5576eeea9ae4145b", "patch": "@@ -1,2 +0,0 @@\n-error: unknown debugging option: `borrowck`\n-"}, {"sha": "8a90bc0e3c143c91f8d9ca8c2cc87e396da1ef11", "filename": "triagebot.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48853a361a5ff0e8215301c62f259a26eed7aa72/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/48853a361a5ff0e8215301c62f259a26eed7aa72/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=48853a361a5ff0e8215301c62f259a26eed7aa72", "patch": "@@ -362,12 +362,12 @@ cc = [\"@oli-obk\", \"@RalfJung\", \"@JakobDegen\", \"@davidtwco\", \"@celinval\", \"@vakar\n \n [mentions.\"compiler/rustc_error_messages\"]\n message = \"`rustc_error_messages` was changed\"\n-cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\"]\n+cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\", \"@TaKO8Ki\"]\n \n [mentions.\"compiler/rustc_errors/src/translation.rs\"]\n message = \"`rustc_errors::translation` was changed\"\n-cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\"]\n+cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\", \"@TaKO8Ki\"]\n \n [mentions.\"compiler/rustc_macros/src/diagnostics\"]\n message = \"`rustc_macros::diagnostics` was changed\"\n-cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\"]\n+cc = [\"@davidtwco\", \"@compiler-errors\", \"@JohnTitor\", \"@estebank\", \"@TaKO8Ki\"]"}]}