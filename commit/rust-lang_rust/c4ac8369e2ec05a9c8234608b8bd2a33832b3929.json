{"sha": "c4ac8369e2ec05a9c8234608b8bd2a33832b3929", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWM4MzY5ZTJlYzA1YTljODIzNDYwOGI4YmQyYTMzODMyYjM5Mjk=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-15T04:54:18Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-15T07:57:50Z"}, "message": "PR feedback", "tree": {"sha": "bcbac4cac54bbe63d35737e8656e49ce21271f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcbac4cac54bbe63d35737e8656e49ce21271f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ac8369e2ec05a9c8234608b8bd2a33832b3929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ac8369e2ec05a9c8234608b8bd2a33832b3929", "html_url": "https://github.com/rust-lang/rust/commit/c4ac8369e2ec05a9c8234608b8bd2a33832b3929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ac8369e2ec05a9c8234608b8bd2a33832b3929/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c3774eec4947c1bffbf7c374119ea2b46f96960", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3774eec4947c1bffbf7c374119ea2b46f96960", "html_url": "https://github.com/rust-lang/rust/commit/6c3774eec4947c1bffbf7c374119ea2b46f96960"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "eaa6ce82906b3e5f9b5427841d3dfde9bf307b28", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c4ac8369e2ec05a9c8234608b8bd2a33832b3929/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ac8369e2ec05a9c8234608b8bd2a33832b3929/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=c4ac8369e2ec05a9c8234608b8bd2a33832b3929", "patch": "@@ -29,6 +29,10 @@ pub trait Delegate<'tcx> {\n     // The value found at `place` is moved, depending\n     // on `mode`. Where `diag_expr_id` is the id used for diagnostics for `place`.\n     //\n+    // Use of a `Copy` type in a ByValue context is considered a use\n+    // by `ImmBorrow` and `borrow` is called instead.\n+    //\n+    //\n     // The parameter `diag_expr_id` indicates the HIR id that ought to be used for\n     // diagnostics. Around pattern matching such as `let pat = expr`, the diagnostic\n     // id will be the id of the expression `expr` but the place itself will have\n@@ -134,16 +138,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn delegate_consume(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n-        debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n-\n-        let mode = copy_or_move(&self.mc, place_with_id);\n-\n-        match mode {\n-            ConsumeMode::Move => self.delegate.consume(place_with_id, diag_expr_id),\n-            ConsumeMode::Copy => {\n-                self.delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n-            }\n-        }\n+        delegate_consume(&self.mc, self.delegate, place_with_id, diag_expr_id)\n     }\n \n     fn consume_exprs(&mut self, exprs: &[hir::Expr<'_>]) {\n@@ -653,15 +648,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         }\n                         ty::BindByValue(..) => {\n                             debug!(\"walk_pat binding consuming pat\");\n-                            let mode = copy_or_move(mc, &place);\n-                            match mode {\n-                                ConsumeMode::Move => delegate.consume(place, discr_place.hir_id),\n-                                ConsumeMode::Copy => delegate.borrow(\n-                                    place,\n-                                    discr_place.hir_id,\n-                                    ty::BorrowKind::ImmBorrow,\n-                                ),\n-                            }\n+                            delegate_consume(mc, *delegate, place, discr_place.hir_id);\n                         }\n                     }\n                 }\n@@ -808,3 +795,23 @@ fn copy_or_move<'a, 'tcx>(\n         ConsumeMode::Copy\n     }\n }\n+\n+// - If a place is used in a `ByValue` context then move it if it's not a `Copy` type.\n+// - If the place that is a `Copy` type consider it a `ImmBorrow`.\n+fn delegate_consume<'a, 'tcx>(\n+    mc: &mc::MemCategorizationContext<'a, 'tcx>,\n+    delegate: &mut (dyn Delegate<'tcx> + 'a),\n+    place_with_id: &PlaceWithHirId<'tcx>,\n+    diag_expr_id: hir::HirId,\n+) {\n+    debug!(\"delegate_consume(place_with_id={:?})\", place_with_id);\n+\n+    let mode = copy_or_move(&mc, place_with_id);\n+\n+    match mode {\n+        ConsumeMode::Move => delegate.consume(place_with_id, diag_expr_id),\n+        ConsumeMode::Copy => {\n+            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n+        }\n+    }\n+}"}]}