{"sha": "1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "node_id": "C_kwDOAAsO6NoAKDEwNDJiNWRmOWJiZmEyOWU4N2MwOWVkYjU0YWFlYjY2NzMzNmQxYjQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-07T08:32:12Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-07T08:32:12Z"}, "message": "Avoid some manual slice length calculation\n\nNo need for us to write the multiplication when `size_of_val` does exactly what we need.", "tree": {"sha": "f23f8e923fdd098bac0163a295cce9d7e641dd9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23f8e923fdd098bac0163a295cce9d7e641dd9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "html_url": "https://github.com/rust-lang/rust/commit/1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1042b5df9bbfa29e87c09edb54aaeb667336d1b4/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6edd3f15f75f0df70027edee2a520820d14217", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6edd3f15f75f0df70027edee2a520820d14217", "html_url": "https://github.com/rust-lang/rust/commit/7f6edd3f15f75f0df70027edee2a520820d14217"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "9c6d48675a6b1ada6dbc5d3b09b4152f75db411e", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1042b5df9bbfa29e87c09edb54aaeb667336d1b4/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1042b5df9bbfa29e87c09edb54aaeb667336d1b4/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "patch": "@@ -1241,13 +1241,9 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n     pub fn slice_as_bytes(this: &[MaybeUninit<T>]) -> &[MaybeUninit<u8>] {\n+        let bytes = mem::size_of_val(this);\n         // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n-        unsafe {\n-            slice::from_raw_parts(\n-                this.as_ptr() as *const MaybeUninit<u8>,\n-                this.len() * mem::size_of::<T>(),\n-            )\n-        }\n+        unsafe { slice::from_raw_parts(this.as_ptr() as *const MaybeUninit<u8>, bytes) }\n     }\n \n     /// Returns the contents of this mutable slice of `MaybeUninit` as a mutable slice of\n@@ -1274,13 +1270,9 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n     pub fn slice_as_bytes_mut(this: &mut [MaybeUninit<T>]) -> &mut [MaybeUninit<u8>] {\n+        let bytes = mem::size_of_val(this);\n         // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n-        unsafe {\n-            slice::from_raw_parts_mut(\n-                this.as_mut_ptr() as *mut MaybeUninit<u8>,\n-                this.len() * mem::size_of::<T>(),\n-            )\n-        }\n+        unsafe { slice::from_raw_parts_mut(this.as_mut_ptr() as *mut MaybeUninit<u8>, bytes) }\n     }\n }\n "}]}