{"sha": "daf2204aa4954a9426cee93eb1baa2b26eb69070", "node_id": "C_kwDOAAsO6NoAKGRhZjIyMDRhYTQ5NTRhOTQyNmNlZTkzZWIxYmFhMmIyNmViNjkwNzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T21:23:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T21:23:37Z"}, "message": "Auto merge of #91837 - Kobzol:stable-hash-map-avoid-sort, r=the8472\n\nAvoid sorting in hash map stable hashing\n\nSuggested by `@the8472` [here](https://github.com/rust-lang/rust/pull/89404#issuecomment-991813333). I hope that I understood it right, I replaced the sort with modular multiplication, which should be commutative.\n\nCan I ask for a perf. run? However, locally it didn't help at all. Creating the `StableHasher` all over again is probably slowing it down quite a lot. And using `FxHasher` is not straightforward, because the keys and values only implement `HashStable` (and probably they shouldn't be just hashed via `Hash` anyway for it to actually be stable).\n\nMaybe the `StableHash` interface could be changed somehow to better suppor these scenarios where the hasher is short-lived. Or the `StableHasher` implementation could have variants with e.g. a shorter buffer for these scenarios.", "tree": {"sha": "c216ecab68b04a59d4aec7fb65c6a63af718fe0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c216ecab68b04a59d4aec7fb65c6a63af718fe0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf2204aa4954a9426cee93eb1baa2b26eb69070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf2204aa4954a9426cee93eb1baa2b26eb69070", "html_url": "https://github.com/rust-lang/rust/commit/daf2204aa4954a9426cee93eb1baa2b26eb69070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf2204aa4954a9426cee93eb1baa2b26eb69070/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91a0600a5c22b9d159e3c57526af83e71d1120f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91a0600a5c22b9d159e3c57526af83e71d1120f8", "html_url": "https://github.com/rust-lang/rust/commit/91a0600a5c22b9d159e3c57526af83e71d1120f8"}, {"sha": "1f284b07edaae02324947221b2e0660e07fc5618", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f284b07edaae02324947221b2e0660e07fc5618", "html_url": "https://github.com/rust-lang/rust/commit/1f284b07edaae02324947221b2e0660e07fc5618"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "144eaed7e076e7af0363655221c1f7ce08d9f240", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/daf2204aa4954a9426cee93eb1baa2b26eb69070/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf2204aa4954a9426cee93eb1baa2b26eb69070/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=daf2204aa4954a9426cee93eb1baa2b26eb69070", "patch": "@@ -42,13 +42,15 @@ impl StableHasher {\n }\n \n impl StableHasherResult for u128 {\n+    #[inline]\n     fn finish(hasher: StableHasher) -> Self {\n         let (_0, _1) = hasher.finalize();\n         u128::from(_0) | (u128::from(_1) << 64)\n     }\n }\n \n impl StableHasherResult for u64 {\n+    #[inline]\n     fn finish(hasher: StableHasher) -> Self {\n         hasher.finalize().0\n     }\n@@ -507,7 +509,11 @@ where\n {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        hash_stable_hashmap(hcx, hasher, self, ToStableHashKey::to_stable_hash_key);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, (key, value)| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+            value.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n@@ -517,9 +523,10 @@ where\n     R: BuildHasher,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let mut keys: Vec<_> = self.iter().map(|k| k.to_stable_hash_key(hcx)).collect();\n-        keys.sort_unstable();\n-        keys.hash_stable(hcx, hasher);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, key| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n@@ -529,10 +536,11 @@ where\n     V: HashStable<HCX>,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let mut entries: Vec<_> =\n-            self.iter().map(|(k, v)| (k.to_stable_hash_key(hcx), v)).collect();\n-        entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n-        entries.hash_stable(hcx, hasher);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, (key, value)| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+            value.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n@@ -541,26 +549,38 @@ where\n     K: ToStableHashKey<HCX>,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let mut keys: Vec<_> = self.iter().map(|k| k.to_stable_hash_key(hcx)).collect();\n-        keys.sort_unstable();\n-        keys.hash_stable(hcx, hasher);\n+        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, key| {\n+            let key = key.to_stable_hash_key(hcx);\n+            key.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n-pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n+fn stable_hash_reduce<HCX, I, C, F>(\n     hcx: &mut HCX,\n     hasher: &mut StableHasher,\n-    map: &::std::collections::HashMap<K, V, R>,\n-    to_stable_hash_key: F,\n+    mut collection: C,\n+    length: usize,\n+    hash_function: F,\n ) where\n-    K: Eq,\n-    V: HashStable<HCX>,\n-    R: BuildHasher,\n-    SK: HashStable<HCX> + Ord,\n-    F: Fn(&K, &HCX) -> SK,\n+    C: Iterator<Item = I>,\n+    F: Fn(&mut StableHasher, &mut HCX, I),\n {\n-    let mut entries: SmallVec<[_; 3]> =\n-        map.iter().map(|(k, v)| (to_stable_hash_key(k, hcx), v)).collect();\n-    entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n-    entries.hash_stable(hcx, hasher);\n+    length.hash_stable(hcx, hasher);\n+\n+    match length {\n+        1 => {\n+            hash_function(hasher, hcx, collection.next().unwrap());\n+        }\n+        _ => {\n+            let hash = collection\n+                .map(|value| {\n+                    let mut hasher = StableHasher::new();\n+                    hash_function(&mut hasher, hcx, value);\n+                    hasher.finish::<u128>()\n+                })\n+                .reduce(|accum, value| accum.wrapping_add(value));\n+            hash.hash_stable(hcx, hasher);\n+        }\n+    }\n }"}]}