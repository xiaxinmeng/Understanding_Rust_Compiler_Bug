{"sha": "74ad0236747469f9646916d1916dee2598076161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YWQwMjM2NzQ3NDY5Zjk2NDY5MTZkMTkxNmRlZTI1OTgwNzYxNjE=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2014-05-12T17:56:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:07Z"}, "message": "std, core: Generate unicode.rs using unicode.py", "tree": {"sha": "db2d8c1fe2d8461e4bcbfb7fe8acba782e66693f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db2d8c1fe2d8461e4bcbfb7fe8acba782e66693f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ad0236747469f9646916d1916dee2598076161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ad0236747469f9646916d1916dee2598076161", "html_url": "https://github.com/rust-lang/rust/commit/74ad0236747469f9646916d1916dee2598076161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ad0236747469f9646916d1916dee2598076161/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21867fa1279c38189faccfb430c8bd6bffe0ef9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21867fa1279c38189faccfb430c8bd6bffe0ef9e", "html_url": "https://github.com/rust-lang/rust/commit/21867fa1279c38189faccfb430c8bd6bffe0ef9e"}], "stats": {"total": 146, "additions": 85, "deletions": 61}, "files": [{"sha": "e98c65ca50eeebcb154aa8ba764151fa8797eb18", "filename": "src/etc/unicode.py", "status": "modified", "additions": 76, "deletions": 55, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/74ad0236747469f9646916d1916dee2598076161/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/74ad0236747469f9646916d1916dee2598076161/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=74ad0236747469f9646916d1916dee2598076161", "patch": "@@ -169,7 +169,7 @@ def emit_bsearch_range_table(f):\n         else if hi < c { Less }\n         else { Greater }\n     }) != None\n-}\\n\\n\n+}\\n\n \"\"\");\n \n def emit_property_module(f, mod, tbl):\n@@ -193,11 +193,11 @@ def emit_property_module(f, mod, tbl):\n         f.write(\"    pub fn %s(c: char) -> bool {\\n\" % cat)\n         f.write(\"        super::bsearch_range_table(c, %s_table)\\n\" % cat)\n         f.write(\"    }\\n\\n\")\n-    f.write(\"}\\n\")\n+    f.write(\"}\\n\\n\")\n \n \n def emit_conversions_module(f, lowerupper, upperlower):\n-    f.write(\"pub mod conversions {\\n\")\n+    f.write(\"pub mod conversions {\")\n     f.write(\"\"\"\n     use cmp::{Equal, Less, Greater};\n     use slice::ImmutableVector;\n@@ -225,13 +225,14 @@ def emit_conversions_module(f, lowerupper, upperlower):\n             else { Greater }\n         })\n     }\n+\n \"\"\");\n     emit_caseconversion_table(f, \"LuLl\", upperlower)\n     emit_caseconversion_table(f, \"LlLu\", lowerupper)\n     f.write(\"}\\n\")\n \n def emit_caseconversion_table(f, name, table):\n-    f.write(\"   static %s_table : &'static [(char, char)] = &[\\n\" % name)\n+    f.write(\"    static %s_table : &'static [(char, char)] = &[\\n\" % name)\n     sorted_table = sorted(table.iteritems(), key=operator.itemgetter(0))\n     ix = 0\n     for key, value in sorted_table:\n@@ -255,7 +256,7 @@ def format_table_content(f, content, indent):\n             line = \" \"*indent + chunk\n     f.write(line)\n \n-def emit_decomp_module(f, canon, compat, combine):\n+def emit_core_decomp_module(f, canon, compat):\n     canon_keys = canon.keys()\n     canon_keys.sort()\n \n@@ -279,23 +280,6 @@ def emit_decomp_module(f, canon, compat, combine):\n             }\n             None => None\n         }\n-    }\\n\n-\"\"\")\n-\n-    f.write(\"\"\"\n-    fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n-        use cmp::{Equal, Less, Greater};\n-        match r.bsearch(|&(lo, hi, _)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) {\n-            Some(idx) => {\n-                let (_, _, result) = r[idx];\n-                result\n-            }\n-            None => 0\n-        }\n     }\\n\\n\n \"\"\")\n \n@@ -337,21 +321,10 @@ def emit_decomp_module(f, canon, compat, combine):\n     format_table_content(f, data, 8)\n     f.write(\"\\n    ];\\n\\n\")\n \n-    f.write(\"    static combining_class_table : &'static [(char, char, u8)] = &[\\n\")\n-    ix = 0\n-    for pair in combine:\n-        f.write(ch_prefix(ix))\n-        f.write(\"(%s, %s, %s)\" % (escape_char(pair[0]), escape_char(pair[1]), pair[2]))\n-        ix += 1\n-    f.write(\"\\n    ];\\n\")\n-\n     f.write(\"    pub fn canonical(c: char, i: |char|) \"\n         + \"{ d(c, i, false); }\\n\\n\")\n     f.write(\"    pub fn compatibility(c: char, i: |char|) \"\n             +\"{ d(c, i, true); }\\n\\n\")\n-    f.write(\"    pub fn canonical_combining_class(c: char) -> u8 {\\n\"\n-        + \"        bsearch_range_value_table(c, combining_class_table)\\n\"\n-        + \"    }\\n\\n\")\n     f.write(\"    fn d(c: char, i: |char|, k: bool) {\\n\")\n     f.write(\"        use iter::Iterator;\\n\");\n \n@@ -389,17 +362,43 @@ def emit_decomp_module(f, canon, compat, combine):\n     f.write(\"    }\\n\")\n     f.write(\"}\\n\\n\")\n \n-r = \"unicode.rs\"\n-for i in [r]:\n-    if os.path.exists(i):\n-        os.remove(i);\n-rf = open(r, \"w\")\n+def emit_std_decomp_module(f, combine):\n+    f.write(\"pub mod decompose {\\n\");\n+    f.write(\"    use option::{Some, None};\\n\");\n+    f.write(\"    use slice::ImmutableVector;\\n\");\n \n-(canon_decomp, compat_decomp, gencats,\n- combines, lowerupper, upperlower) = load_unicode_data(\"UnicodeData.txt\")\n+    f.write(\"\"\"\n+    fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n+        use cmp::{Equal, Less, Greater};\n+        match r.bsearch(|&(lo, hi, _)| {\n+            if lo <= c && c <= hi { Equal }\n+            else if hi < c { Less }\n+            else { Greater }\n+        }) {\n+            Some(idx) => {\n+                let (_, _, result) = r[idx];\n+                result\n+            }\n+            None => 0\n+        }\n+    }\\n\\n\n+\"\"\")\n+\n+    f.write(\"    static combining_class_table : &'static [(char, char, u8)] = &[\\n\")\n+    ix = 0\n+    for pair in combine:\n+        f.write(ch_prefix(ix))\n+        f.write(\"(%s, %s, %s)\" % (escape_char(pair[0]), escape_char(pair[1]), pair[2]))\n+        ix += 1\n+    f.write(\"\\n    ];\\n\\n\")\n \n-# Preamble\n-rf.write('''// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+    f.write(\"    pub fn canonical_combining_class(c: char) -> u8 {\\n\"\n+        + \"        bsearch_range_value_table(c, combining_class_table)\\n\"\n+        + \"    }\\n\")\n+    f.write(\"}\\n\")\n+\n+\n+preamble = '''// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -409,23 +408,45 @@ def emit_decomp_module(f, canon, compat, combine):\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The following code was generated by \"src/etc/unicode.py\"\n+// NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n+\n+#![allow(missing_doc, non_uppercase_statics)]\n+\n+'''\n+\n+(canon_decomp, compat_decomp, gencats,\n+ combines, lowerupper, upperlower) = load_unicode_data(\"UnicodeData.txt\")\n+\n+def gen_core_unicode():\n+    r = \"core_unicode.rs\"\n+    if os.path.exists(r):\n+        os.remove(r);\n+    with open(r, \"w\") as rf:\n+        # Preamble\n+        rf.write(preamble)\n \n-#![allow(missing_doc)]\n-#![allow(non_uppercase_statics)]\n+        emit_bsearch_range_table(rf);\n+        emit_property_module(rf, \"general_category\", gencats)\n \n-''')\n+        emit_core_decomp_module(rf, canon_decomp, compat_decomp)\n \n-emit_bsearch_range_table(rf);\n-emit_property_module(rf, \"general_category\", gencats)\n+        derived = load_properties(\"DerivedCoreProperties.txt\",\n+                [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"])\n \n-emit_decomp_module(rf, canon_decomp, compat_decomp, combines)\n+        emit_property_module(rf, \"derived_property\", derived)\n \n-derived = load_properties(\"DerivedCoreProperties.txt\",\n-        [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"])\n+        props = load_properties(\"PropList.txt\", [\"White_Space\"])\n+        emit_property_module(rf, \"property\", props)\n+        emit_conversions_module(rf, lowerupper, upperlower)\n \n-emit_property_module(rf, \"derived_property\", derived)\n+def gen_std_unicode():\n+    r = \"std_unicode.rs\"\n+    if os.path.exists(r):\n+        os.remove(r);\n+    with open(r, \"w\") as rf:\n+        # Preamble\n+        rf.write(preamble)\n+        emit_std_decomp_module(rf, combines)\n \n-props = load_properties(\"PropList.txt\", [\"White_Space\"])\n-emit_property_module(rf, \"property\", props)\n-emit_conversions_module(rf, lowerupper, upperlower)\n+gen_core_unicode()\n+gen_std_unicode()"}, {"sha": "b3298bde055473ebb5b076daad5edc2a8511c48c", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74ad0236747469f9646916d1916dee2598076161/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ad0236747469f9646916d1916dee2598076161/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=74ad0236747469f9646916d1916dee2598076161", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The following code was generated by \"src/etc/unicode.py\"\n+// NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n \n #![allow(missing_doc, non_uppercase_statics)]\n \n+\n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n     use cmp::{Equal, Less, Greater};\n     use slice::ImmutableVector;\n@@ -102,6 +103,7 @@ pub mod general_category {\n     }\n \n }\n+\n pub mod decompose {\n     use option::Option;\n     use option::{Some, None};\n@@ -123,7 +125,6 @@ pub mod decompose {\n     }\n \n \n-\n     // Canonical decompositions\n     static canonical_table : &'static [(char, &'static [char])] = &[\n         ('\\xc0', &['\\x41', '\\u0300']), ('\\xc1', &['\\x41', '\\u0301']), ('\\xc2', &['\\x41', '\\u0302']),\n@@ -3968,6 +3969,7 @@ pub mod derived_property {\n     pub fn XID_Start(c: char) -> bool {\n         super::bsearch_range_table(c, XID_Start_table)\n     }\n+\n }\n \n pub mod property {\n@@ -3983,6 +3985,7 @@ pub mod property {\n     pub fn White_Space(c: char) -> bool {\n         super::bsearch_range_table(c, White_Space_table)\n     }\n+\n }\n \n pub mod conversions {\n@@ -4501,7 +4504,7 @@ pub mod conversions {\n         ('\\U00010426', '\\U0001044e'), ('\\U00010427', '\\U0001044f')\n     ];\n \n-   static LlLu_table : &'static [(char, char)] = &[\n+    static LlLu_table : &'static [(char, char)] = &[\n         ('\\x61', '\\x41'), ('\\x62', '\\x42'),\n         ('\\x63', '\\x43'), ('\\x64', '\\x44'),\n         ('\\x65', '\\x45'), ('\\x66', '\\x46'),"}, {"sha": "d534b30221b4aeab9f8f668c4dfb9b42622349bd", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74ad0236747469f9646916d1916dee2598076161/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ad0236747469f9646916d1916dee2598076161/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=74ad0236747469f9646916d1916dee2598076161", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The following code was generated by \"src/etc/unicode.py\"\n+// NOTE: The following code was generated by \"src/etc/unicode.py\", do not edit directly\n \n #![allow(missing_doc, non_uppercase_statics)]\n "}]}