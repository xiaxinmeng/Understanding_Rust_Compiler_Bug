{"sha": "a9ff4bd838a976e0215d3b6c06014eabc028550e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZmY0YmQ4MzhhOTc2ZTAyMTVkM2I2YzA2MDE0ZWFiYzAyODU1MGU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-12-15T00:00:00Z"}, "message": "Always run intrinsics lowering pass\n\nMove intrinsics lowering pass from the optimization phase (where it\nwould not run if -Zmir-opt-level=0), to the drop lowering phase where it\nruns unconditionally.\n\nThe implementation of those intrinsics in code generation and\ninterpreter is unnecessary. Remove it.", "tree": {"sha": "18fe127fea58e4a6cdcc8eb47ee480a707e33367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fe127fea58e4a6cdcc8eb47ee480a707e33367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ff4bd838a976e0215d3b6c06014eabc028550e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ff4bd838a976e0215d3b6c06014eabc028550e", "html_url": "https://github.com/rust-lang/rust/commit/a9ff4bd838a976e0215d3b6c06014eabc028550e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ff4bd838a976e0215d3b6c06014eabc028550e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e15ec667cee92d47c64fc903227b2fdb81f9e530", "url": "https://api.github.com/repos/rust-lang/rust/commits/e15ec667cee92d47c64fc903227b2fdb81f9e530", "html_url": "https://github.com/rust-lang/rust/commit/e15ec667cee92d47c64fc903227b2fdb81f9e530"}], "stats": {"total": 77, "additions": 38, "deletions": 39}, "files": [{"sha": "34022643101b64911231bcfa5f82f13ab3d7fae6", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -83,9 +83,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 return;\n             }\n \n-            sym::unreachable => {\n-                return;\n-            }\n             sym::va_start => bx.va_start(args[0].immediate()),\n             sym::va_end => bx.va_end(args[0].immediate()),\n             sym::size_of_val => {\n@@ -106,8 +103,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     bx.const_usize(bx.layout_of(tp_ty).align.abi.bytes())\n                 }\n             }\n-            sym::size_of\n-            | sym::pref_align_of\n+            sym::pref_align_of\n             | sym::min_align_of\n             | sym::needs_drop\n             | sym::type_id\n@@ -119,10 +115,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .unwrap();\n                 OperandRef::from_const(bx, value, ret_ty).immediate_or_packed_pair(bx)\n             }\n-            // Effectively no-op\n-            sym::forget => {\n-                return;\n-            }\n             sym::offset => {\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();\n@@ -218,9 +210,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             sym::add_with_overflow\n             | sym::sub_with_overflow\n             | sym::mul_with_overflow\n-            | sym::wrapping_add\n-            | sym::wrapping_sub\n-            | sym::wrapping_mul\n             | sym::unchecked_div\n             | sym::unchecked_rem\n             | sym::unchecked_shl\n@@ -254,9 +243,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                             return;\n                         }\n-                        sym::wrapping_add => bx.add(args[0].immediate(), args[1].immediate()),\n-                        sym::wrapping_sub => bx.sub(args[0].immediate(), args[1].immediate()),\n-                        sym::wrapping_mul => bx.mul(args[0].immediate(), args[1].immediate()),\n                         sym::exact_div => {\n                             if signed {\n                                 bx.exactsdiv(args[0].immediate(), args[1].immediate())"}, {"sha": "474e1f8e577f8b647be644be217823779244fd31", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -61,12 +61,11 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.len() }\n         }\n         sym::needs_drop => ConstValue::from_bool(tp_ty.needs_drop(tcx, param_env)),\n-        sym::size_of | sym::min_align_of | sym::pref_align_of => {\n+        sym::min_align_of | sym::pref_align_of => {\n             let layout = tcx.layout_of(param_env.and(tp_ty)).map_err(|e| err_inval!(Layout(e)))?;\n             let n = match name {\n                 sym::pref_align_of => layout.align.pref.bytes(),\n                 sym::min_align_of => layout.align.abi.bytes(),\n-                sym::size_of => layout.size.bytes(),\n                 _ => bug!(),\n             };\n             ConstValue::from_machine_usize(n, &tcx)\n@@ -125,7 +124,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let (dest, ret) = match ret {\n             None => match intrinsic_name {\n                 sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n-                sym::unreachable => throw_ub!(Unreachable),\n                 sym::abort => M::abort(self, \"the program aborted execution\".to_owned())?,\n                 // Unsupported diverging intrinsic.\n                 _ => return Ok(false),\n@@ -160,13 +158,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::min_align_of\n             | sym::pref_align_of\n             | sym::needs_drop\n-            | sym::size_of\n             | sym::type_id\n             | sym::type_name\n             | sym::variant_count => {\n                 let gid = GlobalId { instance, promoted: None };\n                 let ty = match intrinsic_name {\n-                    sym::min_align_of | sym::pref_align_of | sym::size_of | sym::variant_count => {\n+                    sym::min_align_of | sym::pref_align_of | sym::variant_count => {\n                         self.tcx.types.usize\n                     }\n                     sym::needs_drop => self.tcx.types.bool,\n@@ -212,28 +209,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let out_val = numeric_intrinsic(intrinsic_name, bits, kind)?;\n                 self.write_scalar(out_val, dest)?;\n             }\n-            sym::wrapping_add\n-            | sym::wrapping_sub\n-            | sym::wrapping_mul\n-            | sym::add_with_overflow\n-            | sym::sub_with_overflow\n-            | sym::mul_with_overflow => {\n+            sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n                 let lhs = self.read_immediate(args[0])?;\n                 let rhs = self.read_immediate(args[1])?;\n-                let (bin_op, ignore_overflow) = match intrinsic_name {\n-                    sym::wrapping_add => (BinOp::Add, true),\n-                    sym::wrapping_sub => (BinOp::Sub, true),\n-                    sym::wrapping_mul => (BinOp::Mul, true),\n-                    sym::add_with_overflow => (BinOp::Add, false),\n-                    sym::sub_with_overflow => (BinOp::Sub, false),\n-                    sym::mul_with_overflow => (BinOp::Mul, false),\n+                let bin_op = match intrinsic_name {\n+                    sym::add_with_overflow => BinOp::Add,\n+                    sym::sub_with_overflow => BinOp::Sub,\n+                    sym::mul_with_overflow => BinOp::Mul,\n                     _ => bug!(\"Already checked for int ops\"),\n                 };\n-                if ignore_overflow {\n-                    self.binop_ignore_overflow(bin_op, lhs, rhs, dest)?;\n-                } else {\n-                    self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n-                }\n+                self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n             }\n             sym::saturating_add | sym::saturating_sub => {\n                 let l = self.read_immediate(args[0])?;"}, {"sha": "7f3b421cf76f62c3cf02d930caa3bb2f58018771", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -364,6 +364,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n         // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n         // but before optimizations begin.\n         &add_retag::AddRetag,\n+        &lower_intrinsics::LowerIntrinsics,\n         &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n         // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n         // and it can help optimizations.\n@@ -392,7 +393,6 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     // The main optimizations that we do on MIR.\n     let optimizations: &[&dyn MirPass<'tcx>] = &[\n-        &lower_intrinsics::LowerIntrinsics,\n         &remove_unneeded_drops::RemoveUnneededDrops,\n         &match_branches::MatchBranchSimplification,\n         // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)"}, {"sha": "7da2ff02006bf8f4055ba5ff956d036ecafb8ef5", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -120,5 +120,9 @@\n       bb5: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:73:2: 73:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:68:1: 73:2\n+      }\n   }\n   "}, {"sha": "e9cc72f2138891640f29e3553a92db65be8b9e8e", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -25,7 +25,15 @@\n           StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:19:40: 19:41\n           StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:43: 19:44\n           _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:18:24: 20:2\n+          goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:20:1: 20:2\n+      }\n+  \n+      bb2: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:20:2: 20:2\n       }\n+  \n+      bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:18:1: 20:2\n+      }\n   }\n   "}, {"sha": "218b1c964334525ac622f6d12fe1ddee158ac905", "filename": "src/test/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -27,5 +27,9 @@\n           StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:59:1: 59:2\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:59:2: 59:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:55:1: 59:2\n+      }\n   }\n   "}, {"sha": "b5a77702a8ef0a0345846c8a2a407574fd927ced", "filename": "src/test/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -16,5 +16,9 @@\n       bb1: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:15:2: 15:2\n       }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:13:1: 15:2\n+      }\n   }\n   "}, {"sha": "a04b79d47d4ce59fe62deaeef8676b98c9b3cae4", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -18,5 +18,9 @@\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n       }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:23:1: 25:2\n+      }\n   }\n   "}, {"sha": "badfef30e6fc5b88cc7aeb7c9f113b42174ae41e", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a9ff4bd838a976e0215d3b6c06014eabc028550e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=a9ff4bd838a976e0215d3b6c06014eabc028550e", "patch": "@@ -79,5 +79,9 @@\n           StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:10:1: 10:2\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:10:2: 10:2\n       }\n+  \n+      bb4 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:6:1: 10:2\n+      }\n   }\n   "}]}