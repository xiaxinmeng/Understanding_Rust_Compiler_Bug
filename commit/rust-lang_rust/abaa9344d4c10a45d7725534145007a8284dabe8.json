{"sha": "abaa9344d4c10a45d7725534145007a8284dabe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWE5MzQ0ZDRjMTBhNDVkNzcyNTUzNDE0NTAwN2E4Mjg0ZGFiZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T01:42:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T01:42:25Z"}, "message": "Auto merge of #56805 - mikeyhew:stabilize-pin-as-receiver, r=nikomatsakis\n\nStabilize `Rc`, `Arc` and `Pin` as method receivers\n\nReplaces #55880\nCloses  #55786\nr? @nikomatsakis\ncc @withoutboats @cramertj\n\nThis lets you write methods using `self: Rc<Self>`, `self: Arc<Self>`, `self: Pin<&mut Self>`, `self: Pin<Box<Self>`, and other combinations involving `Pin` and another stdlib receiver type, without needing the `arbitrary_self_types`. Other user-created receiver types can be used, but they still require the feature flag to use.\n\nThis is implemented by introducing a new trait, `Receiver`, which the method receiver's type must implement if the `arbitrary_self_types` feature is not enabled. To keep composed receiver types such as `&Arc<Self>` unstable, the receiver type is also required to implement `Deref<Target=Self>` when the feature flag is not enabled.\n\nThis lets you use `self: Rc<Self>` and `self: Arc<Self>` in stable Rust, which was not allowed previously. It was agreed that they would be stabilized in #55786. `self: Pin<&Self>` and other pinned receiver types do not require the `arbitrary_self_types` feature, but they cannot be used on stable because `Pin` still requires the `pin` feature.", "tree": {"sha": "274fef4b6785a676159957406e2dac3d76cbfb36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274fef4b6785a676159957406e2dac3d76cbfb36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abaa9344d4c10a45d7725534145007a8284dabe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abaa9344d4c10a45d7725534145007a8284dabe8", "html_url": "https://github.com/rust-lang/rust/commit/abaa9344d4c10a45d7725534145007a8284dabe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abaa9344d4c10a45d7725534145007a8284dabe8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ff13562f1e7f0543e3bdc3949e21cf88c7b0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ff13562f1e7f0543e3bdc3949e21cf88c7b0a9", "html_url": "https://github.com/rust-lang/rust/commit/a9ff13562f1e7f0543e3bdc3949e21cf88c7b0a9"}, {"sha": "286503ace2fd1fc8ac8bf8aa10378fb93763d99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/286503ace2fd1fc8ac8bf8aa10378fb93763d99f", "html_url": "https://github.com/rust-lang/rust/commit/286503ace2fd1fc8ac8bf8aa10378fb93763d99f"}], "stats": {"total": 344, "additions": 244, "deletions": 100}, "files": [{"sha": "f1581310b48fcfbf192568ca428fe7b8620f1748", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -77,7 +77,9 @@ use core::iter::{Iterator, FromIterator, FusedIterator};\n use core::marker::{Unpin, Unsize};\n use core::mem;\n use core::pin::Pin;\n-use core::ops::{CoerceUnsized, DispatchFromDyn, Deref, DerefMut, Generator, GeneratorState};\n+use core::ops::{\n+    CoerceUnsized, DispatchFromDyn, Deref, DerefMut, Receiver, Generator, GeneratorState\n+};\n use core::ptr::{self, NonNull, Unique};\n use core::task::{LocalWaker, Poll};\n \n@@ -583,6 +585,9 @@ impl<T: ?Sized> DerefMut for Box<T> {\n     }\n }\n \n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+impl<T: ?Sized> Receiver for Box<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator + ?Sized> Iterator for Box<I> {\n     type Item = I::Item;"}, {"sha": "e00e430fab6ef2f78f68f578ad6916eb0c912749", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -104,6 +104,7 @@\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n+#![feature(receiver_trait)]\n #![feature(specialization)]\n #![feature(split_ascii_whitespace)]\n #![feature(staged_api)]"}, {"sha": "3fc70f4ac37a1a3874a554df18394e93fe61427b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -253,7 +253,7 @@ use core::intrinsics::abort;\n use core::marker;\n use core::marker::{Unpin, Unsize, PhantomData};\n use core::mem::{self, align_of_val, forget, size_of_val};\n-use core::ops::Deref;\n+use core::ops::{Deref, Receiver};\n use core::ops::{CoerceUnsized, DispatchFromDyn};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n@@ -813,6 +813,9 @@ impl<T: ?Sized> Deref for Rc<T> {\n     }\n }\n \n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+impl<T: ?Sized> Receiver for Rc<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// Drops the `Rc`."}, {"sha": "557370166081253a40c6bae1d424aa22541ce207", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -24,7 +24,7 @@ use core::fmt;\n use core::cmp::Ordering;\n use core::intrinsics::abort;\n use core::mem::{self, align_of_val, size_of_val};\n-use core::ops::Deref;\n+use core::ops::{Deref, Receiver};\n use core::ops::{CoerceUnsized, DispatchFromDyn};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n@@ -767,6 +767,9 @@ impl<T: ?Sized> Deref for Arc<T> {\n     }\n }\n \n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+impl<T: ?Sized> Receiver for Arc<T> {}\n+\n impl<T: Clone> Arc<T> {\n     /// Makes a mutable reference into the given `Arc`.\n     ///"}, {"sha": "ff836f4aa69a678793288708fdf02653616acea7", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -177,3 +177,19 @@ pub trait DerefMut: Deref {\n impl<T: ?Sized> DerefMut for &mut T {\n     fn deref_mut(&mut self) -> &mut T { *self }\n }\n+\n+/// Indicates that a struct can be used as a method receiver, without the\n+/// `arbitrary_self_types` feature. This is implemented by stdlib pointer types like `Box<T>`,\n+/// `Rc<T>`, `&T`, and `Pin<P>`.\n+#[cfg_attr(not(stage0), lang = \"receiver\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[doc(hidden)]\n+pub trait Receiver {\n+    // Empty.\n+}\n+\n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+impl<T: ?Sized> Receiver for &T {}\n+\n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+impl<T: ?Sized> Receiver for &mut T {}"}, {"sha": "06740d2e4cd7038137130727c2fe34196c7121cf", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -178,6 +178,9 @@ pub use self::bit::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssig\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::deref::{Deref, DerefMut};\n \n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+pub use self::deref::Receiver;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::drop::Drop;\n "}, {"sha": "521ce9b5f6b698f56efa51bc4a28d6a794f0b117", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -101,7 +101,7 @@\n \n use fmt;\n use marker::Sized;\n-use ops::{Deref, DerefMut, CoerceUnsized, DispatchFromDyn};\n+use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n #[doc(inline)]\n pub use marker::Unpin;\n@@ -302,6 +302,9 @@ where\n     }\n }\n \n+#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+impl<P: Receiver> Receiver for Pin<P> {}\n+\n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<P: fmt::Debug> fmt::Debug for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "cfcc7c8371976b3e182f5cf2fe1e6046f765a77f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -301,6 +301,7 @@ language_item_table! {\n \n     DerefTraitLangItem,          \"deref\",              deref_trait,             Target::Trait;\n     DerefMutTraitLangItem,       \"deref_mut\",          deref_mut_trait,         Target::Trait;\n+    ReceiverTraitLangItem,       \"receiver\",           receiver_trait,          Target::Trait;\n \n     FnTraitLangItem,             \"fn\",                 fn_trait,                Target::Trait;\n     FnMutTraitLangItem,          \"fn_mut\",             fn_mut_trait,            Target::Trait;"}, {"sha": "e74b1ae47e39d58eadb488e499630869bd32b9ce", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 120, "deletions": 44, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -13,9 +13,8 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n-use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable};\n+use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, Substs};\n-use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n use rustc::infer::opaque_types::may_define_existential_type;\n@@ -749,72 +748,149 @@ fn check_method_receiver<'fcx, 'gcx, 'tcx>(fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n         &ty::Binder::bind(self_ty)\n     );\n \n-    let self_arg_ty = sig.inputs()[0];\n+    let receiver_ty = sig.inputs()[0];\n \n-    let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n-    let self_arg_ty = fcx.normalize_associated_types_in(span, &self_arg_ty);\n-    let self_arg_ty = fcx.tcx.liberate_late_bound_regions(\n+    let receiver_ty = fcx.normalize_associated_types_in(span, &receiver_ty);\n+    let receiver_ty = fcx.tcx.liberate_late_bound_regions(\n         method.def_id,\n-        &ty::Binder::bind(self_arg_ty)\n+        &ty::Binder::bind(receiver_ty)\n     );\n \n-    let mut autoderef = fcx.autoderef(span, self_arg_ty).include_raw_pointers();\n+    if fcx.tcx.features().arbitrary_self_types {\n+        if !receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n+            // report error, arbitrary_self_types was enabled\n+            fcx.tcx.sess.diagnostic().mut_span_err(\n+                span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n+            ).note(\"type of `self` must be `Self` or a type that dereferences to it\")\n+            .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+            .code(DiagnosticId::Error(\"E0307\".into()))\n+            .emit();\n+        }\n+    } else {\n+        if !receiver_is_valid(fcx, span, receiver_ty, self_ty, false) {\n+            if receiver_is_valid(fcx, span, receiver_ty, self_ty, true) {\n+                // report error, would have worked with arbitrary_self_types\n+                feature_gate::feature_err(\n+                    &fcx.tcx.sess.parse_sess,\n+                    \"arbitrary_self_types\",\n+                    span,\n+                    GateIssue::Language,\n+                    &format!(\n+                        \"`{}` cannot be used as the type of `self` without \\\n+                            the `arbitrary_self_types` feature\",\n+                        receiver_ty,\n+                    ),\n+                ).help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                .emit();\n+            } else {\n+                // report error, would not have worked with arbitrary_self_types\n+                fcx.tcx.sess.diagnostic().mut_span_err(\n+                    span, &format!(\"invalid method receiver type: {:?}\", receiver_ty)\n+                ).note(\"type must be `Self` or a type that dereferences to it\")\n+                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                .code(DiagnosticId::Error(\"E0307\".into()))\n+                .emit();\n+            }\n+        }\n+    }\n+}\n+\n+/// returns true if `receiver_ty` would be considered a valid receiver type for `self_ty`. If\n+/// `arbitrary_self_types` is enabled, `receiver_ty` must transitively deref to `self_ty`, possibly\n+/// through a `*const/mut T` raw pointer. If the feature is not enabled, the requirements are more\n+/// strict: `receiver_ty` must implement `Receiver` and directly implement `Deref<Target=self_ty>`.\n+///\n+/// NB: there are cases this function returns `true` but causes an error to be emitted,\n+/// particularly when `receiver_ty` derefs to a type that is the same as `self_ty` but has the\n+/// wrong lifetime. Be careful of this if you are calling this function speculatively.\n+fn receiver_is_valid<'fcx, 'tcx, 'gcx>(\n+    fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n+    span: Span,\n+    receiver_ty: Ty<'tcx>,\n+    self_ty: Ty<'tcx>,\n+    arbitrary_self_types_enabled: bool,\n+) -> bool {\n+    let cause = fcx.cause(span, traits::ObligationCauseCode::MethodReceiver);\n+\n+    let can_eq_self = |ty| fcx.infcx.can_eq(fcx.param_env, self_ty, ty).is_ok();\n+\n+    // `self: Self` is always valid\n+    if can_eq_self(receiver_ty) {\n+        if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, self_ty, receiver_ty) {\n+            err.emit();\n+        }\n+        return true\n+    }\n+\n+    let mut autoderef = fcx.autoderef(span, receiver_ty);\n+\n+    // the `arbitrary_self_types` feature allows raw pointer receivers like `self: *const Self`\n+    if arbitrary_self_types_enabled {\n+        autoderef = autoderef.include_raw_pointers();\n+    }\n+\n+    // the first type is `receiver_ty`, which we know its not equal to `self_ty`. skip it.\n+    autoderef.next();\n \n+    // keep dereferencing `receiver_ty` until we get to `self_ty`\n     loop {\n         if let Some((potential_self_ty, _)) = autoderef.next() {\n-            debug!(\"check_method_receiver: potential self type `{:?}` to match `{:?}`\",\n+            debug!(\"receiver_is_valid: potential self type `{:?}` to match `{:?}`\",\n                 potential_self_ty, self_ty);\n \n-            if fcx.infcx.can_eq(fcx.param_env, self_ty, potential_self_ty).is_ok() {\n+            if can_eq_self(potential_self_ty) {\n                 autoderef.finalize(fcx);\n+\n                 if let Some(mut err) = fcx.demand_eqtype_with_origin(\n-                    &cause, self_ty, potential_self_ty) {\n+                    &cause, self_ty, potential_self_ty\n+                ) {\n                     err.emit();\n                 }\n+\n                 break\n             }\n         } else {\n-            fcx.tcx.sess.diagnostic().mut_span_err(\n-                span, &format!(\"invalid `self` type: {:?}\", self_arg_ty))\n-            .note(&format!(\"type must be `{:?}` or a type that dereferences to it\", self_ty))\n-            .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n-            .code(DiagnosticId::Error(\"E0307\".into()))\n-            .emit();\n-            return\n+            debug!(\"receiver_is_valid: type `{:?}` does not deref to `{:?}`\",\n+                receiver_ty, self_ty);\n+            return false\n+        }\n+\n+        // without the `arbitrary_self_types` feature, `receiver_ty` must directly deref to\n+        // `self_ty`. Enforce this by only doing one iteration of the loop\n+        if !arbitrary_self_types_enabled {\n+            return false\n         }\n     }\n \n-    let is_self_ty = |ty| fcx.infcx.can_eq(fcx.param_env, self_ty, ty).is_ok();\n-    let self_kind = ExplicitSelf::determine(self_arg_ty, is_self_ty);\n+    // without `feature(arbitrary_self_types)`, we require that `receiver_ty` implements `Receiver`\n+    if !arbitrary_self_types_enabled {\n+        let trait_def_id = match fcx.tcx.lang_items().receiver_trait() {\n+            Some(did) => did,\n+            None => {\n+                debug!(\"receiver_is_valid: missing Receiver trait\");\n+                return false\n+            }\n+        };\n \n-    if !fcx.tcx.features().arbitrary_self_types {\n-        match self_kind {\n-            ExplicitSelf::ByValue |\n-            ExplicitSelf::ByReference(_, _) |\n-            ExplicitSelf::ByBox => (),\n+        let trait_ref = ty::TraitRef{\n+            def_id: trait_def_id,\n+            substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n+        };\n \n-            ExplicitSelf::ByRawPointer(_) => {\n-                feature_gate::feature_err(\n-                    &fcx.tcx.sess.parse_sess,\n-                    \"arbitrary_self_types\",\n-                    span,\n-                    GateIssue::Language,\n-                    \"raw pointer `self` is unstable\")\n-                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n-                .emit();\n-            }\n+        let obligation = traits::Obligation::new(\n+            cause.clone(),\n+            fcx.param_env,\n+            trait_ref.to_predicate()\n+        );\n \n-            ExplicitSelf::Other => {\n-                feature_gate::feature_err(\n-                    &fcx.tcx.sess.parse_sess,\n-                    \"arbitrary_self_types\",\n-                    span,\n-                    GateIssue::Language,\"arbitrary `self` types are unstable\")\n-                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n-                .emit();\n-            }\n+        if !fcx.predicate_must_hold(&obligation) {\n+            debug!(\"receiver_is_valid: type `{:?}` does not implement `Receiver` trait\",\n+                receiver_ty);\n+            return false\n         }\n     }\n+\n+    true\n }\n \n fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "6ec70bb8c09c840ca7c1c11ebc1ce8c4427fccca", "filename": "src/test/run-pass/arbitrary_self_types_stdlib_pointers.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(arbitrary_self_types)]\n #![feature(pin)]\n #![feature(rustc_attrs)]\n \n@@ -23,6 +22,7 @@ trait Trait {\n     fn by_arc(self: Arc<Self>) -> i64;\n     fn by_pin_mut(self: Pin<&mut Self>) -> i64;\n     fn by_pin_box(self: Pin<Box<Self>>) -> i64;\n+    fn by_pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> i64;\n }\n \n impl Trait for i64 {\n@@ -38,6 +38,9 @@ impl Trait for i64 {\n     fn by_pin_box(self: Pin<Box<Self>>) -> i64 {\n         *self\n     }\n+    fn by_pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> i64 {\n+        *self\n+    }\n }\n \n fn main() {\n@@ -53,4 +56,8 @@ fn main() {\n \n     let pin_box = Into::<Pin<Box<i64>>>::into(Box::new(4i64)) as Pin<Box<dyn Trait>>;\n     assert_eq!(4, pin_box.by_pin_box());\n+\n+    let value = 5i64;\n+    let pin_pin_pin_ref = Pin::new(Pin::new(Pin::new(&value))) as Pin<Pin<Pin<&dyn Trait>>>;\n+    assert_eq!(5, pin_pin_pin_ref.by_pin_pin_pin_ref());\n }"}, {"sha": "84cd5c2bffa6203cdd78e078bbaff41f0c76e21d", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -8,20 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::rc::Rc;\n+use std::{\n+    ops::Deref,\n+};\n+\n+struct Ptr<T: ?Sized>(Box<T>);\n+\n+impl<T: ?Sized> Deref for Ptr<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.0\n+    }\n+}\n \n trait Foo {\n-    fn foo(self: Rc<Box<Self>>); //~ ERROR arbitrary `self` types are unstable\n+    fn foo(self: Ptr<Self>); //~ ERROR `Ptr<Self>` cannot be used as the type of `self` without\n }\n \n struct Bar;\n \n impl Foo for Bar {\n-    fn foo(self: Rc<Box<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n+    fn foo(self: Ptr<Self>) {} //~ ERROR `Ptr<Bar>` cannot be used as the type of `self` without\n }\n \n impl Bar {\n-    fn bar(self: Box<Rc<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n+    fn bar(self: Box<Ptr<Self>>) {} //~ ERROR `std::boxed::Box<Ptr<Bar>>` cannot be used as the\n }\n \n fn main() {}"}, {"sha": "c70774b3710de1f15f3de34495d1e80a52361287", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -1,26 +1,26 @@\n-error[E0658]: arbitrary `self` types are unstable (see issue #44874)\n-  --> $DIR/feature-gate-arbitrary-self-types.rs:14:18\n+error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:26:18\n    |\n-LL |     fn foo(self: Rc<Box<Self>>); //~ ERROR arbitrary `self` types are unstable\n-   |                  ^^^^^^^^^^^^^\n+LL |     fn foo(self: Ptr<Self>); //~ ERROR `Ptr<Self>` cannot be used as the type of `self` without\n+   |                  ^^^^^^^^^\n    |\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: arbitrary `self` types are unstable (see issue #44874)\n-  --> $DIR/feature-gate-arbitrary-self-types.rs:20:18\n+error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:32:18\n    |\n-LL |     fn foo(self: Rc<Box<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n-   |                  ^^^^^^^^^^^^^\n+LL |     fn foo(self: Ptr<Self>) {} //~ ERROR `Ptr<Bar>` cannot be used as the type of `self` without\n+   |                  ^^^^^^^^^\n    |\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: arbitrary `self` types are unstable (see issue #44874)\n-  --> $DIR/feature-gate-arbitrary-self-types.rs:24:18\n+error[E0658]: `std::boxed::Box<Ptr<Bar>>` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:36:18\n    |\n-LL |     fn bar(self: Box<Rc<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n-   |                  ^^^^^^^^^^^^^\n+LL |     fn bar(self: Box<Ptr<Self>>) {} //~ ERROR `std::boxed::Box<Ptr<Bar>>` cannot be used as the\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`"}, {"sha": "6d42460ba5684e3868334eef132e093522dab4e2", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -12,17 +12,17 @@ struct Foo;\n \n impl Foo {\n     fn foo(self: *const Self) {}\n-    //~^ ERROR raw pointer `self` is unstable\n+    //~^ ERROR `*const Foo` cannot be used as the type of `self` without\n }\n \n trait Bar {\n     fn bar(self: *const Self);\n-    //~^ ERROR raw pointer `self` is unstable\n+    //~^ ERROR `*const Self` cannot be used as the type of `self` without\n }\n \n impl Bar for () {\n     fn bar(self: *const Self) {}\n-    //~^ ERROR raw pointer `self` is unstable\n+    //~^ ERROR `*const ()` cannot be used as the type of `self` without\n }\n \n fn main() {}"}, {"sha": "b8cc7dee9867d2d75a9df2fcb13a12ffac567995", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: raw pointer `self` is unstable (see issue #44874)\n+error[E0658]: `*const Self` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:19:18\n    |\n LL |     fn bar(self: *const Self);\n@@ -7,7 +7,7 @@ LL |     fn bar(self: *const Self);\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: raw pointer `self` is unstable (see issue #44874)\n+error[E0658]: `*const Foo` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n    |\n LL |     fn foo(self: *const Self) {}\n@@ -16,7 +16,7 @@ LL |     fn foo(self: *const Self) {}\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0658]: raw pointer `self` is unstable (see issue #44874)\n+error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature (see issue #44874)\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:24:18\n    |\n LL |     fn bar(self: *const Self) {}"}, {"sha": "c336cc6299eb55b6837e47d155ae0081c05cad89", "filename": "src/test/ui/privacy/privacy1.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -17,6 +17,20 @@ pub trait Sized {}\n #[lang=\"copy\"]\n pub trait Copy {}\n \n+#[lang=\"deref\"]\n+pub trait Deref {\n+    type Target;\n+}\n+\n+#[lang=\"receiver\"]\n+pub trait Receiver: Deref {}\n+\n+impl<'a, T> Deref for &'a T {\n+    type Target = T;\n+}\n+\n+impl<'a, T> Receiver for &'a T {}\n+\n mod bar {\n     // shouldn't bring in too much\n     pub use self::glob::*;"}, {"sha": "54e01cca6c43a49652a75dd09dc2c862631dbacb", "filename": "src/test/ui/privacy/privacy1.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -1,101 +1,101 @@\n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:128:18\n+  --> $DIR/privacy1.rs:142:18\n    |\n LL |         use bar::baz::{foo, bar};\n    |                  ^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:136:18\n+  --> $DIR/privacy1.rs:150:18\n    |\n LL |         use bar::baz;\n    |                  ^^^\n \n error[E0603]: module `i` is private\n-  --> $DIR/privacy1.rs:160:20\n+  --> $DIR/privacy1.rs:174:20\n    |\n LL |     use self::foo::i::A; //~ ERROR: module `i` is private\n    |                    ^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:100:16\n+  --> $DIR/privacy1.rs:114:16\n    |\n LL |         ::bar::baz::A::foo();   //~ ERROR: module `baz` is private\n    |                ^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:101:16\n+  --> $DIR/privacy1.rs:115:16\n    |\n LL |         ::bar::baz::A::bar();   //~ ERROR: module `baz` is private\n    |                ^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:103:16\n+  --> $DIR/privacy1.rs:117:16\n    |\n LL |         ::bar::baz::A.foo2();   //~ ERROR: module `baz` is private\n    |                ^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:104:16\n+  --> $DIR/privacy1.rs:118:16\n    |\n LL |         ::bar::baz::A.bar2();   //~ ERROR: module `baz` is private\n    |                ^^^\n \n error[E0603]: trait `B` is private\n-  --> $DIR/privacy1.rs:108:16\n+  --> $DIR/privacy1.rs:122:16\n    |\n LL |         ::bar::B::foo();        //~ ERROR: trait `B` is private\n    |                ^\n \n error[E0603]: function `epriv` is private\n-  --> $DIR/privacy1.rs:114:20\n+  --> $DIR/privacy1.rs:128:20\n    |\n LL |             ::bar::epriv(); //~ ERROR: function `epriv` is private\n    |                    ^^^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:123:16\n+  --> $DIR/privacy1.rs:137:16\n    |\n LL |         ::bar::baz::foo(); //~ ERROR: module `baz` is private\n    |                ^^^\n \n error[E0603]: module `baz` is private\n-  --> $DIR/privacy1.rs:124:16\n+  --> $DIR/privacy1.rs:138:16\n    |\n LL |         ::bar::baz::bar(); //~ ERROR: module `baz` is private\n    |                ^^^\n \n error[E0603]: trait `B` is private\n-  --> $DIR/privacy1.rs:152:17\n+  --> $DIR/privacy1.rs:166:17\n    |\n LL |     impl ::bar::B for f32 { fn foo() -> f32 { 1.0 } }\n    |                 ^\n \n error[E0624]: method `bar` is private\n-  --> $DIR/privacy1.rs:73:9\n+  --> $DIR/privacy1.rs:87:9\n    |\n LL |         self::baz::A::bar(); //~ ERROR: method `bar` is private\n    |         ^^^^^^^^^^^^^^^^^\n \n error[E0624]: method `bar` is private\n-  --> $DIR/privacy1.rs:91:5\n+  --> $DIR/privacy1.rs:105:5\n    |\n LL |     bar::A::bar(); //~ ERROR: method `bar` is private\n    |     ^^^^^^^^^^^\n \n error[E0624]: method `bar` is private\n-  --> $DIR/privacy1.rs:98:9\n+  --> $DIR/privacy1.rs:112:9\n    |\n LL |         ::bar::A::bar();        //~ ERROR: method `bar` is private\n    |         ^^^^^^^^^^^^^\n \n error[E0624]: method `bar` is private\n-  --> $DIR/privacy1.rs:101:9\n+  --> $DIR/privacy1.rs:115:9\n    |\n LL |         ::bar::baz::A::bar();   //~ ERROR: module `baz` is private\n    |         ^^^^^^^^^^^^^^^^^^\n \n error[E0624]: method `bar2` is private\n-  --> $DIR/privacy1.rs:104:23\n+  --> $DIR/privacy1.rs:118:23\n    |\n LL |         ::bar::baz::A.bar2();   //~ ERROR: module `baz` is private\n    |                       ^^^^"}, {"sha": "11c90833e7181aed0075ee8d3f7d2694117e3788", "filename": "src/test/ui/span/issue-27522.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -13,7 +13,7 @@\n struct SomeType {}\n \n trait Foo {\n-    fn handler(self: &SomeType); //~ ERROR invalid `self` type\n+    fn handler(self: &SomeType); //~ ERROR invalid method receiver type\n }\n \n fn main() {}"}, {"sha": "767b99a92cb2df777ac5228894bf8881a9a8d03f", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -1,7 +1,7 @@\n-error[E0307]: invalid `self` type: &SomeType\n+error[E0307]: invalid method receiver type: &SomeType\n   --> $DIR/issue-27522.rs:16:22\n    |\n-LL |     fn handler(self: &SomeType); //~ ERROR invalid `self` type\n+LL |     fn handler(self: &SomeType); //~ ERROR invalid method receiver type\n    |                      ^^^^^^^^^\n    |\n    = note: type must be `Self` or a type that dereferences to it"}, {"sha": "f87541b56acf920f02d9f3afb25e2d5a07ba391b", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.rs?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n \n impl Foo {\n     fn foo(self: isize, x: isize) -> isize {\n-        //~^ ERROR invalid `self` type\n+        //~^ ERROR invalid method receiver type\n         self.f + x\n     }\n }\n@@ -27,11 +27,11 @@ struct Bar<T> {\n \n impl<T> Bar<T> {\n     fn foo(self: Bar<isize>, x: isize) -> isize {\n-        //~^ ERROR invalid `self` type\n+        //~^ ERROR invalid method receiver type\n         x\n     }\n     fn bar(self: &Bar<usize>, x: isize) -> isize {\n-        //~^ ERROR invalid `self` type\n+        //~^ ERROR invalid method receiver type\n         x\n     }\n }"}, {"sha": "a229dabcce4a4c6e95e90e79f371f8683a6e621f", "filename": "src/test/ui/ufcs/ufcs-explicit-self-bad.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abaa9344d4c10a45d7725534145007a8284dabe8/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-explicit-self-bad.stderr?ref=abaa9344d4c10a45d7725534145007a8284dabe8", "patch": "@@ -1,28 +1,28 @@\n-error[E0307]: invalid `self` type: isize\n+error[E0307]: invalid method receiver type: isize\n   --> $DIR/ufcs-explicit-self-bad.rs:18:18\n    |\n LL |     fn foo(self: isize, x: isize) -> isize {\n    |                  ^^^^^\n    |\n-   = note: type must be `Foo` or a type that dereferences to it\n+   = note: type must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0307]: invalid `self` type: Bar<isize>\n+error[E0307]: invalid method receiver type: Bar<isize>\n   --> $DIR/ufcs-explicit-self-bad.rs:29:18\n    |\n LL |     fn foo(self: Bar<isize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^\n    |\n-   = note: type must be `Bar<T>` or a type that dereferences to it\n+   = note: type must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error[E0307]: invalid `self` type: &Bar<usize>\n+error[E0307]: invalid method receiver type: &Bar<usize>\n   --> $DIR/ufcs-explicit-self-bad.rs:33:18\n    |\n LL |     fn bar(self: &Bar<usize>, x: isize) -> isize {\n    |                  ^^^^^^^^^^^\n    |\n-   = note: type must be `Bar<T>` or a type that dereferences to it\n+   = note: type must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n error[E0308]: mismatched method receiver"}]}