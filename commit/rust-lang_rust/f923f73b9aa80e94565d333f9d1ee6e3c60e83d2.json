{"sha": "f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MjNmNzNiOWFhODBlOTQ1NjVkMzMzZjlkMWVlNmUzYzYwZTgzZDI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-06T10:11:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-06T10:11:19Z"}, "message": "Rollup merge of #85930 - mominul:array_into_iter, r=m-ou-se\n\nUpdate standard library for IntoIterator implementation of arrays\n\nThis PR partially resolves issue #84513 of updating the standard library part.\n\nI haven't found any remaining doctest examples which are using iterators over e.g. &i32 instead of just i32 in the standard library. Can anyone point me to them if there's remaining any?\n\nThanks!\n\nr? ```@m-ou-se```", "tree": {"sha": "34a86495b5b488fc92903e6bb487fe1246b3e5e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a86495b5b488fc92903e6bb487fe1246b3e5e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvJ9ICRBK7hj4Ov3rIwAAI7EIABLvPXuzn6qIv/O6oDssnz0P\nVO8fOW8g8N//IrSZsc1Zm657uhAIE8+cjTNblbS40SsEuJ7nbUdo8k+i9ozplPUz\nUBgM7AhKyVH2Rs6Nl9ge7Y62yjIacyZnJJDZZ14Y56kJN+Sw1WN1bajHHJB1BFOz\nmgXP+MxtnsONe+q8pj/wxyGnmnmAkj/FT31FanCcIdP1SyuJ626EUiQCb9fzAvmM\nvmfpyZosO6T906vg+oXcJJq2KWmdnMNRAY5zf1A0zkiOi9tRx2B6h9Q9k6eUeHyx\nn4rXnpYTjX+wftWoBKcNj5N8T1L954+Hj26ZTN1N9HHaf5JQ2Cul6z7CQolXd9Y=\n=5U5+\n-----END PGP SIGNATURE-----\n", "payload": "tree 34a86495b5b488fc92903e6bb487fe1246b3e5e0\nparent 679a1d1ac1918e1a44ca71bbb352aeffe5380402\nparent 507d97b26efc002129e5ba084f4361d7fde636ff\nauthor Yuki Okushi <jtitor@2k36.org> 1622974279 +0900\ncommitter GitHub <noreply@github.com> 1622974279 +0900\n\nRollup merge of #85930 - mominul:array_into_iter, r=m-ou-se\n\nUpdate standard library for IntoIterator implementation of arrays\n\nThis PR partially resolves issue #84513 of updating the standard library part.\n\nI haven't found any remaining doctest examples which are using iterators over e.g. &i32 instead of just i32 in the standard library. Can anyone point me to them if there's remaining any?\n\nThanks!\n\nr? ```@m-ou-se```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "html_url": "https://github.com/rust-lang/rust/commit/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679a1d1ac1918e1a44ca71bbb352aeffe5380402", "url": "https://api.github.com/repos/rust-lang/rust/commits/679a1d1ac1918e1a44ca71bbb352aeffe5380402", "html_url": "https://github.com/rust-lang/rust/commit/679a1d1ac1918e1a44ca71bbb352aeffe5380402"}, {"sha": "507d97b26efc002129e5ba084f4361d7fde636ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/507d97b26efc002129e5ba084f4361d7fde636ff", "html_url": "https://github.com/rust-lang/rust/commit/507d97b26efc002129e5ba084f4361d7fde636ff"}], "stats": {"total": 119, "additions": 55, "deletions": 64}, "files": [{"sha": "91eec10d575935ab95bf69ac22962c13e5394988", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -551,19 +551,13 @@ const LEN: usize = 16384;\n #[bench]\n fn bench_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| data.iter().cloned().chain([1].iter().cloned()).collect::<Vec<_>>());\n+    b.iter(|| data.iter().cloned().chain([1]).collect::<Vec<_>>());\n }\n \n #[bench]\n fn bench_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| {\n-        data.iter()\n-            .cloned()\n-            .chain([1].iter().cloned())\n-            .chain([2].iter().cloned())\n-            .collect::<Vec<_>>()\n-    });\n+    b.iter(|| data.iter().cloned().chain([1]).chain([2]).collect::<Vec<_>>());\n }\n \n #[bench]"}, {"sha": "7b87090fb07138f18c17f990304dd15adf1db729", "filename": "library/alloc/src/collections/vec_deque/pair_slices.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -1,4 +1,3 @@\n-use core::array;\n use core::cmp::{self};\n use core::mem::replace;\n \n@@ -37,7 +36,7 @@ impl<'a, 'b, T> PairSlices<'a, 'b, T> {\n     }\n \n     pub fn remainder(self) -> impl Iterator<Item = &'b [T]> {\n-        array::IntoIter::new([self.b0, self.b1])\n+        IntoIterator::into_iter([self.b0, self.b1])\n     }\n }\n "}, {"sha": "4a1d564e2ab879547f8036133d7c0dc296c34c70", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -921,7 +921,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n@@ -950,7 +950,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// #![feature(shrink_to)]\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n@@ -984,7 +984,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     ///\n     /// assert_eq!(vec.capacity(), 10);\n     /// let slice = vec.into_boxed_slice();\n@@ -2586,7 +2586,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut v = vec![1, 2, 3];\n     /// let new = [7, 8];\n-    /// let u: Vec<_> = v.splice(..2, new.iter().cloned()).collect();\n+    /// let u: Vec<_> = v.splice(..2, new).collect();\n     /// assert_eq!(v, &[7, 8, 3]);\n     /// assert_eq!(u, &[1, 2]);\n     /// ```"}, {"sha": "bad765c7f51fab944b3de89a3a956de2dd42f158", "filename": "library/alloc/src/vec/splice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -14,7 +14,7 @@ use super::{Drain, Vec};\n /// ```\n /// let mut v = vec![0, 1, 2];\n /// let new = [7, 8];\n-/// let iter: std::vec::Splice<_> = v.splice(1.., new.iter().cloned());\n+/// let iter: std::vec::Splice<_> = v.splice(1.., new);\n /// ```\n #[derive(Debug)]\n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "c203cdafecb03dd27be6f502965adffb715b6491", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -793,7 +793,7 @@ fn test_drain_leak() {\n fn test_splice() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(2..4, a.iter().cloned());\n+    v.splice(2..4, a);\n     assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n     v.splice(1..3, Some(20));\n     assert_eq!(v, &[1, 20, 11, 12, 5]);\n@@ -803,7 +803,7 @@ fn test_splice() {\n fn test_splice_inclusive_range() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    let t1: Vec<_> = v.splice(2..=3, a.iter().cloned()).collect();\n+    let t1: Vec<_> = v.splice(2..=3, a).collect();\n     assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n     assert_eq!(t1, &[3, 4]);\n     let t2: Vec<_> = v.splice(1..=2, Some(20)).collect();\n@@ -816,15 +816,15 @@ fn test_splice_inclusive_range() {\n fn test_splice_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(5..6, a.iter().cloned());\n+    v.splice(5..6, a);\n }\n \n #[test]\n #[should_panic]\n fn test_splice_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(5..=5, a.iter().cloned());\n+    v.splice(5..=5, a);\n }\n \n #[test]\n@@ -848,7 +848,7 @@ fn test_splice_unbounded() {\n fn test_splice_forget() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    std::mem::forget(v.splice(2..4, a.iter().cloned()));\n+    std::mem::forget(v.splice(2..4, a));\n     assert_eq!(v, &[1, 2]);\n }\n "}, {"sha": "37af3557fdd51ce792459ec680f32019413bbf03", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -416,7 +416,7 @@ impl<T, const N: usize> [T; N] {\n     {\n         // SAFETY: we know for certain that this iterator will yield exactly `N`\n         // items.\n-        unsafe { collect_into_array_unchecked(&mut IntoIter::new(self).map(f)) }\n+        unsafe { collect_into_array_unchecked(&mut IntoIterator::into_iter(self).map(f)) }\n     }\n \n     /// 'Zips up' two arrays into a single array of pairs.\n@@ -437,7 +437,7 @@ impl<T, const N: usize> [T; N] {\n     /// ```\n     #[unstable(feature = \"array_zip\", issue = \"80094\")]\n     pub fn zip<U>(self, rhs: [U; N]) -> [(T, U); N] {\n-        let mut iter = IntoIter::new(self).zip(IntoIter::new(rhs));\n+        let mut iter = IntoIterator::into_iter(self).zip(rhs);\n \n         // SAFETY: we know for certain that this iterator will yield exactly `N`\n         // items."}, {"sha": "2da3d6a72fb6f18049028616880ff5f137a10a0d", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -58,7 +58,7 @@ impl char {\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v.iter().cloned())\n+    ///     decode_utf16(v)\n     ///         .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n     ///         .collect::<Vec<_>>(),\n     ///     vec![\n@@ -82,7 +82,7 @@ impl char {\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v.iter().cloned())\n+    ///     decode_utf16(v)\n     ///        .map(|r| r.unwrap_or(REPLACEMENT_CHARACTER))\n     ///        .collect::<String>(),\n     ///     \"\ud834\udd1emus\ufffdic\ufffd\""}, {"sha": "0ae625bdb68c6244f20b7a65c5e6154d6594afd4", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -1,4 +1,4 @@\n-use core::array::{self, IntoIter};\n+use core::array;\n use core::convert::TryFrom;\n \n #[test]\n@@ -41,44 +41,44 @@ fn array_try_from() {\n #[test]\n fn iterator_collect() {\n     let arr = [0, 1, 2, 5, 9];\n-    let v: Vec<_> = IntoIter::new(arr.clone()).collect();\n+    let v: Vec<_> = IntoIterator::into_iter(arr.clone()).collect();\n     assert_eq!(&arr[..], &v[..]);\n }\n \n #[test]\n fn iterator_rev_collect() {\n     let arr = [0, 1, 2, 5, 9];\n-    let v: Vec<_> = IntoIter::new(arr.clone()).rev().collect();\n+    let v: Vec<_> = IntoIterator::into_iter(arr.clone()).rev().collect();\n     assert_eq!(&v[..], &[9, 5, 2, 1, 0]);\n }\n \n #[test]\n fn iterator_nth() {\n     let v = [0, 1, 2, 3, 4];\n     for i in 0..v.len() {\n-        assert_eq!(IntoIter::new(v.clone()).nth(i).unwrap(), v[i]);\n+        assert_eq!(IntoIterator::into_iter(v.clone()).nth(i).unwrap(), v[i]);\n     }\n-    assert_eq!(IntoIter::new(v.clone()).nth(v.len()), None);\n+    assert_eq!(IntoIterator::into_iter(v.clone()).nth(v.len()), None);\n \n-    let mut iter = IntoIter::new(v);\n+    let mut iter = IntoIterator::into_iter(v);\n     assert_eq!(iter.nth(2).unwrap(), v[2]);\n     assert_eq!(iter.nth(1).unwrap(), v[4]);\n }\n \n #[test]\n fn iterator_last() {\n     let v = [0, 1, 2, 3, 4];\n-    assert_eq!(IntoIter::new(v).last().unwrap(), 4);\n-    assert_eq!(IntoIter::new([0]).last().unwrap(), 0);\n+    assert_eq!(IntoIterator::into_iter(v).last().unwrap(), 4);\n+    assert_eq!(IntoIterator::into_iter([0]).last().unwrap(), 0);\n \n-    let mut it = IntoIter::new([0, 9, 2, 4]);\n+    let mut it = IntoIterator::into_iter([0, 9, 2, 4]);\n     assert_eq!(it.next_back(), Some(4));\n     assert_eq!(it.last(), Some(2));\n }\n \n #[test]\n fn iterator_clone() {\n-    let mut it = IntoIter::new([0, 2, 4, 6, 8]);\n+    let mut it = IntoIterator::into_iter([0, 2, 4, 6, 8]);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next_back(), Some(8));\n     let mut clone = it.clone();\n@@ -92,7 +92,7 @@ fn iterator_clone() {\n \n #[test]\n fn iterator_fused() {\n-    let mut it = IntoIter::new([0, 9, 2]);\n+    let mut it = IntoIterator::into_iter([0, 9, 2]);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(9));\n     assert_eq!(it.next(), Some(2));\n@@ -105,7 +105,7 @@ fn iterator_fused() {\n \n #[test]\n fn iterator_len() {\n-    let mut it = IntoIter::new([0, 1, 2, 5, 9]);\n+    let mut it = IntoIterator::into_iter([0, 1, 2, 5, 9]);\n     assert_eq!(it.size_hint(), (5, Some(5)));\n     assert_eq!(it.len(), 5);\n     assert_eq!(it.is_empty(), false);\n@@ -121,7 +121,7 @@ fn iterator_len() {\n     assert_eq!(it.is_empty(), false);\n \n     // Empty\n-    let it = IntoIter::new([] as [String; 0]);\n+    let it = IntoIterator::into_iter([] as [String; 0]);\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.len(), 0);\n     assert_eq!(it.is_empty(), true);\n@@ -130,23 +130,23 @@ fn iterator_len() {\n #[test]\n fn iterator_count() {\n     let v = [0, 1, 2, 3, 4];\n-    assert_eq!(IntoIter::new(v.clone()).count(), 5);\n+    assert_eq!(IntoIterator::into_iter(v.clone()).count(), 5);\n \n-    let mut iter2 = IntoIter::new(v);\n+    let mut iter2 = IntoIterator::into_iter(v);\n     iter2.next();\n     iter2.next();\n     assert_eq!(iter2.count(), 3);\n }\n \n #[test]\n fn iterator_flat_map() {\n-    assert!((0..5).flat_map(|i| IntoIter::new([2 * i, 2 * i + 1])).eq(0..10));\n+    assert!((0..5).flat_map(|i| IntoIterator::into_iter([2 * i, 2 * i + 1])).eq(0..10));\n }\n \n #[test]\n fn iterator_debug() {\n     let arr = [0, 1, 2, 5, 9];\n-    assert_eq!(format!(\"{:?}\", IntoIter::new(arr)), \"IntoIter([0, 1, 2, 5, 9])\",);\n+    assert_eq!(format!(\"{:?}\", IntoIterator::into_iter(arr)), \"IntoIter([0, 1, 2, 5, 9])\",);\n }\n \n #[test]\n@@ -176,14 +176,14 @@ fn iterator_drops() {\n     // Simple: drop new iterator.\n     let i = Cell::new(0);\n     {\n-        IntoIter::new(five(&i));\n+        IntoIterator::into_iter(five(&i));\n     }\n     assert_eq!(i.get(), 5);\n \n     // Call `next()` once.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         let _x = iter.next();\n         assert_eq!(i.get(), 0);\n         assert_eq!(iter.count(), 4);\n@@ -194,7 +194,7 @@ fn iterator_drops() {\n     // Check `clone` and calling `next`/`next_back`.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         iter.next();\n         assert_eq!(i.get(), 1);\n         iter.next_back();\n@@ -217,7 +217,7 @@ fn iterator_drops() {\n     // Check via `nth`.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         let _x = iter.nth(2);\n         assert_eq!(i.get(), 2);\n         let _y = iter.last();\n@@ -227,13 +227,13 @@ fn iterator_drops() {\n \n     // Check every element.\n     let i = Cell::new(0);\n-    for (index, _x) in IntoIter::new(five(&i)).enumerate() {\n+    for (index, _x) in IntoIterator::into_iter(five(&i)).enumerate() {\n         assert_eq!(i.get(), index);\n     }\n     assert_eq!(i.get(), 5);\n \n     let i = Cell::new(0);\n-    for (index, _x) in IntoIter::new(five(&i)).rev().enumerate() {\n+    for (index, _x) in IntoIterator::into_iter(five(&i)).rev().enumerate() {\n         assert_eq!(i.get(), index);\n     }\n     assert_eq!(i.get(), 5);"}, {"sha": "797bfd957f906ec2cc4c28632cc621e0b3f1fcc2", "filename": "library/core/tests/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -236,9 +236,7 @@ fn test_zip_trusted_random_access_composition() {\n fn test_double_ended_zip() {\n     let xs = [1, 2, 3, 4, 5, 6];\n     let ys = [1, 2, 3, 7];\n-    let a = xs.iter().cloned();\n-    let b = ys.iter().cloned();\n-    let mut it = a.zip(b);\n+    let mut it = xs.iter().cloned().zip(ys);\n     assert_eq!(it.next(), Some((1, 1)));\n     assert_eq!(it.next(), Some((2, 2)));\n     assert_eq!(it.next_back(), Some((4, 7)));"}, {"sha": "457e5ae60494a264e03a64c8948982f7922352ca", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -9,31 +9,31 @@ use std::{\n };\n \n pub fn yes_iterator() -> impl Iterator<Item = i32> {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_fused_iterator() -> impl FusedIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_trusted_len() -> impl TrustedLen {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_clone() -> impl Clone {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_debug() -> impl Debug {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n "}, {"sha": "4f343f3f97ea478420fc368a6a1a18828be9b1a0", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-33.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f923f73b9aa80e94565d333f9d1ee6e3c60e83d2/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs?ref=f923f73b9aa80e94565d333f9d1ee6e3c60e83d2", "patch": "@@ -9,31 +9,31 @@ use std::{\n };\n \n pub fn yes_iterator() -> impl Iterator<Item = i32> {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_fused_iterator() -> impl FusedIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_trusted_len() -> impl TrustedLen {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_clone() -> impl Clone {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_debug() -> impl Debug {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n "}]}