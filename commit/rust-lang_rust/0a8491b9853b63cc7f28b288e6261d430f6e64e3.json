{"sha": "0a8491b9853b63cc7f28b288e6261d430f6e64e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhODQ5MWI5ODUzYjYzY2M3ZjI4YjI4OGU2MjYxZDQzMGY2ZTY0ZTM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T12:26:37Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T12:26:37Z"}, "message": "Simplify integer reading/writing.", "tree": {"sha": "2a0faa5da8cd48a1fe52b3f26d54a6b59b18ab90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0faa5da8cd48a1fe52b3f26d54a6b59b18ab90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8491b9853b63cc7f28b288e6261d430f6e64e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8491b9853b63cc7f28b288e6261d430f6e64e3", "html_url": "https://github.com/rust-lang/rust/commit/0a8491b9853b63cc7f28b288e6261d430f6e64e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8491b9853b63cc7f28b288e6261d430f6e64e3/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961137c018bf82b52fced7de8f03cc3bc66b049e", "url": "https://api.github.com/repos/rust-lang/rust/commits/961137c018bf82b52fced7de8f03cc3bc66b049e", "html_url": "https://github.com/rust-lang/rust/commit/961137c018bf82b52fced7de8f03cc3bc66b049e"}], "stats": {"total": 114, "additions": 19, "deletions": 95}, "files": [{"sha": "afd6f78a0dca4794d1a762832e910bf2178a21e9", "filename": "src/interpreter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a8491b9853b63cc7f28b288e6261d430f6e64e3/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8491b9853b63cc7f28b288e6261d430f6e64e3/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=0a8491b9853b63cc7f28b288e6261d430f6e64e3", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 let offset_arg = try!(self.eval_operand(&args[1]));\n                 let ptr = try!(self.memory.read_ptr(ptr_arg));\n                 // TODO(tsion): read_isize\n-                let offset = try!(self.memory.read_i64(offset_arg));\n+                let offset = try!(self.memory.read_int(offset_arg, 8));\n                 let result_ptr = ptr.offset(offset as isize * pointee_size);\n                 try!(self.memory.write_ptr(dest, result_ptr));\n             }\n@@ -435,7 +435,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                             (&ty::TyArray(_, length), &ty::TySlice(_)) =>\n                                 // TODO(tsion): Add write_usize? (Host/target issues.)\n-                                self.memory.write_u64(dest.offset(8), length as u64),\n+                                self.memory.write_uint(dest.offset(8), length as u64, 8),\n \n                             _ => panic!(\"can't handle cast: {:?}\", rvalue),\n                         }\n@@ -548,7 +548,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             Integral(int) => {\n                 // TODO(tsion): Check int constant type.\n                 let ptr = self.memory.allocate(8);\n-                try!(self.memory.write_u64(ptr, int.to_u64_unchecked()));\n+                try!(self.memory.write_uint(ptr, int.to_u64_unchecked(), 8));\n                 Ok(ptr)\n             }\n             Str(ref _s) => unimplemented!(),"}, {"sha": "86b00452bc00a9b8f1c742fb749fbc68be1e1273", "filename": "src/memory.rs", "status": "modified", "additions": 16, "deletions": 92, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/0a8491b9853b63cc7f28b288e6261d430f6e64e3/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8491b9853b63cc7f28b288e6261d430f6e64e3/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=0a8491b9853b63cc7f28b288e6261d430f6e64e3", "patch": "@@ -170,14 +170,14 @@ impl Memory {\n         use syntax::ast::{IntTy, UintTy};\n         match ty.sty {\n             ty::TyBool              => self.read_bool(ptr).map(PrimVal::Bool),\n-            ty::TyInt(IntTy::I8)    => self.read_i8(ptr).map(PrimVal::I8),\n-            ty::TyInt(IntTy::I16)   => self.read_i16(ptr).map(PrimVal::I16),\n-            ty::TyInt(IntTy::I32)   => self.read_i32(ptr).map(PrimVal::I32),\n-            ty::TyInt(IntTy::I64)   => self.read_i64(ptr).map(PrimVal::I64),\n-            ty::TyUint(UintTy::U8)  => self.read_u8(ptr).map(PrimVal::U8),\n-            ty::TyUint(UintTy::U16) => self.read_u16(ptr).map(PrimVal::U16),\n-            ty::TyUint(UintTy::U32) => self.read_u32(ptr).map(PrimVal::U32),\n-            ty::TyUint(UintTy::U64) => self.read_u64(ptr).map(PrimVal::U64),\n+            ty::TyInt(IntTy::I8)    => self.read_int(ptr, 1).map(|n| PrimVal::I8(n as i8)),\n+            ty::TyInt(IntTy::I16)   => self.read_int(ptr, 2).map(|n| PrimVal::I16(n as i16)),\n+            ty::TyInt(IntTy::I32)   => self.read_int(ptr, 4).map(|n| PrimVal::I32(n as i32)),\n+            ty::TyInt(IntTy::I64)   => self.read_int(ptr, 8).map(|n| PrimVal::I64(n as i64)),\n+            ty::TyUint(UintTy::U8)  => self.read_uint(ptr, 1).map(|n| PrimVal::U8(n as u8)),\n+            ty::TyUint(UintTy::U16) => self.read_uint(ptr, 2).map(|n| PrimVal::U16(n as u16)),\n+            ty::TyUint(UintTy::U32) => self.read_uint(ptr, 4).map(|n| PrimVal::U32(n as u32)),\n+            ty::TyUint(UintTy::U64) => self.read_uint(ptr, 8).map(|n| PrimVal::U64(n as u64)),\n \n             // TODO(tsion): Pick the PrimVal dynamically.\n             ty::TyInt(IntTy::Is)    => self.read_int(ptr, POINTER_SIZE).map(PrimVal::I64),\n@@ -189,14 +189,14 @@ impl Memory {\n     pub fn write_primval(&mut self, ptr: Pointer, val: PrimVal) -> EvalResult<()> {\n         match val {\n             PrimVal::Bool(b) => self.write_bool(ptr, b),\n-            PrimVal::I8(n)   => self.write_i8(ptr, n),\n-            PrimVal::I16(n)  => self.write_i16(ptr, n),\n-            PrimVal::I32(n)  => self.write_i32(ptr, n),\n-            PrimVal::I64(n)  => self.write_i64(ptr, n),\n-            PrimVal::U8(n)   => self.write_u8(ptr, n),\n-            PrimVal::U16(n)  => self.write_u16(ptr, n),\n-            PrimVal::U32(n)  => self.write_u32(ptr, n),\n-            PrimVal::U64(n)  => self.write_u64(ptr, n),\n+            PrimVal::I8(n)   => self.write_int(ptr, n as i64, 1),\n+            PrimVal::I16(n)  => self.write_int(ptr, n as i64, 2),\n+            PrimVal::I32(n)  => self.write_int(ptr, n as i64, 4),\n+            PrimVal::I64(n)  => self.write_int(ptr, n as i64, 8),\n+            PrimVal::U8(n)   => self.write_uint(ptr, n as u64, 1),\n+            PrimVal::U16(n)  => self.write_uint(ptr, n as u64, 2),\n+            PrimVal::U32(n)  => self.write_uint(ptr, n as u64, 4),\n+            PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n         }\n     }\n \n@@ -215,44 +215,6 @@ impl Memory {\n         Ok(())\n     }\n \n-    pub fn read_i8(&self, ptr: Pointer) -> EvalResult<i8> {\n-        self.get_bytes(ptr, 1).map(|b| b[0] as i8)\n-    }\n-\n-    pub fn write_i8(&mut self, ptr: Pointer, n: i8) -> EvalResult<()> {\n-        self.get_bytes_mut(ptr, 1).map(|b| b[0] = n as u8)\n-    }\n-\n-    pub fn read_i16(&self, ptr: Pointer) -> EvalResult<i16> {\n-        self.get_bytes(ptr, 2).map(byteorder::NativeEndian::read_i16)\n-    }\n-\n-    pub fn write_i16(&mut self, ptr: Pointer, n: i16) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, 2));\n-        byteorder::NativeEndian::write_i16(bytes, n);\n-        Ok(())\n-    }\n-\n-    pub fn read_i32(&self, ptr: Pointer) -> EvalResult<i32> {\n-        self.get_bytes(ptr, 4).map(byteorder::NativeEndian::read_i32)\n-    }\n-\n-    pub fn write_i32(&mut self, ptr: Pointer, n: i32) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, 4));\n-        byteorder::NativeEndian::write_i32(bytes, n);\n-        Ok(())\n-    }\n-\n-    pub fn read_i64(&self, ptr: Pointer) -> EvalResult<i64> {\n-        self.get_bytes(ptr, 8).map(byteorder::NativeEndian::read_i64)\n-    }\n-\n-    pub fn write_i64(&mut self, ptr: Pointer, n: i64) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, 8));\n-        byteorder::NativeEndian::write_i64(bytes, n);\n-        Ok(())\n-    }\n-\n     pub fn read_int(&self, ptr: Pointer, size: usize) -> EvalResult<i64> {\n         self.get_bytes(ptr, size).map(|mut b| b.read_int::<NativeEndian>(size).unwrap())\n     }\n@@ -261,44 +223,6 @@ impl Memory {\n         self.get_bytes_mut(ptr, size).map(|mut b| b.write_int::<NativeEndian>(n, size).unwrap())\n     }\n \n-    pub fn read_u8(&self, ptr: Pointer) -> EvalResult<u8> {\n-        self.get_bytes(ptr, 1).map(|b| b[0] as u8)\n-    }\n-\n-    pub fn write_u8(&mut self, ptr: Pointer, n: u8) -> EvalResult<()> {\n-        self.get_bytes_mut(ptr, 1).map(|b| b[0] = n as u8)\n-    }\n-\n-    pub fn read_u16(&self, ptr: Pointer) -> EvalResult<u16> {\n-        self.get_bytes(ptr, 2).map(byteorder::NativeEndian::read_u16)\n-    }\n-\n-    pub fn write_u16(&mut self, ptr: Pointer, n: u16) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, 2));\n-        byteorder::NativeEndian::write_u16(bytes, n);\n-        Ok(())\n-    }\n-\n-    pub fn read_u32(&self, ptr: Pointer) -> EvalResult<u32> {\n-        self.get_bytes(ptr, 4).map(byteorder::NativeEndian::read_u32)\n-    }\n-\n-    pub fn write_u32(&mut self, ptr: Pointer, n: u32) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, 4));\n-        byteorder::NativeEndian::write_u32(bytes, n);\n-        Ok(())\n-    }\n-\n-    pub fn read_u64(&self, ptr: Pointer) -> EvalResult<u64> {\n-        self.get_bytes(ptr, 8).map(byteorder::NativeEndian::read_u64)\n-    }\n-\n-    pub fn write_u64(&mut self, ptr: Pointer, n: u64) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, 8));\n-        byteorder::NativeEndian::write_u64(bytes, n);\n-        Ok(())\n-    }\n-\n     pub fn read_uint(&self, ptr: Pointer, size: usize) -> EvalResult<u64> {\n         self.get_bytes(ptr, size).map(|mut b| b.read_uint::<NativeEndian>(size).unwrap())\n     }"}]}