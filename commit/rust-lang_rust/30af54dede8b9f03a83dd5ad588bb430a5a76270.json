{"sha": "30af54dede8b9f03a83dd5ad588bb430a5a76270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYWY1NGRlZGU4YjlmMDNhODNkZDVhZDU4OGJiNDMwYTVhNzYyNzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-08T00:20:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:24Z"}, "message": "Dict -> Struct, StructDef -> VariantData, def -> data", "tree": {"sha": "34ffdf424d6b9e054b6f36470cd97f401434db96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34ffdf424d6b9e054b6f36470cd97f401434db96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30af54dede8b9f03a83dd5ad588bb430a5a76270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30af54dede8b9f03a83dd5ad588bb430a5a76270", "html_url": "https://github.com/rust-lang/rust/commit/30af54dede8b9f03a83dd5ad588bb430a5a76270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30af54dede8b9f03a83dd5ad588bb430a5a76270/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e3851aa7bbd49294c20cc63eef9974f20192c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e3851aa7bbd49294c20cc63eef9974f20192c8", "html_url": "https://github.com/rust-lang/rust/commit/f4e3851aa7bbd49294c20cc63eef9974f20192c8"}], "stats": {"total": 362, "additions": 181, "deletions": 181}, "files": [{"sha": "a3542ff9b10778742ba206daadcac703f4d39372", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -134,11 +134,11 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             ItemEnum(ref enum_definition, _) => {\n                 for v in &enum_definition.variants {\n                     let variant_def_index =\n-                        self.insert_def(v.node.def.id,\n+                        self.insert_def(v.node.data.id,\n                                         NodeVariant(&**v),\n                                         DefPathData::EnumVariant(v.node.name));\n \n-                    for field in &v.node.def.fields {\n+                    for field in &v.node.data.fields {\n                         self.create_def_with_parent(\n                             Some(variant_def_index),\n                             field.node.id,\n@@ -150,7 +150,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             }\n             ItemStruct(ref struct_def, _) => {\n                 // If this is a tuple-like struct, register the constructor.\n-                if struct_def.kind != VariantKind::Dict {\n+                if struct_def.kind != VariantKind::Struct {\n                     self.insert_def(struct_def.id,\n                                     NodeStructCtor(&**struct_def),\n                                     DefPathData::StructCtor);"}, {"sha": "1e31bfe9acabf1576a0f5c9b3c6c5b15a8bb3356", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -124,7 +124,7 @@ pub enum Node<'ast> {\n     NodeBlock(&'ast Block),\n \n     /// NodeStructCtor represents a tuple struct.\n-    NodeStructCtor(&'ast StructDef),\n+    NodeStructCtor(&'ast VariantData),\n \n     NodeLifetime(&'ast Lifetime),\n     NodeTyParam(&'ast TyParam)\n@@ -149,7 +149,7 @@ pub enum MapEntry<'ast> {\n     EntryLocal(NodeId, &'ast Pat),\n     EntryPat(NodeId, &'ast Pat),\n     EntryBlock(NodeId, &'ast Block),\n-    EntryStructCtor(NodeId, &'ast StructDef),\n+    EntryStructCtor(NodeId, &'ast VariantData),\n     EntryLifetime(NodeId, &'ast Lifetime),\n     EntryTyParam(NodeId, &'ast TyParam),\n \n@@ -471,7 +471,7 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n-    pub fn expect_struct(&self, id: NodeId) -> &'ast StructDef {\n+    pub fn expect_struct(&self, id: NodeId) -> &'ast VariantData {\n         match self.find(id) {\n             Some(NodeItem(i)) => {\n                 match i.node {\n@@ -480,8 +480,8 @@ impl<'ast> Map<'ast> {\n                 }\n             }\n             Some(NodeVariant(variant)) => {\n-                match variant.node.def.kind {\n-                    VariantKind::Dict => &variant.node.def,\n+                match variant.node.data.kind {\n+                    VariantKind::Struct => &variant.node.data,\n                     _ => panic!(\"struct ID bound to enum variant that isn't struct-like\"),\n                 }\n             }"}, {"sha": "f5c6cfe2437dcc66610b33d4cb58636946888af1", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -661,8 +661,8 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n         hir_visit::walk_fn(self, fk, decl, body, span);\n     }\n \n-    fn visit_struct_def(&mut self,\n-                        s: &hir::StructDef,\n+    fn visit_variant_data(&mut self,\n+                        s: &hir::VariantData,\n                         name: ast::Name,\n                         g: &hir::Generics,\n                         item_id: ast::NodeId,\n@@ -811,8 +811,8 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n         ast_visit::walk_fn(self, fk, decl, body, span);\n     }\n \n-    fn visit_struct_def(&mut self,\n-                        s: &ast::StructDef,\n+    fn visit_variant_data(&mut self,\n+                        s: &ast::VariantData,\n                         ident: ast::Ident,\n                         g: &ast::Generics,\n                         item_id: ast::NodeId,"}, {"sha": "14c11af6f3863293f4f4e51dee855bad2bf3ef2a", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -150,9 +150,9 @@ pub trait LateLintPass: LintPass {\n     fn check_trait_item(&mut self, _: &LateContext, _: &hir::TraitItem) { }\n     fn check_impl_item(&mut self, _: &LateContext, _: &hir::ImplItem) { }\n     fn check_struct_def(&mut self, _: &LateContext,\n-        _: &hir::StructDef, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n+        _: &hir::VariantData, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n     fn check_struct_def_post(&mut self, _: &LateContext,\n-        _: &hir::StructDef, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n+        _: &hir::VariantData, _: ast::Name, _: &hir::Generics, _: ast::NodeId) { }\n     fn check_struct_field(&mut self, _: &LateContext, _: &hir::StructField) { }\n     fn check_variant(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) { }\n     fn check_variant_post(&mut self, _: &LateContext, _: &hir::Variant, _: &hir::Generics) { }\n@@ -192,9 +192,9 @@ pub trait EarlyLintPass: LintPass {\n     fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n     fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n     fn check_struct_def(&mut self, _: &EarlyContext,\n-        _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n+        _: &ast::VariantData, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n     fn check_struct_def_post(&mut self, _: &EarlyContext,\n-        _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n+        _: &ast::VariantData, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n     fn check_struct_field(&mut self, _: &EarlyContext, _: &ast::StructField) { }\n     fn check_variant(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n     fn check_variant_post(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }"}, {"sha": "2bee3f296c9cce9e00f86a16af8187fdd6c06846", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -315,7 +315,7 @@ fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         let vid = variant.did;\n         let variant_node_id = ecx.local_id(vid);\n \n-        if let ty::VariantKind::Dict = variant.kind() {\n+        if let ty::VariantKind::Struct = variant.kind() {\n             // tuple-like enum variant fields aren't really items so\n             // don't try to encode them.\n             for field in &variant.fields {\n@@ -328,7 +328,7 @@ fn encode_enum_variant_info<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_def_id_and_key(ecx, rbml_w, vid);\n         encode_family(rbml_w, match variant.kind() {\n             ty::VariantKind::Unit | ty::VariantKind::Tuple => 'v',\n-            ty::VariantKind::Dict => 'V'\n+            ty::VariantKind::Struct => 'V'\n         });\n         encode_name(rbml_w, variant.name);\n         encode_parent_item(rbml_w, ecx.tcx.map.local_def_id(id));\n@@ -1019,7 +1019,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_attributes(rbml_w, &item.attrs);\n         encode_repr_attrs(rbml_w, ecx, &item.attrs);\n         for v in &enum_definition.variants {\n-            encode_variant_id(rbml_w, ecx.tcx.map.local_def_id(v.node.def.id));\n+            encode_variant_id(rbml_w, ecx.tcx.map.local_def_id(v.node.data.id));\n         }\n         encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n         encode_path(rbml_w, path);\n@@ -1068,7 +1068,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         // Encode inherent implementations for this structure.\n         encode_inherent_implementations(ecx, rbml_w, def_id);\n \n-        if struct_def.kind != hir::VariantKind::Dict {\n+        if struct_def.kind != hir::VariantKind::Struct {\n             let ctor_did = ecx.tcx.map.local_def_id(struct_def.id);\n             rbml_w.wr_tagged_u64(tag_items_data_item_struct_ctor,\n                                  def_to_u64(ctor_did));\n@@ -1081,7 +1081,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         }\n \n         // If this is a tuple-like struct, encode the type of the constructor.\n-        if struct_def.kind != hir::VariantKind::Dict {\n+        if struct_def.kind != hir::VariantKind::Struct {\n             encode_info_for_struct_ctor(ecx, rbml_w, item.name, struct_def.id, index, item.id);\n         }\n       }"}, {"sha": "9bf70cce602ee6c735d58b96ab8270b2326c9de3", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1316,11 +1316,11 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n                 {\n                     debug!(\"astencode: copying variant {:?} => {:?}\",\n                            orig_variant.did, i_variant.node.id);\n-                    copy_item_type(dcx, i_variant.node.def.id, orig_variant.did);\n+                    copy_item_type(dcx, i_variant.node.data.id, orig_variant.did);\n                 }\n             }\n             hir::ItemStruct(ref def, _) => {\n-                if def.kind != hir::VariantKind::Dict {\n+                if def.kind != hir::VariantKind::Struct {\n                     let ctor_did = dcx.tcx.lookup_adt_def(orig_did)\n                         .struct_variant().did;\n                     debug!(\"astencode: copying ctor {:?} => {:?}\", ctor_did,"}, {"sha": "4d7dd60a27156cff033ea7ec03f96039c3239167", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -518,7 +518,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n \n         ty::TyEnum(adt, _) | ty::TyStruct(adt, _)  => {\n             let v = adt.variant_of_ctor(ctor);\n-            if let VariantKind::Dict = v.kind() {\n+            if let VariantKind::Struct = v.kind() {\n                 let field_pats: Vec<_> = v.fields.iter()\n                     .zip(pats)\n                     .filter(|&(_, ref pat)| pat.node != hir::PatWild(hir::PatWildSingle))"}, {"sha": "226c27ea62048d2d6a9c3e95faa96ccc7acf9086", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n         let mut discriminant_map = self.discriminant_map.borrow_mut();\n         match enum_definition.variants.first() {\n             None => { return; }\n-            Some(variant) if discriminant_map.contains_key(&variant.node.def.id) => {\n+            Some(variant) if discriminant_map.contains_key(&variant.node.data.id) => {\n                 return;\n             }\n             _ => {}\n@@ -177,7 +177,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n         // Go through all the variants.\n         let mut variant_stack: Vec<ast::NodeId> = Vec::new();\n         for variant in enum_definition.variants.iter().rev() {\n-            variant_stack.push(variant.node.def.id);\n+            variant_stack.push(variant.node.data.id);\n             // When we find an expression, every variant currently on the stack\n             // is affected by that expression.\n             if let Some(ref expr) = variant.node.disr_expr {\n@@ -208,7 +208,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n \n     fn visit_variant(&mut self, variant: &'ast hir::Variant,\n                      _: &'ast hir::Generics, _: ast::NodeId) {\n-        let variant_id = variant.node.def.id;\n+        let variant_id = variant.node.data.id;\n         let maybe_expr;\n         if let Some(get_expr) = self.discriminant_map.borrow().get(&variant_id) {\n             // This is necessary because we need to let the `discriminant_map`"}, {"sha": "e0850a55ff0aaa9f102e0c221b476299260935df", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -63,7 +63,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n     fn variant_expr<'a>(variants: &'a [P<hir::Variant>], id: ast::NodeId)\n                         -> Option<&'a Expr> {\n         for variant in variants {\n-            if variant.node.def.id == id {\n+            if variant.node.data.id == id {\n                 return variant.node.disr_expr.as_ref().map(|e| &**e);\n             }\n         }"}, {"sha": "d0d6cf39af76131decdb7087787a0c2031a05ecf", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n \n-    fn visit_struct_def(&mut self, def: &hir::StructDef, _: ast::Name,\n+    fn visit_variant_data(&mut self, def: &hir::VariantData, _: ast::Name,\n                         _: &hir::Generics, _: ast::NodeId, _: codemap::Span) {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n@@ -339,7 +339,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n         }\n         match item.node {\n             hir::ItemEnum(ref enum_def, _) if allow_dead_code => {\n-                self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.def.id));\n+                self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.data.id));\n             }\n             hir::ItemTrait(_, _, _, ref trait_items) => {\n                 for trait_item in trait_items {\n@@ -426,7 +426,7 @@ fn find_live(tcx: &ty::ctxt,\n \n fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n     match item.node {\n-        hir::ItemStruct(ref struct_def, _) if struct_def.kind != hir::VariantKind::Dict => {\n+        hir::ItemStruct(ref struct_def, _) if struct_def.kind != hir::VariantKind::Struct => {\n             Some(struct_def.id)\n         }\n         _ => None\n@@ -466,7 +466,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool {\n-        !self.symbol_is_live(variant.def.id, None)\n+        !self.symbol_is_live(variant.data.id, None)\n             && !has_allow_dead_code_or_lang_attr(&variant.attrs)\n     }\n \n@@ -542,7 +542,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n                 hir::ItemEnum(ref enum_def, _) => {\n                     for variant in &enum_def.variants {\n                         if self.should_warn_about_variant(&variant.node) {\n-                            self.warn_dead_code(variant.node.def.id, variant.span,\n+                            self.warn_dead_code(variant.node.data.id, variant.span,\n                                                 variant.node.name, \"variant\");\n                         }\n                     }"}, {"sha": "ef2b918a9f5d7ea449f5e8df4d4d87a947822a85", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -44,13 +44,13 @@ pub enum Def {\n              ast::NodeId), // expr node that creates the closure\n \n     /// Note that if it's a tuple struct's definition, the node id of the DefId\n-    /// may either refer to the item definition's id or the StructDef.ctor_id.\n+    /// may either refer to the item definition's id or the VariantData.ctor_id.\n     ///\n     /// The cases that I have encountered so far are (this is not exhaustive):\n     /// - If it's a ty_path referring to some tuple struct, then DefMap maps\n     ///   it to a def whose id is the item definition's id.\n     /// - If it's an ExprPath referring to some tuple struct, then DefMap maps\n-    ///   it to a def whose id is the StructDef.ctor_id.\n+    ///   it to a def whose id is the VariantData.ctor_id.\n     DefStruct(DefId),\n     DefLabel(ast::NodeId),\n     DefMethod(DefId),"}, {"sha": "df5582e9414c16e16b3bf510eb4031dd9ade9e2b", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n                       |v| visit::walk_item(v, i), required);\n \n         if let hir::ItemStruct(ref sd, _) = i.node {\n-            if sd.kind != hir::VariantKind::Dict {\n+            if sd.kind != hir::VariantKind::Struct {\n                 self.annotate(sd.id, true, &i.attrs, i.span, |_| {}, true)\n             }\n         }\n@@ -208,7 +208,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, var: &Variant, g: &'v Generics, item_id: NodeId) {\n-        self.annotate(var.node.def.id, true, &var.node.attrs, var.span,\n+        self.annotate(var.node.data.id, true, &var.node.attrs, var.span,\n                       |v| visit::walk_variant(v, var, g, item_id), true)\n     }\n "}, {"sha": "975a5adad2bd21a3f23624829a84cf23e2f3c2ad", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1533,7 +1533,7 @@ impl<'tcx, 'container> Hash for AdtDefData<'tcx, 'container> {\n pub enum AdtKind { Struct, Enum }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub enum VariantKind { Dict, Tuple, Unit }\n+pub enum VariantKind { Struct, Tuple, Unit }\n \n impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     fn new(tcx: &ctxt<'tcx>,\n@@ -1716,7 +1716,7 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n             Some(&FieldDefData { name, .. }) if name == special_idents::unnamed_field.name => {\n                 VariantKind::Tuple\n             }\n-            Some(_) => VariantKind::Dict\n+            Some(_) => VariantKind::Struct\n         }\n     }\n "}, {"sha": "a9cfc7138d8d967808aa44183e7d833035c9b52c", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -301,7 +301,7 @@ mod svh_visitor {\n     }\n \n     impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> {\n-        fn visit_struct_def(&mut self, s: &StructDef, name: Name,\n+        fn visit_variant_data(&mut self, s: &VariantData, name: Name,\n                             g: &Generics, _: NodeId, _: Span) {\n             SawStructDef(name.as_str()).hash(self.st);\n             visit::walk_generics(self, g);"}, {"sha": "ecea50f8495fe96f88a0bf94479ca4830de08ad1", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -223,7 +223,7 @@ pub trait Folder : Sized {\n         noop_fold_poly_trait_ref(p, self)\n     }\n \n-    fn fold_struct_def(&mut self, struct_def: P<StructDef>) -> P<StructDef> {\n+    fn fold_variant_data(&mut self, struct_def: P<VariantData>) -> P<VariantData> {\n         noop_fold_struct_def(struct_def, self)\n     }\n \n@@ -431,11 +431,11 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod { abi, items }: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {name, attrs, def, disr_expr}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {name, attrs, data, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             name: name,\n             attrs: fold_attrs(attrs, fld),\n-            def: fld.fold_struct_def(def),\n+            data: fld.fold_variant_data(data),\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n         },\n         span: fld.new_span(span),\n@@ -693,9 +693,9 @@ pub fn noop_fold_where_predicate<T: Folder>(pred: WherePredicate, fld: &mut T) -\n     }\n }\n \n-pub fn noop_fold_struct_def<T: Folder>(struct_def: P<StructDef>, fld: &mut T) -> P<StructDef> {\n-    struct_def.map(|StructDef { fields, id, kind }| {\n-        StructDef {\n+pub fn noop_fold_struct_def<T: Folder>(struct_def: P<VariantData>, fld: &mut T) -> P<VariantData> {\n+    struct_def.map(|VariantData { fields, id, kind }| {\n+        VariantData {\n             fields: fields.move_map(|f| fld.fold_struct_field(f)),\n             id: fld.new_id(id),\n             kind: kind,\n@@ -806,7 +806,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                      folder.fold_generics(generics))\n         }\n         ItemStruct(struct_def, generics) => {\n-            let struct_def = folder.fold_struct_def(struct_def);\n+            let struct_def = folder.fold_variant_data(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n         ItemDefaultImpl(unsafety, ref trait_ref) => {"}, {"sha": "92a52c38176a4db3a1ffeb4f0d3870182897f5ec", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1023,7 +1023,7 @@ pub struct EnumDef {\n pub struct Variant_ {\n     pub name: Name,\n     pub attrs: Vec<Attribute>,\n-    pub def: P<StructDef>,\n+    pub data: P<VariantData>,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }\n@@ -1162,13 +1162,13 @@ impl StructFieldKind {\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum VariantKind {\n-    Dict,\n+    Struct,\n     Tuple,\n     Unit,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct StructDef {\n+pub struct VariantData {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n     /// ID of the constructor. This is only used for tuple- or enum-like\n@@ -1218,7 +1218,7 @@ pub enum Item_ {\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n     ItemEnum(EnumDef, Generics),\n     /// A struct definition, e.g. `struct Foo<A> {x: A}`\n-    ItemStruct(P<StructDef>, Generics),\n+    ItemStruct(P<VariantData>, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety, Generics, TyParamBounds, Vec<P<TraitItem>>),\n "}, {"sha": "ecbfbd1362eb5b10890a1ce655b67421a2bfc7ed", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -266,7 +266,7 @@ pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n         node: hir::Variant_ {\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n-            def: lower_struct_def(_lctx, &v.node.def),\n+            data: lower_struct_def(_lctx, &v.node.data),\n             disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(e)),\n         },\n         span: v.span,\n@@ -498,12 +498,12 @@ pub fn lower_where_predicate(_lctx: &LoweringContext,\n     }\n }\n \n-pub fn lower_struct_def(_lctx: &LoweringContext, sd: &StructDef) -> P<hir::StructDef> {\n-    P(hir::StructDef {\n+pub fn lower_struct_def(sd: &VariantData) -> P<hir::VariantData> {\n+    P(hir::VariantData {\n         fields: sd.fields.iter().map(|f| lower_struct_field(_lctx, f)).collect(),\n         id: sd.id,\n         kind: match sd.kind {\n-            VariantKind::Dict => hir::VariantKind::Dict,\n+            VariantKind::Struct => hir::VariantKind::Struct,\n             VariantKind::Tuple => hir::VariantKind::Tuple,\n             VariantKind::Unit => hir::VariantKind::Unit,\n         }"}, {"sha": "948134c8025d30b72ebf2a41c76d33f94337f344", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -888,15 +888,15 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_struct(&mut self,\n-                        struct_def: &hir::StructDef,\n+                        struct_def: &hir::VariantData,\n                         generics: &hir::Generics,\n                         name: ast::Name,\n                         span: codemap::Span,\n                         print_finalizer: bool)\n                         -> io::Result<()> {\n         try!(self.print_name(name));\n         try!(self.print_generics(generics));\n-        if struct_def.kind != hir::VariantKind::Dict {\n+        if struct_def.kind != hir::VariantKind::Struct {\n             if struct_def.kind == hir::VariantKind::Tuple {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent,\n@@ -948,7 +948,7 @@ impl<'a> State<'a> {\n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n         try!(self.head(\"\"));\n         let generics = ::util::empty_generics();\n-        try!(self.print_struct(&v.node.def, &generics, v.node.name, v.span, false));\n+        try!(self.print_struct(&v.node.data, &generics, v.node.name, v.span, false));\n         match v.node.disr_expr {\n             Some(ref d) => {\n                 try!(space(&mut self.s));"}, {"sha": "8bf3ccd0b810c6114daadf46220d87a4649c5bf4", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -281,8 +281,8 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n         visit::walk_struct_field(self, struct_field)\n     }\n \n-    fn visit_struct_def(&mut self,\n-                        struct_def: &StructDef,\n+    fn visit_variant_data(&mut self,\n+                        struct_def: &VariantData,\n                         _: Name,\n                         _: &hir::Generics,\n                         _: NodeId,"}, {"sha": "8472bef3cd108c9f1ef23e2270f3786823e96b2e", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -112,7 +112,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_struct_def(&mut self, s: &'v StructDef, _: Name,\n+    fn visit_variant_data(&mut self, s: &'v VariantData, _: Name,\n                         _: &'v Generics, _: NodeId, _: Span) {\n         walk_struct_def(self, s)\n     }\n@@ -310,7 +310,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_struct_def(struct_definition, item.name,\n+            visitor.visit_variant_data(struct_definition, item.name,\n                                      generics, item.id, item.span);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n@@ -336,7 +336,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         generics: &'v Generics,\n                                         item_id: NodeId) {\n     visitor.visit_name(variant.span, variant.node.name);\n-    visitor.visit_struct_def(&variant.node.def, variant.node.name,\n+    visitor.visit_variant_data(&variant.node.data, variant.node.name,\n                              generics, item_id, variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n@@ -628,7 +628,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     }\n }\n \n-pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v StructDef) {\n+pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) {\n     walk_list!(visitor, visit_struct_field, &struct_definition.fields);\n }\n "}, {"sha": "6b6b90b1ba66fe11d6122450d7d436e4f73b5e38", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -280,7 +280,7 @@ impl LateLintPass for NonSnakeCase {\n         }\n     }\n \n-    fn check_struct_def(&mut self, cx: &LateContext, s: &hir::StructDef,\n+    fn check_struct_def(&mut self, cx: &LateContext, s: &hir::VariantData,\n                         _: ast::Name, _: &hir::Generics, _: ast::NodeId) {\n         for sf in &s.fields {\n             if let hir::StructField_ { kind: hir::NamedField(name, _), .. } = sf.node {"}, {"sha": "df15dbe4d6ca26e646cdeada2bdf2d0fe9ef23bb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -427,12 +427,12 @@ impl LateLintPass for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_struct_def(&mut self, _: &LateContext, _: &hir::StructDef,\n+    fn check_struct_def(&mut self, _: &LateContext, _: &hir::VariantData,\n                         _: ast::Name, _: &hir::Generics, item_id: ast::NodeId) {\n         self.struct_def_stack.push(item_id);\n     }\n \n-    fn check_struct_def_post(&mut self, _: &LateContext, _: &hir::StructDef,\n+    fn check_struct_def_post(&mut self, _: &LateContext, _: &hir::VariantData,\n                              _: ast::Name, _: &hir::Generics, item_id: ast::NodeId) {\n         let popped = self.struct_def_stack.pop().expect(\"empty struct_def_stack\");\n         assert!(popped == item_id);\n@@ -527,7 +527,7 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n-        self.check_missing_docs_attrs(cx, Some(v.node.def.id), &v.node.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, Some(v.node.data.id), &v.node.attrs, v.span, \"a variant\");\n         assert!(!self.in_variant);\n         self.in_variant = true;\n     }"}, {"sha": "e1e51ae666ba7bdd82d7b3db0fda94fbd2be67cc", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -82,7 +82,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n                     // The parent is considered the enclosing enum because the\n                     // enum will dictate the privacy visibility of this variant\n                     // instead.\n-                    self.parents.insert(variant.node.def.id, item.id);\n+                    self.parents.insert(variant.node.data.id, item.id);\n                 }\n             }\n \n@@ -128,11 +128,11 @@ impl<'v> Visitor<'v> for ParentVisitor {\n         visit::walk_impl_item(self, ii);\n     }\n \n-    fn visit_struct_def(&mut self, s: &hir::StructDef, _: ast::Name,\n+    fn visit_variant_data(&mut self, s: &hir::VariantData, _: ast::Name,\n                         _: &'v hir::Generics, item_id: ast::NodeId, _: Span) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n-        if s.kind != hir::VariantKind::Dict {\n+        if s.kind != hir::VariantKind::Struct {\n             self.parents.insert(s.id, item_id);\n         }\n \n@@ -233,8 +233,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // public all variants are public unless they're explicitly priv\n             hir::ItemEnum(ref def, _) if public_first => {\n                 for variant in &def.variants {\n-                    self.exported_items.insert(variant.node.def.id);\n-                    self.public_items.insert(variant.node.def.id);\n+                    self.exported_items.insert(variant.node.data.id);\n+                    self.public_items.insert(variant.node.data.id);\n                 }\n             }\n \n@@ -319,7 +319,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n             // Struct constructors are public if the struct is all public.\n             hir::ItemStruct(ref def, _) if public_first => {\n-                if def.kind != hir::VariantKind::Dict {\n+                if def.kind != hir::VariantKind::Struct {\n                     self.exported_items.insert(def.id);\n                 }\n                 // fields can be public or private, so lets check\n@@ -1088,7 +1088,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                           \"visibility has no effect inside functions\");\n             }\n         }\n-        let check_struct = |def: &hir::StructDef| {\n+        let check_struct = |def: &hir::VariantData| {\n             for f in &def.fields {\n                match f.node.kind {\n                     hir::NamedField(_, p) => check_inherited(tcx, f.span, p),\n@@ -1431,7 +1431,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics, item_id: ast::NodeId) {\n-        if self.exported_items.contains(&v.node.def.id) {\n+        if self.exported_items.contains(&v.node.data.id) {\n             self.in_variant = true;\n             visit::walk_variant(self, v, g, item_id);\n             self.in_variant = false;"}, {"sha": "4484cfe95900a078c67bffced66958c5f915ff82", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -493,7 +493,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             ItemStruct(ref struct_def, _) => {\n                 // Adding to both Type and Value namespaces or just Type?\n                 let (forbid, ctor_id) = match struct_def.kind {\n-                    hir::VariantKind::Dict => (ForbidDuplicateTypesAndModules, None),\n+                    hir::VariantKind::Struct => (ForbidDuplicateTypesAndModules, None),\n                     _                     => (ForbidDuplicateTypesAndValues, Some(struct_def.id)),\n                 };\n \n@@ -587,10 +587,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                        item_id: DefId,\n                                        parent: &Rc<Module>) {\n         let name = variant.node.name;\n-        let is_exported = match variant.node.def.kind {\n-            hir::VariantKind::Dict => {\n+        let is_exported = match variant.node.data.kind {\n+            hir::VariantKind::Struct => {\n                 // Not adding fields for variants as they are not accessed with a self receiver\n-                let variant_def_id = self.ast_map.local_def_id(variant.node.def.id);\n+                let variant_def_id = self.ast_map.local_def_id(variant.node.data.id);\n                 self.structs.insert(variant_def_id, Vec::new());\n                 true\n             }\n@@ -603,10 +603,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         // variants are always treated as importable to allow them to be glob\n         // used\n         child.define_value(DefVariant(item_id,\n-                                      self.ast_map.local_def_id(variant.node.def.id), is_exported),\n+                                      self.ast_map.local_def_id(variant.node.data.id), is_exported),\n                            variant.span, DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n         child.define_type(DefVariant(item_id,\n-                                     self.ast_map.local_def_id(variant.node.def.id), is_exported),\n+                                     self.ast_map.local_def_id(variant.node.data.id), is_exported),\n                           variant.span, DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n     }\n "}, {"sha": "ac09534f1e0e5eecff77883b9fd23f2a2f8b7a0d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n \n         // `visit::walk_variant` without the discriminant expression.\n-        self.visit_struct_def(&variant.node.def, variant.node.name,\n+        self.visit_variant_data(&variant.node.data, variant.node.name,\n                               generics, item_id, variant.span);\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem) {"}, {"sha": "5235bd49a287559163ca3db4b797a08e9aaa9c99", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -458,7 +458,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n     fn process_struct(&mut self,\n                       item: &ast::Item,\n-                      def: &ast::StructDef,\n+                      def: &ast::VariantData,\n                       ty_params: &ast::Generics) {\n         let qualname = format!(\"::{}\", self.tcx.map.path_to_string(item.id));\n \n@@ -503,15 +503,15 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n             self.fmt.struct_variant_str(variant.span,\n                                         self.span.span_for_first_ident(variant.span),\n-                                        variant.node.def.id,\n-                                        variant.node.def.id,\n+                                        variant.node.data.id,\n+                                        variant.node.data.id,\n                                         &qualname,\n                                         &enum_data.qualname,\n                                         &val,\n                                         enum_data.id);\n \n-            for field in &variant.node.def.fields {\n-                self.process_struct_field_def(field, variant.node.def.id);\n+            for field in &variant.node.data.fields {\n+                self.process_struct_field_def(field, variant.node.data.id);\n                 self.visit_ty(&*field.node.ty);\n             }\n         }"}, {"sha": "d7ace6e2541d0f3a6cdc450c0d13e2836285334f", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -2428,10 +2428,10 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n         hir_map::NodeVariant(ref v) => {\n             let llfn;\n-            let fields = if v.node.def.kind == hir::VariantKind::Dict {\n+            let fields = if v.node.data.kind == hir::VariantKind::Struct {\n                 ccx.sess().bug(\"struct variant kind unexpected in get_item_val\")\n             } else {\n-                &v.node.def.fields\n+                &v.node.data.fields\n             };\n             assert!(!fields.is_empty());\n             let ty = ccx.tcx().node_id_to_type(id);\n@@ -2455,7 +2455,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n         hir_map::NodeStructCtor(struct_def) => {\n             // Only register the constructor if this is a tuple-like struct.\n             let ctor_id = match struct_def.kind {\n-                hir::VariantKind::Dict => {\n+                hir::VariantKind::Struct => {\n                     ccx.sess().bug(\"attempt to register a constructor of \\\n                                     a non-tuple-like struct\")\n                 }"}, {"sha": "455eb7092918873ab8e21fed8661dc19cb7003cd", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -418,7 +418,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n \n         match map_node {\n             hir_map::NodeVariant(v) => {\n-                v.node.def.kind == hir::VariantKind::Tuple\n+                v.node.data.kind == hir::VariantKind::Tuple\n             }\n             hir_map::NodeStructCtor(_) => true,\n             _ => false"}, {"sha": "7c72b249a6e81afa5f95181d8760cc74ec84389e", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -818,7 +818,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         ty::VariantKind::Tuple => {\n                             expr::trans_def_fn_unadjusted(cx, e, def, param_substs).val\n                         }\n-                        ty::VariantKind::Dict => {\n+                        ty::VariantKind::Struct => {\n                             cx.sess().span_bug(e.span, \"path-expr refers to a dict variant!\")\n                         }\n                     }"}, {"sha": "aeda8f723cfeea3c7961b208b591bd10428fe78c", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1365,7 +1365,7 @@ impl<'tcx> EnumMemberDescriptionFactory<'tcx> {\n                 let sole_struct_member_description = MemberDescription {\n                     name: match non_null_variant.kind() {\n                         ty::VariantKind::Tuple => \"__0\".to_string(),\n-                        ty::VariantKind::Dict => {\n+                        ty::VariantKind::Struct => {\n                             non_null_variant.fields[0].name.to_string()\n                         }\n                         ty::VariantKind::Unit => unreachable!()\n@@ -1540,7 +1540,7 @@ fn describe_enum_variant<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                    .map(|(i, _)| format!(\"__{}\", i))\n                    .collect()\n         }\n-        ty::VariantKind::Dict => {\n+        ty::VariantKind::Struct => {\n             variant.fields\n                    .iter()\n                    .map(|f| f.name.to_string())"}, {"sha": "2f747606e59f41cc3ae51a24aa97d18140ffba0c", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -110,13 +110,13 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n                     let ty_vs = &ccx.tcx().lookup_adt_def(parent_id).variants;\n                     assert_eq!(ast_vs.len(), ty_vs.len());\n                     for (ast_v, ty_v) in ast_vs.iter().zip(ty_vs.iter()) {\n-                        if ty_v.did == fn_id { my_id = ast_v.node.def.id; }\n-                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.def.id));\n+                        if ty_v.did == fn_id { my_id = ast_v.node.data.id; }\n+                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.data.id));\n                     }\n                 }\n                 hir::ItemStruct(ref struct_def, _) => {\n                     match struct_def.kind {\n-                        hir::VariantKind::Dict => ccx.sess().bug(\"instantiate_inline: called on a \\\n+                        hir::VariantKind::Struct => ccx.sess().bug(\"instantiate_inline: called on a \\\n                                                                  non-tuple struct\"),\n                         _ => {\n                             ccx.external().borrow_mut().insert(fn_id, Some(struct_def.id));"}, {"sha": "80d683a8f351a24949a01ceb1c9fc05af0856946", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -246,7 +246,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         hir_map::NodeStructCtor(struct_def) => {\n             let d = mk_lldecl(abi::Rust);\n             attributes::inline(d, attributes::InlineAttr::Hint);\n-            if struct_def.kind == hir::VariantKind::Dict {\n+            if struct_def.kind == hir::VariantKind::Struct {\n                 panic!(\"ast-mapped struct didn't have a ctor id\")\n             }\n             base::trans_tuple_struct(ccx,"}, {"sha": "ba1af220d8e0fb915d062864a577fd210be77eb9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1485,7 +1485,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let var_kind = variant.kind();\n-        if var_kind == ty::VariantKind::Dict {\n+        if var_kind == ty::VariantKind::Struct {\n             Some((adt, variant))\n         } else if var_kind == ty::VariantKind::Unit {\n             if !self.tcx().sess.features.borrow().braced_empty_structs {"}, {"sha": "ebf54f62b523921a66bc9097744c311edd9d8c23", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -624,7 +624,7 @@ struct AdtField<'tcx> {\n }\n \n fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                            struct_def: &hir::StructDef)\n+                            struct_def: &hir::VariantData)\n                             -> AdtVariant<'tcx> {\n     let fields =\n         struct_def.fields\n@@ -647,7 +647,7 @@ fn enum_variants<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                            enum_def: &hir::EnumDef)\n                            -> Vec<AdtVariant<'tcx>> {\n     enum_def.variants.iter()\n-        .map(|variant| struct_variant(fcx, &variant.node.def))\n+        .map(|variant| struct_variant(fcx, &variant.node.data))\n         .collect()\n }\n "}, {"sha": "0d2d37714c04099c95654f2459ab2a94954c0fcb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -521,7 +521,7 @@ struct AdtField<'tcx> {\n }\n \n fn struct_variant<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                            struct_def: &hir::StructDef)\n+                            struct_def: &hir::VariantData)\n                             -> AdtVariant<'tcx> {\n     let fields =\n         struct_def.fields\n@@ -544,7 +544,7 @@ fn enum_variants<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                            enum_def: &hir::EnumDef)\n                            -> Vec<AdtVariant<'tcx>> {\n     enum_def.variants.iter()\n-        .map(|variant| struct_variant(fcx, &variant.node.def))\n+        .map(|variant| struct_variant(fcx, &variant.node.data))\n         .collect()\n }\n "}, {"sha": "c38befd744466e11393eb9ba3955ffe81a64708b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1014,7 +1014,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                 convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n             }\n \n-            if struct_def.kind != hir::VariantKind::Dict {\n+            if struct_def.kind != hir::VariantKind::Struct {\n                 convert_variant_ctor(tcx, struct_def.id, variant, scheme, predicates);\n             }\n         },\n@@ -1039,7 +1039,7 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   scheme: ty::TypeScheme<'tcx>,\n                                   predicates: ty::GenericPredicates<'tcx>) {\n     let ctor_ty = match variant.kind() {\n-        VariantKind::Unit | VariantKind::Dict => scheme.ty,\n+        VariantKind::Unit | VariantKind::Struct => scheme.ty,\n         VariantKind::Tuple => {\n             let inputs: Vec<_> =\n                 variant.fields\n@@ -1067,15 +1067,15 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                         variants: &[P<hir::Variant>]) {\n     // fill the field types\n     for (variant, ty_variant) in variants.iter().zip(def.variants.iter()) {\n-        for (f, ty_f) in variant.node.def.fields.iter().zip(ty_variant.fields.iter()) {\n+        for (f, ty_f) in variant.node.data.fields.iter().zip(ty_variant.fields.iter()) {\n             convert_field(ccx, &scheme.generics, &predicates, f, ty_f)\n         }\n \n         // Convert the ctor, if any. This also registers the variant as\n         // an item.\n         convert_variant_ctor(\n             ccx.tcx,\n-            variant.node.def.id,\n+            variant.node.data.id,\n             ty_variant,\n             scheme.clone(),\n             predicates.clone()\n@@ -1087,7 +1087,7 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                 did: DefId,\n                                 name: ast::Name,\n                                 disr_val: ty::Disr,\n-                                def: &hir::StructDef) -> ty::VariantDefData<'tcx, 'tcx> {\n+                                def: &hir::VariantData) -> ty::VariantDefData<'tcx, 'tcx> {\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n     let fields = def.fields.iter().map(|f| {\n         let fid = tcx.map.local_def_id(f.node.id);\n@@ -1120,12 +1120,12 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n fn convert_struct_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                             it: &hir::Item,\n-                            def: &hir::StructDef)\n+                            def: &hir::VariantData)\n                             -> ty::AdtDefMaster<'tcx>\n {\n \n     let did = tcx.map.local_def_id(it.id);\n-    let ctor_id = if def.kind != hir::VariantKind::Dict {\n+    let ctor_id = if def.kind != hir::VariantKind::Struct {\n         tcx.map.local_def_id(def.id)\n     } else {\n         did\n@@ -1209,9 +1209,9 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   disr: ty::Disr)\n                                   -> ty::VariantDefData<'tcx, 'tcx>\n     {\n-        let did = tcx.map.local_def_id(v.node.def.id);\n+        let did = tcx.map.local_def_id(v.node.data.id);\n         let name = v.node.name;\n-        convert_struct_variant(tcx, did, name, disr, &v.node.def, did)\n+        convert_struct_variant(tcx, did, name, disr, &v.node.data, did)\n     }\n     let did = tcx.map.local_def_id(it.id);\n     let repr_hints = tcx.lookup_repr_hints(did);"}, {"sha": "f935210ef286d25db8da0fed677e64b1db185e0a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1805,7 +1805,7 @@ pub struct VariantStruct {\n     pub fields_stripped: bool,\n }\n \n-impl Clean<VariantStruct> for ::rustc_front::hir::StructDef {\n+impl Clean<VariantStruct> for ::rustc_front::hir::VariantData {\n     fn clean(&self, cx: &DocContext) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n@@ -1871,7 +1871,7 @@ impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n                     self.fields.iter().map(|f| f.unsubst_ty().clean(cx)).collect()\n                 )\n             }\n-            ty::VariantKind::Dict => {\n+            ty::VariantKind::Struct => {\n                 StructVariant(VariantStruct {\n                     struct_type: doctree::Plain,\n                     fields_stripped: false,\n@@ -1917,8 +1917,8 @@ pub enum VariantKind {\n     StructVariant(VariantStruct),\n }\n \n-fn struct_def_to_variant_kind(struct_def: &hir::StructDef, cx: &DocContext) -> VariantKind {\n-    if struct_def.kind == hir::VariantKind::Dict {\n+fn struct_def_to_variant_kind(struct_def: &hir::VariantData, cx: &DocContext) -> VariantKind {\n+    if struct_def.kind == hir::VariantKind::Struct {\n         StructVariant(struct_def.clean(cx))\n     } else if struct_def.kind == hir::VariantKind::Unit {\n         CLikeVariant"}, {"sha": "112c6aebfc552380de673d4fa2b43675d652ce0c", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -119,7 +119,7 @@ pub struct Enum {\n pub struct Variant {\n     pub name: Name,\n     pub attrs: Vec<ast::Attribute>,\n-    pub def: P<hir::StructDef>,\n+    pub def: P<hir::VariantData>,\n     pub stab: Option<attr::Stability>,\n     pub whence: Span,\n }\n@@ -233,8 +233,8 @@ pub struct Import {\n     pub whence: Span,\n }\n \n-pub fn struct_type_from_def(sd: &hir::StructDef) -> StructType {\n-    if sd.kind != hir::VariantKind::Dict {\n+pub fn struct_type_from_def(sd: &hir::VariantData) -> StructType {\n+    if sd.kind != hir::VariantKind::Struct {\n         // We are in a tuple-struct\n         match sd.fields.len() {\n             0 => Unit,"}, {"sha": "e84d7f549a91d854046c45395b25bc28488df24a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -84,8 +84,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.module.is_crate = true;\n     }\n \n-    pub fn visit_struct_def(&mut self, item: &hir::Item,\n-                            name: ast::Name, sd: &hir::StructDef,\n+    pub fn visit_variant_data(&mut self, item: &hir::Item,\n+                            name: ast::Name, sd: &hir::VariantData,\n                             generics: &hir::Generics) -> Struct {\n         debug!(\"Visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n@@ -111,8 +111,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n-                stab: self.stability(v.node.def.id),\n-                def: v.node.def.clone(),\n+                stab: self.stability(v.node.data.id),\n+                def: v.node.data.clone(),\n                 whence: v.span,\n             }).collect(),\n             vis: it.vis,\n@@ -298,7 +298,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemEnum(ref ed, ref gen) =>\n                 om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n             hir::ItemStruct(ref sd, ref gen) =>\n-                om.structs.push(self.visit_struct_def(item, name, &**sd, gen)),\n+                om.structs.push(self.visit_variant_data(item, name, &**sd, gen)),\n             hir::ItemFn(ref fd, ref unsafety, constness, ref abi, ref gen, _) =>\n                 om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n                                           constness, abi, gen)),"}, {"sha": "af6235497675d7dadfa1ea2d8002c8c3ad751b61", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1579,7 +1579,7 @@ pub struct EnumDef {\n pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub def: P<StructDef>,\n+    pub data: P<VariantData>,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }\n@@ -1742,13 +1742,13 @@ impl StructFieldKind {\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum VariantKind {\n-    Dict,\n+    Struct,\n     Tuple,\n     Unit,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct StructDef {\n+pub struct VariantData {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n     /// ID of the constructor. This is only used for tuple- or enum-like\n@@ -1798,7 +1798,7 @@ pub enum Item_ {\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n     ItemEnum(EnumDef, Generics),\n     /// A struct definition, e.g. `struct Foo<A> {x: A}`\n-    ItemStruct(P<StructDef>, Generics),\n+    ItemStruct(P<VariantData>, Generics),\n     /// Represents a Trait Declaration\n     ItemTrait(Unsafety,\n               Generics,"}, {"sha": "42382d0459fdd9dc5ec4f7e6bb99fda0229d5c53", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -452,8 +452,8 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n         visit::walk_struct_field(self, struct_field)\n     }\n \n-    fn visit_struct_def(&mut self,\n-                        struct_def: &StructDef,\n+    fn visit_variant_data(&mut self,\n+                        struct_def: &VariantData,\n                         _: ast::Ident,\n                         _: &ast::Generics,\n                         _: NodeId,"}, {"sha": "02a9d0b5c38cbb802fb60efb5461b0d8309490c5", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -140,13 +140,13 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                 if !(cx.in_cfg)(&v.node.attrs) {\n                     None\n                 } else {\n-                    Some(v.map(|Spanned {node: ast::Variant_ {name, attrs, def,\n+                    Some(v.map(|Spanned {node: ast::Variant_ {name, attrs, data,\n                                                               disr_expr}, span}| {\n                         Spanned {\n                             node: ast::Variant_ {\n                                 name: name,\n                                 attrs: attrs,\n-                                def: fold_struct(cx, def),\n+                                data: fold_struct(cx, data),\n                                 disr_expr: disr_expr,\n                             },\n                             span: span\n@@ -164,11 +164,11 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n     fold::noop_fold_item_underscore(item, cx)\n }\n \n-fn fold_struct<F>(cx: &mut Context<F>, def: P<ast::StructDef>) -> P<ast::StructDef> where\n+fn fold_struct<F>(cx: &mut Context<F>, def: P<ast::VariantData>) -> P<ast::VariantData> where\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n-    def.map(|ast::StructDef { fields, id, kind }| {\n-        ast::StructDef {\n+    def.map(|ast::VariantData { fields, id, kind }| {\n+        ast::VariantData {\n             fields: fields.into_iter().filter(|m| {\n                 (cx.in_cfg)(&m.node.attrs)\n             }).collect(),"}, {"sha": "105a7036c5f6d7cde95c24852c0cd5631cad6150", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -247,9 +247,9 @@ pub trait AstBuilder {\n     fn item_struct_poly(&self,\n                         span: Span,\n                         name: Ident,\n-                        struct_def: ast::StructDef,\n+                        struct_def: ast::VariantData,\n                         generics: Generics) -> P<ast::Item>;\n-    fn item_struct(&self, span: Span, name: Ident, struct_def: ast::StructDef) -> P<ast::Item>;\n+    fn item_struct(&self, span: Span, name: Ident, struct_def: ast::VariantData) -> P<ast::Item>;\n \n     fn item_mod(&self, span: Span, inner_span: Span,\n                 name: Ident, attrs: Vec<ast::Attribute>,\n@@ -1008,7 +1008,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                ast::Variant_ {\n                    name: name,\n                    attrs: Vec::new(),\n-                   def: P(ast::StructDef { fields: fields,\n+                   data: P(ast::VariantData { fields: fields,\n                                            id: ast::DUMMY_NODE_ID,\n                                            kind: kind }),\n                    disr_expr: None,\n@@ -1028,7 +1028,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn item_struct(&self, span: Span, name: Ident,\n-                   struct_def: ast::StructDef) -> P<ast::Item> {\n+                   struct_def: ast::VariantData) -> P<ast::Item> {\n         self.item_struct_poly(\n             span,\n             name,\n@@ -1038,7 +1038,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn item_struct_poly(&self, span: Span, name: Ident,\n-        struct_def: ast::StructDef, generics: Generics) -> P<ast::Item> {\n+        struct_def: ast::VariantData, generics: Generics) -> P<ast::Item> {\n         self.item(span, name, Vec::new(), ast::ItemStruct(P(struct_def), generics))\n     }\n "}, {"sha": "b375dee4e2c6c9d073865bc6e2571d2825b56ce4", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -174,9 +174,9 @@\n //! A static method on the types above would result in,\n //!\n //! ```{.text}\n-//! StaticStruct(<ast::StructDef of A>, Named(vec![(<ident of x>, <span of x>)]))\n+//! StaticStruct(<ast::VariantData of A>, Named(vec![(<ident of x>, <span of x>)]))\n //!\n-//! StaticStruct(<ast::StructDef of B>, Unnamed(vec![<span of x>]))\n+//! StaticStruct(<ast::VariantData of B>, Unnamed(vec![<span of x>]))\n //!\n //! StaticEnum(<ast::EnumDef of C>,\n //!            vec![(<ident of C0>, <span of C0>, Unnamed(vec![<span of i32>])),\n@@ -194,7 +194,7 @@ use std::vec;\n use abi::Abi;\n use abi;\n use ast;\n-use ast::{EnumDef, Expr, Ident, Generics, StructDef};\n+use ast::{EnumDef, Expr, Ident, Generics, VariantData};\n use ast_util;\n use attr;\n use attr::AttrMetaMethods;\n@@ -317,7 +317,7 @@ pub enum SubstructureFields<'a> {\n     EnumNonMatchingCollapsed(Vec<Ident>, &'a [P<ast::Variant>], &'a [Ident]),\n \n     /// A static method where `Self` is a struct.\n-    StaticStruct(&'a ast::StructDef, StaticFields),\n+    StaticStruct(&'a ast::VariantData, StaticFields),\n     /// A static method where `Self` is an enum.\n     StaticEnum(&'a ast::EnumDef, Vec<(Ident, Span, StaticFields)>),\n }\n@@ -649,7 +649,7 @@ impl<'a> TraitDef<'a> {\n \n     fn expand_struct_def(&self,\n                          cx: &mut ExtCtxt,\n-                         struct_def: &'a StructDef,\n+                         struct_def: &'a VariantData,\n                          type_ident: Ident,\n                          generics: &Generics) -> P<ast::Item> {\n         let field_tys: Vec<P<ast::Ty>> = struct_def.fields.iter()\n@@ -700,7 +700,7 @@ impl<'a> TraitDef<'a> {\n         let mut field_tys = Vec::new();\n \n         for variant in &enum_def.variants {\n-            field_tys.extend(variant.node.def.fields.iter()\n+            field_tys.extend(variant.node.data.fields.iter()\n                 .map(|field| field.node.ty.clone()));\n         }\n \n@@ -927,7 +927,7 @@ impl<'a> MethodDef<'a> {\n     fn expand_struct_method_body<'b>(&self,\n                                  cx: &mut ExtCtxt,\n                                  trait_: &TraitDef<'b>,\n-                                 struct_def: &'b StructDef,\n+                                 struct_def: &'b VariantData,\n                                  type_ident: Ident,\n                                  self_args: &[P<Expr>],\n                                  nonself_args: &[P<Expr>])\n@@ -996,7 +996,7 @@ impl<'a> MethodDef<'a> {\n     fn expand_static_struct_method_body(&self,\n                                         cx: &mut ExtCtxt,\n                                         trait_: &TraitDef,\n-                                        struct_def: &StructDef,\n+                                        struct_def: &VariantData,\n                                         type_ident: Ident,\n                                         self_args: &[P<Expr>],\n                                         nonself_args: &[P<Expr>])\n@@ -1405,7 +1405,7 @@ impl<'a> MethodDef<'a> {\n         -> P<Expr> {\n         let summary = enum_def.variants.iter().map(|v| {\n             let ident = v.node.name;\n-            let summary = trait_.summarise_struct(cx, &v.node.def);\n+            let summary = trait_.summarise_struct(cx, &v.node.data);\n             (ident, v.span, summary)\n         }).collect();\n         self.call_substructure_method(cx, trait_, type_ident,\n@@ -1441,7 +1441,7 @@ impl<'a> TraitDef<'a> {\n \n     fn summarise_struct(&self,\n                         cx: &mut ExtCtxt,\n-                        struct_def: &StructDef) -> StaticFields {\n+                        struct_def: &VariantData) -> StaticFields {\n         let mut named_idents = Vec::new();\n         let mut just_spans = Vec::new();\n         for field in struct_def.fields.iter(){\n@@ -1477,7 +1477,7 @@ impl<'a> TraitDef<'a> {\n     fn create_struct_pattern(&self,\n                              cx: &mut ExtCtxt,\n                              struct_path: ast::Path,\n-                             struct_def: &'a StructDef,\n+                             struct_def: &'a VariantData,\n                              prefix: &str,\n                              mutbl: ast::Mutability)\n                              -> (P<ast::Pat>, Vec<(Span, Option<Ident>,\n@@ -1545,7 +1545,7 @@ impl<'a> TraitDef<'a> {\n         -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         let variant_ident = variant.node.name;\n         let variant_path = cx.path(variant.span, vec![enum_ident, variant_ident]);\n-        self.create_struct_pattern(cx, variant_path, &variant.node.def, prefix, mutbl)\n+        self.create_struct_pattern(cx, variant_path, &variant.node.data, prefix, mutbl)\n     }\n }\n "}, {"sha": "3a079717b8b64c2ff99b0d7f51a287cde66a44cb", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -94,7 +94,7 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n             let mut arms = Vec::new();\n \n             for variant in &enum_def.variants {\n-                let def = &variant.node.def;\n+                let def = &variant.node.data;\n                 if def.kind != ast::VariantKind::Unit {\n                     cx.span_err(trait_span, \"`FromPrimitive` cannot be derived \\\n                                              for enums with non-unit variants\");"}, {"sha": "a6922c24693955c9065cedbf1d6ee4af341530e5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -857,10 +857,10 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_item(self, i);\n     }\n \n-    fn visit_struct_def(&mut self, s: &'v ast::StructDef, _: ast::Ident,\n+    fn visit_variant_data(&mut self, s: &'v ast::VariantData, _: ast::Ident,\n                         _: &'v ast::Generics, _: ast::NodeId, span: Span) {\n         if s.fields.is_empty() {\n-            if s.kind == ast::VariantKind::Dict {\n+            if s.kind == ast::VariantKind::Struct {\n                 self.gate_feature(\"braced_empty_structs\", span,\n                                   \"empty structs and enum variants with braces are unstable\");\n             } else if s.kind == ast::VariantKind::Tuple {"}, {"sha": "d7b7fc242b43fc003a6d85f5cb84b9abe723ef73", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -231,7 +231,7 @@ pub trait Folder : Sized {\n         noop_fold_poly_trait_ref(p, self)\n     }\n \n-    fn fold_struct_def(&mut self, struct_def: P<StructDef>) -> P<StructDef> {\n+    fn fold_variant_data(&mut self, struct_def: P<VariantData>) -> P<VariantData> {\n         noop_fold_struct_def(struct_def, self)\n     }\n \n@@ -446,11 +446,11 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {name, attrs, def, disr_expr}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {name, attrs, data, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             name: name,\n             attrs: fold_attrs(attrs, fld),\n-            def: fld.fold_struct_def(def),\n+            data: fld.fold_variant_data(data),\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n         },\n         span: fld.new_span(span),\n@@ -814,8 +814,8 @@ pub fn noop_fold_where_predicate<T: Folder>(\n     }\n }\n \n-pub fn noop_fold_struct_def<T: Folder>(struct_def: P<StructDef>, fld: &mut T) -> P<StructDef> {\n-    struct_def.map(|StructDef { fields, id, kind }| StructDef {\n+pub fn noop_fold_struct_def<T: Folder>(struct_def: P<VariantData>, fld: &mut T) -> P<VariantData> {\n+    struct_def.map(|VariantData { fields, id, kind }| VariantData {\n         fields: fields.move_map(|f| fld.fold_struct_field(f)),\n         id: fld.new_id(id),\n         kind: kind,\n@@ -925,7 +925,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                 folder.fold_generics(generics))\n         }\n         ItemStruct(struct_def, generics) => {\n-            let struct_def = folder.fold_struct_def(struct_def);\n+            let struct_def = folder.fold_variant_data(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n         ItemDefaultImpl(unsafety, ref trait_ref) => {"}, {"sha": "f944c93073a4519b7a3e9cb4f74a943a840414f0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -45,7 +45,7 @@ use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild, PatWildMulti};\n use ast::PatWildSingle;\n use ast::{PolyTraitRef, QSelf};\n use ast::{Return, BiShl, BiShr, Stmt, StmtDecl};\n-use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField, VariantKind};\n+use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField, VariantKind};\n use ast::{BiSub, StrStyle};\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n@@ -4647,15 +4647,15 @@ impl<'a> Parser<'a> {\n                 (Vec::new(), VariantKind::Unit)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                (try!(self.parse_record_struct_body()), VariantKind::Dict)\n+                (try!(self.parse_record_struct_body()), VariantKind::Struct)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if try!(self.eat(&token::Semi) ){\n             (Vec::new(), VariantKind::Unit)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n             let fields = try!(self.parse_record_struct_body());\n-            (fields, VariantKind::Dict)\n+            (fields, VariantKind::Struct)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let fields = try!(self.parse_tuple_struct_body(&mut generics));\n@@ -4667,7 +4667,7 @@ impl<'a> Parser<'a> {\n         };\n \n         Ok((class_name,\n-         ItemStruct(P(ast::StructDef {\n+         ItemStruct(P(ast::VariantData {\n              fields: fields,\n              id: ast::DUMMY_NODE_ID,\n              kind: kind,\n@@ -5103,17 +5103,17 @@ impl<'a> Parser<'a> {\n \n     /// Parse a structure-like enum variant definition\n     /// this should probably be renamed or refactored...\n-    fn parse_struct_def(&mut self) -> PResult<P<StructDef>> {\n+    fn parse_struct_def(&mut self) -> PResult<P<VariantData>> {\n         let mut fields: Vec<StructField> = Vec::new();\n         while self.token != token::CloseDelim(token::Brace) {\n             fields.push(try!(self.parse_struct_decl_field(false)));\n         }\n         try!(self.bump());\n \n-        Ok(P(StructDef {\n+        Ok(P(VariantData {\n             fields: fields,\n             id: ast::DUMMY_NODE_ID,\n-            kind: VariantKind::Dict,\n+            kind: VariantKind::Struct,\n         }))\n     }\n \n@@ -5150,25 +5150,25 @@ impl<'a> Parser<'a> {\n                         id: ast::DUMMY_NODE_ID,\n                     }});\n                 }\n-                struct_def = P(StructDef { fields: fields,\n+                struct_def = P(VariantData { fields: fields,\n                                            id: ast::DUMMY_NODE_ID,\n                                            kind: ast::VariantKind::Tuple });\n             } else if try!(self.eat(&token::Eq) ){\n                 disr_expr = Some(try!(self.parse_expr_nopanic()));\n                 any_disr = disr_expr.as_ref().map(|expr| expr.span);\n-                struct_def = P(StructDef { fields: Vec::new(),\n+                struct_def = P(VariantData { fields: Vec::new(),\n                                            id: ast::DUMMY_NODE_ID,\n                                            kind: ast::VariantKind::Unit });\n             } else {\n-                struct_def = P(StructDef { fields: Vec::new(),\n+                struct_def = P(VariantData { fields: Vec::new(),\n                                            id: ast::DUMMY_NODE_ID,\n                                            kind: ast::VariantKind::Unit });\n             }\n \n             let vr = ast::Variant_ {\n                 name: ident,\n                 attrs: variant_attrs,\n-                def: struct_def,\n+                data: struct_def,\n                 disr_expr: disr_expr,\n             };\n             variants.push(P(spanned(vlo, self.last_span.hi, vr)));"}, {"sha": "0f6041d2cd0712aa7273e188be6db66a11807c24", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -1385,14 +1385,14 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_struct(&mut self,\n-                        struct_def: &ast::StructDef,\n+                        struct_def: &ast::VariantData,\n                         generics: &ast::Generics,\n                         ident: ast::Ident,\n                         span: codemap::Span,\n                         print_finalizer: bool) -> io::Result<()> {\n         try!(self.print_ident(ident));\n         try!(self.print_generics(generics));\n-        if struct_def.kind != ast::VariantKind::Dict {\n+        if struct_def.kind != ast::VariantKind::Struct {\n             if struct_def.kind == ast::VariantKind::Tuple {\n                 try!(self.popen());\n                 try!(self.commasep(\n@@ -1510,7 +1510,7 @@ impl<'a> State<'a> {\n     pub fn print_variant(&mut self, v: &ast::Variant) -> io::Result<()> {\n         try!(self.head(\"\"));\n         let generics = ast_util::empty_generics();\n-        try!(self.print_struct(&v.node.def, &generics, v.node.name, v.span, false));\n+        try!(self.print_struct(&v.node.data, &generics, v.node.name, v.span, false));\n         match v.node.disr_expr {\n             Some(ref d) => {\n                 try!(space(&mut self.s));\n@@ -3119,7 +3119,7 @@ mod tests {\n             name: ident,\n             attrs: Vec::new(),\n             // making this up as I go.... ?\n-            def: P(ast::StructDef { fields: Vec::new(),\n+            data: P(ast::VariantData { fields: Vec::new(),\n                                     id: ast::DUMMY_NODE_ID,\n                                     kind: ast::VariantKind::Unit }),\n             disr_expr: None,"}, {"sha": "fdff0bf72ebfc9b545b489d24cd573abe6b16c5c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30af54dede8b9f03a83dd5ad588bb430a5a76270/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=30af54dede8b9f03a83dd5ad588bb430a5a76270", "patch": "@@ -80,7 +80,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_struct_def(&mut self, s: &'v StructDef, _: Ident,\n+    fn visit_variant_data(&mut self, s: &'v VariantData, _: Ident,\n                         _: &'v Generics, _: NodeId, _: Span) {\n         walk_struct_def(self, s)\n     }\n@@ -289,7 +289,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_struct_def(struct_definition, item.ident,\n+            visitor.visit_variant_data(struct_definition, item.ident,\n                                      generics, item.id, item.span);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n@@ -316,7 +316,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         generics: &'v Generics,\n                                         item_id: NodeId) {\n     visitor.visit_ident(variant.span, variant.node.name);\n-    visitor.visit_struct_def(&variant.node.def, variant.node.name,\n+    visitor.visit_variant_data(&variant.node.data, variant.node.name,\n                              generics, item_id, variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n@@ -603,7 +603,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n }\n \n pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                           struct_definition: &'v StructDef) {\n+                                           struct_definition: &'v VariantData) {\n     walk_list!(visitor, visit_struct_field, &struct_definition.fields);\n }\n "}]}