{"sha": "ea9fac5687c24abad493caf4ec5042af47458af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOWZhYzU2ODdjMjRhYmFkNDkzY2FmNGVjNTA0MmFmNDc0NThhZjk=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-08T04:33:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-12T23:31:32Z"}, "message": "Return a `Symbol` from `name_or_empty` functions.", "tree": {"sha": "fa876e921e64ad05a8fd4b6d65847dc7597b1228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa876e921e64ad05a8fd4b6d65847dc7597b1228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea9fac5687c24abad493caf4ec5042af47458af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea9fac5687c24abad493caf4ec5042af47458af9", "html_url": "https://github.com/rust-lang/rust/commit/ea9fac5687c24abad493caf4ec5042af47458af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea9fac5687c24abad493caf4ec5042af47458af9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999c1fc2819e34539706b193711735d997633ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/999c1fc2819e34539706b193711735d997633ef1", "html_url": "https://github.com/rust-lang/rust/commit/999c1fc2819e34539706b193711735d997633ef1"}], "stats": {"total": 217, "additions": 112, "deletions": 105}, "files": [{"sha": "b199eee6dad87a2285f099fac8a22274264fdedb", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -178,9 +178,9 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         let mut is_transparent = false;\n \n         for hint in &hints {\n-            let (article, allowed_targets) = match hint.name_or_empty().get() {\n-                name @ \"C\" | name @ \"align\" => {\n-                    is_c |= name == \"C\";\n+            let (article, allowed_targets) = match hint.name_or_empty() {\n+                name @ sym::C | name @ sym::align => {\n+                    is_c |= name == sym::C;\n                     if target != Target::Struct &&\n                             target != Target::Union &&\n                             target != Target::Enum {\n@@ -189,33 +189,33 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                         continue\n                     }\n                 }\n-                \"packed\" => {\n+                sym::packed => {\n                     if target != Target::Struct &&\n                             target != Target::Union {\n                                 (\"a\", \"struct or union\")\n                     } else {\n                         continue\n                     }\n                 }\n-                \"simd\" => {\n+                sym::simd => {\n                     is_simd = true;\n                     if target != Target::Struct {\n                         (\"a\", \"struct\")\n                     } else {\n                         continue\n                     }\n                 }\n-                \"transparent\" => {\n+                sym::transparent => {\n                     is_transparent = true;\n                     if target != Target::Struct {\n                         (\"a\", \"struct\")\n                     } else {\n                         continue\n                     }\n                 }\n-                \"i8\"  | \"u8\"  | \"i16\" | \"u16\" |\n-                \"i32\" | \"u32\" | \"i64\" | \"u64\" |\n-                \"isize\" | \"usize\" => {\n+                sym::i8  | sym::u8  | sym::i16 | sym::u16 |\n+                sym::i32 | sym::u32 | sym::i64 | sym::u64 |\n+                sym::isize | sym::usize => {\n                     int_reprs += 1;\n                     if target != Target::Enum {\n                         (\"an\", \"enum\")"}, {"sha": "9c926dff325bfb5a270f090d283c43c656660d1e", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -194,7 +194,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             struct_span_err!(sess, span, E0452, \"malformed lint attribute\")\n         };\n         for attr in attrs {\n-            let level = match Level::from_str(&attr.name_or_empty()) {\n+            let level = match Level::from_symbol(attr.name_or_empty()) {\n                 None => continue,\n                 Some(lvl) => lvl,\n             };"}, {"sha": "68b65f9b4a1ccfa9c948d76a4f1b8310e209f9a3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -38,7 +38,7 @@ use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnFormat};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n@@ -570,6 +570,17 @@ impl Level {\n             _ => None,\n         }\n     }\n+\n+    /// Converts a symbol to a level.\n+    pub fn from_symbol(x: Symbol) -> Option<Level> {\n+        match x {\n+            sym::allow => Some(Allow),\n+            sym::warn => Some(Warn),\n+            sym::deny => Some(Deny),\n+            sym::forbid => Some(Forbid),\n+            _ => None,\n+        }\n+    }\n }\n \n /// How a lint level was set.\n@@ -752,7 +763,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n \n pub fn maybe_lint_level_root(tcx: TyCtxt<'_, '_, '_>, id: hir::HirId) -> bool {\n     let attrs = tcx.hir().attrs_by_hir_id(id);\n-    attrs.iter().any(|attr| Level::from_str(&attr.name_or_empty()).is_some())\n+    attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n fn lint_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, cnum: CrateNum)"}, {"sha": "76934ddd69b1bb7d9efab259f58e669fba61a630", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -65,9 +65,9 @@ impl<'a, 'tcx> LibFeatureCollector<'a, 'tcx> {\n                 for meta in metas {\n                     if let Some(mi) = meta.meta_item() {\n                         // Find the `feature = \"..\"` meta-item.\n-                        match (mi.name_or_empty().get(), mi.value_str()) {\n-                            (\"feature\", val) => feature = val,\n-                            (\"since\", val) => since = val,\n+                        match (mi.name_or_empty(), mi.value_str()) {\n+                            (sym::feature, val) => feature = val,\n+                            (sym::since, val) => since = val,\n                             _ => {}\n                         }\n                     }"}, {"sha": "abcf164cda6d46f783eec9251c3311f79a9c73be", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> {\n             // Emit errors for non-staged-api crates.\n             for attr in attrs {\n                 let name = attr.name_or_empty();\n-                if [\"unstable\", \"stable\", \"rustc_deprecated\"].contains(&name.get()) {\n+                if [sym::unstable, sym::stable, sym::rustc_deprecated].contains(&name) {\n                     attr::mark_used(attr);\n                     self.tcx.sess.span_err(attr.span, \"stability attributes may not be used \\\n                                                         outside of the standard library\");"}, {"sha": "c3dfd44ad8572f46ebc4ebc67411296924d30c59", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             // Has a plugin registered this attribute as one that must be used at\n             // the crate level?\n             let plugin_crate = plugin_attributes.iter()\n-                .find(|&&(ref x, t)| name == x.as_str() && AttributeType::CrateLevel == t)\n+                .find(|&&(x, t)| name == x && AttributeType::CrateLevel == t)\n                 .is_some();\n             if known_crate || plugin_crate {\n                 let msg = match attr.style {"}, {"sha": "7f2a1c0b4b1d11d6f28a1fe96c60e1a920a23020", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -650,9 +650,8 @@ impl<'a> CrateLoader<'a> {\n     /// SVH and DefIndex of the registrar function.\n     pub fn find_plugin_registrar(&mut self,\n                                  span: Span,\n-                                 name: &str)\n+                                 name: Symbol)\n                                  -> Option<(PathBuf, CrateDisambiguator)> {\n-        let name = Symbol::intern(name);\n         let ekrate = self.read_extension_crate(span, name, name);\n \n         if ekrate.target_only {"}, {"sha": "dea5774aa6eb7c64a00f39545bcf1aece4f9c293", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -55,26 +55,26 @@ impl<'a, 'tcx> VarianceTest<'a, 'tcx> {\n                 // The `..` are the names of fields to dump.\n                 let meta_items = attr.meta_item_list().unwrap_or_default();\n                 for meta_item in meta_items {\n-                    match meta_item.name_or_empty().get() {\n-                        \"abi\" => {\n+                    match meta_item.name_or_empty() {\n+                        sym::abi => {\n                             self.tcx\n                                 .sess\n                                 .span_err(item.span, &format!(\"abi: {:?}\", ty_layout.abi));\n                         }\n \n-                        \"align\" => {\n+                        sym::align => {\n                             self.tcx\n                                 .sess\n                                 .span_err(item.span, &format!(\"align: {:?}\", ty_layout.align));\n                         }\n \n-                        \"size\" => {\n+                        sym::size => {\n                             self.tcx\n                                 .sess\n                                 .span_err(item.span, &format!(\"size: {:?}\", ty_layout.size));\n                         }\n \n-                        \"homogeneous_aggregate\" => {\n+                        sym::homogeneous_aggregate => {\n                             self.tcx.sess.span_err(\n                                 item.span,\n                                 &format!("}, {"sha": "680bdcc4bbe9763f687b3c97685198f8705500ff", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -11,7 +11,7 @@ use std::mem;\n use std::path::PathBuf;\n use syntax::ast;\n use syntax::span_err;\n-use syntax::symbol::sym;\n+use syntax::symbol::{Symbol, keywords, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n /// Pointer to a registrar function.\n@@ -58,9 +58,9 @@ pub fn load_plugins(sess: &Session,\n             for plugin in plugins {\n                 // plugins must have a name and can't be key = value\n                 let name = plugin.name_or_empty();\n-                if !name.is_empty() && !plugin.is_value_str() {\n+                if name != keywords::Invalid.name() && !plugin.is_value_str() {\n                     let args = plugin.meta_item_list().map(ToOwned::to_owned);\n-                    loader.load_plugin(plugin.span(), &name, args.unwrap_or_default());\n+                    loader.load_plugin(plugin.span(), name, args.unwrap_or_default());\n                 } else {\n                     call_malformed_plugin_attribute(sess, attr.span);\n                 }\n@@ -70,7 +70,7 @@ pub fn load_plugins(sess: &Session,\n \n     if let Some(plugins) = addl_plugins {\n         for plugin in plugins {\n-            loader.load_plugin(DUMMY_SP, &plugin, vec![]);\n+            loader.load_plugin(DUMMY_SP, Symbol::intern(&plugin), vec![]);\n         }\n     }\n \n@@ -86,7 +86,7 @@ impl<'a> PluginLoader<'a> {\n         }\n     }\n \n-    fn load_plugin(&mut self, span: Span, name: &str, args: Vec<ast::NestedMetaItem>) {\n+    fn load_plugin(&mut self, span: Span, name: Symbol, args: Vec<ast::NestedMetaItem>) {\n         let registrar = self.reader.find_plugin_registrar(span, name);\n \n         if let Some((lib, disambiguator)) = registrar {"}, {"sha": "428f4f328b907987356c418a09511b582e205c3b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -421,19 +421,19 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n \n                 let name = attr.name_or_empty();\n                 if attr.is_word() {\n-                    if name == \"no_default_passes\" {\n+                    if name == sym::no_default_passes {\n                         report_deprecated_attr(\"no_default_passes\", diag);\n                         if default_passes == passes::DefaultPassOption::Default {\n                             default_passes = passes::DefaultPassOption::None;\n                         }\n                     }\n                 } else if let Some(value) = attr.value_str() {\n-                    let sink = match name.get() {\n-                        \"passes\" => {\n+                    let sink = match name {\n+                        sym::passes => {\n                             report_deprecated_attr(\"passes = \\\"...\\\"\", diag);\n                             &mut manual_passes\n                         },\n-                        \"plugins\" => {\n+                        sym::plugins => {\n                             report_deprecated_attr(\"plugins = \\\"...\\\"\", diag);\n                             eprintln!(\"WARNING: #![doc(plugins = \\\"...\\\")] no longer functions; \\\n                                       see CVE-2018-1000622\");\n@@ -446,7 +446,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                     }\n                 }\n \n-                if attr.is_word() && name == \"document_private_items\" {\n+                if attr.is_word() && name == sym::document_private_items {\n                     if default_passes == passes::DefaultPassOption::Default {\n                         default_passes = passes::DefaultPassOption::Private;\n                     }"}, {"sha": "0207fcda9e880ea6525550ae6b8f3d8a176ca0b3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -50,7 +50,7 @@ use syntax::ast;\n use syntax::ext::base::MacroKind;\n use syntax::source_map::FileName;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::symbol::sym;\n+use syntax::symbol::{Symbol, sym};\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n@@ -573,23 +573,23 @@ pub fn run(mut krate: clean::Crate,\n     // going to emit HTML\n     if let Some(attrs) = krate.module.as_ref().map(|m| &m.attrs) {\n         for attr in attrs.lists(sym::doc) {\n-            match (attr.name_or_empty().get(), attr.value_str()) {\n-                (\"html_favicon_url\", Some(s)) => {\n+            match (attr.name_or_empty(), attr.value_str()) {\n+                (sym::html_favicon_url, Some(s)) => {\n                     scx.layout.favicon = s.to_string();\n                 }\n-                (\"html_logo_url\", Some(s)) => {\n+                (sym::html_logo_url, Some(s)) => {\n                     scx.layout.logo = s.to_string();\n                 }\n-                (\"html_playground_url\", Some(s)) => {\n+                (sym::html_playground_url, Some(s)) => {\n                     markdown::PLAYGROUND.with(|slot| {\n                         let name = krate.name.clone();\n                         *slot.borrow_mut() = Some((Some(name), s.to_string()));\n                     });\n                 }\n-                (\"issue_tracker_base_url\", Some(s)) => {\n+                (sym::issue_tracker_base_url, Some(s)) => {\n                     scx.issue_tracker_base_url = Some(s.to_string());\n                 }\n-                (\"html_no_source\", None) if attr.is_word() => {\n+                (sym::html_no_source, None) if attr.is_word() => {\n                     scx.include_sources = false;\n                 }\n                 _ => {}\n@@ -3762,22 +3762,22 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     }\n }\n \n-const ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n-    \"export_name\",\n-    \"lang\",\n-    \"link_section\",\n-    \"must_use\",\n-    \"no_mangle\",\n-    \"repr\",\n-    \"unsafe_destructor_blind_to_params\",\n-    \"non_exhaustive\"\n+const ATTRIBUTE_WHITELIST: &'static [Symbol] = &[\n+    sym::export_name,\n+    sym::lang,\n+    sym::link_section,\n+    sym::must_use,\n+    sym::no_mangle,\n+    sym::repr,\n+    sym::unsafe_destructor_blind_to_params,\n+    sym::non_exhaustive\n ];\n \n fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item) -> fmt::Result {\n     let mut attrs = String::new();\n \n     for attr in &it.attrs.other_attrs {\n-        if !ATTRIBUTE_WHITELIST.contains(&attr.name_or_empty().get()) {\n+        if !ATTRIBUTE_WHITELIST.contains(&attr.name_or_empty()) {\n             continue;\n         }\n         if let Some(s) = render_attribute(&attr.meta().unwrap()) {"}, {"sha": "65ca96afab1292be47cf18688b1f0708ec6da054", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 39, "deletions": 42, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -229,10 +229,9 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     )+\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n-                            match mi.name_or_empty().get() {\n+                            match mi.name_or_empty() {\n                                 $(\n-                                    stringify!($name)\n-                                        => if !get(mi, &mut $name) { continue 'outer },\n+                                    sym::$name => if !get(mi, &mut $name) { continue 'outer },\n                                 )+\n                                 _ => {\n                                     let expected = &[ $( stringify!($name) ),+ ];\n@@ -259,8 +258,8 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                 }\n             }\n \n-            match meta.name_or_empty().get() {\n-                \"rustc_deprecated\" => {\n+            match meta.name_or_empty() {\n+                sym::rustc_deprecated => {\n                     if rustc_depr.is_some() {\n                         span_err!(diagnostic, item_sp, E0540,\n                                   \"multiple rustc_deprecated attributes\");\n@@ -287,7 +286,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                         }\n                     }\n                 }\n-                \"rustc_const_unstable\" => {\n+                sym::rustc_const_unstable => {\n                     if rustc_const_unstable.is_some() {\n                         span_err!(diagnostic, item_sp, E0553,\n                                   \"multiple rustc_const_unstable attributes\");\n@@ -302,7 +301,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                         continue\n                     }\n                 }\n-                \"unstable\" => {\n+                sym::unstable => {\n                     if stab.is_some() {\n                         handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n                         break\n@@ -313,10 +312,10 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     let mut issue = None;\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n-                            match mi.name_or_empty().get() {\n-                                \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n-                                \"reason\" => if !get(mi, &mut reason) { continue 'outer },\n-                                \"issue\" => if !get(mi, &mut issue) { continue 'outer },\n+                            match mi.name_or_empty() {\n+                                sym::feature => if !get(mi, &mut feature) { continue 'outer },\n+                                sym::reason => if !get(mi, &mut reason) { continue 'outer },\n+                                sym::issue => if !get(mi, &mut issue) { continue 'outer },\n                                 _ => {\n                                     handle_errors(\n                                         sess,\n@@ -374,7 +373,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                         }\n                     }\n                 }\n-                \"stable\" => {\n+                sym::stable => {\n                     if stab.is_some() {\n                         handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n                         break\n@@ -385,11 +384,9 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     for meta in metas {\n                         match meta {\n                             NestedMetaItem::MetaItem(mi) => {\n-                                match mi.name_or_empty().get() {\n-                                    \"feature\" =>\n-                                        if !get(mi, &mut feature) { continue 'outer },\n-                                    \"since\" =>\n-                                        if !get(mi, &mut since) { continue 'outer },\n+                                match mi.name_or_empty() {\n+                                    sym::feature => if !get(mi, &mut feature) { continue 'outer },\n+                                    sym::since => if !get(mi, &mut since) { continue 'outer },\n                                     _ => {\n                                         handle_errors(\n                                             sess,\n@@ -542,14 +539,14 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n \n             // The unwraps below may look dangerous, but we've already asserted\n             // that they won't fail with the loop above.\n-            match cfg.name_or_empty().get() {\n-                \"any\" => mis.iter().any(|mi| {\n+            match cfg.name_or_empty() {\n+                sym::any => mis.iter().any(|mi| {\n                     eval_condition(mi.meta_item().unwrap(), sess, eval)\n                 }),\n-                \"all\" => mis.iter().all(|mi| {\n+                sym::all => mis.iter().all(|mi| {\n                     eval_condition(mi.meta_item().unwrap(), sess, eval)\n                 }),\n-                \"not\" => {\n+                sym::not => {\n                     if mis.len() != 1 {\n                         span_err!(sess.span_diagnostic, cfg.span, E0536, \"expected 1 cfg-pattern\");\n                         return false;\n@@ -645,9 +642,9 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                 for meta in list {\n                     match meta {\n                         NestedMetaItem::MetaItem(mi) => {\n-                            match mi.name_or_empty().get() {\n-                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                                \"note\" => if !get(mi, &mut note) { continue 'outer },\n+                            match mi.name_or_empty() {\n+                                sym::since => if !get(mi, &mut since) { continue 'outer },\n+                                sym::note => if !get(mi, &mut note) { continue 'outer },\n                                 _ => {\n                                     handle_errors(\n                                         sess,\n@@ -739,11 +736,11 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n \n                 let mut recognised = false;\n                 if item.is_word() {\n-                    let hint = match item.name_or_empty().get() {\n-                        \"C\" => Some(ReprC),\n-                        \"packed\" => Some(ReprPacked(1)),\n-                        \"simd\" => Some(ReprSimd),\n-                        \"transparent\" => Some(ReprTransparent),\n+                    let hint = match item.name_or_empty() {\n+                        sym::C => Some(ReprC),\n+                        sym::packed => Some(ReprPacked(1)),\n+                        sym::simd => Some(ReprSimd),\n+                        sym::transparent => Some(ReprTransparent),\n                         name => int_type_of_word(name).map(ReprInt),\n                     };\n \n@@ -830,22 +827,22 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n     acc\n }\n \n-fn int_type_of_word(s: &str) -> Option<IntType> {\n+fn int_type_of_word(s: Symbol) -> Option<IntType> {\n     use IntType::*;\n \n     match s {\n-        \"i8\" => Some(SignedInt(ast::IntTy::I8)),\n-        \"u8\" => Some(UnsignedInt(ast::UintTy::U8)),\n-        \"i16\" => Some(SignedInt(ast::IntTy::I16)),\n-        \"u16\" => Some(UnsignedInt(ast::UintTy::U16)),\n-        \"i32\" => Some(SignedInt(ast::IntTy::I32)),\n-        \"u32\" => Some(UnsignedInt(ast::UintTy::U32)),\n-        \"i64\" => Some(SignedInt(ast::IntTy::I64)),\n-        \"u64\" => Some(UnsignedInt(ast::UintTy::U64)),\n-        \"i128\" => Some(SignedInt(ast::IntTy::I128)),\n-        \"u128\" => Some(UnsignedInt(ast::UintTy::U128)),\n-        \"isize\" => Some(SignedInt(ast::IntTy::Isize)),\n-        \"usize\" => Some(UnsignedInt(ast::UintTy::Usize)),\n+        sym::i8 => Some(SignedInt(ast::IntTy::I8)),\n+        sym::u8 => Some(UnsignedInt(ast::UintTy::U8)),\n+        sym::i16 => Some(SignedInt(ast::IntTy::I16)),\n+        sym::u16 => Some(UnsignedInt(ast::UintTy::U16)),\n+        sym::i32 => Some(SignedInt(ast::IntTy::I32)),\n+        sym::u32 => Some(UnsignedInt(ast::UintTy::U32)),\n+        sym::i64 => Some(SignedInt(ast::IntTy::I64)),\n+        sym::u64 => Some(UnsignedInt(ast::UintTy::U64)),\n+        sym::i128 => Some(SignedInt(ast::IntTy::I128)),\n+        sym::u128 => Some(UnsignedInt(ast::UintTy::U128)),\n+        sym::isize => Some(SignedInt(ast::IntTy::Isize)),\n+        sym::usize => Some(UnsignedInt(ast::UintTy::Usize)),\n         _ => None\n     }\n }"}, {"sha": "d94a3165b0f1d1fdd50ca3da6f166ab28a56bec0", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -22,7 +22,7 @@ use crate::parse::parser::Parser;\n use crate::parse::{self, ParseSess, PResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n-use crate::symbol::{keywords, LocalInternedString, Symbol};\n+use crate::symbol::{keywords, Symbol};\n use crate::ThinVec;\n use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n use crate::GLOBALS;\n@@ -89,8 +89,8 @@ impl NestedMetaItem {\n     pub fn ident(&self) -> Option<Ident> {\n         self.meta_item().and_then(|meta_item| meta_item.ident())\n     }\n-    pub fn name_or_empty(&self) -> LocalInternedString {\n-        self.ident().unwrap_or(keywords::Invalid.ident()).name.as_str()\n+    pub fn name_or_empty(&self) -> Symbol {\n+        self.ident().unwrap_or(keywords::Invalid.ident()).name\n     }\n \n     /// Gets the string value if self is a MetaItem and the MetaItem is a\n@@ -167,8 +167,8 @@ impl Attribute {\n             None\n         }\n     }\n-    pub fn name_or_empty(&self) -> LocalInternedString {\n-        self.ident().unwrap_or(keywords::Invalid.ident()).name.as_str()\n+    pub fn name_or_empty(&self) -> Symbol {\n+        self.ident().unwrap_or(keywords::Invalid.ident()).name\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n@@ -205,8 +205,8 @@ impl MetaItem {\n             None\n         }\n     }\n-    pub fn name_or_empty(&self) -> LocalInternedString {\n-        self.ident().unwrap_or(keywords::Invalid.ident()).name.as_str()\n+    pub fn name_or_empty(&self) -> Symbol {\n+        self.ident().unwrap_or(keywords::Invalid.ident()).name\n     }\n \n     // #[attribute(name = \"value\")]"}, {"sha": "a49926158de1d6aedcb2c9fd8dedddfbfa9cb0f9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -1605,7 +1605,7 @@ impl<'a> Context<'a> {\n             }\n         }\n         if !attr::is_known(attr) {\n-            if attr.name_or_empty().starts_with(\"rustc_\") {\n+            if attr.name_or_empty().as_str().starts_with(\"rustc_\") {\n                 let msg = \"unless otherwise specified, attributes with the prefix `rustc_` \\\n                            are reserved for internal compiler diagnostics\";\n                 gate_feature!(self, rustc_attrs, attr.span, msg);\n@@ -2335,7 +2335,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             let name = mi.name_or_empty();\n-            if INCOMPLETE_FEATURES.iter().any(|f| name == f.as_str()) {\n+            if INCOMPLETE_FEATURES.iter().any(|f| name == *f) {\n                 span_handler.struct_span_warn(\n                     mi.span(),\n                     &format!(\n@@ -2345,7 +2345,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 ).emit();\n             }\n \n-            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name().as_str()) {\n+            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n                 if *edition <= crate_edition {\n                     continue;\n                 }"}, {"sha": "a13dc07085f809403946684e4c03c129fa0858a6", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea9fac5687c24abad493caf4ec5042af47458af9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ea9fac5687c24abad493caf4ec5042af47458af9", "patch": "@@ -464,8 +464,8 @@ impl<'a> TraitDef<'a> {\n                 attrs.extend(item.attrs\n                     .iter()\n                     .filter(|a| {\n-                        [\"allow\", \"warn\", \"deny\", \"forbid\", \"stable\", \"unstable\"]\n-                            .contains(&a.name_or_empty().get())\n+                        [sym::allow, sym::warn, sym::deny, sym::forbid, sym::stable, sym::unstable]\n+                            .contains(&a.name_or_empty())\n                     })\n                     .cloned());\n                 push(Annotatable::Item(P(ast::Item { attrs: attrs, ..(*newitem).clone() })))"}]}