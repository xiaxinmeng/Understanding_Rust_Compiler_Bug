{"sha": "669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OWZjN2Y3ZDEyYjg1YzhkYTZlMGIwY2ZlMmRlMGMzMWRjM2Q0N2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-02T21:02:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-02T21:02:49Z"}, "message": "Auto merge of #28626 - arielb1:closure-needs-infer, r=nikomatsakis\n\nFixes #28550", "tree": {"sha": "5109eb6b5f7b1aefb733bc2aec65f8a5c17b6a5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5109eb6b5f7b1aefb733bc2aec65f8a5c17b6a5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "html_url": "https://github.com/rust-lang/rust/commit/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef07d7dd40e33d7af95c7b00717503730ce69c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef07d7dd40e33d7af95c7b00717503730ce69c11", "html_url": "https://github.com/rust-lang/rust/commit/ef07d7dd40e33d7af95c7b00717503730ce69c11"}, {"sha": "6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "html_url": "https://github.com/rust-lang/rust/commit/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "84673b010332fa90f0bdb80e6fe71e13444e9391", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "patch": "@@ -1394,9 +1394,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.resolve_type_vars_or_error(&ty)\n     }\n \n+    pub fn tables_are_tcx_tables(&self) -> bool {\n+        let tables: &RefCell<ty::Tables> = &self.tables;\n+        let tcx_tables: &RefCell<ty::Tables> = &self.tcx.tables;\n+        tables as *const _ == tcx_tables as *const _\n+    }\n+\n     pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n-        if ty.needs_infer() {\n+        if ty.needs_infer() ||\n+            (ty.has_closure_types() && !self.tables_are_tcx_tables()) {\n             // this can get called from typeck (by euv), and moves_by_default\n             // rightly refuses to work with inference variables, but\n             // moves_by_default has a cache, which we want to use in other"}, {"sha": "f44a535e8176e25aa895dfccc16c0694348eb74c", "filename": "src/test/run-pass/issue-28550.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f/src%2Ftest%2Frun-pass%2Fissue-28550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f/src%2Ftest%2Frun-pass%2Fissue-28550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28550.rs?ref=669fc7f7d12b85c8da6e0b0cfe2de0c31dc3d47f", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A<F: FnOnce()->T,T>(F::Output);\n+struct B<F: FnOnce()->T,T>(A<F,T>);\n+\n+// Removing Option causes it to compile.\n+fn foo<T,F: FnOnce()->T>(f: F) -> Option<B<F,T>> {\n+    Some(B(A(f())))\n+}\n+\n+fn main() {\n+    let v = (|| foo(||4))();\n+    match v {\n+        Some(B(A(4))) => {},\n+        _ => unreachable!()\n+    }\n+}"}]}