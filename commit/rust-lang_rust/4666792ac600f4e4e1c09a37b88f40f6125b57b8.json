{"sha": "4666792ac600f4e4e1c09a37b88f40f6125b57b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NjY3OTJhYzYwMGY0ZTRlMWMwOWEzN2I4OGY0MGY2MTI1YjU3Yjg=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-07T09:55:00Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-07T10:03:03Z"}, "message": "Clean up borrows in borrowck field-sensitivity tests\n\nInstead of calling a borrow() function that takes a pointer type, just\ncreate a local pointer and dereference it. The dereference is there to\noutsmart any future liveness analysis in borrowck.", "tree": {"sha": "2da9a0a58e1bd10ac03e7c14b83a56a59abd868d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da9a0a58e1bd10ac03e7c14b83a56a59abd868d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4666792ac600f4e4e1c09a37b88f40f6125b57b8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4666792ac600f4e4e1c09a37b88f40f6125b57b8", "html_url": "https://github.com/rust-lang/rust/commit/4666792ac600f4e4e1c09a37b88f40f6125b57b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4666792ac600f4e4e1c09a37b88f40f6125b57b8/comments", "author": null, "committer": null, "parents": [{"sha": "653f57af2085534ced338bd146e2528b81c9fd11", "url": "https://api.github.com/repos/rust-lang/rust/commits/653f57af2085534ced338bd146e2528b81c9fd11", "html_url": "https://github.com/rust-lang/rust/commit/653f57af2085534ced338bd146e2528b81c9fd11"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "2fa9067af549a6805e9187cc957b693ea5b37065", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4666792ac600f4e4e1c09a37b88f40f6125b57b8/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4666792ac600f4e4e1c09a37b88f40f6125b57b8/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=4666792ac600f4e4e1c09a37b88f40f6125b57b8", "patch": "@@ -10,8 +10,6 @@\n \n struct A { a: int, b: Box<int> }\n \n-fn borrow<T>(_: &T) { }\n-\n fn deref_after_move() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.b);\n@@ -27,35 +25,37 @@ fn deref_after_fu_move() {\n fn borrow_after_move() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.b);\n-    borrow(&x.b); //~ ERROR use of moved value: `x.b`\n+    let p = &x.b; //~ ERROR use of moved value: `x.b`\n+    drop(**p);\n }\n \n fn borrow_after_fu_move() {\n     let x = A { a: 1, b: box 2 };\n     let _y = A { a: 3, .. x };\n-    borrow(&x.b); //~ ERROR use of moved value: `x.b`\n+    let p = &x.b; //~ ERROR use of moved value: `x.b`\n+    drop(**p);\n }\n \n fn move_after_borrow() {\n     let x = A { a: 1, b: box 2 };\n-    let y = &x.b;\n+    let p = &x.b;\n     drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n-    borrow(&*y);\n+    drop(**p);\n }\n \n fn fu_move_after_borrow() {\n     let x = A { a: 1, b: box 2 };\n-    let y = &x.b;\n-    let _z = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n-    borrow(&*y);\n+    let p = &x.b;\n+    let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n+    drop(**p);\n }\n \n fn mut_borrow_after_mut_borrow() {\n     let mut x = A { a: 1, b: box 2 };\n-    let y = &mut x.a;\n-    let z = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n-    drop(*y);\n-    drop(*z);\n+    let p = &mut x.a;\n+    let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n+    drop(*p);\n+    drop(*q);\n }\n \n fn move_after_move() {\n@@ -107,7 +107,8 @@ fn copy_after_field_assign_after_uninit() {\n fn borrow_after_field_assign_after_uninit() {\n     let mut x: A;\n     x.a = 1;\n-    borrow(&x.a); //~ ERROR use of possibly uninitialized variable: `x.a`\n+    let p = &x.a; //~ ERROR use of possibly uninitialized variable: `x.a`\n+    drop(*p);\n }\n \n fn move_after_field_assign_after_uninit() {"}, {"sha": "a297300daf1b2ee8699db503ec4288448f9d4848", "filename": "src/test/run-pass/borrowck-field-sensitivity.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4666792ac600f4e4e1c09a37b88f40f6125b57b8/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4666792ac600f4e4e1c09a37b88f40f6125b57b8/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs?ref=4666792ac600f4e4e1c09a37b88f40f6125b57b8", "patch": "@@ -11,8 +11,6 @@\n struct A { a: int, b: Box<int> }\n struct B { a: Box<int>, b: Box<int> }\n \n-fn borrow<T>(_: &T) { }\n-\n fn move_after_copy() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.a);\n@@ -64,21 +62,23 @@ fn fu_copy_after_fu_move() {\n fn borrow_after_move() {\n     let x = A { a: 1, b: box 2 };\n     drop(x.b);\n-    borrow(&x.a);\n+    let p = &x.a;\n+    drop(*p);\n }\n \n fn borrow_after_fu_move() {\n     let x = A { a: 1, b: box 2 };\n     let _y = A { a: 3, .. x };\n-    borrow(&x.a);\n+    let p = &x.a;\n+    drop(*p);\n }\n \n fn mut_borrow_after_mut_borrow() {\n     let mut x = A { a: 1, b: box 2 };\n-    let y = &mut x.a;\n-    let z = &mut x.b;\n-    drop(*y);\n-    drop(**z);\n+    let p = &mut x.a;\n+    let q = &mut x.b;\n+    drop(*p);\n+    drop(**q);\n }\n \n fn move_after_move() {\n@@ -138,28 +138,32 @@ fn borrow_after_assign_after_move() {\n     let mut x = A { a: 1, b: box 2 };\n     drop(x.b);\n     x = A { a: 3, b: box 4 };\n-    borrow(&x.b);\n+    let p = &x.b;\n+    drop(**p);\n }\n \n fn borrow_after_assign_after_fu_move() {\n     let mut x = A { a: 1, b: box 2 };\n     let _y = A { a: 3, .. x };\n     x = A { a: 3, b: box 4 };\n-    borrow(&x.b);\n+    let p = &x.b;\n+    drop(**p);\n }\n \n fn borrow_after_field_assign_after_move() {\n     let mut x = A { a: 1, b: box 2 };\n     drop(x.b);\n     x.b = box 3;\n-    borrow(&x.b);\n+    let p = &x.b;\n+    drop(**p);\n }\n \n fn borrow_after_field_assign_after_fu_move() {\n     let mut x = A { a: 1, b: box 2 };\n     let _y = A { a: 3, .. x };\n     x.b = box 3;\n-    borrow(&x.b);\n+    let p = &x.b;\n+    drop(**p);\n }\n \n fn move_after_assign_after_move() {\n@@ -199,7 +203,8 @@ fn copy_after_assign_after_uninit() {\n fn borrow_after_assign_after_uninit() {\n     let mut x: A;\n     x = A { a: 1, b: box 2 };\n-    borrow(&x.a);\n+    let p = &x.a;\n+    drop(*p);\n }\n \n fn move_after_assign_after_uninit() {"}]}