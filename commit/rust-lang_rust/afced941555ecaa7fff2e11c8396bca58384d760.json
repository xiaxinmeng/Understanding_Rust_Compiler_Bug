{"sha": "afced941555ecaa7fff2e11c8396bca58384d760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmY2VkOTQxNTU1ZWNhYTdmZmYyZTExYzgzOTZiY2E1ODM4NGQ3NjA=", "commit": {"author": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2020-01-09T15:40:40Z"}, "committer": {"name": "Jethro Beekman", "email": "jethro@fortanix.com", "date": "2020-01-10T07:12:55Z"}, "message": "Allow specifying LLVM args in target specifications", "tree": {"sha": "b4a3e43460b5a154c3f09e83cd5b796eb62ce942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a3e43460b5a154c3f09e83cd5b796eb62ce942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afced941555ecaa7fff2e11c8396bca58384d760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afced941555ecaa7fff2e11c8396bca58384d760", "html_url": "https://github.com/rust-lang/rust/commit/afced941555ecaa7fff2e11c8396bca58384d760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afced941555ecaa7fff2e11c8396bca58384d760/comments", "author": null, "committer": null, "parents": [{"sha": "adc65725004c8aac16392fe4052c3e347181157d", "url": "https://api.github.com/repos/rust-lang/rust/commits/adc65725004c8aac16392fe4052c3e347181157d", "html_url": "https://github.com/rust-lang/rust/commit/adc65725004c8aac16392fe4052c3e347181157d"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "52613fef7e612b0def79aa7d451130e96adbc9c1", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/afced941555ecaa7fff2e11c8396bca58384d760/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afced941555ecaa7fff2e11c8396bca58384d760/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=afced941555ecaa7fff2e11c8396bca58384d760", "patch": "@@ -46,7 +46,7 @@ fn require_inited() {\n }\n \n unsafe fn configure_llvm(sess: &Session) {\n-    let n_args = sess.opts.cg.llvm_args.len();\n+    let n_args = sess.opts.cg.llvm_args.len() + sess.target.target.options.llvm_args.len();\n     let mut llvm_c_strs = Vec::with_capacity(n_args + 1);\n     let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n@@ -56,14 +56,11 @@ unsafe fn configure_llvm(sess: &Session) {\n         full_arg.trim().split(|c: char| c == '=' || c.is_whitespace()).next().unwrap_or(\"\")\n     }\n \n-    let user_specified_args: FxHashSet<_> = sess\n-        .opts\n-        .cg\n-        .llvm_args\n-        .iter()\n-        .map(|s| llvm_arg_to_arg_name(s))\n-        .filter(|s| s.len() > 0)\n-        .collect();\n+    let cg_opts = sess.opts.cg.llvm_args.iter();\n+    let tg_opts = sess.target.target.options.llvm_args.iter();\n+\n+    let user_specified_args: FxHashSet<_> =\n+        cg_opts.chain(tg_opts).map(|s| llvm_arg_to_arg_name(s)).filter(|s| s.len() > 0).collect();\n \n     {\n         // This adds the given argument to LLVM. Unless `force` is true"}, {"sha": "528ffdf93a01a43ad82822bfa1244a7b61d4eb83", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afced941555ecaa7fff2e11c8396bca58384d760/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afced941555ecaa7fff2e11c8396bca58384d760/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=afced941555ecaa7fff2e11c8396bca58384d760", "patch": "@@ -805,6 +805,9 @@ pub struct TargetOptions {\n \n     /// Whether or not RelaxElfRelocation flag will be passed to the linker\n     pub relax_elf_relocations: bool,\n+\n+    /// Additional arguments to pass to LLVM, similar to the `-C llvm-args` codegen option.\n+    pub llvm_args: Vec<String>,\n }\n \n impl Default for TargetOptions {\n@@ -893,6 +896,7 @@ impl Default for TargetOptions {\n             target_mcount: \"mcount\".to_string(),\n             llvm_abiname: \"\".to_string(),\n             relax_elf_relocations: false,\n+            llvm_args: vec![],\n         }\n     }\n }\n@@ -1206,6 +1210,7 @@ impl Target {\n         key!(target_mcount);\n         key!(llvm_abiname);\n         key!(relax_elf_relocations, bool);\n+        key!(llvm_args, list);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1433,6 +1438,7 @@ impl ToJson for Target {\n         target_option_val!(target_mcount);\n         target_option_val!(llvm_abiname);\n         target_option_val!(relax_elf_relocations);\n+        target_option_val!(llvm_args);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert("}]}