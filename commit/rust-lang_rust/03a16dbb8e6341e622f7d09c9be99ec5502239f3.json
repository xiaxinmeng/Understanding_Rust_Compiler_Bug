{"sha": "03a16dbb8e6341e622f7d09c9be99ec5502239f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTE2ZGJiOGU2MzQxZTYyMmY3ZDA5YzliZTk5ZWM1NTAyMjM5ZjM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-24T04:29:02Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-28T06:41:10Z"}, "message": "std: fix the casing of option::{Some,None} in the docs", "tree": {"sha": "e5b67424e54c79eeba5cebfeb2e42e31bec3b506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b67424e54c79eeba5cebfeb2e42e31bec3b506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a16dbb8e6341e622f7d09c9be99ec5502239f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a16dbb8e6341e622f7d09c9be99ec5502239f3", "html_url": "https://github.com/rust-lang/rust/commit/03a16dbb8e6341e622f7d09c9be99ec5502239f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a16dbb8e6341e622f7d09c9be99ec5502239f3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a68c719f4a32123fbd428fe280f41af47d00fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a68c719f4a32123fbd428fe280f41af47d00fea", "html_url": "https://github.com/rust-lang/rust/commit/2a68c719f4a32123fbd428fe280f41af47d00fea"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "ff35af4cff020c4e61013eb37cd54612a8b6d488", "filename": "src/libstd/option.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03a16dbb8e6341e622f7d09c9be99ec5502239f3/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a16dbb8e6341e622f7d09c9be99ec5502239f3/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=03a16dbb8e6341e622f7d09c9be99ec5502239f3", "patch": "@@ -271,7 +271,7 @@ impl<T> Option<T> {\n     pub fn get_ref<'a>(&'a self) -> &'a T {\n         match *self {\n           Some(ref x) => x,\n-          None => fail!(\"option::get_ref None\")\n+          None => fail!(\"option::get_ref `None`\"),\n         }\n     }\n \n@@ -293,7 +293,7 @@ impl<T> Option<T> {\n     pub fn get_mut_ref<'a>(&'a mut self) -> &'a mut T {\n         match *self {\n           Some(ref mut x) => x,\n-          None => fail!(\"option::get_mut_ref None\")\n+          None => fail!(\"option::get_mut_ref `None`\"),\n         }\n     }\n \n@@ -317,7 +317,7 @@ impl<T> Option<T> {\n          */\n         match self {\n           Some(x) => x,\n-          None => fail!(\"option::unwrap None\")\n+          None => fail!(\"option::unwrap `None`\"),\n         }\n     }\n \n@@ -331,7 +331,7 @@ impl<T> Option<T> {\n      */\n     #[inline]\n     pub fn take_unwrap(&mut self) -> T {\n-        if self.is_none() { fail!(\"option::take_unwrap None\") }\n+        if self.is_none() { fail!(\"option::take_unwrap `None`\") }\n         self.take().unwrap()\n     }\n \n@@ -369,7 +369,7 @@ impl<T> Option<T> {\n     pub fn get(self) -> T {\n         match self {\n           Some(x) => return x,\n-          None => fail!(\"option::get None\")\n+          None => fail!(\"option::get `None`\")\n         }\n     }\n \n@@ -379,7 +379,7 @@ impl<T> Option<T> {\n         match self { Some(x) => x, None => def }\n     }\n \n-    /// Applies a function zero or more times until the result is None.\n+    /// Applies a function zero or more times until the result is `None`.\n     #[inline]\n     pub fn while_some(self, blk: &fn(v: T) -> Option<T>) {\n         let mut opt = self;"}]}