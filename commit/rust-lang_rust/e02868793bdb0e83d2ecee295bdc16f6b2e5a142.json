{"sha": "e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMjg2ODc5M2JkYjBlODNkMmVjZWUyOTViZGMxNmY2YjJlNWExNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-22T19:38:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-22T19:38:32Z"}, "message": "Auto merge of #50144 - sfackler:oom-lang-item, r=alexcrichton\n\nReplace {Alloc,GlobalAlloc}::oom with a lang item.\n\nThe decision of what to do after an allocation fails is orthogonal to the decision of how to allocate the memory, so this PR splits them apart. `Alloc::oom` and `GlobalAlloc::oom` have been removed, and a lang item has been added:\n\n```rust\n#[lang = \"oom\"]\nfn oom() -> !;\n```\n\nIt is specifically a weak lang item, like panic_fmt, except that it is required when you depend on liballoc rather than libcore. libstd provides an implementation that aborts with the message `fatal runtime error: memory allocation failed`, matching the current behavior.\n\nThe new implementation is also significantly simpler - it's \"just another weak lang item\". [RFC 2070](https://github.com/rust-lang/rfcs/blob/master/text/2070-panic-implementation.md) specifies a path towards stabilizing panic_fmt, so any complexities around stable weak lang item definition are already being solved.\n\nTo bootstrap, oom silently aborts in stage0. alloc_system no longer has a bunch of code to print to stderr, and alloc_jemalloc no longer depends on alloc_system to pull in that code.\n\nOne fun note: System's GlobalAlloc implementation didn't override the default implementation of oom, so it currently aborts silently!\n\nr? @alexcrichton", "tree": {"sha": "ae75a61ad074096fc00e977a2774a833dc3ba0ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae75a61ad074096fc00e977a2774a833dc3ba0ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "html_url": "https://github.com/rust-lang/rust/commit/e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff48277add047928dcd19d64ffe93c46b0612a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff48277add047928dcd19d64ffe93c46b0612a4d", "html_url": "https://github.com/rust-lang/rust/commit/ff48277add047928dcd19d64ffe93c46b0612a4d"}, {"sha": "5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5969712c3f2163b7ca6f809e0f5e31f73e8898bb", "html_url": "https://github.com/rust-lang/rust/commit/5969712c3f2163b7ca6f809e0f5e31f73e8898bb"}], "stats": {"total": 238, "additions": 61, "deletions": 177}, "files": [{"sha": "6f054dc61a59b8393aaa4d7772df304ea3e4e151", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -19,7 +19,6 @@ dependencies = [\n name = \"alloc_jemalloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiler_builtins 0.0.0\","}, {"sha": "c0372d24ed50151f87e617c385a8d27a79e2f5bc", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -48,9 +48,6 @@ extern \"Rust\" {\n     #[allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n-    #[cold]\n-    #[rustc_allocator_nounwind]\n-    fn __rust_oom() -> !;\n     #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n     #[rustc_allocator_nounwind]\n@@ -107,16 +104,6 @@ unsafe impl GlobalAlloc for Global {\n         let ptr = __rust_alloc_zeroed(layout.size(), layout.align(), &mut 0);\n         ptr as *mut Opaque\n     }\n-\n-    #[inline]\n-    fn oom(&self) -> ! {\n-        unsafe {\n-            #[cfg(not(stage0))]\n-            __rust_oom();\n-            #[cfg(stage0)]\n-            __rust_oom(&mut 0);\n-        }\n-    }\n }\n \n unsafe impl Alloc for Global {\n@@ -144,11 +131,6 @@ unsafe impl Alloc for Global {\n     unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<Opaque>, AllocErr> {\n         NonNull::new(GlobalAlloc::alloc_zeroed(self, layout)).ok_or(AllocErr)\n     }\n-\n-    #[inline]\n-    fn oom(&mut self) -> ! {\n-        GlobalAlloc::oom(self)\n-    }\n }\n \n /// The allocator for unique pointers.\n@@ -165,7 +147,7 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         if !ptr.is_null() {\n             ptr as *mut u8\n         } else {\n-            Global.oom()\n+            oom()\n         }\n     }\n }\n@@ -182,19 +164,33 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     }\n }\n \n+#[cfg(stage0)]\n+pub fn oom() -> ! {\n+    unsafe { ::core::intrinsics::abort() }\n+}\n+\n+#[cfg(not(stage0))]\n+pub fn oom() -> ! {\n+    extern {\n+        #[lang = \"oom\"]\n+        fn oom_impl() -> !;\n+    }\n+    unsafe { oom_impl() }\n+}\n+\n #[cfg(test)]\n mod tests {\n     extern crate test;\n     use self::test::Bencher;\n     use boxed::Box;\n-    use alloc::{Global, Alloc, Layout};\n+    use alloc::{Global, Alloc, Layout, oom};\n \n     #[test]\n     fn allocate_zeroed() {\n         unsafe {\n             let layout = Layout::from_size_align(1024, 1).unwrap();\n             let ptr = Global.alloc_zeroed(layout.clone())\n-                .unwrap_or_else(|_| Global.oom());\n+                .unwrap_or_else(|_| oom());\n \n             let mut i = ptr.cast::<u8>().as_ptr();\n             let end = i.offset(layout.size() as isize);"}, {"sha": "f5980f4599e45ea8906263819e177dfe233eae41", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -31,7 +31,7 @@ use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n use core::convert::From;\n \n-use alloc::{Global, Alloc, Layout, box_free};\n+use alloc::{Global, Alloc, Layout, box_free, oom};\n use boxed::Box;\n use string::String;\n use vec::Vec;\n@@ -553,7 +553,7 @@ impl<T: ?Sized> Arc<T> {\n         let layout = Layout::for_value(&*fake_ptr);\n \n         let mem = Global.alloc(layout)\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n \n         // Initialize the real ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut ArcInner<T>;"}, {"sha": "16f0630b91134dd62965aa04d75663b98cc402f6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -59,7 +59,7 @@ unsafe impl<T> Alloc for T where T: CoreAlloc {\n     }\n \n     fn oom(&mut self, _: AllocErr) -> ! {\n-        CoreAlloc::oom(self)\n+        unsafe { ::core::intrinsics::abort() }\n     }\n \n     fn usable_size(&self, layout: &Layout) -> (usize, usize) {"}, {"sha": "7ef0a27fc7258876768fb3abfaac3396e9ff8da4", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -14,7 +14,7 @@ use core::ops::Drop;\n use core::ptr::{self, NonNull, Unique};\n use core::slice;\n \n-use alloc::{Alloc, Layout, Global};\n+use alloc::{Alloc, Layout, Global, oom};\n use alloc::CollectionAllocErr;\n use alloc::CollectionAllocErr::*;\n use boxed::Box;\n@@ -101,7 +101,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                 };\n                 match result {\n                     Ok(ptr) => ptr,\n-                    Err(_) => a.oom(),\n+                    Err(_) => oom(),\n                 }\n             };\n \n@@ -316,7 +316,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                                                  new_size);\n                     match ptr_res {\n                         Ok(ptr) => (new_cap, ptr.cast().into()),\n-                        Err(_) => self.a.oom(),\n+                        Err(_) => oom(),\n                     }\n                 }\n                 None => {\n@@ -325,7 +325,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                     let new_cap = if elem_size > (!0) / 8 { 1 } else { 4 };\n                     match self.a.alloc_array::<T>(new_cap) {\n                         Ok(ptr) => (new_cap, ptr.into()),\n-                        Err(_) => self.a.oom(),\n+                        Err(_) => oom(),\n                     }\n                 }\n             };\n@@ -442,7 +442,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve_exact(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve_exact(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocErr) => self.a.oom(),\n+            Err(AllocErr) => oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -552,7 +552,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n     pub fn reserve(&mut self, used_cap: usize, needed_extra_cap: usize) {\n         match self.try_reserve(used_cap, needed_extra_cap) {\n             Err(CapacityOverflow) => capacity_overflow(),\n-            Err(AllocErr) => self.a.oom(),\n+            Err(AllocErr) => oom(),\n             Ok(()) => { /* yay */ }\n          }\n      }\n@@ -667,7 +667,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n                                      old_layout,\n                                      new_size) {\n                     Ok(p) => self.ptr = p.cast().into(),\n-                    Err(_) => self.a.oom(),\n+                    Err(_) => oom(),\n                 }\n             }\n             self.cap = amount;"}, {"sha": "8fb8e111754a903e49819309c66c9004e0224e11", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -259,7 +259,7 @@ use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n \n-use alloc::{Global, Alloc, Layout, Opaque, box_free};\n+use alloc::{Global, Alloc, Layout, Opaque, box_free, oom};\n use string::String;\n use vec::Vec;\n \n@@ -668,7 +668,7 @@ impl<T: ?Sized> Rc<T> {\n         let layout = Layout::for_value(&*fake_ptr);\n \n         let mem = Global.alloc(layout)\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n \n         // Initialize the real RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut RcBox<T>;"}, {"sha": "7986d5dd2eb54b69a12990dc83891ba320a7e838", "filename": "src/liballoc_jemalloc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc_jemalloc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc_jemalloc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2FCargo.toml?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -12,7 +12,6 @@ test = false\n doc = false\n \n [dependencies]\n-alloc_system = { path = \"../liballoc_system\" }\n core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n compiler_builtins = { path = \"../rustc/compiler_builtins_shim\" }"}, {"sha": "4b8755877de4bf7e044d8047054f076e0e4d3984", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -14,7 +14,7 @@\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n             issue = \"27783\")]\n-#![feature(alloc_system)]\n+#![feature(core_intrinsics)]\n #![feature(libc)]\n #![feature(linkage)]\n #![feature(staged_api)]\n@@ -23,15 +23,12 @@\n #![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n #![rustc_alloc_kind = \"exe\"]\n \n-extern crate alloc_system;\n extern crate libc;\n \n #[cfg(not(dummy_jemalloc))]\n pub use contents::*;\n #[cfg(not(dummy_jemalloc))]\n mod contents {\n-    use core::alloc::GlobalAlloc;\n-    use alloc_system::System;\n     use libc::{c_int, c_void, size_t};\n \n     // Note that the symbols here are prefixed by default on macOS and Windows (we\n@@ -100,10 +97,11 @@ mod contents {\n         ptr\n     }\n \n+    #[cfg(stage0)]\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_oom() -> ! {\n-        System.oom()\n+        ::core::intrinsics::abort();\n     }\n \n     #[no_mangle]"}, {"sha": "7376ac0f15dd0fd7a61b62e2826bca468008c8e5", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -71,11 +71,6 @@ unsafe impl Alloc for System {\n                       new_size: usize) -> Result<NonNull<Opaque>, AllocErr> {\n         NonNull::new(GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n     }\n-\n-    #[inline]\n-    fn oom(&mut self) -> ! {\n-        ::oom()\n-    }\n }\n \n #[cfg(stage0)]\n@@ -103,11 +98,6 @@ unsafe impl<'a> Alloc for &'a System {\n                       new_size: usize) -> Result<NonNull<Opaque>, AllocErr> {\n         NonNull::new(GlobalAlloc::realloc(*self, ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n     }\n-\n-    #[inline]\n-    fn oom(&mut self) -> ! {\n-        ::oom()\n-    }\n }\n \n #[cfg(any(windows, unix, target_os = \"cloudabi\", target_os = \"redox\"))]\n@@ -366,63 +356,3 @@ mod platform {\n         }\n     }\n }\n-\n-#[inline]\n-fn oom() -> ! {\n-    write_to_stderr(\"fatal runtime error: memory allocation failed\");\n-    unsafe {\n-        ::core::intrinsics::abort();\n-    }\n-}\n-\n-#[cfg(any(unix, target_os = \"redox\"))]\n-#[inline]\n-fn write_to_stderr(s: &str) {\n-    extern crate libc;\n-\n-    unsafe {\n-        libc::write(libc::STDERR_FILENO,\n-                    s.as_ptr() as *const libc::c_void,\n-                    s.len());\n-    }\n-}\n-\n-#[cfg(windows)]\n-#[inline]\n-fn write_to_stderr(s: &str) {\n-    use core::ptr;\n-\n-    type LPVOID = *mut u8;\n-    type HANDLE = LPVOID;\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type LPDWORD = *mut DWORD;\n-    type LPOVERLAPPED = *mut u8;\n-\n-    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n-\n-    extern \"system\" {\n-        fn WriteFile(hFile: HANDLE,\n-                     lpBuffer: LPVOID,\n-                     nNumberOfBytesToWrite: DWORD,\n-                     lpNumberOfBytesWritten: LPDWORD,\n-                     lpOverlapped: LPOVERLAPPED)\n-                     -> BOOL;\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-    }\n-\n-    unsafe {\n-        // WriteFile silently fails if it is passed an invalid\n-        // handle, so there is no need to check the result of\n-        // GetStdHandle.\n-        WriteFile(GetStdHandle(STD_ERROR_HANDLE),\n-                  s.as_ptr() as LPVOID,\n-                  s.len() as DWORD,\n-                  ptr::null_mut(),\n-                  ptr::null_mut());\n-    }\n-}\n-\n-#[cfg(not(any(windows, unix, target_os = \"redox\")))]\n-#[inline]\n-fn write_to_stderr(_: &str) {}"}, {"sha": "674c4fb57c7f03de938288d6550d632e22484355", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -451,17 +451,6 @@ pub unsafe trait GlobalAlloc {\n         }\n         new_ptr\n     }\n-\n-    /// Aborts the thread or process, optionally performing\n-    /// cleanup or logging diagnostic information before panicking or\n-    /// aborting.\n-    ///\n-    /// `oom` is meant to be used by clients unable to cope with an\n-    /// unsatisfied allocation request, and wish to abandon\n-    /// computation rather than attempt to recover locally.\n-    fn oom(&self) -> ! {\n-        unsafe { ::intrinsics::abort() }\n-    }\n }\n \n /// An implementation of `Alloc` can allocate, reallocate, and\n@@ -614,32 +603,6 @@ pub unsafe trait Alloc {\n     ///   to allocate that block of memory.\n     unsafe fn dealloc(&mut self, ptr: NonNull<Opaque>, layout: Layout);\n \n-    /// Allocator-specific method for signaling an out-of-memory\n-    /// condition.\n-    ///\n-    /// `oom` aborts the thread or process, optionally performing\n-    /// cleanup or logging diagnostic information before panicking or\n-    /// aborting.\n-    ///\n-    /// `oom` is meant to be used by clients unable to cope with an\n-    /// unsatisfied allocation request, and wish to abandon\n-    /// computation rather than attempt to recover locally.\n-    ///\n-    /// Implementations of the `oom` method are discouraged from\n-    /// infinitely regressing in nested calls to `oom`. In\n-    /// practice this means implementors should eschew allocating,\n-    /// especially from `self` (directly or indirectly).\n-    ///\n-    /// Implementations of the allocation and reallocation methods\n-    /// (e.g. `alloc`, `alloc_one`, `realloc`) are discouraged from\n-    /// panicking (or aborting) in the event of memory exhaustion;\n-    /// instead they should return an appropriate error from the\n-    /// invoked method, and let the client decide whether to invoke\n-    /// this `oom` method in response.\n-    fn oom(&mut self) -> ! {\n-        unsafe { ::intrinsics::abort() }\n-    }\n-\n     // == ALLOCATOR-SPECIFIC QUANTITIES AND LIMITS ==\n     // usable_size\n "}, {"sha": "95e92e21b09dcdd50129bad5151257cbe62bb725", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -303,7 +303,8 @@ language_item_table! {\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;\n-    DropInPlaceFnLangItem,             \"drop_in_place\",           drop_in_place_fn;\n+    DropInPlaceFnLangItem,           \"drop_in_place\",           drop_in_place_fn;\n+    OomLangItem,                     \"oom\",                     oom;\n \n     StartFnLangItem,                 \"start\",                   start_fn;\n "}, {"sha": "a2bceb191022165f2ff59c10760ac7bfd8474671", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -151,4 +151,5 @@ weak_lang_items! {\n     panic_fmt,          PanicFmtLangItem,           rust_begin_unwind;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n     eh_unwind_resume,   EhUnwindResumeLangItem,     rust_eh_unwind_resume;\n+    oom,                OomLangItem,                rust_oom;\n }"}, {"sha": "9338d000c1291aeb24dff3b95cf3e29499b66630", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -245,7 +245,7 @@ impl<'a> AllocFnFactory<'a> {\n                 self.cx.expr_ident(self.span, ident)\n             }\n \n-            AllocatorTy::ResultPtr | AllocatorTy::Bang | AllocatorTy::Unit => {\n+            AllocatorTy::ResultPtr | AllocatorTy::Unit => {\n                 panic!(\"can't convert AllocatorTy to an argument\")\n             }\n         }\n@@ -262,8 +262,6 @@ impl<'a> AllocFnFactory<'a> {\n                 (self.ptr_u8(), expr)\n             }\n \n-            AllocatorTy::Bang => (self.cx.ty(self.span, TyKind::Never), expr),\n-\n             AllocatorTy::Unit => (self.cx.ty(self.span, TyKind::Tup(Vec::new())), expr),\n \n             AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {"}, {"sha": "969086815ded4777c3cc6939d9e3be4fc58be6b0", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -23,11 +23,6 @@ pub static ALLOCATOR_METHODS: &[AllocatorMethod] = &[\n         inputs: &[AllocatorTy::Layout],\n         output: AllocatorTy::ResultPtr,\n     },\n-    AllocatorMethod {\n-        name: \"oom\",\n-        inputs: &[],\n-        output: AllocatorTy::Bang,\n-    },\n     AllocatorMethod {\n         name: \"dealloc\",\n         inputs: &[AllocatorTy::Ptr, AllocatorTy::Layout],\n@@ -52,7 +47,6 @@ pub struct AllocatorMethod {\n }\n \n pub enum AllocatorTy {\n-    Bang,\n     Layout,\n     Ptr,\n     ResultPtr,"}, {"sha": "ffebb959ebfde494abdd58d680e008da35f76f18", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -43,13 +43,11 @@ pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind)\n                 AllocatorTy::Ptr => args.push(i8p),\n                 AllocatorTy::Usize => args.push(usize),\n \n-                AllocatorTy::Bang |\n                 AllocatorTy::ResultPtr |\n                 AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n             }\n         }\n         let output = match method.output {\n-            AllocatorTy::Bang => None,\n             AllocatorTy::ResultPtr => Some(i8p),\n             AllocatorTy::Unit => None,\n "}, {"sha": "a8578404467b1d3185b4322abf2eb2ed9374f748", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -13,10 +13,18 @@\n #![unstable(issue = \"32838\", feature = \"allocator_api\")]\n \n #[doc(inline)] #[allow(deprecated)] pub use alloc_crate::alloc::Heap;\n-#[doc(inline)] pub use alloc_crate::alloc::Global;\n+#[doc(inline)] pub use alloc_crate::alloc::{Global, oom};\n #[doc(inline)] pub use alloc_system::System;\n #[doc(inline)] pub use core::alloc::*;\n \n+#[cfg(not(stage0))]\n+#[cfg(not(test))]\n+#[doc(hidden)]\n+#[lang = \"oom\"]\n+pub extern fn rust_oom() -> ! {\n+    rtabort!(\"memory allocation failed\");\n+}\n+\n #[cfg(not(test))]\n #[doc(hidden)]\n #[allow(unused_attributes)]\n@@ -35,10 +43,11 @@ pub mod __default_lib_allocator {\n         System.alloc(layout) as *mut u8\n     }\n \n+    #[cfg(stage0)]\n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_oom() -> ! {\n-        System.oom()\n+        super::oom()\n     }\n \n     #[no_mangle]"}, {"sha": "a8c70489f443690c3151e0cd67f84a9ad43c324b", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -11,7 +11,7 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n-use alloc::{Global, Alloc, CollectionAllocErr};\n+use alloc::{CollectionAllocErr, oom};\n use cell::Cell;\n use borrow::Borrow;\n use cmp::max;\n@@ -784,7 +784,7 @@ impl<K, V, S> HashMap<K, V, S>\n     pub fn reserve(&mut self, additional: usize) {\n         match self.try_reserve(additional) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => oom(),\n             Ok(()) => { /* yay */ }\n          }\n     }"}, {"sha": "52c53dc3b1251a35f83eae4ee14a5ba380243616", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::{Global, Alloc, Layout, CollectionAllocErr};\n+use alloc::{Global, Alloc, Layout, CollectionAllocErr, oom};\n use cmp;\n use hash::{BuildHasher, Hash, Hasher};\n use marker;\n@@ -770,7 +770,7 @@ impl<K, V> RawTable<K, V> {\n     unsafe fn new_uninitialized(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new_uninitialized(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => oom(),\n             Ok(table) => { table }\n         }\n     }\n@@ -809,7 +809,7 @@ impl<K, V> RawTable<K, V> {\n     pub fn new(capacity: usize) -> RawTable<K, V> {\n         match Self::try_new(capacity) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),\n-            Err(CollectionAllocErr::AllocErr) => Global.oom(),\n+            Err(CollectionAllocErr::AllocErr) => oom(),\n             Ok(table) => { table }\n         }\n     }"}, {"sha": "1df7bc777d17e56b2a786bb26845134a3e1adf8e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -482,7 +482,6 @@ pub mod path;\n pub mod process;\n pub mod sync;\n pub mod time;\n-pub mod alloc;\n \n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n@@ -496,6 +495,8 @@ pub mod heap {\n mod sys_common;\n mod sys;\n \n+pub mod alloc;\n+\n // Private support modules\n mod panicking;\n mod memchr;"}, {"sha": "140cad22f34e42ae52b5b94ffe1b071fd9c3ff41", "filename": "src/test/compile-fail/allocator/not-an-allocator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator%2Fnot-an-allocator.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -16,6 +16,5 @@ static A: usize = 0;\n //~| the trait bound `usize:\n //~| the trait bound `usize:\n //~| the trait bound `usize:\n-//~| the trait bound `usize:\n \n fn main() {}"}, {"sha": "12b115d09380e3f8a3dd1b0ffdb044dde8668d5d", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -10,13 +10,11 @@\n \n #![feature(allocator_api, nonnull)]\n \n-use std::alloc::{Alloc, Global};\n+use std::alloc::{Alloc, Global, oom};\n \n fn main() {\n     unsafe {\n-        let ptr = Global.alloc_one::<i32>().unwrap_or_else(|_| {\n-            Global.oom()\n-        });\n+        let ptr = Global.alloc_one::<i32>().unwrap_or_else(|_| oom());\n         *ptr.as_ptr() = 4;\n         assert_eq!(*ptr.as_ptr(), 4);\n         Global.dealloc_one(ptr);"}, {"sha": "308792e5d8924782a13a8f812a9ce34465af4616", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -15,7 +15,7 @@\n \n #![feature(heap_api, allocator_api)]\n \n-use std::alloc::{Global, Alloc, Layout};\n+use std::alloc::{Global, Alloc, Layout, oom};\n use std::ptr::{self, NonNull};\n \n fn main() {\n@@ -50,7 +50,7 @@ unsafe fn test_triangle() -> bool {\n             println!(\"allocate({:?})\", layout);\n         }\n \n-        let ret = Global.alloc(layout.clone()).unwrap_or_else(|_| Global.oom());\n+        let ret = Global.alloc(layout.clone()).unwrap_or_else(|_| oom());\n \n         if PRINT {\n             println!(\"allocate({:?}) = {:?}\", layout, ret);\n@@ -73,7 +73,7 @@ unsafe fn test_triangle() -> bool {\n         }\n \n         let ret = Global.realloc(NonNull::new_unchecked(ptr).as_opaque(), old.clone(), new.size())\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n \n         if PRINT {\n             println!(\"reallocate({:?}, old={:?}, new={:?}) = {:?}\","}, {"sha": "60a7f70931d48baf6bd17232fee5c4003d2f80aa", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02868793bdb0e83d2ecee295bdc16f6b2e5a142/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=e02868793bdb0e83d2ecee295bdc16f6b2e5a142", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(allocator_api)]\n \n-use std::alloc::{Alloc, Global, Layout};\n+use std::alloc::{Alloc, Global, Layout, oom};\n use std::ptr::NonNull;\n \n struct arena(());\n@@ -33,7 +33,7 @@ struct Ccx {\n fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n     unsafe {\n         let ptr = Global.alloc(Layout::new::<Bcx>())\n-            .unwrap_or_else(|_| Global.oom());\n+            .unwrap_or_else(|_| oom());\n         &*(ptr.as_ptr() as *const _)\n     }\n }"}]}