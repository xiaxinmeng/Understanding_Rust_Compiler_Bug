{"sha": "d5b73c184b31f90ae0ef299e109d87225f139d5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YjczYzE4NGIzMWY5MGFlMGVmMjk5ZTEwOWQ4NzIyNWYxMzlkNWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-29T16:10:53Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-29T16:10:53Z"}, "message": "Fix placement of new_without_default suggestion", "tree": {"sha": "899c605512da2c1e7e7ac048b94c6e50056b1982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899c605512da2c1e7e7ac048b94c6e50056b1982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b73c184b31f90ae0ef299e109d87225f139d5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloe3A0ACgkQpp+NIls6\n19mgDRAArZYf6bAb6+iCyi91WiG6nmyzbn/pHKgCyESMBDLpqUqI5SCYzqssv6rV\nx/riK/eX6OYLLAs5PQDrfji/ItbOZNJb0uaJEYV1ptlokHUOzZ6gjbIzjCsEmfaU\nr/BJ3X0fCwFVhC4gkCgqTcx1dovnba9g8I2p8Gkmx7TLiMRmx2V7PiPlqndXu+N1\nP+mM/cEN/SyBgpTEpEyOsk26d4xfNlrVxvQyW148E68hxv3wXQYoFvu+nABuKdQV\n7TZSmjcJscPNt6FSmBujVfmHGYkJ7Z9by5tWelMfq4wJm+wJqbJ5SUotUYq1HX30\nzk6Jn4HsGXRL488rBPW8Eos4bcMxnu7mO9a8xiZKIw9n+4phrU8F3SwSz1XbiARl\nj/QX0G6PpPLkvQ1NsQvoddq3vAE/1K+yi0hkxmSbNXQipAuok9l/suolO4gyWebD\nIi0pcw+lVtkgsqZX7baZYnh0jXSx2G1KwbAVLHPBfHOwIQdo6bOA0lE2mnzk0UT3\nd0UGjX1ScdtapiQsCWSZVfCKCvvH2NhyUOdnW/TI3W7cdqaZ9xDuv6o4q3zeW31Z\nHUi3S0bQrMMHC7H1D5iK2fdW5opan2smIWcLhuJJlb3ElenaEJg6KEyuHJHMKeQR\nXu+Ki+4YMEBiDIOLUqcuCeOVOwjX/AcOUFk1wITJ011C6/Gcj88=\n=Rdw/\n-----END PGP SIGNATURE-----", "payload": "tree 899c605512da2c1e7e7ac048b94c6e50056b1982\nparent 317e97bae79331cba506da9615850405fa82d937\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511971853 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1511971853 +0100\n\nFix placement of new_without_default suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b73c184b31f90ae0ef299e109d87225f139d5e", "html_url": "https://github.com/rust-lang/rust/commit/d5b73c184b31f90ae0ef299e109d87225f139d5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b73c184b31f90ae0ef299e109d87225f139d5e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317e97bae79331cba506da9615850405fa82d937", "url": "https://api.github.com/repos/rust-lang/rust/commits/317e97bae79331cba506da9615850405fa82d937", "html_url": "https://github.com/rust-lang/rust/commit/317e97bae79331cba506da9615850405fa82d937"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "b281fd3060e629e248e3bf45ae6b0452977ffeb5", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5b73c184b31f90ae0ef299e109d87225f139d5e/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b73c184b31f90ae0ef299e109d87225f139d5e/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=d5b73c184b31f90ae0ef299e109d87225f139d5e", "patch": "@@ -98,23 +98,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     }\n                     if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n                         let name = impl_item.name;\n-                        let span = impl_item.span;\n                         let id = impl_item.id;\n-                        let decl = &sig.decl;\n                         if sig.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;\n                         }\n-                        if !impl_item.generics\n-                            .ty_params\n-                            .is_empty()\n-                        {\n+                        if !impl_item.generics.ty_params.is_empty() {\n                             // when the result of `new()` depends on a type parameter we should not require\n                             // an\n                             // impl of `Default`\n                             return;\n                         }\n-                        if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n+                        if sig.decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                             let self_ty = cx.tcx\n                                 .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n                             if_chain! {\n@@ -126,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                         span_lint_and_then(\n                                             cx,\n                                             NEW_WITHOUT_DEFAULT_DERIVE,\n-                                            span,\n+                                            impl_item.span,\n                                             &format!(\"you should consider deriving a `Default` implementation for `{}`\", self_ty),\n                                             |db| {\n                                                 db.suggest_item_with_attr(cx, sp, \"try this\", \"#[derive(Default)]\");\n@@ -135,12 +130,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                         span_lint_and_then(\n                                             cx,\n                                             NEW_WITHOUT_DEFAULT,\n-                                            span,\n+                                            impl_item.span,\n                                             &format!(\"you should consider adding a `Default` implementation for `{}`\", self_ty),\n                                             |db| {\n                                                 db.suggest_prepend_item(\n                                                     cx,\n-                                                    span,\n+                                                    item.span,\n                                                     \"try this\",\n                                                     &create_new_without_default_suggest_msg(self_ty),\n                                                 );"}, {"sha": "c12c10b9ae079602cb9eb94aa75d57548ac3f71b", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5b73c184b31f90ae0ef299e109d87225f139d5e/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5b73c184b31f90ae0ef299e109d87225f139d5e/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=d5b73c184b31f90ae0ef299e109d87225f139d5e", "patch": "@@ -29,11 +29,10 @@ error: you should consider adding a `Default` implementation for `LtKo<'c>`\n    = note: `-D new-without-default` implied by `-D warnings`\n help: try this\n    |\n-64 |     impl Default for LtKo<'c> {\n-65 |         fn default() -> Self {\n-66 |             Self::new()\n-67 |         }\n-68 |     }\n-69 | \n- ...\n+63 | impl Default for LtKo<'c> {\n+64 |     fn default() -> Self {\n+65 |         Self::new()\n+66 |     }\n+67 | }\n+   |\n "}]}