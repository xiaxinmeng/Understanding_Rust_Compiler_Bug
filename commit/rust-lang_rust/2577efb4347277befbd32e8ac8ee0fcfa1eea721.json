{"sha": "2577efb4347277befbd32e8ac8ee0fcfa1eea721", "node_id": "C_kwDOAAsO6NoAKDI1NzdlZmI0MzQ3Mjc3YmVmYmQzMmU4YWM4ZWUwZmNmYTFlZWE3MjE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-08T10:11:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-08T10:11:51Z"}, "message": "Sync from rust 67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "tree": {"sha": "a4146e7551089a2fe7fe9373c04e1f8fe6c220e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4146e7551089a2fe7fe9373c04e1f8fe6c220e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2577efb4347277befbd32e8ac8ee0fcfa1eea721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2577efb4347277befbd32e8ac8ee0fcfa1eea721", "html_url": "https://github.com/rust-lang/rust/commit/2577efb4347277befbd32e8ac8ee0fcfa1eea721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2577efb4347277befbd32e8ac8ee0fcfa1eea721/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ec4d353cc41c25f51b0726a3fa5b112eacfa8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ec4d353cc41c25f51b0726a3fa5b112eacfa8a", "html_url": "https://github.com/rust-lang/rust/commit/c5ec4d353cc41c25f51b0726a3fa5b112eacfa8a"}, {"sha": "8723fe0b6b6f8563c2ca0f15c83adf309e780d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8723fe0b6b6f8563c2ca0f15c83adf309e780d2a", "html_url": "https://github.com/rust-lang/rust/commit/8723fe0b6b6f8563c2ca0f15c83adf309e780d2a"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "37d2679c10d70af2f21316bf404ecbd29eecf4a8", "filename": "src/abi/comments.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=2577efb4347277befbd32e8ac8ee0fcfa1eea721", "patch": "@@ -82,8 +82,14 @@ pub(super) fn add_local_place_comments<'tcx>(\n         return;\n     }\n     let TyAndLayout { ty, layout } = place.layout();\n-    let rustc_target::abi::Layout { size, align, abi: _, variants: _, fields: _, largest_niche: _ } =\n-        layout;\n+    let rustc_target::abi::LayoutS {\n+        size,\n+        align,\n+        abi: _,\n+        variants: _,\n+        fields: _,\n+        largest_niche: _,\n+    } = layout.0.0;\n \n     let (kind, extra) = match *place.inner() {\n         CPlaceInner::Var(place_local, var) => {"}, {"sha": "473e6fcb2a3d1c13220a4577d5a204e3a7c16f8a", "filename": "src/constant.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=2577efb4347277befbd32e8ac8ee0fcfa1eea721", "patch": "@@ -1,10 +1,10 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n+    read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n@@ -54,7 +54,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                 {\n                     all_constants_ok = false;\n                     match err {\n-                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                        ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n                             fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                         }\n                         ErrorHandled::TooGeneric => {\n@@ -202,7 +202,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             &mut fx.constants_cx,\n                             fx.module,\n                             alloc_id,\n-                            alloc.mutability,\n+                            alloc.inner().mutability,\n                         );\n                         let local_data_id =\n                             fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n@@ -257,11 +257,15 @@ pub(crate) fn codegen_const_value<'tcx>(\n \n fn pointer_for_allocation<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    alloc: &'tcx Allocation,\n+    alloc: ConstAllocation<'tcx>,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n-    let data_id =\n-        data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.module, alloc_id, alloc.mutability);\n+    let data_id = data_id_for_alloc_id(\n+        &mut fx.constants_cx,\n+        &mut *fx.module,\n+        alloc_id,\n+        alloc.inner().mutability,\n+    );\n \n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     if fx.clif_comments.enabled() {\n@@ -361,7 +365,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n                     module\n                         .declare_anonymous_data(\n-                            alloc.mutability == rustc_hir::Mutability::Mut,\n+                            alloc.inner().mutability == rustc_hir::Mutability::Mut,\n                             false,\n                         )\n                         .unwrap()\n@@ -386,6 +390,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         }\n \n         let mut data_ctx = DataContext::new();\n+        let alloc = alloc.inner();\n         data_ctx.set_align(alloc.align.bytes());\n \n         if let Some(section_name) = section_name {\n@@ -429,7 +434,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     continue;\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n-                    data_id_for_alloc_id(cx, module, alloc_id, target_alloc.mutability)\n+                    data_id_for_alloc_id(cx, module, alloc_id, target_alloc.inner().mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)"}, {"sha": "6489b96be4b2d037e212ba7b650c7adfab7bd02f", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=2577efb4347277befbd32e8ac8ee0fcfa1eea721", "patch": "@@ -1070,7 +1070,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n \n         raw_eq, (v lhs_ref, v rhs_ref) {\n-            let size = fx.layout_of(substs.type_at(0)).layout.size;\n+            let size = fx.layout_of(substs.type_at(0)).layout.size();\n             // FIXME add and use emit_small_memcmp\n             let is_eq_value =\n                 if size == Size::ZERO {"}, {"sha": "49022ebd3e26fd19dfd4ec31b914b123ce1303fb", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=2577efb4347277befbd32e8ac8ee0fcfa1eea721", "patch": "@@ -159,7 +159,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n                         let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n-                        alloc.get_bytes(fx, alloc_range(offset, size)).unwrap()\n+                        alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };"}, {"sha": "331e3e8f5dfc3c303eda9fc3ee76de4c821997c0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2577efb4347277befbd32e8ac8ee0fcfa1eea721", "patch": "@@ -29,7 +29,7 @@ use std::cell::Cell;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::config::OutputFilenames;\n@@ -209,7 +209,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n         _outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         Ok(*ongoing_codegen\n             .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()\n             .unwrap())\n@@ -220,7 +220,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         sess: &Session,\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(sess, &codegen_results, outputs)"}, {"sha": "2f71a70a4494615529fd859c4d86c3178a5fe0c0", "filename": "src/main_shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577efb4347277befbd32e8ac8ee0fcfa1eea721/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=2577efb4347277befbd32e8ac8ee0fcfa1eea721", "patch": "@@ -51,7 +51,10 @@ pub(crate) fn maybe_create_entry_wrapper(\n         // late-bound regions, since late-bound\n         // regions must appear in the argument\n         // listing.\n-        let main_ret_ty = tcx.erase_regions(main_ret_ty.no_bound_vars().unwrap());\n+        let main_ret_ty = tcx.normalize_erasing_regions(\n+            ty::ParamEnv::reveal_all(),\n+            main_ret_ty.no_bound_vars().unwrap(),\n+        );\n \n         let cmain_sig = Signature {\n             params: vec!["}]}