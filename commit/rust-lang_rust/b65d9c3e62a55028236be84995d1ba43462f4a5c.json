{"sha": "b65d9c3e62a55028236be84995d1ba43462f4a5c", "node_id": "C_kwDOAAsO6NoAKGI2NWQ5YzNlNjJhNTUwMjgyMzZiZTg0OTk1ZDFiYTQzNDYyZjRhNWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-18T21:16:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T21:16:19Z"}, "message": "Merge #11053\n\n11053: feat: Publish platform-specific Code VSIXes r=me a=lnicola\n\nCloses #10483\r\nCC #10371\r\n\r\nSome notes:\r\n\r\n - we still build a plain VSIX, just in case\r\n - we build the extension on every platform to make the release workflow arguably cleaner\r\n - the Windows VSIX includes the PDB (but let's leave  #10371 open until we change the Windows stand-alone release to a ZIP file)\r\n - `npm` doesn't run if started from `xtask`, possibly something related to path mapping; I moved the `npm` calls outside, but..\r\n - the `Patch` thingy doesn't work any more, so you'll end up with a dirty `package.json` of you run `cargo xtask --client-patch-version`; I don't think we should block on this\r\n - there's an untested Alpine build; for better or worse, we special-case `musl` distros as `alpine`\r\n - I tested this as much as I could, but not the publishing and nightly updates\r\n - you can find some sample artifacts under https://github.com/lnicola/rust-analyzer/releases\n - we can now run the server from the install location (is Code planning to switch to compressed extensions?), except on NixOS\r\n - Code lets you install a VSIX for the wrong platform (with the results one would expect)\r\n - I don't know what happens if we try to publish a VSIX without a target\r\n\r\nThis is a relatively risky, but we'll probably have to take our chances with it.\r\n\r\nr? `@rust-analyzer/review`\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "bea7e4f4af5d572c45d42e1d7ffb7eebcb49dc0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea7e4f4af5d572c45d42e1d7ffb7eebcb49dc0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65d9c3e62a55028236be84995d1ba43462f4a5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvk+jCRBK7hj4Ov3rIwAATxcIAEXbaelzVUWpp60ZUnb+ooXX\nuCEGjqZDNtWhCNqMflN3mW9r2pvUNY4ZSS6GNZV+MsqxtsHSJN4l7LI6Z4f1S142\nYVv2LkThAnudQoYO/c5Rn2Zo6ZujURNxgf+BqgQWUbsG1GBJSLdz3c4eKvtZVrJv\nFpauu67QeSlvsxcb+p9i8LvvSC1ZMZOqxcgB0jKa3Y+D6nJnMy/rGM29qruP1oeb\nDKXRH+Ufq2LnKvNtAZPICq3x+Yktx6Lipay87TOwFF0vs2sfZWvyx2gDDPPkbV/f\nOS0nI983iLtGqZqRqpzqBSkvA2MDC/v6FTCXAEi9lLyu88mbcB9793aBniKub6o=\n=oW+g\n-----END PGP SIGNATURE-----\n", "payload": "tree bea7e4f4af5d572c45d42e1d7ffb7eebcb49dc0d\nparent 0dbbf14bd6ba187b2dbbe38e51a691b387622d78\nparent 9c74f646f484b7a8458848cf49da0e4855cb8848\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639862179 +0000\ncommitter GitHub <noreply@github.com> 1639862179 +0000\n\nMerge #11053\n\n11053: feat: Publish platform-specific Code VSIXes r=me a=lnicola\n\nCloses #10483\r\nCC #10371\r\n\r\nSome notes:\r\n\r\n - we still build a plain VSIX, just in case\r\n - we build the extension on every platform to make the release workflow arguably cleaner\r\n - the Windows VSIX includes the PDB (but let's leave  #10371 open until we change the Windows stand-alone release to a ZIP file)\r\n - `npm` doesn't run if started from `xtask`, possibly something related to path mapping; I moved the `npm` calls outside, but..\r\n - the `Patch` thingy doesn't work any more, so you'll end up with a dirty `package.json` of you run `cargo xtask --client-patch-version`; I don't think we should block on this\r\n - there's an untested Alpine build; for better or worse, we special-case `musl` distros as `alpine`\r\n - I tested this as much as I could, but not the publishing and nightly updates\r\n - you can find some sample artifacts under https://github.com/lnicola/rust-analyzer/releases\n - we can now run the server from the install location (is Code planning to switch to compressed extensions?), except on NixOS\r\n - Code lets you install a VSIX for the wrong platform (with the results one would expect)\r\n - I don't know what happens if we try to publish a VSIX without a target\r\n\r\nThis is a relatively risky, but we'll probably have to take our chances with it.\r\n\r\nr? `@rust-analyzer/review`\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65d9c3e62a55028236be84995d1ba43462f4a5c", "html_url": "https://github.com/rust-lang/rust/commit/b65d9c3e62a55028236be84995d1ba43462f4a5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65d9c3e62a55028236be84995d1ba43462f4a5c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dbbf14bd6ba187b2dbbe38e51a691b387622d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbbf14bd6ba187b2dbbe38e51a691b387622d78", "html_url": "https://github.com/rust-lang/rust/commit/0dbbf14bd6ba187b2dbbe38e51a691b387622d78"}, {"sha": "9c74f646f484b7a8458848cf49da0e4855cb8848", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c74f646f484b7a8458848cf49da0e4855cb8848", "html_url": "https://github.com/rust-lang/rust/commit/9c74f646f484b7a8458848cf49da0e4855cb8848"}], "stats": {"total": 163, "additions": 104, "deletions": 59}, "files": [{"sha": "91a6210d269913ffedea4b7ad7bc1969bc312152", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b65d9c3e62a55028236be84995d1ba43462f4a5c/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/b65d9c3e62a55028236be84995d1ba43462f4a5c/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=b65d9c3e62a55028236be84995d1ba43462f4a5c", "patch": "@@ -17,6 +17,7 @@ env:\n   RUSTUP_MAX_RETRIES: 10\n   FETCH_DEPTH: 0 # pull in the tags for the version string\n   MACOSX_DEPLOYMENT_TARGET: 10.15\n+  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc\n \n jobs:\n   dist:\n@@ -25,24 +26,28 @@ jobs:\n         include:\n           - os: windows-latest\n             target: x86_64-pc-windows-msvc\n+            code-target: win32-x64\n           - os: windows-latest\n             target: aarch64-pc-windows-msvc\n+            code-target: win32-arm64\n           - os: ubuntu-20.04\n             target: x86_64-unknown-linux-gnu\n+            code-target: linux-x64\n           - os: ubuntu-20.04\n             target: aarch64-unknown-linux-gnu\n-            cross_linker: aarch64-linux-gnu-gcc\n+            code-target: linux-arm64\n           - os: macos-11\n             target: x86_64-apple-darwin\n+            code-target: darwin-x64\n           - os: macos-11\n             target: aarch64-apple-darwin\n+            code-target: darwin-arm64\n \n     name: dist (${{ matrix.target }})\n     runs-on: ${{ matrix.os }}\n \n     env:\n       RA_TARGET: ${{ matrix.target }}\n-      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: ${{ matrix.cross_linker }}\n \n     steps:\n       - name: Checkout repository\n@@ -77,7 +82,6 @@ jobs:\n           components: rust-src\n \n       - name: Install Node.js\n-        if: matrix.target == 'x86_64-unknown-linux-gnu'\n         uses: actions/setup-node@v1\n         with:\n           node-version: 14.x\n@@ -90,13 +94,21 @@ jobs:\n         if: matrix.target == 'aarch64-unknown-linux-gnu'\n         run: sudo apt-get install gcc-aarch64-linux-gnu\n \n-      - name: Dist (generic)\n-        if: matrix.target != 'x86_64-unknown-linux-gnu'\n-        run: cargo xtask dist\n+      - name: Dist\n+        run: cargo xtask dist --client-patch-version ${{ github.run_number }}\n \n-      - name: Dist (Linux)\n-        if: matrix.target == 'x86_64-unknown-linux-gnu'\n-        run: cargo xtask dist --client-patch-version $GITHUB_RUN_NUMBER\n+      - run: npm ci\n+        working-directory: editors/code\n+\n+      - run: npx vsce package -o \"../../dist/rust-analyzer-${{ matrix.code-target }}.vsix\" --target ${{ matrix.code-target }}\n+        working-directory: editors/code\n+\n+      - if: matrix.target == 'x86_64-unknown-linux-gnu'\n+        run: rm -rf editors/code/server\n+\n+      - if: matrix.target == 'x86_64-unknown-linux-gnu'\n+        run: npx vsce package -o ../../dist/rust-analyzer.vsix\n+        working-directory: editors/code\n \n       - name: Run analysis-stats on rust-analyzer\n         if: matrix.target == 'x86_64-unknown-linux-gnu'\n@@ -126,15 +138,23 @@ jobs:\n \n     steps:\n       - name: Install dependencies\n-        run: apk add --no-cache git clang lld musl-dev\n+        run: apk add --no-cache git clang lld musl-dev nodejs npm\n \n       - name: Checkout repository\n         uses: actions/checkout@v2\n         with:\n           fetch-depth: ${{ env.FETCH_DEPTH }}\n \n       - name: Dist\n-        run: cargo xtask dist\n+        run: cargo xtask dist --client-patch-version ${{ github.run_number }}\n+\n+      - run: npm ci\n+        working-directory: editors/code\n+\n+      - run: npx vsce package -o \"../../dist/rust-analyzer-alpine-x64.vsix\" --target alpine-x64\n+        working-directory: editors/code\n+\n+      - run: rm -rf editors/code/server\n \n       - name: Upload artifacts\n         uses: actions/upload-artifact@v1\n@@ -210,4 +230,4 @@ jobs:\n         if: github.ref == 'refs/heads/release'\n         working-directory: ./editors/code\n         # token from https://dev.azure.com/rust-analyzer/\n-        run: npx vsce publish --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath ../../dist/rust-analyzer.vsix\n+        run: npx vsce publish --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath ../../dist/rust-analyzer-*.vsix"}, {"sha": "3acb6b3f6202d7cef902a69075c932d16a91c550", "filename": "editors/code/.gitignore", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65d9c3e62a55028236be84995d1ba43462f4a5c/editors%2Fcode%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/b65d9c3e62a55028236be84995d1ba43462f4a5c/editors%2Fcode%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.gitignore?ref=b65d9c3e62a55028236be84995d1ba43462f4a5c", "patch": "@@ -1,5 +1,5 @@\n out\n node_modules\n+server\n .vscode-test/\n *.vsix\n-bundle"}, {"sha": "dc0a9a2f872ca2b0c1378b7548509d1f0175aa0f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b65d9c3e62a55028236be84995d1ba43462f4a5c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b65d9c3e62a55028236be84995d1ba43462f4a5c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=b65d9c3e62a55028236be84995d1ba43462f4a5c", "patch": "@@ -221,9 +221,18 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     );\n     if (userResponse !== \"Update\") return;\n \n-    const artifact = latestNightlyRelease.assets.find(artifact => artifact.name === \"rust-analyzer.vsix\");\n-    assert(!!artifact, `Bad release: ${JSON.stringify(latestNightlyRelease)}`);\n+    let arch = process.arch;\n+    if (arch === \"ia32\") {\n+        arch = \"x64\";\n+    }\n+    let platform = process.platform as string;\n+    if (platform === \"linux\" && isMusl()) {\n+        platform = \"alpine\";\n+    }\n+    const artifactName = `rust-analyzer-${platform}-${arch}.vsix`;\n \n+    const artifact = latestNightlyRelease.assets.find(artifact => artifact.name === artifactName);\n+    assert(!!artifact, `Bad release: ${JSON.stringify(latestNightlyRelease)}`);\n     const dest = vscode.Uri.joinPath(config.globalStorageUri, \"rust-analyzer.vsix\");\n \n     await downloadWithRetryDialog(state, async () => {"}, {"sha": "6e0902c7a076a809ab0cfe55f3474ea32bb71704", "filename": "xtask/src/dist.rs", "status": "modified", "additions": 60, "deletions": 44, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b65d9c3e62a55028236be84995d1ba43462f4a5c/xtask%2Fsrc%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65d9c3e62a55028236be84995d1ba43462f4a5c/xtask%2Fsrc%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fdist.rs?ref=b65d9c3e62a55028236be84995d1ba43462f4a5c", "patch": "@@ -7,7 +7,7 @@ use std::{\n \n use anyhow::Result;\n use flate2::{write::GzEncoder, Compression};\n-use xshell::{cmd, mkdir_p, pushd, pushenv, read_file, rm_rf, write_file};\n+use xshell::{cmd, cp, mkdir_p, pushd, pushenv, read_file, rm_rf, write_file};\n \n use crate::{date_iso, flags, project_root};\n \n@@ -16,10 +16,15 @@ impl flags::Dist {\n         let stable =\n             std::env::var(\"GITHUB_REF\").unwrap_or_default().as_str() == \"refs/heads/release\";\n \n-        let dist = project_root().join(\"dist\");\n+        let project_root = project_root();\n+        let target = Target::get(&project_root);\n+        let dist = project_root.join(\"dist\");\n         rm_rf(&dist)?;\n         mkdir_p(&dist)?;\n \n+        let release_channel = if stable { \"stable\" } else { \"nightly\" };\n+        dist_server(release_channel, &target)?;\n+\n         if let Some(patch_version) = self.client_patch_version {\n             let version = if stable {\n                 format!(\"0.2.{}\", patch_version)\n@@ -28,20 +33,24 @@ impl flags::Dist {\n                 format!(\"0.3.{}\", patch_version)\n             };\n             let release_tag = if stable { date_iso()? } else { \"nightly\".to_string() };\n-            dist_client(&version, &release_tag)?;\n+            dist_client(&version, &release_tag, &target)?;\n         }\n-        let release_channel = if stable { \"stable\" } else { \"nightly\" };\n-        dist_server(release_channel)?;\n         Ok(())\n     }\n }\n \n-fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n+fn dist_client(version: &str, release_tag: &str, target: &Target) -> Result<()> {\n+    let bundle_path = Path::new(\"editors\").join(\"code\").join(\"server\");\n+    mkdir_p(&bundle_path)?;\n+    cp(&target.server_path, &bundle_path)?;\n+    if let Some(symbols_path) = &target.symbols_path {\n+        cp(symbols_path, &bundle_path)?;\n+    }\n+\n     let _d = pushd(\"./editors/code\")?;\n     let nightly = release_tag == \"nightly\";\n \n     let mut patch = Patch::new(\"./package.json\")?;\n-\n     patch\n         .replace(r#\"\"version\": \"0.4.0-dev\"\"#, &format!(r#\"\"version\": \"{}\"\"#, version))\n         .replace(r#\"\"releaseTag\": null\"#, &format!(r#\"\"releaseTag\": \"{}\"\"#, release_tag))\n@@ -59,12 +68,10 @@ fn dist_client(version: &str, release_tag: &str) -> Result<()> {\n     }\n     patch.commit()?;\n \n-    cmd!(\"npm ci\").run()?;\n-    cmd!(\"npx vsce package -o ../../dist/rust-analyzer.vsix\").run()?;\n     Ok(())\n }\n \n-fn dist_server(release_channel: &str) -> Result<()> {\n+fn dist_server(release_channel: &str, target: &Target) -> Result<()> {\n     let _e = pushenv(\"RUST_ANALYZER_CHANNEL\", release_channel);\n     let _e = pushenv(\"CARGO_PROFILE_RELEASE_LTO\", \"thin\");\n \n@@ -73,47 +80,19 @@ fn dist_server(release_channel: &str) -> Result<()> {\n     //   * on Linux, this blows up the binary size from 8MB to 43MB, which is unreasonable.\n     // let _e = pushenv(\"CARGO_PROFILE_RELEASE_DEBUG\", \"1\");\n \n-    let target = get_target();\n-    if target.contains(\"-linux-gnu\") || target.contains(\"-linux-musl\") {\n+    if target.name.contains(\"-linux-\") {\n         env::set_var(\"CC\", \"clang\");\n     }\n \n-    cmd!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --target {target} --release\").run()?;\n+    let target_name = &target.name;\n+    cmd!(\"cargo build --manifest-path ./crates/rust-analyzer/Cargo.toml --bin rust-analyzer --target {target_name} --release\").run()?;\n \n-    let suffix = exe_suffix(&target);\n-    let src =\n-        Path::new(\"target\").join(&target).join(\"release\").join(format!(\"rust-analyzer{}\", suffix));\n-    let dst = Path::new(\"dist\").join(format!(\"rust-analyzer-{}{}\", target, suffix));\n-    gzip(&src, &dst.with_extension(\"gz\"))?;\n+    let dst = Path::new(\"dist\").join(&target.artifact_name);\n+    gzip(&target.server_path, &dst.with_extension(\"gz\"))?;\n \n     Ok(())\n }\n \n-fn get_target() -> String {\n-    match env::var(\"RA_TARGET\") {\n-        Ok(target) => target,\n-        _ => {\n-            if cfg!(target_os = \"linux\") {\n-                \"x86_64-unknown-linux-gnu\".to_string()\n-            } else if cfg!(target_os = \"windows\") {\n-                \"x86_64-pc-windows-msvc\".to_string()\n-            } else if cfg!(target_os = \"macos\") {\n-                \"x86_64-apple-darwin\".to_string()\n-            } else {\n-                panic!(\"Unsupported OS, maybe try setting RA_TARGET\")\n-            }\n-        }\n-    }\n-}\n-\n-fn exe_suffix(target: &str) -> String {\n-    if target.contains(\"-windows-\") {\n-        \".exe\".into()\n-    } else {\n-        \"\".into()\n-    }\n-}\n-\n fn gzip(src_path: &Path, dest_path: &Path) -> Result<()> {\n     let mut encoder = GzEncoder::new(File::create(dest_path)?, Compression::best());\n     let mut input = io::BufReader::new(File::open(src_path)?);\n@@ -122,6 +101,41 @@ fn gzip(src_path: &Path, dest_path: &Path) -> Result<()> {\n     Ok(())\n }\n \n+struct Target {\n+    name: String,\n+    server_path: PathBuf,\n+    symbols_path: Option<PathBuf>,\n+    artifact_name: String,\n+}\n+\n+impl Target {\n+    fn get(project_root: &Path) -> Self {\n+        let name = match env::var(\"RA_TARGET\") {\n+            Ok(target) => target,\n+            _ => {\n+                if cfg!(target_os = \"linux\") {\n+                    \"x86_64-unknown-linux-gnu\".to_string()\n+                } else if cfg!(target_os = \"windows\") {\n+                    \"x86_64-pc-windows-msvc\".to_string()\n+                } else if cfg!(target_os = \"macos\") {\n+                    \"x86_64-apple-darwin\".to_string()\n+                } else {\n+                    panic!(\"Unsupported OS, maybe try setting RA_TARGET\")\n+                }\n+            }\n+        };\n+        let out_path = project_root.join(\"target\").join(&name).join(\"release\");\n+        let (exe_suffix, symbols_path) = if name.contains(\"-windows-\") {\n+            (\".exe\".into(), Some(out_path.join(\"rust_analyzer.pdb\")))\n+        } else {\n+            (String::new(), None)\n+        };\n+        let server_path = out_path.join(format!(\"rust-analyzer{}\", exe_suffix));\n+        let artifact_name = format!(\"rust-analyzer-{}{}\", name, exe_suffix);\n+        Self { name, server_path, symbols_path, artifact_name }\n+    }\n+}\n+\n struct Patch {\n     path: PathBuf,\n     original_contents: String,\n@@ -149,6 +163,8 @@ impl Patch {\n \n impl Drop for Patch {\n     fn drop(&mut self) {\n-        write_file(&self.path, &self.original_contents).unwrap();\n+        // FIXME: find a way to bring this back\n+        let _ = &self.original_contents;\n+        // write_file(&self.path, &self.original_contents).unwrap();\n     }\n }"}]}