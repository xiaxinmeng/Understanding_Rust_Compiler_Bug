{"sha": "a642d853aa29f8ec8486e736be551cf77f34e219", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDJkODUzYWEyOWY4ZWM4NDg2ZTczNmJlNTUxY2Y3N2YzNGUyMTk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-14T23:35:25Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T00:16:46Z"}, "message": "Change to a multi-trait approach\n\n[breaking-change] for lint authors\n\nYou must now implement LateLintPass or EarlyLintPass as well as LintPass and use either register_late_lint_pass or register_early_lint_pass, rather than register_lint_pass.", "tree": {"sha": "2f6f7779e17c9820f2906ad36ada8546bbb83830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f6f7779e17c9820f2906ad36ada8546bbb83830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a642d853aa29f8ec8486e736be551cf77f34e219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a642d853aa29f8ec8486e736be551cf77f34e219", "html_url": "https://github.com/rust-lang/rust/commit/a642d853aa29f8ec8486e736be551cf77f34e219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a642d853aa29f8ec8486e736be551cf77f34e219/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1084a3ada125b83c03c40b1f304f2f34abf0da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1084a3ada125b83c03c40b1f304f2f34abf0da0", "html_url": "https://github.com/rust-lang/rust/commit/c1084a3ada125b83c03c40b1f304f2f34abf0da0"}], "stats": {"total": 416, "additions": 266, "deletions": 150}, "files": [{"sha": "d9b05d804000ae3c9a4ef1f71779d05195e80359", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -14,7 +14,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use lint::{LintPass, LintArray};\n+use lint::{LintPass, LateLintPass, LintArray};\n \n declare_lint! {\n     pub UNUSED_IMPORTS,\n@@ -138,3 +138,5 @@ impl LintPass for HardwiredLints {\n         )\n     }\n }\n+\n+impl LateLintPass for HardwiredLints {}"}, {"sha": "fe88401a24c2007f2c1585e32cdf835d2da5e6a4", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 94, "deletions": 73, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -28,7 +28,8 @@ use self::TargetLint::*;\n use middle::privacy::ExportedItems;\n use middle::ty::{self, Ty};\n use session::{early_error, Session};\n-use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n+use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass};\n+use lint::{EarlyLintPass, EarlyLintPassObject, LateLintPass, LateLintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n use lint::builtin;\n use util::nodemap::FnvHashMap;\n@@ -59,7 +60,8 @@ pub struct LintStore {\n     /// Trait objects for each lint pass.\n     /// This is only `None` while iterating over the objects. See the definition\n     /// of run_lints.\n-    passes: Option<Vec<LintPassObject>>,\n+    early_passes: Option<Vec<EarlyLintPassObject>>,\n+    late_passes: Option<Vec<LateLintPassObject>>,\n \n     /// Lints indexed by name.\n     by_name: FnvHashMap<String, TargetLint>,\n@@ -115,7 +117,8 @@ impl LintStore {\n     pub fn new() -> LintStore {\n         LintStore {\n             lints: vec!(),\n-            passes: Some(vec!()),\n+            early_passes: Some(vec!()),\n+            late_passes: Some(vec!()),\n             by_name: FnvHashMap(),\n             levels: FnvHashMap(),\n             lint_groups: FnvHashMap(),\n@@ -133,8 +136,27 @@ impl LintStore {\n                                               v.1)).collect()\n     }\n \n-    pub fn register_pass(&mut self, sess: Option<&Session>,\n-                         from_plugin: bool, pass: LintPassObject) {\n+    pub fn register_early_pass(&mut self,\n+                               sess: Option<&Session>,\n+                               from_plugin: bool,\n+                               pass: EarlyLintPassObject) {\n+        self.push_pass(sess, from_plugin, &pass);\n+        self.early_passes.as_mut().unwrap().push(pass);\n+    }\n+\n+    pub fn register_late_pass(&mut self,\n+                              sess: Option<&Session>,\n+                              from_plugin: bool,\n+                              pass: LateLintPassObject) {\n+        self.push_pass(sess, from_plugin, &pass);\n+        self.late_passes.as_mut().unwrap().push(pass);\n+    }\n+\n+    // Helper method for register_early/late_pass\n+    fn push_pass<P: LintPass + ?Sized + 'static>(&mut self,\n+                                        sess: Option<&Session>,\n+                                        from_plugin: bool,\n+                                        pass: &Box<P>) {\n         for &lint in pass.get_lints() {\n             self.lints.push((*lint, from_plugin));\n \n@@ -156,7 +178,6 @@ impl LintStore {\n                 self.levels.insert(id, (lint.default_level, Default));\n             }\n         }\n-        self.passes.as_mut().unwrap().push(pass);\n     }\n \n     pub fn register_group(&mut self, sess: Option<&Session>,\n@@ -272,8 +293,6 @@ pub struct LateContext<'a, 'tcx: 'a> {\n     node_levels: RefCell<FnvHashMap<(ast::NodeId, LintId), LevelSource>>,\n }\n \n-pub type Context<'a, 'tcx: 'a> = LateContext<'a, 'tcx>;\n-\n /// Context for lint checking of the AST, after expansion, before lowering to\n /// HIR.\n pub struct EarlyContext<'a> {\n@@ -293,14 +312,14 @@ pub struct EarlyContext<'a> {\n }\n \n /// Convenience macro for calling a `LintPass` method on every pass in the context.\n-macro_rules! run_lints { ($cx:expr, $f:ident, $($args:expr),*) => ({\n+macro_rules! run_lints { ($cx:expr, $f:ident, $ps:ident, $($args:expr),*) => ({\n     // Move the vector of passes out of `$cx` so that we can\n     // iterate over it mutably while passing `$cx` to the methods.\n-    let mut passes = $cx.mut_lints().passes.take().unwrap();\n+    let mut passes = $cx.mut_lints().$ps.take().unwrap();\n     for obj in &mut passes {\n         obj.$f($cx, $($args),*);\n     }\n-    $cx.mut_lints().passes = Some(passes);\n+    $cx.mut_lints().$ps = Some(passes);\n }) }\n \n /// Parse the lint attributes into a vector, with `Err`s for malformed lint\n@@ -578,11 +597,11 @@ impl<'a, 'tcx> LintContext for LateContext<'a, 'tcx> {\n     }\n \n     fn enter_attrs(&mut self, attrs: &[hir::Attribute]) {\n-        run_lints!(self, enter_lint_attrs, attrs);\n+        run_lints!(self, enter_lint_attrs, late_passes, attrs);\n     }\n \n     fn exit_attrs(&mut self, attrs: &[hir::Attribute]) {\n-        run_lints!(self, exit_lint_attrs, attrs);\n+        run_lints!(self, exit_lint_attrs, late_passes, attrs);\n     }\n }\n \n@@ -605,48 +624,48 @@ impl<'a> LintContext for EarlyContext<'a> {\n     }\n \n     fn enter_attrs(&mut self, attrs: &[hir::Attribute]) {\n-        run_lints!(self, ast_enter_lint_attrs, attrs);\n+        run_lints!(self, enter_lint_attrs, early_passes, attrs);\n     }\n \n     fn exit_attrs(&mut self, attrs: &[hir::Attribute]) {\n-        run_lints!(self, ast_exit_lint_attrs, attrs);\n+        run_lints!(self, exit_lint_attrs, early_passes, attrs);\n     }\n }\n \n impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_item(&mut self, it: &hir::Item) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n-            run_lints!(cx, check_item, it);\n+            run_lints!(cx, check_item, late_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             hir_visit::walk_item(cx, it);\n         })\n     }\n \n     fn visit_foreign_item(&mut self, it: &hir::ForeignItem) {\n         self.with_lint_attrs(&it.attrs, |cx| {\n-            run_lints!(cx, check_foreign_item, it);\n+            run_lints!(cx, check_foreign_item, late_passes, it);\n             hir_visit::walk_foreign_item(cx, it);\n         })\n     }\n \n     fn visit_pat(&mut self, p: &hir::Pat) {\n-        run_lints!(self, check_pat, p);\n+        run_lints!(self, check_pat, late_passes, p);\n         hir_visit::walk_pat(self, p);\n     }\n \n     fn visit_expr(&mut self, e: &hir::Expr) {\n-        run_lints!(self, check_expr, e);\n+        run_lints!(self, check_expr, late_passes, e);\n         hir_visit::walk_expr(self, e);\n     }\n \n     fn visit_stmt(&mut self, s: &hir::Stmt) {\n-        run_lints!(self, check_stmt, s);\n+        run_lints!(self, check_stmt, late_passes, s);\n         hir_visit::walk_stmt(self, s);\n     }\n \n     fn visit_fn(&mut self, fk: hir_visit::FnKind<'v>, decl: &'v hir::FnDecl,\n                 body: &'v hir::Block, span: Span, id: ast::NodeId) {\n-        run_lints!(self, check_fn, fk, decl, body, span, id);\n+        run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n         hir_visit::walk_fn(self, fk, decl, body, span);\n     }\n \n@@ -655,146 +674,146 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n                         ident: ast::Ident,\n                         g: &hir::Generics,\n                         id: ast::NodeId) {\n-        run_lints!(self, check_struct_def, s, ident, g, id);\n+        run_lints!(self, check_struct_def, late_passes, s, ident, g, id);\n         hir_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, s, ident, g, id);\n+        run_lints!(self, check_struct_def_post, late_passes, s, ident, g, id);\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n         self.with_lint_attrs(&s.node.attrs, |cx| {\n-            run_lints!(cx, check_struct_field, s);\n+            run_lints!(cx, check_struct_field, late_passes, s);\n             hir_visit::walk_struct_field(cx, s);\n         })\n     }\n \n     fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics) {\n         self.with_lint_attrs(&v.node.attrs, |cx| {\n-            run_lints!(cx, check_variant, v, g);\n+            run_lints!(cx, check_variant, late_passes, v, g);\n             hir_visit::walk_variant(cx, v, g);\n-            run_lints!(cx, check_variant_post, v, g);\n+            run_lints!(cx, check_variant_post, late_passes, v, g);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &hir::Ty) {\n-        run_lints!(self, check_ty, t);\n+        run_lints!(self, check_ty, late_passes, t);\n         hir_visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, sp: Span, id: ast::Ident) {\n-        run_lints!(self, check_ident, sp, id);\n+        run_lints!(self, check_ident, late_passes, sp, id);\n     }\n \n     fn visit_mod(&mut self, m: &hir::Mod, s: Span, n: ast::NodeId) {\n-        run_lints!(self, check_mod, m, s, n);\n+        run_lints!(self, check_mod, late_passes, m, s, n);\n         hir_visit::walk_mod(self, m);\n     }\n \n     fn visit_local(&mut self, l: &hir::Local) {\n-        run_lints!(self, check_local, l);\n+        run_lints!(self, check_local, late_passes, l);\n         hir_visit::walk_local(self, l);\n     }\n \n     fn visit_block(&mut self, b: &hir::Block) {\n-        run_lints!(self, check_block, b);\n+        run_lints!(self, check_block, late_passes, b);\n         hir_visit::walk_block(self, b);\n     }\n \n     fn visit_arm(&mut self, a: &hir::Arm) {\n-        run_lints!(self, check_arm, a);\n+        run_lints!(self, check_arm, late_passes, a);\n         hir_visit::walk_arm(self, a);\n     }\n \n     fn visit_decl(&mut self, d: &hir::Decl) {\n-        run_lints!(self, check_decl, d);\n+        run_lints!(self, check_decl, late_passes, d);\n         hir_visit::walk_decl(self, d);\n     }\n \n     fn visit_expr_post(&mut self, e: &hir::Expr) {\n-        run_lints!(self, check_expr_post, e);\n+        run_lints!(self, check_expr_post, late_passes, e);\n     }\n \n     fn visit_generics(&mut self, g: &hir::Generics) {\n-        run_lints!(self, check_generics, g);\n+        run_lints!(self, check_generics, late_passes, g);\n         hir_visit::walk_generics(self, g);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n         self.with_lint_attrs(&trait_item.attrs, |cx| {\n-            run_lints!(cx, check_trait_item, trait_item);\n+            run_lints!(cx, check_trait_item, late_passes, trait_item);\n             cx.visit_ids(|v| v.visit_trait_item(trait_item));\n             hir_visit::walk_trait_item(cx, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n         self.with_lint_attrs(&impl_item.attrs, |cx| {\n-            run_lints!(cx, check_impl_item, impl_item);\n+            run_lints!(cx, check_impl_item, late_passes, impl_item);\n             cx.visit_ids(|v| v.visit_impl_item(impl_item));\n             hir_visit::walk_impl_item(cx, impl_item);\n         });\n     }\n \n     fn visit_opt_lifetime_ref(&mut self, sp: Span, lt: &Option<hir::Lifetime>) {\n-        run_lints!(self, check_opt_lifetime_ref, sp, lt);\n+        run_lints!(self, check_opt_lifetime_ref, late_passes, sp, lt);\n     }\n \n     fn visit_lifetime_ref(&mut self, lt: &hir::Lifetime) {\n-        run_lints!(self, check_lifetime_ref, lt);\n+        run_lints!(self, check_lifetime_ref, late_passes, lt);\n     }\n \n     fn visit_lifetime_def(&mut self, lt: &hir::LifetimeDef) {\n-        run_lints!(self, check_lifetime_def, lt);\n+        run_lints!(self, check_lifetime_def, late_passes, lt);\n     }\n \n     fn visit_explicit_self(&mut self, es: &hir::ExplicitSelf) {\n-        run_lints!(self, check_explicit_self, es);\n+        run_lints!(self, check_explicit_self, late_passes, es);\n         hir_visit::walk_explicit_self(self, es);\n     }\n \n     fn visit_path(&mut self, p: &hir::Path, id: ast::NodeId) {\n-        run_lints!(self, check_path, p, id);\n+        run_lints!(self, check_path, late_passes, p, id);\n         hir_visit::walk_path(self, p);\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        run_lints!(self, check_attribute, attr);\n+        run_lints!(self, check_attribute, late_passes, attr);\n     }\n }\n \n impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_item(&mut self, it: &ast::Item) {\n         self.with_ast_lint_attrs(&it.attrs, |cx| {\n-            run_lints!(cx, check_ast_item, it);\n+            run_lints!(cx, check_item, early_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             ast_visit::walk_item(cx, it);\n         })\n     }\n \n     fn visit_foreign_item(&mut self, it: &ast::ForeignItem) {\n         self.with_ast_lint_attrs(&it.attrs, |cx| {\n-            run_lints!(cx, check_ast_foreign_item, it);\n+            run_lints!(cx, check_foreign_item, early_passes, it);\n             ast_visit::walk_foreign_item(cx, it);\n         })\n     }\n \n     fn visit_pat(&mut self, p: &ast::Pat) {\n-        run_lints!(self, check_ast_pat, p);\n+        run_lints!(self, check_pat, early_passes, p);\n         ast_visit::walk_pat(self, p);\n     }\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n-        run_lints!(self, check_ast_expr, e);\n+        run_lints!(self, check_expr, early_passes, e);\n         ast_visit::walk_expr(self, e);\n     }\n \n     fn visit_stmt(&mut self, s: &ast::Stmt) {\n-        run_lints!(self, check_ast_stmt, s);\n+        run_lints!(self, check_stmt, early_passes, s);\n         ast_visit::walk_stmt(self, s);\n     }\n \n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, decl: &'v ast::FnDecl,\n                 body: &'v ast::Block, span: Span, id: ast::NodeId) {\n-        run_lints!(self, check_ast_fn, fk, decl, body, span, id);\n+        run_lints!(self, check_fn, early_passes, fk, decl, body, span, id);\n         ast_visit::walk_fn(self, fk, decl, body, span);\n     }\n \n@@ -803,109 +822,109 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n                         ident: ast::Ident,\n                         g: &ast::Generics,\n                         id: ast::NodeId) {\n-        run_lints!(self, check_ast_struct_def, s, ident, g, id);\n+        run_lints!(self, check_struct_def, early_passes, s, ident, g, id);\n         ast_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_ast_struct_def_post, s, ident, g, id);\n+        run_lints!(self, check_struct_def_post, early_passes, s, ident, g, id);\n     }\n \n     fn visit_struct_field(&mut self, s: &ast::StructField) {\n         self.with_ast_lint_attrs(&s.node.attrs, |cx| {\n-            run_lints!(cx, check_ast_struct_field, s);\n+            run_lints!(cx, check_struct_field, early_passes, s);\n             ast_visit::walk_struct_field(cx, s);\n         })\n     }\n \n     fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics) {\n         self.with_ast_lint_attrs(&v.node.attrs, |cx| {\n-            run_lints!(cx, check_ast_variant, v, g);\n+            run_lints!(cx, check_variant, early_passes, v, g);\n             ast_visit::walk_variant(cx, v, g);\n-            run_lints!(cx, check_ast_variant_post, v, g);\n+            run_lints!(cx, check_variant_post, early_passes, v, g);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n-        run_lints!(self, check_ast_ty, t);\n+        run_lints!(self, check_ty, early_passes, t);\n         ast_visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, sp: Span, id: ast::Ident) {\n-        run_lints!(self, check_ast_ident, sp, id);\n+        run_lints!(self, check_ident, early_passes, sp, id);\n     }\n \n     fn visit_mod(&mut self, m: &ast::Mod, s: Span, n: ast::NodeId) {\n-        run_lints!(self, check_ast_mod, m, s, n);\n+        run_lints!(self, check_mod, early_passes, m, s, n);\n         ast_visit::walk_mod(self, m);\n     }\n \n     fn visit_local(&mut self, l: &ast::Local) {\n-        run_lints!(self, check_ast_local, l);\n+        run_lints!(self, check_local, early_passes, l);\n         ast_visit::walk_local(self, l);\n     }\n \n     fn visit_block(&mut self, b: &ast::Block) {\n-        run_lints!(self, check_ast_block, b);\n+        run_lints!(self, check_block, early_passes, b);\n         ast_visit::walk_block(self, b);\n     }\n \n     fn visit_arm(&mut self, a: &ast::Arm) {\n-        run_lints!(self, check_ast_arm, a);\n+        run_lints!(self, check_arm, early_passes, a);\n         ast_visit::walk_arm(self, a);\n     }\n \n     fn visit_decl(&mut self, d: &ast::Decl) {\n-        run_lints!(self, check_ast_decl, d);\n+        run_lints!(self, check_decl, early_passes, d);\n         ast_visit::walk_decl(self, d);\n     }\n \n     fn visit_expr_post(&mut self, e: &ast::Expr) {\n-        run_lints!(self, check_ast_expr_post, e);\n+        run_lints!(self, check_expr_post, early_passes, e);\n     }\n \n     fn visit_generics(&mut self, g: &ast::Generics) {\n-        run_lints!(self, check_ast_generics, g);\n+        run_lints!(self, check_generics, early_passes, g);\n         ast_visit::walk_generics(self, g);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n         self.with_ast_lint_attrs(&trait_item.attrs, |cx| {\n-            run_lints!(cx, check_ast_trait_item, trait_item);\n+            run_lints!(cx, check_trait_item, early_passes, trait_item);\n             cx.visit_ids(|v| v.visit_trait_item(trait_item));\n             ast_visit::walk_trait_item(cx, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n         self.with_ast_lint_attrs(&impl_item.attrs, |cx| {\n-            run_lints!(cx, check_ast_impl_item, impl_item);\n+            run_lints!(cx, check_impl_item, early_passes, impl_item);\n             cx.visit_ids(|v| v.visit_impl_item(impl_item));\n             ast_visit::walk_impl_item(cx, impl_item);\n         });\n     }\n \n     fn visit_opt_lifetime_ref(&mut self, sp: Span, lt: &Option<ast::Lifetime>) {\n-        run_lints!(self, check_ast_opt_lifetime_ref, sp, lt);\n+        run_lints!(self, check_opt_lifetime_ref, early_passes, sp, lt);\n     }\n \n     fn visit_lifetime_ref(&mut self, lt: &ast::Lifetime) {\n-        run_lints!(self, check_ast_lifetime_ref, lt);\n+        run_lints!(self, check_lifetime_ref, early_passes, lt);\n     }\n \n     fn visit_lifetime_def(&mut self, lt: &ast::LifetimeDef) {\n-        run_lints!(self, check_ast_lifetime_def, lt);\n+        run_lints!(self, check_lifetime_def, early_passes, lt);\n     }\n \n     fn visit_explicit_self(&mut self, es: &ast::ExplicitSelf) {\n-        run_lints!(self, check_ast_explicit_self, es);\n+        run_lints!(self, check_explicit_self, early_passes, es);\n         ast_visit::walk_explicit_self(self, es);\n     }\n \n     fn visit_path(&mut self, p: &ast::Path, id: ast::NodeId) {\n-        run_lints!(self, check_ast_path, p, id);\n+        run_lints!(self, check_path, early_passes, p, id);\n         ast_visit::walk_path(self, p);\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        run_lints!(self, check_ast_attribute, attr);\n+        run_lints!(self, check_attribute, early_passes, attr);\n     }\n }\n \n@@ -946,7 +965,9 @@ impl LintPass for GatherNodeLevels {\n     fn get_lints(&self) -> LintArray {\n         lint_array!()\n     }\n+}\n \n+impl LateLintPass for GatherNodeLevels {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemEnum(..) => {\n@@ -984,7 +1005,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n \n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n-        run_lints!(cx, check_crate, krate);\n+        run_lints!(cx, check_crate, late_passes, krate);\n \n         hir_visit::walk_crate(cx, krate);\n     });\n@@ -1015,7 +1036,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n \n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n-        run_lints!(cx, check_ast_crate, krate);\n+        run_lints!(cx, check_crate, early_passes, krate);\n \n         ast_visit::walk_crate(cx, krate);\n     });"}, {"sha": "e52b6e91f68cd5a50f928c0548c0fae642b577c4", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -39,7 +39,7 @@ use syntax::visit as ast_visit;\n use syntax::ast;\n use rustc_front::hir;\n \n-pub use lint::context::{LateContext, EarlyContext, Context, LintContext, LintStore,\n+pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n                         GatherNodeLevels};\n \n@@ -111,14 +111,6 @@ macro_rules! lint_array { ($( $lint:expr ),*) => (\n \n pub type LintArray = &'static [&'static &'static Lint];\n \n-/// Trait for types providing lint checks.\n-///\n-/// Each `check` method checks a single syntax node, and should not\n-/// invoke methods recursively (unlike `Visitor`). By default they\n-/// do nothing.\n-//\n-// FIXME: eliminate the duplication with `Visitor`. But this also\n-// contains a few lint-specific methods with no equivalent in `Visitor`.\n pub trait LintPass {\n     /// Get descriptions of the lints this `LintPass` object can emit.\n     ///\n@@ -127,7 +119,18 @@ pub trait LintPass {\n     /// parts of the compiler. If you want enforced access restrictions for your\n     /// `Lint`, make it a private `static` item in its own module.\n     fn get_lints(&self) -> LintArray;\n+}\n \n+\n+/// Trait for types providing lint checks.\n+///\n+/// Each `check` method checks a single syntax node, and should not\n+/// invoke methods recursively (unlike `Visitor`). By default they\n+/// do nothing.\n+//\n+// FIXME: eliminate the duplication with `Visitor`. But this also\n+// contains a few lint-specific methods with no equivalent in `Visitor`.\n+pub trait LateLintPass: LintPass {\n     fn check_ident(&mut self, _: &LateContext, _: Span, _: ast::Ident) { }\n     fn check_crate(&mut self, _: &LateContext, _: &hir::Crate) { }\n     fn check_mod(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }\n@@ -164,60 +167,63 @@ pub trait LintPass {\n     fn check_path(&mut self, _: &LateContext, _: &hir::Path, _: ast::NodeId) { }\n     fn check_attribute(&mut self, _: &LateContext, _: &ast::Attribute) { }\n \n-    fn check_ast_ident(&mut self, _: &EarlyContext, _: Span, _: ast::Ident) { }\n-    fn check_ast_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n-    fn check_ast_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n-    fn check_ast_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n-    fn check_ast_item(&mut self, _: &EarlyContext, _: &ast::Item) { }\n-    fn check_ast_local(&mut self, _: &EarlyContext, _: &ast::Local) { }\n-    fn check_ast_block(&mut self, _: &EarlyContext, _: &ast::Block) { }\n-    fn check_ast_stmt(&mut self, _: &EarlyContext, _: &ast::Stmt) { }\n-    fn check_ast_arm(&mut self, _: &EarlyContext, _: &ast::Arm) { }\n-    fn check_ast_pat(&mut self, _: &EarlyContext, _: &ast::Pat) { }\n-    fn check_ast_decl(&mut self, _: &EarlyContext, _: &ast::Decl) { }\n-    fn check_ast_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n-    fn check_ast_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n-    fn check_ast_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n-    fn check_ast_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n-    fn check_ast_fn(&mut self, _: &EarlyContext,\n-        _: ast_visit::FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n-    fn check_ast_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n-    fn check_ast_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n-    fn check_ast_struct_def(&mut self, _: &EarlyContext,\n-        _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n-    fn check_ast_struct_def_post(&mut self, _: &EarlyContext,\n-        _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n-    fn check_ast_struct_field(&mut self, _: &EarlyContext, _: &ast::StructField) { }\n-    fn check_ast_variant(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n-    fn check_ast_variant_post(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n-    fn check_ast_opt_lifetime_ref(&mut self,\n-                                  _: &EarlyContext,\n-                                  _: Span,\n-                                  _: &Option<ast::Lifetime>) { }\n-    fn check_ast_lifetime_ref(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }\n-    fn check_ast_lifetime_def(&mut self, _: &EarlyContext, _: &ast::LifetimeDef) { }\n-    fn check_ast_explicit_self(&mut self, _: &EarlyContext, _: &ast::ExplicitSelf) { }\n-    fn check_ast_mac(&mut self, _: &EarlyContext, _: &ast::Mac) { }\n-    fn check_ast_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }\n-    fn check_ast_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }\n-\n     /// Called when entering a syntax node that can have lint attributes such\n     /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n     fn enter_lint_attrs(&mut self, _: &LateContext, _: &[ast::Attribute]) { }\n \n     /// Counterpart to `enter_lint_attrs`.\n     fn exit_lint_attrs(&mut self, _: &LateContext, _: &[ast::Attribute]) { }\n+}\n+\n+pub trait EarlyLintPass: LintPass {\n+    fn check_ident(&mut self, _: &EarlyContext, _: Span, _: ast::Ident) { }\n+    fn check_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n+    fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n+    fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n+    fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }\n+    fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }\n+    fn check_block(&mut self, _: &EarlyContext, _: &ast::Block) { }\n+    fn check_stmt(&mut self, _: &EarlyContext, _: &ast::Stmt) { }\n+    fn check_arm(&mut self, _: &EarlyContext, _: &ast::Arm) { }\n+    fn check_pat(&mut self, _: &EarlyContext, _: &ast::Pat) { }\n+    fn check_decl(&mut self, _: &EarlyContext, _: &ast::Decl) { }\n+    fn check_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n+    fn check_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n+    fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n+    fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n+    fn check_fn(&mut self, _: &EarlyContext,\n+        _: ast_visit::FnKind, _: &ast::FnDecl, _: &ast::Block, _: Span, _: ast::NodeId) { }\n+    fn check_trait_item(&mut self, _: &EarlyContext, _: &ast::TraitItem) { }\n+    fn check_impl_item(&mut self, _: &EarlyContext, _: &ast::ImplItem) { }\n+    fn check_struct_def(&mut self, _: &EarlyContext,\n+        _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n+    fn check_struct_def_post(&mut self, _: &EarlyContext,\n+        _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n+    fn check_struct_field(&mut self, _: &EarlyContext, _: &ast::StructField) { }\n+    fn check_variant(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n+    fn check_variant_post(&mut self, _: &EarlyContext, _: &ast::Variant, _: &ast::Generics) { }\n+    fn check_opt_lifetime_ref(&mut self,\n+                              _: &EarlyContext,\n+                              _: Span,\n+                              _: &Option<ast::Lifetime>) { }\n+    fn check_lifetime_ref(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }\n+    fn check_lifetime_def(&mut self, _: &EarlyContext, _: &ast::LifetimeDef) { }\n+    fn check_explicit_self(&mut self, _: &EarlyContext, _: &ast::ExplicitSelf) { }\n+    fn check_mac(&mut self, _: &EarlyContext, _: &ast::Mac) { }\n+    fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }\n+    fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }\n \n     /// Called when entering a syntax node that can have lint attributes such\n     /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n-    fn ast_enter_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }\n+    fn enter_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }\n \n-    /// Counterpart to `ast_enter_lint_attrs`.\n-    fn ast_exit_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }\n+    /// Counterpart to `enter_lint_attrs`.\n+    fn exit_lint_attrs(&mut self, _: &EarlyContext, _: &[ast::Attribute]) { }\n }\n \n /// A lint pass boxed up as a trait object.\n-pub type LintPassObject = Box<LintPass + 'static>;\n+pub type EarlyLintPassObject = Box<EarlyLintPass + 'static>;\n+pub type LateLintPassObject = Box<LateLintPass + 'static>;\n \n /// Identifies a lint known to the compiler.\n #[derive(Clone, Copy)]"}, {"sha": "50ca092dfe64e43e5e694c004544de673a477342", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -10,7 +10,7 @@\n \n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n-use lint::{LintPassObject, LintId, Lint};\n+use lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n@@ -48,7 +48,10 @@ pub struct Registry<'a> {\n     pub syntax_exts: Vec<NamedSyntaxExtension>,\n \n     #[doc(hidden)]\n-    pub lint_passes: Vec<LintPassObject>,\n+    pub early_lint_passes: Vec<EarlyLintPassObject>,\n+\n+    #[doc(hidden)]\n+    pub late_lint_passes: Vec<LateLintPassObject>,\n \n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n@@ -68,7 +71,8 @@ impl<'a> Registry<'a> {\n             args_hidden: None,\n             krate_span: krate.span,\n             syntax_exts: vec!(),\n-            lint_passes: vec!(),\n+            early_lint_passes: vec!(),\n+            late_lint_passes: vec!(),\n             lint_groups: HashMap::new(),\n             llvm_passes: vec!(),\n             attributes: vec!(),\n@@ -117,10 +121,14 @@ impl<'a> Registry<'a> {\n     }\n \n     /// Register a compiler lint pass.\n-    pub fn register_lint_pass(&mut self, lint_pass: LintPassObject) {\n-        self.lint_passes.push(lint_pass);\n+    pub fn register_early_lint_pass(&mut self, lint_pass: EarlyLintPassObject) {\n+        self.early_lint_passes.push(lint_pass);\n     }\n \n+    /// Register a compiler lint pass.\n+    pub fn register_late_lint_pass(&mut self, lint_pass: LateLintPassObject) {\n+        self.late_lint_passes.push(lint_pass);\n+    }\n     /// Register a lint group.\n     pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());"}, {"sha": "ec5ceadd0662c3b262e475454290d0ca703cb20b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -482,13 +482,16 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     });\n \n-    let Registry { syntax_exts, lint_passes, lint_groups,\n+    let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n                    llvm_passes, attributes, .. } = registry;\n \n     {\n         let mut ls = sess.lint_store.borrow_mut();\n-        for pass in lint_passes {\n-            ls.register_pass(Some(sess), true, pass);\n+        for pass in early_lint_passes {\n+            ls.register_early_pass(Some(sess), true, pass);\n+        }\n+        for pass in late_lint_passes {\n+            ls.register_late_pass(Some(sess), true, pass);\n         }\n \n         for (name, to) in lint_groups {"}, {"sha": "394bd2abc08c7f491d33fc31c656523bf20d1487", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -38,7 +38,8 @@ use middle::const_eval::{eval_const_expr_partial, ConstVal};\n use middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::front::map as hir_map;\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeSet};\n-use lint::{Level, LateContext, EarlyContext, LintContext, LintPass, LintArray, Lint};\n+use lint::{Level, LateContext, EarlyContext, LintContext, LintArray, Lint};\n+use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use std::collections::HashSet;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -72,7 +73,9 @@ impl LintPass for WhileTrue {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(WHILE_TRUE)\n     }\n+}\n \n+impl LateLintPass for WhileTrue {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         if let hir::ExprWhile(ref cond, _, _) = e.node {\n             if let hir::ExprLit(ref lit) = cond.node {\n@@ -121,7 +124,9 @@ impl LintPass for TypeLimits {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_COMPARISONS, OVERFLOWING_LITERALS, EXCEEDING_BITSHIFTS)\n     }\n+}\n \n+impl LateLintPass for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         match e.node {\n             hir::ExprUnary(hir::UnNeg, ref expr) => {\n@@ -699,7 +704,9 @@ impl LintPass for ImproperCTypes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(IMPROPER_CTYPES)\n     }\n+}\n \n+impl LateLintPass for ImproperCTypes {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         fn check_ty(cx: &LateContext, ty: &hir::Ty) {\n             let mut vis = ImproperCTypesVisitor { cx: cx };\n@@ -759,7 +766,9 @@ impl LintPass for BoxPointers {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(BOX_POINTERS)\n     }\n+}\n \n+impl LateLintPass for BoxPointers {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemFn(..) |\n@@ -828,7 +837,9 @@ impl LintPass for RawPointerDerive {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(RAW_POINTER_DERIVE)\n     }\n+}\n \n+impl LateLintPass for RawPointerDerive {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n         if !attr::contains_name(&item.attrs, \"automatically_derived\") {\n             return;\n@@ -884,7 +895,9 @@ impl LintPass for UnusedAttributes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_ATTRIBUTES)\n     }\n+}\n \n+impl LateLintPass for UnusedAttributes {\n     fn check_attribute(&mut self, cx: &LateContext, attr: &ast::Attribute) {\n         // Note that check_name() marks the attribute as used if it matches.\n         for &(ref name, ty, _) in KNOWN_ATTRIBUTES {\n@@ -944,7 +957,9 @@ impl LintPass for PathStatements {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(PATH_STATEMENTS)\n     }\n+}\n \n+impl LateLintPass for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n         match s.node {\n             hir::StmtSemi(ref expr, _) => {\n@@ -978,7 +993,9 @@ impl LintPass for UnusedResults {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_MUST_USE, UNUSED_RESULTS)\n     }\n+}\n \n+impl LateLintPass for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext, s: &hir::Stmt) {\n         let expr = match s.node {\n             hir::StmtSemi(ref expr, _) => &**expr,\n@@ -1084,7 +1101,9 @@ impl LintPass for NonCamelCaseTypes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_CAMEL_CASE_TYPES)\n     }\n+}\n \n+impl LateLintPass for NonCamelCaseTypes {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         let extern_repr_count = it.attrs.iter().filter(|attr| {\n             attr::find_repr_attrs(cx.tcx.sess.diagnostic(), attr).iter()\n@@ -1230,7 +1249,9 @@ impl LintPass for NonSnakeCase {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_SNAKE_CASE)\n     }\n+}\n \n+impl LateLintPass for NonSnakeCase {\n     fn check_crate(&mut self, cx: &LateContext, cr: &hir::Crate) {\n         let attr_crate_name = cr.attrs.iter().find(|at| at.check_name(\"crate_name\"))\n                                       .and_then(|at| at.value_str().map(|s| (at, s)));\n@@ -1331,7 +1352,9 @@ impl LintPass for NonUpperCaseGlobals {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_UPPER_CASE_GLOBALS)\n     }\n+}\n \n+impl LateLintPass for NonUpperCaseGlobals {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             // only check static constants\n@@ -1437,8 +1460,10 @@ impl LintPass for UnusedParens {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_PARENS)\n     }\n+}\n \n-    fn check_ast_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n+impl EarlyLintPass for UnusedParens {\n+    fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n         let (value, msg, struct_lit_needs_parens) = match e.node {\n             ast::ExprIf(ref cond, _, _) => (cond, \"`if` condition\", true),\n             ast::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n@@ -1456,7 +1481,7 @@ impl LintPass for UnusedParens {\n         self.check_unused_parens_core(cx, &**value, msg, struct_lit_needs_parens);\n     }\n \n-    fn check_ast_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n+    fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         let (value, msg) = match s.node {\n             ast::StmtDecl(ref decl, _) => match decl.node {\n                 ast::DeclLocal(ref local) => match local.init {\n@@ -1484,7 +1509,9 @@ impl LintPass for UnusedImportBraces {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_IMPORT_BRACES)\n     }\n+}\n \n+impl LateLintPass for UnusedImportBraces {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n         if let hir::ItemUse(ref view_path) = item.node {\n             if let hir::ViewPathList(_, ref items) = view_path.node {\n@@ -1514,7 +1541,9 @@ impl LintPass for NonShorthandFieldPatterns {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(NON_SHORTHAND_FIELD_PATTERNS)\n     }\n+}\n \n+impl LateLintPass for NonShorthandFieldPatterns {\n     fn check_pat(&mut self, cx: &LateContext, pat: &hir::Pat) {\n         let def_map = cx.tcx.def_map.borrow();\n         if let hir::PatStruct(_, ref v, _) = pat.node {\n@@ -1553,7 +1582,9 @@ impl LintPass for UnusedUnsafe {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_UNSAFE)\n     }\n+}\n \n+impl LateLintPass for UnusedUnsafe {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n@@ -1578,7 +1609,9 @@ impl LintPass for UnsafeCode {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNSAFE_CODE)\n     }\n+}\n \n+impl LateLintPass for UnsafeCode {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n@@ -1669,7 +1702,9 @@ impl LintPass for UnusedMut {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_MUT)\n     }\n+}\n \n+impl LateLintPass for UnusedMut {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         if let hir::ExprMatch(_, ref arms, _) = e.node {\n             for a in arms {\n@@ -1708,7 +1743,9 @@ impl LintPass for UnusedAllocation {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNUSED_ALLOCATION)\n     }\n+}\n \n+impl LateLintPass for UnusedAllocation {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         match e.node {\n             hir::ExprUnary(hir::UnUniq, _) => (),\n@@ -1813,7 +1850,9 @@ impl LintPass for MissingDoc {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MISSING_DOCS)\n     }\n+}\n \n+impl LateLintPass for MissingDoc {\n     fn enter_lint_attrs(&mut self, _: &LateContext, attrs: &[ast::Attribute]) {\n         let doc_hidden = self.doc_hidden() || attrs.iter().any(|attr| {\n             attr.check_name(\"doc\") && match attr.meta_item_list() {\n@@ -1950,7 +1989,9 @@ impl LintPass for MissingCopyImplementations {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MISSING_COPY_IMPLEMENTATIONS)\n     }\n+}\n \n+impl LateLintPass for MissingCopyImplementations {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n         if !cx.exported_items.contains(&item.id) {\n             return;\n@@ -2012,7 +2053,9 @@ impl LintPass for MissingDebugImplementations {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MISSING_DEBUG_IMPLEMENTATIONS)\n     }\n+}\n \n+impl LateLintPass for MissingDebugImplementations {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n         if !cx.exported_items.contains(&item.id) {\n             return;\n@@ -2106,7 +2149,9 @@ impl LintPass for Stability {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEPRECATED)\n     }\n+}\n \n+impl LateLintPass for Stability {\n     fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n         stability::check_item(cx.tcx, item, false,\n                               &mut |id, sp, stab|\n@@ -2150,7 +2195,9 @@ impl LintPass for UnconditionalRecursion {\n     fn get_lints(&self) -> LintArray {\n         lint_array![UNCONDITIONAL_RECURSION]\n     }\n+}\n \n+impl LateLintPass for UnconditionalRecursion {\n     fn check_fn(&mut self, cx: &LateContext, fn_kind: FnKind, _: &hir::FnDecl,\n                 blk: &hir::Block, sp: Span, id: ast::NodeId) {\n         type F = for<'tcx> fn(&ty::ctxt<'tcx>,\n@@ -2397,7 +2444,9 @@ impl LintPass for PluginAsLibrary {\n     fn get_lints(&self) -> LintArray {\n         lint_array![PLUGIN_AS_LIBRARY]\n     }\n+}\n \n+impl LateLintPass for PluginAsLibrary {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         if cx.sess().plugin_registrar_fn.get().is_some() {\n             // We're compiling a plugin; it's fine to link other plugins.\n@@ -2453,7 +2502,9 @@ impl LintPass for InvalidNoMangleItems {\n                     PRIVATE_NO_MANGLE_STATICS,\n                     NO_MANGLE_CONST_ITEMS)\n     }\n+}\n \n+impl LateLintPass for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemFn(..) => {\n@@ -2499,7 +2550,9 @@ impl LintPass for MutableTransmutes {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(MUTABLE_TRANSMUTES)\n     }\n+}\n \n+impl LateLintPass for MutableTransmutes {\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n         use syntax::abi::RustIntrinsic;\n \n@@ -2566,7 +2619,9 @@ impl LintPass for UnstableFeatures {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNSTABLE_FEATURES)\n     }\n+}\n \n+impl LateLintPass for UnstableFeatures {\n     fn check_attribute(&mut self, ctx: &LateContext, attr: &ast::Attribute) {\n         if attr::contains_name(&[attr.node.value.clone()], \"feature\") {\n             if let Some(items) = attr.node.value.meta_item_list() {\n@@ -2593,6 +2648,9 @@ impl LintPass for DropWithReprExtern {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DROP_WITH_REPR_EXTERN)\n     }\n+}\n+\n+impl LateLintPass for DropWithReprExtern {\n     fn check_crate(&mut self, ctx: &LateContext, _: &hir::Crate) {\n         for dtor_did in ctx.tcx.destructors.borrow().iter() {\n             let (drop_impl_did, dtor_self_type) ="}, {"sha": "5338316406063ad3cd67482211de21d447e6eda0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -67,15 +67,23 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     macro_rules! add_builtin {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n-                store.register_pass($sess, false, box builtin::$name);\n+                store.register_late_pass($sess, false, box builtin::$name);\n+                )*}\n+            )\n+    }\n+\n+    macro_rules! add_early_builtin {\n+        ($sess:ident, $($name:ident),*,) => (\n+            {$(\n+                store.register_early_pass($sess, false, box builtin::$name);\n                 )*}\n             )\n     }\n \n     macro_rules! add_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n-                store.register_pass($sess, false, box builtin::$name::new());\n+                store.register_late_pass($sess, false, box builtin::$name::new());\n                 )*}\n             )\n     }\n@@ -86,6 +94,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    add_early_builtin!(sess,\n+                       UnusedParens,\n+                       );\n+\n     add_builtin!(sess,\n                  HardwiredLints,\n                  WhileTrue,\n@@ -97,7 +109,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  NonCamelCaseTypes,\n                  NonSnakeCase,\n                  NonUpperCaseGlobals,\n-                 UnusedParens,\n                  UnusedImportBraces,\n                  NonShorthandFieldPatterns,\n                  UnusedUnsafe,\n@@ -130,7 +141,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_UNSAFE, PATH_STATEMENTS);\n \n     // We have one lint pass defined specially\n-    store.register_pass(sess, false, box lint::GatherNodeLevels);\n+    store.register_late_pass(sess, false, box lint::GatherNodeLevels);\n \n     // Insert temporary renamings for a one-time deprecation\n     store.register_renamed(\"raw_pointer_deriving\", \"raw_pointer_derive\");"}, {"sha": "7ae161a86a3614254472364026e3575a72540d0b", "filename": "src/test/auxiliary/lint_for_crate.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_for_crate.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -17,7 +17,7 @@\n extern crate rustc_front;\n extern crate syntax;\n \n-use rustc::lint::{Context, LintContext, LintPass, LintPassObject, LintArray};\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n use rustc::plugin::Registry;\n use rustc_front::hir;\n use syntax::attr;\n@@ -30,8 +30,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(CRATE_NOT_OKAY)\n     }\n+}\n \n-    fn check_crate(&mut self, cx: &Context, krate: &hir::Crate) {\n+impl LateLintPass for Pass {\n+    fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n         if !attr::contains_name(&krate.attrs, \"crate_okay\") {\n             cx.span_lint(CRATE_NOT_OKAY, krate.span,\n                          \"crate is not marked with #![crate_okay]\");\n@@ -41,5 +43,5 @@ impl LintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_lint_pass(box Pass as LintPassObject);\n+    reg.register_late_lint_pass(box Pass as LateLintPassObject);\n }"}, {"sha": "13cf5f09db32b38a7978b0866432f0e752231489", "filename": "src/test/auxiliary/lint_group_plugin_test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_group_plugin_test.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -20,7 +20,7 @@ extern crate rustc_front;\n extern crate rustc;\n \n use rustc_front::hir;\n-use rustc::lint::{Context, LintContext, LintPass, LintPassObject, LintArray};\n+use rustc::lint::{LateContext, LintContext, LintPass, LateLintPass, LateLintPassObject, LintArray};\n use rustc::plugin::Registry;\n \n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n@@ -33,8 +33,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(TEST_LINT, PLEASE_LINT)\n     }\n+}\n \n-    fn check_item(&mut self, cx: &Context, it: &hir::Item) {\n+impl LateLintPass for Pass {\n+    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match &*it.ident.name.as_str() {\n             \"lintme\" => cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\"),\n             \"pleaselintme\" => cx.span_lint(PLEASE_LINT, it.span, \"item is named 'pleaselintme'\"),\n@@ -45,6 +47,6 @@ impl LintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_lint_pass(box Pass as LintPassObject);\n+    reg.register_late_lint_pass(box Pass as LateLintPassObject);\n     reg.register_lint_group(\"lint_me\", vec![TEST_LINT, PLEASE_LINT]);\n }"}, {"sha": "4f5e8d6e0874c1a9d77eb885b135e32e9dbae031", "filename": "src/test/auxiliary/lint_plugin_test.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_plugin_test.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -19,7 +19,8 @@ extern crate syntax;\n #[macro_use]\n extern crate rustc;\n \n-use rustc::lint::{EarlyContext, LintContext, LintPass, LintPassObject, LintArray};\n+use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n+                  EarlyLintPassObject, LintArray};\n use rustc::plugin::Registry;\n use syntax::ast;\n declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n@@ -30,8 +31,10 @@ impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(TEST_LINT)\n     }\n+}\n \n-    fn check_ast_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+impl EarlyLintPass for Pass {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name == \"lintme\" {\n             cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n         }\n@@ -40,5 +43,5 @@ impl LintPass for Pass {\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_lint_pass(box Pass as LintPassObject);\n+    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n }"}, {"sha": "dba9c32f9b4808e4a2d82ccd05404ce56c82c323", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642d853aa29f8ec8486e736be551cf77f34e219/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=a642d853aa29f8ec8486e736be551cf77f34e219", "patch": "@@ -24,7 +24,7 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex =  (|x| {\n+    let ex = |x| {\n         let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `_`\n-            let_(add(x, x), |x|x)})});\n+            let_(add(x, x), |x|x)})};\n }"}]}