{"sha": "85a34c2898b6a64f319f288e69b8cd433a660a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTM0YzI4OThiNmE2NGYzMTlmMjg4ZTY5YjhjZDQzM2E2NjBhMTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-25T19:57:51Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-25T19:57:51Z"}, "message": "Merge pull request #4625 from thestinger/container\n\nmore little container improvements", "tree": {"sha": "901255df7138d69cda1affc99ed1a6da77ef1e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901255df7138d69cda1affc99ed1a6da77ef1e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a34c2898b6a64f319f288e69b8cd433a660a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a34c2898b6a64f319f288e69b8cd433a660a17", "html_url": "https://github.com/rust-lang/rust/commit/85a34c2898b6a64f319f288e69b8cd433a660a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a34c2898b6a64f319f288e69b8cd433a660a17/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7e1ab3745f519536ef6e0377427fc41e47f7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7e1ab3745f519536ef6e0377427fc41e47f7c6", "html_url": "https://github.com/rust-lang/rust/commit/4a7e1ab3745f519536ef6e0377427fc41e47f7c6"}, {"sha": "e4337a9defcad3f2a65da285ab78f8ede554f379", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4337a9defcad3f2a65da285ab78f8ede554f379", "html_url": "https://github.com/rust-lang/rust/commit/e4337a9defcad3f2a65da285ab78f8ede554f379"}], "stats": {"total": 162, "additions": 66, "deletions": 96}, "files": [{"sha": "82949bf200cf2184e7c10415a323e6f29b79e72f", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -70,7 +70,7 @@ fn parse_config(args: ~[~str]) -> config {\n           getopts::optopt(~\"logfile\"),\n           getopts::optflag(~\"jit\")];\n \n-    assert (vec::is_not_empty(args));\n+    assert !args.is_empty();\n     let args_ = vec::tail(args);\n     let matches =\n         &match getopts::getopts(args_, opts) {"}, {"sha": "62842d04e78309b541ed5ae15ce5553a31306708", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -59,8 +59,8 @@ fn run_cfail_test(config: config, props: test_props, testfile: &Path) {\n     check_correct_failure_status(procres);\n \n     let expected_errors = errors::load_errors(testfile);\n-    if vec::is_not_empty(expected_errors) {\n-        if vec::is_not_empty(props.error_patterns) {\n+    if !expected_errors.is_empty() {\n+        if !props.error_patterns.is_empty() {\n             fatal(~\"both error pattern and expected errors specified\");\n         }\n         check_expected_errors(expected_errors, testfile, procres);\n@@ -440,7 +440,7 @@ fn compose_and_run_compiler(\n     args: procargs,\n     input: Option<~str>) -> procres {\n \n-    if props.aux_builds.is_not_empty() {\n+    if !props.aux_builds.is_empty() {\n         ensure_dir(&aux_output_dir_name(config, testfile));\n     }\n "}, {"sha": "f7a65ed1fe442ae7e7537df9db0af0d0c49c02fa", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -190,7 +190,8 @@ pub use path::PosixPath;\n \n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n-pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n+pub use container::{Container, Mutable};\n+pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};"}, {"sha": "bb41da432b58ebfa3cc2f158e879acfcb58e0b00", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -208,8 +208,6 @@ impl<T> DList<T> {\n     pure fn len(@self) -> uint { self.size }\n     /// Returns true if the list is empty. O(1).\n     pure fn is_empty(@self) -> bool { self.len() == 0 }\n-    /// Returns true if the list is not empty. O(1).\n-    pure fn is_not_empty(@self) -> bool { self.len() != 0 }\n \n     /// Add data to the head of the list. O(1).\n     fn push_head(@self, data: T) {\n@@ -648,8 +646,6 @@ mod tests {\n         let full1 = from_vec(~[1,2,3]);\n         assert empty.is_empty();\n         assert !full1.is_empty();\n-        assert !empty.is_not_empty();\n-        assert full1.is_not_empty();\n     }\n     #[test]\n     fn test_dlist_head_tail() {"}, {"sha": "999e0df007b9ba22f62b60aed42e6f6adc9f1e45", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -157,7 +157,7 @@ pub pure fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n \n     // turn digits into string\n     // using stack of digits\n-    while fractionalParts.is_not_empty() {\n+    while !fractionalParts.is_empty() {\n         // Bleh; shouldn't need to be unsafe\n         let mut adjusted_digit = carry + unsafe { fractionalParts.pop() };\n "}, {"sha": "72aa828ff12a7d460bd25d7bee9c58ada10d2673", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -29,7 +29,8 @@ pub use path::PosixPath;\n \n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use str::{StrSlice, Trimmable};\n-pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n+pub use container::{Container, Mutable};\n+pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector};\n pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};"}, {"sha": "312bfab58c00d313791864fd268de89e7040b71b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -1419,9 +1419,6 @@ pub pure fn is_ascii(s: &str) -> bool {\n /// Returns true if the string has length 0\n pub pure fn is_empty(s: &str) -> bool { len(s) == 0u }\n \n-/// Returns true if the string has length greater than 0\n-pub pure fn is_not_empty(s: &str) -> bool { !is_empty(s) }\n-\n /**\n  * Returns true if the string contains only whitespace\n  *\n@@ -2167,7 +2164,6 @@ pub trait StrSlice {\n     pure fn each_chari(it: fn(uint, char) -> bool);\n     pure fn ends_with(needle: &str) -> bool;\n     pure fn is_empty() -> bool;\n-    pure fn is_not_empty() -> bool;\n     pure fn is_whitespace() -> bool;\n     pure fn is_alphanumeric() -> bool;\n     pure fn len() -> uint;\n@@ -2229,9 +2225,6 @@ impl &str: StrSlice {\n     /// Returns true if the string has length 0\n     #[inline]\n     pure fn is_empty() -> bool { is_empty(self) }\n-    /// Returns true if the string has length greater than 0\n-    #[inline]\n-    pure fn is_not_empty() -> bool { is_not_empty(self) }\n     /**\n      * Returns true if the string contains only whitespace\n      *\n@@ -2739,12 +2732,6 @@ mod tests {\n         assert (!is_empty(~\"a\"));\n     }\n \n-    #[test]\n-    fn test_is_not_empty() {\n-        assert (is_not_empty(~\"a\"));\n-        assert (!is_not_empty(~\"\"));\n-    }\n-\n     #[test]\n     fn test_replace() {\n         let a = ~\"a\";"}, {"sha": "0faa72364f22132cee018ec85663648c7eca6e6e", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -84,7 +84,7 @@ terminate normally, but instead directly return from a function.\n \n ~~~\n fn choose_weighted_item(v: &[Item]) -> Item {\n-    assert v.is_not_empty();\n+    assert !v.is_empty();\n     let mut so_far = 0u;\n     for v.each |item| {\n         so_far += item.weight;"}, {"sha": "e9d60d0f26923589e97a03101f02285eeb050e73", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -14,6 +14,7 @@\n #[forbid(deprecated_pattern)];\n #[warn(non_camel_case_types)];\n \n+use container::{Container, Mutable};\n use cast::transmute;\n use cast;\n use cmp::{Eq, Ord};\n@@ -48,11 +49,6 @@ pub pure fn is_empty<T>(v: &[const T]) -> bool {\n     as_const_buf(v, |_p, len| len == 0u)\n }\n \n-/// Returns true if a vector contains some elements\n-pub pure fn is_not_empty<T>(v: &[const T]) -> bool {\n-    as_const_buf(v, |_p, len| len > 0u)\n-}\n-\n /// Returns true if two vectors have the same length\n pub pure fn same_length<T, U>(xs: &[const T], ys: &[const U]) -> bool {\n     len(xs) == len(ys)\n@@ -453,7 +449,7 @@ pub pure fn partitioned<T: Copy>(v: &[T], f: fn(&T) -> bool) -> (~[T], ~[T]) {\n /// Removes the first element from a vector and return it\n pub fn shift<T>(v: &mut ~[T]) -> T {\n     unsafe {\n-        assert v.is_not_empty();\n+        assert !v.is_empty();\n \n         if v.len() == 1 { return v.pop() }\n \n@@ -1647,20 +1643,11 @@ pub mod traits {\n     }\n }\n \n-pub trait ConstVector {\n-    pure fn is_empty(&self) -> bool;\n-    pure fn is_not_empty(&self) -> bool;\n-    pure fn len(&self) -> uint;\n-}\n-\n-/// Extension methods for vectors\n-impl<T> &[const T]: ConstVector {\n+impl<T> &[const T]: Container {\n     /// Returns true if a vector contains no elements\n     #[inline]\n     pure fn is_empty(&self) -> bool { is_empty(*self) }\n-    /// Returns true if a vector contains some elements\n-    #[inline]\n-    pure fn is_not_empty(&self) -> bool { is_not_empty(*self) }\n+\n     /// Returns the length of a vector\n     #[inline]\n     pure fn len(&self) -> uint { len(*self) }\n@@ -1949,6 +1936,11 @@ impl<T> ~[T]: OwnedVector<T> {\n     }\n }\n \n+impl<T> ~[T]: Mutable {\n+    /// Clear the vector, removing all values.\n+    fn clear(&mut self) { self.truncate(0) }\n+}\n+\n pub trait OwnedCopyableVector<T: Copy> {\n     fn push_all(&mut self, rhs: &[const T]);\n     fn grow(&mut self, n: uint, initval: &T);\n@@ -2518,12 +2510,6 @@ mod tests {\n         assert (!is_empty(~[0]));\n     }\n \n-    #[test]\n-    fn test_is_not_empty() {\n-        assert (is_not_empty(~[0]));\n-        assert (!is_not_empty::<int>(~[]));\n-    }\n-\n     #[test]\n     fn test_len_divzero() {\n         type Z = [i8 * 0];\n@@ -2700,6 +2686,14 @@ mod tests {\n         // If the unsafe block didn't drop things properly, we blow up here.\n     }\n \n+    #[test]\n+    fn test_clear() {\n+        let mut v = ~[@6,@5,@4];\n+        v.clear();\n+        assert(v.len() == 0);\n+        // If the unsafe block didn't drop things properly, we blow up here.\n+    }\n+\n     #[test]\n     fn test_dedup() {\n         fn case(a: ~[uint], b: ~[uint]) {"}, {"sha": "1896730285f531bb647d21fefdbc7906510f3025", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -167,7 +167,7 @@ fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n \n     path.push_all(vec::view(split2, start_idx, len2 - 1));\n \n-    if vec::is_not_empty(path) {\n+    if !path.is_empty() {\n         return Path(\"\").push_many(path);\n     } else {\n         return Path(\".\");"}, {"sha": "75b7c70db9f8df2b164c882bfa9bbcef196f0a49", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -147,8 +147,8 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n }\n \n fn is_test_fn(i: @ast::item) -> bool {\n-    let has_test_attr = attr::find_attrs_by_name(i.attrs,\n-                                                 ~\"test\").is_not_empty();\n+    let has_test_attr = !attr::find_attrs_by_name(i.attrs,\n+                                                  ~\"test\").is_empty();\n \n     fn has_test_signature(i: @ast::item) -> bool {\n         match &i.node {\n@@ -171,7 +171,7 @@ fn is_ignored(cx: test_ctxt, i: @ast::item) -> bool {\n     let ignoreitems = attr::attr_metas(ignoreattrs);\n     let cfg_metas = vec::concat(vec::filter_map(ignoreitems,\n         |i| attr::get_meta_item_list(*i)));\n-    return if vec::is_not_empty(ignoreitems) {\n+    return if !ignoreitems.is_empty() {\n         config::metas_in_cfg(/*bad*/copy cx.crate.node.config, cfg_metas)\n     } else {\n         false"}, {"sha": "ed87857e384b5d3d7b91aa1628a296647f057fdf", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -1331,7 +1331,7 @@ fn type_to_str_inner(names: type_names, +outer0: ~[TypeRef], ty: TypeRef) ->\n           Struct => {\n             let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n             let mut elts = vec::from_elem(n_elts, 0 as TypeRef);\n-            if elts.is_not_empty() {\n+            if !elts.is_empty() {\n                 llvm::LLVMGetStructElementTypes(\n                     ty, ptr::to_mut_unsafe_ptr(&mut elts[0]));\n             }"}, {"sha": "0099683102de3e425fabf71c1c10982b28db5e34", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -95,7 +95,7 @@ fn warn_if_multiple_versions(e: env, diag: span_handler,\n                 }\n             }));\n \n-        assert matches.is_not_empty();\n+        assert !matches.is_empty();\n \n         if matches.len() != 1u {\n             diag.handler().warn(\n@@ -168,7 +168,7 @@ fn visit_item(e: env, i: @ast::item) {\n                 already_added = !cstore::add_used_library(cstore,\n                                                           foreign_name);\n             }\n-            if link_args.is_not_empty() && already_added {\n+            if !link_args.is_empty() && already_added {\n                 e.diag.span_fatal(i.span, ~\"library '\" + foreign_name +\n                            ~\"' already added: can't specify link_args.\");\n             }"}, {"sha": "79ce755137efcc30c223262d164e64cdc8f3c9a3", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -1018,8 +1018,8 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: &crate) -> ~[attribute] {\n     fn synthesize_link_attr(ecx: @encode_ctxt, +items: ~[@meta_item]) ->\n        attribute {\n \n-        assert ecx.link_meta.name.is_not_empty();\n-        assert ecx.link_meta.vers.is_not_empty();\n+        assert !ecx.link_meta.name.is_empty();\n+        assert !ecx.link_meta.vers.is_empty();\n \n         let name_item =\n             attr::mk_name_value_item_str(~\"name\","}, {"sha": "f15817551b684934da41b02893f0644698e88168", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -179,7 +179,7 @@ fn crate_matches(crate_data: @~[u8], +metas: ~[@ast::meta_item],\n                  hash: ~str) -> bool {\n     let attrs = decoder::get_crate_attributes(crate_data);\n     let linkage_metas = attr::find_linkage_metas(attrs);\n-    if hash.is_not_empty() {\n+    if !hash.is_empty() {\n         let chash = decoder::get_crate_hash(crate_data);\n         if chash != hash { return false; }\n     }"}, {"sha": "d76e1b179b1a9ff502f2158b80c2df8595f67da5", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -132,7 +132,7 @@ fn raw_pat(p: @pat) -> @pat {\n }\n \n fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n-    assert(pats.is_not_empty());\n+    assert(!pats.is_empty());\n     let ext = match is_useful(cx, vec::map(pats, |p| ~[*p]), ~[wild()]) {\n       not_useful => return, // This is good, wildcard pattern isn't reachable\n       useful_ => None,"}, {"sha": "515666445e3aac614186adbc967e8b1c623e27b3", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -820,7 +820,7 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n     fn is_camel_case(cx: ty::ctxt, ident: ast::ident) -> bool {\n         let ident = cx.sess.str_of(ident);\n-        assert ident.is_not_empty();\n+        assert !ident.is_empty();\n         let ident = ident_without_trailing_underscores(ident);\n         let ident = ident_without_leading_underscores(ident);\n         char::is_uppercase(str::char_at(ident, 0)) &&"}, {"sha": "3bf1547a7d9423a61486018ccf6971ca54c26082", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -459,7 +459,7 @@ fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id,\n                 parent_id: ast::def_id, substs: ~[ty::t])\n    -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"trans_res_dtor\");\n-    if (substs.is_not_empty()) {\n+    if !substs.is_empty() {\n         let did = if did.crate != ast::local_crate {\n             inline::maybe_instantiate_inline(ccx, did, true)\n         } else { did };"}, {"sha": "e1a549bcc7b24b4b650b9c5b98a2480546592d84", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -635,7 +635,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         } else {\n             for m.items.each |item| {\n                 let tpt = ty::lookup_item_type(ccx.tcx, local_def(item.id));\n-                if (*tpt.bounds).is_not_empty() {\n+                if !tpt.bounds.is_empty() {\n                     ccx.tcx.sess.span_err(\n                         item.span,\n                         fmt!(\"foreign items may not have type parameters\"));"}, {"sha": "142f1e989a037af60bfaf1504350625591863c76", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -356,7 +356,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n                 Some(ast_map::node_item(it,_)) => {\n                     match it.node {\n                         ast::item_fn(_, _, ref ps, _)\n-                        if vec::is_not_empty(*ps) => {\n+                        if !ps.is_empty() => {\n                             tcx.sess.span_err(\n                                 main_span,\n                                 ~\"main function is not allowed \\"}, {"sha": "311245ccc345d314db056e1d2f8cdc3d3c758b3d", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -127,7 +127,7 @@ pub fn parse_hidden(+attrs: ~[ast::attribute]) -> bool {\n         match attr::get_meta_item_list(*meta) {\n           Some(metas) => {\n             let hiddens = attr::find_meta_items_by_name(metas, ~\"hidden\");\n-            vec::is_not_empty(hiddens)\n+            !hiddens.is_empty()\n           }\n           None => false\n         }"}, {"sha": "f53e0058b63bed53eafccbbea8b4abab42a61357", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -143,7 +143,7 @@ fn parse_desc(desc: ~str) -> Option<~str> {\n \n fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(s);\n-    if vec::is_not_empty(paras) {\n+    if !paras.is_empty() {\n         let first_para = vec::head(paras);\n         Some(str::replace(first_sentence_(first_para), ~\"\\n\", ~\" \"))\n     } else {\n@@ -193,7 +193,7 @@ fn paragraphs(s: ~str) -> ~[~str] {\n             whitespace_lines += 1;\n         } else {\n             if whitespace_lines > 0 {\n-                if str::is_not_empty(accum) {\n+                if !accum.is_empty() {\n                     res += ~[accum];\n                     accum = ~\"\";\n                 }\n@@ -211,7 +211,7 @@ fn paragraphs(s: ~str) -> ~[~str] {\n         res\n     };\n \n-    if str::is_not_empty(accum) {\n+    if !accum.is_empty() {\n         paras + ~[accum]\n     } else {\n         paras"}, {"sha": "d97dae1bbb6993f1836e0e34c09caf244103d6c2", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -78,7 +78,7 @@ fn unindent(s: ~str) -> ~str {\n         }\n     };\n \n-    if vec::is_not_empty(lines) {\n+    if !lines.is_empty() {\n         let unindented = ~[str::trim(vec::head(lines))]\n             + do par::map(vec::tail(lines)) |line| {\n             if str::is_whitespace(*line) {"}, {"sha": "fc7834291267b6b423cd20ba24c881f63bc2afee", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -402,7 +402,7 @@ pub impl BigUint {\n     }\n \n     pure fn is_zero(&self) -> bool { self.data.is_empty() }\n-    pure fn is_not_zero(&self) -> bool { self.data.is_not_empty() }\n+    pure fn is_not_zero(&self) -> bool { !self.data.is_empty() }\n     pure fn is_positive(&self) -> bool { self.is_not_zero() }\n     pure fn is_negative(&self) -> bool { false }\n     pure fn is_nonpositive(&self) -> bool { self.is_zero() }"}, {"sha": "ea7b2442bb91955b5838b1b2aad98e720c5bced8", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -599,7 +599,7 @@ pub mod bytepipes {\n             } else if self.buf.is_empty() {\n                 match self.port.try_recv() {\n                     Some(move buf) => {\n-                        assert buf.is_not_empty();\n+                        assert !buf.is_empty();\n                         self.buf = move buf;\n                         return self.try_recv(count);\n                     }\n@@ -904,7 +904,7 @@ mod test {\n         fn pipe_port_loader(bytes: ~[u8]\n                            ) -> pod::PipePort<int> {\n             let (port, chan) = pipes::stream();\n-            if bytes.is_not_empty() {\n+            if !bytes.is_empty() {\n                 chan.send(move bytes);\n             }\n             pod::pipe_port(move port)"}, {"sha": "b3e5854bf452efda2536183b23348883aad25c5c", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -45,7 +45,7 @@\n  *     }\n  *\n  *     fn main(args: ~[str]) {\n- *         check vec::is_not_empty(args);\n+ *         check !args.is_empty()\n  *\n  *         let program : str = vec::head(args);\n  *\n@@ -63,7 +63,7 @@\n  *             return;\n  *         }\n  *         let output = opt_maybe_str(matches, \"o\");\n- *         let input = if vec::is_not_empty(matches.free) {\n+ *         let input = if !matches.free.is_empty() {\n  *             matches.free[0]\n  *         } else {\n  *             print_usage(program);\n@@ -357,7 +357,7 @@ fn opt_val(mm: &Matches, nm: &str) -> Optval { return opt_vals(mm, nm)[0]; }\n \n /// Returns true if an option was matched\n pub fn opt_present(mm: &Matches, nm: &str) -> bool {\n-    opt_vals(mm, nm).is_not_empty()\n+    !opt_vals(mm, nm).is_empty()\n }\n \n /// Returns the number of times an option was matched"}, {"sha": "0aee29932c55cdd078dcf65e05c7f7ed39fa4de7", "filename": "src/libstd/list.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -83,11 +83,6 @@ pub pure fn is_empty<T: Copy>(ls: @List<T>) -> bool {\n     }\n }\n \n-/// Returns true if the list is not empty\n-pub pure fn is_not_empty<T: Copy>(ls: @List<T>) -> bool {\n-    return !is_empty(ls);\n-}\n-\n /// Returns the length of a list\n pub pure fn len<T>(ls: @List<T>) -> uint {\n     let mut count = 0u;\n@@ -177,10 +172,6 @@ mod tests {\n         assert is_empty(empty);\n         assert !is_empty(full1);\n         assert !is_empty(full2);\n-\n-        assert !is_not_empty(empty);\n-        assert is_not_empty(full1);\n-        assert is_not_empty(full2);\n     }\n \n     #[test]"}, {"sha": "ed52fbd0f5a260de925ff39531ceb67b013899d5", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -245,7 +245,7 @@ fn contains_name(metas: &[@ast::meta_item], name: &str) -> bool {\n }\n \n fn attrs_contains_name(attrs: &[ast::attribute], name: &str) -> bool {\n-    vec::is_not_empty(find_attrs_by_name(attrs, name))\n+    !find_attrs_by_name(attrs, name).is_empty()\n }\n \n fn first_attr_value_str_by_name(attrs: ~[ast::attribute], name: ~str)"}, {"sha": "6112313cf480881d5a85e442de50ba1b705c862f", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -192,7 +192,7 @@ fn diagnosticcolor(lvl: level) -> u8 {\n fn print_diagnostic(topic: ~str, lvl: level, msg: &str) {\n     let use_color = term::color_supported() &&\n         io::stderr().get_type() == io::Screen;\n-    if str::is_not_empty(topic) {\n+    if !topic.is_empty() {\n         io::stderr().write_str(fmt!(\"%s \", topic));\n     }\n     if use_color {"}, {"sha": "0bd08250617d94acc66f4a1afe130b8ca0fa0146", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -2237,7 +2237,7 @@ impl Parser {\n \n         fn check_expected_item(p: Parser, current_attrs: ~[attribute]) {\n             // If we have attributes then we should have an item\n-            if vec::is_not_empty(current_attrs) {\n+            if !current_attrs.is_empty() {\n                 p.fatal(~\"expected item after attrs\");\n             }\n         }"}, {"sha": "47d139b8641dd5cd7d8e7be6019b260270fe5601", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -532,7 +532,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n \n       ast::item_impl(tps, opt_trait, ty, methods) => {\n         head(s, visibility_qualified(item.vis, ~\"impl\"));\n-        if tps.is_not_empty() {\n+        if !tps.is_empty() {\n             print_type_params(s, tps);\n             space(s.s);\n         }\n@@ -770,7 +770,7 @@ fn print_variant(s: ps, v: ast::variant) {\n     match v.node.kind {\n         ast::tuple_variant_kind(args) => {\n             print_ident(s, v.node.name);\n-            if args.is_not_empty() {\n+            if !args.is_empty() {\n                 popen(s);\n                 fn print_variant_arg(s: ps, arg: ast::variant_arg) {\n                     print_type(s, arg.ty);\n@@ -1054,7 +1054,7 @@ fn print_call_post(s: ps,\n                    has_block: bool,\n                    blk: &Option<@ast::expr>,\n                    base_args: &mut ~[@ast::expr]) {\n-    if !has_block || base_args.is_not_empty() {\n+    if !has_block || !base_args.is_empty() {\n         popen(s);\n         commasep_exprs(s, inconsistent, *base_args);\n         pclose(s);\n@@ -1564,7 +1564,7 @@ fn print_pat(s: ps, &&pat: @ast::pat, refutable: bool) {\n         match args_ {\n           None => word(s.s, ~\"(*)\"),\n           Some(args) => {\n-            if args.is_not_empty() {\n+            if !args.is_empty() {\n               popen(s);\n               commasep(s, inconsistent, args,\n                        |s, p| print_pat(s, p, refutable));\n@@ -1762,7 +1762,7 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n }\n \n fn print_bounds(s: ps, bounds: @~[ast::ty_param_bound]) {\n-    if bounds.is_not_empty() {\n+    if !bounds.is_empty() {\n         word(s.s, ~\":\");\n         let mut first = true;\n         for vec::each(*bounds) |&bound| {\n@@ -1855,7 +1855,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       ast::view_item_use(id, mta, _) => {\n         head(s, ~\"extern mod\");\n         print_ident(s, id);\n-        if mta.is_not_empty() {\n+        if !mta.is_empty() {\n             popen(s);\n             commasep(s, consistent, mta, print_meta_item);\n             pclose(s);\n@@ -2101,7 +2101,7 @@ fn print_comment(s: ps, cmnt: comments::cmnt) {\n         for cmnt.lines.each |line| {\n             // Don't print empty lines because they will end up as trailing\n             // whitespace\n-            if str::is_not_empty(*line) { word(s.s, *line); }\n+            if !line.is_empty() { word(s.s, *line); }\n             hardbreak(s.s);\n         }\n       }\n@@ -2113,7 +2113,7 @@ fn print_comment(s: ps, cmnt: comments::cmnt) {\n         } else {\n             ibox(s, 0u);\n             for cmnt.lines.each |line| {\n-                if str::is_not_empty(*line) { word(s.s, *line); }\n+                if !line.is_empty() { word(s.s, *line); }\n                 hardbreak(s.s);\n             }\n             end(s);"}, {"sha": "ae0af82057f4c487d8ec3536702490084251f5b6", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -23,7 +23,7 @@ pure fn pure_length<T: Copy>(ls: @List<T>) -> uint { pure_length_go(ls, 0u) }\n pure fn nonempty_list<T: Copy>(ls: @List<T>) -> bool { pure_length(ls) > 0u }\n \n fn safe_head<T: Copy>(ls: @List<T>) -> T {\n-    assert is_not_empty(ls);\n+    assert !is_empty(ls);\n     return head(ls);\n }\n "}, {"sha": "62b6ebf20ae372f64fdd43f2f14162571db9e1f7", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a34c2898b6a64f319f288e69b8cd433a660a17/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=85a34c2898b6a64f319f288e69b8cd433a660a17", "patch": "@@ -10,7 +10,7 @@\n \n // In this case, the code should compile and should\n // succeed at runtime\n-use vec::{head, is_not_empty, last, same_length, zip};\n+use vec::{head, last, same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}]}