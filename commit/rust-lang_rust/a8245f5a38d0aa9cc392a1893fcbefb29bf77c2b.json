{"sha": "a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MjQ1ZjVhMzhkMGFhOWNjMzkyYTE4OTNmY2JlZmIyOWJmNzdjMmI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-06T23:55:12Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-12T23:26:43Z"}, "message": "Add lots of static `Symbols`.\n\nThese will be used in the subsequent commits. Many of them are\nattributes.\n\nThe commit also adds the ability to handle symbols that aren't\nidentifiers (e.g. \"proc-macro\").", "tree": {"sha": "21848b3267f9c560d08b13dfbe9dc96cc4d26c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21848b3267f9c560d08b13dfbe9dc96cc4d26c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "html_url": "https://github.com/rust-lang/rust/commit/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1764b29725df66183059f406c8c65edf642bbd43", "url": "https://api.github.com/repos/rust-lang/rust/commits/1764b29725df66183059f406c8c65edf642bbd43", "html_url": "https://github.com/rust-lang/rust/commit/1764b29725df66183059f406c8c65edf642bbd43"}], "stats": {"total": 431, "additions": 415, "deletions": 16}, "files": [{"sha": "a4c7daf088ff2c9e14e052bcd9cd21ffad50f64a", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "patch": "@@ -11,7 +11,7 @@ use quote::quote;\n #[allow(non_camel_case_types)]\n mod kw {\n     syn::custom_keyword!(Keywords);\n-    syn::custom_keyword!(Other);\n+    syn::custom_keyword!(Symbols);\n }\n \n struct Keyword {\n@@ -33,14 +33,24 @@ impl Parse for Keyword {\n     }\n }\n \n-struct Symbol(Ident);\n+struct Symbol {\n+    name: Ident,\n+    value: Option<LitStr>,\n+}\n \n impl Parse for Symbol {\n     fn parse(input: ParseStream<'_>) -> Result<Self> {\n-        let ident: Ident = input.parse()?;\n+        let name = input.parse()?;\n+        let value = match input.parse::<Token![:]>() {\n+            Ok(_) => Some(input.parse()?),\n+            Err(_) => None,\n+        };\n         input.parse::<Token![,]>()?;\n \n-        Ok(Symbol(ident))\n+        Ok(Symbol {\n+            name,\n+            value,\n+        })\n     }\n }\n \n@@ -69,7 +79,7 @@ impl Parse for Input {\n         braced!(content in input);\n         let keywords = content.parse()?;\n \n-        input.parse::<kw::Other>()?;\n+        input.parse::<kw::Symbols>()?;\n         let content;\n         braced!(content in input);\n         let symbols = content.parse()?;\n@@ -116,19 +126,22 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n     }\n \n     for symbol in &input.symbols.0 {\n-        let value = &symbol.0;\n-        let value_str = value.to_string();\n-        check_dup(&value_str);\n+        let name = &symbol.name;\n+        let value = match &symbol.value {\n+            Some(value) => value.value(),\n+            None => name.to_string(),\n+        };\n+        check_dup(&value);\n         prefill_stream.extend(quote! {\n-            #value_str,\n+            #value,\n         });\n         symbols_stream.extend(quote! {\n-            pub const #value: Symbol = Symbol::new(#counter);\n+            pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n     }\n \n-    TokenStream::from(quote! {\n+    let tt = TokenStream::from(quote! {\n         macro_rules! keywords {\n             () => {\n                 #keyword_stream\n@@ -159,5 +172,11 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n                 ])\n             }\n         }\n-    })\n+    });\n+\n+    // To see the generated code generated, uncomment this line, recompile, and\n+    // run the resulting output through `rustfmt`.\n+    //eprintln!(\"{}\", tt);\n+\n+    tt\n }"}, {"sha": "5459f3904fa7c120a636a2db90eef3c7334e1780", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 384, "deletions": 4, "changes": 388, "blob_url": "https://github.com/rust-lang/rust/blob/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=a8245f5a38d0aa9cc392a1893fcbefb29bf77c2b", "patch": "@@ -99,88 +99,375 @@ symbols! {\n         Union:              \"union\",\n     }\n \n-    // Other symbols that can be referred to with syntax_pos::symbols::*\n-    Other {\n+    // Symbols that can be referred to with syntax_pos::symbols::*. The symbol\n+    // is the stringified identifier unless otherwise specified (e.g.\n+    // `proc_dash_macro` represents \"proc-macro\").\n+    Symbols {\n+        aarch64_target_feature,\n+        abi,\n+        abi_amdgpu_kernel,\n+        abi_msp430_interrupt,\n+        abi_ptx,\n+        abi_sysv64,\n+        abi_thiscall,\n+        abi_unadjusted,\n+        abi_vectorcall,\n+        abi_x86_interrupt,\n+        aborts,\n+        advanced_slice_patterns,\n+        adx_target_feature,\n         alias,\n         align,\n+        alignstack,\n+        all,\n+        allocator,\n+        allocator_internals,\n         alloc_error_handler,\n         allow,\n+        allowed,\n         allow_fail,\n         allow_internal_unsafe,\n         allow_internal_unstable,\n+        allow_internal_unstable_backcompat_hack,\n+        always,\n+        any,\n+        arbitrary_self_types,\n+        arm_target_feature,\n+        asm,\n+        associated_consts,\n+        associated_type_defaults,\n+        associated_types,\n+        async_await,\n+        attr,\n+        attributes,\n+        attr_literals,\n+        augmented_assignments,\n         automatically_derived,\n+        avx512_target_feature,\n+        await_macro,\n+        bin,\n+        bind_by_move_pattern_guards,\n+        block,\n+        borrowck_graphviz_postflow,\n+        borrowck_graphviz_preflow,\n+        box_patterns,\n+        box_syntax,\n+        braced_empty_structs,\n+        C,\n+        cdylib,\n         cfg,\n         cfg_attr,\n+        cfg_attr_multi,\n+        cfg_target_feature,\n+        cfg_target_has_atomic,\n+        cfg_target_thread_local,\n+        cfg_target_vendor,\n+        clone,\n+        clone_closures,\n+        clone_from,\n+        closure_to_fn_coercion,\n+        cmpxchg16b_target_feature,\n         cold,\n+        compile_error,\n         compiler_builtins,\n+        concat_idents,\n+        conservative_impl_trait,\n+        console,\n+        const_compare_raw_pointers,\n+        const_fn,\n+        const_fn_union,\n+        const_generics,\n+        const_indexing,\n+        const_let,\n+        const_panic,\n+        const_raw_ptr_deref,\n+        const_raw_ptr_to_usize_cast,\n+        const_transmute,\n+        contents,\n+        convert,\n+        copy_closures,\n+        core,\n+        core_intrinsics,\n         crate_id,\n+        crate_in_paths,\n         crate_name,\n         crate_type,\n+        crate_visibility_modifier,\n+        custom_attribute,\n+        custom_derive,\n+        custom_inner_attributes,\n+        custom_test_frameworks,\n+        c_variadic,\n+        decl_macro,\n         default_lib_allocator,\n+        default_type_parameter_fallback,\n+        default_type_params,\n         deny,\n         deprecated,\n         derive,\n         doc,\n+        doc_alias,\n+        doc_cfg,\n+        doc_keyword,\n+        doc_masked,\n+        doc_spotlight,\n+        document_private_items,\n+        dotdoteq_in_patterns,\n+        dotdot_in_tuple_patterns,\n+        dropck_eyepatch,\n+        dropck_parametricity,\n+        drop_types_in_const,\n+        dylib,\n+        dyn_trait,\n+        eh_personality,\n+        eh_unwind_resume,\n+        enable,\n+        Err,\n+        except,\n+        exclusive_range_pattern,\n+        exhaustive_integer_patterns,\n+        exhaustive_patterns,\n+        existential_type,\n+        expected,\n         export_name,\n+        extern_absolute_paths,\n+        external_doc,\n+        extern_crate_item_prelude,\n+        extern_crate_self,\n+        extern_in_paths,\n+        extern_prelude,\n+        extern_types,\n+        f16c_target_feature,\n         feature,\n         ffi_returns_twice,\n+        field_init_shorthand,\n+        file,\n+        fn_must_use,\n         forbid,\n+        format_args_nl,\n+        from,\n+        From,\n+        from_error,\n+        from_generator,\n+        from_ok,\n         fundamental,\n+        future,\n+        Future,\n+        generators,\n+        generic_associated_types,\n+        generic_param_attrs,\n         global_allocator,\n+        global_asm,\n+        globs,\n+        hexagon_target_feature,\n+        hidden,\n+        homogeneous_aggregate,\n+        html_favicon_url,\n+        html_logo_url,\n+        html_no_source,\n+        html_playground_url,\n+        html_root_url,\n+        i128,\n+        i128_type,\n+        i16,\n+        i32,\n+        i64,\n+        i8,\n+        ident,\n+        if_let,\n+        if_while_or_patterns,\n         ignore,\n+        impl_header_lifetime_elision,\n+        impl_trait_in_bindings,\n+        import_shadowing,\n+        in_band_lifetimes,\n         include,\n+        inclusive_range_syntax,\n+        infer_outlives_requirements,\n+        infer_static_outlives_requirements,\n         inline,\n+        intel,\n+        into_iter,\n+        IntoIterator,\n+        into_result,\n+        intrinsics,\n+        irrefutable_let_patterns,\n+        isize,\n+        issue,\n+        issue_5723_bootstrap,\n+        issue_tracker_base_url,\n+        item_like_imports,\n+        iter,\n+        Iterator,\n         keyword,\n+        kind,\n+        label,\n+        label_break_value,\n         lang,\n+        lang_items,\n+        lib,\n         link,\n+        linkage,\n         link_args,\n+        link_cfg,\n+        link_llvm_intrinsics,\n         link_name,\n         link_section,\n-        linkage,\n+        lint_reasons,\n+        local_inner_macros,\n+        log_syntax,\n+        loop_break_value,\n+        macro_at_most_once_rep,\n         macro_escape,\n         macro_export,\n+        macro_lifetime_matcher,\n+        macro_literal_matcher,\n+        macro_reexport,\n+        macro_rules,\n+        macros_in_extern,\n         macro_use,\n+        macro_vis_matcher,\n         main,\n+        managed_boxes,\n         marker,\n+        marker_trait_attr,\n         masked,\n+        match_beginning_vert,\n+        match_default_bindings,\n         may_dangle,\n+        message,\n+        min_const_fn,\n+        min_const_unsafe_fn,\n+        mips_target_feature,\n+        mmx_target_feature,\n+        module,\n+        more_struct_aliases,\n+        movbe_target_feature,\n         must_use,\n         naked,\n+        naked_functions,\n+        name,\n         needs_allocator,\n         needs_panic_runtime,\n+        negate_unsigned,\n+        never,\n+        never_type,\n+        next,\n+        nll,\n         no_builtins,\n         no_core,\n+        no_crate_inject,\n         no_debug,\n+        no_default_passes,\n         no_implicit_prelude,\n+        no_inline,\n         no_link,\n         no_main,\n         no_mangle,\n+        non_ascii_idents,\n+        None,\n+        non_exhaustive,\n+        non_modrs_mods,\n+        no_stack_check,\n         no_start,\n         no_std,\n-        non_exhaustive,\n+        not,\n+        note,\n+        Ok,\n         omit_gdb_pretty_printer_section,\n+        on,\n+        on_unimplemented,\n+        oom,\n+        ops,\n         optimize,\n+        optimize_attribute,\n+        optin_builtin_traits,\n+        option,\n+        Option,\n+        opt_out_copy,\n+        overlapping_marker_traits,\n+        packed,\n         panic_handler,\n+        panic_impl,\n+        panic_implementation,\n         panic_runtime,\n+        passes,\n         path,\n+        pattern_parentheses,\n+        Pending,\n+        pin,\n+        Pin,\n+        platform_intrinsics,\n         plugin,\n         plugin_registrar,\n+        plugins,\n+        Poll,\n+        poll_with_tls_context,\n+        powerpc_target_feature,\n+        precise_pointer_size_matching,\n+        prelude,\n         prelude_import,\n+        primitive,\n+        proc_dash_macro: \"proc-macro\",\n         proc_macro,\n         proc_macro_attribute,\n         proc_macro_derive,\n+        proc_macro_expr,\n+        proc_macro_gen,\n+        proc_macro_hygiene,\n+        proc_macro_mod,\n+        proc_macro_non_items,\n+        proc_macro_path_invoc,\n         profiler_runtime,\n+        pub_restricted,\n+        pushpop_unsafe,\n+        quad_precision_float,\n+        question_mark,\n+        quote,\n+        Range,\n+        RangeFrom,\n+        RangeFull,\n+        RangeInclusive,\n+        RangeTo,\n+        RangeToInclusive,\n+        raw_identifiers,\n+        Ready,\n+        reason,\n         recursion_limit,\n         reexport_test_harness_main,\n+        reflect,\n+        relaxed_adts,\n         repr,\n+        repr128,\n+        repr_align,\n+        repr_align_enum,\n+        repr_packed,\n+        repr_simd,\n+        repr_transparent,\n+        re_rebalance_coherence,\n+        result,\n+        Result,\n+        Return,\n+        rlib,\n+        rtm_target_feature,\n+        rust,\n+        rust_2015_preview,\n+        rust_2018_preview,\n+        rust_begin_unwind,\n+        rustc_allocator_nounwind,\n+        rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n+        rustc_attrs,\n         rustc_clean,\n         rustc_const_unstable,\n         rustc_conversion_suggestion,\n         rustc_copy_clone_marker,\n         rustc_def_path,\n         rustc_deprecated,\n+        rustc_diagnostic_macros,\n         rustc_dirty,\n+        rustc_doc_only_macro,\n+        rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,\n         rustc_error,\n@@ -191,37 +478,130 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_mir,\n+        rustc_object_lifetime_default,\n         rustc_on_unimplemented,\n         rustc_outlives,\n         rustc_paren_sugar,\n         rustc_partition_codegened,\n         rustc_partition_reused,\n+        rustc_peek,\n+        rustc_peek_definite_init,\n+        rustc_peek_maybe_init,\n+        rustc_peek_maybe_uninit,\n+        rustc_private,\n         rustc_proc_macro_decls,\n+        rustc_promotable,\n         rustc_regions,\n+        rustc_stable,\n         rustc_std_internal_symbol,\n         rustc_symbol_name,\n         rustc_synthetic,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n         rustc_transparent_macro,\n         rustc_variance,\n+        rustdoc,\n+        rust_eh_personality,\n+        rust_eh_unwind_resume,\n+        rust_oom,\n+        __rust_unstable_column,\n+        rvalue_static_promotion,\n         sanitizer_runtime,\n+        self_in_typedefs,\n+        self_struct_ctor,\n+        Send,\n         should_panic,\n         simd,\n+        simd_ffi,\n+        since,\n+        size,\n+        slice_patterns,\n+        slicing_syntax,\n+        Some,\n+        specialization,\n+        speed,\n         spotlight,\n+        sse4a_target_feature,\n         stable,\n+        staged_api,\n         start,\n+        static_in_const,\n+        staticlib,\n+        static_nobundle,\n+        static_recursion,\n+        std,\n+        stmt_expr_attributes,\n+        stop_after_dataflow,\n+        struct_field_attributes,\n+        struct_inherit,\n         structural_match,\n+        struct_variant,\n+        suggestion,\n         target_feature,\n+        target_has_atomic,\n+        target_thread_local,\n+        task,\n+        tbm_target_feature,\n+        termination_trait,\n+        termination_trait_test,\n+        test,\n+        test_2018_feature,\n+        test_accepted_feature,\n+        test_removed_feature,\n         test_runner,\n         thread_local,\n+        tool_attributes,\n+        tool_lints,\n+        trace_macros,\n+        trait_alias,\n+        transmute,\n+        transparent,\n+        trivial_bounds,\n+        Try,\n+        try_blocks,\n+        tuple_indexing,\n+        ty,\n+        type_alias_enum_variants,\n+        type_ascription,\n         type_length_limit,\n+        type_macros,\n+        u128,\n+        u16,\n+        u32,\n+        u64,\n+        u8,\n+        unboxed_closures,\n+        underscore_const_names,\n+        underscore_imports,\n+        underscore_lifetimes,\n+        uniform_paths,\n+        universal_impl_trait,\n+        unmarked_api,\n+        unrestricted_attribute_tokens,\n         unsafe_destructor_blind_to_params,\n+        unsafe_no_drop_flag,\n+        unsized_locals,\n+        unsized_tuple_coercion,\n         unstable,\n+        untagged_unions,\n         unwind,\n+        unwind_attributes,\n         used,\n+        use_extern_macros,\n+        use_nested_groups,\n+        usize,\n+        v1,\n+        vis,\n+        visible_private_types,\n+        volatile,\n         warn,\n+        warn_directory_ownership,\n+        wasm_import_module,\n+        wasm_target_feature,\n+        while_let,\n+        windows,\n         windows_subsystem,\n+        Yield,\n     }\n }\n "}]}