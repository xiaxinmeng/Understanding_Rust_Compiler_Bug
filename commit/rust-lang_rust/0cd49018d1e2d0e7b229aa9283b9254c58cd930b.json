{"sha": "0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "node_id": "C_kwDOAAsO6NoAKDBjZDQ5MDE4ZDFlMmQwZTdiMjI5YWE5MjgzYjkyNTRjNThjZDkzMGI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-03-28T00:01:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-08T08:18:29Z"}, "message": "Revert \"Make the `Step` implementations const.\"\n\nThis reverts commit 7bc67ef6e02d69023c6fb04c2258beab54ac22b8.", "tree": {"sha": "5db3b87d9239fde075742b367911cee9153cce29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db3b87d9239fde075742b367911cee9153cce29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "html_url": "https://github.com/rust-lang/rust/commit/0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a5d611615a47b877c83cc72a5e6db3112adbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a5d611615a47b877c83cc72a5e6db3112adbc4", "html_url": "https://github.com/rust-lang/rust/commit/04a5d611615a47b877c83cc72a5e6db3112adbc4"}], "stats": {"total": 24, "additions": 7, "deletions": 17}, "files": [{"sha": "37db074293d8c315a53c9916b8b682545931195c", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "patch": "@@ -21,8 +21,7 @@ unsafe_impl_trusted_step![char i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usi\n /// The *successor* operation moves towards values that compare greater.\n /// The *predecessor* operation moves towards values that compare lesser.\n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-#[const_trait]\n-pub trait Step: ~const Clone + ~const PartialOrd + Sized {\n+pub trait Step: Clone + PartialOrd + Sized {\n     /// Returns the number of *successor* steps required to get from `start` to `end`.\n     ///\n     /// Returns `None` if the number of steps would overflow `usize`\n@@ -236,8 +235,7 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $u_narrower {\n+            impl Step for $u_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -269,8 +267,7 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $i_narrower {\n+            impl Step for $i_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -334,8 +331,7 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $u_wider {\n+            impl Step for $u_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -360,8 +356,7 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $i_wider {\n+            impl Step for $i_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -411,8 +406,7 @@ step_integer_impls! {\n }\n \n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-impl const Step for char {\n+impl Step for char {\n     #[inline]\n     fn steps_between(&start: &char, &end: &char) -> Option<usize> {\n         let start = start as u32;\n@@ -430,7 +424,6 @@ impl const Step for char {\n     }\n \n     #[inline]\n-    #[rustc_allow_const_fn_unstable(const_try)]\n     fn forward_checked(start: char, count: usize) -> Option<char> {\n         let start = start as u32;\n         let mut res = Step::forward_checked(start, count)?;\n@@ -447,7 +440,6 @@ impl const Step for char {\n     }\n \n     #[inline]\n-    #[rustc_allow_const_fn_unstable(const_try)]\n     fn backward_checked(start: char, count: usize) -> Option<char> {\n         let start = start as u32;\n         let mut res = Step::backward_checked(start, count)?;"}, {"sha": "af02848233d997cab74c88d8052865e707ce3894", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "patch": "@@ -86,5 +86,4 @@ pub unsafe trait InPlaceIterable: Iterator {}\n /// for details. Consumers are free to rely on the invariants in unsafe code.\n #[unstable(feature = \"trusted_step\", issue = \"85731\")]\n #[rustc_specialization_trait]\n-#[const_trait]\n-pub unsafe trait TrustedStep: ~const Step {}\n+pub unsafe trait TrustedStep: Step {}"}, {"sha": "4fd5a4bfc65f6f0a4119af76e721ff81132cc876", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd49018d1e2d0e7b229aa9283b9254c58cd930b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=0cd49018d1e2d0e7b229aa9283b9254c58cd930b", "patch": "@@ -126,7 +126,6 @@\n #![feature(const_intrinsic_forget)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n-#![feature(const_iter)]\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_as_mut_ptr)]"}]}