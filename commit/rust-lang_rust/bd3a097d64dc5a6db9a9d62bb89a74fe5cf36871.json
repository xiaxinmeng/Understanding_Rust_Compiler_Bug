{"sha": "bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871", "node_id": "C_kwDOAAsO6NoAKGJkM2EwOTdkNjRkYzVhNmRiOWE5ZDYyYmI4OWE3NGZlNWNmMzY4NzE", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T18:33:51Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T18:33:51Z"}, "message": "Move lower_generics definition to item.rs", "tree": {"sha": "2a2633b1716406de2ebc1ce7cc2ce6c70398cb11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2633b1716406de2ebc1ce7cc2ce6c70398cb11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWX48ACgkQgTGiTgx5\n768zoRAAsz8GXE6RfvInElAliNtnmL0c/rtWYb/5Uf+QgmyVfJGhZqxEjlXWmjuF\n3OAxK6vQJRVWsjRwL48KZFCUsOn5uwWJ4weDkT04l+JlcU7tcHKT38kjRX4vj2in\n7kYwLc0cSWvGTExXFUHZ8lT1oDicCHRlLMYmkL0MpThuWZNi6g4sRhkBCXhkcCX7\n4bb5LkpXZmYh+rKkRXzfKx/W2DLYdNM/Kzxf1+tbOlyfuyzwKcyzBLGWNLAvSPTf\nVcij50z/2FjYzuSMz/kKg5nGCKIjQHyxvygY/XY1sJauNsMybgQFG+NnsyC9Hea3\nUmLuSjus57Yt8shEFZuYivFx67p6cRzXWcG48Q2hJXAyWE4KSW1V10mrQIWbq13G\n6al5sBmpfwb2ekJMuckufL5FdcRIq8ZYINRGRiIKV8eM6OJXDlTz77p8hOM9VO8i\npVVqCz24W2k6xb/AIFsrwDBKvEXMVVYPasOySoZX3aQHLzrxKbLLliCJmrrK3Vmn\neBC3LXywjeKuAoIrdSeYyLQx5l0Rnsk+nneYCDKn1z8Pg1q9ERuNW1Ioje7yzVj4\nFCJ4L2v10ABMDHJtIk3livYzutZwkNkLV7LiITHO38xNYPzpFTdEr5t3eZ0t8hoI\nmSTKk5vntpMsw7orGMERALZRiL4+wESIxT3t+zNV6J5Lc3WQ1E4=\n=8fB7\n-----END PGP SIGNATURE-----", "payload": "tree 2a2633b1716406de2ebc1ce7cc2ce6c70398cb11\nparent d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff\nauthor Santiago Pastorino <spastorino@gmail.com> 1654022031 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654022031 -0300\n\nMove lower_generics definition to item.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871", "html_url": "https://github.com/rust-lang/rust/commit/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff", "html_url": "https://github.com/rust-lang/rust/commit/d5ab8b2f5b39690c6f73c3459df838fd4c8f44ff"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "1b7fa1da77f291470ae99acc190ae54f1fdaad7d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871", "patch": "@@ -1296,6 +1296,44 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n+    /// Creates a new `hir::GenericParam` for every new `Fresh` lifetime and\n+    /// universal `impl Trait` type parameter encountered while evaluating `f`.\n+    /// Definitions are created with the provided `parent_def_id`.\n+    fn lower_generics<T>(\n+        &mut self,\n+        generics: &Generics,\n+        parent_node_id: NodeId,\n+        itctx: ImplTraitContext,\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> (&'hir hir::Generics<'hir>, T) {\n+        match itctx {\n+            ImplTraitContext::Universal(..) => {}\n+            _ => {\n+                debug_assert!(self.impl_trait_defs.is_empty());\n+                debug_assert!(self.impl_trait_bounds.is_empty());\n+            }\n+        }\n+\n+        let mut lowered_generics = self.lower_generics_mut(generics, itctx);\n+        let res = f(self);\n+\n+        let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n+        let impl_trait_defs = std::mem::take(&mut self.impl_trait_defs);\n+        lowered_generics.params.extend(\n+            extra_lifetimes\n+                .into_iter()\n+                .filter_map(|(ident, node_id, res)| {\n+                    self.lifetime_res_to_generic_param(ident, node_id, res)\n+                })\n+                .chain(impl_trait_defs.into_iter()),\n+        );\n+        let impl_trait_bounds = std::mem::take(&mut self.impl_trait_bounds);\n+        lowered_generics.predicates.extend(impl_trait_bounds.into_iter());\n+\n+        let lowered_generics = lowered_generics.into_generics(self.arena);\n+        (lowered_generics, res)\n+    }\n+\n     pub(super) fn lower_generics_mut(\n         &mut self,\n         generics: &Generics,"}, {"sha": "8315d7aa3f0b81dd51d29215d8803346494053c0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=bd3a097d64dc5a6db9a9d62bb89a74fe5cf36871", "patch": "@@ -703,44 +703,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         })\n     }\n \n-    /// Creates a new `hir::GenericParam` for every new `Fresh` lifetime and\n-    /// universal `impl Trait` type parameter encountered while evaluating `f`.\n-    /// Definitions are created with the provided `parent_def_id`.\n-    fn lower_generics<T>(\n-        &mut self,\n-        generics: &Generics,\n-        parent_node_id: NodeId,\n-        itctx: ImplTraitContext,\n-        f: impl FnOnce(&mut Self) -> T,\n-    ) -> (&'hir hir::Generics<'hir>, T) {\n-        match itctx {\n-            ImplTraitContext::Universal(..) => {}\n-            _ => {\n-                debug_assert!(self.impl_trait_defs.is_empty());\n-                debug_assert!(self.impl_trait_bounds.is_empty());\n-            }\n-        }\n-\n-        let mut lowered_generics = self.lower_generics_mut(generics, itctx);\n-        let res = f(self);\n-\n-        let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);\n-        let impl_trait_defs = std::mem::take(&mut self.impl_trait_defs);\n-        lowered_generics.params.extend(\n-            extra_lifetimes\n-                .into_iter()\n-                .filter_map(|(ident, node_id, res)| {\n-                    self.lifetime_res_to_generic_param(ident, node_id, res)\n-                })\n-                .chain(impl_trait_defs.into_iter()),\n-        );\n-        let impl_trait_bounds = std::mem::take(&mut self.impl_trait_bounds);\n-        lowered_generics.predicates.extend(impl_trait_bounds.into_iter());\n-\n-        let lowered_generics = lowered_generics.into_generics(self.arena);\n-        (lowered_generics, res)\n-    }\n-\n     /// Setup lifetime capture for and impl-trait.\n     /// The captures will be added to `captures`.\n     fn while_capturing_lifetimes<T>("}]}