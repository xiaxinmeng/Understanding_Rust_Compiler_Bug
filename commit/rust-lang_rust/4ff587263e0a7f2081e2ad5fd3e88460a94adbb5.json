{"sha": "4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "node_id": "C_kwDOAAsO6NoAKDRmZjU4NzI2M2UwYTdmMjA4MWUyYWQ1ZmQzZTg4NDYwYTk0YWRiYjU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-12T03:13:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-24T17:53:35Z"}, "message": "Note binding obligation causes for const equate errors", "tree": {"sha": "77dc6690fee5514f4fdc20a9ea474b8a39bd6d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77dc6690fee5514f4fdc20a9ea474b8a39bd6d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "html_url": "https://github.com/rust-lang/rust/commit/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e976262a1598fa48cd08fa0e429f05299d1ae3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e976262a1598fa48cd08fa0e429f05299d1ae3e", "html_url": "https://github.com/rust-lang/rust/commit/4e976262a1598fa48cd08fa0e429f05299d1ae3e"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "ab7e5ba3a1067f56cae54bf1e87489231a80114b", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "patch": "@@ -469,6 +469,13 @@ impl<'tcx> ObligationCauseCode<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn peel_match_impls(&self) -> &Self {\n+        match self {\n+            MatchImpl(cause, _) => cause.code(),\n+            _ => self,\n+        }\n+    }\n }\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "1f031d33e0653cb9aa38eaa9d69c8021c894f130", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "patch": "@@ -1506,13 +1506,26 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 .emit();\n             }\n             FulfillmentErrorCode::CodeConstEquateError(ref expected_found, ref err) => {\n-                self.report_mismatched_consts(\n+                let mut diag = self.report_mismatched_consts(\n                     &error.obligation.cause,\n                     expected_found.expected,\n                     expected_found.found,\n                     err.clone(),\n-                )\n-                .emit();\n+                );\n+                let code = error.obligation.cause.code().peel_derives().peel_match_impls();\n+                if let ObligationCauseCode::BindingObligation(..)\n+                | ObligationCauseCode::ItemObligation(..) = code\n+                {\n+                    self.note_obligation_cause_code(\n+                        &mut diag,\n+                        &error.obligation.predicate,\n+                        error.obligation.param_env,\n+                        code,\n+                        &mut vec![],\n+                        &mut Default::default(),\n+                    );\n+                }\n+                diag.emit();\n             }\n         }\n     }"}, {"sha": "ada1050d35f35a3f6a26a78fab0127f7b456f2f6", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "patch": "@@ -24,6 +24,11 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |\n    = note: expected constant `{ N as u128 }`\n               found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:20:19\n@@ -51,6 +56,11 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |\n    = note: expected constant `{ N as _ }`\n               found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:23:5\n@@ -60,6 +70,11 @@ LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n    |\n    = note: expected constant `12`\n               found constant `13`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:25:5\n@@ -69,6 +84,11 @@ LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n    |\n    = note: expected constant `13`\n               found constant `14`\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:35:19\n@@ -96,6 +116,11 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |\n    = note: expected constant `{ N as u128 }`\n               found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:38:19\n@@ -123,6 +148,11 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |\n    = note: expected constant `{ N as _ }`\n               found constant `{ O as u128 }`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:41:5\n@@ -132,6 +162,11 @@ LL |     assert_impl::<HasCastInTraitImpl<13, { 12 as u128 }>>();\n    |\n    = note: expected constant `12`\n               found constant `13`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:43:5\n@@ -141,6 +176,11 @@ LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n    |\n    = note: expected constant `13`\n               found constant `14`\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "f2fddfbfbb52adbdd1bef8be46edf9dc43616601", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.full.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr?ref=4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "patch": "@@ -6,6 +6,13 @@ LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |\n    = note: expected constant `false`\n               found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                       ^^^^^^ required by this bound in `Arr`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-72819-generic-in-const-eval.rs:20:32\n@@ -15,6 +22,13 @@ LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |\n    = note: expected constant `false`\n               found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                       ^^^^^^ required by this bound in `Arr`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7670032e5b758dc86f23505b457ab6b1f8f20136", "filename": "src/test/ui/const-generics/issues/issue-73260.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr?ref=4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "patch": "@@ -6,6 +6,14 @@ LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |\n    = note: expected constant `false`\n               found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-73260.rs:6:37\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where\n+LL |     Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                     ^^^^^^ required by this bound in `Arr`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-73260.rs:16:32\n@@ -15,6 +23,14 @@ LL |     let x: Arr<{usize::MAX}> = Arr {};\n    |\n    = note: expected constant `false`\n               found constant `true`\n+note: required by a bound in `Arr`\n+  --> $DIR/issue-73260.rs:6:37\n+   |\n+LL | struct Arr<const N: usize>\n+   |        --- required by a bound in this\n+LL | where\n+LL |     Assert::<{N < usize::MAX / 2}>: IsTrue,\n+   |                                     ^^^^^^ required by this bound in `Arr`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "02b48b55f8b38e364b499d01af21e64ab0ea4e18", "filename": "src/test/ui/const-generics/issues/issue-79674.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ff587263e0a7f2081e2ad5fd3e88460a94adbb5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr?ref=4ff587263e0a7f2081e2ad5fd3e88460a94adbb5", "patch": "@@ -6,6 +6,14 @@ LL |     requires_distinct(\"str\", 12);\n    |\n    = note: expected constant `true`\n               found constant `false`\n+note: required by a bound in `requires_distinct`\n+  --> $DIR/issue-79674.rs:23:37\n+   |\n+LL | fn requires_distinct<A, B>(_a: A, _b: B) where\n+   |    ----------------- required by a bound in this\n+LL |     A: MiniTypeId, B: MiniTypeId,\n+LL |     Lift<{is_same_type::<A, B>()}>: IsFalse {}\n+   |                                     ^^^^^^^ required by this bound in `requires_distinct`\n \n error: aborting due to previous error\n "}]}