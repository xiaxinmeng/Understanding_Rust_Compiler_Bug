{"sha": "be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlM2FhMDY4OWU3YzVlNThiMWQ4ZGFhMmUyYjJiYTkwZDVlY2NjNDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-06T18:21:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-06T18:21:30Z"}, "message": "Revert \"Use jemalloc\"\n\nThis reverts commit d194c707c82198864cd1493a9e104f904d354e16.\n\nIt fails the bootstrap test as jemalloc_sys is not built", "tree": {"sha": "3eaa4a5cc31bef37e7dbbd91882783a67880cc5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eaa4a5cc31bef37e7dbbd91882783a67880cc5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46", "html_url": "https://github.com/rust-lang/rust/commit/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76bb1f173f35c4d0fa4de6c7d4651a1367e61bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/76bb1f173f35c4d0fa4de6c7d4651a1367e61bdb", "html_url": "https://github.com/rust-lang/rust/commit/76bb1f173f35c4d0fa4de6c7d4651a1367e61bdb"}], "stats": {"total": 45, "additions": 1, "deletions": 44}, "files": [{"sha": "9861af1f8eae2cfb384cbaee7ad709937835465a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46", "patch": "@@ -35,10 +35,9 @@ smallvec = \"1.6.1\"\n #gimli = { path = \"../\" }\n \n [features]\n-default = [\"jit\", \"inline_asm\", \"jemalloc\"]\n+default = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n-jemalloc = []\n \n [profile.dev]\n # By compiling dependencies with optimizations, performing tests gets much faster."}, {"sha": "983839d48d2d756ab0bbf5760668eac6854d4329", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=be3aa0689e7c5e58b1d8daa2e2b2ba90d5eccc46", "patch": "@@ -1,7 +1,5 @@\n #![feature(rustc_private)]\n \n-#[cfg(feature = \"jemalloc\")]\n-extern crate jemalloc_sys;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_interface;\n@@ -35,46 +33,6 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n }\n \n fn main() {\n-    // Pull in jemalloc when enabled.\n-    //\n-    // Note that we're pulling in a static copy of jemalloc which means that to\n-    // pull it in we need to actually reference its symbols for it to get\n-    // linked. The two crates we link to here, std and rustc_driver, are both\n-    // dynamic libraries. That means to pull in jemalloc we need to actually\n-    // reference allocation symbols one way or another (as this file is the only\n-    // object code in the rustc executable).\n-    #[cfg(feature = \"jemalloc\")]\n-    {\n-        use std::os::raw::{c_int, c_void};\n-        #[used]\n-        static _F1: unsafe extern \"C\" fn(usize, usize) -> *mut c_void = jemalloc_sys::calloc;\n-        #[used]\n-        static _F2: unsafe extern \"C\" fn(*mut *mut c_void, usize, usize) -> c_int =\n-            jemalloc_sys::posix_memalign;\n-        #[used]\n-        static _F3: unsafe extern \"C\" fn(usize, usize) -> *mut c_void = jemalloc_sys::aligned_alloc;\n-        #[used]\n-        static _F4: unsafe extern \"C\" fn(usize) -> *mut c_void = jemalloc_sys::malloc;\n-        #[used]\n-        static _F5: unsafe extern \"C\" fn(*mut c_void, usize) -> *mut c_void = jemalloc_sys::realloc;\n-        #[used]\n-        static _F6: unsafe extern \"C\" fn(*mut c_void) = jemalloc_sys::free;\n-\n-        // On OSX, jemalloc doesn't directly override malloc/free, but instead\n-        // registers itself with the allocator's zone APIs in a ctor. However,\n-        // the linker doesn't seem to consider ctors as \"used\" when statically\n-        // linking, so we need to explicitly depend on the function.\n-        #[cfg(target_os = \"macos\")]\n-        {\n-            extern \"C\" {\n-                fn _rjem_je_zone_register();\n-            }\n-\n-            #[used]\n-            static _F7: unsafe extern \"C\" fn() = _rjem_je_zone_register;\n-        }\n-    }\n-\n     let start_time = std::time::Instant::now();\n     let start_rss = get_resident_set_size();\n     rustc_driver::init_rustc_env_logger();"}]}