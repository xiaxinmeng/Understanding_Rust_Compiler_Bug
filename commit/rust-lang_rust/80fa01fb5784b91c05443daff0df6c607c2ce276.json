{"sha": "80fa01fb5784b91c05443daff0df6c607c2ce276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZmEwMWZiNTc4NGI5MWMwNTQ0M2RhZmYwZGY2YzYwN2MyY2UyNzY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-09T20:22:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-09T20:53:12Z"}, "message": "rustc: Perform type parameter substitutions in static_size_of_tag()", "tree": {"sha": "76ccc90dabfd6a4de8d75d3c1b905014b3e50be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76ccc90dabfd6a4de8d75d3c1b905014b3e50be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80fa01fb5784b91c05443daff0df6c607c2ce276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80fa01fb5784b91c05443daff0df6c607c2ce276", "html_url": "https://github.com/rust-lang/rust/commit/80fa01fb5784b91c05443daff0df6c607c2ce276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80fa01fb5784b91c05443daff0df6c607c2ce276/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcd195bb4ca47d4b3c7dfd3e6c14dc5771e139cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd195bb4ca47d4b3c7dfd3e6c14dc5771e139cc", "html_url": "https://github.com/rust-lang/rust/commit/fcd195bb4ca47d4b3c7dfd3e6c14dc5771e139cc"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "ae9e408bf10e353ce54613e0da1b40cc9ff7e50c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80fa01fb5784b91c05443daff0df6c607c2ce276/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80fa01fb5784b91c05443daff0df6c607c2ce276/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=80fa01fb5784b91c05443daff0df6c607c2ce276", "patch": "@@ -923,6 +923,18 @@ fn align_of(@block_ctxt cx, @ty.t t) -> result {\n     ret dynamic_align_of(cx, t);\n }\n \n+// Returns the type parameters associated with the tag with the given ID.\n+fn ty_params_of_tag(@crate_ctxt cx, &ast.def_id tid) -> vec[ast.ty_param] {\n+    alt (cx.items.get(tid).node) {\n+        case (ast.item_tag(_, _, ?tps, _)) { ret tps; }\n+        case (_) {\n+            log \"ty_params_of_tag(): tag ID doesn't actually refer to a \" +\n+                \"tag item\";\n+            fail;\n+        }\n+    }\n+}\n+\n // Computes the size of the data part of a non-dynamically-sized tag.\n fn static_size_of_tag(@crate_ctxt cx, @ty.t t) -> uint {\n     if (ty.type_has_dynamic_size(t)) {\n@@ -947,13 +959,19 @@ fn static_size_of_tag(@crate_ctxt cx, @ty.t t) -> uint {\n         }\n     }\n \n+    // Pull the type parameters out of the corresponding tag item.\n+    let vec[ast.ty_param] ty_params = ty_params_of_tag(cx, tid);\n+\n     // Compute max(variant sizes).\n     auto max_size = 0u;\n     auto variants = tag_variants(cx, tid);\n     for (ast.variant variant in variants) {\n         let vec[@ty.t] tys = variant_types(cx, variant);\n         auto tup_ty = ty.plain_ty(ty.ty_tup(tys));\n \n+        // Perform any type parameter substitutions.\n+        tup_ty = ty.substitute_ty_params(ty_params, subtys, tup_ty);\n+\n         // Here we possibly do a recursive call.\n         auto this_size = llsize_of_real(cx, type_of(cx, tup_ty));\n "}]}