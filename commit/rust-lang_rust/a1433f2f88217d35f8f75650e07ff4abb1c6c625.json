{"sha": "a1433f2f88217d35f8f75650e07ff4abb1c6c625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDMzZjJmODgyMTdkMzVmOGY3NTY1MGUwN2ZmNGFiYjFjNmM2MjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-29T19:56:37Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-30T17:29:38Z"}, "message": "syntax: remove overloading of fold_lifetime{,_def}{,s}.", "tree": {"sha": "53c028bbeb9c7d3c548ce5eca1d50f9243c7f50b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c028bbeb9c7d3c548ce5eca1d50f9243c7f50b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1433f2f88217d35f8f75650e07ff4abb1c6c625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1433f2f88217d35f8f75650e07ff4abb1c6c625", "html_url": "https://github.com/rust-lang/rust/commit/a1433f2f88217d35f8f75650e07ff4abb1c6c625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1433f2f88217d35f8f75650e07ff4abb1c6c625/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d09399c1289a20b1c258153f005f2604f9ec46", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d09399c1289a20b1c258153f005f2604f9ec46", "html_url": "https://github.com/rust-lang/rust/commit/74d09399c1289a20b1c258153f005f2604f9ec46"}], "stats": {"total": 74, "additions": 20, "deletions": 54}, "files": [{"sha": "2f209b347a4b6f925e2d2337a85677fd89ea6a61", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 20, "deletions": 54, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a1433f2f88217d35f8f75650e07ff4abb1c6c625/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1433f2f88217d35f8f75650e07ff4abb1c6c625/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a1433f2f88217d35f8f75650e07ff4abb1c6c625", "patch": "@@ -205,14 +205,6 @@ pub trait Folder : Sized {\n         noop_fold_label(label, self)\n     }\n \n-    fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime {\n-        noop_fold_lifetime(l, self)\n-    }\n-\n-    fn fold_lifetime_def(&mut self, l: LifetimeDef) -> LifetimeDef {\n-        noop_fold_lifetime_def(l, self)\n-    }\n-\n     fn fold_attribute(&mut self, at: Attribute) -> Option<Attribute> {\n         noop_fold_attribute(at, self)\n     }\n@@ -237,14 +229,6 @@ pub trait Folder : Sized {\n         noop_fold_variant_data(vdata, self)\n     }\n \n-    fn fold_lifetimes(&mut self, lts: Vec<Lifetime>) -> Vec<Lifetime> {\n-        noop_fold_lifetimes(lts, self)\n-    }\n-\n-    fn fold_lifetime_defs(&mut self, lts: Vec<LifetimeDef>) -> Vec<LifetimeDef> {\n-        noop_fold_lifetime_defs(lts, self)\n-    }\n-\n     fn fold_ty_param(&mut self, tp: TyParam) -> TyParam {\n         noop_fold_ty_param(tp, self)\n     }\n@@ -273,10 +257,6 @@ pub trait Folder : Sized {\n         noop_fold_interpolated(nt, self)\n     }\n \n-    fn fold_opt_lifetime(&mut self, o_lt: Option<Lifetime>) -> Option<Lifetime> {\n-        noop_fold_opt_lifetime(o_lt, self)\n-    }\n-\n     fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>)\n                        -> Option<TyParamBounds> {\n         noop_fold_opt_bounds(b, self)\n@@ -376,7 +356,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::Slice(ty) => TyKind::Slice(fld.fold_ty(ty)),\n             TyKind::Ptr(mt) => TyKind::Ptr(fld.fold_mt(mt)),\n             TyKind::Rptr(region, mt) => {\n-                TyKind::Rptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n+                TyKind::Rptr(region.map(|lt| noop_fold_lifetime(lt, fld)), fld.fold_mt(mt))\n             }\n             TyKind::BareFn(f) => {\n                 TyKind::BareFn(f.map(|BareFnTy {generic_params, unsafety, abi, decl}| BareFnTy {\n@@ -478,7 +458,7 @@ pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedP\n                                                            -> AngleBracketedParameterData\n {\n     let AngleBracketedParameterData { lifetimes, types, bindings, span } = data;\n-    AngleBracketedParameterData { lifetimes: fld.fold_lifetimes(lifetimes),\n+    AngleBracketedParameterData { lifetimes: lifetimes.move_map(|l| noop_fold_lifetime(l, fld)),\n                                   types: types.move_map(|ty| fld.fold_ty(ty)),\n                                   bindings: bindings.move_map(|b| fld.fold_ty_binding(b)),\n                                   span: fld.new_span(span) }\n@@ -680,7 +660,7 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n                                    where T: Folder {\n     match tpb {\n         TraitTyParamBound(ty, modifier) => TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier),\n-        RegionTyParamBound(lifetime) => RegionTyParamBound(fld.fold_lifetime(lifetime)),\n+        RegionTyParamBound(lifetime) => RegionTyParamBound(noop_fold_lifetime(lifetime, fld)),\n     }\n }\n \n@@ -701,7 +681,20 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n \n pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> GenericParam {\n     match param {\n-        GenericParam::Lifetime(l) => GenericParam::Lifetime(fld.fold_lifetime_def(l)),\n+        GenericParam::Lifetime(l) => {\n+            let attrs: Vec<_> = l.attrs.into();\n+            GenericParam::Lifetime(LifetimeDef {\n+                attrs: attrs.into_iter()\n+                    .flat_map(|x| fld.fold_attribute(x).into_iter())\n+                    .collect::<Vec<_>>()\n+                    .into(),\n+                lifetime: Lifetime {\n+                    id: fld.new_id(l.lifetime.id),\n+                    ident: fld.fold_ident(l.lifetime.ident),\n+                },\n+                bounds: l.bounds.move_map(|l| noop_fold_lifetime(l, fld)),\n+            })\n+        }\n         GenericParam::Type(t) => GenericParam::Type(fld.fold_ty_param(t)),\n     }\n }\n@@ -719,40 +712,13 @@ pub fn noop_fold_label<T: Folder>(label: Label, fld: &mut T) -> Label {\n     }\n }\n \n-pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n+fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n     Lifetime {\n         id: fld.new_id(l.id),\n         ident: fld.fold_ident(l.ident),\n     }\n }\n \n-pub fn noop_fold_lifetime_def<T: Folder>(l: LifetimeDef, fld: &mut T)\n-                                         -> LifetimeDef {\n-    let attrs: Vec<_> = l.attrs.into();\n-    LifetimeDef {\n-        attrs: attrs.into_iter()\n-            .flat_map(|x| fld.fold_attribute(x).into_iter())\n-            .collect::<Vec<_>>()\n-            .into(),\n-        lifetime: fld.fold_lifetime(l.lifetime),\n-        bounds: fld.fold_lifetimes(l.bounds),\n-    }\n-}\n-\n-pub fn noop_fold_lifetimes<T: Folder>(lts: Vec<Lifetime>, fld: &mut T) -> Vec<Lifetime> {\n-    lts.move_map(|l| fld.fold_lifetime(l))\n-}\n-\n-pub fn noop_fold_lifetime_defs<T: Folder>(lts: Vec<LifetimeDef>, fld: &mut T)\n-                                          -> Vec<LifetimeDef> {\n-    lts.move_map(|l| fld.fold_lifetime_def(l))\n-}\n-\n-pub fn noop_fold_opt_lifetime<T: Folder>(o_lt: Option<Lifetime>, fld: &mut T)\n-                                         -> Option<Lifetime> {\n-    o_lt.map(|lt| fld.fold_lifetime(lt))\n-}\n-\n pub fn noop_fold_generics<T: Folder>(Generics { params, where_clause, span }: Generics,\n                                      fld: &mut T) -> Generics {\n     Generics {\n@@ -796,8 +762,8 @@ pub fn noop_fold_where_predicate<T: Folder>(\n                                                                        span}) => {\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 span: fld.new_span(span),\n-                lifetime: fld.fold_lifetime(lifetime),\n-                bounds: bounds.move_map(|bound| fld.fold_lifetime(bound))\n+                lifetime: noop_fold_lifetime(lifetime, fld),\n+                bounds: bounds.move_map(|bound| noop_fold_lifetime(bound, fld))\n             })\n         }\n         ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{id,"}]}