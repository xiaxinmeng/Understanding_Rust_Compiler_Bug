{"sha": "02fb345964cead725bca5e9dea745210ed6c9c37", "node_id": "C_kwDOAAsO6NoAKDAyZmIzNDU5NjRjZWFkNzI1YmNhNWU5ZGVhNzQ1MjEwZWQ2YzljMzc", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-02T17:53:16Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-06T12:27:53Z"}, "message": "Suggest using block for `extern \"abi\" fn` with no body", "tree": {"sha": "ec014f1306620a9fc48c01074b7c3037465aef92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec014f1306620a9fc48c01074b7c3037465aef92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02fb345964cead725bca5e9dea745210ed6c9c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02fb345964cead725bca5e9dea745210ed6c9c37", "html_url": "https://github.com/rust-lang/rust/commit/02fb345964cead725bca5e9dea745210ed6c9c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02fb345964cead725bca5e9dea745210ed6c9c37/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ca2946e0663d772079bf6f3d07d70d97369068", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ca2946e0663d772079bf6f3d07d70d97369068", "html_url": "https://github.com/rust-lang/rust/commit/18ca2946e0663d772079bf6f3d07d70d97369068"}], "stats": {"total": 103, "additions": 92, "deletions": 11}, "files": [{"sha": "3942062656fa963cd22d0bb7ae1d5e48cf3c9013", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/02fb345964cead725bca5e9dea745210ed6c9c37/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fb345964cead725bca5e9dea745210ed6c9c37/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=02fb345964cead725bca5e9dea745210ed6c9c37", "patch": "@@ -13,7 +13,9 @@ use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n+use rustc_errors::{\n+    error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -476,22 +478,33 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn error_item_without_body(&self, sp: Span, ctx: &str, msg: &str, sugg: &str) {\n+        self.error_item_without_body_with_help(sp, ctx, msg, sugg, |_| ());\n+    }\n+\n+    fn error_item_without_body_with_help(\n+        &self,\n+        sp: Span,\n+        ctx: &str,\n+        msg: &str,\n+        sugg: &str,\n+        help: impl FnOnce(&mut DiagnosticBuilder<'_, ErrorGuaranteed>),\n+    ) {\n         let source_map = self.session.source_map();\n         let end = source_map.end_point(sp);\n         let replace_span = if source_map.span_to_snippet(end).map(|s| s == \";\").unwrap_or(false) {\n             end\n         } else {\n             sp.shrink_to_hi()\n         };\n-        self.err_handler()\n-            .struct_span_err(sp, msg)\n-            .span_suggestion(\n-                replace_span,\n-                &format!(\"provide a definition for the {}\", ctx),\n-                sugg,\n-                Applicability::HasPlaceholders,\n-            )\n-            .emit();\n+        let mut err = self.err_handler().struct_span_err(sp, msg);\n+        err.span_suggestion(\n+            replace_span,\n+            &format!(\"provide a definition for the {}\", ctx),\n+            sugg,\n+            Applicability::HasPlaceholders,\n+        );\n+        help(&mut err);\n+        err.emit();\n     }\n \n     fn check_impl_item_provided<T>(&self, sp: Span, body: &Option<T>, ctx: &str, sugg: &str) {\n@@ -1191,8 +1204,38 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";\n-                    self.error_item_without_body(item.span, \"function\", msg, \" { <body> }\");\n+                    let ext = sig.header.ext;\n+\n+                    let f = |e: &mut DiagnosticBuilder<'_, _>| {\n+                        if let Extern::Implicit(start_span) | Extern::Explicit(_, start_span) = &ext\n+                        {\n+                            let start_suggestion = if let Extern::Explicit(abi, _) = ext {\n+                                format!(\"extern \\\"{}\\\" {{\", abi.symbol_unescaped)\n+                            } else {\n+                                \"extern {\".to_owned()\n+                            };\n+\n+                            let end_suggestion = \" }\".to_owned();\n+                            let end_span = item.span.shrink_to_hi();\n+\n+                            e\n+                            .multipart_suggestion(\n+                                \"if you meant to declare an externally defined function, use an `extern` block\",\n+                                vec![(*start_span, start_suggestion), (end_span, end_suggestion)],\n+                                Applicability::MaybeIncorrect,\n+                             );\n+                        }\n+                    };\n+\n+                    self.error_item_without_body_with_help(\n+                        item.span,\n+                        \"function\",\n+                        msg,\n+                        \" { <body> }\",\n+                        f,\n+                    );\n                 }\n+\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 let kind ="}, {"sha": "d3bcafdef7b3cbf39945288ba8d28eeb5151ec9d", "filename": "src/test/ui/extern/not-in-block.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02fb345964cead725bca5e9dea745210ed6c9c37/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fb345964cead725bca5e9dea745210ed6c9c37/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.rs?ref=02fb345964cead725bca5e9dea745210ed6c9c37", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+\n+extern fn none_fn(x: bool) -> i32;\n+//~^ ERROR free function without a body\n+extern \"C\" fn c_fn(x: bool) -> i32;\n+//~^ ERROR free function without a body"}, {"sha": "2544949ab17a8066c446fa81bf68c6e23a310353", "filename": "src/test/ui/extern/not-in-block.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02fb345964cead725bca5e9dea745210ed6c9c37/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02fb345964cead725bca5e9dea745210ed6c9c37/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.stderr?ref=02fb345964cead725bca5e9dea745210ed6c9c37", "patch": "@@ -0,0 +1,32 @@\n+error: free function without a body\n+  --> $DIR/not-in-block.rs:3:1\n+   |\n+LL | extern fn none_fn(x: bool) -> i32;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: provide a definition for the function\n+   |\n+LL | extern fn none_fn(x: bool) -> i32 { <body> }\n+   |                                   ~~~~~~~~~~\n+help: if you meant to declare an externally defined function, use an `extern` block\n+   |\n+LL | extern { fn none_fn(x: bool) -> i32; }\n+   | ~~~~~~~~                             +\n+\n+error: free function without a body\n+  --> $DIR/not-in-block.rs:5:1\n+   |\n+LL | extern \"C\" fn c_fn(x: bool) -> i32;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: provide a definition for the function\n+   |\n+LL | extern \"C\" fn c_fn(x: bool) -> i32 { <body> }\n+   |                                    ~~~~~~~~~~\n+help: if you meant to declare an externally defined function, use an `extern` block\n+   |\n+LL | extern \"C\" { fn c_fn(x: bool) -> i32; }\n+   | ~~~~~~~~~~~~                          +\n+\n+error: aborting due to 2 previous errors\n+"}]}