{"sha": "531a68cea711be0b803799fd30cc6cca43bea449", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMWE2OGNlYTcxMWJlMGI4MDM3OTlmZDMwY2M2Y2NhNDNiZWE0NDk=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-12T22:39:36Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-07-13T05:51:30Z"}, "message": "Factor out suggest_ref_mut; use it in rustc_borrowck\n\nAlso teach rustc_borrowck not to show useless help messages like\n\"use a mutable reference instead: `x`\".", "tree": {"sha": "f623fe5b3494ba3b11921f49ce5805a958a0f4c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f623fe5b3494ba3b11921f49ce5805a958a0f4c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/531a68cea711be0b803799fd30cc6cca43bea449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/531a68cea711be0b803799fd30cc6cca43bea449", "html_url": "https://github.com/rust-lang/rust/commit/531a68cea711be0b803799fd30cc6cca43bea449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/531a68cea711be0b803799fd30cc6cca43bea449/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "323df7b5049f6026a5bed335e2d7bb1df89b47ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/323df7b5049f6026a5bed335e2d7bb1df89b47ef", "html_url": "https://github.com/rust-lang/rust/commit/323df7b5049f6026a5bed335e2d7bb1df89b47ef"}], "stats": {"total": 66, "additions": 27, "deletions": 39}, "files": [{"sha": "79b4382369217bfb72776c41c6cfd5c72e55ff1c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/531a68cea711be0b803799fd30cc6cca43bea449/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a68cea711be0b803799fd30cc6cca43bea449/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=531a68cea711be0b803799fd30cc6cca43bea449", "patch": "@@ -39,6 +39,7 @@ use rustc::middle::free_region::RegionRelations;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n+use rustc_mir::util::suggest_ref_mut;\n use rustc::util::nodemap::FxHashSet;\n \n use std::cell::RefCell;\n@@ -1206,21 +1207,17 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 self.note_immutable_local(db, error_node_id, node_id)\n             }\n             Some(ImmutabilityBlame::LocalDeref(node_id)) => {\n-                let let_span = self.tcx.hir.span(node_id);\n                 match self.local_binding_mode(node_id) {\n                     ty::BindByReference(..) => {\n-                        if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(let_span) {\n-                            let replace_str = if snippet.starts_with(\"ref \") {\n-                                snippet.replacen(\"ref \", \"ref mut \", 1)\n-                            } else {\n-                                snippet\n-                            };\n+                        let let_span = self.tcx.hir.span(node_id);\n+                        let suggestion = suggest_ref_mut(self.tcx, let_span);\n+                        if let Some((let_span, replace_str)) = suggestion {\n                             db.span_suggestion(\n                                 let_span,\n                                 \"use a mutable reference instead\",\n                                 replace_str,\n                             );\n-                        };\n+                        }\n                     }\n                     ty::BindByValue(..) => {\n                         if let (Some(local_ty), is_implicit_self) = self.local_ty(node_id) {"}, {"sha": "7078d77f3fb2b829d52a6b8acca4d831c509b9b1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/531a68cea711be0b803799fd30cc6cca43bea449/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a68cea711be0b803799fd30cc6cca43bea449/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=531a68cea711be0b803799fd30cc6cca43bea449", "patch": "@@ -29,8 +29,6 @@ use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::small_vec::SmallVec;\n \n-use core::unicode::property::Pattern_White_Space;\n-\n use std::rc::Rc;\n \n use syntax_pos::Span;\n@@ -46,6 +44,7 @@ use dataflow::{EverInitializedPlaces, MovingOutStatements};\n use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n use util::collect_writes::FindAssignments;\n+use util::suggest_ref_mut;\n \n use self::borrow_set::{BorrowData, BorrowSet};\n use self::flows::Flows;\n@@ -1861,7 +1860,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     ClearCrossCrate::Set(mir::BindingForm::Var(mir::VarBindingForm {\n                         binding_mode: ty::BindingMode::BindByReference(_),\n                         ..\n-                    })) => suggest_ref_mut(self.tcx, local_decl),\n+                    })) => suggest_ref_mut(self.tcx, local_decl.source_info.span),\n \n                     ClearCrossCrate::Clear => bug!(\"saw cleared local state\"),\n                 };\n@@ -1957,22 +1956,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             assert_eq!(ty_mut.mutbl, hir::MutImmutable);\n             (highlight_span, format!(\"&mut {}\", ty_mut.ty))\n         }\n-\n-        fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n-            tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-            local_decl: &mir::LocalDecl<'tcx>,\n-        ) -> Option<(Span, String)> {\n-            let hi_span = local_decl.source_info.span;\n-            let hi_src = tcx.sess.codemap().span_to_snippet(hi_span).unwrap();\n-            if hi_src.starts_with(\"ref\")\n-                && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n-            {\n-                let suggestion = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n-                Some((hi_span, suggestion))\n-            } else {\n-                None\n-            }\n-        }\n     }\n \n     /// Adds the place into the used mutable variables set"}, {"sha": "78e9dd23e83ae718387a9fa5bd1e47e2a50028e3", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/531a68cea711be0b803799fd30cc6cca43bea449/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a68cea711be0b803799fd30cc6cca43bea449/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=531a68cea711be0b803799fd30cc6cca43bea449", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::unicode::property::Pattern_White_Space;\n+use rustc::ty;\n+use syntax_pos::Span;\n+\n pub mod borrowck_errors;\n pub mod elaborate_drops;\n pub mod def_use;\n@@ -23,3 +27,19 @@ pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n pub use self::graphviz::{write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n+\n+/// If possible, suggest replacing `ref` with `ref mut`.\n+pub fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n+    tcx: ty::TyCtxt<'cx, 'gcx, 'tcx>,\n+    pattern_span: Span,\n+) -> Option<(Span, String)> {\n+    let hi_src = tcx.sess.codemap().span_to_snippet(pattern_span).unwrap();\n+    if hi_src.starts_with(\"ref\")\n+        && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n+    {\n+        let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n+        Some((pattern_span, replacement))\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "ad05de9f3575f739e9b820c655f9f93b11a14a31", "filename": "src/test/ui/rfc-2005-default-binding-mode/enum.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/531a68cea711be0b803799fd30cc6cca43bea449/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/531a68cea711be0b803799fd30cc6cca43bea449/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fenum.stderr?ref=531a68cea711be0b803799fd30cc6cca43bea449", "patch": "@@ -1,24 +1,18 @@\n error[E0594]: cannot assign to immutable borrowed content `*x`\n   --> $DIR/enum.rs:19:5\n    |\n-LL |     let Wrap(x) = &Wrap(3);\n-   |              - help: use a mutable reference instead: `x`\n LL |     *x += 1; //~ ERROR cannot assign to immutable\n    |     ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*x`\n   --> $DIR/enum.rs:23:9\n    |\n-LL |     if let Some(x) = &Some(3) {\n-   |                 - help: use a mutable reference instead: `x`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n    |         ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*x`\n   --> $DIR/enum.rs:29:9\n    |\n-LL |     while let Some(x) = &Some(3) {\n-   |                    - help: use a mutable reference instead: `x`\n LL |         *x += 1; //~ ERROR cannot assign to immutable\n    |         ^^^^^^^ cannot borrow as mutable\n "}, {"sha": "8da67a6b5ee6520abd8084b16b04386959f4146b", "filename": "src/test/ui/rfc-2005-default-binding-mode/explicit-mut.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/531a68cea711be0b803799fd30cc6cca43bea449/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/531a68cea711be0b803799fd30cc6cca43bea449/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fexplicit-mut.stderr?ref=531a68cea711be0b803799fd30cc6cca43bea449", "patch": "@@ -1,24 +1,18 @@\n error[E0594]: cannot assign to immutable borrowed content `*n`\n   --> $DIR/explicit-mut.rs:17:13\n    |\n-LL |         Some(n) => {\n-   |              - help: use a mutable reference instead: `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*n`\n   --> $DIR/explicit-mut.rs:25:13\n    |\n-LL |         Some(n) => {\n-   |              - help: use a mutable reference instead: `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content `*n`\n   --> $DIR/explicit-mut.rs:33:13\n    |\n-LL |         Some(n) => {\n-   |              - help: use a mutable reference instead: `n`\n LL |             *n += 1; //~ ERROR cannot assign to immutable\n    |             ^^^^^^^ cannot borrow as mutable\n "}]}