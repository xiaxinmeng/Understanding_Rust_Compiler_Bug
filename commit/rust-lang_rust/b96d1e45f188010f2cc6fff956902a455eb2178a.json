{"sha": "b96d1e45f188010f2cc6fff956902a455eb2178a", "node_id": "C_kwDOAAsO6NoAKGI5NmQxZTQ1ZjE4ODAxMGYyY2M2ZmZmOTU2OTAyYTQ1NWViMjE3OGE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-03T21:06:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-05T14:09:41Z"}, "message": "change ptr::swap methods to do untyped copies", "tree": {"sha": "38ce8414a556f123adbc27fe7bc21c0fdafa7e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ce8414a556f123adbc27fe7bc21c0fdafa7e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96d1e45f188010f2cc6fff956902a455eb2178a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96d1e45f188010f2cc6fff956902a455eb2178a", "html_url": "https://github.com/rust-lang/rust/commit/b96d1e45f188010f2cc6fff956902a455eb2178a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96d1e45f188010f2cc6fff956902a455eb2178a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4322a785cc99ea5fc81dd7f5fc8ba7f7a64b08ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4322a785cc99ea5fc81dd7f5fc8ba7f7a64b08ef", "html_url": "https://github.com/rust-lang/rust/commit/4322a785cc99ea5fc81dd7f5fc8ba7f7a64b08ef"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "3b2b7ba8531cad65909cc0a63df6f38fd6e38150", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b96d1e45f188010f2cc6fff956902a455eb2178a/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96d1e45f188010f2cc6fff956902a455eb2178a/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=b96d1e45f188010f2cc6fff956902a455eb2178a", "patch": "@@ -905,15 +905,15 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n             if mem::align_of::<T>() >= mem::align_of::<$ChunkTy>()\n                 && mem::size_of::<T>() % mem::size_of::<$ChunkTy>() == 0\n             {\n-                let x: *mut MaybeUninit<$ChunkTy> = x.cast();\n-                let y: *mut MaybeUninit<$ChunkTy> = y.cast();\n+                let x: *mut $ChunkTy = x.cast();\n+                let y: *mut $ChunkTy = y.cast();\n                 let count = count * (mem::size_of::<T>() / mem::size_of::<$ChunkTy>());\n                 // SAFETY: these are the same bytes that the caller promised were\n                 // ok, just typed as `MaybeUninit<ChunkTy>`s instead of as `T`s.\n                 // The `if` condition above ensures that we're not violating\n                 // alignment requirements, and that the division is exact so\n                 // that we don't lose any bytes off the end.\n-                return unsafe { swap_nonoverlapping_simple(x, y, count) };\n+                return unsafe { swap_nonoverlapping_simple_untyped(x, y, count) };\n             }\n         };\n     }\n@@ -946,7 +946,7 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     }\n \n     // SAFETY: Same preconditions as this function\n-    unsafe { swap_nonoverlapping_simple(x, y, count) }\n+    unsafe { swap_nonoverlapping_simple_untyped(x, y, count) }\n }\n \n /// Same behaviour and safety conditions as [`swap_nonoverlapping`]\n@@ -955,16 +955,16 @@ pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n /// `swap_nonoverlapping` tries to use) so no need to manually SIMD it.\n #[inline]\n #[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n-const unsafe fn swap_nonoverlapping_simple<T>(x: *mut T, y: *mut T, count: usize) {\n+const unsafe fn swap_nonoverlapping_simple_untyped<T>(x: *mut T, y: *mut T, count: usize) {\n+    let x = x.cast::<MaybeUninit<T>>();\n+    let y = y.cast::<MaybeUninit<T>>();\n     let mut i = 0;\n     while i < count {\n-        let x: &mut T =\n-            // SAFETY: By precondition, `i` is in-bounds because it's below `n`\n-            unsafe { &mut *x.add(i) };\n-        let y: &mut T =\n-            // SAFETY: By precondition, `i` is in-bounds because it's below `n`\n-            // and it's distinct from `x` since the ranges are non-overlapping\n-            unsafe { &mut *y.add(i) };\n+        // SAFETY: By precondition, `i` is in-bounds because it's below `n`\n+        let x = unsafe { &mut *x.add(i) };\n+        // SAFETY: By precondition, `i` is in-bounds because it's below `n`\n+        // and it's distinct from `x` since the ranges are non-overlapping\n+        let y = unsafe { &mut *y.add(i) };\n         mem::swap_simple(x, y);\n \n         i += 1;"}, {"sha": "082d438128e2023ebd3f10e8d5e03a9416af3986", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b96d1e45f188010f2cc6fff956902a455eb2178a/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96d1e45f188010f2cc6fff956902a455eb2178a/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=b96d1e45f188010f2cc6fff956902a455eb2178a", "patch": "@@ -783,6 +783,31 @@ fn nonnull_tagged_pointer_with_provenance() {\n     }\n }\n \n+#[test]\n+fn swap_copy_untyped() {\n+    // We call `{swap,copy}{,_nonoverlapping}` at `bool` type on data that is not a valid bool.\n+    // These should all do untyped copies, so this should work fine.\n+    let mut x = 5u8;\n+    let mut y = 6u8;\n+\n+    let ptr1 = &mut x as *mut u8 as *mut bool;\n+    let ptr2 = &mut y as *mut u8 as *mut bool;\n+\n+    unsafe {\n+        ptr::swap(ptr1, ptr2);\n+        ptr::swap_nonoverlapping(ptr1, ptr2, 1);\n+    }\n+    assert_eq!(x, 5);\n+    assert_eq!(y, 6);\n+\n+    unsafe {\n+        ptr::copy(ptr1, ptr2, 1);\n+        ptr::copy_nonoverlapping(ptr1, ptr2, 1);\n+    }\n+    assert_eq!(x, 5);\n+    assert_eq!(y, 5);\n+}\n+\n #[test]\n fn test_const_copy() {\n     const {"}]}