{"sha": "edadc7ccdda644ef8149869d2f24018a1dac202a", "node_id": "C_kwDOAAsO6NoAKGVkYWRjN2NjZGRhNjQ0ZWY4MTQ5ODY5ZDJmMjQwMThhMWRhYzIwMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T14:15:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T14:15:29Z"}, "message": "Auto merge of #102519 - Alexendoo:format-args-macro-str, r=m-ou-se\n\nFix `format_args` capture for macro expanded format strings\n\nSince #100996 `format_args` capture for macro expanded strings aren't prevented when the span of the expansion points to a string literal, e.g.\n\n```rust\n// not a terribly realistic example, but also happens for proc_macros that set\n// the span of the output to an input str literal, such as indoc\nmacro_rules! x {\n    ($e:expr) => { $e }\n}\n\nfn main() {\n    let a = 1;\n    println!(x!(\"{a}\"));\n}\n```\n\nThe tests didn't catch it as the span of `concat!()` points to the macro invocation\n\nr? `@m-ou-se`", "tree": {"sha": "f8f2788724ae71262ba2c85c6c1625dc3f0cfa36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f2788724ae71262ba2c85c6c1625dc3f0cfa36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edadc7ccdda644ef8149869d2f24018a1dac202a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edadc7ccdda644ef8149869d2f24018a1dac202a", "html_url": "https://github.com/rust-lang/rust/commit/edadc7ccdda644ef8149869d2f24018a1dac202a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edadc7ccdda644ef8149869d2f24018a1dac202a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "html_url": "https://github.com/rust-lang/rust/commit/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1"}, {"sha": "71db0dd918424accf32104d8b780079105a7ac30", "url": "https://api.github.com/repos/rust-lang/rust/commits/71db0dd918424accf32104d8b780079105a7ac30", "html_url": "https://github.com/rust-lang/rust/commit/71db0dd918424accf32104d8b780079105a7ac30"}], "stats": {"total": 128, "additions": 111, "deletions": 17}, "files": [{"sha": "8b07c110663572175c42f3da08ef5740f1ff639d", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edadc7ccdda644ef8149869d2f24018a1dac202a/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edadc7ccdda644ef8149869d2f24018a1dac202a/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=edadc7ccdda644ef8149869d2f24018a1dac202a", "patch": "@@ -159,7 +159,7 @@ pub fn make_format_args(\n     append_newline: bool,\n ) -> Result<FormatArgs, ()> {\n     let msg = \"format argument must be a string literal\";\n-    let fmt_span = efmt.span;\n+    let unexpanded_fmt_span = efmt.span;\n     let (fmt_str, fmt_style, fmt_span) = match expr_to_spanned_string(ecx, efmt, msg) {\n         Ok(mut fmt) if append_newline => {\n             fmt.0 = Symbol::intern(&format!(\"{}\\n\", fmt.0));\n@@ -174,7 +174,7 @@ pub fn make_format_args(\n                 };\n                 if !suggested {\n                     err.span_suggestion(\n-                        fmt_span.shrink_to_lo(),\n+                        unexpanded_fmt_span.shrink_to_lo(),\n                         \"you might be missing a string literal to format with\",\n                         format!(\"\\\"{}\\\", \", sugg_fmt),\n                         Applicability::MaybeIncorrect,\n@@ -192,7 +192,7 @@ pub fn make_format_args(\n     };\n \n     let fmt_str = fmt_str.as_str(); // for the suggestions below\n-    let fmt_snippet = ecx.source_map().span_to_snippet(fmt_span).ok();\n+    let fmt_snippet = ecx.source_map().span_to_snippet(unexpanded_fmt_span).ok();\n     let mut parser = parse::Parser::new(\n         fmt_str,\n         str_style,"}, {"sha": "e44a84776bc696c01511e35fccf4b8efa2b682c4", "filename": "src/test/ui/fmt/auxiliary/format-string-proc-macro.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs?ref=edadc7ccdda644ef8149869d2f24018a1dac202a", "patch": "@@ -0,0 +1,28 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Literal, Span, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn foo_with_input_span(input: TokenStream) -> TokenStream {\n+    let span = input.into_iter().next().unwrap().span();\n+\n+    let mut lit = Literal::string(\"{foo}\");\n+    lit.set_span(span);\n+\n+    TokenStream::from(TokenTree::Literal(lit))\n+}\n+\n+#[proc_macro]\n+pub fn err_with_input_span(input: TokenStream) -> TokenStream {\n+    let span = input.into_iter().next().unwrap().span();\n+\n+    let mut lit = Literal::string(\"         }\");\n+    lit.set_span(span);\n+\n+    TokenStream::from(TokenTree::Literal(lit))\n+}"}, {"sha": "b04f80ba4061b40b290cca18dded4f530ce9d27f", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs?ref=edadc7ccdda644ef8149869d2f24018a1dac202a", "patch": "@@ -1,4 +1,22 @@\n+// aux-build:format-string-proc-macro.rs\n+\n+#[macro_use]\n+extern crate format_string_proc_macro;\n+\n+macro_rules! def_site {\n+    () => { \"{foo}\" } //~ ERROR: there is no argument named `foo`\n+}\n+\n+macro_rules! call_site {\n+    ($fmt:literal) => { $fmt }\n+}\n+\n fn main() {\n     format!(concat!(\"{foo}\"));         //~ ERROR: there is no argument named `foo`\n     format!(concat!(\"{ba\", \"r} {}\"), 1);     //~ ERROR: there is no argument named `bar`\n+\n+    format!(def_site!());\n+    format!(call_site!(\"{foo}\")); //~ ERROR: there is no argument named `foo`\n+\n+    format!(foo_with_input_span!(\"\")); //~ ERROR: there is no argument named `foo`\n }"}, {"sha": "1b5fbd2af34d976af9648fcd949fb0b28ecba38b", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.stderr", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr?ref=edadc7ccdda644ef8149869d2f24018a1dac202a", "patch": "@@ -1,5 +1,5 @@\n error: there is no argument named `foo`\n-  --> $DIR/format-args-capture-macro-hygiene.rs:2:13\n+  --> $DIR/format-args-capture-macro-hygiene.rs:15:13\n    |\n LL |     format!(concat!(\"{foo}\"));\n    |             ^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     format!(concat!(\"{foo}\"));\n    = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: there is no argument named `bar`\n-  --> $DIR/format-args-capture-macro-hygiene.rs:3:13\n+  --> $DIR/format-args-capture-macro-hygiene.rs:16:13\n    |\n LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,5 +18,36 @@ LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n    = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n    = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: there is no argument named `foo`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:7:13\n+   |\n+LL |     () => { \"{foo}\" }\n+   |             ^^^^^^^\n+...\n+LL |     format!(def_site!());\n+   |             ----------- in this macro invocation\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in the macro `def_site` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: there is no argument named `foo`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:19:24\n+   |\n+LL |     format!(call_site!(\"{foo}\"));\n+   |                        ^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+\n+error: there is no argument named `foo`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:21:34\n+   |\n+LL |     format!(foo_with_input_span!(\"\"));\n+   |                                  ^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "da46f40abcb97ffde2de181d4aca65fa1771b28e", "filename": "src/test/ui/fmt/format-concat-span.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-concat-span.stderr?ref=744e397d8855f7da87d70aa8d0bd9e0f5f0b51a1", "patch": "@@ -1,11 +0,0 @@\n-error: invalid format string: unmatched `}` found\n-  --> $DIR/format-concat-span.rs:13:13\n-   |\n-LL |     format!(concat!(\"abc}\"));\n-   |             ^^^^^^^^^^^^^^^ unmatched `}` in format string\n-   |\n-   = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-"}, {"sha": "4c716f08c718fd1d3e1e904ea62763064b4b5036", "filename": "src/test/ui/fmt/format-expanded-string.rs", "status": "renamed", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-expanded-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-expanded-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-expanded-string.rs?ref=edadc7ccdda644ef8149869d2f24018a1dac202a", "patch": "@@ -1,3 +1,9 @@\n+// aux-build:format-string-proc-macro.rs\n+\n+#[macro_use]\n+extern crate format_string_proc_macro;\n+\n+\n // If the format string is another macro invocation, rustc would previously\n // compute nonsensical spans, such as:\n //\n@@ -12,4 +18,7 @@\n fn main() {\n     format!(concat!(\"abc}\"));\n     //~^ ERROR: invalid format string: unmatched `}` found\n+\n+    format!(err_with_input_span!(\"\"));\n+    //~^ ERROR: invalid format string: unmatched `}` found\n }", "previous_filename": "src/test/ui/fmt/format-concat-span.rs"}, {"sha": "26ce7f26958f4a8b1ded30857562c4b5f88f658d", "filename": "src/test/ui/fmt/format-expanded-string.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-expanded-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/edadc7ccdda644ef8149869d2f24018a1dac202a/src%2Ftest%2Fui%2Ffmt%2Fformat-expanded-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-expanded-string.stderr?ref=edadc7ccdda644ef8149869d2f24018a1dac202a", "patch": "@@ -0,0 +1,19 @@\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-expanded-string.rs:19:13\n+   |\n+LL |     format!(concat!(\"abc}\"));\n+   |             ^^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-expanded-string.rs:22:34\n+   |\n+LL |     format!(err_with_input_span!(\"\"));\n+   |                                  ^^ unmatched `}` in format string\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+\n+error: aborting due to 2 previous errors\n+"}]}