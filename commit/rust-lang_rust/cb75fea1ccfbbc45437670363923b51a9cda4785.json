{"sha": "cb75fea1ccfbbc45437670363923b51a9cda4785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNzVmZWExY2NmYmJjNDU0Mzc2NzAzNjM5MjNiNTFhOWNkYTQ3ODU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-08T21:41:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-08T21:41:25Z"}, "message": "Rollup merge of #75266 - aticu:master, r=RalfJung\n\nAdd safety section to `NonNull::as_*` method docs\n\nThis basically adds the safety section of `*mut T::as_{ref,mut}` to the\nsame methods on `NonNull` with minor modifications to fit the\ndifferences.\n\nPart of #48929.", "tree": {"sha": "cd313a2e44c41891842e4df33e4b970e767cc81a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd313a2e44c41891842e4df33e4b970e767cc81a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb75fea1ccfbbc45437670363923b51a9cda4785", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLxwFCRBK7hj4Ov3rIwAAdHIIAID3akeJrbfuSO3Oh8+iECs8\nypS3SqSwODJ3bg4t2FlrzJw3sTEG0T+8tuqS/RS6bFvR4mA2VX0lCjYiix/HNpce\n6PtHDDGxUelt9iFffNAOiQOsBkP7LgW2185cdfBnu+j3AVVBmyJcQG0KnQkfINLF\nm9+9e1Ivgtp2iUdYeQX2qgY0jUNrxOlK19AU1EOX/UcqrkG2CFJQVplXH3TBGC9g\nNN4WZy1p2EBf8MKT0zPyG52kgXVi6jSGA9aN6VL0p1+DAh7/i6kU/TwP+bF6taH0\nMLLxWqwDG8RYXaFbs52Pn36Q6hJgIBHip9AmBlnT49ofC6k5uxfpoTYvRspM0oA=\n=kHBx\n-----END PGP SIGNATURE-----\n", "payload": "tree cd313a2e44c41891842e4df33e4b970e767cc81a\nparent cbc6914baaf2e6d6549294bd2021dc9eec83a215\nparent c2099b5f2812afaaf980ef2082ab5a5b3cb6a145\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596922885 +0900\ncommitter GitHub <noreply@github.com> 1596922885 +0900\n\nRollup merge of #75266 - aticu:master, r=RalfJung\n\nAdd safety section to `NonNull::as_*` method docs\n\nThis basically adds the safety section of `*mut T::as_{ref,mut}` to the\nsame methods on `NonNull` with minor modifications to fit the\ndifferences.\n\nPart of #48929.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb75fea1ccfbbc45437670363923b51a9cda4785", "html_url": "https://github.com/rust-lang/rust/commit/cb75fea1ccfbbc45437670363923b51a9cda4785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb75fea1ccfbbc45437670363923b51a9cda4785/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc6914baaf2e6d6549294bd2021dc9eec83a215", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6914baaf2e6d6549294bd2021dc9eec83a215", "html_url": "https://github.com/rust-lang/rust/commit/cbc6914baaf2e6d6549294bd2021dc9eec83a215"}, {"sha": "c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145", "html_url": "https://github.com/rust-lang/rust/commit/c2099b5f2812afaaf980ef2082ab5a5b3cb6a145"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "d876ab23653f367925b8f904ad1891705a080356", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb75fea1ccfbbc45437670363923b51a9cda4785/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb75fea1ccfbbc45437670363923b51a9cda4785/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=cb75fea1ccfbbc45437670363923b51a9cda4785", "patch": "@@ -117,6 +117,24 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// When calling this method, you have to ensure that all of the following is true:\n+    /// - `self` is properly aligned\n+    /// - `self` must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is, the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime of `self` does not necessarily reflect the actual\n+    /// lifetime of the data. *You* must enforce Rust's aliasing rules. In particular,\n+    /// for the duration of this lifetime, the memory the pointer points to must not\n+    /// get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub unsafe fn as_ref(&self) -> &T {\n@@ -130,6 +148,24 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// When calling this method, you have to ensure that all of the following is true:\n+    /// - `self` is properly aligned\n+    /// - `self` must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferenceable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n+    /// (The part about being initialized is not yet fully decided, but until\n+    /// it is the only safe approach is to ensure that they are indeed initialized.)\n+    ///\n+    /// Additionally, the lifetime of `self` does not necessarily reflect the actual\n+    /// lifetime of the data. *You* must enforce Rust's aliasing rules. In particular,\n+    /// for the duration of this lifetime, the memory this pointer points to must not\n+    /// get accessed (read or written) through any other pointer.\n+    ///\n+    /// [here]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub unsafe fn as_mut(&mut self) -> &mut T {"}]}