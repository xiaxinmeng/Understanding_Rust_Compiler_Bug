{"sha": "f66da5e7942954730fe19f8bba957759fa13984b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NmRhNWU3OTQyOTU0NzMwZmUxOWY4YmJhOTU3NzU5ZmExMzk4NGI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-16T21:15:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-07-16T21:19:26Z"}, "message": "Do not resolve inherent static methods from other crates prematurely", "tree": {"sha": "837b1c64a5bc4a0648ddf2c5364c7a4f71f8e654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837b1c64a5bc4a0648ddf2c5364c7a4f71f8e654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66da5e7942954730fe19f8bba957759fa13984b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66da5e7942954730fe19f8bba957759fa13984b", "html_url": "https://github.com/rust-lang/rust/commit/f66da5e7942954730fe19f8bba957759fa13984b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66da5e7942954730fe19f8bba957759fa13984b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60564d072f058f995258578c93cc059f8f5ac17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/60564d072f058f995258578c93cc059f8f5ac17d", "html_url": "https://github.com/rust-lang/rust/commit/60564d072f058f995258578c93cc059f8f5ac17d"}], "stats": {"total": 28, "additions": 1, "deletions": 27}, "files": [{"sha": "409cec282bce93de82457834f12ad5e479c33d57", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f66da5e7942954730fe19f8bba957759fa13984b/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66da5e7942954730fe19f8bba957759fa13984b/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f66da5e7942954730fe19f8bba957759fa13984b", "patch": "@@ -687,32 +687,6 @@ fn each_child_of_item_or_crate<F, G>(cdata: Cmd,\n         }\n     }\n \n-    // As a special case, iterate over all static methods of\n-    // associated implementations too. This is a bit of a botch.\n-    // --pcwalton\n-    for inherent_impl_def_id_doc in reader::tagged_docs(item_doc,\n-                                                             tag_items_data_item_inherent_impl) {\n-        let inherent_impl_def_id = item_def_id(inherent_impl_def_id_doc, cdata);\n-        if let Some(inherent_impl_doc) = cdata.get_item(inherent_impl_def_id.index) {\n-            for impl_item_def_id_doc in reader::tagged_docs(inherent_impl_doc,\n-                                                                 tag_item_impl_item) {\n-                let impl_item_def_id = item_def_id(impl_item_def_id_doc,\n-                                                   cdata);\n-                if let Some(impl_method_doc) = cdata.get_item(impl_item_def_id.index) {\n-                    if let StaticMethod = item_family(impl_method_doc) {\n-                        // Hand off the static method to the callback.\n-                        let static_method_name = item_name(impl_method_doc);\n-                        let static_method_def_like = item_to_def_like(cdata, impl_method_doc,\n-                                                                      impl_item_def_id);\n-                        callback(static_method_def_like,\n-                                 static_method_name,\n-                                 item_visibility(impl_method_doc));\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     for reexport_doc in reexports(item_doc) {\n         let def_id_doc = reader::get_doc(reexport_doc,\n                                          tag_items_data_item_reexport_def_id);"}, {"sha": "687cdba1542bdce4c9be2889ac2bd453bb5f7da9", "filename": "src/test/compile-fail/use-from-trait-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66da5e7942954730fe19f8bba957759fa13984b/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66da5e7942954730fe19f8bba957759fa13984b/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs?ref=f66da5e7942954730fe19f8bba957759fa13984b", "patch": "@@ -31,6 +31,6 @@ use use_from_trait_xc::Bar::new as bnew;\n //~^ ERROR unresolved import `use_from_trait_xc::Bar::new`\n \n use use_from_trait_xc::Baz::new as baznew;\n-//~^ ERROR `baznew` is not directly importable\n+//~^ ERROR unresolved import `use_from_trait_xc::Baz::new`\n \n fn main() {}"}]}