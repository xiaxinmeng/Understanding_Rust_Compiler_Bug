{"sha": "1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "node_id": "C_kwDOAAsO6NoAKDFlNzIwY2RiNDYyNWI2NGNhY2FkNmE1YWUwYjhlODQ1ZjRhNDNmYmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-21T08:18:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-21T08:18:54Z"}, "message": "merge rustc history", "tree": {"sha": "932b4edd1d574bd79bc1e758dd73dd0be44786d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932b4edd1d574bd79bc1e758dd73dd0be44786d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "html_url": "https://github.com/rust-lang/rust/commit/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55fe2b3fbf918c47ec823706b460a9764719d09f", "url": "https://api.github.com/repos/rust-lang/rust/commits/55fe2b3fbf918c47ec823706b460a9764719d09f", "html_url": "https://github.com/rust-lang/rust/commit/55fe2b3fbf918c47ec823706b460a9764719d09f"}, {"sha": "54ee5ac0734a5c715558190fda9c61be2446d93a", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ee5ac0734a5c715558190fda9c61be2446d93a", "html_url": "https://github.com/rust-lang/rust/commit/54ee5ac0734a5c715558190fda9c61be2446d93a"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "3c08b6fa3894d61277a0c0b6499e23ddcdc544a9", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n }\n \n /// Similar to `get_file_name`, but converts any dashes (`-`) in the `crate_name` to\n-/// underscores (`_`). This is specially made for the the rustc and cargo wrappers\n+/// underscores (`_`). This is specially made for the rustc and cargo wrappers\n /// which have a dash in the name, and that is not allowed in a crate name.\n pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str) -> String {\n     let crate_name = crate_name.replace('-', \"_\");"}, {"sha": "ad108c34992e30efa101dc5d71fa5f832e45788f", "filename": "example/std_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(core_intrinsics, generators, generator_trait, is_sorted, bench_black_box)]\n+#![feature(core_intrinsics, generators, generator_trait, is_sorted)]\n \n #[cfg(target_arch = \"x86_64\")]\n use std::arch::x86_64::*;"}, {"sha": "e5ad31eb9484a85530df617646b0897c739ae783", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "patch": "@@ -193,7 +193,7 @@ pub(super) fn from_casted_value<'tcx>(\n         kind: StackSlotKind::ExplicitSlot,\n         // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n         // specify stack slot alignment.\n-        // Stack slot size may be bigger for for example `[u8; 3]` which is packed into an `i32`.\n+        // Stack slot size may be bigger for example `[u8; 3]` which is packed into an `i32`.\n         // It may also be smaller for example when the type is a wrapper around an integer with a\n         // larger alignment than the integer.\n         size: (std::cmp::max(abi_param_size, layout_size) + 15) / 16 * 16,"}, {"sha": "4303d63fe21314d2f0e8c6306018de9486d909f7", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "patch": "@@ -633,7 +633,12 @@ fn codegen_stmt<'tcx>(\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(\n-                    CastKind::Misc\n+                    CastKind::IntToInt\n+                    | CastKind::FloatToFloat\n+                    | CastKind::FloatToInt\n+                    | CastKind::IntToFloat\n+                    | CastKind::FnPtrToPtr\n+                    | CastKind::PtrToPtr\n                     | CastKind::PointerExposeAddress\n                     | CastKind::PointerFromExposedAddress,\n                     ref operand,"}, {"sha": "c5f44bb8479642fb26e475403b43e3638d33978a", "filename": "src/constant.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1e720cdb4625b64cacad6a5ae0b8e845f4a43fbc", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n-use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n \n use cranelift_codegen::ir::GlobalValueData;\n@@ -42,15 +41,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n         let unevaluated = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(ct) => match ct.kind() {\n-                ConstKind::Unevaluated(uv) => uv.expand(),\n-                ConstKind::Value(_) => continue,\n-                ConstKind::Param(_)\n-                | ConstKind::Infer(_)\n-                | ConstKind::Bound(_, _)\n-                | ConstKind::Placeholder(_)\n-                | ConstKind::Error(_) => unreachable!(\"{:?}\", ct),\n-            },\n+            ConstantKind::Ty(_) => unreachable!(),\n             ConstantKind::Unevaluated(uv, _) => uv,\n             ConstantKind::Val(..) => continue,\n         };\n@@ -118,7 +109,7 @@ pub(crate) fn codegen_constant<'tcx>(\n ) -> CValue<'tcx> {\n     let (const_val, ty) = match fx.monomorphize(constant.literal) {\n         ConstantKind::Ty(const_) => unreachable!(\"{:?}\", const_),\n-        ConstantKind::Unevaluated(ty::Unevaluated { def, substs, promoted }, ty)\n+        ConstantKind::Unevaluated(mir::UnevaluatedConst { def, substs, promoted }, ty)\n             if fx.tcx.is_static(def.did) =>\n         {\n             assert!(substs.is_empty());\n@@ -499,7 +490,16 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     match &stmt.kind {\n                         StatementKind::Assign(local_and_rvalue) if &local_and_rvalue.0 == place => {\n                             match &local_and_rvalue.1 {\n-                                Rvalue::Cast(CastKind::Misc, operand, ty) => {\n+                                Rvalue::Cast(\n+                                    CastKind::IntToInt\n+                                    | CastKind::FloatToFloat\n+                                    | CastKind::FloatToInt\n+                                    | CastKind::IntToFloat\n+                                    | CastKind::FnPtrToPtr\n+                                    | CastKind::PtrToPtr,\n+                                    operand,\n+                                    ty,\n+                                ) => {\n                                     if computed_const_val.is_some() {\n                                         return None; // local assigned twice\n                                     }"}]}