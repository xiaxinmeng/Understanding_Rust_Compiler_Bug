{"sha": "766f09f5c12e9103eb78da583eb637d036bdf795", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NmYwOWY1YzEyZTkxMDNlYjc4ZGE1ODNlYjYzN2QwMzZiZGY3OTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T09:35:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T09:35:13Z"}, "message": "Auto merge of #7503 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "290e84a18e223b7efdf4a142f4ef19d5a6b626d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290e84a18e223b7efdf4a142f4ef19d5a6b626d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/766f09f5c12e9103eb78da583eb637d036bdf795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/766f09f5c12e9103eb78da583eb637d036bdf795", "html_url": "https://github.com/rust-lang/rust/commit/766f09f5c12e9103eb78da583eb637d036bdf795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/766f09f5c12e9103eb78da583eb637d036bdf795/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92ca25b3ec8cef291f1d3b37bfd01d3cce8609e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ca25b3ec8cef291f1d3b37bfd01d3cce8609e2", "html_url": "https://github.com/rust-lang/rust/commit/92ca25b3ec8cef291f1d3b37bfd01d3cce8609e2"}, {"sha": "80116f9009976396d2f821ceeda107ce6b851830", "url": "https://api.github.com/repos/rust-lang/rust/commits/80116f9009976396d2f821ceeda107ce6b851830", "html_url": "https://github.com/rust-lang/rust/commit/80116f9009976396d2f821ceeda107ce6b851830"}], "stats": {"total": 118, "additions": 70, "deletions": 48}, "files": [{"sha": "82e04c8fb854e23d0c328f0fa6426df7238162a1", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.55\"\n+version = \"0.1.56\"\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\""}, {"sha": "0aa5b297442ef9e7b7ba5560db52e0eebe7b5205", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.1.55\"\n+version = \"0.1.56\"\n # end automatic update\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\""}, {"sha": "fcc43cce6ce4b9568c43c9f6a3c19a9ca82e0e33", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -3,7 +3,7 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -295,6 +295,14 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n         walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if let Some(target) = ImplicitHasherType::new(self.cx, &inf.to_ty()) {\n+            self.found.push(target);\n+        }\n+\n+        walk_inf(self, inf);\n+    }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": "8f5aeae85dfce94f3d645cf4eb5d53cf6929e264", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, krate.item.inner, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, attrs, krate.module().inner, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}, {"sha": "20c136407a1b6a7c2cd8f7a744d2109b1b1309d4", "filename": "clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_inf, walk_ty, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -39,6 +39,11 @@ struct TypeComplexityVisitor {\n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        self.score += 1;\n+        walk_inf(self, inf);\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level"}, {"sha": "a3601cca2eff15f7567dc688f52359ce6191278c", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_ty, NestedVisitorMap, Visitor},\n+    intravisit::{walk_inf, walk_ty, NestedVisitorMap, Visitor},\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -264,6 +264,11 @@ struct SkipTyCollector {\n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &hir::InferArg) {\n+        self.types_to_skip.push(inf.hir_id);\n+\n+        walk_inf(self, inf);\n+    }\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n "}, {"sha": "8bd859c97adab55b56b28b42fe2a1861d3a5751e", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.55\"\n+version = \"0.1.56\"\n authors = [\"The Rust Clippy Developers\"]\n edition = \"2018\"\n publish = false"}, {"sha": "fd70553e064b6385b35b685cbc2a0c107ef23953", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -288,6 +288,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (GenericArg::Const(l), GenericArg::Const(r)) => self.eq_body(l.value.body, r.value.body),\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n+            (GenericArg::Infer(l_inf), GenericArg::Infer(r_inf)) => self.eq_ty(&l_inf.to_ty(), &r_inf.to_ty()),\n             _ => false,\n         }\n     }\n@@ -885,7 +886,11 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_ty(&mut self, ty: &Ty<'_>) {\n         std::mem::discriminant(&ty.kind).hash(&mut self.s);\n-        match ty.kind {\n+        self.hash_tykind(&ty.kind);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n+        match ty {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n@@ -898,7 +903,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -918,7 +923,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n             TyKind::Tup(ty_list) => {\n-                for ty in ty_list {\n+                for ty in *ty_list {\n                     self.hash_ty(ty);\n                 }\n             },\n@@ -927,7 +932,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_generic_args(arg_list);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);\n@@ -949,6 +954,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 GenericArg::Lifetime(l) => self.hash_lifetime(l),\n                 GenericArg::Type(ref ty) => self.hash_ty(ty),\n                 GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n+                GenericArg::Infer(ref inf) => self.hash_ty(&inf.to_ty()),\n             }\n         }\n     }"}, {"sha": "e914dc1c222f681549855fd75bbbd2b6ccbb3202", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -180,7 +180,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n // FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n-// this function can be removed once the `normalizie` method does not panic when normalization does\n+// this function can be removed once the `normalize` method does not panic when normalization does\n // not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`."}, {"sha": "bff657bc1103815b899341e5476e10286b880c5c", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-07-19\"\n+channel = \"nightly-2021-07-29\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "c734051ccf320b086567185414793a707c50a379", "filename": "tests/ui/future_not_send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ffuture_not_send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ffuture_not_send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffuture_not_send.stderr?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -55,11 +55,11 @@ note: captured value is not `Send`\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n    |                          ^^ has type `std::rc::Rc<[u8]>` which is not `Send`\n    = note: `std::rc::Rc<[u8]>` doesn't implement `std::marker::Send`\n-note: captured value is not `Send`\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n   --> $DIR/future_not_send.rs:20:40\n    |\n LL | async fn private_future2(rc: Rc<[u8]>, cell: &Cell<usize>) -> bool {\n-   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`\n+   |                                        ^^^^ has type `&std::cell::Cell<usize>` which is not `Send`, because `std::cell::Cell<usize>` is not `Sync`\n    = note: `std::cell::Cell<usize>` doesn't implement `std::marker::Sync`\n \n error: future cannot be sent between threads safely"}, {"sha": "1d77382bf2cd1132549232dd03fe41af93de9389", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wraps, dyn_drop)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "bce4c81b78aa104709dd0a238f923a2f44de6451", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_transmute)]\n #![allow(dead_code)]\n \n extern crate core;"}, {"sha": "e31accb982af39e3d502d9cdb94f94d2633bccee", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,155 +1,155 @@\n error: transmute from a type (`&T`) to itself\n-  --> $DIR/transmute.rs:20:20\n+  --> $DIR/transmute.rs:19:20\n    |\n LL |     let _: &'a T = core::intrinsics::transmute(t);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:24:23\n+  --> $DIR/transmute.rs:23:23\n    |\n LL |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:26:21\n+  --> $DIR/transmute.rs:25:21\n    |\n LL |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:28:23\n+  --> $DIR/transmute.rs:27:23\n    |\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:34:27\n+  --> $DIR/transmute.rs:33:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:36:27\n+  --> $DIR/transmute.rs:35:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:38:27\n+  --> $DIR/transmute.rs:37:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:40:27\n+  --> $DIR/transmute.rs:39:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:42:27\n+  --> $DIR/transmute.rs:41:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:44:31\n+  --> $DIR/transmute.rs:43:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:48:31\n+  --> $DIR/transmute.rs:47:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:63:24\n+  --> $DIR/transmute.rs:62:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:65:24\n+  --> $DIR/transmute.rs:64:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:67:31\n+  --> $DIR/transmute.rs:66:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:69:29\n+  --> $DIR/transmute.rs:68:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:75:28\n+  --> $DIR/transmute.rs:74:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:76:28\n+  --> $DIR/transmute.rs:75:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:81:28\n+  --> $DIR/transmute.rs:80:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:87:31\n+  --> $DIR/transmute.rs:86:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:88:31\n+  --> $DIR/transmute.rs:87:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:89:31\n+  --> $DIR/transmute.rs:88:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:90:31\n+  --> $DIR/transmute.rs:89:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:108:28\n+  --> $DIR/transmute.rs:107:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:109:32\n+  --> $DIR/transmute.rs:108:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`"}, {"sha": "806b2d77dc77de8945ae875a22db7b5e3fe4c3eb", "filename": "tests/ui/transmute_float_to_int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.rs?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_transmute)]\n #![warn(clippy::transmute_float_to_int)]\n \n fn float_to_int() {"}, {"sha": "eb786bb39f95aa5c1f7110d053acf78cd96b340b", "filename": "tests/ui/transmute_float_to_int.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute_float_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/766f09f5c12e9103eb78da583eb637d036bdf795/tests%2Fui%2Ftransmute_float_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.stderr?ref=766f09f5c12e9103eb78da583eb637d036bdf795", "patch": "@@ -1,37 +1,37 @@\n error: transmute from a `f32` to a `u32`\n-  --> $DIR/transmute_float_to_int.rs:5:27\n+  --> $DIR/transmute_float_to_int.rs:4:27\n    |\n LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n    |\n    = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n \n error: transmute from a `f32` to a `i32`\n-  --> $DIR/transmute_float_to_int.rs:6:27\n+  --> $DIR/transmute_float_to_int.rs:5:27\n    |\n LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:7:27\n+  --> $DIR/transmute_float_to_int.rs:6:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n \n error: transmute from a `f64` to a `i64`\n-  --> $DIR/transmute_float_to_int.rs:8:27\n+  --> $DIR/transmute_float_to_int.rs:7:27\n    |\n LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:9:27\n+  --> $DIR/transmute_float_to_int.rs:8:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:10:27\n+  --> $DIR/transmute_float_to_int.rs:9:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`"}]}