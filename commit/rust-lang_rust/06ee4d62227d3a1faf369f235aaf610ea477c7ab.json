{"sha": "06ee4d62227d3a1faf369f235aaf610ea477c7ab", "node_id": "C_kwDOAAsO6NoAKDA2ZWU0ZDYyMjI3ZDNhMWZhZjM2OWYyMzVhYWY2MTBlYTQ3N2M3YWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T16:59:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-20T16:59:57Z"}, "message": "fix: Fix auto-ref completions inserting into wrong locations", "tree": {"sha": "697ed297f5391129702d1d7062ecf7dd5d496b2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697ed297f5391129702d1d7062ecf7dd5d496b2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ee4d62227d3a1faf369f235aaf610ea477c7ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ee4d62227d3a1faf369f235aaf610ea477c7ab", "html_url": "https://github.com/rust-lang/rust/commit/06ee4d62227d3a1faf369f235aaf610ea477c7ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ee4d62227d3a1faf369f235aaf610ea477c7ab/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f028403cdbb35cf1dc23350819e6f4e1ebd057e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f028403cdbb35cf1dc23350819e6f4e1ebd057e", "html_url": "https://github.com/rust-lang/rust/commit/1f028403cdbb35cf1dc23350819e6f4e1ebd057e"}], "stats": {"total": 192, "additions": 98, "deletions": 94}, "files": [{"sha": "101784fc14c6a4227fcf7a3fb76da8a04a5730d2", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -169,6 +169,8 @@ pub(crate) fn import_on_the_fly_pat(\n             has_macro_bang: false,\n             qualified: Qualified::No,\n             parent: None,\n+            // FIXME\n+            path: syntax::ast::make::ext::ident_path(\"dummy__\"),\n             kind: crate::context::PathKind::Pat { pat_ctx: pat_ctx.clone() },\n             has_type_args: false,\n             use_tree_parent: false,"}, {"sha": "67dbbf2a29ca25b5eeaa26dae1d944378f0c8a62", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -88,14 +88,16 @@ pub(crate) fn complete_pattern(\n                             has_call_parens: false,\n                             has_macro_bang: false,\n                             qualified: Qualified::No,\n+                            // FIXME\n+                            path: syntax::ast::make::ext::ident_path(\"dummy__\"),\n                             parent: None,\n                             kind: crate::context::PathKind::Pat { pat_ctx: pattern_ctx.clone() },\n                             has_type_args: false,\n                             use_tree_parent: false,\n                         },\n                         mac,\n                         name,\n-                    )\n+                    );\n                 }\n                 _ => false,\n             },"}, {"sha": "8ea03358aebc0920261e5002d741ec178380a8ab", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -61,6 +61,8 @@ pub(crate) struct PathCompletionCtx {\n     pub(super) qualified: Qualified,\n     /// The parent of the path we are completing.\n     pub(super) parent: Option<ast::Path>,\n+    /// The path of which we are completing the segment\n+    pub(super) path: ast::Path,\n     pub(super) kind: PathKind,\n     /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,"}, {"sha": "e13950d56a961789f1d4644ccb418472c178c797", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -556,6 +556,7 @@ impl<'a> CompletionContext<'a> {\n             has_macro_bang: false,\n             qualified: Qualified::No,\n             parent: path.parent_path(),\n+            path: path.clone(),\n             kind: PathKind::Item { kind: ItemListKind::SourceFile },\n             has_type_args: false,\n             use_tree_parent: false,"}, {"sha": "2b10dccb8008fd1353dc22ea655cbbcdf9fc35cd", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -6,7 +6,7 @@ use hir::{Documentation, Mutability};\n use ide_db::{imports::import_assets::LocatedImport, SnippetCap, SymbolKind};\n use smallvec::SmallVec;\n use stdx::{impl_from, never};\n-use syntax::{SmolStr, TextRange};\n+use syntax::{SmolStr, TextRange, TextSize};\n use text_edit::TextEdit;\n \n use crate::{\n@@ -68,7 +68,7 @@ pub struct CompletionItem {\n \n     /// Indicates that a reference or mutable reference to this variable is a\n     /// possible match.\n-    ref_match: Option<Mutability>,\n+    ref_match: Option<(Mutability, TextSize)>,\n \n     /// The import data to add to completion's edits.\n     import_to_add: SmallVec<[LocatedImport; 1]>,\n@@ -104,8 +104,8 @@ impl fmt::Debug for CompletionItem {\n             s.field(\"relevance\", &self.relevance);\n         }\n \n-        if let Some(mutability) = &self.ref_match {\n-            s.field(\"ref_match\", &format!(\"&{}\", mutability.as_keyword_for_ref()));\n+        if let Some((mutability, offset)) = &self.ref_match {\n+            s.field(\"ref_match\", &format!(\"&{}@{offset:?}\", mutability.as_keyword_for_ref()));\n         }\n         if self.trigger_call_info {\n             s.field(\"trigger_call_info\", &true);\n@@ -395,14 +395,14 @@ impl CompletionItem {\n         self.trigger_call_info\n     }\n \n-    pub fn ref_match(&self) -> Option<(Mutability, CompletionRelevance)> {\n+    pub fn ref_match(&self) -> Option<(Mutability, TextSize, CompletionRelevance)> {\n         // Relevance of the ref match should be the same as the original\n         // match, but with exact type match set because self.ref_match\n         // is only set if there is an exact type match.\n         let mut relevance = self.relevance;\n         relevance.type_match = Some(CompletionRelevanceTypeMatch::Exact);\n \n-        self.ref_match.map(|mutability| (mutability, relevance))\n+        self.ref_match.map(|(mutability, offset)| (mutability, offset, relevance))\n     }\n \n     pub fn imports_to_add(&self) -> &[LocatedImport] {\n@@ -428,7 +428,7 @@ pub(crate) struct Builder {\n     deprecated: bool,\n     trigger_call_info: bool,\n     relevance: CompletionRelevance,\n-    ref_match: Option<Mutability>,\n+    ref_match: Option<(Mutability, TextSize)>,\n }\n \n impl Builder {\n@@ -548,8 +548,8 @@ impl Builder {\n         self.imports_to_add.push(import_to_add);\n         self\n     }\n-    pub(crate) fn ref_match(&mut self, mutability: Mutability) -> &mut Builder {\n-        self.ref_match = Some(mutability);\n+    pub(crate) fn ref_match(&mut self, mutability: Mutability, offset: TextSize) -> &mut Builder {\n+        self.ref_match = Some((mutability, offset));\n         self\n     }\n }"}, {"sha": "643f34b22e5bfe8aa4cc8c539763eea1fa73d951", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -14,7 +14,7 @@ use hir::{AsAssocItem, HasAttrs, HirDisplay, ScopeDef};\n use ide_db::{\n     helpers::item_name, imports::import_assets::LocatedImport, RootDatabase, SnippetCap, SymbolKind,\n };\n-use syntax::{SmolStr, SyntaxKind, TextRange};\n+use syntax::{AstNode, SmolStr, SyntaxKind, TextRange};\n \n use crate::{\n     context::{PathCompletionCtx, PathKind},\n@@ -167,7 +167,7 @@ pub(crate) fn render_resolution_simple(\n     local_name: hir::Name,\n     resolution: ScopeDef,\n ) -> Builder {\n-    render_resolution_simple_(ctx, local_name, None, resolution)\n+    render_resolution_simple_(ctx, None, local_name, None, resolution)\n }\n \n pub(crate) fn render_resolution_with_import(\n@@ -235,7 +235,8 @@ fn render_resolution_simple_type(\n     let db = ctx.completion.db;\n     let config = ctx.completion.config;\n     let name = local_name.to_smol_str();\n-    let mut item = render_resolution_simple_(ctx, local_name, import_to_add, resolution);\n+    let mut item =\n+        render_resolution_simple_(ctx, Some(path_ctx), local_name, import_to_add, resolution);\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n         path_ctx,\n@@ -264,6 +265,7 @@ fn render_resolution_simple_type(\n \n fn render_resolution_simple_(\n     ctx: RenderContext<'_>,\n+    path_ctx: Option<&PathCompletionCtx>,\n     local_name: hir::Name,\n     import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n@@ -317,8 +319,10 @@ fn render_resolution_simple_(\n             ..CompletionRelevance::default()\n         });\n \n-        if let Some(ref_match) = compute_ref_match(ctx.completion, &ty) {\n-            item.ref_match(ref_match);\n+        if let Some(path_ctx) = path_ctx {\n+            if let Some(ref_match) = compute_ref_match(ctx.completion, &ty) {\n+                item.ref_match(ref_match, path_ctx.path.syntax().text_range().start());\n+            }\n         }\n     };\n \n@@ -455,7 +459,7 @@ mod tests {\n                 let relevance = display_relevance(it.relevance());\n                 items.push(format!(\"{} {} {}\\n\", tag, it.label(), relevance));\n \n-                if let Some((mutability, relevance)) = it.ref_match() {\n+                if let Some((mutability, _offset, relevance)) = it.ref_match() {\n                     let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.label());\n                     let relevance = display_relevance(relevance);\n \n@@ -1495,7 +1499,7 @@ fn foo(f: Foo) { let _: &u32 = f.b$0 }\n \"#,\n             &[CompletionItemKind::Method, CompletionItemKind::SymbolKind(SymbolKind::Field)],\n             // FIXME\n-            // Ideally we'd also suggest &f.bar and &f.baz() as exact\n+            // Ideally we'd also suggest &f.bar as exact\n             // type matches. See #8058.\n             expect![[r#\"\n                 [\n@@ -1507,6 +1511,7 @@ fn foo(f: Foo) { let _: &u32 = f.b$0 }\n                         kind: Method,\n                         lookup: \"baz\",\n                         detail: \"fn(&self) -> u32\",\n+                        ref_match: \"&@96\",\n                     },\n                     CompletionItem {\n                         label: \"bar\",\n@@ -1525,7 +1530,6 @@ fn foo(f: Foo) { let _: &u32 = f.b$0 }\n \n     #[test]\n     fn qualified_path_ref() {\n-        // disabled right now because it doesn't render correctly, #8058\n         check_kinds(\n             r#\"\n struct S;\n@@ -1554,6 +1558,7 @@ fn main() {\n                         ),\n                         lookup: \"foo\",\n                         detail: \"fn() -> S\",\n+                        ref_match: \"&@92\",\n                     },\n                 ]\n             \"#]],"}, {"sha": "37486e4d93e957747cae252416b5af116af91620", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 44, "deletions": 53, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -4,20 +4,19 @@ use hir::{db::HirDatabase, AsAssocItem, HirDisplay};\n use ide_db::{SnippetCap, SymbolKind};\n use itertools::Itertools;\n use stdx::{format_to, to_lower_snake_case};\n-use syntax::SmolStr;\n+use syntax::{AstNode, SmolStr};\n \n use crate::{\n-    context::{\n-        CompletionContext, DotAccess, DotAccessKind, PathCompletionCtx, PathKind, Qualified,\n-    },\n+    context::{CompletionContext, DotAccess, DotAccessKind, PathCompletionCtx, PathKind},\n     item::{Builder, CompletionItem, CompletionItemKind, CompletionRelevance},\n     render::{compute_exact_name_match, compute_ref_match, compute_type_match, RenderContext},\n     CallableSnippets,\n };\n \n-enum FuncKind {\n-    Function,\n-    Method(Option<hir::Name>),\n+#[derive(Debug)]\n+enum FuncKind<'ctx> {\n+    Function(&'ctx PathCompletionCtx),\n+    Method(&'ctx DotAccess, Option<hir::Name>),\n }\n \n pub(crate) fn render_fn(\n@@ -27,29 +26,7 @@ pub(crate) fn render_fn(\n     func: hir::Function,\n ) -> Builder {\n     let _p = profile::span(\"render_fn\");\n-    let func_kind = FuncKind::Function;\n-    let params = match ctx.completion.config.snippet_cap {\n-        Some(_) => {\n-            if !matches!(\n-                path_ctx,\n-                PathCompletionCtx { kind: PathKind::Expr { .. }, has_call_parens: true, .. }\n-                    | PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. }\n-            ) {\n-                params(ctx.completion, func, &func_kind, false)\n-            } else {\n-                None\n-            }\n-        }\n-        _ => None,\n-    };\n-    render(\n-        ctx,\n-        local_name,\n-        func,\n-        func_kind,\n-        params,\n-        matches!(path_ctx.qualified, Qualified::With { .. }),\n-    )\n+    render(ctx, local_name, func, FuncKind::Function(path_ctx))\n }\n \n pub(crate) fn render_method(\n@@ -60,32 +37,21 @@ pub(crate) fn render_method(\n     func: hir::Function,\n ) -> Builder {\n     let _p = profile::span(\"render_method\");\n-    let func_kind = FuncKind::Method(receiver);\n-    let params = match ctx.completion.config.snippet_cap {\n-        Some(_) => match dot_access {\n-            DotAccess { kind: DotAccessKind::Method { has_parens: true }, .. } => None,\n-            _ => params(ctx.completion, func, &func_kind, true),\n-        },\n-        _ => None,\n-    };\n-\n-    render(ctx, local_name, func, func_kind, params, false)\n+    render(ctx, local_name, func, FuncKind::Method(dot_access, receiver))\n }\n \n fn render(\n     ctx @ RenderContext { completion, .. }: RenderContext<'_>,\n     local_name: Option<hir::Name>,\n     func: hir::Function,\n     func_kind: FuncKind,\n-    params: Option<(Option<hir::SelfParam>, Vec<hir::Param>)>,\n-    qualified_path: bool,\n ) -> Builder {\n     let db = completion.db;\n \n     let name = local_name.unwrap_or_else(|| func.name(db));\n \n     let call = match &func_kind {\n-        FuncKind::Method(Some(receiver)) => format!(\"{}.{}\", receiver, &name).into(),\n+        FuncKind::Method(_, Some(receiver)) => format!(\"{}.{}\", receiver, &name).into(),\n         _ => name.to_smol_str(),\n     };\n     let mut item = CompletionItem::new(\n@@ -111,11 +77,14 @@ fn render(\n     });\n \n     if let Some(ref_match) = compute_ref_match(completion, &ret_type) {\n-        // FIXME For now we don't properly calculate the edits for ref match\n-        // completions on methods or qualified paths, so we've disabled them.\n-        // See #8058.\n-        if matches!(func_kind, FuncKind::Function) && !qualified_path {\n-            item.ref_match(ref_match);\n+        match func_kind {\n+            FuncKind::Function(path_ctx) => {\n+                item.ref_match(ref_match, path_ctx.path.syntax().text_range().start());\n+            }\n+            FuncKind::Method(DotAccess { receiver: Some(receiver), .. }, _) => {\n+                item.ref_match(ref_match, receiver.syntax().text_range().start());\n+            }\n+            _ => (),\n         }\n     }\n \n@@ -124,12 +93,34 @@ fn render(\n         .detail(detail(db, func))\n         .lookup_by(name.to_smol_str());\n \n-    match completion.config.snippet_cap.zip(params) {\n-        Some((cap, (self_param, params))) => {\n-            add_call_parens(&mut item, completion, cap, call, self_param, params);\n+    match ctx.completion.config.snippet_cap {\n+        Some(cap) => {\n+            let complete_params = match func_kind {\n+                FuncKind::Function(PathCompletionCtx {\n+                    kind: PathKind::Expr { .. },\n+                    has_call_parens: false,\n+                    ..\n+                }) => Some(false),\n+                FuncKind::Method(\n+                    DotAccess {\n+                        kind:\n+                            DotAccessKind::Method { has_parens: false } | DotAccessKind::Field { .. },\n+                        ..\n+                    },\n+                    _,\n+                ) => Some(true),\n+                _ => None,\n+            };\n+            if let Some(has_dot_receiver) = complete_params {\n+                if let Some((self_param, params)) =\n+                    params(ctx.completion, func, &func_kind, has_dot_receiver)\n+                {\n+                    add_call_parens(&mut item, completion, cap, call, self_param, params);\n+                }\n+            }\n         }\n         _ => (),\n-    }\n+    };\n \n     match ctx.import_to_add {\n         Some(import_to_add) => {\n@@ -291,7 +282,7 @@ fn params(\n         }\n     }\n \n-    let self_param = if has_dot_receiver || matches!(func_kind, FuncKind::Method(Some(_))) {\n+    let self_param = if has_dot_receiver || matches!(func_kind, FuncKind::Method(_, Some(_))) {\n         None\n     } else {\n         func.self_param(ctx.db)"}, {"sha": "7b0555d5a4ce62d15c63580dd77089980ed4cccd", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -2,6 +2,7 @@\n \n use hir::{db::HirDatabase, Documentation, HasAttrs, StructKind};\n use ide_db::SymbolKind;\n+use syntax::AstNode;\n \n use crate::{\n     context::{CompletionContext, PathCompletionCtx, PathKind},\n@@ -117,7 +118,7 @@ fn render(\n         ..ctx.completion_relevance()\n     });\n     if let Some(ref_match) = compute_ref_match(completion, &ty) {\n-        item.ref_match(ref_match);\n+        item.ref_match(ref_match, path_ctx.path.syntax().text_range().start());\n     }\n \n     if let Some(import_to_add) = ctx.import_to_add {"}, {"sha": "8953f1b2fdf7cd5dda28c51075f919ee0a59863e", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -399,6 +399,7 @@ fn foo() {\n \n #[test]\n fn completes_no_delims_if_existing() {\n+    // FIXME: We should not complete functions here\n     check_empty(\n         r#\"\n struct Bar(u32);\n@@ -409,7 +410,7 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            fn foo()   fn()\n+            fn foo     fn()\n             st Bar\n             bt u32\n             kw crate::\n@@ -427,7 +428,7 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            fn foo()   fn()\n+            fn foo     fn()\n             st Foo\n             bt u32\n             kw crate::"}, {"sha": "cdd152ccf566a600071081936bcb877cd83fb61e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ee4d62227d3a1faf369f235aaf610ea477c7ab/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=06ee4d62227d3a1faf369f235aaf610ea477c7ab", "patch": "@@ -224,6 +224,7 @@ fn completion_item(\n     max_relevance: u32,\n     item: CompletionItem,\n ) {\n+    let insert_replace_support = config.insert_replace_support().then(|| tdpp.position);\n     let mut additional_text_edits = Vec::new();\n \n     // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -233,7 +234,6 @@ fn completion_item(\n         let source_range = item.source_range();\n         for indel in item.text_edit().iter() {\n             if indel.delete.contains_range(source_range) {\n-                let insert_replace_support = config.insert_replace_support().then(|| tdpp.position);\n                 text_edit = Some(if indel.delete == source_range {\n                     self::completion_text_edit(line_index, insert_replace_support, indel.clone())\n                 } else {\n@@ -254,6 +254,14 @@ fn completion_item(\n         text_edit.unwrap()\n     };\n \n+    let insert_text_format = item.is_snippet().then(|| lsp_types::InsertTextFormat::SNIPPET);\n+    let tags = item.deprecated().then(|| vec![lsp_types::CompletionItemTag::DEPRECATED]);\n+    let command = if item.trigger_call_info() && config.client_commands().trigger_parameter_hints {\n+        Some(command::trigger_parameter_hints())\n+    } else {\n+        None\n+    };\n+\n     let mut lsp_item = lsp_types::CompletionItem {\n         label: item.label().to_string(),\n         detail: item.detail().map(|it| it.to_string()),\n@@ -263,22 +271,14 @@ fn completion_item(\n         additional_text_edits: Some(additional_text_edits),\n         documentation: item.documentation().map(documentation),\n         deprecated: Some(item.deprecated()),\n+        tags,\n+        command,\n+        insert_text_format,\n         ..Default::default()\n     };\n \n     set_score(&mut lsp_item, max_relevance, item.relevance());\n \n-    if item.deprecated() {\n-        lsp_item.tags = Some(vec![lsp_types::CompletionItemTag::DEPRECATED])\n-    }\n-\n-    if item.trigger_call_info() && config.client_commands().trigger_parameter_hints {\n-        lsp_item.command = Some(command::trigger_parameter_hints());\n-    }\n-\n-    if item.is_snippet() {\n-        lsp_item.insert_text_format = Some(lsp_types::InsertTextFormat::SNIPPET);\n-    }\n     if config.completion().enable_imports_on_the_fly {\n         if let imports @ [_, ..] = item.imports_to_add() {\n             let imports: Vec<_> = imports\n@@ -299,18 +299,17 @@ fn completion_item(\n         }\n     }\n \n-    if let Some((mutability, relevance)) = item.ref_match() {\n+    if let Some((mutability, offset, relevance)) = item.ref_match() {\n         let mut lsp_item_with_ref = lsp_item.clone();\n         set_score(&mut lsp_item_with_ref, max_relevance, relevance);\n         lsp_item_with_ref.label =\n             format!(\"&{}{}\", mutability.as_keyword_for_ref(), lsp_item_with_ref.label);\n-        if let Some(it) = &mut lsp_item_with_ref.text_edit {\n-            let new_text = match it {\n-                lsp_types::CompletionTextEdit::Edit(it) => &mut it.new_text,\n-                lsp_types::CompletionTextEdit::InsertAndReplace(it) => &mut it.new_text,\n-            };\n-            *new_text = format!(\"&{}{}\", mutability.as_keyword_for_ref(), new_text);\n-        }\n+        lsp_item_with_ref.additional_text_edits.get_or_insert_with(Default::default).push(\n+            self::text_edit(\n+                line_index,\n+                Indel::insert(offset, format!(\"&{}\", mutability.as_keyword_for_ref())),\n+            ),\n+        );\n \n         acc.push(lsp_item_with_ref);\n     };"}]}