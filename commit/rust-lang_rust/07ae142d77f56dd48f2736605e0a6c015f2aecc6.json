{"sha": "07ae142d77f56dd48f2736605e0a6c015f2aecc6", "node_id": "C_kwDOAAsO6NoAKDA3YWUxNDJkNzdmNTZkZDQ4ZjI3MzY2MDVlMGE2YzAxNWYyYWVjYzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T17:48:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T17:48:46Z"}, "message": "Auto merge of #96863 - SparrowLii:let, r=michaelwoerister\n\nuse `hir::Let` in `hir::Guard::IfLet`\n\nThis PR fixes the FIXME about using `hir::Let` in `hir::Guard::IfLet`", "tree": {"sha": "548d6f2f42fb052207a7c2e0063ddbd608f4ff6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548d6f2f42fb052207a7c2e0063ddbd608f4ff6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ae142d77f56dd48f2736605e0a6c015f2aecc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ae142d77f56dd48f2736605e0a6c015f2aecc6", "html_url": "https://github.com/rust-lang/rust/commit/07ae142d77f56dd48f2736605e0a6c015f2aecc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ae142d77f56dd48f2736605e0a6c015f2aecc6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10d9ecda48f828e174d7a863fc43a155ad086efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d9ecda48f828e174d7a863fc43a155ad086efd", "html_url": "https://github.com/rust-lang/rust/commit/10d9ecda48f828e174d7a863fc43a155ad086efd"}, {"sha": "303dcfb9cf24091436df7bb77043b149957722c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/303dcfb9cf24091436df7bb77043b149957722c1", "html_url": "https://github.com/rust-lang/rust/commit/303dcfb9cf24091436df7bb77043b149957722c1"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "3aff04f78fb8500fcba53063bef1ab0f14bc1142", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -505,8 +505,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {\n         let pat = self.lower_pat(&arm.pat);\n         let guard = arm.guard.as_ref().map(|cond| {\n-            if let ExprKind::Let(ref pat, ref scrutinee, _) = cond.kind {\n-                hir::Guard::IfLet(self.lower_pat(pat), self.lower_expr(scrutinee))\n+            if let ExprKind::Let(ref pat, ref scrutinee, span) = cond.kind {\n+                hir::Guard::IfLet(self.arena.alloc(hir::Let {\n+                    hir_id: self.next_id(),\n+                    span: self.lower_span(span),\n+                    pat: self.lower_pat(pat),\n+                    ty: None,\n+                    init: self.lower_expr(scrutinee),\n+                }))\n             } else {\n                 hir::Guard::If(self.lower_expr(cond))\n             }"}, {"sha": "81d544c7b96dcf13bd5b722700d7a6099c589d2b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -1320,8 +1320,7 @@ pub struct Let<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum Guard<'hir> {\n     If(&'hir Expr<'hir>),\n-    // FIXME use hir::Let for this.\n-    IfLet(&'hir Pat<'hir>, &'hir Expr<'hir>),\n+    IfLet(&'hir Let<'hir>),\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "5b83a29bb33c30bc027398b9068ba7632085e9a3", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -1225,9 +1225,8 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n     if let Some(ref g) = arm.guard {\n         match g {\n             Guard::If(ref e) => visitor.visit_expr(e),\n-            Guard::IfLet(ref pat, ref e) => {\n-                visitor.visit_pat(pat);\n-                visitor.visit_expr(e);\n+            Guard::IfLet(ref l) => {\n+                visitor.visit_let_expr(l);\n             }\n         }\n     }"}, {"sha": "4558a3d10c4fbf2b2d8663ff17fc6d24ae244e01", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -1915,14 +1915,9 @@ impl<'a> State<'a> {\n                     self.print_expr(&e);\n                     self.space();\n                 }\n-                hir::Guard::IfLet(pat, e) => {\n+                hir::Guard::IfLet(hir::Let { pat, ty, init, .. }) => {\n                     self.word_nbsp(\"if\");\n-                    self.word_nbsp(\"let\");\n-                    self.print_pat(&pat);\n-                    self.space();\n-                    self.word_space(\"=\");\n-                    self.print_expr(&e);\n-                    self.space();\n+                    self.print_let(pat, *ty, init);\n                 }\n             }\n         }"}, {"sha": "8f5ad6b1a07a0e44f41111614e873e7c1be19049", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -798,8 +798,8 @@ impl<'tcx> Cx<'tcx> {\n             pattern: self.pattern_from_hir(&arm.pat),\n             guard: arm.guard.as_ref().map(|g| match g {\n                 hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),\n-                hir::Guard::IfLet(ref pat, ref e) => {\n-                    Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))\n+                hir::Guard::IfLet(ref l) => {\n+                    Guard::IfLet(self.pattern_from_hir(l.pat), self.mirror_expr(l.init))\n                 }\n             }),\n             body: self.mirror_expr(arm.body),"}, {"sha": "f86899021e38808fc3878900c660a7820c04e977", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -173,10 +173,10 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n         for arm in hir_arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             self.check_patterns(&arm.pat, Refutable);\n-            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n-                self.check_patterns(pat, Refutable);\n-                let tpat = self.lower_pattern(&mut cx, pat, &mut false);\n-                self.check_let_reachability(&mut cx, pat.hir_id, tpat, tpat.span());\n+            if let Some(hir::Guard::IfLet(ref let_expr)) = arm.guard {\n+                self.check_patterns(let_expr.pat, Refutable);\n+                let tpat = self.lower_pattern(&mut cx, let_expr.pat, &mut false);\n+                self.check_let_reachability(&mut cx, let_expr.pat.hir_id, tpat, tpat.span());\n             }\n         }\n \n@@ -1108,9 +1108,9 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n \n     match parent_node {\n         hir::Node::Arm(hir::Arm {\n-            guard: Some(hir::Guard::IfLet(&hir::Pat { hir_id, .. }, _)),\n+            guard: Some(hir::Guard::IfLet(&hir::Let { pat: hir::Pat { hir_id, .. }, .. })),\n             ..\n-        }) if Some(hir_id) == pat_id => {\n+        }) if Some(*hir_id) == pat_id => {\n             return LetSource::IfLetGuard;\n         }\n         hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Let(..), span, .. }) => {"}, {"sha": "b09d9831d43e39286b8e71a9dab498d9f77def34", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -373,8 +373,8 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n         self.add_from_pat(&arm.pat);\n-        if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n-            self.add_from_pat(pat);\n+        if let Some(hir::Guard::IfLet(ref let_expr)) = arm.guard {\n+            self.add_from_pat(let_expr.pat);\n         }\n         intravisit::walk_arm(self, arm);\n     }\n@@ -914,9 +914,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                     let guard_succ = arm.guard.as_ref().map_or(body_succ, |g| match g {\n                         hir::Guard::If(e) => self.propagate_through_expr(e, body_succ),\n-                        hir::Guard::IfLet(pat, e) => {\n-                            let let_bind = self.define_bindings_in_pat(pat, body_succ);\n-                            self.propagate_through_expr(e, let_bind)\n+                        hir::Guard::IfLet(let_expr) => {\n+                            let let_bind = self.define_bindings_in_pat(let_expr.pat, body_succ);\n+                            self.propagate_through_expr(let_expr.init, let_bind)\n                         }\n                     });\n                     let arm_succ = self.define_bindings_in_pat(&arm.pat, guard_succ);"}, {"sha": "9aff854c8030591125c44406a76868a7e0771619", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -82,13 +82,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     hir::Guard::If(e) => {\n                         self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {});\n                     }\n-                    hir::Guard::IfLet(pat, e) => {\n-                        let scrutinee_ty = self.demand_scrutinee_type(\n-                            e,\n-                            pat.contains_explicit_ref_binding(),\n-                            false,\n-                        );\n-                        self.check_pat_top(&pat, scrutinee_ty, None, true);\n+                    hir::Guard::IfLet(l) => {\n+                        self.check_expr_let(l);\n                     }\n                 };\n             }"}, {"sha": "151df84ca316969d5f138a3c9659b77d0d108fcf", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -1105,7 +1105,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_expr_let(&self, let_expr: &'tcx hir::Let<'tcx>) -> Ty<'tcx> {\n+    pub(super) fn check_expr_let(&self, let_expr: &'tcx hir::Let<'tcx>) -> Ty<'tcx> {\n         // for let statements, this is done in check_stmt\n         let init = let_expr.init;\n         self.warn_if_unreachable(init.hir_id, init.span, \"block in `let` expression\");"}, {"sha": "92a2584a6de4d3deef9f645b165b763974578c58", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -298,9 +298,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 Guard::If(ref e) => {\n                     self.visit_expr(e);\n                 }\n-                Guard::IfLet(ref pat, ref e) => {\n-                    self.visit_pat(pat);\n-                    self.visit_expr(e);\n+                Guard::IfLet(ref l) => {\n+                    self.visit_let_expr(l);\n                 }\n             }\n "}, {"sha": "417778cc57d80fba6384c76d52ae0d073ed24a40", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -344,9 +344,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n                         // B -> C and E -> F are added implicitly due to the traversal order.\n                         match guard {\n                             Some(Guard::If(expr)) => self.visit_expr(expr),\n-                            Some(Guard::IfLet(pat, expr)) => {\n-                                self.visit_pat(pat);\n-                                self.visit_expr(expr);\n+                            Some(Guard::IfLet(let_expr)) => {\n+                                self.visit_let_expr(let_expr);\n                             }\n                             None => (),\n                         }"}, {"sha": "6de6b6ee4798de8fe4ecb170b30eb9410eb21d4d", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -625,8 +625,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         if let Some(hir::Guard::If(e)) = arm.guard {\n             self.consume_expr(e)\n-        } else if let Some(hir::Guard::IfLet(_, ref e)) = arm.guard {\n-            self.consume_expr(e)\n+        } else if let Some(hir::Guard::IfLet(ref l)) = arm.guard {\n+            self.consume_expr(l.init)\n         }\n \n         self.consume_expr(arm.body);"}, {"sha": "dd1f4826fe0516599ad798b9372422ce62d44137", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/typeck.rs:9:22\n    |\n LL |         Ok(x) if let Err(_) = x => {},\n-   |                      ^^^^^^ expected enum `Option`, found enum `Result`\n+   |                      ^^^^^^   - this expression has type `Option<bool>`\n+   |                      |\n+   |                      expected enum `Option`, found enum `Result`\n    |\n    = note: expected enum `Option<bool>`\n               found enum `Result<_, _>`\n@@ -11,7 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/typeck.rs:11:22\n    |\n LL |         Ok(x) if let 0 = x => {},\n-   |                      ^ expected enum `Option`, found integer\n+   |                      ^   - this expression has type `Option<bool>`\n+   |                      |\n+   |                      expected enum `Option`, found integer\n    |\n    = note: expected enum `Option<bool>`\n               found type `{integer}`"}, {"sha": "826eb0ae6b13b1cdc6d22049c5751969830d106c", "filename": "src/tools/clippy/clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_lang_ctor, is_unit_expr, path_to_local, peel_blocks_with_s\n use if_chain::if_chain;\n use rustc_errors::MultiSpan;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{Arm, Expr, Guard, HirId, Pat, PatKind};\n+use rustc_hir::{Arm, Expr, Guard, HirId, Let, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -109,7 +109,7 @@ fn check_arm<'tcx>(\n             (Some(a), Some(b)) => SpanlessEq::new(cx).eq_expr(a, b),\n         };\n         // the binding must not be used in the if guard\n-        if outer_guard.map_or(true, |(Guard::If(e) | Guard::IfLet(_, e))| !is_local_used(cx, *e, binding_id));\n+        if outer_guard.map_or(true, |(Guard::If(e) | Guard::IfLet(Let { init: e, .. }))| !is_local_used(cx, *e, binding_id));\n         // ...or anywhere in the inner expression\n         if match inner {\n             IfLetOrMatch::IfLet(_, _, body, els) => {"}, {"sha": "d3d3ed2c2357e27b5b1f52fac2f7e9c79b166140", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{\n     hir_id::HirIdSet,\n     intravisit::{walk_expr, Visitor},\n-    Block, Expr, ExprKind, Guard, HirId, Pat, Stmt, StmtKind, UnOp,\n+    Block, Expr, ExprKind, Guard, HirId, Let, Pat, Stmt, StmtKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -478,7 +478,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                     let mut is_map_used = self.is_map_used;\n                     for arm in arms {\n                         self.visit_pat(arm.pat);\n-                        if let Some(Guard::If(guard) | Guard::IfLet(_, guard)) = arm.guard {\n+                        if let Some(Guard::If(guard) | Guard::IfLet(&Let { init: guard, .. })) = arm.guard {\n                             self.visit_non_tail_expr(guard);\n                         }\n                         is_map_used |= self.visit_cond_arm(arm.body);"}, {"sha": "d66698f8adc6927e1546214232364e2a3c7bfc97", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -596,7 +596,7 @@ impl<'tcx> SideEffectVisit<'tcx> {\n                 let mut vars = std::mem::take(&mut self.ret_vars);\n                 let _ = arm.guard.as_ref().map(|guard| {\n                     self.visit_expr(match guard {\n-                        Guard::If(expr) | Guard::IfLet(_, expr) => expr,\n+                        Guard::If(expr) | Guard::IfLet(Let { init: expr, .. }) => expr,\n                     });\n                     vars.append(&mut self.ret_vars);\n                 });"}, {"sha": "3f4d0fd199d0814cd712d285571c48a83d615379", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -315,11 +315,11 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 out!(\"if let Some(Guard::If({expr})) = {arm}.guard;\");\n                 self.expr(expr);\n             },\n-            Some(hir::Guard::IfLet(pat, expr)) => {\n-                bind!(self, pat, expr);\n-                out!(\"if let Some(Guard::IfLet({pat}, {expr}) = {arm}.guard;\");\n-                self.pat(pat);\n-                self.expr(expr);\n+            Some(hir::Guard::IfLet(let_expr)) => {\n+                bind!(self, let_expr);\n+                out!(\"if let Some(Guard::IfLet({let_expr}) = {arm}.guard;\");\n+                self.pat(field!(let_expr.pat));\n+                self.expr(field!(let_expr.init));\n             },\n         }\n         self.expr(field!(arm.body));"}, {"sha": "aa21f15ee5d9dedf4452ae62941e5ac295f554c2", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ae142d77f56dd48f2736605e0a6c015f2aecc6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=07ae142d77f56dd48f2736605e0a6c015f2aecc6", "patch": "@@ -301,7 +301,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n     fn eq_guard(&mut self, left: &Guard<'_>, right: &Guard<'_>) -> bool {\n         match (left, right) {\n             (Guard::If(l), Guard::If(r)) => self.eq_expr(l, r),\n-            (Guard::IfLet(lp, le), Guard::IfLet(rp, re)) => self.eq_pat(lp, rp) && self.eq_expr(le, re),\n+            (Guard::IfLet(l), Guard::IfLet(r)) => {\n+                self.eq_pat(l.pat, r.pat) && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r)) && self.eq_expr(l.init, r.init)\n+            },\n             _ => false,\n         }\n     }\n@@ -894,7 +896,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_guard(&mut self, g: &Guard<'_>) {\n         match g {\n-            Guard::If(expr) | Guard::IfLet(_, expr) => {\n+            Guard::If(expr) | Guard::IfLet(Let { init: expr, .. }) => {\n                 self.hash_expr(expr);\n             },\n         }"}]}