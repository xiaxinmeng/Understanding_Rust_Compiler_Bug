{"sha": "068bcad880b1e14d44ae7aef8709b8f60bea526e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OGJjYWQ4ODBiMWUxNGQ0NGFlN2FlZjg3MDliOGY2MGJlYTUyNmU=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2017-07-31T08:38:24Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2017-07-31T08:38:24Z"}, "message": "rustfmt-format-diff: Use logging macros instead of \"-v\" option.", "tree": {"sha": "f9ef56f7af1b3fd38c2093dfa89a0e4d4f9e25f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ef56f7af1b3fd38c2093dfa89a0e4d4f9e25f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068bcad880b1e14d44ae7aef8709b8f60bea526e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAll+7I8ACgkQBWtye7nB\nAnxtSwf+KMi37p8l+Ky4CoU49VQLapMa9igIPI2AVcxVY3Z9E/2CnHlScmqI1tmB\nG4LATZHNg1cF/H/nyw6LSdIWkUrwKa/RC9YlylC+IXj75uy3eJN1yWr87WJp3Fe2\nOAasNoVBv4Nfn4Ly9O7gy7gXbKj1XJYHYdbbZVIhvTDbQSJDJpa9I1+VzsjaT8sr\nXd1cAe/bOd1q/j9XDOm+5pJFTlc0xf62hciqsp0GSFhOwZPdZWnrAsUmAFObCqQc\nfkGE9+SX9sEIviO8vvPHlAGWGez2VwmdwTv5ETuwfBSFOIgeHTF8Ixdrgaa/55cM\nJeols3ObN0Y/bFTiQPObj7z6CTiTAQ==\n=p68d\n-----END PGP SIGNATURE-----", "payload": "tree f9ef56f7af1b3fd38c2093dfa89a0e4d4f9e25f2\nparent c12b4e90317c19182202acdc80615b5280dfb08b\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1501490304 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1501490304 +0100\n\nrustfmt-format-diff: Use logging macros instead of \"-v\" option.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068bcad880b1e14d44ae7aef8709b8f60bea526e", "html_url": "https://github.com/rust-lang/rust/commit/068bcad880b1e14d44ae7aef8709b8f60bea526e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068bcad880b1e14d44ae7aef8709b8f60bea526e/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c12b4e90317c19182202acdc80615b5280dfb08b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12b4e90317c19182202acdc80615b5280dfb08b", "html_url": "https://github.com/rust-lang/rust/commit/c12b4e90317c19182202acdc80615b5280dfb08b"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "f7f3c1d8f7ca46fab1accec7a67f08c95445cb65", "filename": "src/bin/rustfmt-format-diff.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/068bcad880b1e14d44ae7aef8709b8f60bea526e/src%2Fbin%2Frustfmt-format-diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068bcad880b1e14d44ae7aef8709b8f60bea526e/src%2Fbin%2Frustfmt-format-diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt-format-diff.rs?ref=068bcad880b1e14d44ae7aef8709b8f60bea526e", "patch": "@@ -14,7 +14,10 @@\n \n #![deny(warnings)]\n \n+extern crate env_logger;\n extern crate getopts;\n+#[macro_use]\n+extern crate log;\n extern crate regex;\n extern crate serde;\n #[macro_use]\n@@ -79,9 +82,10 @@ impl From<io::Error> for FormatDiffError {\n }\n \n fn main() {\n+    let _ = env_logger::init();\n+\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"h\", \"help\", \"show this message\");\n-    opts.optflag(\"v\", \"verbose\", \"use verbose output\");\n     opts.optopt(\n         \"p\",\n         \"skip-prefix\",\n@@ -115,43 +119,30 @@ fn run(opts: &getopts::Options) -> Result<(), FormatDiffError> {\n         return Ok(());\n     }\n \n-    let verbose = matches.opt_present(\"v\");\n-\n     let filter = matches\n         .opt_str(\"f\")\n         .unwrap_or_else(|| DEFAULT_PATTERN.into());\n \n-\n     let skip_prefix = matches\n         .opt_str(\"p\")\n         .and_then(|p| p.parse::<u32>().ok())\n         .unwrap_or(0);\n \n     let (files, ranges) = scan_diff(io::stdin(), skip_prefix, &filter)?;\n \n-    run_rustfmt(&files, &ranges, verbose)\n+    run_rustfmt(&files, &ranges)\n }\n \n-fn run_rustfmt(\n-    files: &HashSet<String>,\n-    ranges: &[Range],\n-    verbose: bool,\n-) -> Result<(), FormatDiffError> {\n+fn run_rustfmt(files: &HashSet<String>, ranges: &[Range]) -> Result<(), FormatDiffError> {\n     if files.is_empty() || ranges.is_empty() {\n-        if verbose {\n-            println!(\"No files to format found\");\n-        }\n+        debug!(\"No files to format found\");\n         return Ok(());\n     }\n \n     let ranges_as_json = json::to_string(ranges).unwrap();\n-    if verbose {\n-        print!(\"rustfmt\");\n-        for file in files {\n-            print!(\" {:?}\", file);\n-        }\n-        print!(\" --file-lines {:?}\", ranges_as_json);\n-    }\n+\n+    debug!(\"Files: {:?}\", files);\n+    debug!(\"Ranges: {:?}\", ranges);\n \n     let exit_status = process::Command::new(\"rustfmt\")\n         .args(files)"}]}