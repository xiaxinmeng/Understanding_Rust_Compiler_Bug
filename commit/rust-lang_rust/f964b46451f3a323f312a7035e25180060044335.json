{"sha": "f964b46451f3a323f312a7035e25180060044335", "node_id": "C_kwDOAAsO6NoAKGY5NjRiNDY0NTFmM2EzMjNmMzEyYTcwMzVlMjUxODAwNjAwNDQzMzU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-05-29T03:32:38Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-06-01T14:45:19Z"}, "message": "improve debug message by eagerly translating", "tree": {"sha": "046bc19ea24f00895add859342be294f0e80db97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/046bc19ea24f00895add859342be294f0e80db97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f964b46451f3a323f312a7035e25180060044335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f964b46451f3a323f312a7035e25180060044335", "html_url": "https://github.com/rust-lang/rust/commit/f964b46451f3a323f312a7035e25180060044335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f964b46451f3a323f312a7035e25180060044335/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f83717cf768adb0b0dfe23b8eecf2b259eec354", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f83717cf768adb0b0dfe23b8eecf2b259eec354", "html_url": "https://github.com/rust-lang/rust/commit/4f83717cf768adb0b0dfe23b8eecf2b259eec354"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "c83f6cf13e04d6764ffcec4952cdf87f315aaffe", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=f964b46451f3a323f312a7035e25180060044335", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use rustc_errors::{\n     DiagnosticArgValue, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Handler,\n     IntoDiagnostic,\n@@ -8,7 +10,7 @@ use rustc_middle::mir::interpret::{\n     CheckInAllocMsg, ExpectedKind, InterpError, InvalidMetaKind, InvalidProgramInfo, PointerKind,\n     ResourceExhaustionInfo, UndefinedBehaviorInfo, UnsupportedOpInfo, ValidationErrorInfo,\n };\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n use rustc_target::abi::call::AdjustForForeignAbiError;\n use rustc_target::abi::{Size, WrappingRange};\n@@ -425,6 +427,24 @@ pub struct UndefinedBehavior {\n     pub raw_bytes: RawBytesNote,\n }\n \n+pub struct DebugExt<T>(T);\n+\n+impl<T: ReportErrorExt> fmt::Debug for DebugExt<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let s = ty::tls::with(|tcx| {\n+            let mut builder = tcx.sess.struct_allow(\"\");\n+            let handler = &tcx.sess.parse_sess.span_diagnostic;\n+            let message = self.0.diagnostic_message();\n+            self.0.add_args(handler, &mut builder);\n+            let s = handler.eagerly_translate_to_string(message, builder.args());\n+            builder.cancel();\n+            s\n+        });\n+\n+        f.write_str(&s)\n+    }\n+}\n+\n pub trait ReportErrorExt {\n     /// Returns the diagnostic message for this error.\n     fn diagnostic_message(&self) -> DiagnosticMessage;\n@@ -433,6 +453,13 @@ pub trait ReportErrorExt {\n         handler: &Handler,\n         builder: &mut DiagnosticBuilder<'_, G>,\n     );\n+\n+    fn debug(self) -> DebugExt<Self>\n+    where\n+        Self: Sized,\n+    {\n+        DebugExt(self)\n+    }\n }\n \n fn bad_pointer_message(msg: CheckInAllocMsg, handler: &Handler) -> String {"}, {"sha": "2435bc59ec0342e1860060050ba66311c45cc643", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=f964b46451f3a323f312a7035e25180060044335", "patch": "@@ -469,6 +469,7 @@ impl dyn MachineStopType {\n     }\n }\n \n+#[derive(Debug)]\n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior.\n     UndefinedBehavior(UndefinedBehaviorInfo<'tcx>),\n@@ -487,19 +488,6 @@ pub enum InterpError<'tcx> {\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n-impl fmt::Debug for InterpError<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use InterpError::*;\n-        match self {\n-            Unsupported(msg) => msg.fmt(f),\n-            InvalidProgram(msg) => msg.fmt(f),\n-            UndefinedBehavior(msg) => msg.fmt(f),\n-            ResourceExhaustion(msg) => msg.fmt(f),\n-            MachineStop(msg) => msg.fmt(f),\n-        }\n-    }\n-}\n-\n impl InterpError<'_> {\n     /// Some errors do string formatting even if the error is never printed.\n     /// To avoid performance issues, there are places where we want to be sure to never raise these formatting errors,"}, {"sha": "c6d60039eb9658ac16c806797c8dc4029a2dfeda", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=f964b46451f3a323f312a7035e25180060044335", "patch": "@@ -378,7 +378,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 op\n             }\n             Err(e) => {\n-                trace!(\"get_const failed: {e:?}\");\n+                trace!(\"get_const failed: {:?}\", e.debug());\n                 return None;\n             }\n         };"}, {"sha": "1682658237261b79d747666b54ed12bb4168906d", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f964b46451f3a323f312a7035e25180060044335/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=f964b46451f3a323f312a7035e25180060044335", "patch": "@@ -232,7 +232,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 op\n             }\n             Err(e) => {\n-                trace!(\"get_const failed: {e:?}\");\n+                trace!(\"get_const failed: {:?}\", e.debug());\n                 return None;\n             }\n         };"}]}