{"sha": "603270011e53c025e873841f158a44599fb7afab", "node_id": "C_kwDOAAsO6NoAKDYwMzI3MDAxMWU1M2MwMjVlODczODQxZjE1OGE0NDU5OWZiN2FmYWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T22:35:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-04T22:35:09Z"}, "message": "Auto merge of #109944 - cjgillot:lint-cstring-macro, r=Nilstrieb\n\nDo not suppress temporary_cstring_as_ptr in macros.\n\nThere isn't really a reason to skip the lint when part of the expression comes from an expansion.\n\nFixes https://github.com/rust-lang/rust/issues/94694", "tree": {"sha": "e013e26118df9267a6d656500b77ead758d17a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e013e26118df9267a6d656500b77ead758d17a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/603270011e53c025e873841f158a44599fb7afab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/603270011e53c025e873841f158a44599fb7afab", "html_url": "https://github.com/rust-lang/rust/commit/603270011e53c025e873841f158a44599fb7afab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/603270011e53c025e873841f158a44599fb7afab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700938c0781c9f135244bb1ec846fe1a5e03ae7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/700938c0781c9f135244bb1ec846fe1a5e03ae7d", "html_url": "https://github.com/rust-lang/rust/commit/700938c0781c9f135244bb1ec846fe1a5e03ae7d"}, {"sha": "8528ac6e3595fa0afe47d05513cfb0de73171ebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8528ac6e3595fa0afe47d05513cfb0de73171ebe", "html_url": "https://github.com/rust-lang/rust/commit/8528ac6e3595fa0afe47d05513cfb0de73171ebe"}], "stats": {"total": 76, "additions": 33, "deletions": 43}, "files": [{"sha": "4c25d94a1f3726f8150418701a19898bc0c1df4b", "filename": "compiler/rustc_lint/src/methods.rs", "status": "modified", "additions": 8, "deletions": 41, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/603270011e53c025e873841f158a44599fb7afab/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603270011e53c025e873841f158a44599fb7afab/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmethods.rs?ref=603270011e53c025e873841f158a44599fb7afab", "patch": "@@ -2,9 +2,9 @@ use crate::lints::CStringPtr;\n use crate::LateContext;\n use crate::LateLintPass;\n use crate::LintContext;\n-use rustc_hir::{Expr, ExprKind, PathSegment};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_middle::ty;\n-use rustc_span::{symbol::sym, ExpnKind, Span};\n+use rustc_span::{symbol::sym, Span};\n \n declare_lint! {\n     /// The `temporary_cstring_as_ptr` lint detects getting the inner pointer of\n@@ -34,47 +34,14 @@ declare_lint! {\n \n declare_lint_pass!(TemporaryCStringAsPtr => [TEMPORARY_CSTRING_AS_PTR]);\n \n-fn in_macro(span: Span) -> bool {\n-    if span.from_expansion() {\n-        !matches!(span.ctxt().outer_expn_data().kind, ExpnKind::Desugaring(..))\n-    } else {\n-        false\n-    }\n-}\n-\n-fn first_method_call<'tcx>(\n-    expr: &'tcx Expr<'tcx>,\n-) -> Option<(&'tcx PathSegment<'tcx>, &'tcx Expr<'tcx>)> {\n-    if let ExprKind::MethodCall(path, receiver, args, ..) = &expr.kind {\n-        if args.iter().any(|e| e.span.from_expansion()) || receiver.span.from_expansion() {\n-            None\n-        } else {\n-            Some((path, *receiver))\n-        }\n-    } else {\n-        None\n-    }\n-}\n-\n impl<'tcx> LateLintPass<'tcx> for TemporaryCStringAsPtr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_macro(expr.span) {\n-            return;\n-        }\n-\n-        match first_method_call(expr) {\n-            Some((path, unwrap_arg)) if path.ident.name == sym::as_ptr => {\n-                let as_ptr_span = path.ident.span;\n-                match first_method_call(unwrap_arg) {\n-                    Some((path, receiver))\n-                        if path.ident.name == sym::unwrap || path.ident.name == sym::expect =>\n-                    {\n-                        lint_cstring_as_ptr(cx, as_ptr_span, receiver, unwrap_arg);\n-                    }\n-                    _ => return,\n-                }\n-            }\n-            _ => return,\n+        if let ExprKind::MethodCall(as_ptr_path, as_ptr_receiver, ..) = expr.kind\n+            && as_ptr_path.ident.name == sym::as_ptr\n+            && let ExprKind::MethodCall(unwrap_path, unwrap_receiver, ..) = as_ptr_receiver.kind\n+            && (unwrap_path.ident.name == sym::unwrap || unwrap_path.ident.name == sym::expect)\n+        {\n+            lint_cstring_as_ptr(cx, as_ptr_path.ident.span, unwrap_receiver, as_ptr_receiver);\n         }\n     }\n }"}, {"sha": "fab792f128411f10143b4ecc4781702a1bfd307c", "filename": "tests/ui/lint/lint-temporary-cstring-as-ptr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/603270011e53c025e873841f158a44599fb7afab/tests%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/603270011e53c025e873841f158a44599fb7afab/tests%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.rs?ref=603270011e53c025e873841f158a44599fb7afab", "patch": "@@ -3,7 +3,15 @@\n \n use std::ffi::CString;\n \n+macro_rules! mymacro {\n+    () => {\n+        let s = CString::new(\"some text\").unwrap().as_ptr();\n+        //~^ ERROR getting the inner pointer of a temporary `CString`\n+    }\n+}\n+\n fn main() {\n     let s = CString::new(\"some text\").unwrap().as_ptr();\n     //~^ ERROR getting the inner pointer of a temporary `CString`\n+    mymacro!();\n }"}, {"sha": "4e5c8aa069364a3edd012207c835e0833adf4da3", "filename": "tests/ui/lint/lint-temporary-cstring-as-ptr.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/603270011e53c025e873841f158a44599fb7afab/tests%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/603270011e53c025e873841f158a44599fb7afab/tests%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-temporary-cstring-as-ptr.stderr?ref=603270011e53c025e873841f158a44599fb7afab", "patch": "@@ -1,5 +1,5 @@\n error: getting the inner pointer of a temporary `CString`\n-  --> $DIR/lint-temporary-cstring-as-ptr.rs:7:48\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:14:48\n    |\n LL |     let s = CString::new(\"some text\").unwrap().as_ptr();\n    |             ---------------------------------- ^^^^^^ this pointer will be invalid\n@@ -14,5 +14,20 @@ note: the lint level is defined here\n LL | #![deny(temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: getting the inner pointer of a temporary `CString`\n+  --> $DIR/lint-temporary-cstring-as-ptr.rs:8:52\n+   |\n+LL |         let s = CString::new(\"some text\").unwrap().as_ptr();\n+   |                 ---------------------------------- ^^^^^^ this pointer will be invalid\n+   |                 |\n+   |                 this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n+...\n+LL |     mymacro!();\n+   |     ---------- in this macro invocation\n+   |\n+   = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n+   = help: for more information, see https://doc.rust-lang.org/reference/destructors.html\n+   = note: this error originates in the macro `mymacro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n "}]}