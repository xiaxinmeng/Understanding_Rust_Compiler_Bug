{"sha": "1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZDZiNWUxZTY5YWQzZDM1MDlhYmQ4YzA0MWJiOWZiMmRkODZjNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T15:24:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T15:24:50Z"}, "message": "Auto merge of #68623 - Zoxc:lld, r=Mark-Simulacrum\n\nAdd an option to use LLD to link the compiler on Windows platforms\n\nBased on https://github.com/rust-lang/rust/pull/68609.\n\nUsing LLD is good way to improve compile times on Windows since `link.exe` is quite slow. The time for `x.py build --stage 1 src/libtest` goes from 0:12:00 to 0:08:29. Compile time for `rustc_driver` goes from 226.34s to 18.5s. `rustc_macros` goes from 28.69s to 7.7s. The size of `rustc_driver` is also reduced from 83.3 MB to 78.7 MB.\n\nr? @Mark-Simulacrum", "tree": {"sha": "3c961ff663a69eb05e8b1ffec1dc68b7af8cbb45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c961ff663a69eb05e8b1ffec1dc68b7af8cbb45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "html_url": "https://github.com/rust-lang/rust/commit/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dff769e3718c56f78a317df7167426d60895d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dff769e3718c56f78a317df7167426d60895d58", "html_url": "https://github.com/rust-lang/rust/commit/6dff769e3718c56f78a317df7167426d60895d58"}, {"sha": "d304cd0c5543c701bbfec0bd7b0c8b7c142b3bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d304cd0c5543c701bbfec0bd7b0c8b7c142b3bca", "html_url": "https://github.com/rust-lang/rust/commit/d304cd0c5543c701bbfec0bd7b0c8b7c142b3bca"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "c37cd4a9857277c3cbdeeaf1e88e54b7e0357bfb", "filename": "config.toml.example", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "patch": "@@ -395,6 +395,15 @@\n # rustc to execute.\n #lld = false\n \n+# Indicates whether LLD will be used to link Rust crates during bootstrap on\n+# supported platforms. The LLD from the bootstrap distribution will be used\n+# and not the LLD compiled during the bootstrap.\n+#\n+# LLD will not be used if we're cross linking or running tests.\n+#\n+# Explicitly setting the linker for a target will override this option.\n+#use-lld = false\n+\n # Indicates whether some LLVM tools, like llvm-objdump, will be made available in the\n # sysroot.\n #llvm-tools = false\n@@ -463,6 +472,7 @@\n # Linker to be used to link Rust code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform.\n+# Setting this will override the `use-lld` option for Rust code.\n #linker = \"cc\"\n \n # Path to the `llvm-config` binary of the installation of a custom LLVM to link"}, {"sha": "daa030c59d64139cf19951f3b6d63fcb4abba553", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "patch": "@@ -134,6 +134,11 @@ fn main() {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n \n+        // Override linker flavor if necessary.\n+        if let Ok(host_linker_flavor) = env::var(\"RUSTC_HOST_LINKER_FLAVOR\") {\n+            cmd.arg(format!(\"-Clinker-flavor={}\", host_linker_flavor));\n+        }\n+\n         if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n             if s == \"true\" {\n                 cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");"}, {"sha": "d0eed3f12d117c92116cbc2abd1e1784094846b6", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "patch": "@@ -692,7 +692,7 @@ impl<'a> Builder<'a> {\n         cmd.env_remove(\"MAKEFLAGS\");\n         cmd.env_remove(\"MFLAGS\");\n \n-        if let Some(linker) = self.linker(compiler.host) {\n+        if let Some(linker) = self.linker(compiler.host, true) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         cmd\n@@ -952,10 +952,31 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        if let Some(host_linker) = self.linker(compiler.host) {\n+        // FIXME: Don't use LLD if we're compiling libtest, since it fails to link it.\n+        // See https://github.com/rust-lang/rust/issues/68647.\n+        let can_use_lld = mode != Mode::Std;\n+\n+        // FIXME: The beta compiler doesn't pick the `lld-link` flavor for `*-pc-windows-msvc`\n+        // Remove `RUSTC_HOST_LINKER_FLAVOR` when this is fixed\n+        let lld_linker_flavor = |linker: &Path, target: Interned<String>| {\n+            compiler.stage == 0\n+                && linker.file_name() == Some(OsStr::new(\"rust-lld\"))\n+                && target.contains(\"pc-windows-msvc\")\n+        };\n+\n+        if let Some(host_linker) = self.linker(compiler.host, can_use_lld) {\n+            if lld_linker_flavor(host_linker, compiler.host) {\n+                cargo.env(\"RUSTC_HOST_LINKER_FLAVOR\", \"lld-link\");\n+            }\n+\n             cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n         }\n-        if let Some(target_linker) = self.linker(target) {\n+\n+        if let Some(target_linker) = self.linker(target, can_use_lld) {\n+            if lld_linker_flavor(target_linker, target) {\n+                rustflags.arg(\"-Clinker-flavor=lld-link\");\n+            }\n+\n             let target = crate::envify(&target);\n             cargo.env(&format!(\"CARGO_TARGET_{}_LINKER\", target), target_linker);\n         }"}, {"sha": "ac530da3557da8f7b4a5ac46cc5010d8f438db16", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "patch": "@@ -82,6 +82,7 @@ pub struct Config {\n     pub llvm_use_linker: Option<String>,\n     pub llvm_allow_old_toolchain: Option<bool>,\n \n+    pub use_lld: bool,\n     pub lld_enabled: bool,\n     pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n@@ -321,6 +322,7 @@ struct Rust {\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n     lld: Option<bool>,\n+    use_lld: Option<bool>,\n     llvm_tools: Option<bool>,\n     lldb: Option<bool>,\n     deny_warnings: Option<bool>,\n@@ -565,6 +567,7 @@ impl Config {\n             if let Some(true) = rust.incremental {\n                 config.incremental = true;\n             }\n+            set(&mut config.use_lld, rust.use_lld);\n             set(&mut config.lld_enabled, rust.lld);\n             set(&mut config.lldb_enabled, rust.lldb);\n             set(&mut config.llvm_tools_enabled, rust.llvm_tools);"}, {"sha": "77b80e0f71debdca91baac3ea7d63e91b1aa54b0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "patch": "@@ -239,9 +239,10 @@ pub struct Build {\n     hosts: Vec<Interned<String>>,\n     targets: Vec<Interned<String>>,\n \n-    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents\n+    // Stage 0 (downloaded) compiler, lld and cargo or their local rust equivalents\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n+    initial_lld: PathBuf,\n \n     // Runtime state filled in later on\n     // C/C++ compilers and archiver for all targets\n@@ -343,9 +344,18 @@ impl Build {\n         // we always try to use git for LLVM builds\n         let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n \n+        let initial_sysroot = config.initial_rustc.parent().unwrap().parent().unwrap();\n+        let initial_lld = initial_sysroot\n+            .join(\"lib\")\n+            .join(\"rustlib\")\n+            .join(config.build)\n+            .join(\"bin\")\n+            .join(\"rust-lld\");\n+\n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n+            initial_lld,\n             local_rebuild: config.local_rebuild,\n             fail_fast: config.cmd.fail_fast(),\n             doc_tests: config.cmd.doc_tests(),\n@@ -810,7 +820,7 @@ impl Build {\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n-    fn linker(&self, target: Interned<String>) -> Option<&Path> {\n+    fn linker(&self, target: Interned<String>, can_use_lld: bool) -> Option<&Path> {\n         if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n         {\n             Some(linker)\n@@ -819,6 +829,8 @@ impl Build {\n             && !target.contains(\"msvc\")\n         {\n             Some(self.cc(target))\n+        } else if can_use_lld && self.config.use_lld && self.build == target {\n+            Some(&self.initial_lld)\n         } else {\n             None\n         }"}, {"sha": "1580091488f20e919e2cde3cd72691cd5163d3e1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1ad6b5e1e69ad3d3509abd8c041bb9fb2dd86c41", "patch": "@@ -596,7 +596,7 @@ impl Step for RustdocTheme {\n             .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", builder.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        if let Some(linker) = builder.linker(self.compiler.host) {\n+        if let Some(linker) = builder.linker(self.compiler.host, true) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         try_run(builder, &mut cmd);\n@@ -1035,7 +1035,8 @@ impl Step for Compiletest {\n         flags.push(\"-Zunstable-options\".to_string());\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n \n-        if let Some(linker) = builder.linker(target) {\n+        // Don't use LLD here since we want to test that rustc finds and uses a linker by itself.\n+        if let Some(linker) = builder.linker(target, false) {\n             cmd.arg(\"--linker\").arg(linker);\n         }\n "}]}