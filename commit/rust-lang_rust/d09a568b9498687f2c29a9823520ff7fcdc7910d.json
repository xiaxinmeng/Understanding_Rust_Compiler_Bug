{"sha": "d09a568b9498687f2c29a9823520ff7fcdc7910d", "node_id": "C_kwDOAAsO6NoAKGQwOWE1NjhiOTQ5ODY4N2YyYzI5YTk4MjM1MjBmZjdmY2RjNzkxMGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-18T01:03:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-18T01:03:23Z"}, "message": "Rollup merge of #97828 - ferrocene:pa-config-artifacts, r=jyn514\n\nAllow configuring where artifacts are downloaded from\n\nBootstrap has support for downloading prebuilt LLVM and rustc artifacts to speed up local builds, but that currently works only for users working on `rust-lang/rust`. Forks of the repository (for example Ferrocene) might have different URLs to download artifacts from, or might use a different email address on merge commits, breaking both LLVM and rustc artifact downloads.\n\nThis PR refactors bootstrap to load the download URLs and other constants from `src/stage0.json`, allowing downstream forks to tweak those values. It also future-proofs the download code to easily allow forks to add their own custom protocols (like `s3://`).\n\nThis PR is best reviewed commit-by-commit.", "tree": {"sha": "c8018a4bc95af517f90a271652aaff9184febc46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8018a4bc95af517f90a271652aaff9184febc46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09a568b9498687f2c29a9823520ff7fcdc7910d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJirSRbCRBK7hj4Ov3rIwAAl9IIAKnnI36wxDeQXSm4W9vcL4mx\n5zDUCnr2aRLFk/0MZNwTpCq0N7TTNsAhkg3ltEv22NQmuwunPj9oNv8IKZFLFxjj\ndTkauGacVBOQ8jEVVUpIoG6Kjk4iKu9Muu1XvlIioNSqjst6Svp6O71PjJTxE9zF\nzGLvqgeNY/4G67Fic/sps96qjqkpRQHykHeO8HPY/HfHh69lQndS/LDZSSxaU3yO\nSROXNT5ACUuGlUnOmHt0oVyByzDWdyW5Jh7vqdjlCqypvfUvh8ti6lPBS5WC6gPI\nw5rrAXybtWzE1WXCv/XbOxy7EDHlw01FPirLQQcJbiYCmQ4/DTyH/7e1uJC2dH0=\n=kYVq\n-----END PGP SIGNATURE-----\n", "payload": "tree c8018a4bc95af517f90a271652aaff9184febc46\nparent fc8027f188141d5d00547ff974f82b441003844d\nparent d3b15329f9f7c4c8c5b395a0362281255cde68f7\nauthor Yuki Okushi <jtitor@2k36.org> 1655514203 +0900\ncommitter GitHub <noreply@github.com> 1655514203 +0900\n\nRollup merge of #97828 - ferrocene:pa-config-artifacts, r=jyn514\n\nAllow configuring where artifacts are downloaded from\n\nBootstrap has support for downloading prebuilt LLVM and rustc artifacts to speed up local builds, but that currently works only for users working on `rust-lang/rust`. Forks of the repository (for example Ferrocene) might have different URLs to download artifacts from, or might use a different email address on merge commits, breaking both LLVM and rustc artifact downloads.\n\nThis PR refactors bootstrap to load the download URLs and other constants from `src/stage0.json`, allowing downstream forks to tweak those values. It also future-proofs the download code to easily allow forks to add their own custom protocols (like `s3://`).\n\nThis PR is best reviewed commit-by-commit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09a568b9498687f2c29a9823520ff7fcdc7910d", "html_url": "https://github.com/rust-lang/rust/commit/d09a568b9498687f2c29a9823520ff7fcdc7910d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09a568b9498687f2c29a9823520ff7fcdc7910d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc8027f188141d5d00547ff974f82b441003844d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8027f188141d5d00547ff974f82b441003844d", "html_url": "https://github.com/rust-lang/rust/commit/fc8027f188141d5d00547ff974f82b441003844d"}, {"sha": "d3b15329f9f7c4c8c5b395a0362281255cde68f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b15329f9f7c4c8c5b395a0362281255cde68f7", "html_url": "https://github.com/rust-lang/rust/commit/d3b15329f9f7c4c8c5b395a0362281255cde68f7"}], "stats": {"total": 205, "additions": 132, "deletions": 73}, "files": [{"sha": "3b2b507b062371a3c8e68d285cfd5d7d4d9ac5aa", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -1043,7 +1043,7 @@ def bootstrap(help_triggered):\n     build.checksums_sha256 = data[\"checksums_sha256\"]\n     build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n \n-    build.set_dist_environment(data[\"dist_server\"])\n+    build.set_dist_environment(data[\"config\"][\"dist_server\"])\n \n     build.build = args.build or build.build_triple()\n "}, {"sha": "7b74c5ccdbb0e2ebc5f48a9573f1dfa6005733b4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -870,20 +870,23 @@ impl<'a> Builder<'a> {\n         self.try_run(patchelf.arg(fname));\n     }\n \n-    pub(crate) fn download_component(\n-        &self,\n-        base: &str,\n-        url: &str,\n-        dest_path: &Path,\n-        help_on_error: &str,\n-    ) {\n+    pub(crate) fn download_component(&self, url: &str, dest_path: &Path, help_on_error: &str) {\n         // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n-        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url), help_on_error);\n+        // While bootstrap itself only supports http and https downloads, downstream forks might\n+        // need to download components from other protocols. The match allows them adding more\n+        // protocols without worrying about merge conficts if we change the HTTP implementation.\n+        match url.split_once(\"://\").map(|(proto, _)| proto) {\n+            Some(\"http\") | Some(\"https\") => {\n+                self.download_http_with_retries(&tempfile, url, help_on_error)\n+            }\n+            Some(other) => panic!(\"unsupported protocol {other} in {url}\"),\n+            None => panic!(\"no protocol in {url}\"),\n+        }\n         t!(std::fs::rename(&tempfile, dest_path));\n     }\n \n-    fn download_with_retries(&self, tempfile: &Path, url: &str, help_on_error: &str) {\n+    fn download_http_with_retries(&self, tempfile: &Path, url: &str, help_on_error: &str) {\n         println!(\"downloading {}\", url);\n         // Try curl. If that fails and we are on windows, fallback to PowerShell.\n         let mut curl = Command::new(\"curl\");"}, {"sha": "14607741932ea3521edafd6d797d672860f51033", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -20,7 +20,6 @@ use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, output, program_out_of_date, t};\n-use crate::RustfmtMetadata;\n use once_cell::sync::OnceCell;\n use serde::{Deserialize, Deserializer};\n \n@@ -73,6 +72,7 @@ pub struct Config {\n     pub test_compare_mode: bool,\n     pub color: Color,\n     pub patch_binaries_for_nix: bool,\n+    pub stage0_metadata: Stage0Metadata,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -212,6 +212,28 @@ pub struct Config {\n     pub out: PathBuf,\n }\n \n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct Stage0Metadata {\n+    pub config: Stage0Config,\n+    pub checksums_sha256: HashMap<String, String>,\n+    pub rustfmt: Option<RustfmtMetadata>,\n+}\n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct Stage0Config {\n+    pub dist_server: String,\n+    pub artifacts_server: String,\n+    pub artifacts_with_llvm_assertions_server: String,\n+    pub git_merge_commit_email: String,\n+}\n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct RustfmtMetadata {\n+    pub date: String,\n+    pub version: String,\n+}\n+\n #[derive(Clone, Debug)]\n pub enum RustfmtState {\n     SystemToolchain(PathBuf),\n@@ -776,6 +798,9 @@ impl Config {\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n \n+        let stage0_json = t!(std::fs::read(&config.src.join(\"src\").join(\"stage0.json\")));\n+        config.stage0_metadata = t!(serde_json::from_slice::<Stage0Metadata>(&stage0_json));\n+\n         #[cfg(test)]\n         let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n@@ -1103,8 +1128,11 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc_commit =\n-                download_ci_rustc_commit(rust.download_rustc, config.verbose > 0);\n+            config.download_rustc_commit = download_ci_rustc_commit(\n+                &config.stage0_metadata,\n+                rust.download_rustc,\n+                config.verbose > 0,\n+            );\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;\n@@ -1424,7 +1452,11 @@ fn threads_from_config(v: u32) -> u32 {\n }\n \n /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n-fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool) -> Option<String> {\n+fn download_ci_rustc_commit(\n+    stage0_metadata: &Stage0Metadata,\n+    download_rustc: Option<StringOrBool>,\n+    verbose: bool,\n+) -> Option<String> {\n     // If `download-rustc` is not set, default to rebuilding.\n     let if_unchanged = match download_rustc {\n         None | Some(StringOrBool::Bool(false)) => return None,\n@@ -1443,13 +1475,12 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n \n     // Look for a version to compare to based on the current commit.\n     // Only commits merged by bors will have CI artifacts.\n-    let merge_base = output(Command::new(\"git\").args(&[\n-        \"rev-list\",\n-        \"--author=bors@rust-lang.org\",\n-        \"-n1\",\n-        \"--first-parent\",\n-        \"HEAD\",\n-    ]));\n+    let merge_base = output(\n+        Command::new(\"git\")\n+            .arg(\"rev-list\")\n+            .arg(format!(\"--author={}\", stage0_metadata.config.git_merge_commit_email))\n+            .args(&[\"-n1\", \"--first-parent\", \"HEAD\"]),\n+    );\n     let commit = merge_base.trim_end();\n     if commit.is_empty() {\n         println!(\"error: could not find commit hash for downloading rustc\");\n@@ -1484,7 +1515,7 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n }\n \n fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n-    let RustfmtMetadata { date, version } = builder.stage0_metadata.rustfmt.as_ref()?;\n+    let RustfmtMetadata { date, version } = builder.config.stage0_metadata.rustfmt.as_ref()?;\n     let channel = format!(\"{version}-{date}\");\n \n     let host = builder.config.build;\n@@ -1568,13 +1599,13 @@ fn download_component(\n     let tarball = cache_dir.join(&filename);\n     let (base_url, url, should_verify) = match mode {\n         DownloadSource::CI => (\n-            \"https://ci-artifacts.rust-lang.org/rustc-builds\".to_string(),\n+            builder.config.stage0_metadata.config.artifacts_server.clone(),\n             format!(\"{key}/{filename}\"),\n             false,\n         ),\n         DownloadSource::Dist => {\n             let dist_server = env::var(\"RUSTUP_DIST_SERVER\")\n-                .unwrap_or(builder.stage0_metadata.dist_server.to_string());\n+                .unwrap_or(builder.config.stage0_metadata.config.dist_server.to_string());\n             // NOTE: make `dist` part of the URL because that's how it's stored in src/stage0.json\n             (dist_server, format!(\"dist/{key}/{filename}\"), true)\n         }\n@@ -1590,7 +1621,7 @@ fn download_component(\n             target at this time, see https://doc.rust-lang.org/nightly\\\n             /rustc/platform-support.html for more information.\"\n         );\n-        let sha256 = builder.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n+        let sha256 = builder.config.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n         if tarball.exists() {\n             if builder.verify(&tarball, sha256) {\n                 builder.unpack(&tarball, &bin_root, prefix);\n@@ -1610,7 +1641,7 @@ fn download_component(\n         None\n     };\n \n-    builder.download_component(&base_url, &url, &tarball, \"\");\n+    builder.download_component(&format!(\"{base_url}/{url}\"), &tarball, \"\");\n     if let Some(sha256) = checksum {\n         if !builder.verify(&tarball, sha256) {\n             panic!(\"failed to verify {}\", tarball.display());"}, {"sha": "49096426a9826946b098f44931b82363061cb0a0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -118,7 +118,6 @@ use std::os::windows::fs::symlink_file;\n \n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n-use serde::Deserialize;\n \n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n@@ -294,8 +293,6 @@ pub struct Build {\n     hosts: Vec<TargetSelection>,\n     targets: Vec<TargetSelection>,\n \n-    // Stage 0 (downloaded) compiler, lld and cargo or their local rust equivalents\n-    stage0_metadata: Stage0Metadata,\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n     initial_lld: PathBuf,\n@@ -322,18 +319,6 @@ pub struct Build {\n     metrics: metrics::BuildMetrics,\n }\n \n-#[derive(Deserialize)]\n-struct Stage0Metadata {\n-    dist_server: String,\n-    checksums_sha256: HashMap<String, String>,\n-    rustfmt: Option<RustfmtMetadata>,\n-}\n-#[derive(Deserialize)]\n-struct RustfmtMetadata {\n-    date: String,\n-    version: String,\n-}\n-\n #[derive(Debug)]\n struct Crate {\n     name: Interned<String>,\n@@ -482,11 +467,7 @@ impl Build {\n             bootstrap_out\n         };\n \n-        let stage0_json = t!(std::fs::read_to_string(&src.join(\"src\").join(\"stage0.json\")));\n-        let stage0_metadata = t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n-\n         let mut build = Build {\n-            stage0_metadata,\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             initial_lld,"}, {"sha": "329bb68672ee64bf24dad0acd98f9a0b6e26d0d3", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     let mut rev_list = Command::new(\"git\");\n     rev_list.args(&[\n         PathBuf::from(\"rev-list\"),\n-        \"--author=bors@rust-lang.org\".into(),\n+        format!(\"--author={}\", builder.config.stage0_metadata.config.git_merge_commit_email).into(),\n         \"-n1\".into(),\n         \"--first-parent\".into(),\n         \"HEAD\".into(),\n@@ -170,11 +170,10 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     if !rustc_cache.exists() {\n         t!(fs::create_dir_all(&rustc_cache));\n     }\n-    let base = \"https://ci-artifacts.rust-lang.org\";\n-    let url = if llvm_assertions {\n-        format!(\"rustc-builds-alt/{}\", llvm_sha)\n+    let base = if llvm_assertions {\n+        &builder.config.stage0_metadata.config.artifacts_with_llvm_assertions_server\n     } else {\n-        format!(\"rustc-builds/{}\", llvm_sha)\n+        &builder.config.stage0_metadata.config.artifacts_server\n     };\n     let filename = format!(\"rust-dev-nightly-{}.tar.xz\", builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n@@ -187,7 +186,11 @@ help: if trying to compile an old commit of rustc, disable `download-ci-llvm` in\n [llvm]\n download-ci-llvm = false\n \";\n-        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball, help_on_error);\n+        builder.download_component(\n+            &format!(\"{base}/{llvm_sha}/{filename}\"),\n+            &tarball,\n+            help_on_error,\n+        );\n     }\n     let llvm_root = builder.config.ci_llvm_root();\n     builder.unpack(&tarball, &llvm_root, \"rust-dev\");"}, {"sha": "b6b502f4cf0cbefa998eac2b7cb17d0b88d8f42d", "filename": "src/stage0.json", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -1,6 +1,20 @@\n {\n-  \"__comment\": \"Generated by `./x.py run src/tools/bump-stage0`. Run that command again to update the bootstrap compiler.\",\n-  \"dist_server\": \"https://static.rust-lang.org\",\n+  \"config\": {\n+    \"dist_server\": \"https://static.rust-lang.org\",\n+    \"artifacts_server\": \"https://ci-artifacts.rust-lang.org/rustc-builds\",\n+    \"artifacts_with_llvm_assertions_server\": \"https://ci-artifacts.rust-lang.org/rustc-builds-alt\",\n+    \"git_merge_commit_email\": \"bors@rust-lang.org\"\n+  },\n+  \"__comments\": [\n+    \"The configuration above this comment is editable, and can be changed\",\n+    \"by forks of the repository if they have alternate values.\",\n+    \"\",\n+    \"The section below is generated by `./x.py run src/tools/bump-stage0`,\",\n+    \"run that command again to update the bootstrap compiler.\",\n+    \"\",\n+    \"All changes below this comment will be overridden the next time the\",\n+    \"tool is executed.\"\n+  ],\n   \"compiler\": {\n     \"date\": \"2022-05-20\",\n     \"version\": \"beta\""}, {"sha": "1c839fdc00a08c79dde63cc086747214b068632e", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09a568b9498687f2c29a9823520ff7fcdc7910d/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=d09a568b9498687f2c29a9823520ff7fcdc7910d", "patch": "@@ -4,11 +4,14 @@ use indexmap::IndexMap;\n use std::collections::HashMap;\n use std::convert::TryInto;\n \n-const DIST_SERVER: &str = \"https://static.rust-lang.org\";\n+const PATH: &str = \"src/stage0.json\";\n const COMPILER_COMPONENTS: &[&str] = &[\"rustc\", \"rust-std\", \"cargo\"];\n const RUSTFMT_COMPONENTS: &[&str] = &[\"rustfmt-preview\"];\n \n struct Tool {\n+    config: Config,\n+    comments: Vec<String>,\n+\n     channel: Channel,\n     version: [u16; 3],\n     checksums: IndexMap<String, String>,\n@@ -32,26 +35,33 @@ impl Tool {\n             .try_into()\n             .map_err(|_| anyhow::anyhow!(\"failed to parse version\"))?;\n \n-        Ok(Self { channel, version, checksums: IndexMap::new() })\n+        let existing: Stage0 = serde_json::from_slice(&std::fs::read(PATH)?)?;\n+\n+        Ok(Self {\n+            channel,\n+            version,\n+            config: existing.config,\n+            comments: existing.comments,\n+            checksums: IndexMap::new(),\n+        })\n     }\n \n     fn update_json(mut self) -> Result<(), Error> {\n         std::fs::write(\n-            \"src/stage0.json\",\n+            PATH,\n             format!(\n                 \"{}\\n\",\n                 serde_json::to_string_pretty(&Stage0 {\n-                    comment: \"Generated by `./x.py run src/tools/bump-stage0`. \\\n-                              Run that command again to update the bootstrap compiler.\",\n-                    dist_server: DIST_SERVER.into(),\n                     compiler: self.detect_compiler()?,\n                     rustfmt: self.detect_rustfmt()?,\n                     checksums_sha256: {\n                         // Keys are sorted here instead of beforehand because values in this map\n                         // are added while filling the other struct fields just above this block.\n                         self.checksums.sort_keys();\n                         self.checksums\n-                    }\n+                    },\n+                    config: self.config,\n+                    comments: self.comments,\n                 })?\n             ),\n         )?;\n@@ -74,7 +84,7 @@ impl Tool {\n             Channel::Nightly => \"beta\".to_string(),\n         };\n \n-        let manifest = fetch_manifest(&channel)?;\n+        let manifest = fetch_manifest(&self.config, &channel)?;\n         self.collect_checksums(&manifest, COMPILER_COMPONENTS)?;\n         Ok(Stage0Toolchain {\n             date: manifest.date,\n@@ -100,13 +110,13 @@ impl Tool {\n             return Ok(None);\n         }\n \n-        let manifest = fetch_manifest(\"nightly\")?;\n+        let manifest = fetch_manifest(&self.config, \"nightly\")?;\n         self.collect_checksums(&manifest, RUSTFMT_COMPONENTS)?;\n         Ok(Some(Stage0Toolchain { date: manifest.date, version: \"nightly\".into() }))\n     }\n \n     fn collect_checksums(&mut self, manifest: &Manifest, components: &[&str]) -> Result<(), Error> {\n-        let prefix = format!(\"{}/\", DIST_SERVER);\n+        let prefix = format!(\"{}/\", self.config.dist_server);\n         for component in components {\n             let pkg = manifest\n                 .pkg\n@@ -136,10 +146,10 @@ fn main() -> Result<(), Error> {\n     Ok(())\n }\n \n-fn fetch_manifest(channel: &str) -> Result<Manifest, Error> {\n+fn fetch_manifest(config: &Config, channel: &str) -> Result<Manifest, Error> {\n     Ok(toml::from_slice(&http_get(&format!(\n         \"{}/dist/channel-rust-{}.toml\",\n-        DIST_SERVER, channel\n+        config.dist_server, channel\n     ))?)?)\n }\n \n@@ -166,35 +176,52 @@ enum Channel {\n     Nightly,\n }\n \n-#[derive(Debug, serde::Serialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Stage0 {\n-    #[serde(rename = \"__comment\")]\n-    comment: &'static str,\n-    dist_server: String,\n+    config: Config,\n+    // Comments are explicitly below the config, do not move them above.\n+    //\n+    // Downstream forks of the compiler codebase can change the configuration values defined above,\n+    // but doing so would risk merge conflicts whenever they import new changes that include a\n+    // bootstrap compiler bump.\n+    //\n+    // To lessen the pain, a big block of comments is placed between the configuration and the\n+    // auto-generated parts of the file, preventing git diffs of the config to include parts of the\n+    // auto-generated content and vice versa. This should prevent merge conflicts.\n+    #[serde(rename = \"__comments\")]\n+    comments: Vec<String>,\n     compiler: Stage0Toolchain,\n     rustfmt: Option<Stage0Toolchain>,\n     checksums_sha256: IndexMap<String, String>,\n }\n \n-#[derive(Debug, serde::Serialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n+struct Config {\n+    dist_server: String,\n+    artifacts_server: String,\n+    artifacts_with_llvm_assertions_server: String,\n+    git_merge_commit_email: String,\n+}\n+\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Stage0Toolchain {\n     date: String,\n     version: String,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Manifest {\n     date: String,\n     pkg: HashMap<String, ManifestPackage>,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct ManifestPackage {\n     version: String,\n     target: HashMap<String, ManifestTargetPackage>,\n }\n \n-#[derive(Debug, serde::Deserialize)]\n+#[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct ManifestTargetPackage {\n     url: Option<String>,\n     hash: Option<String>,"}]}