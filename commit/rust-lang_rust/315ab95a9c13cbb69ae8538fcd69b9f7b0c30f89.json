{"sha": "315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNWFiOTVhOWMxM2NiYjY5YWU4NTM4ZmNkNjliOWY3YjBjMzBmODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-25T04:10:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-25T04:10:07Z"}, "message": "Auto merge of #61150 - Centril:rollup-wmm7qga, r=Centril\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #61026 (Tweak macro parse errors when reaching EOF during macro call parse)\n - #61095 (Update cargo)\n - #61096 (tidy: don't short-circuit on license error)\n - #61107 (Fix a couple docs typos)\n - #61110 (Revert edition-guide toolstate override)\n - #61111 (Fixed type-alias-bounds lint doc)\n - #61113 (Deprecate `FnBox`. `Box<dyn FnOnce()>` can be called directly, since 1.35)\n - #61116 (Remove the incorrect warning from README.md)\n - #61118 (Dont ICE on an attempt to use GAT without feature gate)\n - #61121 (improve debug-printing of scalars)\n - #61125 (Updated my mailmap entry)\n - #61134 (Annotate each `reverse_bits` with `#[must_use]`)\n - #61138 (Move async/await tests to their own folder)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "11c1b9e9c76d0de8760e02fdca7690e9b8bfd0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c1b9e9c76d0de8760e02fdca7690e9b8bfd0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "html_url": "https://github.com/rust-lang/rust/commit/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "524580312039e4fa5ccf91e8f7093cd755bc1aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/524580312039e4fa5ccf91e8f7093cd755bc1aad", "html_url": "https://github.com/rust-lang/rust/commit/524580312039e4fa5ccf91e8f7093cd755bc1aad"}, {"sha": "19b5a103461c7bce5d53db64380360a684c1ce7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19b5a103461c7bce5d53db64380360a684c1ce7d", "html_url": "https://github.com/rust-lang/rust/commit/19b5a103461c7bce5d53db64380360a684c1ce7d"}], "stats": {"total": 652, "additions": 465, "deletions": 187}, "files": [{"sha": "2d5759b539e5dcd9317ced1226b45e5191597d45", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -6,7 +6,7 @@\n #\n \n Aaron Todd <github@opprobrio.us>\n-Aaron Power <theaaronepower@gmail.com>\n+Aaron Power <theaaronepower@gmail.com> Erin Power <xampprocky@gmail.com>\n Abhishek Chanda <abhishek.becs@gmail.com> Abhishek Chanda <abhishek@cloudscaling.com>\n Adolfo Ochagav\u00eda <aochagavia92@gmail.com>\n Adrien T\u00e9tar <adri-from-59@hotmail.fr>"}, {"sha": "39ea2fbdf279e2fd342d8e34e5705f7a20e9bf2a", "filename": "Cargo.lock", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -253,15 +253,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cargo\"\n-version = \"0.37.0\"\n+version = \"0.38.0\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytesize 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crates-io 0.25.0\",\n+ \"crates-io 0.26.0\",\n  \"crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crypto-hash 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -278,7 +278,7 @@ dependencies = [\n  \"hex 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"home 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"im-rc 12.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"im-rc 13.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -300,6 +300,7 @@ dependencies = [\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"strip-ansi-escapes 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -537,7 +538,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"crates-io\"\n-version = \"0.25.0\"\n+version = \"0.26.0\"\n dependencies = [\n  \"curl 0.4.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1163,10 +1164,11 @@ dependencies = [\n \n [[package]]\n name = \"im-rc\"\n-version = \"12.3.0\"\n+version = \"13.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"sized-chunks 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2239,7 +2241,7 @@ dependencies = [\n name = \"rls\"\n version = \"1.36.0\"\n dependencies = [\n- \"cargo 0.37.0\",\n+ \"cargo 0.38.0\",\n  \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy_lints 0.0.212\",\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3263,6 +3265,14 @@ name = \"siphasher\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"sized-chunks\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"slab\"\n version = \"0.4.2\"\n@@ -3348,6 +3358,14 @@ name = \"string_cache_shared\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"strip-ansi-escapes\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"vte 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"strsim\"\n version = \"0.7.0\"\n@@ -3924,6 +3942,11 @@ name = \"utf8-ranges\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"utf8parse\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"vcpkg\"\n version = \"0.2.6\"\n@@ -3954,6 +3977,14 @@ name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"vte\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"utf8parse 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"wait-timeout\"\n version = \"0.1.5\"\n@@ -4158,7 +4189,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\"\n \"checksum if_chain 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bac95d9aa0624e7b78187d6fb8ab012b41d9f6f54b1bcb61e61c4845f8357ec\"\n \"checksum ignore 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dc57fa12805f367736a38541ac1a9fc6a52812a0ca959b1d4d4b640a89eb002\"\n-\"checksum im-rc 12.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9460397452f537fd51808056ff209f4c4c4c9d20d42ae952f517708726284972\"\n+\"checksum im-rc 13.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a0197597d095c0d11107975d3175173f810ee572c2501ff4de64f4f3f119806\"\n \"checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08\"\n \"checksum is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e5b386aef33a1c677be65237cb9d32c3f3ef56bd035949710c4bb13083eb053\"\n \"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\"\n@@ -4309,13 +4340,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum signal-hook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f272d1b7586bec132ed427f532dd418d8beca1ca7f2caf7df35569b1415a4b4\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n+\"checksum sized-chunks 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a2a2eb3fe454976eefb479f78f9b394d34d661b647c6326a3a6e66f68bb12c26\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \"checksum smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b73ea3738b47563803ef814925e69be00799a8c07420be8b996f8e98fb2336db\"\n \"checksum socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4d11a52082057d87cb5caa31ad812f4504b97ab44732cd8359df2e9ff9f48e7\"\n \"checksum stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffbc596e092fe5f598b12ef46cc03754085ac2f4d8c739ad61c4ae266cc3b3fa\"\n \"checksum string_cache 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25d70109977172b127fe834e5449e5ab1740b9ba49fa18a2020f509174f25423\"\n \"checksum string_cache_codegen 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eea1eee654ef80933142157fdad9dd8bc43cf7c74e999e369263496f04ff4da\"\n \"checksum string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b1884d1bc09741d466d9b14e6d37ac89d6909cbcac41dd9ae982d4d063bbedfc\"\n+\"checksum strip-ansi-escapes 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d63676e2abafa709460982ddc02a3bb586b6d15a49b75c212e06edd3933acee\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum strum 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f6c3a2071519ab6a48f465808c4c1ffdd00dfc8e93111d02b4fc5abab177676e\"\n \"checksum strum_macros 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8baacebd7b7c9b864d83a6ba7a246232983e277b86fa5cdec77f565715a4b136\"\n@@ -4368,11 +4401,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"74e7d099f1ee52f823d4bdd60c93c3602043c728f5db3b97bdb548467f7bddea\"\n \"checksum utf-8 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1262dfab4c30d5cb7c07026be00ee343a6cf5027fdc0104a9160f354e5db75c\"\n \"checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737\"\n+\"checksum utf8parse 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8772a4ccbb4e89959023bc5b7cb8623a795caa7092d99f3aa9501b9484d4557d\"\n \"checksum vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"def296d3eb3b12371b2c7d0e83bfe1403e4db2d7a0bba324a12b21c4ee13143d\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n \"checksum vergen 3.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6aba5e34f93dc7051dfad05b98a18e9156f27e7b431fe1d2398cb6061c0a1dba\"\n \"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n+\"checksum vte 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f42f536e22f7fcbb407639765c8fd78707a33109301f834a594758bedd6e8cf\"\n \"checksum wait-timeout 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9f3bf741a801531993db6478b95682117471f76916f5e690dd8d45395b09349\"\n \"checksum walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d9d7ed3431229a144296213105a390676cc49c9b6a72bd19f3176c98e129fa1\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\""}, {"sha": "b522b161ecf939d23c877e6448ddcd88cb6bef4d", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -134,9 +134,8 @@ MSVC builds of Rust additionally require an installation of Visual Studio 2017\n \n [Visual Studio Build Tools]: https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019\n \n-At last check (cmake 3.14.3 and msvc 16.0.3) using the 2019 tools fails to\n-build the in-tree LLVM build with a CMake error, so use 2017 instead by\n-including the \u201cMSVC v141 \u2013 VS 2017 C++ x64/x86 build tools (v14.16)\u201d component.\n+(If you're installing cmake yourself, be careful that \u201cC++ CMake tools for\n+Windows\u201d doesn't get included under \u201cIndividual components\u201d.)\n \n With these dependencies installed, you can build the compiler in a `cmd.exe`\n shell with:\n@@ -151,7 +150,7 @@ then you may need to force rustbuild to use an older version. This can be done\n by manually calling the appropriate vcvars file before running the bootstrap.\n \n ```batch\n-> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvars64.bat\"\n+> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n > python x.py build\n ```\n "}, {"sha": "af0198705a2fefda34bf4f1ea5efc881078d2081", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -74,9 +74,7 @@ status_check() {\n     check_dispatch $1 beta nomicon src/doc/nomicon\n     check_dispatch $1 beta reference src/doc/reference\n     check_dispatch $1 beta rust-by-example src/doc/rust-by-example\n-    # Temporarily disabled until\n-    # https://github.com/rust-lang/rust/issues/60459 is fixed.\n-    # check_dispatch $1 beta edition-guide src/doc/edition-guide\n+    check_dispatch $1 beta edition-guide src/doc/edition-guide\n     check_dispatch $1 beta rls src/tools/rls\n     check_dispatch $1 beta rustfmt src/tools/rustfmt\n     check_dispatch $1 beta clippy-driver src/tools/clippy"}, {"sha": "f090f142c0816cb17e5c363b7cc3bcd0e1f0e79c", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -529,18 +529,21 @@ This lint detects bounds in type aliases. These are not currently enforced.\n Some example code that triggers this lint:\n \n ```rust\n+#[allow(dead_code)]\n type SendVec<T: Send> = Vec<T>;\n ```\n \n This will produce:\n \n ```text\n-warning: type alias is never used: `SendVec`\n- --> src/main.rs:1:1\n+warning: bounds on generic parameters are not enforced in type aliases\n+ --> src/lib.rs:2:17\n   |\n-1 | type SendVec<T: Send> = Vec<T>;\n-  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+2 | type SendVec<T: Send> = Vec<T>;\n+  |                 ^^^^\n   |\n+  = note: #[warn(type_alias_bounds)] on by default\n+  = help: the bound will not be checked when the type alias is used, and should be removed\n ```\n \n ## tyvar-behind-raw-pointer"}, {"sha": "bf8f5b8b91a1eccf60d13d2c6d40e31d2eb904dc", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -759,13 +759,14 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n     }\n }\n \n+/// `FnBox` is deprecated and will be removed.\n+/// `Box<dyn FnOnce()>` can be called directly, since Rust 1.35.0.\n+///\n /// `FnBox` is a version of the `FnOnce` intended for use with boxed\n-/// closure objects. The idea is that where one would normally store a\n-/// `Box<dyn FnOnce()>` in a data structure, you should use\n+/// closure objects. The idea was that where one would normally store a\n+/// `Box<dyn FnOnce()>` in a data structure, you whould use\n /// `Box<dyn FnBox()>`. The two traits behave essentially the same, except\n-/// that a `FnBox` closure can only be called if it is boxed. (Note\n-/// that `FnBox` may be deprecated in the future if `Box<dyn FnOnce()>`\n-/// closures become directly usable.)\n+/// that a `FnBox` closure can only be called if it is boxed.\n ///\n /// # Examples\n ///\n@@ -777,6 +778,7 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n ///\n /// ```\n /// #![feature(fnbox)]\n+/// #![allow(deprecated)]\n ///\n /// use std::boxed::FnBox;\n /// use std::collections::HashMap;\n@@ -796,16 +798,38 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n ///     }\n /// }\n /// ```\n+///\n+/// In Rust 1.35.0 or later, use `FnOnce`, `FnMut`, or `Fn` instead:\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// fn make_map() -> HashMap<i32, Box<dyn FnOnce() -> i32>> {\n+///     let mut map: HashMap<i32, Box<dyn FnOnce() -> i32>> = HashMap::new();\n+///     map.insert(1, Box::new(|| 22));\n+///     map.insert(2, Box::new(|| 44));\n+///     map\n+/// }\n+///\n+/// fn main() {\n+///     let mut map = make_map();\n+///     for i in &[1, 2] {\n+///         let f = map.remove(&i).unwrap();\n+///         assert_eq!(f(), i * 22);\n+///     }\n+/// }\n+/// ```\n #[rustc_paren_sugar]\n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\", issue = \"28796\")]\n+#[rustc_deprecated(reason = \"use `FnOnce`, `FnMut`, or `Fn` instead\", since = \"1.37.0\")]\n pub trait FnBox<A>: FnOnce<A> {\n     /// Performs the call operation.\n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n \n-#[unstable(feature = \"fnbox\",\n-           reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\", issue = \"28796\")]\n+#[rustc_deprecated(reason = \"use `FnOnce`, `FnMut`, or `Fn` instead\", since = \"1.37.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n impl<A, F> FnBox<A> for F\n     where F: FnOnce<A>\n {"}, {"sha": "80341409037683e6db06685ec7b9c424839fdab7", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -11,7 +11,7 @@\n //! mutate it.\n //!\n //! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n-//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n+//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allow doing this in a single-threaded\n //! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n //! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n //! use [`Mutex`](../../std/sync/struct.Mutex.html),"}, {"sha": "7ec75ed0114889adb302a009fe71c8e6bb4628a9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -473,6 +473,7 @@ assert_eq!(m, \", $reversed, \");\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n+            #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n                 (self as $UnsignedT).reverse_bits() as Self\n             }\n@@ -2522,6 +2523,7 @@ assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[inline]\n+            #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n                 intrinsics::bitreverse(self as $ActualT) as Self\n             }"}, {"sha": "5eb5ec558f8c132a847e0ba3680c2360d99e5e16", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -524,6 +524,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// ```\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n             #[inline]\n+            #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())\n             }"}, {"sha": "3d78b9b6382b72f68791051a7f3e16ac71dfacfc", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -658,12 +658,15 @@ impl<'tcx> ScopeTree {\n             // The lifetime was defined on node that doesn't own a body,\n             // which in practice can only mean a trait or an impl, that\n             // is the parent of a method, and that is enforced below.\n-            assert_eq!(Some(param_owner_id), self.root_parent,\n-                       \"free_scope: {:?} not recognized by the \\\n-                        region scope tree for {:?} / {:?}\",\n-                       param_owner,\n-                       self.root_parent.map(|id| tcx.hir().local_def_id_from_hir_id(id)),\n-                       self.root_body.map(|hir_id| DefId::local(hir_id.owner)));\n+            if Some(param_owner_id) != self.root_parent {\n+                tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    &format!(\"free_scope: {:?} not recognized by the \\\n+                              region scope tree for {:?} / {:?}\",\n+                             param_owner,\n+                             self.root_parent.map(|id| tcx.hir().local_def_id_from_hir_id(id)),\n+                             self.root_body.map(|hir_id| DefId::local(hir_id.owner))));\n+            }\n \n             // The trait/impl lifetime is in scope for the method's body.\n             self.root_body.unwrap().local_id"}, {"sha": "356c4cc16c23c68b1cc2fd72afb7cf4640a97f44", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use crate::mir;\n use crate::ty::layout::{self, HasDataLayout, Size};\n use rustc_macros::HashStable;\n@@ -70,7 +72,7 @@ impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n ///\n /// Pointer is also generic over the `Tag` associated with each pointer,\n /// which is used to do provenance tracking during execution.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd,\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub struct Pointer<Tag=(),Id=AllocId> {\n     pub alloc_id: Id,\n@@ -80,6 +82,18 @@ pub struct Pointer<Tag=(),Id=AllocId> {\n \n static_assert_size!(Pointer, 16);\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n+    default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}.{:#x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n+    }\n+}\n+// Specialization for no tag\n+impl<Id: fmt::Debug> fmt::Debug for Pointer<(), Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}.{:#x}\", self.alloc_id, self.offset.bytes())\n+    }\n+}\n+\n /// Produces a `Pointer` which points to the beginning of the Allocation\n impl From<AllocId> for Pointer {\n     #[inline(always)]"}, {"sha": "6b6f7f7a30740da24cf03fa4dcdb4163af1cdd35", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd,\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd,\n          RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub enum Scalar<Tag=(), Id=AllocId> {\n     /// The raw bytes of a simple value.\n@@ -113,6 +113,27 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(Scalar, 24);\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Scalar<Tag, Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Scalar::Ptr(ptr) =>\n+                write!(f, \"{:?}\", ptr),\n+            &Scalar::Bits { bits, size } => {\n+                if size == 0 {\n+                    assert_eq!(bits, 0, \"ZST value must be 0\");\n+                    write!(f, \"<ZST>\")\n+                } else {\n+                    assert_eq!(truncate(bits, Size::from_bytes(size as u64)), bits,\n+                            \"Scalar value {:#x} exceeds size of {} bytes\", bits, size);\n+                    // Format as hex number wide enough to fit any value of the given `size`.\n+                    // So bits=20, size=1 will be \"0x14\", but with size=4 it'll be \"0x00000014\".\n+                    write!(f, \"0x{:>0width$x}\", bits, width=(size*2) as usize)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<Tag> fmt::Display for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n@@ -412,7 +433,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,\n@@ -425,6 +446,15 @@ impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n     }\n }\n \n+impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for ScalarMaybeUndef<Tag, Id> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ScalarMaybeUndef::Undef => write!(f, \"Undef\"),\n+            ScalarMaybeUndef::Scalar(s) => write!(f, \"{:?}\", s),\n+        }\n+    }\n+}\n+\n impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {"}, {"sha": "1c17ace90c2fbbc458f1ea4e8dab464da5e67ed7", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -226,12 +226,12 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         Ok(result)\n     }\n \n-    fn verify(&self,\n-              tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-              trait_def_id: DefId,\n-              span: Span)\n-              -> Result<(), ErrorReported>\n-    {\n+    fn verify(\n+        &self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        trait_def_id: DefId,\n+        span: Span,\n+    ) -> Result<(), ErrorReported> {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n         let parser = Parser::new(&self.0, None, vec![], false);\n@@ -272,12 +272,12 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         result\n     }\n \n-    pub fn format(&self,\n-                  tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                  trait_ref: ty::TraitRef<'tcx>,\n-                  options: &FxHashMap<String, String>)\n-                  -> String\n-    {\n+    pub fn format(\n+        &self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        trait_ref: ty::TraitRef<'tcx>,\n+        options: &FxHashMap<String, String>,\n+    ) -> String {\n         let name = tcx.item_name(trait_ref.def_id);\n         let trait_str = tcx.def_path_str(trait_ref.def_id);\n         let generics = tcx.generics_of(trait_ref.def_id);"}, {"sha": "75ba1dd46ca2a8260f4390d720d06a1c63025f57", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -479,21 +479,22 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> {\n         // the specialized routine `ty::replace_late_regions()`.\n         match *r {\n             ty::ReEarlyBound(data) => {\n-                let r = self.substs.get(data.index as usize).map(|k| k.unpack());\n-                match r {\n+                let rk = self.substs.get(data.index as usize).map(|k| k.unpack());\n+                match rk {\n                     Some(UnpackedKind::Lifetime(lt)) => {\n                         self.shift_region_through_binders(lt)\n                     }\n                     _ => {\n                         let span = self.span.unwrap_or(DUMMY_SP);\n-                        span_bug!(\n-                            span,\n+                        let msg = format!(\n                             \"Region parameter out of range \\\n                              when substituting in region {} (root type={:?}) \\\n                              (index={})\",\n                             data.name,\n                             self.root_ty,\n                             data.index);\n+                        self.tcx.sess.delay_span_bug(span, &msg);\n+                        r\n                     }\n                 }\n             }"}, {"sha": "00e840a53e9c0e05f9f2f12b58d450c5134ed62a", "filename": "src/libstd/env.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -465,7 +465,7 @@ pub struct JoinPathsError {\n /// # }\n /// ```\n ///\n-/// Using `env::join_paths` with `env::spit_paths` to append an item to the `PATH` environment\n+/// Using `env::join_paths` with [`env::split_paths`] to append an item to the `PATH` environment\n /// variable:\n ///\n /// ```\n@@ -483,6 +483,8 @@ pub struct JoinPathsError {\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// [`env::split_paths`]: fn.split_paths.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     where I: IntoIterator<Item=T>, T: AsRef<OsStr>"}, {"sha": "48948e4d0d79c1829c30cbbf199319c4ab046737", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -278,7 +278,14 @@ impl Attribute {\n     pub fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n-        let mut parser = Parser::new(sess, self.tokens.clone(), None, false, false);\n+        let mut parser = Parser::new(\n+            sess,\n+            self.tokens.clone(),\n+            None,\n+            false,\n+            false,\n+            Some(\"attribute\"),\n+        );\n         let result = f(&mut parser)?;\n         if parser.token != token::Eof {\n             parser.unexpected()?;"}, {"sha": "dbec379e76995cc0025b28e960ab437d54ce64f2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -11,7 +11,7 @@ use crate::parse::{self, parser, DirectoryOwnership};\n use crate::parse::token;\n use crate::ptr::P;\n use crate::symbol::{kw, sym, Ident, Symbol};\n-use crate::ThinVec;\n+use crate::{ThinVec, MACRO_ARGUMENTS};\n use crate::tokenstream::{self, TokenStream};\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -850,7 +850,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree]) -> parser::Parser<'a> {\n-        parse::stream_to_parser(self.parse_sess, tts.iter().cloned().collect())\n+        parse::stream_to_parser(self.parse_sess, tts.iter().cloned().collect(), MACRO_ARGUMENTS)\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }"}, {"sha": "e55226b8579bda2566c2929225d8212c72343c96", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -658,7 +658,14 @@ pub fn parse(\n     recurse_into_modules: bool,\n ) -> NamedParseResult {\n     // Create a parser that can be used for the \"black box\" parts.\n-    let mut parser = Parser::new(sess, tts, directory, recurse_into_modules, true);\n+    let mut parser = Parser::new(\n+        sess,\n+        tts,\n+        directory,\n+        recurse_into_modules,\n+        true,\n+        crate::MACRO_ARGUMENTS,\n+    );\n \n     // A queue of possible matcher positions. We initialize it with the matcher position in which\n     // the \"dot\" is before the first token of the first token tree in `ms`. `inner_parse_loop` then"}, {"sha": "2debd8f048bc35a578fafd2429062c9ebfd81c0d", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -172,7 +172,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                     path: Cow::from(cx.current_expansion.module.directory.as_path()),\n                     ownership: cx.current_expansion.directory_ownership,\n                 };\n-                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false);\n+                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false, None);\n                 p.root_module_name = cx.current_expansion.module.mod_path.last()\n                     .map(|id| id.as_str().to_string());\n "}, {"sha": "4229121b3d0759cdf370a535e66700b1aac43679", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -31,6 +31,8 @@ pub use rustc_data_structures::thin_vec::ThinVec;\n use ast::AttrId;\n use syntax_pos::edition::Edition;\n \n+const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n+\n // A variant of 'try!' that panics on an Err. This is used as a crutch on the\n // way towards a non-panic!-prone parser. It should be used for fatal parsing\n // errors; eventually we plan to convert all code using panictry to just use"}, {"sha": "810acc9cc923e25fc47c38600abceadc881f7818", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -13,7 +13,7 @@ use crate::symbol::kw;\n use crate::ThinVec;\n use errors::{Applicability, DiagnosticBuilder};\n use log::debug;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n pub trait RecoverQPath: Sized + 'static {\n     const PATH_STYLE: PathStyle = PathStyle::Expr;\n@@ -201,7 +201,7 @@ impl<'a> Parser<'a> {\n \n         let mut path = ast::Path {\n             segments: Vec::new(),\n-            span: syntax_pos::DUMMY_SP,\n+            span: DUMMY_SP,\n         };\n         self.parse_path_segments(&mut path.segments, T::PATH_STYLE)?;\n         path.span = ty_span.to(self.prev_span);\n@@ -267,6 +267,58 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Create a `DiagnosticBuilder` for an unexpected token `t` and try to recover if it is a\n+    /// closing delimiter.\n+    pub fn unexpected_try_recover(\n+        &mut self,\n+        t: &token::Token,\n+    ) -> PResult<'a, bool /* recovered */> {\n+        let token_str = pprust::token_to_string(t);\n+        let this_token_str = self.this_token_descr();\n+        let (prev_sp, sp) = match (&self.token, self.subparser_name) {\n+            // Point at the end of the macro call when reaching end of macro arguments.\n+            (token::Token::Eof, Some(_)) => {\n+                let sp = self.sess.source_map().next_point(self.span);\n+                (sp, sp)\n+            }\n+            // We don't want to point at the following span after DUMMY_SP.\n+            // This happens when the parser finds an empty TokenStream.\n+            _ if self.prev_span == DUMMY_SP => (self.span, self.span),\n+            // EOF, don't want to point at the following char, but rather the last token.\n+            (token::Token::Eof, None) => (self.prev_span, self.span),\n+            _ => (self.sess.source_map().next_point(self.prev_span), self.span),\n+        };\n+        let msg = format!(\n+            \"expected `{}`, found {}\",\n+            token_str,\n+            match (&self.token, self.subparser_name) {\n+                (token::Token::Eof, Some(origin)) => format!(\"end of {}\", origin),\n+                _ => this_token_str,\n+            },\n+        );\n+        let mut err = self.struct_span_err(sp, &msg);\n+        let label_exp = format!(\"expected `{}`\", token_str);\n+        match self.recover_closing_delimiter(&[t.clone()], err) {\n+            Err(e) => err = e,\n+            Ok(recovered) => {\n+                return Ok(recovered);\n+            }\n+        }\n+        let cm = self.sess.source_map();\n+        match (cm.lookup_line(prev_sp.lo()), cm.lookup_line(sp.lo())) {\n+            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n+                // When the spans are in the same line, it means that the only content\n+                // between them is whitespace, point only at the found token.\n+                err.span_label(sp, label_exp);\n+            }\n+            _ => {\n+                err.span_label(prev_sp, label_exp);\n+                err.span_label(sp, \"unexpected token\");\n+            }\n+        }\n+        Err(err)\n+    }\n+\n     /// Consume alternative await syntaxes like `await <expr>`, `await? <expr>`, `await(<expr>)`\n     /// and `await { <expr> }`.\n     crate fn parse_incorrect_await_syntax(\n@@ -562,4 +614,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    crate fn expected_expression_found(&self) -> DiagnosticBuilder<'a> {\n+        let (span, msg) = match (&self.token, self.subparser_name) {\n+            (&token::Token::Eof, Some(origin)) => {\n+                let sp = self.sess.source_map().next_point(self.span);\n+                (sp, format!(\"expected expression, found end of {}\", origin))\n+            }\n+            _ => (self.span, format!(\n+                \"expected expression, found {}\",\n+                self.this_token_descr(),\n+            )),\n+        };\n+        let mut err = self.struct_span_err(span, &msg);\n+        let sp = self.sess.source_map().start_point(self.span);\n+        if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n+            self.sess.expr_parentheses_needed(&mut err, *sp, None);\n+        }\n+        err.span_label(span, \"expected expression\");\n+        err\n+    }\n }"}, {"sha": "f7a7aba9ecbaa1fdf3063012ebc4ed77a3d2b065", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -236,7 +236,7 @@ fn maybe_source_file_to_parser(\n ) -> Result<Parser<'_>, Vec<Diagnostic>> {\n     let end_pos = source_file.end_pos;\n     let (stream, unclosed_delims) = maybe_file_to_stream(sess, source_file, None)?;\n-    let mut parser = stream_to_parser(sess, stream);\n+    let mut parser = stream_to_parser(sess, stream, None);\n     parser.unclosed_delims = unclosed_delims;\n     if parser.token == token::Eof && parser.span.is_dummy() {\n         parser.span = Span::new(end_pos, end_pos, parser.span.ctxt());\n@@ -248,7 +248,7 @@ fn maybe_source_file_to_parser(\n // must preserve old name for now, because quote! from the *existing*\n // compiler expands into it\n pub fn new_parser_from_tts(sess: &ParseSess, tts: Vec<TokenTree>) -> Parser<'_> {\n-    stream_to_parser(sess, tts.into_iter().collect())\n+    stream_to_parser(sess, tts.into_iter().collect(), crate::MACRO_ARGUMENTS)\n }\n \n \n@@ -328,8 +328,12 @@ pub fn maybe_file_to_stream(\n }\n \n /// Given stream and the `ParseSess`, produces a parser.\n-pub fn stream_to_parser(sess: &ParseSess, stream: TokenStream) -> Parser<'_> {\n-    Parser::new(sess, stream, None, true, false)\n+pub fn stream_to_parser<'a>(\n+    sess: &'a ParseSess,\n+    stream: TokenStream,\n+    subparser_name: Option<&'static str>,\n+) -> Parser<'a> {\n+    Parser::new(sess, stream, None, true, false, subparser_name)\n }\n \n /// Given stream, the `ParseSess` and the base directory, produces a parser.\n@@ -343,10 +347,12 @@ pub fn stream_to_parser(sess: &ParseSess, stream: TokenStream) -> Parser<'_> {\n /// The main usage of this function is outside of rustc, for those who uses\n /// libsyntax as a library. Please do not remove this function while refactoring\n /// just because it is not used in rustc codebase!\n-pub fn stream_to_parser_with_base_dir<'a>(sess: &'a ParseSess,\n-                                          stream: TokenStream,\n-                                          base_dir: Directory<'a>) -> Parser<'a> {\n-    Parser::new(sess, stream, Some(base_dir), true, false)\n+pub fn stream_to_parser_with_base_dir<'a>(\n+    sess: &'a ParseSess,\n+    stream: TokenStream,\n+    base_dir: Directory<'a>,\n+) -> Parser<'a> {\n+    Parser::new(sess, stream, Some(base_dir), true, false, None)\n }\n \n /// A sequence separator."}, {"sha": "56951ae08012a5230d8ddd671c6cc40a7bd80401", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 60, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -51,7 +51,7 @@ use crate::symbol::{kw, sym, Symbol};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{\n-    Span, MultiSpan, BytePos, FileName,\n+    BytePos, DUMMY_SP, FileName, MultiSpan, Span,\n     hygiene::CompilerDesugaringKind,\n };\n use log::{debug, trace};\n@@ -233,6 +233,8 @@ pub struct Parser<'a> {\n     /// error.\n     crate unclosed_delims: Vec<UnmatchedBrace>,\n     last_unexpected_token_span: Option<Span>,\n+    /// If present, this `Parser` is not parsing Rust code but rather a macro call.\n+    crate subparser_name: Option<&'static str>,\n }\n \n impl<'a> Drop for Parser<'a> {\n@@ -309,7 +311,7 @@ impl TokenCursor {\n                 self.frame = frame;\n                 continue\n             } else {\n-                return TokenAndSpan { tok: token::Eof, sp: syntax_pos::DUMMY_SP }\n+                return TokenAndSpan { tok: token::Eof, sp: DUMMY_SP }\n             };\n \n             match self.frame.last_token {\n@@ -533,17 +535,19 @@ enum TokenExpectType {\n }\n \n impl<'a> Parser<'a> {\n-    pub fn new(sess: &'a ParseSess,\n-               tokens: TokenStream,\n-               directory: Option<Directory<'a>>,\n-               recurse_into_file_modules: bool,\n-               desugar_doc_comments: bool)\n-               -> Self {\n+    pub fn new(\n+        sess: &'a ParseSess,\n+        tokens: TokenStream,\n+        directory: Option<Directory<'a>>,\n+        recurse_into_file_modules: bool,\n+        desugar_doc_comments: bool,\n+        subparser_name: Option<&'static str>,\n+    ) -> Self {\n         let mut parser = Parser {\n             sess,\n             token: token::Whitespace,\n-            span: syntax_pos::DUMMY_SP,\n-            prev_span: syntax_pos::DUMMY_SP,\n+            span: DUMMY_SP,\n+            prev_span: DUMMY_SP,\n             meta_var_span: None,\n             prev_token_kind: PrevTokenKind::Other,\n             restrictions: Restrictions::empty(),\n@@ -568,6 +572,7 @@ impl<'a> Parser<'a> {\n             max_angle_bracket_count: 0,\n             unclosed_delims: Vec::new(),\n             last_unexpected_token_span: None,\n+            subparser_name,\n         };\n \n         let tok = parser.next_tok();\n@@ -631,44 +636,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.\n-    pub fn expect(&mut self, t: &token::Token) -> PResult<'a,  bool /* recovered */> {\n+    pub fn expect(&mut self, t: &token::Token) -> PResult<'a, bool /* recovered */> {\n         if self.expected_tokens.is_empty() {\n             if self.token == *t {\n                 self.bump();\n                 Ok(false)\n             } else {\n-                let token_str = pprust::token_to_string(t);\n-                let this_token_str = self.this_token_descr();\n-                let mut err = self.fatal(&format!(\"expected `{}`, found {}\",\n-                                                  token_str,\n-                                                  this_token_str));\n-\n-                let sp = if self.token == token::Token::Eof {\n-                    // EOF, don't want to point at the following char, but rather the last token\n-                    self.prev_span\n-                } else {\n-                    self.sess.source_map().next_point(self.prev_span)\n-                };\n-                let label_exp = format!(\"expected `{}`\", token_str);\n-                match self.recover_closing_delimiter(&[t.clone()], err) {\n-                    Err(e) => err = e,\n-                    Ok(recovered) => {\n-                        return Ok(recovered);\n-                    }\n-                }\n-                let cm = self.sess.source_map();\n-                match (cm.lookup_line(self.span.lo()), cm.lookup_line(sp.lo())) {\n-                    (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                        // When the spans are in the same line, it means that the only content\n-                        // between them is whitespace, point only at the found token.\n-                        err.span_label(self.span, label_exp);\n-                    }\n-                    _ => {\n-                        err.span_label(sp, label_exp);\n-                        err.span_label(self.span, \"unexpected token\");\n-                    }\n-                }\n-                Err(err)\n+                self.unexpected_try_recover(t)\n             }\n         } else {\n             self.expect_one_of(slice::from_ref(t), &[])\n@@ -812,7 +786,7 @@ impl<'a> Parser<'a> {\n                     //   |                   expected one of 8 possible tokens here\n                     err.span_label(self.span, label_exp);\n                 }\n-                _ if self.prev_span == syntax_pos::DUMMY_SP => {\n+                _ if self.prev_span == DUMMY_SP => {\n                     // Account for macro context where the previous span might not be\n                     // available to avoid incorrect output (#54841).\n                     err.span_label(self.span, \"unexpected token\");\n@@ -2041,7 +2015,7 @@ impl<'a> Parser<'a> {\n             path = self.parse_path(PathStyle::Type)?;\n             path_span = path_lo.to(self.prev_span);\n         } else {\n-            path = ast::Path { segments: Vec::new(), span: syntax_pos::DUMMY_SP };\n+            path = ast::Path { segments: Vec::new(), span: DUMMY_SP };\n             path_span = self.span.to(self.span);\n         }\n \n@@ -2627,17 +2601,7 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(mut err) => {\n                             self.cancel(&mut err);\n-                            let msg = format!(\"expected expression, found {}\",\n-                                              self.this_token_descr());\n-                            let mut err = self.fatal(&msg);\n-                            let sp = self.sess.source_map().start_point(self.span);\n-                            if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow()\n-                                .get(&sp)\n-                            {\n-                                self.sess.expr_parentheses_needed(&mut err, *sp, None);\n-                            }\n-                            err.span_label(self.span, \"expected expression\");\n-                            return Err(err);\n+                            return Err(self.expected_expression_found());\n                         }\n                     }\n                 }\n@@ -5592,7 +5556,7 @@ impl<'a> Parser<'a> {\n                 where_clause: WhereClause {\n                     id: ast::DUMMY_NODE_ID,\n                     predicates: Vec::new(),\n-                    span: syntax_pos::DUMMY_SP,\n+                    span: DUMMY_SP,\n                 },\n                 span: span_lo.to(self.prev_span),\n             })\n@@ -5838,7 +5802,7 @@ impl<'a> Parser<'a> {\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n-            span: syntax_pos::DUMMY_SP,\n+            span: DUMMY_SP,\n         };\n \n         if !self.eat_keyword(kw::Where) {\n@@ -7005,15 +6969,15 @@ impl<'a> Parser<'a> {\n                             Ident::with_empty_ctxt(sym::warn_directory_ownership)),\n                         tokens: TokenStream::empty(),\n                         is_sugared_doc: false,\n-                        span: syntax_pos::DUMMY_SP,\n+                        span: DUMMY_SP,\n                     };\n                     attr::mark_known(&attr);\n                     attrs.push(attr);\n                 }\n                 Ok((id, ItemKind::Mod(module), Some(attrs)))\n             } else {\n                 let placeholder = ast::Mod {\n-                    inner: syntax_pos::DUMMY_SP,\n+                    inner: DUMMY_SP,\n                     items: Vec::new(),\n                     inline: false\n                 };"}, {"sha": "704665e0a84d66917d135ad035327988f7a146c7", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -138,7 +138,11 @@ fn parse_inline_asm<'a>(\n                 if p2.token != token::Eof {\n                     let mut extra_tts = p2.parse_all_token_trees()?;\n                     extra_tts.extend(tts[first_colon..].iter().cloned());\n-                    p = parse::stream_to_parser(cx.parse_sess, extra_tts.into_iter().collect());\n+                    p = parse::stream_to_parser(\n+                        cx.parse_sess,\n+                        extra_tts.into_iter().collect(),\n+                        Some(\"inline assembly\"),\n+                    );\n                 }\n \n                 asm = s;"}, {"sha": "975d96951dc5571d54d8090ca80b1362e5ecb44d", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -89,7 +89,7 @@ impl MultiItemModifier for ProcMacroDerive {\n         let error_count_before = ecx.parse_sess.span_diagnostic.err_count();\n         let msg = \"proc-macro derive produced unparseable tokens\";\n \n-        let mut parser = parse::stream_to_parser(ecx.parse_sess, stream);\n+        let mut parser = parse::stream_to_parser(ecx.parse_sess, stream, Some(\"proc-macro derive\"));\n         let mut items = vec![];\n \n         loop {"}, {"sha": "8bd0d74cd1710673bd62e8a34d22a1c7118e04f9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -22,7 +22,6 @@\n #![unstable(feature = \"test\", issue = \"27812\")]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(asm)]\n-#![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n #![feature(nll)]\n #![feature(set_stdio)]\n@@ -56,7 +55,6 @@ pub use self::TestResult::*;\n \n use std::any::Any;\n use std::borrow::Cow;\n-use std::boxed::FnBox;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::env;\n@@ -174,7 +172,7 @@ pub trait TDynBenchFn: Send {\n pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n-    DynTestFn(Box<dyn FnBox() + Send>),\n+    DynTestFn(Box<dyn FnOnce() + Send>),\n     DynBenchFn(Box<dyn TDynBenchFn + 'static>),\n }\n \n@@ -1447,7 +1445,7 @@ pub fn run_test(\n         desc: TestDesc,\n         monitor_ch: Sender<MonitorMsg>,\n         nocapture: bool,\n-        testfn: Box<dyn FnBox() + Send>,\n+        testfn: Box<dyn FnOnce() + Send>,\n         concurrency: Concurrent,\n     ) {\n         // Buffer for capturing standard I/O"}, {"sha": "74a4dd5d8515b3825743b6b1f1f971a58cae4093", "filename": "src/test/run-pass/unsized-locals/fnbox-compat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-locals%2Ffnbox-compat.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,4 +1,5 @@\n #![feature(fnbox)]\n+#![allow(deprecated, deprecated_in_future)]\n \n use std::boxed::FnBox;\n "}, {"sha": "6fa013e5c54ca6764f175da94a6a2b2c47ea41fa", "filename": "src/test/ui/async-await/async-await.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n // edition:2018\n // aux-build:arc_wake.rs\n ", "previous_filename": "src/test/run-pass/async-await.rs"}, {"sha": "e3ac817b15ca580e5e9484c8436793020c78f3a4", "filename": "src/test/ui/async-await/async-fn-multiple-lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-multiple-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-multiple-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-multiple-lifetimes.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-fn-multiple-lifetimes.rs"}, {"sha": "8c3ee2bed830b7bb88cc3990f95b480dc337a625", "filename": "src/test/ui/async-await/async-fn-multiple-lifetimes.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-multiple-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-multiple-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-multiple-lifetimes.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-fn-multiple-lifetimes.stderr"}, {"sha": "8db7631ef41086cd70636b123ef234748a49c2cc", "filename": "src/test/ui/async-await/async-fn-path-elision.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-fn-path-elision.rs"}, {"sha": "3b311baba01de961534b7d9b12b7006f5fa1b287", "filename": "src/test/ui/async-await/async-fn-path-elision.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-fn-path-elision.stderr"}, {"sha": "f375d58d98495997e6bd0ece6709e5e2f0bc7edd", "filename": "src/test/ui/async-await/async-matches-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-matches-expr.rs"}, {"sha": "856a778078a61c323141838f3bb1f0d777afead4", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-with-closure.rs"}, {"sha": "c4f3f3edc486e88b75726ad83d9304f781f50bd7", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-in-non-macro-position.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2015-edition-error-in-non-macro-position.rs"}, {"sha": "067ecd6a5138d0313f519d325ede6749b000d870", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-in-non-macro-position.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2015-edition-error-in-non-macro-position.stderr"}, {"sha": "c58496c91f513061cb388700fbe15ae64760263c", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2015-edition-warning.fixed"}, {"sha": "a7543a14325fbecfc1f9a774382d128640b65157", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2015-edition-warning.rs"}, {"sha": "d9ae1b9a167a63502d3f5c48fe32b8f6d9e43dad", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2015-edition-warning.stderr"}, {"sha": "f59f1160e703e4bd82eec71654567c737666ee61", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2018-edition-error-in-non-macro-position.rs"}, {"sha": "c4b82b29f0270f30da71337f84f335b0be32ec1b", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2018-edition-error-in-non-macro-position.stderr"}, {"sha": "d856869684266c1927441a514bafc40f9a27644d", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2018-edition-error.rs"}, {"sha": "8afe5c1a36b36db695f0b341e01795a3a1f96822", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/2018-edition-error.stderr"}, {"sha": "e1e5bdd3d1b9277797af39dbd5626b090879200a", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/incorrect-syntax-suggestions.rs"}, {"sha": "380da4448ad323ee0a2853215a212de245aaac21", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/incorrect-syntax-suggestions.stderr"}, {"sha": "b4c899b0d0295b6b77b0fd45a5b0640dd51ad754", "filename": "src/test/ui/async-await/await-keyword/post_expansion_error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/post_expansion_error.rs"}, {"sha": "4e525974c2c6fbd521b03e8fbedcbbfc99a5cb7d", "filename": "src/test/ui/async-await/await-keyword/post_expansion_error.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/await-keyword/post_expansion_error.stderr"}, {"sha": "1b807588d6ac2c78fb72ba1d3e06461a516f049e", "filename": "src/test/ui/async-await/await-macro.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n // edition:2018\n // aux-build:arc_wake.rs\n ", "previous_filename": "src/test/run-pass/await-macro.rs"}, {"sha": "8150a260866b98951e76ea346400138c85f4cb50", "filename": "src/test/ui/async-await/dont-print-desugared-async.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/nll/dont-print-desugared-async.rs"}, {"sha": "47726ba65df98f1bfafaa53fce23e80515b6c3ce", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/nll/dont-print-desugared-async.stderr"}, {"sha": "c21886f26f467e2176460fc166f95d0d9ee3cc6c", "filename": "src/test/ui/async-await/drop-order/auxiliary/arc_wake.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fauxiliary%2Farc_wake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fauxiliary%2Farc_wake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fauxiliary%2Farc_wake.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -0,0 +1,64 @@\n+// edition:2018\n+\n+use std::sync::Arc;\n+use std::task::{\n+    Waker, RawWaker, RawWakerVTable,\n+};\n+\n+macro_rules! waker_vtable {\n+    ($ty:ident) => {\n+        &RawWakerVTable::new(\n+            clone_arc_raw::<$ty>,\n+            wake_arc_raw::<$ty>,\n+            wake_by_ref_arc_raw::<$ty>,\n+            drop_arc_raw::<$ty>,\n+        )\n+    };\n+}\n+\n+pub trait ArcWake {\n+    fn wake(self: Arc<Self>);\n+\n+    fn wake_by_ref(arc_self: &Arc<Self>) {\n+        arc_self.clone().wake()\n+    }\n+\n+    fn into_waker(wake: Arc<Self>) -> Waker where Self: Sized\n+    {\n+        let ptr = Arc::into_raw(wake) as *const ();\n+\n+        unsafe {\n+            Waker::from_raw(RawWaker::new(ptr, waker_vtable!(Self)))\n+        }\n+    }\n+}\n+\n+unsafe fn increase_refcount<T: ArcWake>(data: *const ()) {\n+    // Retain Arc by creating a copy\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    let arc_clone = arc.clone();\n+    // Forget the Arcs again, so that the refcount isn't decrased\n+    let _ = Arc::into_raw(arc);\n+    let _ = Arc::into_raw(arc_clone);\n+}\n+\n+unsafe fn clone_arc_raw<T: ArcWake>(data: *const ()) -> RawWaker {\n+    increase_refcount::<T>(data);\n+    RawWaker::new(data, waker_vtable!(T))\n+}\n+\n+unsafe fn drop_arc_raw<T: ArcWake>(data: *const ()) {\n+    // Drop Arc\n+    let _: Arc<T> = Arc::from_raw(data as *const T);\n+}\n+\n+unsafe fn wake_arc_raw<T: ArcWake>(data: *const ()) {\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    ArcWake::wake(arc);\n+}\n+\n+unsafe fn wake_by_ref_arc_raw<T: ArcWake>(data: *const ()) {\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    ArcWake::wake_by_ref(&arc);\n+    let _ = Arc::into_raw(arc);\n+}"}, {"sha": "c2b59eecb999304092f9ca8ccbea128017293d6d", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/drop-order-for-async-fn-parameters-by-ref-binding.rs"}, {"sha": "708c570498460147de3cac9a1f6a884452d7966b", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/drop-order-for-async-fn-parameters.rs"}, {"sha": "bcdb8878eb5d225333dfc6f15c6da9d61f4be331", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/drop-order-locals-are-hidden.rs"}, {"sha": "484e1f4f4269ede5589f301a640046ca957eed2d", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/drop-order-locals-are-hidden.stderr"}, {"sha": "e1111f9e0e4b952f26e494921bd24334f3ffdf6f", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/editions/edition-deny-async-fns-2015.rs"}, {"sha": "05a06124dc220d4d519057f45c07aea6b04a9026", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/editions/edition-deny-async-fns-2015.stderr"}, {"sha": "680c6e55e5668decc40438ef77b98e1cedec4ecd", "filename": "src/test/ui/async-await/issues/auxiliary/issue-60674.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue-60674.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/auxiliary/issue-60674.rs"}, {"sha": "5966edd0bf09856643ee0d12b73aa2c2104a9b9f", "filename": "src/test/ui/async-await/issues/issue-51719.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-51719.rs"}, {"sha": "c06165b24468fb97f6b655d597336d699380c0e6", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-51719.stderr"}, {"sha": "7afd7ecc826499b5b8a73738dfe771fb5c09566e", "filename": "src/test/ui/async-await/issues/issue-51751.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-51751.rs"}, {"sha": "97b63d1590ec62bdd63511078c9a6f772860a76f", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-51751.stderr"}, {"sha": "9e4ff43ecd112486021e775a64f1a4e4a1cff8a5", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-53249.rs"}, {"sha": "0036de90b2579a70c2b889100cfe65bb092ddde4", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,7 +1,9 @@\n-#![feature(async_await)]\n-#![allow(unused_parens)]\n+// run-pass\n \n // edition:2018\n // pp-exact\n \n+#![feature(async_await)]\n+#![allow(unused_parens)]\n+\n fn main() { let _a = (async  { }); }", "previous_filename": "src/test/pretty/issue-54752-async-block.rs"}, {"sha": "d6f18875c9e3abc6a42adc5f3342938193fab0b6", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-54974.rs"}, {"sha": "4572e543f22de015b7c14b6bea6017aa17c54c33", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-55324.rs"}, {"sha": "b7e60b773b416be29340e2330ab565894996a8c7", "filename": "src/test/ui/async-await/issues/issue-55809.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/run-pass/issue-55809.rs"}, {"sha": "99d87b2273c2f2bfd20cb80c1f4cb5da1c84873d", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-58885.rs"}, {"sha": "c758244002ff6e14930e187b11eab12f68a31096", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issues/issue-59001.rs"}, {"sha": "31e7a65dc98e34c8f6f342067592a66e3637b343", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n // compile-flags: --edition=2018\n \n #![feature(async_await, await_macro)]", "previous_filename": "src/test/run-pass/generator/issue-59972.rs"}, {"sha": "f603c5bd3f9462b7e4c9027095eb346628da3e01", "filename": "src/test/ui/async-await/issues/issue-60518.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/issue-60518.rs"}, {"sha": "a4fe86501299fc80009856d93a13e32fe2c8ef3e", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/existential_types/issue-60655-latebound-regions.rs"}, {"sha": "ecb80803383b4c5bd253f3186426ae003b281cab", "filename": "src/test/ui/async-await/issues/issue-60674.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/issue-60674.rs"}, {"sha": "86c3591b3afc0138df9329ed9df78cbbf0ce2dae", "filename": "src/test/ui/async-await/issues/issue-60674.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/async-await/issue-60674.stdout"}, {"sha": "345f19b06233bfcfb8b23f1643375d9475f5035b", "filename": "src/test/ui/async-await/no-args-non-move-async-closure.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/no-args-non-move-async-closure.rs"}, {"sha": "1b4b86210f8405cbe32a0aedaab5bd5634cfcc1b", "filename": "src/test/ui/async-await/no-args-non-move-async-closure.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/no-args-non-move-async-closure.stderr"}, {"sha": "a4e080119345e8f1791f4e77496f4d468d98bcb3", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.rs"}, {"sha": "abc9ff54bdee80088483e243efae69f8305c1736", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/impl-trait/recursive-async-impl-trait-type.stderr"}, {"sha": "77174b03217829661093ca8b391bd0f7210489be", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/generator/unresolved_type_param.rs"}, {"sha": "afb9adf4c77cc019005117079f9577d23f90192e", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/generator/unresolved_type_param.stderr"}, {"sha": "c242b6c2c20a28047a87918c1ebe2385284ec52c", "filename": "src/test/ui/confuse-field-and-method/issue-2392.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,7 +1,3 @@\n-#![feature(core, fnbox)]\n-\n-use std::boxed::FnBox;\n-\n struct FuncContainer {\n     f1: fn(data: u8),\n     f2: extern \"C\" fn(data: u8),\n@@ -18,7 +14,7 @@ struct Obj<F> where F: FnOnce() -> u32 {\n }\n \n struct BoxedObj {\n-    boxed_closure: Box<FnBox() -> u32>,\n+    boxed_closure: Box<FnOnce() -> u32>,\n }\n \n struct Wrapper<F> where F: FnMut() -> u32 {\n@@ -29,8 +25,8 @@ fn func() -> u32 {\n     0\n }\n \n-fn check_expression() -> Obj<Box<FnBox() -> u32>> {\n-    Obj { closure: Box::new(|| 42_u32) as Box<FnBox() -> u32>, not_closure: 42 }\n+fn check_expression() -> Obj<Box<FnOnce() -> u32>> {\n+    Obj { closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32>, not_closure: 42 }\n }\n \n fn main() {\n@@ -48,7 +44,7 @@ fn main() {\n     let boxed_fn = BoxedObj { boxed_closure: Box::new(func) };\n     boxed_fn.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n-    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<FnBox() -> u32> };\n+    let boxed_closure = BoxedObj { boxed_closure: Box::new(|| 42_u32) as Box<FnOnce() -> u32> };\n     boxed_closure.boxed_closure();//~ ERROR no method named `boxed_closure` found\n \n     // test expression writing in the notes"}, {"sha": "351cfef1b53ea0517de30663cd7a9b88ad62926e", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,5 +1,5 @@\n-error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:39:36: 39:41]>` in the current scope\n-  --> $DIR/issue-2392.rs:40:15\n+error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+  --> $DIR/issue-2392.rs:36:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -11,8 +11,8 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (o_closure.closure)();\n    |     ^                 ^\n \n-error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:39:36: 39:41]>` in the current scope\n-  --> $DIR/issue-2392.rs:42:15\n+error[E0599]: no method named `not_closure` found for type `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+  --> $DIR/issue-2392.rs:38:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n@@ -23,7 +23,7 @@ LL |     o_closure.not_closure();\n    |               field, not a method\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n-  --> $DIR/issue-2392.rs:46:12\n+  --> $DIR/issue-2392.rs:42:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -36,7 +36,7 @@ LL |     (o_func.closure)();\n    |     ^              ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n-  --> $DIR/issue-2392.rs:49:14\n+  --> $DIR/issue-2392.rs:45:14\n    |\n LL | struct BoxedObj {\n    | --------------- method `boxed_closure` not found for this\n@@ -49,7 +49,7 @@ LL |     (boxed_fn.boxed_closure)();\n    |     ^                      ^\n \n error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the current scope\n-  --> $DIR/issue-2392.rs:52:19\n+  --> $DIR/issue-2392.rs:48:19\n    |\n LL | struct BoxedObj {\n    | --------------- method `boxed_closure` not found for this\n@@ -62,7 +62,7 @@ LL |     (boxed_closure.boxed_closure)();\n    |     ^                           ^\n \n error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n-  --> $DIR/issue-2392.rs:57:12\n+  --> $DIR/issue-2392.rs:53:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -75,7 +75,7 @@ LL |     (w.wrap.closure)();\n    |     ^              ^\n \n error[E0599]: no method named `not_closure` found for type `Obj<fn() -> u32 {func}>` in the current scope\n-  --> $DIR/issue-2392.rs:59:12\n+  --> $DIR/issue-2392.rs:55:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `not_closure` not found for this\n@@ -85,8 +85,8 @@ LL |     w.wrap.not_closure();\n    |            |\n    |            field, not a method\n \n-error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output = u32> + 'static)>>` in the current scope\n-  --> $DIR/issue-2392.rs:62:24\n+error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::ops::FnOnce() -> u32 + 'static)>>` in the current scope\n+  --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n@@ -99,7 +99,7 @@ LL |     (check_expression().closure)();\n    |     ^                          ^\n \n error[E0599]: no method named `f1` found for type `FuncContainer` in the current scope\n-  --> $DIR/issue-2392.rs:68:31\n+  --> $DIR/issue-2392.rs:64:31\n    |\n LL | struct FuncContainer {\n    | -------------------- method `f1` not found for this\n@@ -112,7 +112,7 @@ LL |             ((*self.container).f1)(1);\n    |             ^                    ^\n \n error[E0599]: no method named `f2` found for type `FuncContainer` in the current scope\n-  --> $DIR/issue-2392.rs:69:31\n+  --> $DIR/issue-2392.rs:65:31\n    |\n LL | struct FuncContainer {\n    | -------------------- method `f2` not found for this\n@@ -125,7 +125,7 @@ LL |             ((*self.container).f2)(1);\n    |             ^                    ^\n \n error[E0599]: no method named `f3` found for type `FuncContainer` in the current scope\n-  --> $DIR/issue-2392.rs:70:31\n+  --> $DIR/issue-2392.rs:66:31\n    |\n LL | struct FuncContainer {\n    | -------------------- method `f3` not found for this"}, {"sha": "3e39d9a63c59db42bbbf6ab0f9fa47fd1e000704", "filename": "src/test/ui/error-codes/E0501.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0501.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0501.rs"}, {"sha": "53d98d7e13fee6852c9c1b4621eb152899640d49", "filename": "src/test/ui/error-codes/E0501.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0501.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0501.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0501.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0501.stderr"}, {"sha": "062a44a52bb8b431ea4b385575e0cf41366701d2", "filename": "src/test/ui/error-codes/E0506.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0506.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0506.rs"}, {"sha": "17f883f84b8a2ad6855c40c468b692a746e212dc", "filename": "src/test/ui/error-codes/E0506.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0506.stderr"}, {"sha": "072c3d66183e33d38f8e119722510f3326ef3d25", "filename": "src/test/ui/error-codes/E0508-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0508-fail.rs"}, {"sha": "63590bec32e28909bd75e0210d7a460e050ae1ed", "filename": "src/test/ui/error-codes/E0508-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508-fail.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0508-fail.stderr"}, {"sha": "072c3d66183e33d38f8e119722510f3326ef3d25", "filename": "src/test/ui/error-codes/E0508.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0508.rs"}, {"sha": "983062e450ea7573aefdc385ea598b1bcd508363", "filename": "src/test/ui/error-codes/E0508.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0508.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0508.stderr"}, {"sha": "969de79c0586532bc9f1d15f4af805cee742657d", "filename": "src/test/ui/error-codes/E0583.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0583.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0583.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0583.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0583.rs"}, {"sha": "ef7a48bc8a48f3805c9cd72fa5e3562b4f45e609", "filename": "src/test/ui/error-codes/E0583.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0583.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0583.stderr"}, {"sha": "8b0cae7e17b3010720d689f840711d066cde461b", "filename": "src/test/ui/error-codes/E0594.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0594.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0594.rs"}, {"sha": "c00ec4250a70b5ede7a451549d881bb3ba035650", "filename": "src/test/ui/error-codes/E0594.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0594.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0594.stderr"}, {"sha": "9e2f5ee763639b8f36a3bf4a8f5f33dfe3b5f6fd", "filename": "src/test/ui/error-codes/E0596.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0596.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0596.rs"}, {"sha": "79bc258f1fae7a7605430fbfa344818374166b47", "filename": "src/test/ui/error-codes/E0596.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0596.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0596.stderr"}, {"sha": "cfbd362c1da1995812f3fdd3c1926d3693d4ab01", "filename": "src/test/ui/error-codes/E0642.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0642.rs"}, {"sha": "da255143494d68ea12a456bb5c689b3b052f4cfb", "filename": "src/test/ui/error-codes/E0642.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0642.stderr"}, {"sha": "6280d39061035689ae994d2087ea0496cfd2e275", "filename": "src/test/ui/error-codes/E0660.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0660.rs"}, {"sha": "ce34a9b01d755ab789237502d3917e15163dd94b", "filename": "src/test/ui/error-codes/E0660.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0660.stderr"}, {"sha": "8d355a8a021e22694acf0a05419285215621d68e", "filename": "src/test/ui/error-codes/E0661.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0661.rs"}, {"sha": "30a23fd58c57c03f597fb968b5d82c980738ac4b", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0661.stderr"}, {"sha": "7fe528c474599321aad34411b541b0c5cdcb00c6", "filename": "src/test/ui/error-codes/E0662.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0662.rs"}, {"sha": "0d3701aa955ecc1fd6fad6357a1b616508aa661e", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0662.stderr"}, {"sha": "e5b8156cfb32a598b9cfdcb4f80f54803265e5de", "filename": "src/test/ui/error-codes/E0663.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0663.rs"}, {"sha": "46a079af15252351cd18a653500c305cac3c161d", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0663.stderr"}, {"sha": "29ec7ced4fd6e4c3898f6b95297e584e71b2f531", "filename": "src/test/ui/error-codes/E0664.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0664.rs"}, {"sha": "3a99fce6eed0fa9276ebf36d8c0ab1af032f6988", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0664.stderr"}, {"sha": "cfd42bd9aac32f0db98ec5f09f16b29eb5f3e171", "filename": "src/test/ui/error-codes/E0665.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0665.rs"}, {"sha": "84fe3c013946a7ca60ac66860e6ea20f725bbb4c", "filename": "src/test/ui/error-codes/E0665.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0665.stderr"}, {"sha": "cc2b8f64d9fa884e871a9dc00cfc8cc7e879f40b", "filename": "src/test/ui/error-codes/E0705.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0705.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0705.rs"}, {"sha": "1cb83f2e381dc42bed6bb19d45c2ffbf68feb05f", "filename": "src/test/ui/error-codes/E0705.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0705.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2FE0705.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0705.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/E0705.stderr"}, {"sha": "ad5bb107fc6e7396fece1d4b0b1985b3c3b96065", "filename": "src/test/ui/error-codes/e0119/auxiliary/complex_impl_support.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fauxiliary%2Fcomplex_impl_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fauxiliary%2Fcomplex_impl_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fauxiliary%2Fcomplex_impl_support.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/auxiliary/complex_impl_support.rs"}, {"sha": "4e85bcc4ba623b22555114a7090286984ebb4c55", "filename": "src/test/ui/error-codes/e0119/auxiliary/issue-23563-a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fauxiliary%2Fissue-23563-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fauxiliary%2Fissue-23563-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fauxiliary%2Fissue-23563-a.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/auxiliary/issue-23563-a.rs"}, {"sha": "3cba39ecbf938af14708c0572de27920ae6d651c", "filename": "src/test/ui/error-codes/e0119/complex-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/complex-impl.rs"}, {"sha": "7ed89a5b1aeb17c9f0849b8a89be56728715461c", "filename": "src/test/ui/error-codes/e0119/complex-impl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fcomplex-impl.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/complex-impl.stderr"}, {"sha": "c9db2bab183b4d48c300d6c8357e565a88abbaa9", "filename": "src/test/ui/error-codes/e0119/conflict-with-std.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/conflict-with-std.rs"}, {"sha": "3e0c71e907481dcc435a51d7ebc5f1505e69ed11", "filename": "src/test/ui/error-codes/e0119/conflict-with-std.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fconflict-with-std.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/conflict-with-std.stderr"}, {"sha": "f578560c552a87f18cf470be61672d1f333b434b", "filename": "src/test/ui/error-codes/e0119/issue-23563.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/issue-23563.rs"}, {"sha": "8011689880dfb7f4384c969089562532d17a6cd2", "filename": "src/test/ui/error-codes/e0119/issue-23563.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-23563.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/issue-23563.stderr"}, {"sha": "b03a564ffd4eecf8a9e0fbed9fd80bf8f7f5155e", "filename": "src/test/ui/error-codes/e0119/issue-27403.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/issue-27403.rs"}, {"sha": "cba10432a9305c49320dbb03112fd0e0b55f27b4", "filename": "src/test/ui/error-codes/e0119/issue-27403.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-27403.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/issue-27403.stderr"}, {"sha": "c31b212b25a0df00e64c20392ea267f145b9ab9b", "filename": "src/test/ui/error-codes/e0119/issue-28981.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/issue-28981.rs"}, {"sha": "70c83e1412da678b8ea19adde4b8153d258fa99b", "filename": "src/test/ui/error-codes/e0119/issue-28981.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fissue-28981.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/issue-28981.stderr"}, {"sha": "d5f624bc4d972f31060e44417af84fb46b372c1b", "filename": "src/test/ui/error-codes/e0119/so-37347311.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/so-37347311.rs"}, {"sha": "f2166de71f8d6c28a0b4fe30da97411d7a144f3f", "filename": "src/test/ui/error-codes/e0119/so-37347311.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fe0119%2Fso-37347311.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/e0119/so-37347311.stderr"}, {"sha": "a92eed968d0607b7a1e1e0f81f0e43cc3e2ec79f", "filename": "src/test/ui/issues/auxiliary/issue-59764.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-59764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-59764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-59764.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/auxiliary/issue-59764.rs"}, {"sha": "4fbed9b08f215a9698d98b4f03874e541d5618f8", "filename": "src/test/ui/issues/issue-59508-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59508-1.rs"}, {"sha": "8fb7d7c3c84dc295ddbd4b7a32c9eb737cdcaf96", "filename": "src/test/ui/issues/issue-59508-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59508-1.stderr"}, {"sha": "b5c60a1626f53584d522b01f9c92a055197c92bd", "filename": "src/test/ui/issues/issue-59508.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508.fixed?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59508.fixed"}, {"sha": "0b39c5d8f2aec802e4a1e80b33232e89778d9010", "filename": "src/test/ui/issues/issue-59508.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59508.rs"}, {"sha": "c0fdb2ef34ac4efd38db83c27af1e81fc6a9b33b", "filename": "src/test/ui/issues/issue-59508.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59508.stderr"}, {"sha": "7b55d0f17e690f18e7a55b272000fe20512adc7a", "filename": "src/test/ui/issues/issue-59756.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59756.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59756.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59756.fixed?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59756.fixed"}, {"sha": "cccae396b721015a5f07a951c3acbe85389621e5", "filename": "src/test/ui/issues/issue-59756.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59756.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59756.rs"}, {"sha": "d46232874fd2a08062f4e930f5befc9263362779", "filename": "src/test/ui/issues/issue-59756.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59756.stderr"}, {"sha": "09dee8c2732681e4f2298b3a1a51b58872c5ee9d", "filename": "src/test/ui/issues/issue-59764.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59764.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59764.rs"}, {"sha": "f266e908ecc3f8f3398e5b461b35a9bfbe8b7c76", "filename": "src/test/ui/issues/issue-59764.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-59764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59764.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-59764.stderr"}, {"sha": "5788716a52629bba22af262129cb35db60dc6360", "filename": "src/test/ui/issues/issue-60075.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-60075.rs"}, {"sha": "ac97d32a6e15b7f05e553b5f455adac50007656f", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-60075.stderr"}, {"sha": "d6a0189c3e042230787819ca6512c6f621bd91bc", "filename": "src/test/ui/issues/issue-60622.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-60622.rs"}, {"sha": "0c337c315f161741f5c796d11261491de8a32224", "filename": "src/test/ui/issues/issue-60622.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60622.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "previous_filename": "src/test/ui/issue-60622.stderr"}, {"sha": "fd4f93091944cd5af20d48bfad1f05a82f47584d", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -12,17 +12,17 @@ error: expected expression, found keyword `struct`\n LL |     format!(struct);\n    |             ^^^^^^ expected expression\n \n-error: expected expression, found `<eof>`\n-  --> $DIR/format-parse-errors.rs:4:23\n+error: expected expression, found end of macro arguments\n+  --> $DIR/format-parse-errors.rs:4:24\n    |\n LL |     format!(\"s\", name =);\n-   |                       ^ expected expression\n+   |                        ^ expected expression\n \n-error: expected `=`, found `<eof>`\n-  --> $DIR/format-parse-errors.rs:5:29\n+error: expected `=`, found end of macro arguments\n+  --> $DIR/format-parse-errors.rs:5:32\n    |\n LL |     format!(\"s\", foo = foo, bar);\n-   |                             ^^^ expected `=`\n+   |                                ^ expected `=`\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:6:24"}, {"sha": "36cc58f7e268e0b18d8a82a35db869c839fb76e0", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,17 +1,13 @@\n-#[derive(Copy(Bad))]\n-//~^ ERROR expected one of `)`, `,`, or `::`, found `(`\n+#[derive(Copy(Bad))] //~ ERROR expected one of `)`, `,`, or `::`, found `(`\n struct Test1;\n \n-#[derive(Copy=\"bad\")]\n-//~^ ERROR expected one of `)`, `,`, or `::`, found `=`\n+#[derive(Copy=\"bad\")] //~ ERROR expected one of `)`, `,`, or `::`, found `=`\n struct Test2;\n \n-#[derive()]\n-//~^ WARNING empty trait list\n+#[derive()] //~ WARNING empty trait list\n struct Test3;\n \n-#[derive]\n-//~^ ERROR attribute must be of the form\n+#[derive] //~ ERROR attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n struct Test4;\n \n fn main() {}"}, {"sha": "0dc18f6811117db2aee44282bec634814a8fcb40", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -5,19 +5,19 @@ LL | #[derive(Copy(Bad))]\n    |              ^ expected one of `)`, `,`, or `::` here\n \n error: expected one of `)`, `,`, or `::`, found `=`\n-  --> $DIR/malformed-derive-entry.rs:5:14\n+  --> $DIR/malformed-derive-entry.rs:4:14\n    |\n LL | #[derive(Copy=\"bad\")]\n    |              ^ expected one of `)`, `,`, or `::` here\n \n warning: empty trait list in `derive`\n-  --> $DIR/malformed-derive-entry.rs:9:1\n+  --> $DIR/malformed-derive-entry.rs:7:1\n    |\n LL | #[derive()]\n    | ^^^^^^^^^^^\n \n error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n-  --> $DIR/malformed-derive-entry.rs:13:1\n+  --> $DIR/malformed-derive-entry.rs:10:1\n    |\n LL | #[derive]\n    | ^^^^^^^^^"}, {"sha": "4d00755aea09df5175e75a3b18cbe22f1d42d519", "filename": "src/test/ui/malformed/malformed-special-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,4 +1,4 @@\n-#[cfg_attr] //~ ERROR expected `(`, found `<eof>`\n+#[cfg_attr] //~ ERROR expected `(`, found end of attribute\n struct S1;\n \n #[cfg_attr = \"\"] //~ ERROR expected `(`, found `=`"}, {"sha": "a93f03589e383ce95ab6cbe588715e4d053c98c6", "filename": "src/test/ui/malformed/malformed-special-attrs.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,13 +1,14 @@\n-error: expected `(`, found `<eof>`\n+error: expected `(`, found end of attribute\n+  --> $DIR/malformed-special-attrs.rs:1:1\n+   |\n+LL | #[cfg_attr]\n+   | ^ expected `(`\n \n error: expected `(`, found `=`\n   --> $DIR/malformed-special-attrs.rs:4:12\n    |\n-LL | #[cfg_attr]\n-   | - expected `(`\n-...\n LL | #[cfg_attr = \"\"]\n-   |            ^ unexpected token\n+   |            ^ expected `(`\n \n error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n   --> $DIR/malformed-special-attrs.rs:7:1"}, {"sha": "4b6d23890653d44637f1694095c9f593451edb48", "filename": "src/test/ui/parser/macro/bad-macro-argument.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fbad-macro-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fbad-macro-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fbad-macro-argument.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let message = \"world\";\n+    println!(\"Hello, {}\", message/); //~ ERROR expected expression\n+}"}, {"sha": "3cd8accb662948cc4b5d90ff687c3edcee74058a", "filename": "src/test/ui/parser/macro/bad-macro-argument.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fbad-macro-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fbad-macro-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fbad-macro-argument.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found end of macro arguments\n+  --> $DIR/bad-macro-argument.rs:3:35\n+   |\n+LL |     println!(\"Hello, {}\", message/);\n+   |                                   ^ expected expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "fab98f0ce5ebe68f1411d3681d994d2049785462", "filename": "src/test/ui/proc-macro/attr-invalid-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -9,7 +9,7 @@ use attr_stmt_expr::{duplicate, no_output};\n \n fn main() {\n     let _ = #[no_output] \"Hello, world!\";\n-    //~^ ERROR expected expression, found `<eof>`\n+    //~^ ERROR expected expression, found end of macro arguments\n \n     let _ = #[duplicate] \"Hello, world!\";\n     //~^ ERROR macro expansion ignores token `,` and any following"}, {"sha": "49fe0bd0fcfe280cd9e1f9a81c6ed735ca4bdb7a", "filename": "src/test/ui/proc-macro/attr-invalid-exprs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-invalid-exprs.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1,4 +1,4 @@\n-error: expected expression, found `<eof>`\n+error: expected expression, found end of macro arguments\n   --> $DIR/attr-invalid-exprs.rs:11:13\n    |\n LL |     let _ = #[no_output] \"Hello, world!\";"}, {"sha": "84fbb47301f049e8b228617a21374e6298ca7374", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -0,0 +1,14 @@\n+// rust-lang/rust#60654: Do not ICE on an attempt to use GATs that is\n+// missing the feature gate.\n+\n+struct Foo;\n+\n+impl Iterator for Foo {\n+    type Item<'b> = &'b Foo; //~ ERROR generic associated types are unstable [E0658]\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "27b1d73d0434a7177ce93e78c5e4eeeb1863fda6", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n+   |\n+LL |     type Item<'b> = &'b Foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "545f354259be4e9745ea00a524c0e4c51df01aa6", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -1 +1 @@\n-Subproject commit c4fcfb725b4be00c72eb9cf30c7d8b095577c280\n+Subproject commit 545f354259be4e9745ea00a524c0e4c51df01aa6"}, {"sha": "edef26e6b02c091a44809634abfecda57e00fa20", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=315ab95a9c13cbb69ae8538fcd69b9f7b0c30f89", "patch": "@@ -47,6 +47,9 @@ const EXCEPTIONS: &[&str] = &[\n     \"adler32\",            // BSD-3-Clause AND Zlib, cargo dep that isn't used\n     \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for `sgx` target\n     \"constant_time_eq\",   // CC0-1.0, rustfmt\n+    \"utf8parse\",          // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n+    \"vte\",                // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n+    \"sized-chunks\",       // MPL-2.0+, cargo via im-rc\n ];\n \n /// Which crates to check against the whitelist?\n@@ -241,7 +244,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n \n         let toml = dir.path().join(\"Cargo.toml\");\n-        *bad = *bad || !check_license(&toml);\n+        *bad = !check_license(&toml) || *bad;\n     }\n     assert!(saw_dir, \"no vendored source\");\n }"}]}