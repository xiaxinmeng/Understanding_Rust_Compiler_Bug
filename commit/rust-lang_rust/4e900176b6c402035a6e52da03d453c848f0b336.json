{"sha": "4e900176b6c402035a6e52da03d453c848f0b336", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOTAwMTc2YjZjNDAyMDM1YTZlNTJkYTAzZDQ1M2M4NDhmMGIzMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T07:28:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T07:28:15Z"}, "message": "Auto merge of #87948 - JohnTitor:rollup-efmgyl8, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #85835 (Implement Extend<(A, B)> for (Extend<A>, Extend<B>))\n - #87671 (Warn when an escaped newline skips multiple lines)\n - #87878 (:arrow_up: rust-analyzer)\n - #87903 (Reduce verbosity of tracing output of  RUSTC_LOG)\n - #87925 (Update books)\n - #87928 (Update cargo)\n - #87942 (set the executable bit on pre-commit.sh)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "87f5b5734deea703c8a57baa94cfead3d15c6ba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87f5b5734deea703c8a57baa94cfead3d15c6ba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e900176b6c402035a6e52da03d453c848f0b336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e900176b6c402035a6e52da03d453c848f0b336", "html_url": "https://github.com/rust-lang/rust/commit/4e900176b6c402035a6e52da03d453c848f0b336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e900176b6c402035a6e52da03d453c848f0b336/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb2226b1f174f3cc644275ef8663be6295a7f704", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2226b1f174f3cc644275ef8663be6295a7f704", "html_url": "https://github.com/rust-lang/rust/commit/eb2226b1f174f3cc644275ef8663be6295a7f704"}, {"sha": "334f09b90b0a62778ef0d70c8793ede58c5dffde", "url": "https://api.github.com/repos/rust-lang/rust/commits/334f09b90b0a62778ef0d70c8793ede58c5dffde", "html_url": "https://github.com/rust-lang/rust/commit/334f09b90b0a62778ef0d70c8793ede58c5dffde"}], "stats": {"total": 181, "additions": 138, "deletions": 43}, "files": [{"sha": "4ed8818cbad97acd70bac115adaae0fb1105a39b", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -356,7 +356,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo-platform\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n dependencies = [\n  \"serde\",\n ]\n@@ -1723,9 +1723,9 @@ checksum = \"dc6f3ad7b9d11a0c00842ff8de1b60ee58661048eb8049ed33c73594f359d7e6\"\n \n [[package]]\n name = \"jobserver\"\n-version = \"0.1.22\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"972f5ae5d1cb9c6ae417789196c803205313edde988685da5e3aae0827b9e7fd\"\n+checksum = \"f5ca711fd837261e14ec9e674f092cbb931d3fa1482b017ae59328ddc6f3212b\"\n dependencies = [\n  \"libc\",\n ]"}, {"sha": "fcc70b2e4c5ff3e600993e2f82e5ea8cb053858e", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1287,9 +1287,6 @@ pub fn init_env_logger(env: &str) {\n         .with_indent_lines(true)\n         .with_ansi(color_logs)\n         .with_targets(true)\n-        .with_wraparound(10)\n-        .with_verbose_exit(true)\n-        .with_verbose_entry(true)\n         .with_indent_amount(2);\n     #[cfg(parallel_compiler)]\n     let layer = layer.with_thread_ids(true).with_thread_names(true);"}, {"sha": "b970c9e4911fafb36ff0612c0e30fb417d46437f", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -60,13 +60,17 @@ pub enum EscapeError {\n     /// After a line ending with '\\', the next line contains whitespace\n     /// characters that are not skipped.\n     UnskippedWhitespaceWarning,\n+\n+    /// After a line ending with '\\', multiple lines are skipped.\n+    MultipleSkippedLinesWarning,\n }\n \n impl EscapeError {\n     /// Returns true for actual errors, as opposed to warnings.\n     pub fn is_fatal(&self) -> bool {\n         match self {\n             EscapeError::UnskippedWhitespaceWarning => false,\n+            EscapeError::MultipleSkippedLinesWarning => false,\n             _ => true,\n         }\n     }\n@@ -315,12 +319,17 @@ where\n     where\n         F: FnMut(Range<usize>, Result<char, EscapeError>),\n     {\n-        let str = chars.as_str();\n-        let first_non_space = str\n+        let tail = chars.as_str();\n+        let first_non_space = tail\n             .bytes()\n             .position(|b| b != b' ' && b != b'\\t' && b != b'\\n' && b != b'\\r')\n-            .unwrap_or(str.len());\n-        let tail = &str[first_non_space..];\n+            .unwrap_or(tail.len());\n+        if tail[1..first_non_space].contains('\\n') {\n+            // The +1 accounts for the escaping slash.\n+            let end = start + first_non_space + 1;\n+            callback(start..end, Err(EscapeError::MultipleSkippedLinesWarning));\n+        }\n+        let tail = &tail[first_non_space..];\n         if let Some(c) = tail.chars().nth(0) {\n             // For error reporting, we would like the span to contain the character that was not\n             // skipped.  The +1 is necessary to account for the leading \\ that started the escape."}, {"sha": "fa61554afde6c5d16c87b462e0ca802b15a7e0a7", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -106,6 +106,10 @@ fn test_unescape_str_warn() {\n         assert_eq!(unescaped, expected);\n     }\n \n+    // Check we can handle escaped newlines at the end of a file.\n+    check(\"\\\\\\n\", &[]);\n+    check(\"\\\\\\n \", &[]);\n+\n     check(\n         \"\\\\\\n \\u{a0} x\",\n         &[\n@@ -115,6 +119,7 @@ fn test_unescape_str_warn() {\n             (6..7, Ok('x')),\n         ],\n     );\n+    check(\"\\\\\\n  \\n  x\", &[(0..7, Err(EscapeError::MultipleSkippedLinesWarning)), (7..8, Ok('x'))]);\n }\n \n #[test]"}, {"sha": "aa6b424ce2b57ec167c85c7086471cc3165d62ec", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -280,6 +280,11 @@ pub(crate) fn emit_unescape_error(\n                 format!(\"non-ASCII whitespace symbol '{}' is not skipped\", c.escape_unicode());\n             handler.struct_span_warn(span, &msg).span_label(char_span, &msg).emit();\n         }\n+        EscapeError::MultipleSkippedLinesWarning => {\n+            let msg = \"multiple lines skipped by escaped newline\";\n+            let bottom_msg = \"skipping everything up to and including this point\";\n+            handler.struct_span_warn(span, msg).span_label(span, bottom_msg).emit();\n+        }\n     }\n }\n "}, {"sha": "aa91346851f9dc83aa003def0a3949ad412b215d", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -360,3 +360,61 @@ impl Extend<()> for () {\n     }\n     fn extend_one(&mut self, _item: ()) {}\n }\n+\n+#[stable(feature = \"extend_for_tuple\", since = \"1.56.0\")]\n+impl<A, B, ExtendA, ExtendB> Extend<(A, B)> for (ExtendA, ExtendB)\n+where\n+    ExtendA: Extend<A>,\n+    ExtendB: Extend<B>,\n+{\n+    /// Allows to `extend` a tuple of collections that also implement `Extend`.\n+    ///\n+    /// See also: [`Iterator::unzip`]\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// let mut tuple = (vec![0], vec![1]);\n+    /// tuple.extend(vec![(2, 3), (4, 5), (6, 7)]);\n+    /// assert_eq!(tuple.0, vec![0, 2, 4, 6]);\n+    /// assert_eq!(tuple.1, vec![1, 3, 5, 7]);\n+    ///\n+    /// // also allows for arbitrarily nested tuples\n+    /// let mut nested_tuple = (vec![(1, -1)], vec![(2, -2)]);\n+    /// nested_tuple.extend(vec![((3, -3), (4, -4)), ((5, -5), (6, -6))]);\n+    ///\n+    /// assert_eq!(nested_tuple.0, vec![(1, -1), (3, -3), (5, -5)]);\n+    /// assert_eq!(nested_tuple.1, vec![(2, -2), (4, -4), (6, -6)]);\n+    /// ```\n+    fn extend<T: IntoIterator<Item = (A, B)>>(&mut self, into_iter: T) {\n+        let (a, b) = self;\n+        let iter = into_iter.into_iter();\n+\n+        fn extend<'a, A, B>(\n+            a: &'a mut impl Extend<A>,\n+            b: &'a mut impl Extend<B>,\n+        ) -> impl FnMut((), (A, B)) + 'a {\n+            move |(), (t, u)| {\n+                a.extend_one(t);\n+                b.extend_one(u);\n+            }\n+        }\n+\n+        let (lower_bound, _) = iter.size_hint();\n+        if lower_bound > 0 {\n+            a.extend_reserve(lower_bound);\n+            b.extend_reserve(lower_bound);\n+        }\n+\n+        iter.fold((), extend(a, b));\n+    }\n+\n+    fn extend_one(&mut self, item: (A, B)) {\n+        self.0.extend_one(item.0);\n+        self.1.extend_one(item.1);\n+    }\n+\n+    fn extend_reserve(&mut self, additional: usize) {\n+        self.0.extend_reserve(additional);\n+        self.1.extend_reserve(additional);\n+    }\n+}"}, {"sha": "524d8f857e2a5e26db1b757cb25abad31b4626b8", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -2841,6 +2841,14 @@ pub trait Iterator {\n     ///\n     /// assert_eq!(left, [1, 3]);\n     /// assert_eq!(right, [2, 4]);\n+    ///\n+    /// // you can also unzip multiple nested tuples at once\n+    /// let a = [(1, (2, 3)), (4, (5, 6))];\n+    ///\n+    /// let (x, (y, z)): (Vec<_>, (Vec<_>, Vec<_>)) = a.iter().cloned().unzip();\n+    /// assert_eq!(x, [1, 4]);\n+    /// assert_eq!(y, [2, 5]);\n+    /// assert_eq!(z, [3, 6]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)\n@@ -2849,28 +2857,9 @@ pub trait Iterator {\n         FromB: Default + Extend<B>,\n         Self: Sized + Iterator<Item = (A, B)>,\n     {\n-        fn extend<'a, A, B>(\n-            ts: &'a mut impl Extend<A>,\n-            us: &'a mut impl Extend<B>,\n-        ) -> impl FnMut((), (A, B)) + 'a {\n-            move |(), (t, u)| {\n-                ts.extend_one(t);\n-                us.extend_one(u);\n-            }\n-        }\n-\n-        let mut ts: FromA = Default::default();\n-        let mut us: FromB = Default::default();\n-\n-        let (lower_bound, _) = self.size_hint();\n-        if lower_bound > 0 {\n-            ts.extend_reserve(lower_bound);\n-            us.extend_reserve(lower_bound);\n-        }\n-\n-        self.fold((), extend(&mut ts, &mut us));\n-\n-        (ts, us)\n+        let mut unzipped: (FromA, FromB) = Default::default();\n+        unzipped.extend(self);\n+        unzipped\n     }\n \n     /// Creates an iterator which copies all of its elements."}, {"sha": "7e49659102f0977d9142190e1ba23345c0f00eb1", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit a07036f864b37896b31eb996cd7aedb489f69a1f\n+Subproject commit 7e49659102f0977d9142190e1ba23345c0f00eb1"}, {"sha": "4f9fcaa30d11ba52b641e6fd5206536d65838af9", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit 09986cd352404eb4659db44613b27cac9aa652fc\n+Subproject commit 4f9fcaa30d11ba52b641e6fd5206536d65838af9"}, {"sha": "0c7e5bd1428e7838252bb57b7f0fbfda4ec82f02", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit f51734eb5566c826b471977747ea3d7d6915bbe9\n+Subproject commit 0c7e5bd1428e7838252bb57b7f0fbfda4ec82f02"}, {"sha": "4884fe45c14f8b22121760fb117181bb4da8dfe0", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit 3b7be075af5d6e402a18efff672a8a265b4596fd\n+Subproject commit 4884fe45c14f8b22121760fb117181bb4da8dfe0"}, {"sha": "c4644b427cbdaafc7a87be0ccdf5d8aaa07ac35f", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit 09343d6f921d2a07c66f8c41ec3d65bf1fa52556\n+Subproject commit c4644b427cbdaafc7a87be0ccdf5d8aaa07ac35f"}, {"sha": null, "filename": "src/etc/pre-commit.sh", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/src%2Fetc%2Fpre-commit.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/src%2Fetc%2Fpre-commit.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpre-commit.sh?ref=4e900176b6c402035a6e52da03d453c848f0b336"}, {"sha": "1f7f0d8f6be6ae72c93d62814c3296dc4c807350", "filename": "src/test/ui/fmt/format-string-error-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     a\");\n     //~^ ERROR invalid format string\n     format!(\"{ \\\n-\n+               \\\n     b\");\n     //~^ ERROR invalid format string\n     format!(r#\"{ \\\n@@ -38,12 +38,12 @@ fn main() {\n     { \\\n     \t\\\n     b \\\n-\n+      \\\n     \");\n     //~^^^ ERROR invalid format string\n     format!(r#\"\n raw  { \\\n-\n+       \\\n     c\"#);\n     //~^^^ ERROR invalid format string\n     format!(r#\""}, {"sha": "76cdfbb93bf24cad988434f806f096698cd8a0c6", "filename": "src/test/ui/fmt/format-string-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error-2.stderr?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -19,7 +19,7 @@ error: invalid format string: expected `'}'`, found `'b'`\n    |\n LL |     format!(\"{ \\\n    |              - because of this opening brace\n-LL | \n+LL |                \\\n LL |     b\");\n    |     ^ expected `}` in format string\n    |"}, {"sha": "0264632fd24a15c8b2c3dfce961336da8e7491f7", "filename": "src/test/ui/str/str-escape.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Fstr%2Fstr-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Fstr%2Fstr-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-escape.rs?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+fn main() {\n+    let s = \"\\\n+\n+             \";\n+    //~^^^ WARNING multiple lines skipped by escaped newline\n+    let s = \"foo\\\n+  \u00a0          bar\n+             \";\n+    //~^^^ WARNING non-ASCII whitespace symbol '\\u{a0}' is not skipped\n+}"}, {"sha": "b2501f1a2145f3069a61d49a2e71a20e369d0fe0", "filename": "src/test/ui/str/str-escape.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Fstr%2Fstr-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e900176b6c402035a6e52da03d453c848f0b336/src%2Ftest%2Fui%2Fstr%2Fstr-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-escape.stderr?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -0,0 +1,21 @@\n+warning: multiple lines skipped by escaped newline\n+  --> $DIR/str-escape.rs:3:14\n+   |\n+LL |       let s = \"\\\n+   |  ______________^\n+LL | |\n+LL | |              \";\n+   | |_____________^ skipping everything up to and including this point\n+\n+warning: non-ASCII whitespace symbol '\\u{a0}' is not skipped\n+  --> $DIR/str-escape.rs:7:17\n+   |\n+LL |       let s = \"foo\\\n+   |  _________________^\n+LL | |   \u00a0          bar\n+   | |   ^ non-ASCII whitespace symbol '\\u{a0}' is not skipped\n+   | |___|\n+   | \n+\n+warning: 2 warnings emitted\n+"}, {"sha": "b51439fd8b505d4800a257acfecf3c69f81e35cf", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit cc17afbb0067b1f57d8882640f63b2168d5b7624\n+Subproject commit b51439fd8b505d4800a257acfecf3c69f81e35cf"}, {"sha": "5664a2b0b31403024ce5ab927760d630d5ddc9a4", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=4e900176b6c402035a6e52da03d453c848f0b336", "patch": "@@ -1 +1 @@\n-Subproject commit ea105f9396a9dab68e71efb06016b7c76c83ba7c\n+Subproject commit 5664a2b0b31403024ce5ab927760d630d5ddc9a4"}]}