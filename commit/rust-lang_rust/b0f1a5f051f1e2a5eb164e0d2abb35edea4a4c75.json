{"sha": "b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZjFhNWYwNTFmMWUyYTVlYjE2NGUwZDJhYmIzNWVkZWE0YTRjNzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-17T00:07:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-19T22:07:46Z"}, "message": "when collecting free vars, track the span where it is used too", "tree": {"sha": "31c8399f45620e9cb85267587e5be9926f2552b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c8399f45620e9cb85267587e5be9926f2552b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "html_url": "https://github.com/rust-lang/rust/commit/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "html_url": "https://github.com/rust-lang/rust/commit/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "a7a791e52b0980834d0cedd4c10fe989f6ad07be", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "patch": "@@ -10,12 +10,17 @@ import syntax::codemap::span;\n \n export annotate_freevars;\n export freevar_map;\n+export freevar_info;\n export get_freevars;\n export has_freevars;\n \n // A vector of defs representing the free variables referred to in a function.\n // (The def_upvar will already have been stripped).\n-type freevar_info = @[ast::def];\n+type freevar_entry = {\n+    def: ast::def, //< The variable being accessed free.\n+    span: span     //< First span where it is accessed (there can be multiple)\n+};\n+type freevar_info = @[@freevar_entry];\n type freevar_map = hashmap<ast::node_id, freevar_info>;\n \n // Searches through part of the AST for all references to locals or\n@@ -50,7 +55,7 @@ fn collect_freevars(def_map: resolve::def_map, walker: fn@(visit::vt<int>)) ->\n                 if i == depth { // Made it to end of loop\n                     let dnum = ast_util::def_id_of_def(def).node;\n                     if !seen.contains_key(dnum) {\n-                        *refs += [def];\n+                        *refs += [@{def:def, span:expr.span}];\n                         seen.insert(dnum, ());\n                     }\n                 }"}, {"sha": "d07e862ceb96e048a6adc8068c6275380f6d188b", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "patch": "@@ -55,10 +55,10 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n     fn check_free_vars(e: @expr,\n                        cx: ctx,\n                        check_fn: fn(ctx, ty::t, sp: span)) {\n-        for free in *freevars::get_freevars(cx.tcx, e.id) {\n-            let id = ast_util::def_id_of_def(free).node;\n+        for @{def, span} in *freevars::get_freevars(cx.tcx, e.id) {\n+            let id = ast_util::def_id_of_def(def).node;\n             let ty = ty::node_id_to_type(cx.tcx, id);\n-            check_fn(cx, ty, e.span);\n+            check_fn(cx, ty, span);\n         }\n     }\n "}, {"sha": "cc72ef5b3e36a583a863be0d4a08097fec2fab7c", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "patch": "@@ -5,7 +5,7 @@ import llvm::{ValueRef, TypeRef};\n import trans_common::*;\n import trans_build::*;\n import trans::*;\n-import middle::freevars::get_freevars;\n+import middle::freevars::{get_freevars, freevar_info};\n import option::{some, none};\n import back::abi;\n import syntax::codemap::span;\n@@ -261,16 +261,16 @@ fn store_environment(\n // Given a context and a list of upvars, build a closure. This just\n // collects the upvars and packages them up for store_environment.\n fn build_closure(cx: @block_ctxt,\n-                 upvars: @[ast::def],\n+                 upvars: freevar_info,\n                  ck: ty::closure_kind)\n     -> closure_result {\n     // If we need to, package up the iterator body to call\n     let env_vals = [];\n     let tcx = bcx_tcx(cx);\n     // Package up the upvars\n-    vec::iter(*upvars) { |def|\n-        let lv = trans_local_var(cx, def);\n-        let nid = ast_util::def_id_of_def(def).node;\n+    vec::iter(*upvars) { |upvar|\n+        let lv = trans_local_var(cx, upvar.def);\n+        let nid = ast_util::def_id_of_def(upvar.def).node;\n         let ty = ty::node_id_to_monotype(tcx, nid);\n         alt ck {\n           ty::closure_block. { ty = ty::mk_mut_ptr(tcx, ty); }\n@@ -287,7 +287,7 @@ fn build_closure(cx: @block_ctxt,\n fn load_environment(enclosing_cx: @block_ctxt,\n                     fcx: @fn_ctxt,\n                     boxed_closure_ty: ty::t,\n-                    upvars: @[ast::def],\n+                    upvars: freevar_info,\n                     ck: ty::closure_kind) {\n     let bcx = new_raw_block_ctxt(fcx, fcx.llloadenv);\n \n@@ -311,7 +311,7 @@ fn load_environment(enclosing_cx: @block_ctxt,\n \n     // Populate the upvars from the environment.\n     let path = [0, abi::box_rc_field_body, abi::closure_elt_bindings];\n-    vec::iteri(*upvars) { |i, upvar_def|\n+    vec::iteri(*upvars) { |i, upvar|\n         check type_is_tup_like(bcx, boxed_closure_ty);\n         let upvarptr =\n             GEP_tup_like(bcx, boxed_closure_ty, llclosure, path + [i as int]);\n@@ -321,7 +321,7 @@ fn load_environment(enclosing_cx: @block_ctxt,\n           ty::closure_block. { llupvarptr = Load(bcx, llupvarptr); }\n           ty::closure_send. | ty::closure_shared. { }\n         }\n-        let def_id = ast_util::def_id_of_def(upvar_def);\n+        let def_id = ast_util::def_id_of_def(upvar.def);\n         fcx.llupvars.insert(def_id.node, llupvarptr);\n     }\n }"}, {"sha": "3ff12bcafc9143d7786cef7084338224822e8ecb", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "patch": "@@ -342,7 +342,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n       expr_fn(f, _) { // NDM captures\n         let rslt = expr_pp(fcx.ccx, e);\n         clear_pp(rslt);\n-        for def in *freevars::get_freevars(fcx.ccx.tcx, e.id) {\n+        for @{def, span} in *freevars::get_freevars(fcx.ccx.tcx, e.id) {\n             log (\"handle_var_def: def=\", def);\n             handle_var_def(fcx, rslt, def, \"upvar\");\n         }"}, {"sha": "840942bf723f7e8a5dc801a602ff552e51f471a8", "filename": "src/test/compile-fail/sendfn-captures-nonsendable-state.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-captures-nonsendable-state.rs?ref=b0f1a5f051f1e2a5eb164e0d2abb35edea4a4c75", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: not a sendable value\n+\n+fn main() {\n+    let x = @3u;\n+    let _f = sendfn(y: uint) -> uint { ret *x+y; };\n+}\n\\ No newline at end of file"}]}