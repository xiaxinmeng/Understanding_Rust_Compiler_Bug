{"sha": "8f2c0005066682a341673172983924ae189b25d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMmMwMDA1MDY2NjgyYTM0MTY3MzE3Mjk4MzkyNGFlMTg5YjI1ZDU=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-29T03:21:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-29T03:21:51Z"}, "message": "Rollup merge of #36741 - matklad:no-flacky-test, r=alexcrichton\n\nRemove CString drop test.\n\nThe test relies on the undefined behavior, and so may fail in some\ncircumstances. This can be worked around by stubbing a memory allocator\nin the test, but it is a bit of work, and LLVM could still theoretically\neliminate the write of the zero byte in release mode (which is\nintended).\n\nSo let's just remove the test and mark the function as inline. It\nshouldn't be optimized away when inlined into the debug build of user's\ncode.\n\nSupersedes #36607\n\nr? @alexcrichton", "tree": {"sha": "465b0c49c2273dad2bf49e02d8a5778cdf803e76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465b0c49c2273dad2bf49e02d8a5778cdf803e76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2c0005066682a341673172983924ae189b25d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2c0005066682a341673172983924ae189b25d5", "html_url": "https://github.com/rust-lang/rust/commit/8f2c0005066682a341673172983924ae189b25d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2c0005066682a341673172983924ae189b25d5/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725d0f5d6a2510b9caadd0cac4fb7ac323685e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/725d0f5d6a2510b9caadd0cac4fb7ac323685e6c", "html_url": "https://github.com/rust-lang/rust/commit/725d0f5d6a2510b9caadd0cac4fb7ac323685e6c"}, {"sha": "300e13808e679e6224f51705794b234dfd8bf73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/300e13808e679e6224f51705794b234dfd8bf73a", "html_url": "https://github.com/rust-lang/rust/commit/300e13808e679e6224f51705794b234dfd8bf73a"}], "stats": {"total": 53, "additions": 3, "deletions": 50}, "files": [{"sha": "6f5ce350e6cb376092275f63cf7bd9c124a8a862", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c0005066682a341673172983924ae189b25d5/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c0005066682a341673172983924ae189b25d5/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=8f2c0005066682a341673172983924ae189b25d5", "patch": "@@ -314,9 +314,11 @@ impl CString {\n }\n \n // Turns this `CString` into an empty string to prevent\n-// memory unsafe code from working by accident.\n+// memory unsafe code from working by accident. Inline\n+// to prevent LLVM from optimizing it away in debug builds.\n #[stable(feature = \"cstring_drop\", since = \"1.13.0\")]\n impl Drop for CString {\n+    #[inline]\n     fn drop(&mut self) {\n         unsafe { *self.inner.get_unchecked_mut(0) = 0; }\n     }"}, {"sha": "960391bb8deac7a788692d89de0325b9f6538b64", "filename": "src/test/run-pass/cstring-drop.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/725d0f5d6a2510b9caadd0cac4fb7ac323685e6c/src%2Ftest%2Frun-pass%2Fcstring-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725d0f5d6a2510b9caadd0cac4fb7ac323685e6c/src%2Ftest%2Frun-pass%2Fcstring-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcstring-drop.rs?ref=725d0f5d6a2510b9caadd0cac4fb7ac323685e6c", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-emscripten\n-\n-// Test that `CString::new(\"hello\").unwrap().as_ptr()` pattern\n-// leads to failure.\n-\n-use std::env;\n-use std::ffi::{CString, CStr};\n-use std::os::raw::c_char;\n-use std::process::{Command, Stdio};\n-\n-fn main() {\n-    let args: Vec<String> = env::args().collect();\n-    if args.len() > 1 && args[1] == \"child\" {\n-        // Repeat several times to be more confident that\n-        // it is `Drop` for `CString` that does the cleanup,\n-        // and not just some lucky UB.\n-        let xs = vec![CString::new(\"Hello\").unwrap(); 10];\n-        let ys = xs.iter().map(|s| s.as_ptr()).collect::<Vec<_>>();\n-        drop(xs);\n-        assert!(ys.into_iter().any(is_hello));\n-        return;\n-    }\n-\n-    let output = Command::new(&args[0]).arg(\"child\").output().unwrap();\n-    assert!(!output.status.success());\n-}\n-\n-fn is_hello(s: *const c_char) -> bool {\n-    // `s` is a dangling pointer and reading it is technically\n-    // undefined behavior. But we want to prevent the most diabolical\n-    // kind of UB (apart from nasal demons): reading a value that was\n-    // previously written.\n-    //\n-    // Segfaulting or reading an empty string is Ok,\n-    // reading \"Hello\" is bad.\n-    let s = unsafe { CStr::from_ptr(s) };\n-    let hello = CString::new(\"Hello\").unwrap();\n-    s == hello.as_ref()\n-}"}]}