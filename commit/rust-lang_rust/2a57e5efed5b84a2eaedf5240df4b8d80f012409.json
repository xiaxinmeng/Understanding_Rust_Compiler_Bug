{"sha": "2a57e5efed5b84a2eaedf5240df4b8d80f012409", "node_id": "C_kwDOAAsO6NoAKDJhNTdlNWVmZWQ1Yjg0YTJlYWVkZjUyNDBkZjRiOGQ4MGYwMTI0MDk", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-07-03T11:35:48Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-07-04T06:30:13Z"}, "message": "Use a bitset instead of a hash map in HIR ID validator", "tree": {"sha": "5d38215a1b0dd29778b3fdbd0a55ddcfcf2f9485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d38215a1b0dd29778b3fdbd0a55ddcfcf2f9485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a57e5efed5b84a2eaedf5240df4b8d80f012409", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmLCiPUACgkQkJzQ0mSD\nUWui0Av/WK0ItNSi7DybGdr0LvmcMhSOm92YZlDY9RiPG+bfFfsNfQw7yOFLxQvy\nSUbmurkrZnEuwZZ/eu2wPOslfOozK9lFo7AH3pgMth4NjGjMSmtWG7+65/vgsxZh\nySYnmjPgd7hdbmpd2hy7z1fQrdOK8GK1h7GLsijSQo2iF9pYuaonkMFQ1kaIEIsQ\n5ZzHcrvfYca1lar/k/A3Uo0JQ9bGQSz8TqKpdTZJHA/OO1+KHptAUkzTMXUVf8Cu\noM/Bt9GxPld8VhslQi06S6tF9C8BkGXk3czTxTkZSl7U4mvoJmg2HupGNfXenfMP\nVwJ3jMM90dqA+ss5hR8M5GmcDZzvD6tXHysx1fwCEwmaM05CYIMnz5btPOU49GJ6\nl43aAS6NtM9sy+i27Qj9NjSCXIhptXHzosvnFDEmnm5+bcJvsoQbUlWmvXmNv+GY\nvS9dQI3j2INw9plQeRwkdIgs3o104X0CTbLryOT+2CL5MVXtcmc4LrmIKLzcxv0V\n4W4CFWiB\n=Pj3A\n-----END PGP SIGNATURE-----", "payload": "tree 5d38215a1b0dd29778b3fdbd0a55ddcfcf2f9485\nparent 8c52a83c455f0044e00add954cb7d9ddb0dfb9a3\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1656848148 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1656916213 +0200\n\nUse a bitset instead of a hash map in HIR ID validator\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a57e5efed5b84a2eaedf5240df4b8d80f012409", "html_url": "https://github.com/rust-lang/rust/commit/2a57e5efed5b84a2eaedf5240df4b8d80f012409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a57e5efed5b84a2eaedf5240df4b8d80f012409/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "html_url": "https://github.com/rust-lang/rust/commit/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "5b664e19c18c0f23b3c33250ae3d20b88450015d", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a57e5efed5b84a2eaedf5240df4b8d80f012409/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57e5efed5b84a2eaedf5240df4b8d80f012409/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=2a57e5efed5b84a2eaedf5240df4b8d80f012409", "patch": "@@ -1546,6 +1546,16 @@ impl<T: Idx> GrowableBitSet<T> {\n         let (word_index, mask) = word_index_and_mask(elem);\n         self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)\n     }\n+\n+    #[inline]\n+    pub fn iter(&self) -> BitIter<'_, T> {\n+        self.bit_set.iter()\n+    }\n+\n+    #[inline]\n+    pub fn len(&self) -> usize {\n+        self.bit_set.count()\n+    }\n }\n \n impl<T: Idx> From<BitSet<T>> for GrowableBitSet<T> {"}, {"sha": "b268cee96db9342b80dbb2191f6280f556f68656", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a57e5efed5b84a2eaedf5240df4b8d80f012409/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57e5efed5b84a2eaedf5240df4b8d80f012409/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=2a57e5efed5b84a2eaedf5240df4b8d80f012409", "patch": "@@ -1,9 +1,9 @@\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lock;\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, ItemLocalId};\n+use rustc_index::bit_set::GrowableBitSet;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n@@ -40,7 +40,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n struct HirIdValidator<'a, 'hir> {\n     hir_map: Map<'hir>,\n     owner: Option<LocalDefId>,\n-    hir_ids_seen: FxHashSet<ItemLocalId>,\n+    hir_ids_seen: GrowableBitSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n@@ -80,7 +80,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n             let missing: Vec<_> = (0..=max as u32)\n-                .filter(|&i| !self.hir_ids_seen.contains(&ItemLocalId::from_u32(i)))\n+                .filter(|&i| !self.hir_ids_seen.contains(ItemLocalId::from_u32(i)))\n                 .collect();\n \n             // Try to map those to something more useful\n@@ -106,7 +106,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                     missing_items,\n                     self.hir_ids_seen\n                         .iter()\n-                        .map(|&local_id| HirId { owner, local_id })\n+                        .map(|local_id| HirId { owner, local_id })\n                         .map(|h| format!(\"({:?} {})\", h, self.hir_map.node_to_string(h)))\n                         .collect::<Vec<_>>()\n                 )"}]}