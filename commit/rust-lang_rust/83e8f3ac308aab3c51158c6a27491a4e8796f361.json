{"sha": "83e8f3ac308aab3c51158c6a27491a4e8796f361", "node_id": "C_kwDOAAsO6NoAKDgzZThmM2FjMzA4YWFiM2M1MTE1OGM2YTI3NDkxYTRlODc5NmYzNjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-18T08:18:56Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-18T08:19:04Z"}, "message": "Move `CompletionContext::incomplete_let` into `PathKind::Expr`", "tree": {"sha": "2cfc4633808f7bcfaea26b74d5f18b65005fcfee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cfc4633808f7bcfaea26b74d5f18b65005fcfee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e8f3ac308aab3c51158c6a27491a4e8796f361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e8f3ac308aab3c51158c6a27491a4e8796f361", "html_url": "https://github.com/rust-lang/rust/commit/83e8f3ac308aab3c51158c6a27491a4e8796f361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e8f3ac308aab3c51158c6a27491a4e8796f361/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7369e5120d88ca0c75d32a6ca3558b64351a6858", "url": "https://api.github.com/repos/rust-lang/rust/commits/7369e5120d88ca0c75d32a6ca3558b64351a6858", "html_url": "https://github.com/rust-lang/rust/commit/7369e5120d88ca0c75d32a6ca3558b64351a6858"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "f8747b072492b5bd95b429a80c6cc62b24c8ec75", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=83e8f3ac308aab3c51158c6a27491a4e8796f361", "patch": "@@ -110,12 +110,18 @@ impl Completions {\n         [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n     }\n \n-    pub(crate) fn add_keyword_snippet(&mut self, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+    pub(crate) fn add_keyword_snippet_expr(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        kw: &str,\n+        snippet: &str,\n+        incomplete_let: bool,\n+    ) {\n         let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n \n         match ctx.config.snippet_cap {\n             Some(cap) => {\n-                if snippet.ends_with('}') && ctx.incomplete_let {\n+                if snippet.ends_with('}') && incomplete_let {\n                     // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n                     cov_mark::hit!(let_semi);\n                     item.insert_snippet(cap, format!(\"{};\", snippet));\n@@ -130,6 +136,16 @@ impl Completions {\n         item.add_to(self);\n     }\n \n+    pub(crate) fn add_keyword_snippet(&mut self, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+        let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n+\n+        match ctx.config.snippet_cap {\n+            Some(cap) => item.insert_snippet(cap, snippet),\n+            None => item.insert_text(if snippet.contains('$') { kw } else { snippet }),\n+        };\n+        item.add_to(self);\n+    }\n+\n     pub(crate) fn add_crate_roots(&mut self, ctx: &CompletionContext) {\n         ctx.process_all_names(&mut |name, res| match res {\n             ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {"}, {"sha": "e4d1c290c07cb59d30bc6802ea805eb5e1ecbcd2", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=83e8f3ac308aab3c51158c6a27491a4e8796f361", "patch": "@@ -26,6 +26,7 @@ pub(crate) fn complete_expr_path(\n         wants_mut_token,\n         in_condition,\n         ty,\n+        incomplete_let,\n     ) = match path_ctx {\n         &PathCompletionCtx {\n             kind:\n@@ -34,6 +35,7 @@ pub(crate) fn complete_expr_path(\n                     in_loop_body,\n                     after_if_expr,\n                     in_condition,\n+                    incomplete_let,\n                     ref ref_expr_parent,\n                     ref is_func_update,\n                     ref innermost_ret_ty,\n@@ -50,6 +52,7 @@ pub(crate) fn complete_expr_path(\n             ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false),\n             in_condition,\n             innermost_ret_ty,\n+            incomplete_let,\n         ),\n         _ => return,\n     };\n@@ -220,7 +223,8 @@ pub(crate) fn complete_expr_path(\n             });\n \n             if !is_func_update {\n-                let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n+                let mut add_keyword =\n+                    |kw, snippet| acc.add_keyword_snippet_expr(ctx, kw, snippet, incomplete_let);\n \n                 if !in_block_expr {\n                     add_keyword(\"unsafe\", \"unsafe {\\n    $0\\n}\");"}, {"sha": "bc2c2fc71323f8ba43d0111166842db4a7fa1bec", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=83e8f3ac308aab3c51158c6a27491a4e8796f361", "patch": "@@ -93,6 +93,7 @@ pub(super) enum PathKind {\n         after_if_expr: bool,\n         /// Whether this expression is the direct condition of an if or while expression\n         in_condition: bool,\n+        incomplete_let: bool,\n         ref_expr_parent: Option<ast::RefExpr>,\n         is_func_update: Option<ast::RecordExpr>,\n         self_param: Option<hir::SelfParam>,\n@@ -322,9 +323,6 @@ pub(crate) struct CompletionContext<'a> {\n     /// The parent impl of the cursor position if it exists.\n     // FIXME: This probably doesn't belong here\n     pub(super) impl_def: Option<ast::Impl>,\n-    /// Are we completing inside a let statement with a missing semicolon?\n-    // FIXME: This should be part of PathKind::Expr\n-    pub(super) incomplete_let: bool,\n \n     // FIXME: This shouldn't exist\n     pub(super) previous_token: Option<SyntaxToken>,\n@@ -500,7 +498,6 @@ impl<'a> CompletionContext<'a> {\n             expected_name: None,\n             expected_type: None,\n             impl_def: None,\n-            incomplete_let: false,\n             previous_token: None,\n             // dummy value, will be overwritten\n             ident_ctx: IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: None },"}, {"sha": "d416d8251d75fd28fed2f0923cb43fba6470bb63", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e8f3ac308aab3c51158c6a27491a4e8796f361/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=83e8f3ac308aab3c51158c6a27491a4e8796f361", "patch": "@@ -330,11 +330,6 @@ impl<'a> CompletionContext<'a> {\n         self.previous_token =\n             syntax_element.clone().into_token().and_then(previous_non_trivia_token);\n \n-        self.incomplete_let =\n-            syntax_element.ancestors().take(6).find_map(ast::LetStmt::cast).map_or(false, |it| {\n-                it.syntax().text_range().end() == syntax_element.text_range().end()\n-            });\n-\n         (self.expected_type, self.expected_name) = self.expected_type_and_name();\n \n         // Overwrite the path kind for derives\n@@ -767,6 +762,10 @@ impl<'a> CompletionContext<'a> {\n             };\n             let is_func_update = func_update_record(it);\n             let in_condition = is_in_condition(&expr);\n+            let incomplete_let = it\n+                .parent()\n+                .and_then(ast::LetStmt::cast)\n+                .map_or(false, |it| it.semicolon_token().is_none());\n \n             PathKind::Expr {\n                 in_block_expr,\n@@ -777,6 +776,7 @@ impl<'a> CompletionContext<'a> {\n                 is_func_update,\n                 innermost_ret_ty,\n                 self_param,\n+                incomplete_let,\n             }\n         };\n         let make_path_kind_type = |ty: ast::Type| {"}]}