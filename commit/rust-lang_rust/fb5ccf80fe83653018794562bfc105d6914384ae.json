{"sha": "fb5ccf80fe83653018794562bfc105d6914384ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNWNjZjgwZmU4MzY1MzAxODc5NDU2MmJmYzEwNWQ2OTE0Mzg0YWU=", "commit": {"author": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2016-11-18T10:31:19Z"}, "committer": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2016-11-18T10:31:19Z"}, "message": "Warn when a #[should_panic] test has an unexpected message", "tree": {"sha": "8cee96ac32e81a24d6dae4be61b6ac0b3ddccfec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cee96ac32e81a24d6dae4be61b6ac0b3ddccfec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb5ccf80fe83653018794562bfc105d6914384ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5ccf80fe83653018794562bfc105d6914384ae", "html_url": "https://github.com/rust-lang/rust/commit/fb5ccf80fe83653018794562bfc105d6914384ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb5ccf80fe83653018794562bfc105d6914384ae/comments", "author": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9", "html_url": "https://github.com/rust-lang/rust/commit/d6689fdc616fd3e7af9946072cb0aaceb2bb26b9"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "8749a64e5fdb466d710a98843931cbdfa6283701", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ccf80fe83653018794562bfc105d6914384ae/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ccf80fe83653018794562bfc105d6914384ae/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=fb5ccf80fe83653018794562bfc105d6914384ae", "patch": "@@ -75,9 +75,9 @@ const TEST_WARN_TIMEOUT_S: u64 = 60;\n // to be used by rustc to compile tests in libtest\n pub mod test {\n     pub use {Bencher, TestName, TestResult, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n-             TrIgnored, TrOk, Metric, MetricMap, StaticTestFn, StaticTestName, DynTestName,\n-             DynTestFn, run_test, test_main, test_main_static, filter_tests, parse_opts,\n-             StaticBenchFn, ShouldPanic};\n+             TrFailedMsg, TrIgnored, TrOk, Metric, MetricMap, StaticTestFn, StaticTestName,\n+             DynTestName, DynTestFn, run_test, test_main, test_main_static, filter_tests,\n+             parse_opts, StaticBenchFn, ShouldPanic};\n }\n \n pub mod stats;\n@@ -473,6 +473,7 @@ pub struct BenchSamples {\n pub enum TestResult {\n     TrOk,\n     TrFailed,\n+    TrFailedMsg(String),\n     TrIgnored,\n     TrMetrics(MetricMap),\n     TrBench(BenchSamples),\n@@ -611,7 +612,7 @@ impl<T: Write> ConsoleTestState<T> {\n     pub fn write_result(&mut self, result: &TestResult) -> io::Result<()> {\n         match *result {\n             TrOk => self.write_ok(),\n-            TrFailed => self.write_failed(),\n+            TrFailed | TrFailedMsg(_) => self.write_failed(),\n             TrIgnored => self.write_ignored(),\n             TrMetrics(ref mm) => {\n                 self.write_metric()?;\n@@ -638,6 +639,7 @@ impl<T: Write> ConsoleTestState<T> {\n                                 match *result {\n                                     TrOk => \"ok\".to_owned(),\n                                     TrFailed => \"failed\".to_owned(),\n+                                    TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n                                     TrIgnored => \"ignored\".to_owned(),\n                                     TrMetrics(ref mm) => mm.fmt_metrics(),\n                                     TrBench(ref bs) => fmt_bench_samples(bs),\n@@ -773,6 +775,14 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n                         st.failed += 1;\n                         st.failures.push((test, stdout));\n                     }\n+                    TrFailedMsg(msg) => {\n+                        st.failed += 1;\n+                        let mut stdout = stdout;\n+                        stdout.extend_from_slice(\n+                            format!(\"note: {}\", msg).as_bytes()\n+                        );\n+                        st.failures.push((test, stdout));\n+                    }\n                 }\n                 Ok(())\n             }\n@@ -1270,12 +1280,16 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> Tes\n     match (&desc.should_panic, task_result) {\n         (&ShouldPanic::No, Ok(())) |\n         (&ShouldPanic::Yes, Err(_)) => TrOk,\n-        (&ShouldPanic::YesWithMessage(msg), Err(ref err))\n+        (&ShouldPanic::YesWithMessage(msg), Err(ref err)) =>\n             if err.downcast_ref::<String>()\n-               .map(|e| &**e)\n-               .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n-               .map(|e| e.contains(msg))\n-               .unwrap_or(false) => TrOk,\n+                  .map(|e| &**e)\n+                  .or_else(|| err.downcast_ref::<&'static str>().map(|e| *e))\n+                  .map(|e| e.contains(msg))\n+                  .unwrap_or(false) {\n+                TrOk\n+            } else {\n+                TrFailedMsg(format!(\"Panic did not include expected string '{}'\", msg))\n+            },\n         _ => TrFailed,\n     }\n }\n@@ -1482,8 +1496,9 @@ pub mod bench {\n \n #[cfg(test)]\n mod tests {\n-    use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts, TestDesc, TestDescAndFn,\n-               TestOpts, run_test, MetricMap, StaticTestName, DynTestName, DynTestFn, ShouldPanic};\n+    use test::{TrFailed, TrFailedMsg, TrIgnored, TrOk, filter_tests, parse_opts, TestDesc,\n+               TestDescAndFn, TestOpts, run_test, MetricMap, StaticTestName, DynTestName,\n+               DynTestFn, ShouldPanic};\n     use std::sync::mpsc::channel;\n \n     #[test]\n@@ -1565,18 +1580,20 @@ mod tests {\n         fn f() {\n             panic!(\"an error message\");\n         }\n+        let expected = \"foobar\";\n+        let failed_msg = \"Panic did not include expected string\";\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::YesWithMessage(\"foobar\"),\n+                should_panic: ShouldPanic::YesWithMessage(expected),\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n         let (_, res, _) = rx.recv().unwrap();\n-        assert!(res == TrFailed);\n+        assert!(res == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n     }\n \n     #[test]"}, {"sha": "7186672b4049e09db12bdabf11c8cc7759a4a609", "filename": "src/test/run-fail/test-should-panic-bad-message.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ccf80fe83653018794562bfc105d6914384ae/src%2Ftest%2Frun-fail%2Ftest-should-panic-bad-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ccf80fe83653018794562bfc105d6914384ae/src%2Ftest%2Frun-fail%2Ftest-should-panic-bad-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-should-panic-bad-message.rs?ref=fb5ccf80fe83653018794562bfc105d6914384ae", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+// error-pattern:panicked at 'bar'\n+// check-stdout\n+#[test]\n+#[should_panic(expected = \"foo\")]\n+pub fn test_bar() {\n+    panic!(\"bar\")\n+}"}, {"sha": "50dc2aed8e9d017355ebf8160a07822968b3b526", "filename": "src/test/run-fail/test-should-panic-no-message.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb5ccf80fe83653018794562bfc105d6914384ae/src%2Ftest%2Frun-fail%2Ftest-should-panic-no-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb5ccf80fe83653018794562bfc105d6914384ae/src%2Ftest%2Frun-fail%2Ftest-should-panic-no-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-should-panic-no-message.rs?ref=fb5ccf80fe83653018794562bfc105d6914384ae", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+// error-pattern:panicked at 'explicit panic'\n+// check-stdout\n+#[test]\n+#[should_panic(expected = \"foo\")]\n+pub fn test_explicit() {\n+    panic!()\n+}"}]}