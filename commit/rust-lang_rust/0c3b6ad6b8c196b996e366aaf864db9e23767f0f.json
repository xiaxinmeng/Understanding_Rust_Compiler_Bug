{"sha": "0c3b6ad6b8c196b996e366aaf864db9e23767f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjM2I2YWQ2YjhjMTk2Yjk5NmUzNjZhYWY4NjRkYjllMjM3NjdmMGY=", "commit": {"author": {"name": "U-NOV2010\\eugals", "email": "C:\\Self\\AppData\\Mail", "date": "2013-09-18T12:55:39Z"}, "committer": {"name": "Evgeny Sologubov", "email": "C:\\Self\\AppData\\Mail", "date": "2013-09-19T14:34:30Z"}, "message": "will not copy trait_callee on stack if it's source expr is a plain borrowed ref", "tree": {"sha": "2cde3f88a288ba10f5b6d31e37c90f2b3ee2aeee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cde3f88a288ba10f5b6d31e37c90f2b3ee2aeee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c3b6ad6b8c196b996e366aaf864db9e23767f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3b6ad6b8c196b996e366aaf864db9e23767f0f", "html_url": "https://github.com/rust-lang/rust/commit/0c3b6ad6b8c196b996e366aaf864db9e23767f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c3b6ad6b8c196b996e366aaf864db9e23767f0f/comments", "author": null, "committer": null, "parents": [{"sha": "dfa3f5fa8d20bc970843c88bc5cbca398a26ce7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa3f5fa8d20bc970843c88bc5cbca398a26ce7c", "html_url": "https://github.com/rust-lang/rust/commit/dfa3f5fa8d20bc970843c88bc5cbca398a26ce7c"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "01702e749a3569bf0b1cdafdd59e33d9e7dc69ba", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c3b6ad6b8c196b996e366aaf864db9e23767f0f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3b6ad6b8c196b996e366aaf864db9e23767f0f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=0c3b6ad6b8c196b996e366aaf864db9e23767f0f", "patch": "@@ -343,7 +343,6 @@ pub fn trans_to_datum(bcx: @mut Block, expr: @ast::Expr) -> DatumBlock {\n             _ => {}\n         }\n \n-        \n         let scratch = scratch_datum(bcx, target_obj_ty,\n                                     \"__auto_borrow_obj\", false);\n "}, {"sha": "934dfabbb4de4aa4040600499d664fe26d143103", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c3b6ad6b8c196b996e366aaf864db9e23767f0f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3b6ad6b8c196b996e366aaf864db9e23767f0f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=0c3b6ad6b8c196b996e366aaf864db9e23767f0f", "patch": "@@ -434,13 +434,22 @@ pub fn trans_trait_callee(bcx: @mut Block,\n     let _icx = push_ctxt(\"impl::trans_trait_callee\");\n     let mut bcx = bcx;\n \n+    // make a local copy for trait if needed\n     let self_ty = expr_ty_adjusted(bcx, self_expr);\n-    let self_scratch = scratch_datum(bcx, self_ty, \"__trait_callee\", false);\n-    bcx = expr::trans_into(bcx, self_expr, expr::SaveIn(self_scratch.val));\n+    let self_scratch = match ty::get(self_ty).sty {\n+        ty::ty_trait(_, _, ty::RegionTraitStore(*), _, _) => {\n+            unpack_datum!(bcx, expr::trans_to_datum(bcx, self_expr))\n+        }\n+        _ => {\n+            let d = scratch_datum(bcx, self_ty, \"__trait_callee\", false);\n+            bcx = expr::trans_into(bcx, self_expr, expr::SaveIn(d.val));\n+            // Arrange a temporary cleanup for the object in case something\n+            // should go wrong before the method is actually *invoked*.\n+            d.add_clean(bcx);\n+            d\n+        }\n+    };\n \n-    // Arrange a temporary cleanup for the object in case something\n-    // should go wrong before the method is actually *invoked*.\n-    self_scratch.add_clean(bcx);\n \n     let callee_ty = node_id_type(bcx, callee_id);\n     trans_trait_callee_from_llval(bcx,"}]}