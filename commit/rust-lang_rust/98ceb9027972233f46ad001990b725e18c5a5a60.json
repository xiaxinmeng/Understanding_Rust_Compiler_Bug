{"sha": "98ceb9027972233f46ad001990b725e18c5a5a60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2ViOTAyNzk3MjIzM2Y0NmFkMDAxOTkwYjcyNWUxOGM1YTVhNjA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T14:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T14:39:06Z"}, "message": "Rollup merge of #74227 - erikdesjardins:layun, r=estebank\n\nRemove an unwrap in layout computation\n\nA tiny improvement.", "tree": {"sha": "a773f2f958ebdd258dbd9c7a3ec2b621e1e39505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a773f2f958ebdd258dbd9c7a3ec2b621e1e39505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ceb9027972233f46ad001990b725e18c5a5a60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDcOKCRBK7hj4Ov3rIwAAdHIIAIi18v5tAdQakUGQG/a6JqeM\njb3bflkESxKPFtSxlW8O9GFxO0eBlQk+57vGvDih4gEDKk8dOQcOvvadrSvvy0Eh\nwU88Q0+vP/UMk3pLI50agCG6ZhJpSFF6L0cCMsiFBpfFmtct7y2hJRxjkoTyA8rh\nqNW4Mg+xk56SBg8VbQoKcxsib/AvlXDqk6QNjQ+s2Qh3omWnOUkSZRs/ChpscRjV\njfttPRiWsS0dxhkaA9aebS/LylH9YYuXvh07TZ3NzW1LhjWfJserA+mUQ8e5SVLv\nkEB9r6CPu6/9c+glYhoz+6BDwHPXncuSxZu2Pmkt/dCpV+Uhn6/CVn2Sf+h0kl0=\n=dD6T\n-----END PGP SIGNATURE-----\n", "payload": "tree a773f2f958ebdd258dbd9c7a3ec2b621e1e39505\nparent 063bbc485eca78d734b4987688b9277b2bc0bc6e\nparent 23d7b3f6f1a345ad95f0812c85613627164b6c39\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594737546 -0700\ncommitter GitHub <noreply@github.com> 1594737546 -0700\n\nRollup merge of #74227 - erikdesjardins:layun, r=estebank\n\nRemove an unwrap in layout computation\n\nA tiny improvement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ceb9027972233f46ad001990b725e18c5a5a60", "html_url": "https://github.com/rust-lang/rust/commit/98ceb9027972233f46ad001990b725e18c5a5a60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ceb9027972233f46ad001990b725e18c5a5a60/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063bbc485eca78d734b4987688b9277b2bc0bc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/063bbc485eca78d734b4987688b9277b2bc0bc6e", "html_url": "https://github.com/rust-lang/rust/commit/063bbc485eca78d734b4987688b9277b2bc0bc6e"}, {"sha": "23d7b3f6f1a345ad95f0812c85613627164b6c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d7b3f6f1a345ad95f0812c85613627164b6c39", "html_url": "https://github.com/rust-lang/rust/commit/23d7b3f6f1a345ad95f0812c85613627164b6c39"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "82daae7d921b2a2b3c6a7060553a6e5f4315c3d7", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ceb9027972233f46ad001990b725e18c5a5a60/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ceb9027972233f46ad001990b725e18c5a5a60/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=98ceb9027972233f46ad001990b725e18c5a5a60", "patch": "@@ -774,12 +774,12 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     (present_variants.next(), present_variants.next())\n                 };\n                 let present_first = match present_first {\n-                    present_first @ Some(_) => present_first,\n+                    Some(present_first) => present_first,\n                     // Uninhabited because it has no variants, or only absent ones.\n                     None if def.is_enum() => return tcx.layout_raw(param_env.and(tcx.types.never)),\n                     // If it's a struct, still compute a layout so that we can still compute the\n                     // field offsets.\n-                    None => Some(VariantIdx::new(0)),\n+                    None => VariantIdx::new(0),\n                 };\n \n                 let is_struct = !def.is_enum() ||\n@@ -791,7 +791,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // Struct, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n \n-                    let v = present_first.unwrap();\n+                    let v = present_first;\n                     let kind = if def.is_enum() || variants[v].is_empty() {\n                         StructKind::AlwaysSized\n                     } else {"}]}