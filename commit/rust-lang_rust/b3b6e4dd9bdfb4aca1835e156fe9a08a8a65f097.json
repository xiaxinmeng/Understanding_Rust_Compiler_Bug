{"sha": "b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYjZlNGRkOWJkZmI0YWNhMTgzNWUxNTZmZTlhMDhhOGE2NWYwOTc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-23T17:24:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-29T17:19:41Z"}, "message": "Some refactorings", "tree": {"sha": "da0c5ef7ef4b8de1393d0c121e403a916f9781bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0c5ef7ef4b8de1393d0c121e403a916f9781bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "html_url": "https://github.com/rust-lang/rust/commit/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a", "html_url": "https://github.com/rust-lang/rust/commit/0c1dc62c1ec3c23dcb5e90500a2b3b25817ad03a"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "09bc4a357954370d4a121e60779c93420d08d448", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -58,7 +58,6 @@ impl BackendTypes for Builder<'_, 'll, 'tcx> {\n     type Value = <CodegenCx<'ll, 'tcx> as BackendTypes>::Value;\n     type BasicBlock = <CodegenCx<'ll, 'tcx> as BackendTypes>::BasicBlock;\n     type Type = <CodegenCx<'ll, 'tcx> as BackendTypes>::Type;\n-    type Context = <CodegenCx<'ll, 'tcx> as BackendTypes>::Context;\n     type Funclet = <CodegenCx<'ll, 'tcx> as BackendTypes>::Funclet;\n \n     type DIScope = <CodegenCx<'ll, 'tcx> as BackendTypes>::DIScope;"}, {"sha": "b45a378538f007137c7bdcd01612301b64a5af6d", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -98,7 +98,6 @@ impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type Value = &'ll Value;\n     type BasicBlock = &'ll BasicBlock;\n     type Type = &'ll Type;\n-    type Context = &'ll llvm::Context;\n     type Funclet = Funclet<'ll>;\n \n     type DIScope = &'ll llvm::debuginfo::DIScope;"}, {"sha": "b100b6778033845b509c922ecaf0cd807abf177c", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -47,6 +47,22 @@ impl fmt::Debug for Type {\n     }\n }\n \n+impl CodegenCx<'ll, 'tcx> {\n+    crate fn type_named_struct(&self, name: &str) -> &'ll Type {\n+        let name = SmallCStr::new(name);\n+        unsafe {\n+            llvm::LLVMStructCreateNamed(self.llcx, name.as_ptr())\n+        }\n+    }\n+\n+    crate fn set_struct_body(&self, ty: &'ll Type, els: &[&'ll Type], packed: bool) {\n+        unsafe {\n+            llvm::LLVMStructSetBody(ty, els.as_ptr(),\n+                                    els.len() as c_uint, packed as Bool)\n+        }\n+    }\n+}\n+\n impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn type_void(&self) -> &'ll Type {\n         unsafe {\n@@ -160,13 +176,6 @@ impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn type_named_struct(&self, name: &str) -> &'ll Type {\n-        let name = SmallCStr::new(name);\n-        unsafe {\n-            llvm::LLVMStructCreateNamed(self.llcx, name.as_ptr())\n-        }\n-    }\n-\n \n     fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n         unsafe {\n@@ -186,13 +195,6 @@ impl BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    fn set_struct_body(&self, ty: &'ll Type, els: &[&'ll Type], packed: bool) {\n-        unsafe {\n-            llvm::LLVMStructSetBody(ty, els.as_ptr(),\n-                                    els.len() as c_uint, packed as Bool)\n-        }\n-    }\n-\n     fn type_ptr_to(&self, ty: &'ll Type) -> &'ll Type {\n         assert_ne!(self.type_kind(ty), TypeKind::Function,\n                    \"don't call ptr_to on function types, use ptr_to_llvm_type on FnType instead\");"}, {"sha": "bcf6d7b6bf8f284a3c11ca9d4f48c9d86f4d558c", "filename": "src/librustc_codegen_ssa/debuginfo.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -23,22 +23,21 @@ impl<D> FunctionDebugContext<D> {\n         match *self {\n             FunctionDebugContext::RegularContext(ref data) => data,\n             FunctionDebugContext::DebugInfoDisabled => {\n-                span_bug!(span, \"{}\", FunctionDebugContext::<D>::debuginfo_disabled_message());\n+                span_bug!(\n+                    span,\n+                    \"debuginfo: Error trying to access FunctionDebugContext \\\n+                     although debug info is disabled!\",\n+                );\n             }\n             FunctionDebugContext::FunctionWithoutDebugInfo => {\n-                span_bug!(span, \"{}\", FunctionDebugContext::<D>::should_be_ignored_message());\n+                span_bug!(\n+                    span,\n+                    \"debuginfo: Error trying to access FunctionDebugContext \\\n+                     for function that should be ignored by debug info!\",\n+                );\n             }\n         }\n     }\n-\n-    fn debuginfo_disabled_message() -> &'static str {\n-        \"debuginfo: Error trying to access FunctionDebugContext although debug info is disabled!\"\n-    }\n-\n-    fn should_be_ignored_message() -> &'static str {\n-        \"debuginfo: Error trying to access FunctionDebugContext for function that should be \\\n-         ignored by debug info!\"\n-    }\n }\n \n /// Enables emitting source locations for the given functions."}, {"sha": "9489cb164f4459c242f8a0e1dc46202206ca4a1e", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -26,7 +26,6 @@ pub trait BackendTypes {\n     type Value: CodegenObject;\n     type BasicBlock: Copy;\n     type Type: CodegenObject;\n-    type Context;\n     type Funclet;\n \n     type DIScope: Copy;"}, {"sha": "1c334898ce6ad17a7599874cdc6ad000fdc1061a", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -92,7 +92,6 @@ pub trait HasCodegen<'tcx>: Backend<'tcx> {\n             Value = Self::Value,\n             BasicBlock = Self::BasicBlock,\n             Type = Self::Type,\n-            Context = Self::Context,\n             Funclet = Self::Funclet,\n             DIScope = Self::DIScope,\n         >;"}, {"sha": "bc6b70ad02ffe597a19496b23d13931f06f31cba", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=b3b6e4dd9bdfb4aca1835e156fe9a08a8a65f097", "patch": "@@ -41,11 +41,9 @@ pub trait BaseTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_func(&self, args: &[Self::Type], ret: Self::Type) -> Self::Type;\n     fn type_variadic_func(&self, args: &[Self::Type], ret: Self::Type) -> Self::Type;\n     fn type_struct(&self, els: &[Self::Type], packed: bool) -> Self::Type;\n-    fn type_named_struct(&self, name: &str) -> Self::Type;\n     fn type_array(&self, ty: Self::Type, len: u64) -> Self::Type;\n     fn type_vector(&self, ty: Self::Type, len: u64) -> Self::Type;\n     fn type_kind(&self, ty: Self::Type) -> TypeKind;\n-    fn set_struct_body(&self, ty: Self::Type, els: &[Self::Type], packed: bool);\n     fn type_ptr_to(&self, ty: Self::Type) -> Self::Type;\n     fn element_type(&self, ty: Self::Type) -> Self::Type;\n "}]}