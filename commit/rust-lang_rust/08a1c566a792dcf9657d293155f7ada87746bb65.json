{"sha": "08a1c566a792dcf9657d293155f7ada87746bb65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTFjNTY2YTc5MmRjZjk2NTdkMjkzMTU1ZjdhZGE4Nzc0NmJiNjU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-27T15:56:25Z"}, "message": "Detect use-after-scope bugs with AddressSanitizer\n\nEnable use-after-scope checks by default when using AddressSanitizer.\nThey allow to detect incorrect use of stack objects after their scope\nhave already ended. The detection is based on LLVM lifetime intrinsics.\n\nTo facilitate the use of this functionality, the lifetime intrinsics are\nnow emitted regardless of optimization level if enabled sanitizer makes\nuse of them.", "tree": {"sha": "a362669b9a1a1bd8d61a4e4b66555433af913c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a362669b9a1a1bd8d61a4e4b66555433af913c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a1c566a792dcf9657d293155f7ada87746bb65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a1c566a792dcf9657d293155f7ada87746bb65", "html_url": "https://github.com/rust-lang/rust/commit/08a1c566a792dcf9657d293155f7ada87746bb65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a1c566a792dcf9657d293155f7ada87746bb65/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5f6d41e140a3d6a9c6584d555bc09f10222d24", "html_url": "https://github.com/rust-lang/rust/commit/1d5f6d41e140a3d6a9c6584d555bc09f10222d24"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "c59b81eb4cc32f772f76b804f6e2f27c424c68cd", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08a1c566a792dcf9657d293155f7ada87746bb65/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a1c566a792dcf9657d293155f7ada87746bb65/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=08a1c566a792dcf9657d293155f7ada87746bb65", "patch": "@@ -7,7 +7,7 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use libc::{c_char, c_uint};\n use log::debug;\n-use rustc::session::config;\n+use rustc::session::config::{self, Sanitizer};\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_codegen_ssa::base::to_immediate;\n@@ -1232,12 +1232,19 @@ impl Builder<'a, 'll, 'tcx> {\n     }\n \n     fn call_lifetime_intrinsic(&mut self, intrinsic: &str, ptr: &'ll Value, size: Size) {\n-        if self.cx.sess().opts.optimize == config::OptLevel::No {\n+        let size = size.bytes();\n+        if size == 0 {\n             return;\n         }\n \n-        let size = size.bytes();\n-        if size == 0 {\n+        let opts = &self.cx.sess().opts;\n+        let emit = match opts.debugging_opts.sanitizer {\n+            // Some sanitizer use lifetime intrinsics. When they are in use,\n+            // emit lifetime intrinsics regardless of optimization level.\n+            Some(Sanitizer::Address) | Some(Sanitizer::Memory) => true,\n+            _ => opts.optimize != config::OptLevel::No,\n+        };\n+        if !emit {\n             return;\n         }\n "}, {"sha": "fad703698075d299b4b3d8187ec7033ecd0e2733", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08a1c566a792dcf9657d293155f7ada87746bb65/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/08a1c566a792dcf9657d293155f7ada87746bb65/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=08a1c566a792dcf9657d293155f7ada87746bb65", "patch": "@@ -87,8 +87,9 @@ extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n \n extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover) {\n   const bool CompileKernel = false;\n+  const bool UseAfterScope = true;\n \n-  return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover));\n+  return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover, UseAfterScope));\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {"}, {"sha": "6a2067e157af56c7e2b76ad53831acc510e65c95", "filename": "src/test/ui/sanitizer-use-after-scope.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08a1c566a792dcf9657d293155f7ada87746bb65/src%2Ftest%2Fui%2Fsanitizer-use-after-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a1c566a792dcf9657d293155f7ada87746bb65/src%2Ftest%2Fui%2Fsanitizer-use-after-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitizer-use-after-scope.rs?ref=08a1c566a792dcf9657d293155f7ada87746bb65", "patch": "@@ -0,0 +1,18 @@\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Zsanitizer=address\n+// run-fail\n+// error-pattern: ERROR: AddressSanitizer: stack-use-after-scope\n+\n+static mut P: *mut usize = std::ptr::null_mut();\n+\n+fn main() {\n+    unsafe {\n+        {\n+            let mut x = 0;\n+            P = &mut x;\n+        }\n+        std::ptr::write_volatile(P, 123);\n+    }\n+}"}]}