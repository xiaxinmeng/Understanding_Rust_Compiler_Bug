{"sha": "65187f51dce665b1ee23a0f3970f118d02683266", "node_id": "C_kwDOAAsO6NoAKDY1MTg3ZjUxZGNlNjY1YjFlZTIzYTBmMzk3MGYxMThkMDI2ODMyNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-25T13:14:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-25T13:14:11Z"}, "message": "Rollup merge of #98311 - eggyal:reverse-folder-hierarchy, r=jackh726\n\nReverse folder hierarchy\n\n#91318 introduced a trait for infallible folders distinct from the fallible version.  For some reason (completely unfathomable to me now that I look at it with fresh eyes), the infallible trait was a supertrait of the fallible one: that is, all fallible folders were required to also be infallible.  Moreover the `Error` associated type was defined on the infallible trait!  It's so absurd that it has me questioning whether I was entirely sane.\n\nThis trait reverses the hierarchy, so that the fallible trait is a supertrait of the infallible one: all infallible folders are required to also be fallible (which is a trivial blanket implementation).  This of course makes much more sense!  It also enables the `Error` associated type to sit on the fallible trait, where it sensibly belongs.\n\nThere is one downside however: folders expose a `tcx` accessor method.  Since the blanket fallible implementation for infallible folders only has access to a generic `F: TypeFolder`, we need that trait to expose such an accessor to which we can delegate.  Alternatively it's possible to extract that accessor into a separate `HasTcx` trait (or similar) that would then be a supertrait of both the fallible and infallible folder traits: this would ensure that there's only one unambiguous `tcx` method, at the cost of a little additional boilerplate.  If desired, I can submit that as a separate PR.\n\nr? ````@jackh726````", "tree": {"sha": "3b6b8253d3f5fab80803f0477b31558f54d395e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b6b8253d3f5fab80803f0477b31558f54d395e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65187f51dce665b1ee23a0f3970f118d02683266", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitwojCRBK7hj4Ov3rIwAAXPwIAEx25wifU2V9FJZ84lS4DHXF\nyY3DCwrAVrEkfjaUmdDnWbZDg3RT/b9Cn2iYgNFDlspFoU7EfkvP1GV9AgGb7khc\ntkmxkkJnuXHNcZq8B4JCqKI1fDUnoN+upqS4QepqGj589okoZfS7rm3yODh26B8x\nzsFaRADVAYQ2kiC+79t4BfsHsbVUYPC/UX4njqxpBPKl3+k1TgtXLPZrr7xsoEzG\nGUMpqVJkM7I/B/64roRTw+XKz0nFjCijGvJkbvWPH1OBMy7uRjll4NDlxqzH4aeV\nDQWZ04Is2sZOJ2lWf27Cre4O3Rw24cRtBCfrbE2V0rgW/hLg0CzyZvRlxvwDbCA=\n=8hBU\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b6b8253d3f5fab80803f0477b31558f54d395e2\nparent 8257ba29ef4c18315699bca559a3bb5358622502\nparent 75203eef19268d1fbef23cc1fa9c74fecfcb1405\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656162851 +0200\ncommitter GitHub <noreply@github.com> 1656162851 +0200\n\nRollup merge of #98311 - eggyal:reverse-folder-hierarchy, r=jackh726\n\nReverse folder hierarchy\n\n#91318 introduced a trait for infallible folders distinct from the fallible version.  For some reason (completely unfathomable to me now that I look at it with fresh eyes), the infallible trait was a supertrait of the fallible one: that is, all fallible folders were required to also be infallible.  Moreover the `Error` associated type was defined on the infallible trait!  It's so absurd that it has me questioning whether I was entirely sane.\n\nThis trait reverses the hierarchy, so that the fallible trait is a supertrait of the infallible one: all infallible folders are required to also be fallible (which is a trivial blanket implementation).  This of course makes much more sense!  It also enables the `Error` associated type to sit on the fallible trait, where it sensibly belongs.\n\nThere is one downside however: folders expose a `tcx` accessor method.  Since the blanket fallible implementation for infallible folders only has access to a generic `F: TypeFolder`, we need that trait to expose such an accessor to which we can delegate.  Alternatively it's possible to extract that accessor into a separate `HasTcx` trait (or similar) that would then be a supertrait of both the fallible and infallible folder traits: this would ensure that there's only one unambiguous `tcx` method, at the cost of a little additional boilerplate.  If desired, I can submit that as a separate PR.\n\nr? ````@jackh726````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65187f51dce665b1ee23a0f3970f118d02683266", "html_url": "https://github.com/rust-lang/rust/commit/65187f51dce665b1ee23a0f3970f118d02683266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65187f51dce665b1ee23a0f3970f118d02683266/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8257ba29ef4c18315699bca559a3bb5358622502", "url": "https://api.github.com/repos/rust-lang/rust/commits/8257ba29ef4c18315699bca559a3bb5358622502", "html_url": "https://github.com/rust-lang/rust/commit/8257ba29ef4c18315699bca559a3bb5358622502"}, {"sha": "75203eef19268d1fbef23cc1fa9c74fecfcb1405", "url": "https://api.github.com/repos/rust-lang/rust/commits/75203eef19268d1fbef23cc1fa9c74fecfcb1405", "html_url": "https://github.com/rust-lang/rust/commit/75203eef19268d1fbef23cc1fa9c74fecfcb1405"}], "stats": {"total": 103, "additions": 40, "deletions": 63}, "files": [{"sha": "1f3cb401314d6666141ad46cc736d3811c8f7ca5", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=65187f51dce665b1ee23a0f3970f118d02683266", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::tcx(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n             }\n             _ => r,\n         }\n@@ -179,15 +179,13 @@ struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n-}\n \n-impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         if !t.needs_infer() {\n             Ok(t) // micro-optimize -- if there is nothing in this type that this fold affects..."}, {"sha": "b1b8bc13e2f1320a1578e4a8e3001f9232efe309", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 34, "deletions": 51, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=65187f51dce665b1ee23a0f3970f118d02683266", "patch": "@@ -86,7 +86,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     /// A convenient alternative to `try_fold_with` for use with infallible\n     /// folders. Do not override this method, to ensure coherence with\n     /// `try_fold_with`.\n-    fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_fold_with(folder).into_ok()\n     }\n \n@@ -216,7 +216,7 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     /// A convenient alternative to `try_super_fold_with` for use with\n     /// infallible folders. Do not override this method, to ensure coherence\n     /// with `try_super_fold_with`.\n-    fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {\n+    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         self.try_super_fold_with(folder).into_ok()\n     }\n \n@@ -229,70 +229,46 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n \n-/// This trait is implemented for every folding traversal. There is a fold\n-/// method defined for every type of interest. Each such method has a default\n-/// that does an \"identity\" fold. Implementations of these methods often fall\n-/// back to a `super_fold_with` method if the primary argument doesn't\n-/// satisfy a particular condition.\n+/// This trait is implemented for every infallible folding traversal. There is\n+/// a fold method defined for every type of interest. Each such method has a\n+/// default that does an \"identity\" fold. Implementations of these methods\n+/// often fall back to a `super_fold_with` method if the primary argument\n+/// doesn't satisfy a particular condition.\n ///\n-/// If this folder is fallible (and therefore its [`Error`][`TypeFolder::Error`]\n-/// associated type is something other than the default `!`) then\n-/// [`FallibleTypeFolder`] should be implemented manually. Otherwise,\n-/// a blanket implementation of [`FallibleTypeFolder`] will defer to\n+/// A blanket implementation of [`FallibleTypeFolder`] will defer to\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n-pub trait TypeFolder<'tcx>: Sized {\n-    type Error = !;\n-\n+pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n     fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n-        Self: TypeFolder<'tcx, Error = !>,\n     {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         r.super_fold_with(self)\n     }\n \n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx> {\n         uv.super_fold_with(self)\n     }\n \n-    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n         p.super_fold_with(self)\n     }\n \n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n         bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n     }\n }\n@@ -304,7 +280,11 @@ pub trait TypeFolder<'tcx>: Sized {\n /// A blanket implementation of this trait (that defers to the relevant\n /// method of [`TypeFolder`]) is provided for all infallible folders in\n /// order to ensure the two APIs are coherent.\n-pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n+pub trait FallibleTypeFolder<'tcx>: Sized {\n+    type Error;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+\n     fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n         T: TypeFoldable<'tcx>,\n@@ -350,45 +330,48 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n // delegates to infallible methods to ensure coherence.\n impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n where\n-    F: TypeFolder<'tcx, Error = !>,\n+    F: TypeFolder<'tcx>,\n {\n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n+    type Error = !;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        TypeFolder::tcx(self)\n+    }\n+\n+    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, !>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         Ok(self.fold_binder(t))\n     }\n \n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, !> {\n         Ok(self.fold_ty(t))\n     }\n \n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n+    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, !> {\n         Ok(self.fold_region(r))\n     }\n \n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, !> {\n         Ok(self.fold_const(c))\n     }\n \n     fn try_fold_unevaluated(\n         &mut self,\n         c: ty::Unevaluated<'tcx>,\n-    ) -> Result<ty::Unevaluated<'tcx>, Self::Error> {\n+    ) -> Result<ty::Unevaluated<'tcx>, !> {\n         Ok(self.fold_unevaluated(c))\n     }\n \n-    fn try_fold_predicate(\n-        &mut self,\n-        p: ty::Predicate<'tcx>,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n+    fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n         Ok(self.fold_predicate(p))\n     }\n \n     fn try_fold_mir_const(\n         &mut self,\n         c: mir::ConstantKind<'tcx>,\n-    ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n+    ) -> Result<mir::ConstantKind<'tcx>, !> {\n         Ok(self.fold_mir_const(c))\n     }\n }"}, {"sha": "66a0a192a87c179a35ed2a3162f937bb59c611bd", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=65187f51dce665b1ee23a0f3970f118d02683266", "patch": "@@ -228,15 +228,13 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n-}\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n             Ok(t) => Ok(t.expect_ty()),"}, {"sha": "1417c8a511c24f8e0ffd784e3e9e0e8f2dc53530", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=65187f51dce665b1ee23a0f3970f118d02683266", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n             return val;\n         }\n \n-        let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);\n+        let result = ty::fold::shift_vars(TypeFolder::tcx(self), val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "7f15b683fda3e59e3b89fd20736f649da874f3c0", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65187f51dce665b1ee23a0f3970f118d02683266/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=65187f51dce665b1ee23a0f3970f118d02683266", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n@@ -162,15 +162,13 @@ struct QueryNormalizer<'cx, 'tcx> {\n     universes: Vec<Option<ty::UniverseIndex>>,\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     type Error = NoSolution;\n \n     fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n-}\n \n-impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     fn try_fold_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,"}]}