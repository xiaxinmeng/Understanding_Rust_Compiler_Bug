{"sha": "be10f14329c63710ca1b47e3ebebffed59a175f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTBmMTQzMjljNjM3MTBjYTFiNDdlM2ViZWJmZmVkNTlhMTc1ZjQ=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-02-24T20:54:32Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-03-13T02:19:18Z"}, "message": "tidy: check the licenses don't change", "tree": {"sha": "4d5a714548a4d36d9338ca03149c4e4294de6e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d5a714548a4d36d9338ca03149c4e4294de6e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be10f14329c63710ca1b47e3ebebffed59a175f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be10f14329c63710ca1b47e3ebebffed59a175f4", "html_url": "https://github.com/rust-lang/rust/commit/be10f14329c63710ca1b47e3ebebffed59a175f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be10f14329c63710ca1b47e3ebebffed59a175f4/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f45da02910b91783dc5313622d2338f34696760", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f45da02910b91783dc5313622d2338f34696760", "html_url": "https://github.com/rust-lang/rust/commit/3f45da02910b91783dc5313622d2338f34696760"}], "stats": {"total": 96, "additions": 60, "deletions": 36}, "files": [{"sha": "f6ad58a60112f2935883f651d0fb1a7e54594904", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/be10f14329c63710ca1b47e3ebebffed59a175f4/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be10f14329c63710ca1b47e3ebebffed59a175f4/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=be10f14329c63710ca1b47e3ebebffed59a175f4", "patch": "@@ -21,38 +21,33 @@ const LICENSES: &[&str] = &[\n /// should be considered bugs. Exceptions are only allowed in Rust\n /// tooling. It is _crucial_ that no exception crates be dependencies\n /// of the Rust runtime (std/test).\n-const EXCEPTIONS: &[&str] = &[\n-    \"mdbook\",             // MPL2, mdbook\n-    \"openssl\",            // BSD+advertising clause, cargo, mdbook\n-    \"pest\",               // MPL2, mdbook via handlebars\n-    \"arrayref\",           // BSD-2-Clause, mdbook via handlebars via pest\n-    \"toml-query\",         // MPL-2.0, mdbook\n-    \"toml-query_derive\",  // MPL-2.0, mdbook\n-    \"is-match\",           // MPL-2.0, mdbook\n-    \"smallvec\",           // MPL-2.0, rustdoc\n-    \"rdrand\",             // ISC, mdbook, rustfmt\n-    \"fuchsia-cprng\",      // BSD-3-Clause, mdbook, rustfmt\n-    \"fuchsia-zircon-sys\", // BSD-3-Clause, rustdoc, rustc, cargo\n-    \"fuchsia-zircon\",     // BSD-3-Clause, rustdoc, rustc, cargo (jobserver & tempdir)\n-    \"clippy_lints\",       // MPL-2.0, rls\n-    \"colored\",            // MPL-2.0, rustfmt\n-    \"ordslice\",           // Apache-2.0, rls\n-    \"cloudabi\",           // BSD-2-Clause, (rls -> crossbeam-channel 0.2 -> rand 0.5)\n-    \"ryu\",                // Apache-2.0, rls/cargo/... (because of serde)\n-    \"bytesize\",           // Apache-2.0, cargo\n-    \"im-rc\",              // MPL-2.0+, cargo\n-    \"adler32\",            // BSD-3-Clause AND Zlib, cargo dep that isn't used\n-    \"constant_time_eq\",   // CC0-1.0, rustfmt\n-    \"utf8parse\",          // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n-    \"vte\",                // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n-    \"sized-chunks\",       // MPL-2.0+, cargo via im-rc\n-    \"bitmaps\",            // MPL-2.0+, cargo via im-rc\n+const EXCEPTIONS: &[(&str, &str)] = &[\n+    (\"mdbook\", \"MPL-2.0\"),                  // mdbook\n+    (\"openssl\", \"Apache-2.0\"),              // cargo, mdbook\n+    (\"arrayref\", \"BSD-2-Clause\"),           // mdbook via handlebars via pest\n+    (\"toml-query\", \"MPL-2.0\"),              // mdbook\n+    (\"toml-query_derive\", \"MPL-2.0\"),       // mdbook\n+    (\"is-match\", \"MPL-2.0\"),                // mdbook\n+    (\"rdrand\", \"ISC\"),                      // mdbook, rustfmt\n+    (\"fuchsia-cprng\", \"BSD-3-Clause\"),      // mdbook, rustfmt\n+    (\"fuchsia-zircon-sys\", \"BSD-3-Clause\"), // rustdoc, rustc, cargo\n+    (\"fuchsia-zircon\", \"BSD-3-Clause\"),     // rustdoc, rustc, cargo (jobserver & tempdir)\n+    (\"colored\", \"MPL-2.0\"),                 // rustfmt\n+    (\"ordslice\", \"Apache-2.0\"),             // rls\n+    (\"cloudabi\", \"BSD-2-Clause\"),           // (rls -> crossbeam-channel 0.2 -> rand 0.5)\n+    (\"ryu\", \"Apache-2.0 OR BSL-1.0\"),       // rls/cargo/... (because of serde)\n+    (\"bytesize\", \"Apache-2.0\"),             // cargo\n+    (\"im-rc\", \"MPL-2.0+\"),                  // cargo\n+    (\"adler32\", \"BSD-3-Clause AND Zlib\"),   // cargo dep that isn't used\n+    (\"constant_time_eq\", \"CC0-1.0\"),        // rustfmt\n+    (\"sized-chunks\", \"MPL-2.0+\"),           // cargo via im-rc\n+    (\"bitmaps\", \"MPL-2.0+\"),                // cargo via im-rc\n     // FIXME: this dependency violates the documentation comment above:\n-    \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for `sgx` target\n-    \"dunce\",              // CC0-1.0 mdbook-linkcheck\n-    \"codespan-reporting\", // Apache-2.0 mdbook-linkcheck\n-    \"codespan\",           // Apache-2.0 mdbook-linkcheck\n-    \"crossbeam-channel\",  // MIT/Apache-2.0 AND BSD-2-Clause, cargo\n+    (\"fortanix-sgx-abi\", \"MPL-2.0\"), // libstd but only for `sgx` target\n+    (\"dunce\", \"CC0-1.0\"),            // mdbook-linkcheck\n+    (\"codespan-reporting\", \"Apache-2.0\"), // mdbook-linkcheck\n+    (\"codespan\", \"Apache-2.0\"),      // mdbook-linkcheck\n+    (\"crossbeam-channel\", \"MIT/Apache-2.0 AND BSD-2-Clause\"), // cargo\n ];\n \n /// Which crates to check against the whitelist?\n@@ -193,24 +188,53 @@ pub fn check(path: &Path, cargo: &Path, bad: &mut bool) {\n ///\n /// Packages listed in `EXCEPTIONS` are allowed for tools.\n fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n-    // Check that the EXCEPTIONS list does not have unused entries.\n-    for exception in EXCEPTIONS {\n-        if !metadata.packages.iter().any(|p| p.name == *exception) {\n+    // Validate the EXCEPTIONS list hasn't changed.\n+    for (name, license) in EXCEPTIONS {\n+        // Check that the package actually exists.\n+        if !metadata.packages.iter().any(|p| p.name == *name) {\n             println!(\n                 \"could not find exception package `{}`\\n\\\n                 Remove from EXCEPTIONS list if it is no longer used.\",\n-                exception\n+                name\n             );\n             *bad = true;\n         }\n+        // Check that the license hasn't changed.\n+        for pkg in metadata.packages.iter().filter(|p| p.name == *name) {\n+            if pkg.name == \"fuchsia-cprng\" {\n+                // This package doesn't declare a license expression. Manual\n+                // inspection of the license file is necessary, which appears\n+                // to be BSD-3-Clause.\n+                assert!(pkg.license.is_none());\n+                continue;\n+            }\n+            match &pkg.license {\n+                None => {\n+                    println!(\n+                        \"dependency exception `{}` does not declare a license expression\",\n+                        pkg.id\n+                    );\n+                    *bad = true;\n+                }\n+                Some(pkg_license) => {\n+                    if pkg_license.as_str() != *license {\n+                        println!(\"dependency exception `{}` license has changed\", name);\n+                        println!(\"    previously `{}` now `{}`\", license, pkg_license);\n+                        println!(\"    update EXCEPTIONS for the new license\");\n+                        *bad = true;\n+                    }\n+                }\n+            }\n+        }\n     }\n+    let exception_names: Vec<_> = EXCEPTIONS.iter().map(|(name, _license)| *name).collect();\n     // Check if any package does not have a valid license.\n     for pkg in &metadata.packages {\n         if pkg.source.is_none() {\n             // No need to check local packages.\n             continue;\n         }\n-        if EXCEPTIONS.contains(&pkg.name.as_str()) {\n+        if exception_names.contains(&pkg.name.as_str()) {\n             continue;\n         }\n         let license = match &pkg.license {"}]}