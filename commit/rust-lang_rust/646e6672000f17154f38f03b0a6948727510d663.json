{"sha": "646e6672000f17154f38f03b0a6948727510d663", "node_id": "C_kwDOAAsO6NoAKDY0NmU2NjcyMDAwZjE3MTU0ZjM4ZjAzYjBhNjk0ODcyNzUxMGQ2NjM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-14T09:17:19Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-14T10:53:22Z"}, "message": "add a `#[rustc_coinductive]` attribute", "tree": {"sha": "618cdc2b498d5ede0222a13e2f6e0df714bf0209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/618cdc2b498d5ede0222a13e2f6e0df714bf0209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/646e6672000f17154f38f03b0a6948727510d663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/646e6672000f17154f38f03b0a6948727510d663", "html_url": "https://github.com/rust-lang/rust/commit/646e6672000f17154f38f03b0a6948727510d663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/646e6672000f17154f38f03b0a6948727510d663/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ab7872fd77861e3d182ea85a82c4649c5bb3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ab7872fd77861e3d182ea85a82c4649c5bb3f8", "html_url": "https://github.com/rust-lang/rust/commit/e9ab7872fd77861e3d182ea85a82c4649c5bb3f8"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "9b1eee328903f196e8964fecd54e6a2c85d3d047", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -682,14 +682,17 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"language items are subject to change\",\n     ),\n     rustc_attr!(\n-        rustc_pass_by_value, Normal,\n-        template!(Word), ErrorFollowing,\n+        rustc_pass_by_value, Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n     ),\n     rustc_attr!(\n         rustc_coherence_is_core, AttributeType::CrateLevel, template!(Word), ErrorFollowing, @only_local: true,\n         \"#![rustc_coherence_is_core] allows inherent methods on builtin types, only intended to be used in `core`.\"\n     ),\n+    rustc_attr!(\n+        rustc_coinductive, AttributeType::Normal, template!(Word), WarnFollowing, @only_local: true,\n+        \"#![rustc_coinductive] changes a trait to be coinductive, allowing cycles in the trait solver.\"\n+    ),\n     rustc_attr!(\n         rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\""}, {"sha": "9f33d84ab52067e176b92f8f3d6d5b7b610b92cc", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -934,9 +934,10 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     }\n \n     let is_marker = tcx.has_attr(def_id, sym::marker);\n+    let rustc_coinductive = tcx.has_attr(def_id, sym::rustc_coinductive);\n     let skip_array_during_method_dispatch =\n         tcx.has_attr(def_id, sym::rustc_skip_array_during_method_dispatch);\n-    let spec_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n+    let specialization_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n         ty::trait_def::TraitSpecializationKind::Marker\n     } else if tcx.has_attr(def_id, sym::rustc_specialization_trait) {\n         ty::trait_def::TraitSpecializationKind::AlwaysApplicable\n@@ -1036,16 +1037,17 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n             no_dups.then_some(list)\n         });\n \n-    ty::TraitDef::new(\n+    ty::TraitDef {\n         def_id,\n         unsafety,\n         paren_sugar,\n-        is_auto,\n+        has_auto_impl: is_auto,\n         is_marker,\n+        is_coinductive: rustc_coinductive || is_auto,\n         skip_array_during_method_dispatch,\n-        spec_kind,\n+        specialization_kind,\n         must_implement_one_of,\n-    )\n+    }\n }\n \n fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {"}, {"sha": "5b7ca750f78fb52cb7ee57beeab8ac66371544c2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -2388,15 +2388,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n \n+    /// Returns `true` if this is coinductive, either because it is\n+    /// an auto trait or because it has the `#[rustc_coinductive]` attribute.\n+    pub fn trait_is_coinductive(self, trait_def_id: DefId) -> bool {\n+        self.trait_def(trait_def_id).is_coinductive\n+    }\n+\n     /// Returns `true` if this is a trait alias.\n     pub fn trait_is_alias(self, trait_def_id: DefId) -> bool {\n         self.def_kind(trait_def_id) == DefKind::TraitAlias\n     }\n \n-    pub fn trait_is_coinductive(self, trait_def_id: DefId) -> bool {\n-        self.trait_is_auto(trait_def_id) || self.lang_items().sized_trait() == Some(trait_def_id)\n-    }\n-\n     /// Returns layout of a generator. Layout might be unavailable if the\n     /// generator is tainted by errors.\n     pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {"}, {"sha": "71353acaaa7c45f844bc1bf47dfa042f3c7510e4", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -31,6 +31,15 @@ pub struct TraitDef {\n     /// and thus `impl`s of it are allowed to overlap.\n     pub is_marker: bool,\n \n+    /// If `true`, then this trait has to `#[rustc_coinductive]` attribute or\n+    /// is an auto trait. This indicates that trait solver cycles involving an\n+    /// `X: ThisTrait` goal are accepted.\n+    ///\n+    /// In the future all traits should be coinductive, but we need a better\n+    /// formal understanding of what exactly that means and should probably\n+    /// also have already switched to the new trait solver.\n+    pub is_coinductive: bool,\n+\n     /// If `true`, then this trait has the `#[rustc_skip_array_during_method_dispatch]`\n     /// attribute, indicating that editions before 2021 should not consider this trait\n     /// during method dispatch if the receiver is an array.\n@@ -81,28 +90,6 @@ impl TraitImpls {\n }\n \n impl<'tcx> TraitDef {\n-    pub fn new(\n-        def_id: DefId,\n-        unsafety: hir::Unsafety,\n-        paren_sugar: bool,\n-        has_auto_impl: bool,\n-        is_marker: bool,\n-        skip_array_during_method_dispatch: bool,\n-        specialization_kind: TraitSpecializationKind,\n-        must_implement_one_of: Option<Box<[Ident]>>,\n-    ) -> TraitDef {\n-        TraitDef {\n-            def_id,\n-            unsafety,\n-            paren_sugar,\n-            has_auto_impl,\n-            is_marker,\n-            skip_array_during_method_dispatch,\n-            specialization_kind,\n-            must_implement_one_of,\n-        }\n-    }\n-\n     pub fn ancestors(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "225095948af883512ce5b49c2283121a992e8718", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -156,6 +156,7 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n                 | sym::rustc_then_this_would_need => self.check_rustc_dirty_clean(&attr),\n+                sym::rustc_coinductive => self.check_rustc_coinductive(&attr, span, target),\n                 sym::cmse_nonsecure_entry => {\n                     self.check_cmse_nonsecure_entry(hir_id, attr, span, target)\n                 }\n@@ -1608,6 +1609,20 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if the `#[rustc_coinductive]` attribute is applied to a trait.\n+    fn check_rustc_coinductive(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+        match target {\n+            Target::Trait => true,\n+            _ => {\n+                self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToTrait {\n+                    attr_span: attr.span,\n+                    defn_span: span,\n+                });\n+                false\n+            }\n+        }\n+    }\n+\n     /// Checks if `#[link_section]` is applied to a function or static.\n     fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {"}, {"sha": "56835a2466a5222c0ff91b9267fb260e06a42023", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -1224,6 +1224,7 @@ symbols! {\n         rustc_capture_analysis,\n         rustc_clean,\n         rustc_coherence_is_core,\n+        rustc_coinductive,\n         rustc_const_stable,\n         rustc_const_unstable,\n         rustc_conversion_suggestion,"}, {"sha": "520ae0edb09c29aedb5956e7100ccc655f77ca16", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/646e6672000f17154f38f03b0a6948727510d663/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/646e6672000f17154f38f03b0a6948727510d663/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=646e6672000f17154f38f03b0a6948727510d663", "patch": "@@ -97,6 +97,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n #[rustc_deny_explicit_impl]\n+#[cfg_attr(not(bootstrap), rustc_coinductive)]\n pub trait Sized {\n     // Empty.\n }"}]}