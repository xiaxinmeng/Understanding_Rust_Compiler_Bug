{"sha": "a1747a609122f6bc82f396897752d182fd583d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzQ3YTYwOTEyMmY2YmM4MmYzOTY4OTc3NTJkMTgyZmQ1ODNkNGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T01:58:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:24Z"}, "message": "librustc: De-`@mut` `CrateContext::adt_reprs`", "tree": {"sha": "fed0b5c2b572f929bfa8f398b458fc3497828399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed0b5c2b572f929bfa8f398b458fc3497828399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1747a609122f6bc82f396897752d182fd583d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1747a609122f6bc82f396897752d182fd583d4a", "html_url": "https://github.com/rust-lang/rust/commit/a1747a609122f6bc82f396897752d182fd583d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1747a609122f6bc82f396897752d182fd583d4a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde", "html_url": "https://github.com/rust-lang/rust/commit/db83a957b60d7b6e7045909b8ce3c1ddf78e8fde"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "e06dae6654c82af54913d662b9b27af0cc390688", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1747a609122f6bc82f396897752d182fd583d4a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1747a609122f6bc82f396897752d182fd583d4a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=a1747a609122f6bc82f396897752d182fd583d4a", "patch": "@@ -118,13 +118,18 @@ pub fn represent_node(bcx: @Block, node: ast::NodeId) -> @Repr {\n /// Decides how to represent a given type.\n pub fn represent_type(cx: &mut CrateContext, t: ty::t) -> @Repr {\n     debug!(\"Representing: {}\", ty_to_str(cx.tcx, t));\n-    match cx.adt_reprs.find(&t) {\n-        Some(repr) => return *repr,\n-        None => { }\n+    {\n+        let adt_reprs = cx.adt_reprs.borrow();\n+        match adt_reprs.get().find(&t) {\n+            Some(repr) => return *repr,\n+            None => {}\n+        }\n     }\n+\n     let repr = @represent_type_uncached(cx, t);\n     debug!(\"Represented as: {:?}\", repr)\n-    cx.adt_reprs.insert(t, repr);\n+    let mut adt_reprs = cx.adt_reprs.borrow_mut();\n+    adt_reprs.get().insert(t, repr);\n     return repr;\n }\n "}, {"sha": "23e6e897f5941cffb3a362d6a1935a7fc03a387b", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1747a609122f6bc82f396897752d182fd583d4a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1747a609122f6bc82f396897752d182fd583d4a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=a1747a609122f6bc82f396897752d182fd583d4a", "patch": "@@ -94,7 +94,7 @@ pub struct CrateContext {\n      module_data: RefCell<HashMap<~str, ValueRef>>,\n      lltypes: RefCell<HashMap<ty::t, Type>>,\n      llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n-     adt_reprs: HashMap<ty::t, @adt::Repr>,\n+     adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n      symbol_hasher: Sha256,\n      type_hashcodes: HashMap<ty::t, @str>,\n      type_short_names: HashMap<ty::t, ~str>,\n@@ -205,7 +205,7 @@ impl CrateContext {\n                   module_data: RefCell::new(HashMap::new()),\n                   lltypes: RefCell::new(HashMap::new()),\n                   llsizingtypes: RefCell::new(HashMap::new()),\n-                  adt_reprs: HashMap::new(),\n+                  adt_reprs: RefCell::new(HashMap::new()),\n                   symbol_hasher: symbol_hasher,\n                   type_hashcodes: HashMap::new(),\n                   type_short_names: HashMap::new(),"}]}