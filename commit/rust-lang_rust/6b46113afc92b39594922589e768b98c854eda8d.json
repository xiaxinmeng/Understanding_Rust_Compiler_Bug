{"sha": "6b46113afc92b39594922589e768b98c854eda8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNDYxMTNhZmM5MmIzOTU5NDkyMjU4OWU3NjhiOThjODU0ZWRhOGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T10:21:09Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T10:32:37Z"}, "message": "Cache external crate lookups in resolve.rs\n\nAccording to --time-passes, resolution went from 2 to 0 seconds. Not\nreally the bottleneck... but if we want to be crazy fast, just\nconsider this a future bottleneck that was fixed very timely.", "tree": {"sha": "b08ba0feb761c4f7f9abdd3e57b41794d93291ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08ba0feb761c4f7f9abdd3e57b41794d93291ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b46113afc92b39594922589e768b98c854eda8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b46113afc92b39594922589e768b98c854eda8d", "html_url": "https://github.com/rust-lang/rust/commit/6b46113afc92b39594922589e768b98c854eda8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b46113afc92b39594922589e768b98c854eda8d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c12ab1d019b42e5427e31bfa49f1f799e84165", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c12ab1d019b42e5427e31bfa49f1f799e84165", "html_url": "https://github.com/rust-lang/rust/commit/e9c12ab1d019b42e5427e31bfa49f1f799e84165"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "1e56f51447ed2e27e70f5d60d8fad0f390693811", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6b46113afc92b39594922589e768b98c854eda8d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b46113afc92b39594922589e768b98c854eda8d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=6b46113afc92b39594922589e768b98c854eda8d", "patch": "@@ -43,10 +43,23 @@ tag import_state {\n     resolving(span);\n     resolved(Option.t[def] /* value */, Option.t[def] /* type */);\n }\n-        \n-type env = rec(std.Map.hashmap[def_id,import_state] imports,\n-               std.Map.hashmap[def_id,@wrap_mod] mod_map,\n-               std.Map.hashmap[def_id,vec[ident]] ext_map,\n+\n+type ext_hash = hashmap[tup(def_id,str),def];\n+fn new_ext_hash() -> ext_hash {\n+    fn hash(&tup(def_id,str) v) -> uint {\n+        ret Str.hash(v._1) + util.common.hash_def(v._0);\n+    }\n+    fn eq(&tup(def_id,str) v1, &tup(def_id,str) v2) -> bool {\n+        ret util.common.def_eq(v1._0, v2._0) &&\n+            Str.eq(v1._1, v2._1);\n+    }\n+    ret std.Map.mk_hashmap[tup(def_id,str),def](hash, eq);\n+}\n+\n+type env = rec(hashmap[def_id,import_state] imports,\n+               hashmap[def_id,@wrap_mod] mod_map,\n+               hashmap[def_id,vec[ident]] ext_map,\n+               ext_hash ext_cache,\n                session sess);\n \n // Used to distinguish between lookups from outside and from inside modules,\n@@ -62,6 +75,7 @@ fn resolve_crate(session sess, @ast.crate crate) -> @ast.crate {\n     auto e = @rec(imports = new_def_hash[import_state](),\n                   mod_map = new_def_hash[@wrap_mod](),\n                   ext_map = new_def_hash[vec[ident]](),\n+                  ext_cache = new_ext_hash(),\n                   sess = sess);\n     map_crate(e, *crate);\n     resolve_imports(*e);\n@@ -579,13 +593,21 @@ fn lookup_in_mod(&env e, def m, ident id, namespace ns, dir dr)\n     auto defid = ast.def_id_of_def(m);\n     // FIXME this causes way more metadata lookups than needed. Cache?\n     if (defid._0 != 0) { // Not in this crate (FIXME use a const, not 0)\n+        auto cached = e.ext_cache.find(tup(defid,id));\n+        if (cached != none[def] && check_def_by_ns(Option.get(cached), ns)) {\n+            ret cached;\n+        }\n         auto path = vec(id);\n         // def_num=-1 is a kludge to overload def_mod for external crates,\n         // since those don't get a def num\n         if (defid._1 != -1) {\n             path = e.ext_map.get(defid) + path;\n         }\n-        ret lookup_external(e, defid._0, path, ns);\n+        auto fnd = lookup_external(e, defid._0, path, ns);\n+        if (fnd != none[def]) {\n+            e.ext_cache.insert(tup(defid,id), Option.get(fnd));\n+        }\n+        ret fnd;\n     }\n     alt (m) {\n         case (ast.def_mod(?defid)) {\n@@ -704,7 +726,7 @@ fn lookup_external(&env e, int cnum, vec[ident] ids, namespace ns)\n         e.ext_map.insert(ast.def_id_of_def(d), ids);\n     }\n     ret found;\n- }\n+}\n \n // Local Variables:\n // mode: rust"}]}