{"sha": "b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOGM5MDNiMThkOGJkOWIyMDEwZDZlMzQ2NmQ0ZjkwM2ZhMGJhNjc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-20T11:08:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-20T11:08:00Z"}, "message": "Merge #7355\n\n7355: :arrow_up: rowan r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c73e213a5a1a2b7a344d7f5860edfd9531dfb65d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c73e213a5a1a2b7a344d7f5860edfd9531dfb65d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCA8QCRBK7hj4Ov3rIwAAdHIIAD4AFxc3l/eE2VGu9XJwGkbD\nKFPF+GlCNKLxIGfJmgdK9NnJSVa6MtWzwaJIDFXL6M20FNA3Khrg5/a1yarvIRb6\nQIeZuxRg/sk1ILfn6soCuIVj4HibB8jQDSblUQ3QpkB+cjHexvSmwkqec8Oc9s59\nZ6y+8qGv3UoDP6xs+6MIaN7Y70x+SA+/IBPaf9nMfmn0qY/Ih1twPRozV1f3WMZx\ngMH5t+WnAqpYfSAKdpqaXgLJj8EuvYJVY0bF5GGNY/opnh3Fc0oxcijX+51C5QEJ\nJYMFIan1IruFSfehUmjPH03egM5XMP/Q9I7W4Em15HeYhlPFhNpRZQX1kH+/Oss=\n=48zZ\n-----END PGP SIGNATURE-----\n", "payload": "tree c73e213a5a1a2b7a344d7f5860edfd9531dfb65d\nparent 63f509f4924e7448b9131514bbdd7a4da5292cd1\nparent 3429b32ad119756985e1a7bfa5e9e53042671f8b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611140880 +0000\ncommitter GitHub <noreply@github.com> 1611140880 +0000\n\nMerge #7355\n\n7355: :arrow_up: rowan r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "html_url": "https://github.com/rust-lang/rust/commit/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f509f4924e7448b9131514bbdd7a4da5292cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f509f4924e7448b9131514bbdd7a4da5292cd1", "html_url": "https://github.com/rust-lang/rust/commit/63f509f4924e7448b9131514bbdd7a4da5292cd1"}, {"sha": "3429b32ad119756985e1a7bfa5e9e53042671f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3429b32ad119756985e1a7bfa5e9e53042671f8b", "html_url": "https://github.com/rust-lang/rust/commit/3429b32ad119756985e1a7bfa5e9e53042671f8b"}], "stats": {"total": 161, "additions": 79, "deletions": 82}, "files": [{"sha": "6b420eef9ff33745be3dec5241b8068dc5108262", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -1375,14 +1375,13 @@ checksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n \n [[package]]\n name = \"rowan\"\n-version = \"0.11.0\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b3ae0ae5091cf38acfb834dbb6adcd45bb0d6b6a72ca5798e134195d2fa33574\"\n+checksum = \"bea4527c692099becd37ec777cfd6949d0534348528d2fc84ee420d2d5fac83d\"\n dependencies = [\n  \"hashbrown\",\n  \"memoffset\",\n  \"rustc-hash\",\n- \"smol_str\",\n  \"text-size\",\n ]\n "}, {"sha": "82747727294ef7e79d3835871b2f9ace960b3127", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -1,6 +1,9 @@\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner};\n+use syntax::{\n+    ast::{self, AstNode, AttrsOwner, GenericParamsOwner, NameOwner},\n+    SmolStr,\n+};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -49,16 +52,16 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n                 format_to!(buf, \"{}\", type_params.syntax());\n             }\n             buf.push_str(\" \");\n-            buf.push_str(name.text().as_str());\n+            buf.push_str(name.text());\n             if let Some(type_params) = type_params {\n                 let lifetime_params = type_params\n                     .lifetime_params()\n                     .filter_map(|it| it.lifetime())\n-                    .map(|it| it.text().clone());\n+                    .map(|it| SmolStr::from(it.text()));\n                 let type_params = type_params\n                     .type_params()\n                     .filter_map(|it| it.name())\n-                    .map(|it| it.text().clone());\n+                    .map(|it| SmolStr::from(it.text()));\n \n                 let generic_params = lifetime_params.chain(type_params).format(\", \");\n                 format_to!(buf, \"<{}>\", generic_params)"}, {"sha": "b7390855ad76dd6f119c261dda60febe6cbb842a", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -3,7 +3,7 @@ use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n-    T,\n+    SmolStr, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -95,14 +95,14 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n         format_to!(buf, \"{}\", type_params.syntax());\n     }\n     buf.push_str(\" \");\n-    buf.push_str(strukt.name().unwrap().text().as_str());\n+    buf.push_str(strukt.name().unwrap().text());\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params\n             .lifetime_params()\n             .filter_map(|it| it.lifetime())\n-            .map(|it| it.text().clone());\n+            .map(|it| SmolStr::from(it.text()));\n         let type_params =\n-            type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n+            type_params.type_params().filter_map(|it| it.name()).map(|it| SmolStr::from(it.text()));\n         format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).format(\", \"))\n     }\n "}, {"sha": "d952676071044e3e3ba30d6214643c53a7f4aa78", "filename": "crates/assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -138,7 +138,7 @@ pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         return None;\n     }\n \n-    let text = token.text().as_str();\n+    let text = token.text();\n     if !text.starts_with(\"r#\") && text.ends_with('#') {\n         return None;\n     }"}, {"sha": "6aa9d2f2c9b412cccfc9a6189306b19e878a56d3", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -3,7 +3,7 @@ use ide_db::imports_locator;\n use itertools::Itertools;\n use syntax::{\n     ast::{self, make, AstNode},\n-    Direction, SmolStr,\n+    Direction,\n     SyntaxKind::{IDENT, WHITESPACE},\n     TextSize,\n };\n@@ -43,17 +43,18 @@ pub(crate) fn replace_derive_with_manual_impl(\n ) -> Option<()> {\n     let attr = ctx.find_node_at_offset::<ast::Attr>()?;\n \n-    let attr_name = attr\n+    let has_derive = attr\n         .syntax()\n         .descendants_with_tokens()\n         .filter(|t| t.kind() == IDENT)\n         .find_map(syntax::NodeOrToken::into_token)\n-        .filter(|t| t.text() == \"derive\")?\n-        .text()\n-        .clone();\n+        .filter(|t| t.text() == \"derive\")\n+        .is_some();\n+    if !has_derive {\n+        return None;\n+    }\n \n-    let trait_token =\n-        ctx.token_at_offset().find(|t| t.kind() == IDENT && *t.text() != attr_name)?;\n+    let trait_token = ctx.token_at_offset().find(|t| t.kind() == IDENT && t.text() != \"derive\")?;\n     let trait_path = make::path_unqualified(make::path_segment(make::name_ref(trait_token.text())));\n \n     let annotated_name = attr.syntax().siblings(Direction::Next).find_map(ast::Name::cast)?;\n@@ -176,9 +177,9 @@ fn update_attribute(\n         .syntax()\n         .descendants_with_tokens()\n         .filter(|t| t.kind() == IDENT)\n-        .filter_map(|t| t.into_token().map(|t| t.text().clone()))\n+        .filter_map(|t| t.into_token().map(|t| t.text().to_string()))\n         .filter(|t| t != trait_name.text())\n-        .collect::<Vec<SmolStr>>();\n+        .collect::<Vec<_>>();\n     let has_more_derives = !new_attr_input.is_empty();\n \n     if has_more_derives {"}, {"sha": "44c35bafaea59673dae296cdbeeb6cc68cef610e", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -223,7 +223,7 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             let method = mce.name_ref()?;\n             let arg_list = mce.arg_list()?;\n \n-            let method = match method.text().as_str() {\n+            let method = match method.text() {\n                 \"is_some\" => \"is_none\",\n                 \"is_none\" => \"is_some\",\n                 \"is_ok\" => \"is_err\","}, {"sha": "b7f1aae8fa98d4e22ab7e9d887498d289bd8e4f8", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -102,7 +102,7 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n         debug!(\"name token not found\");\n         mbe::ExpandError::ConversionError\n     })?;\n-    let name_token = tt::Ident { id: name_token_id, text: name.text().clone() };\n+    let name_token = tt::Ident { id: name_token_id, text: name.text().into() };\n     let type_params = params.map_or(0, |type_param_list| type_param_list.type_params().count());\n     Ok(BasicAdtInfo { name: name_token, type_params })\n }"}, {"sha": "d692cec145a138c68c1d00cdf98ff8b2406b25fa", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -38,7 +38,7 @@ impl Name {\n     }\n \n     pub fn new_lifetime(lt: &ast::Lifetime) -> Name {\n-        Self::new_text(lt.text().clone())\n+        Self::new_text(lt.text().into())\n     }\n \n     /// Shortcut to create inline plain text name\n@@ -47,12 +47,12 @@ impl Name {\n     }\n \n     /// Resolve a name from the text of token.\n-    fn resolve(raw_text: &SmolStr) -> Name {\n+    fn resolve(raw_text: &str) -> Name {\n         let raw_start = \"r#\";\n-        if raw_text.as_str().starts_with(raw_start) {\n+        if raw_text.starts_with(raw_start) {\n             Name::new_text(SmolStr::new(&raw_text[raw_start.len()..]))\n         } else {\n-            Name::new_text(raw_text.clone())\n+            Name::new_text(raw_text.into())\n         }\n     }\n "}, {"sha": "671aa13736d4fa06012f548fada817d30e00fbfd", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -153,8 +153,7 @@ impl NavigationTarget {\n         node: InFile<&dyn ast::NameOwner>,\n         kind: SymbolKind,\n     ) -> NavigationTarget {\n-        let name =\n-            node.value.name().map(|it| it.text().clone()).unwrap_or_else(|| SmolStr::new(\"_\"));\n+        let name = node.value.name().map(|it| it.text().into()).unwrap_or_else(|| \"_\".into());\n         let focus_range =\n             node.value.name().map(|it| node.with_value(it.syntax()).original_file_range(db).range);\n         let frange = node.map(|it| it.syntax()).original_file_range(db);"}, {"sha": "b8e4cc181126a5938483cf458ebb963dee603cc4", "filename": "crates/ide/src/display/short_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -90,7 +90,7 @@ impl ShortLabel for ast::Variant {\n impl ShortLabel for ast::ConstParam {\n     fn short_label(&self) -> Option<String> {\n         let mut buf = \"const \".to_owned();\n-        buf.push_str(self.name()?.text().as_str());\n+        buf.push_str(self.name()?.text());\n         if let Some(type_ref) = self.ty() {\n             format_to!(buf, \": {}\", type_ref.syntax());\n         }\n@@ -117,6 +117,6 @@ where\n {\n     let mut buf = node.visibility().map(|v| format!(\"{} \", v.syntax())).unwrap_or_default();\n     buf.push_str(label);\n-    buf.push_str(node.name()?.text().as_str());\n+    buf.push_str(node.name()?.text());\n     Some(buf)\n }"}, {"sha": "2d722dee0e95b990161be2da4cb7f38f86576e79", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -213,8 +213,8 @@ fn extend_ws(root: &SyntaxNode, ws: SyntaxToken, offset: TextSize) -> TextRange\n     let ws_text = ws.text();\n     let suffix = TextRange::new(offset, ws.text_range().end()) - ws.text_range().start();\n     let prefix = TextRange::new(ws.text_range().start(), offset) - ws.text_range().start();\n-    let ws_suffix = &ws_text.as_str()[suffix];\n-    let ws_prefix = &ws_text.as_str()[prefix];\n+    let ws_suffix = &ws_text[suffix];\n+    let ws_prefix = &ws_text[prefix];\n     if ws_text.contains('\\n') && !ws_suffix.contains('\\n') {\n         if let Some(node) = ws.next_sibling_or_token() {\n             let start = match ws_prefix.rfind('\\n') {"}, {"sha": "54485fd308c09e2f82a1039ee2ea68511296823d", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -411,7 +411,7 @@ fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n     match expr {\n         ast::Expr::MethodCallExpr(method_call_expr) => {\n             let name_ref = method_call_expr.name_ref()?;\n-            match name_ref.text().as_str() {\n+            match name_ref.text() {\n                 \"clone\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n                 name_ref => Some(name_ref.to_owned()),\n             }"}, {"sha": "631bde0f19765233d25fdbba39dbc42e0c65d0a1", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -59,7 +59,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextS\n         // The node is either the first or the last in the file\n         let suff = &token.text()[TextRange::new(\n             offset - token.text_range().start() + TextSize::of('\\n'),\n-            TextSize::of(token.text().as_str()),\n+            TextSize::of(token.text()),\n         )];\n         let spaces = suff.bytes().take_while(|&b| b == b' ').count();\n "}, {"sha": "8a9b5ca8c4ba3ab8d7fba198d8ff2330fed01d98", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -30,7 +30,7 @@ fn is_format_string(string: &ast::String) -> Option<()> {\n     let parent = string.syntax().parent();\n \n     let name = parent.parent().and_then(ast::MacroCall::cast)?.path()?.segment()?.name_ref()?;\n-    if !matches!(name.text().as_str(), \"format_args\" | \"format_args_nl\") {\n+    if !matches!(name.text(), \"format_args\" | \"format_args_nl\") {\n         return None;\n     }\n "}, {"sha": "8cdc3688f4efacbe927af5a5faf29025bdc20d7f", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -116,7 +116,7 @@ pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n             None => (),\n         }\n \n-        let line: &str = comment.text().as_str();\n+        let line: &str = comment.text();\n         let range = comment.syntax().text_range();\n \n         let mut pos = TextSize::of(comment.prefix());"}, {"sha": "a8091dbee83e175ef0de2b0e2d0266e887f654e4", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -343,7 +343,7 @@ impl NameRefClass {\n                         hir::AssocItem::TypeAlias(it) => Some(*it),\n                         _ => None,\n                     })\n-                    .find(|alias| alias.name(sema.db).to_string() == **name_ref.text())\n+                    .find(|alias| &alias.name(sema.db).to_string() == name_ref.text())\n                 {\n                     return Some(NameRefClass::Definition(Definition::ModuleDef(\n                         ModuleDef::TypeAlias(ty),"}, {"sha": "fd403519875c9cee6f7e39b9be0bbb29f0702412", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -507,7 +507,7 @@ impl ImportGroup {\n             PathSegmentKind::SelfKw => ImportGroup::ThisModule,\n             PathSegmentKind::SuperKw => ImportGroup::SuperModule,\n             PathSegmentKind::CrateKw => ImportGroup::ThisCrate,\n-            PathSegmentKind::Name(name) => match name.text().as_str() {\n+            PathSegmentKind::Name(name) => match name.text() {\n                 \"std\" => ImportGroup::Std,\n                 \"core\" => ImportGroup::Std,\n                 _ => ImportGroup::ExternCrate,"}, {"sha": "500bdfd6b23594264259b7eac884c462ead09fb1", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -209,7 +209,7 @@ pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<Fil\n     query.search(&buf)\n }\n \n-pub fn index_resolve(db: &RootDatabase, name: &SmolStr) -> Vec<FileSymbol> {\n+pub fn index_resolve(db: &RootDatabase, name: &str) -> Vec<FileSymbol> {\n     let mut query = Query::new(name.to_string());\n     query.exact();\n     query.limit(4);\n@@ -409,7 +409,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n     fn decl<N: NameOwner>(node: N) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n         let name = node.name()?;\n         let name_range = name.syntax().text_range();\n-        let name = name.text().clone();\n+        let name = name.text().into();\n         let ptr = SyntaxNodePtr::new(node.syntax());\n \n         Some((name, ptr, name_range))"}, {"sha": "0cdc175be7bd6aaec1a30d43b0f927e84566485b", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -507,7 +507,7 @@ impl SrcToken for SynToken {\n         }\n     }\n     fn to_text(&self) -> SmolStr {\n-        self.token().text().clone()\n+        self.token().text().into()\n     }\n }\n \n@@ -682,10 +682,8 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             self.text_pos += TextSize::of(text);\n         }\n \n-        let text = SmolStr::new(self.buf.as_str());\n+        self.inner.token(kind, self.buf.as_str());\n         self.buf.clear();\n-        self.inner.token(kind, text);\n-\n         // Add whitespace between adjoint puncts\n         let next = last.bump();\n         if let ("}, {"sha": "df013bae99f1fcf6ab07c8f6319a1cd0d3035f8e", "filename": "crates/ssr/src/matching.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -10,8 +10,11 @@ use hir::Semantics;\n use ide_db::base_db::FileRange;\n use rustc_hash::FxHashMap;\n use std::{cell::Cell, iter::Peekable};\n-use syntax::ast::{AstNode, AstToken};\n use syntax::{ast, SyntaxElement, SyntaxElementChildren, SyntaxKind, SyntaxNode, SyntaxToken};\n+use syntax::{\n+    ast::{AstNode, AstToken},\n+    SmolStr,\n+};\n use test_utils::mark;\n \n // Creates a match error. If we're currently attempting to match some code that we thought we were\n@@ -398,11 +401,11 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         code: &SyntaxNode,\n     ) -> Result<(), MatchFailed> {\n         // Build a map keyed by field name.\n-        let mut fields_by_name = FxHashMap::default();\n+        let mut fields_by_name: FxHashMap<SmolStr, SyntaxNode> = FxHashMap::default();\n         for child in code.children() {\n             if let Some(record) = ast::RecordExprField::cast(child.clone()) {\n                 if let Some(name) = record.field_name() {\n-                    fields_by_name.insert(name.text().clone(), child.clone());\n+                    fields_by_name.insert(name.text().into(), child.clone());\n                 }\n             }\n         }\n@@ -473,9 +476,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                         }\n                         SyntaxElement::Node(n) => {\n                             if let Some(first_token) = n.first_token() {\n-                                if Some(first_token.text().as_str())\n-                                    == next_pattern_token.as_deref()\n-                                {\n+                                if Some(first_token.text()) == next_pattern_token.as_deref() {\n                                     if let Some(SyntaxElement::Node(p)) = pattern.next() {\n                                         // We have a subtree that starts with the next token in our pattern.\n                                         self.attempt_match_token_tree(phase, &p, &n)?;"}, {"sha": "06a94a46cd088ac88a6a709a0df27483f6463397", "filename": "crates/ssr/src/replacing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Freplacing.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -173,7 +173,7 @@ impl ReplacementRenderer<'_> {\n                 );\n             }\n         } else {\n-            self.out.push_str(token.text().as_str());\n+            self.out.push_str(token.text());\n         }\n     }\n "}, {"sha": "14e5a3b69debf17ed27499c06e00eed16a4a5b94", "filename": "crates/ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fresolving.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -228,7 +228,7 @@ impl<'db> ResolutionScope<'db> {\n                 None,\n                 |_ty, assoc_item| {\n                     let item_name = assoc_item.name(self.scope.db)?;\n-                    if item_name.to_string().as_str() == name.text().as_str() {\n+                    if item_name.to_string().as_str() == name.text() {\n                         Some(hir::PathResolution::AssocItem(assoc_item))\n                     } else {\n                         None"}, {"sha": "55b437a3a22942357510c646a15fa5c5855a2360", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -12,15 +12,12 @@ doctest = false\n \n [dependencies]\n itertools = \"0.10.0\"\n-rowan = \"0.11\"\n+rowan = \"0.12\"\n rustc_lexer = { version = \"697.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\"\n indexmap = \"1.4.0\"\n-# This crate transitively depends on `smol_str` via `rowan`.\n-# ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n-# to reduce number of compilations\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n "}, {"sha": "a25ff655ecdb65b25be909b0684cb81d898b5c30", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -12,7 +12,7 @@ use std::marker::PhantomData;\n \n use crate::{\n     syntax_node::{SyntaxNode, SyntaxNodeChildren, SyntaxToken},\n-    SmolStr, SyntaxKind,\n+    SyntaxKind,\n };\n \n pub use self::{\n@@ -54,7 +54,7 @@ pub trait AstToken {\n \n     fn syntax(&self) -> &SyntaxToken;\n \n-    fn text(&self) -> &SmolStr {\n+    fn text(&self) -> &str {\n         self.syntax().text()\n     }\n }"}, {"sha": "b755c969288043541129b0a66ba87cdc0058f5da", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -495,7 +495,7 @@ pub mod tokens {\n             .syntax()\n             .descendants_with_tokens()\n             .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \" \")\n+            .find(|it| it.kind() == WHITESPACE && it.text() == \" \")\n             .unwrap()\n     }\n \n@@ -523,7 +523,7 @@ pub mod tokens {\n             .syntax()\n             .descendants_with_tokens()\n             .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\")\n+            .find(|it| it.kind() == WHITESPACE && it.text() == \"\\n\")\n             .unwrap()\n     }\n \n@@ -533,7 +533,7 @@ pub mod tokens {\n             .syntax()\n             .descendants_with_tokens()\n             .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\\n\")\n+            .find(|it| it.kind() == WHITESPACE && it.text() == \"\\n\\n\")\n             .unwrap()\n     }\n "}, {"sha": "5c8cf900ff13a821f7995bbbcbaf7ea78d826daf", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -13,19 +13,19 @@ use crate::{\n };\n \n impl ast::Lifetime {\n-    pub fn text(&self) -> &SmolStr {\n+    pub fn text(&self) -> &str {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::Name {\n-    pub fn text(&self) -> &SmolStr {\n+    pub fn text(&self) -> &str {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::NameRef {\n-    pub fn text(&self) -> &SmolStr {\n+    pub fn text(&self) -> &str {\n         text_of_first_token(self.syntax())\n     }\n \n@@ -34,7 +34,7 @@ impl ast::NameRef {\n     }\n }\n \n-fn text_of_first_token(node: &SyntaxNode) -> &SmolStr {\n+fn text_of_first_token(node: &SyntaxNode) -> &str {\n     node.green().children().next().and_then(|it| it.into_token()).unwrap().text()\n }\n \n@@ -121,7 +121,7 @@ impl ast::Attr {\n     pub fn simple_name(&self) -> Option<SmolStr> {\n         let path = self.path()?;\n         match (path.segment(), path.qualifier()) {\n-            (Some(segment), None) => Some(segment.syntax().first_token()?.text().clone()),\n+            (Some(segment), None) => Some(segment.syntax().first_token()?.text().into()),\n             _ => None,\n         }\n     }"}, {"sha": "5e07ec7d15939f764ef362cba031df640f3f0324", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -41,7 +41,7 @@ impl ast::Comment {\n         match kind {\n             CommentKind { shape, doc: Some(_) } => {\n                 let prefix = kind.prefix();\n-                let text = &self.text().as_str()[prefix.len()..];\n+                let text = &self.text()[prefix.len()..];\n                 let ws = text.chars().next().filter(|c| c.is_whitespace());\n                 let text = ws.map_or(text, |ws| &text[ws.len_utf8()..]);\n                 match shape {\n@@ -156,13 +156,13 @@ impl ast::String {\n \n     pub fn value(&self) -> Option<Cow<'_, str>> {\n         if self.is_raw() {\n-            let text = self.text().as_str();\n+            let text = self.text();\n             let text =\n                 &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n             return Some(Cow::Borrowed(text));\n         }\n \n-        let text = self.text().as_str();\n+        let text = self.text();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf = String::new();\n@@ -190,7 +190,7 @@ impl ast::String {\n     }\n \n     pub fn quote_offsets(&self) -> Option<QuoteOffsets> {\n-        let text = self.text().as_str();\n+        let text = self.text();\n         let offsets = QuoteOffsets::new(text)?;\n         let o = self.syntax().text_range().start();\n         let offsets = QuoteOffsets {\n@@ -560,7 +560,7 @@ impl HasFormatSpecifier for ast::String {\n     fn char_ranges(\n         &self,\n     ) -> Option<Vec<(TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>> {\n-        let text = self.text().as_str();\n+        let text = self.text();\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n         let offset = self.text_range_between_quotes()?.start() - self.syntax().text_range().start();\n \n@@ -590,7 +590,7 @@ impl ast::IntNumber {\n     pub fn value(&self) -> Option<u128> {\n         let token = self.syntax();\n \n-        let mut text = token.text().as_str();\n+        let mut text = token.text();\n         if let Some(suffix) = self.suffix() {\n             text = &text[..text.len() - suffix.len()]\n         }"}, {"sha": "11294c5b22b0204a9ad06707e53f7ce9456442f1", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -56,9 +56,9 @@ pub use crate::{\n };\n pub use parser::{SyntaxKind, T};\n pub use rowan::{\n-    Direction, GreenNode, NodeOrToken, SmolStr, SyntaxText, TextRange, TextSize, TokenAtOffset,\n-    WalkEvent,\n+    Direction, GreenNode, NodeOrToken, SyntaxText, TextRange, TextSize, TokenAtOffset, WalkEvent,\n };\n+pub use smol_str::SmolStr;\n \n /// `Parse` is the result of the parsing: a syntax tree and a collection of\n /// errors."}, {"sha": "3d637bf9174041635aaa962f251fbb0407f21a6d", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -73,8 +73,7 @@ fn reparse_token<'node>(\n                 new_text.pop();\n             }\n \n-            let new_token =\n-                GreenToken::new(rowan::SyntaxKind(prev_token_kind.into()), new_text.into());\n+            let new_token = GreenToken::new(rowan::SyntaxKind(prev_token_kind.into()), &new_text);\n             Some((\n                 prev_token.replace_with(new_token),\n                 new_err.into_iter().collect(),"}, {"sha": "d5ddc076f3cd74a49a3c9eadca3334cc018cfef6", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     ast,\n     parsing::Token,\n     syntax_node::GreenNode,\n-    SmolStr, SyntaxError,\n+    SyntaxError,\n     SyntaxKind::{self, *},\n     SyntaxTreeBuilder, TextRange, TextSize,\n };\n@@ -135,7 +135,7 @@ impl<'a> TextTreeSink<'a> {\n \n     fn do_token(&mut self, kind: SyntaxKind, len: TextSize, n_tokens: usize) {\n         let range = TextRange::at(self.text_pos, len);\n-        let text: SmolStr = self.text[range].into();\n+        let text = &self.text[range];\n         self.text_pos += len;\n         self.token_pos += n_tokens;\n         self.inner.token(kind, text);"}, {"sha": "8f643b2284e14d3c2f35ab3c6f1993b9a452bad8", "filename": "crates/syntax/src/syntax_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fsyntax_node.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -8,7 +8,7 @@\n \n use rowan::{GreenNodeBuilder, Language};\n \n-use crate::{Parse, SmolStr, SyntaxError, SyntaxKind, TextSize};\n+use crate::{Parse, SyntaxError, SyntaxKind, TextSize};\n \n pub(crate) use rowan::{GreenNode, GreenToken, NodeOrToken};\n \n@@ -53,7 +53,7 @@ impl SyntaxTreeBuilder {\n         Parse::new(green, errors)\n     }\n \n-    pub fn token(&mut self, kind: SyntaxKind, text: SmolStr) {\n+    pub fn token(&mut self, kind: SyntaxKind, text: &str) {\n         let kind = RustLanguage::kind_to_raw(kind);\n         self.inner.token(kind, text)\n     }"}, {"sha": "7694e883432115f9004f5915b42a8917c667c2e2", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28c903b18d8bd9b2010d6e3466d4f903fa0ba67/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=b28c903b18d8bd9b2010d6e3466d4f903fa0ba67", "patch": "@@ -116,7 +116,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n     }\n \n     let token = literal.token();\n-    let text = token.text().as_str();\n+    let text = token.text();\n \n     // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {"}]}