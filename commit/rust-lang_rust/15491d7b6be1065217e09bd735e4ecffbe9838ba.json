{"sha": "15491d7b6be1065217e09bd735e4ecffbe9838ba", "node_id": "C_kwDOAAsO6NoAKDE1NDkxZDdiNmJlMTA2NTIxN2UwOWJkNzM1ZTRlY2ZmYmU5ODM4YmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-09T13:13:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-09T13:13:07Z"}, "message": "Auto merge of #89343 - Mark-Simulacrum:no-args-queries, r=cjgillot\n\nRefactor fingerprint reconstruction\n\nThis PR replaces can_reconstruct_query_key with fingerprint_style, which returns the style of the fingerprint for that query. This allows us to avoid trying to extract a DefId (or equivalent) from keys which *are* reconstructible because they're () but not as DefIds.\n\nThis is done with the goal of fixing -Zdump-dep-graph, which seems to have broken a while ago (I didn't try to bisect). Currently even on a `fn main() {}` file it'll ICE (you need to also pass -Zquery-dep-graph for it to work at all), and this patch indirectly fixes the cause of that ICE. This also adds a test for it continuing to work.", "tree": {"sha": "90369b3aabbdc0e768224b4e63e25e2642878826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90369b3aabbdc0e768224b4e63e25e2642878826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15491d7b6be1065217e09bd735e4ecffbe9838ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15491d7b6be1065217e09bd735e4ecffbe9838ba", "html_url": "https://github.com/rust-lang/rust/commit/15491d7b6be1065217e09bd735e4ecffbe9838ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15491d7b6be1065217e09bd735e4ecffbe9838ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb918d0a5bf22211df0423f7474e4e4056978007", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb918d0a5bf22211df0423f7474e4e4056978007", "html_url": "https://github.com/rust-lang/rust/commit/bb918d0a5bf22211df0423f7474e4e4056978007"}, {"sha": "415a9a2ea69e917c5af69a484a602010ccf67198", "url": "https://api.github.com/repos/rust-lang/rust/commits/415a9a2ea69e917c5af69a484a602010ccf67198", "html_url": "https://github.com/rust-lang/rust/commit/415a9a2ea69e917c5af69a484a602010ccf67198"}], "stats": {"total": 135, "additions": 87, "deletions": 48}, "files": [{"sha": "23d475a59538f8c6f191a4ae84a53cd0788e44a6", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -63,6 +63,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::DefPathHash;\n use rustc_hir::HirId;\n+use rustc_query_system::dep_graph::FingerprintStyle;\n use rustc_span::symbol::Symbol;\n use std::hash::Hash;\n \n@@ -89,9 +90,9 @@ pub struct DepKindStruct {\n \n     /// Whether the query key can be recovered from the hashed fingerprint.\n     /// See [DepNodeParams] trait for the behaviour of each key type.\n-    // FIXME: Make this a simple boolean once DepNodeParams::can_reconstruct_query_key\n+    // FIXME: Make this a simple boolean once DepNodeParams::fingerprint_style\n     // can be made a specialized associated const.\n-    can_reconstruct_query_key: fn() -> bool,\n+    fingerprint_style: fn() -> FingerprintStyle,\n }\n \n impl std::ops::Deref for DepKind {\n@@ -103,14 +104,14 @@ impl std::ops::Deref for DepKind {\n \n impl DepKind {\n     #[inline(always)]\n-    pub fn can_reconstruct_query_key(&self) -> bool {\n+    pub fn fingerprint_style(&self) -> FingerprintStyle {\n         // Only fetch the DepKindStruct once.\n         let data: &DepKindStruct = &**self;\n         if data.is_anon {\n-            return false;\n+            return FingerprintStyle::Opaque;\n         }\n \n-        (data.can_reconstruct_query_key)()\n+        (data.fingerprint_style)()\n     }\n }\n \n@@ -151,38 +152,39 @@ macro_rules! contains_eval_always_attr {\n pub mod dep_kind {\n     use super::*;\n     use crate::ty::query::query_keys;\n+    use rustc_query_system::dep_graph::FingerprintStyle;\n \n     // We use this for most things when incr. comp. is turned off.\n     pub const Null: DepKindStruct = DepKindStruct {\n         has_params: false,\n         is_anon: false,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || true,\n+        fingerprint_style: || FingerprintStyle::Unit,\n     };\n \n     pub const TraitSelect: DepKindStruct = DepKindStruct {\n         has_params: false,\n         is_anon: true,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || true,\n+        fingerprint_style: || FingerprintStyle::Unit,\n     };\n \n     pub const CompileCodegenUnit: DepKindStruct = DepKindStruct {\n         has_params: true,\n         is_anon: false,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || false,\n+        fingerprint_style: || FingerprintStyle::Opaque,\n     };\n \n     pub const CompileMonoItem: DepKindStruct = DepKindStruct {\n         has_params: true,\n         is_anon: false,\n         is_eval_always: false,\n \n-        can_reconstruct_query_key: || false,\n+        fingerprint_style: || FingerprintStyle::Opaque,\n     };\n \n     macro_rules! define_query_dep_kinds {\n@@ -196,16 +198,16 @@ pub mod dep_kind {\n                 const is_eval_always: bool = contains_eval_always_attr!($($attrs)*);\n \n                 #[inline(always)]\n-                fn can_reconstruct_query_key() -> bool {\n+                fn fingerprint_style() -> rustc_query_system::dep_graph::FingerprintStyle {\n                     <query_keys::$variant<'_> as DepNodeParams<TyCtxt<'_>>>\n-                        ::can_reconstruct_query_key()\n+                        ::fingerprint_style()\n                 }\n \n                 DepKindStruct {\n                     has_params,\n                     is_anon,\n                     is_eval_always,\n-                    can_reconstruct_query_key,\n+                    fingerprint_style,\n                 }\n             };)*\n         );\n@@ -320,7 +322,7 @@ impl DepNodeExt for DepNode {\n     /// method will assert that the given DepKind actually requires a\n     /// single DefId/DefPathHash parameter.\n     fn from_def_path_hash(def_path_hash: DefPathHash, kind: DepKind) -> DepNode {\n-        debug_assert!(kind.can_reconstruct_query_key() && kind.has_params);\n+        debug_assert!(kind.fingerprint_style() == FingerprintStyle::DefPathHash);\n         DepNode { kind, hash: def_path_hash.0.into() }\n     }\n \n@@ -335,7 +337,7 @@ impl DepNodeExt for DepNode {\n     /// refers to something from the previous compilation session that\n     /// has been removed.\n     fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n-        if self.kind.can_reconstruct_query_key() {\n+        if self.kind.fingerprint_style() == FingerprintStyle::DefPathHash {\n             Some(\n                 tcx.on_disk_cache\n                     .as_ref()?\n@@ -350,14 +352,16 @@ impl DepNodeExt for DepNode {\n     fn from_label_string(label: &str, def_path_hash: DefPathHash) -> Result<DepNode, ()> {\n         let kind = dep_kind_from_label_string(label)?;\n \n-        if !kind.can_reconstruct_query_key() {\n-            return Err(());\n-        }\n-\n-        if kind.has_params {\n-            Ok(DepNode::from_def_path_hash(def_path_hash, kind))\n-        } else {\n-            Ok(DepNode::new_no_params(kind))\n+        match kind.fingerprint_style() {\n+            FingerprintStyle::Opaque => Err(()),\n+            FingerprintStyle::Unit => {\n+                if !kind.has_params {\n+                    Ok(DepNode::new_no_params(kind))\n+                } else {\n+                    Err(())\n+                }\n+            }\n+            FingerprintStyle::DefPathHash => Ok(DepNode::from_def_path_hash(def_path_hash, kind)),\n         }\n     }\n \n@@ -369,8 +373,8 @@ impl DepNodeExt for DepNode {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for () {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Unit\n     }\n \n     fn to_fingerprint(&self, _: TyCtxt<'tcx>) -> Fingerprint {\n@@ -384,8 +388,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for () {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::DefPathHash\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n@@ -403,8 +407,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::DefPathHash\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n@@ -422,8 +426,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for LocalDefId {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        true\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::DefPathHash\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n@@ -442,8 +446,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for CrateNum {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        false\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Opaque\n     }\n \n     // We actually would not need to specialize the implementation of this\n@@ -467,8 +471,8 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for (DefId, DefId) {\n \n impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for HirId {\n     #[inline(always)]\n-    fn can_reconstruct_query_key() -> bool {\n-        false\n+    fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Opaque\n     }\n \n     // We actually would not need to specialize the implementation of this"}, {"sha": "cda9963907482f9a78ac3fa170df3b3745a619d5", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -25,8 +25,8 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n     const NULL: Self = DepKind::Null;\n \n     #[inline(always)]\n-    fn can_reconstruct_query_key(&self) -> bool {\n-        DepKind::can_reconstruct_query_key(self)\n+    fn fingerprint_style(&self) -> rustc_query_system::dep_graph::FingerprintStyle {\n+        DepKind::fingerprint_style(self)\n     }\n \n     #[inline(always)]"}, {"sha": "4d1e39db0ed48f3ce82702305512e93bb8296dac", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -428,6 +428,7 @@ macro_rules! define_queries {\n             use rustc_middle::ty::query::query_keys;\n             use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::{force_query, QueryDescription};\n+            use rustc_query_system::dep_graph::FingerprintStyle;\n \n             // We use this for most things when incr. comp. is turned off.\n             pub const Null: QueryStruct = QueryStruct {\n@@ -454,9 +455,9 @@ macro_rules! define_queries {\n                 const is_anon: bool = is_anon!([$($modifiers)*]);\n \n                 #[inline(always)]\n-                fn can_reconstruct_query_key() -> bool {\n+                fn fingerprint_style() -> FingerprintStyle {\n                     <query_keys::$name<'_> as DepNodeParams<TyCtxt<'_>>>\n-                        ::can_reconstruct_query_key()\n+                        ::fingerprint_style()\n                 }\n \n                 fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> Option<query_keys::$name<'tcx>> {\n@@ -472,7 +473,7 @@ macro_rules! define_queries {\n                         return\n                     }\n \n-                    if !can_reconstruct_query_key() {\n+                    if !fingerprint_style().reconstructible() {\n                         return\n                     }\n "}, {"sha": "8602219a7f32fd85453cc35827c17daf5d061ca3", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -42,7 +42,7 @@\n //!   `DefId` it was computed from. In other cases, too much information gets\n //!   lost during fingerprint computation.\n \n-use super::{DepContext, DepKind};\n+use super::{DepContext, DepKind, FingerprintStyle};\n use crate::ich::StableHashingContext;\n \n use rustc_data_structures::fingerprint::{Fingerprint, PackedFingerprint};\n@@ -75,7 +75,7 @@ impl<K: DepKind> DepNode<K> {\n \n         #[cfg(debug_assertions)]\n         {\n-            if !kind.can_reconstruct_query_key()\n+            if !kind.fingerprint_style().reconstructible()\n                 && (tcx.sess().opts.debugging_opts.incremental_info\n                     || tcx.sess().opts.debugging_opts.query_dep_graph)\n             {\n@@ -94,7 +94,7 @@ impl<K: DepKind> fmt::Debug for DepNode<K> {\n }\n \n pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n-    fn can_reconstruct_query_key() -> bool;\n+    fn fingerprint_style() -> FingerprintStyle;\n \n     /// This method turns the parameters of a DepNodeConstructor into an opaque\n     /// Fingerprint to be used in DepNode.\n@@ -111,7 +111,7 @@ pub trait DepNodeParams<Ctxt: DepContext>: fmt::Debug + Sized {\n     /// This method tries to recover the query key from the given `DepNode`,\n     /// something which is needed when forcing `DepNode`s during red-green\n     /// evaluation. The query system will only call this method if\n-    /// `can_reconstruct_query_key()` is `true`.\n+    /// `fingerprint_style()` is not `FingerprintStyle::Opaque`.\n     /// It is always valid to return `None` here, in which case incremental\n     /// compilation will treat the query as having changed instead of forcing it.\n     fn recover(tcx: Ctxt, dep_node: &DepNode<Ctxt::DepKind>) -> Option<Self>;\n@@ -122,8 +122,8 @@ where\n     T: for<'a> HashStable<StableHashingContext<'a>> + fmt::Debug,\n {\n     #[inline]\n-    default fn can_reconstruct_query_key() -> bool {\n-        false\n+    default fn fingerprint_style() -> FingerprintStyle {\n+        FingerprintStyle::Opaque\n     }\n \n     default fn to_fingerprint(&self, tcx: Ctxt) -> Fingerprint {"}, {"sha": "dcda5728334f2eface4a1f14fdfd5d4351993587", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -50,6 +50,27 @@ impl<T: DepContext> HasDepContext for T {\n     }\n }\n \n+/// Describes the contents of the fingerprint generated by a given query.\n+#[derive(PartialEq, Eq, Copy, Clone)]\n+pub enum FingerprintStyle {\n+    /// The fingerprint is actually a DefPathHash.\n+    DefPathHash,\n+    /// Query key was `()` or equivalent, so fingerprint is just zero.\n+    Unit,\n+    /// Some opaque hash.\n+    Opaque,\n+}\n+\n+impl FingerprintStyle {\n+    #[inline]\n+    pub fn reconstructible(self) -> bool {\n+        match self {\n+            FingerprintStyle::DefPathHash | FingerprintStyle::Unit => true,\n+            FingerprintStyle::Opaque => false,\n+        }\n+    }\n+}\n+\n /// Describe the different families of dependency nodes.\n pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder> + 'static {\n     const NULL: Self;\n@@ -73,5 +94,5 @@ pub trait DepKind: Copy + fmt::Debug + Eq + Hash + Send + Encodable<FileEncoder>\n     where\n         OP: for<'a> FnOnce(Option<&'a Lock<TaskDeps<Self>>>);\n \n-    fn can_reconstruct_query_key(&self) -> bool;\n+    fn fingerprint_style(&self) -> FingerprintStyle;\n }"}, {"sha": "75184cd6f511dab85feaa4ef092836259a4f62c3", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -540,7 +540,7 @@ where\n         // We always expect to find a cached result for things that\n         // can be forced from `DepNode`.\n         debug_assert!(\n-            !dep_node.kind.can_reconstruct_query_key() || result.is_some(),\n+            !dep_node.kind.fingerprint_style().reconstructible() || result.is_some(),\n             \"missing on-disk cache entry for {:?}\",\n             dep_node\n         );\n@@ -778,7 +778,7 @@ where\n         return false;\n     }\n \n-    if !<Q::Key as DepNodeParams<CTX::DepContext>>::can_reconstruct_query_key() {\n+    if !<Q::Key as DepNodeParams<CTX::DepContext>>::fingerprint_style().reconstructible() {\n         return false;\n     }\n "}, {"sha": "88916022c7c82c6536b200b9962e8e780868d92e", "filename": "src/test/run-make/dep-graph/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/src%2Ftest%2Frun-make%2Fdep-graph%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/src%2Ftest%2Frun-make%2Fdep-graph%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-graph%2FMakefile?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -0,0 +1,12 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-cross-compile\n+\n+# Just verify that we successfully run and produce dep graphs when requested.\n+\n+all:\n+\tRUST_DEP_GRAPH=$(TMPDIR)/dep-graph $(RUSTC) \\\n+        -Cincremental=$(TMPDIR)/incr \\\n+        -Zquery-dep-graph -Zdump-dep-graph foo.rs\n+\ttest -f $(TMPDIR)/dep-graph.txt\n+\ttest -f $(TMPDIR)/dep-graph.dot"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "src/test/run-make/dep-graph/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15491d7b6be1065217e09bd735e4ecffbe9838ba/src%2Ftest%2Frun-make%2Fdep-graph%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15491d7b6be1065217e09bd735e4ecffbe9838ba/src%2Ftest%2Frun-make%2Fdep-graph%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-graph%2Ffoo.rs?ref=15491d7b6be1065217e09bd735e4ecffbe9838ba", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}]}