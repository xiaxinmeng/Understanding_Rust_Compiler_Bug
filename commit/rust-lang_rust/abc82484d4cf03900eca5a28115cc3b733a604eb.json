{"sha": "abc82484d4cf03900eca5a28115cc3b733a604eb", "node_id": "C_kwDOAAsO6NoAKGFiYzgyNDg0ZDRjZjAzOTAwZWNhNWEyODExNWNjM2I3MzNhNjA0ZWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-27T05:11:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-27T05:11:53Z"}, "message": "Rollup merge of #108486 - cjgillot:owner-ditem, r=Nilstrieb\n\nMerge diagnostic_items duplicate diagnostics\n\nTo deduplicate how we diagnose duplication.", "tree": {"sha": "8c57be9f30bf89cc4dc1a9be38f1833615af2708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c57be9f30bf89cc4dc1a9be38f1833615af2708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc82484d4cf03900eca5a28115cc3b733a604eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/DuZCRBK7hj4Ov3rIwAAgZsIABi8SbbmiCA7cPhs8EmH98+v\nwWqNsbUKGj1LyYrf/pNsGeH7bZ23b+Afz7+e+KUlAQYjjdAdTUuHuOYrsHKa0EoX\nfP5YD2cKllPmFxm4kgJAxC/vVTaeitPtprmYISxUryQht05NI2FGniUsbQLutlT+\nmDYTT1SjZ8fCKn+hoyrOn5yo8/zG/auyAgHxuX293stkYBjO9W0dao+THcmnT1On\nWItdRWp9BiDnGgWNP27OszaAXDVe6mlqjZMJbNLZLVPmX2iDsuPwKk9tNgSeEZwQ\n0MehWkBJS+7Or5VTnq2UZbPqe9vwGu7Ss8H38qavPhFqN7gQZQRN4cunx8SJfa8=\n=QA5V\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c57be9f30bf89cc4dc1a9be38f1833615af2708\nparent 69b1b94d0c3fc7fd4948aa547493cf36fdf14705\nparent 752ddd028c877c2033940d0dcd4e3dcbf569ae9d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677474713 +0100\ncommitter GitHub <noreply@github.com> 1677474713 +0100\n\nRollup merge of #108486 - cjgillot:owner-ditem, r=Nilstrieb\n\nMerge diagnostic_items duplicate diagnostics\n\nTo deduplicate how we diagnose duplication.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc82484d4cf03900eca5a28115cc3b733a604eb", "html_url": "https://github.com/rust-lang/rust/commit/abc82484d4cf03900eca5a28115cc3b733a604eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc82484d4cf03900eca5a28115cc3b733a604eb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69b1b94d0c3fc7fd4948aa547493cf36fdf14705", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b1b94d0c3fc7fd4948aa547493cf36fdf14705", "html_url": "https://github.com/rust-lang/rust/commit/69b1b94d0c3fc7fd4948aa547493cf36fdf14705"}, {"sha": "752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/752ddd028c877c2033940d0dcd4e3dcbf569ae9d", "html_url": "https://github.com/rust-lang/rust/commit/752ddd028c877c2033940d0dcd4e3dcbf569ae9d"}], "stats": {"total": 102, "additions": 46, "deletions": 56}, "files": [{"sha": "ad119c4e07306c09e5ac4b23567bf5f3febe7fd0", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=abc82484d4cf03900eca5a28115cc3b733a604eb", "patch": "@@ -64,13 +64,17 @@ impl ModuleItems {\n         self.foreign_items.iter().copied()\n     }\n \n-    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+    pub fn owners(&self) -> impl Iterator<Item = OwnerId> + '_ {\n         self.items\n             .iter()\n-            .map(|id| id.owner_id.def_id)\n-            .chain(self.trait_items.iter().map(|id| id.owner_id.def_id))\n-            .chain(self.impl_items.iter().map(|id| id.owner_id.def_id))\n-            .chain(self.foreign_items.iter().map(|id| id.owner_id.def_id))\n+            .map(|id| id.owner_id)\n+            .chain(self.trait_items.iter().map(|id| id.owner_id))\n+            .chain(self.impl_items.iter().map(|id| id.owner_id))\n+            .chain(self.foreign_items.iter().map(|id| id.owner_id))\n+    }\n+\n+    pub fn definitions(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n+        self.owners().map(|id| id.def_id)\n     }\n \n     pub fn par_items(&self, f: impl Fn(ItemId) + Send + Sync) {"}, {"sha": "3fa78efc290ba2406cd46cd7723e2dbf2460fd1c", "filename": "compiler/rustc_passes/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl?ref=abc82484d4cf03900eca5a28115cc3b733a604eb", "patch": "@@ -402,9 +402,6 @@ passes_invalid_attr_at_crate_level =\n     `{$name}` attribute cannot be used at crate level\n     .suggestion = perhaps you meant to use an outer attribute\n \n-passes_duplicate_diagnostic_item =\n-    duplicate diagnostic item found: `{$name}`.\n-\n passes_duplicate_diagnostic_item_in_crate =\n     duplicate diagnostic item in crate `{$crate_name}`: `{$name}`.\n     .note = the diagnostic item is first defined in crate `{$orig_crate_name}`."}, {"sha": "110eb210df9ad71b0184fd8ac53fafcc145a03a8", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=abc82484d4cf03900eca5a28115cc3b733a604eb", "patch": "@@ -11,43 +11,49 @@\n \n use rustc_ast as ast;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n+use rustc_hir::OwnerId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use rustc_span::symbol::{kw::Empty, sym, Symbol};\n+use rustc_span::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_span::symbol::{sym, Symbol};\n \n-use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n+use crate::errors::DuplicateDiagnosticItemInCrate;\n \n-fn observe_item(tcx: TyCtxt<'_>, diagnostic_items: &mut DiagnosticItems, def_id: LocalDefId) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let attrs = tcx.hir().attrs(hir_id);\n+fn observe_item<'tcx>(tcx: TyCtxt<'tcx>, diagnostic_items: &mut DiagnosticItems, owner: OwnerId) {\n+    let attrs = tcx.hir().attrs(owner.into());\n     if let Some(name) = extract(attrs) {\n         // insert into our table\n-        collect_item(tcx, diagnostic_items, name, def_id.to_def_id());\n+        collect_item(tcx, diagnostic_items, name, owner.to_def_id());\n     }\n }\n \n fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item_def_id: DefId) {\n     items.id_to_name.insert(item_def_id, name);\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n-            let orig_span = tcx.hir().span_if_local(original_def_id);\n-            let orig_crate_name =\n-                orig_span.is_none().then(|| tcx.crate_name(original_def_id.krate));\n-            match tcx.hir().span_if_local(item_def_id) {\n-                Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n-                None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n-                    span: orig_span,\n-                    orig_crate_name: orig_crate_name.unwrap_or(Empty),\n-                    have_orig_crate_name: orig_crate_name.map(|_| ()),\n-                    crate_name: tcx.crate_name(item_def_id.krate),\n-                    name,\n-                }),\n-            };\n+            report_duplicate_item(tcx, name, original_def_id, item_def_id);\n         }\n     }\n }\n \n+fn report_duplicate_item(\n+    tcx: TyCtxt<'_>,\n+    name: Symbol,\n+    original_def_id: DefId,\n+    item_def_id: DefId,\n+) {\n+    let orig_span = tcx.hir().span_if_local(original_def_id);\n+    let duplicate_span = tcx.hir().span_if_local(item_def_id);\n+    tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n+        duplicate_span,\n+        orig_span,\n+        crate_name: tcx.crate_name(item_def_id.krate),\n+        orig_crate_name: tcx.crate_name(original_def_id.krate),\n+        different_crates: (item_def_id.krate != original_def_id.krate).then_some(()),\n+        name,\n+    });\n+}\n+\n /// Extract the first `rustc_diagnostic_item = \"$name\"` out of a list of attributes.\n fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n     attrs.iter().find_map(|attr| {\n@@ -64,21 +70,8 @@ fn diagnostic_items(tcx: TyCtxt<'_>, cnum: CrateNum) -> DiagnosticItems {\n \n     // Collect diagnostic items in this crate.\n     let crate_items = tcx.hir_crate_items(());\n-\n-    for id in crate_items.items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.trait_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.impl_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n-    }\n-\n-    for id in crate_items.foreign_items() {\n-        observe_item(tcx, &mut diagnostic_items, id.owner_id.def_id);\n+    for id in crate_items.owners() {\n+        observe_item(tcx, &mut diagnostic_items, id);\n     }\n \n     diagnostic_items"}, {"sha": "9f1c0b5a0b7bdf960802be254be100bacdcd8e4e", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc82484d4cf03900eca5a28115cc3b733a604eb/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=abc82484d4cf03900eca5a28115cc3b733a604eb", "patch": "@@ -809,23 +809,17 @@ impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n     }\n }\n \n-#[derive(Diagnostic)]\n-#[diag(passes_duplicate_diagnostic_item)]\n-pub struct DuplicateDiagnosticItem {\n-    #[primary_span]\n-    pub span: Span,\n-    pub name: Symbol,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(passes_duplicate_diagnostic_item_in_crate)]\n pub struct DuplicateDiagnosticItemInCrate {\n+    #[primary_span]\n+    pub duplicate_span: Option<Span>,\n     #[note(passes_diagnostic_item_first_defined)]\n-    pub span: Option<Span>,\n-    pub orig_crate_name: Symbol,\n+    pub orig_span: Option<Span>,\n     #[note]\n-    pub have_orig_crate_name: Option<()>,\n+    pub different_crates: Option<()>,\n     pub crate_name: Symbol,\n+    pub orig_crate_name: Symbol,\n     pub name: Symbol,\n }\n "}, {"sha": "e2cf9508757be7545ed92e75cf8ac602ceb9589d", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abc82484d4cf03900eca5a28115cc3b733a604eb/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc82484d4cf03900eca5a28115cc3b733a604eb/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.rs?ref=abc82484d4cf03900eca5a28115cc3b733a604eb", "patch": "@@ -9,5 +9,5 @@ extern crate p1;\n extern crate p2;\n \n #[rustc_diagnostic_item = \"Foo\"]\n-pub struct Foo {} //~ ERROR duplicate diagnostic item found\n+pub struct Foo {} //~ ERROR duplicate diagnostic item in crate `duplicate_diagnostic`: `Foo`\n fn main() {}"}, {"sha": "26bd6a82e341722980cbc7870614ca8ae4232382", "filename": "tests/ui/tool-attributes/duplicate-diagnostic.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abc82484d4cf03900eca5a28115cc3b733a604eb/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abc82484d4cf03900eca5a28115cc3b733a604eb/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Fduplicate-diagnostic.stderr?ref=abc82484d4cf03900eca5a28115cc3b733a604eb", "patch": "@@ -2,11 +2,13 @@ error: duplicate diagnostic item in crate `p2`: `Foo`.\n    |\n    = note: the diagnostic item is first defined in crate `p1`.\n \n-error: duplicate diagnostic item found: `Foo`.\n+error: duplicate diagnostic item in crate `duplicate_diagnostic`: `Foo`.\n   --> $DIR/duplicate-diagnostic.rs:12:1\n    |\n LL | pub struct Foo {}\n    | ^^^^^^^^^^^^^^\n+   |\n+   = note: the diagnostic item is first defined in crate `p2`.\n \n error: aborting due to 2 previous errors\n "}]}