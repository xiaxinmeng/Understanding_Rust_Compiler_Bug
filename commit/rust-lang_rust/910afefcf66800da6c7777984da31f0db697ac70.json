{"sha": "910afefcf66800da6c7777984da31f0db697ac70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMGFmZWZjZjY2ODAwZGE2Yzc3Nzc5ODRkYTMxZjBkYjY5N2FjNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T17:09:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-10T17:09:02Z"}, "message": "Auto merge of #1308 - RalfJung:miri, r=RalfJung\n\nMore explicit build instructions\n\n@ssomers does this help, or do you think there is more we should say?\n\nFixes https://github.com/rust-lang/miri/issues/1306", "tree": {"sha": "e9b6f43b58a35f0acb743c1939269a055da5be35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b6f43b58a35f0acb743c1939269a055da5be35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910afefcf66800da6c7777984da31f0db697ac70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910afefcf66800da6c7777984da31f0db697ac70", "html_url": "https://github.com/rust-lang/rust/commit/910afefcf66800da6c7777984da31f0db697ac70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910afefcf66800da6c7777984da31f0db697ac70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c85ba0a16677c455d5e424510f94e40c255aafc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c85ba0a16677c455d5e424510f94e40c255aafc5", "html_url": "https://github.com/rust-lang/rust/commit/c85ba0a16677c455d5e424510f94e40c255aafc5"}, {"sha": "fedca29e6979b77db1d4712dc62be041cf7f2d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedca29e6979b77db1d4712dc62be041cf7f2d36", "html_url": "https://github.com/rust-lang/rust/commit/fedca29e6979b77db1d4712dc62be041cf7f2d36"}], "stats": {"total": 96, "additions": 60, "deletions": 36}, "files": [{"sha": "a143190d5bdb731477797ae44d57aff6ad0f9299", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 56, "deletions": 34, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/910afefcf66800da6c7777984da31f0db697ac70/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/910afefcf66800da6c7777984da31f0db697ac70/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=910afefcf66800da6c7777984da31f0db697ac70", "patch": "@@ -5,18 +5,18 @@ find useful.\n \n ## Getting started\n \n-Check out the issues on this GitHub repository for some ideas. There's lots that\n-needs to be done that we haven't documented in the issues yet, however. For more\n-ideas or help with hacking on Miri, you can contact us (`oli-obk` and `RalfJ`)\n-on the [Rust Zulip].\n+Check out the issues on this GitHub repository for some ideas. In particular,\n+look for the green `E-*` labels which mark issues that should be rather\n+well-suited for onboarding. For more ideas or help with hacking on Miri, you can\n+contact us (`oli-obk` and `RalfJ`) on the [Rust Zulip].\n \n [Rust Zulip]: https://rust-lang.zulipchat.com\n \n-## Building Miri with a pre-built rustc\n+## Preparing the build environment\n \n-Miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n-things (like adding support for a new intrinsic or a shim for an external\n-function being called) can be done by working just on the Miri side.\n+Miri heavily relies on internal and unstable rustc interfaces to execute MIR,\n+which means it is important that you install a version of rustc that Miri\n+actually works with.\n \n The `rust-version` file contains the commit hash of rustc that Miri is currently\n tested against. Other versions will likely not work. After installing\n@@ -25,42 +25,41 @@ install that exact version of rustc as a toolchain:\n ```\n ./rustup-toolchain\n ```\n+This will set up a rustup toolchain called `miri` and set it as an override for\n+the current directory.\n \n [`rustup-toolchain-install-master`]: https://github.com/kennytm/rustup-toolchain-install-master\n \n-### Fixing Miri when rustc changes\n+## Building and testing Miri\n \n-Miri is heavily tied to rustc internals, so it is very common that rustc changes\n-break Miri.  Fixing those is a good way to get starting working on Miri.\n-Usually, Miri will require changes similar to the other consumers of the changed\n-rustc API, so reading the rustc PR diff is a good way to get an idea for what is\n-needed.\n+Invoking Miri requires getting a bunch of flags right and setting up a custom\n+sysroot with xargo. The `miri` script takes care of that for you. With the\n+build environment prepared, compiling Miri is just one command away:\n \n-To update the `rustc-version` file and install the latest rustc, you can run:\n ```\n-./rustup-toolchain HEAD\n+./miri build\n ```\n \n-Now try `./miri test`, and submit a PR once that works again.\n+Run `./miri` without arguments to see the other commands our build tool\n+supports.\n \n-## Testing the Miri driver\n-[testing-miri]: #testing-the-miri-driver\n+### Testing the Miri driver\n \n-The Miri driver in the `miri` binary is the \"heart\" of Miri: it is basically a\n-version of `rustc` that, instead of compiling your code, runs it.  It accepts\n-all the same flags as `rustc` (though the ones only affecting code generation\n-and linking obviously will have no effect) [and more][miri-flags].\n+The Miri driver compiled from `src/bin/miri.rs` is the \"heart\" of Miri: it is\n+basically a version of `rustc` that, instead of compiling your code, runs it.\n+It accepts all the same flags as `rustc` (though the ones only affecting code\n+generation and linking obviously will have no effect) [and more][miri-flags].\n \n-Running the Miri driver requires some fiddling with environment variables, so\n-the `miri` script helps you do that.  For example, you can (cross-)run the\n-driver on a particular file by doing\n+[miri-flags]: README.md#miri--z-flags-and-environment-variables\n+\n+For example, you can (cross-)run the driver on a particular file by doing\n \n ```sh\n ./miri run tests/run-pass/format.rs\n ./miri run tests/run-pass/hello.rs --target i686-unknown-linux-gnu\n ```\n \n-and you can (cross-)run the test suite using:\n+and you can (cross-)run the entire test suite using:\n \n ```\n ./miri test\n@@ -79,7 +78,7 @@ MIRI_LOG=info ./miri run tests/run-pass/vecs.rs\n ```\n \n Setting `MIRI_LOG` like this will configure logging for Miri itself as well as\n-the `rustc_middle::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n+the `rustc_middle::mir::interpret` and `rustc_mir::interpret` modules in rustc. You\n can also do more targeted configuration, e.g. the following helps debug the\n stacked borrows implementation:\n \n@@ -90,11 +89,11 @@ MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/run-pa\n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n evaluation error was originally raised.\n \n-## Testing `cargo miri`\n+### Testing `cargo miri`\n \n Working with the driver directly gives you full control, but you also lose all\n-the convenience provided by cargo.  Once your test case depends on a crate, it\n-is probably easier to test it with the cargo wrapper.  You can install your\n+the convenience provided by cargo. Once your test case depends on a crate, it\n+is probably easier to test it with the cargo wrapper. You can install your\n development version of Miri using\n \n ```\n@@ -108,10 +107,33 @@ There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n `./run-test.py` in there to execute it. Like `./miri test`, this respects the\n `MIRI_TEST_TARGET` environment variable to execute the test for another target.\n \n-## Building Miri with a locally built rustc\n+## Advanced topic: other build environments\n+\n+We described above the simplest way to get a working build environment for Miri,\n+which is to use the version of rustc indicated by `rustc-version`. But\n+sometimes, that is not enough.\n+\n+### Updating `rustc-version`\n+\n+The `rustc-version` file is regularly updated to keep Miri close to the latest\n+version of rustc. Usually, new contributors do not have to worry about this. But\n+sometimes a newer rustc is needed for a patch, and sometimes Miri needs fixing\n+for changes in rustc. In both cases, `rustc-version` needs updating.\n+\n+To update the `rustc-version` file and install the latest rustc, you can run:\n+```\n+./rustup-toolchain HEAD\n+```\n+\n+Now edit Miri until `./miri test` passes, and submit a PR. Generally, it is\n+preferred to separate updating `rustc-version` and doing what it takes to get\n+Miri working again, from implementing new features that rely on the updated\n+rustc. This avoids blocking all Miri development on landing a big PR.\n+\n+### Building Miri with a locally built rustc\n \n A big part of the Miri driver lives in rustc, so working on Miri will sometimes\n-require using a locally built rustc.  The bug you want to fix may actually be on\n+require using a locally built rustc. The bug you want to fix may actually be on\n the rustc side, or you just need to get more detailed trace of the execution\n than what is possible with release builds -- in both cases, you should develop\n miri against a rustc you compiled yourself, with debug assertions (and hence\n@@ -134,4 +156,4 @@ rustup override set custom\n ```\n \n With this, you should now have a working development setup!  See\n-[above][testing-miri] for how to proceed working with the Miri driver.\n+[above](#building-and-testing-miri) for how to proceed working on Miri."}, {"sha": "b4d205bd52c55bef9ce0d65981f8b6f4e3804430", "filename": "miri", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/910afefcf66800da6c7777984da31f0db697ac70/miri", "raw_url": "https://github.com/rust-lang/rust/raw/910afefcf66800da6c7777984da31f0db697ac70/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=910afefcf66800da6c7777984da31f0db697ac70", "patch": "@@ -141,8 +141,10 @@ run|run-debug)\n     exec cargo run $CARGO_BUILD_FLAGS -- --sysroot \"$MIRI_SYSROOT\" \"$@\"\n     ;;\n *)\n-    echo \"Unknown command: $COMMAND\"\n-    echo\n+    if [ -n \"$COMMAND\" ]; then\n+      echo \"Unknown command: $COMMAND\"\n+      echo\n+    fi\n     echo \"$USAGE\"\n     exit 1\n esac"}]}