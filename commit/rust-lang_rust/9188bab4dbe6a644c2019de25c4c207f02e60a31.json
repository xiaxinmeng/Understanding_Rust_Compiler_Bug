{"sha": "9188bab4dbe6a644c2019de25c4c207f02e60a31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxODhiYWI0ZGJlNmE2NDRjMjAxOWRlMjVjNGMyMDdmMDJlNjBhMzE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-01-27T11:50:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-27T11:50:50Z"}, "message": "Rollup merge of #68531 - wesleywiser:cleanup_self_profiler, r=michaelwoerister\n\n[self-profiler] Two small cleanups\n\nr? @michaelwoerister", "tree": {"sha": "0c8a11978a4a79160e5e93ffbbdb514b50573b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8a11978a4a79160e5e93ffbbdb514b50573b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9188bab4dbe6a644c2019de25c4c207f02e60a31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeLs6aCRBK7hj4Ov3rIwAAdHIIALGkccA9LLUwEFBRmZwpJ5n6\nBdkJ9alpN14yUsopcx59VBgzAD6zWJyv7O8s6UtnTmP8q6w2QC8D7WoW1aKlpxrM\nlom99FkTpuplu8ASu0GvgLbnFZPlLmXjnOnLKnVvAqrtOQyErF5vXabkuzxG1XCH\nw5IDW91TkaPvmZGVsfRCcEKudMiAE9s3/199WpgmfkQ/CIQwDoJ6mVp44DuJ7+kt\nsMo/1Pb18re3kwT8IHBzerwhxH4WUUoYx3GEg15J9BwhrNc4kZXQk1NSY2JIeJeV\nhoPHxM9rVVQWjG0oPKFMEh73soDD2NDEH/b42d51C9Evb5aK1tj2Yi7iLf+Kr+o=\n=hx7k\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c8a11978a4a79160e5e93ffbbdb514b50573b13\nparent 7e824343d32b985b7159cd1872a291cfc33265ce\nparent 2acf5a30bac39d6fd326b0d82b047b9e59b64692\nauthor Pietro Albini <pietro@pietroalbini.org> 1580125850 +0100\ncommitter GitHub <noreply@github.com> 1580125850 +0100\n\nRollup merge of #68531 - wesleywiser:cleanup_self_profiler, r=michaelwoerister\n\n[self-profiler] Two small cleanups\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9188bab4dbe6a644c2019de25c4c207f02e60a31", "html_url": "https://github.com/rust-lang/rust/commit/9188bab4dbe6a644c2019de25c4c207f02e60a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9188bab4dbe6a644c2019de25c4c207f02e60a31/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e824343d32b985b7159cd1872a291cfc33265ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e824343d32b985b7159cd1872a291cfc33265ce", "html_url": "https://github.com/rust-lang/rust/commit/7e824343d32b985b7159cd1872a291cfc33265ce"}, {"sha": "2acf5a30bac39d6fd326b0d82b047b9e59b64692", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acf5a30bac39d6fd326b0d82b047b9e59b64692", "html_url": "https://github.com/rust-lang/rust/commit/2acf5a30bac39d6fd326b0d82b047b9e59b64692"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "aaac7fb4460cd51fb717f5267ccbb8158902fdc2", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9188bab4dbe6a644c2019de25c4c207f02e60a31/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9188bab4dbe6a644c2019de25c4c207f02e60a31/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=9188bab4dbe6a644c2019de25c4c207f02e60a31", "patch": "@@ -23,6 +23,7 @@\n #![feature(integer_atomics)]\n #![feature(test)]\n #![feature(associated_type_bounds)]\n+#![feature(thread_id_value)]\n #![cfg_attr(unix, feature(libc))]\n #![allow(rustc::default_hash_types)]\n "}, {"sha": "90f74328a1d515b4b3d520daeda114b7290b7642", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9188bab4dbe6a644c2019de25c4c207f02e60a31/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9188bab4dbe6a644c2019de25c4c207f02e60a31/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=9188bab4dbe6a644c2019de25c4c207f02e60a31", "patch": "@@ -88,7 +88,6 @@ use std::fs;\n use std::path::Path;\n use std::process;\n use std::sync::Arc;\n-use std::thread::ThreadId;\n use std::time::{Duration, Instant};\n use std::u32;\n \n@@ -129,17 +128,13 @@ bitflags::bitflags! {\n                         Self::QUERY_PROVIDERS.bits |\n                         Self::QUERY_BLOCKED.bits |\n                         Self::INCR_CACHE_LOADS.bits;\n-\n-        // empty() and none() aren't const-fns unfortunately\n-        const NONE = 0;\n-        const ALL  = !Self::NONE.bits;\n     }\n }\n \n // keep this in sync with the `-Z self-profile-events` help message in librustc_session/options.rs\n const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n-    (\"none\", EventFilter::NONE),\n-    (\"all\", EventFilter::ALL),\n+    (\"none\", EventFilter::empty()),\n+    (\"all\", EventFilter::all()),\n     (\"default\", EventFilter::DEFAULT),\n     (\"generic-activity\", EventFilter::GENERIC_ACTIVITIES),\n     (\"query-provider\", EventFilter::QUERY_PROVIDERS),\n@@ -149,10 +144,6 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"query-keys\", EventFilter::QUERY_KEYS),\n ];\n \n-fn thread_id_to_u32(tid: ThreadId) -> u32 {\n-    unsafe { std::mem::transmute::<ThreadId, u64>(tid) as u32 }\n-}\n-\n /// Something that uniquely identifies a query invocation.\n pub struct QueryInvocationId(pub u32);\n \n@@ -185,7 +176,7 @@ impl SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n         let event_filter_mask =\n-            profiler.as_ref().map(|p| p.event_filter_mask).unwrap_or(EventFilter::NONE);\n+            profiler.as_ref().map(|p| p.event_filter_mask).unwrap_or(EventFilter::empty());\n \n         SelfProfilerRef {\n             profiler,\n@@ -318,7 +309,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = thread_id_to_u32(std::thread::current().id());\n+            let thread_id = std::thread::current().id().as_u64() as u32;\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -477,7 +468,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = thread_id_to_u32(std::thread::current().id());\n+        let thread_id = std::thread::current().id().as_u64() as u32;\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);"}]}