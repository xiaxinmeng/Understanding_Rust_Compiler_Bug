{"sha": "dd22657407bb0ab24d141275fd4f0d87269262c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMjI2NTc0MDdiYjBhYjI0ZDE0MTI3NWZkNGYwZDg3MjY5MjYyYzg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T14:15:49Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T14:15:49Z"}, "message": "ImportMap: use IndexMap internally\n\nIt iterates in insertion order, which makes the ordering more\npredictable.", "tree": {"sha": "80928d5bf1e33674cd117c58a9fa31e7a3d7f1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80928d5bf1e33674cd117c58a9fa31e7a3d7f1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd22657407bb0ab24d141275fd4f0d87269262c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd22657407bb0ab24d141275fd4f0d87269262c8", "html_url": "https://github.com/rust-lang/rust/commit/dd22657407bb0ab24d141275fd4f0d87269262c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd22657407bb0ab24d141275fd4f0d87269262c8/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e83ed99a887f959bd4cf97357faf373a09f9269", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e83ed99a887f959bd4cf97357faf373a09f9269", "html_url": "https://github.com/rust-lang/rust/commit/7e83ed99a887f959bd4cf97357faf373a09f9269"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "e6338e3160b8a621a825dfafaa80426e4addead4", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd22657407bb0ab24d141275fd4f0d87269262c8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dd22657407bb0ab24d141275fd4f0d87269262c8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dd22657407bb0ab24d141275fd4f0d87269262c8", "patch": "@@ -982,6 +982,7 @@ dependencies = [\n  \"drop_bomb\",\n  \"either\",\n  \"fst\",\n+ \"indexmap\",\n  \"insta\",\n  \"itertools\",\n  \"log\","}, {"sha": "ef1f65ee0655ad26a9c5a7d9289fdcff3a2787a1", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd22657407bb0ab24d141275fd4f0d87269262c8/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd22657407bb0ab24d141275fd4f0d87269262c8/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=dd22657407bb0ab24d141275fd4f0d87269262c8", "patch": "@@ -16,6 +16,7 @@ anymap = \"0.12.1\"\n drop_bomb = \"0.1.4\"\n fst = { version = \"0.4\", default-features = false }\n itertools = \"0.9.0\"\n+indexmap = \"1.4.0\"\n \n stdx = { path = \"../stdx\" }\n "}, {"sha": "36b4fdd816061efe94c452cf8b4a108d427d2e1a", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd22657407bb0ab24d141275fd4f0d87269262c8/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd22657407bb0ab24d141275fd4f0d87269262c8/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=dd22657407bb0ab24d141275fd4f0d87269262c8", "patch": "@@ -1,10 +1,11 @@\n //! A map of all publicly exported items in a crate.\n \n-use std::{cmp::Ordering, collections::hash_map::Entry, fmt, sync::Arc};\n+use std::{cmp::Ordering, fmt, hash::BuildHasherDefault, sync::Arc};\n \n use fst::{self, Streamer};\n+use indexmap::{map::Entry, IndexMap};\n use ra_db::CrateId;\n-use rustc_hash::FxHashMap;\n+use rustc_hash::FxHasher;\n \n use crate::{\n     db::DefDatabase,\n@@ -14,6 +15,8 @@ use crate::{\n     ModuleDefId, ModuleId,\n };\n \n+type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n+\n /// A map from publicly exported items to the path needed to import/name them from a downstream\n /// crate.\n ///\n@@ -23,7 +26,7 @@ use crate::{\n /// Note that all paths are relative to the containing crate's root, so the crate name still needs\n /// to be prepended to the `ModPath` before the path is valid.\n pub struct ImportMap {\n-    map: FxHashMap<ItemInNs, ModPath>,\n+    map: FxIndexMap<ItemInNs, ModPath>,\n \n     /// List of keys stored in `map`, sorted lexicographically by their `ModPath`. Indexed by the\n     /// values returned by running `fst`.\n@@ -39,7 +42,7 @@ impl ImportMap {\n     pub fn import_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<Self> {\n         let _p = ra_prof::profile(\"import_map_query\");\n         let def_map = db.crate_def_map(krate);\n-        let mut import_map = FxHashMap::with_capacity_and_hasher(64, Default::default());\n+        let mut import_map = FxIndexMap::with_capacity_and_hasher(64, Default::default());\n \n         // We look only into modules that are public(ly reexported), starting with the crate root.\n         let empty = ModPath { kind: PathKind::Plain, segments: vec![] };\n@@ -588,19 +591,19 @@ mod tests {\n \n         let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"fmt\"));\n         assert_snapshot!(res, @r###\"\n-        dep::Fmt (v)\n         dep::fmt (t)\n         dep::Fmt (t)\n+        dep::Fmt (v)\n         dep::Fmt (m)\n         dep::fmt::Display (t)\n         dep::format (v)\n         \"###);\n \n         let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"fmt\").anchor_end());\n         assert_snapshot!(res, @r###\"\n-        dep::Fmt (v)\n         dep::fmt (t)\n         dep::Fmt (t)\n+        dep::Fmt (v)\n         dep::Fmt (m)\n         \"###);\n     }\n@@ -618,17 +621,17 @@ mod tests {\n         let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"FMT\"));\n \n         assert_snapshot!(res, @r###\"\n-        dep::FMT (v)\n-        dep::FMT (t)\n         dep::fmt (t)\n         dep::fmt (v)\n+        dep::FMT (t)\n+        dep::FMT (v)\n         \"###);\n \n         let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"FMT\").case_sensitive());\n \n         assert_snapshot!(res, @r###\"\n-        dep::FMT (v)\n         dep::FMT (t)\n+        dep::FMT (v)\n         \"###);\n     }\n "}]}