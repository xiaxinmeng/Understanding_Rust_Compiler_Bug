{"sha": "eed52de6b74b51edb5d7636c9fc495dd62b5a084", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZDUyZGU2Yjc0YjUxZWRiNWQ3NjM2YzlmYzQ5NWRkNjJiNWEwODQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-05T19:06:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T08:02:15Z"}, "message": "add assert_{bits,ptr}; document which methods we hope to get rid of", "tree": {"sha": "7fac09a4059018bca0236b1bffdd56a7a97d79b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fac09a4059018bca0236b1bffdd56a7a97d79b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed52de6b74b51edb5d7636c9fc495dd62b5a084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed52de6b74b51edb5d7636c9fc495dd62b5a084", "html_url": "https://github.com/rust-lang/rust/commit/eed52de6b74b51edb5d7636c9fc495dd62b5a084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed52de6b74b51edb5d7636c9fc495dd62b5a084/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b820c761744db080ff7a4ba3ac88d259065cb836", "url": "https://api.github.com/repos/rust-lang/rust/commits/b820c761744db080ff7a4ba3ac88d259065cb836", "html_url": "https://github.com/rust-lang/rust/commit/b820c761744db080ff7a4ba3ac88d259065cb836"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "c9c1d3146e3e64390fe024809df4407b85757fa6", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eed52de6b74b51edb5d7636c9fc495dd62b5a084/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed52de6b74b51edb5d7636c9fc495dd62b5a084/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=eed52de6b74b51edb5d7636c9fc495dd62b5a084", "patch": "@@ -339,6 +339,10 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Raw { data: f.to_bits(), size: 8 }\n     }\n \n+    /// This is very rarely the method you want!  You should dispatch on the type\n+    /// and use `force_bits`/`assert_bits`/`force_ptr`/`assert_ptr`.\n+    /// This method only exists for the benefit of low-level memory operations\n+    /// as well as the implementation of the `force_*` methods.\n     #[inline]\n     pub fn to_bits_or_ptr(\n         self,\n@@ -359,6 +363,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    /// Do not call this method!  Use either `assert_bits` or `force_bits`.\n     #[inline]\n     pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n         match self {\n@@ -372,6 +377,12 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn assert_bits(self, target_size: Size) -> u128 {\n+        self.to_bits(target_size).expect(\"Expected Raw bits but got a Pointer\")\n+    }\n+\n+    /// Do not call this method!  Use either `assert_ptr` or `force_ptr`.\n     #[inline]\n     pub fn to_ptr(self) -> InterpResult<'tcx, Pointer<Tag>> {\n         match self {\n@@ -381,6 +392,12 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn assert_ptr(self) -> Pointer<Tag> {\n+        self.to_ptr().expect(\"Expected a Pointer but got Raw bits\")\n+    }\n+\n+    /// Do not call this method!  Dispatch based on the type instead.\n     #[inline]\n     pub fn is_bits(self) -> bool {\n         match self {\n@@ -389,6 +406,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    /// Do not call this method!  Dispatch based on the type instead.\n     #[inline]\n     pub fn is_ptr(self) -> bool {\n         match self {\n@@ -536,11 +554,13 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         }\n     }\n \n+    /// Do not call this method!  Use either `assert_ptr` or `force_ptr`.\n     #[inline(always)]\n     pub fn to_ptr(self) -> InterpResult<'tcx, Pointer<Tag>> {\n         self.not_undef()?.to_ptr()\n     }\n \n+    /// Do not call this method!  Use either `assert_bits` or `force_bits`.\n     #[inline(always)]\n     pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n         self.not_undef()?.to_bits(target_size)"}]}