{"sha": "42f371c2eb0623b487c74f291956bb09af0b0351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjM3MWMyZWIwNjIzYjQ4N2M3NGYyOTE5NTZiYjA5YWYwYjAzNTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-12T13:21:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T13:21:11Z"}, "message": "Rollup merge of #69034 - petrochenkov:notokind, r=Centril\n\nparser: Remove `Parser::prev_token_kind`\n\nFollow-up to https://github.com/rust-lang/rust/pull/69006.\nr? @Centril", "tree": {"sha": "e383b8c7f68ce0d61725c9396b625cd631ca34b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e383b8c7f68ce0d61725c9396b625cd631ca34b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f371c2eb0623b487c74f291956bb09af0b0351", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQ/vHCRBK7hj4Ov3rIwAAdHIIADfXE1RydWU95rbglfIg5VL1\n1NItHuc0u44+RGZsDWKtokVyAEluw4QY1Nmj5sNmwf8ij0ETntFPTJS7URQ8Gg/b\nCSSR+plOGHrDRPYsml2rtEdTv5PYzvNl2uIcT/46BwsY1rkz4F0UyKFkk0So8Z3z\nJuRNKQt4lt6mukTqcR5xM93b/7FSfmVNFAAxyap9DCPN+Oc2cr1AEM0ht+UWNjXw\nrbbxd8b08D7bvvisEK9aMiH0L7/kBDOsj3CbUHhiH+UGjItjvNUYBgZJImiK36B3\nsRuRjoz3HMuwETmDb1QIeOADy8gyfJgOx4R1NJIvcXxwc2qsr0TdVFJcOuahznI=\n=dFsc\n-----END PGP SIGNATURE-----\n", "payload": "tree e383b8c7f68ce0d61725c9396b625cd631ca34b2\nparent b695f99debd016e8f1d10b515fe286d014bd6713\nparent 8d799218ab29793b0ac08518c77cfabc8629c001\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581513671 +0100\ncommitter GitHub <noreply@github.com> 1581513671 +0100\n\nRollup merge of #69034 - petrochenkov:notokind, r=Centril\n\nparser: Remove `Parser::prev_token_kind`\n\nFollow-up to https://github.com/rust-lang/rust/pull/69006.\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f371c2eb0623b487c74f291956bb09af0b0351", "html_url": "https://github.com/rust-lang/rust/commit/42f371c2eb0623b487c74f291956bb09af0b0351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f371c2eb0623b487c74f291956bb09af0b0351/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b695f99debd016e8f1d10b515fe286d014bd6713", "url": "https://api.github.com/repos/rust-lang/rust/commits/b695f99debd016e8f1d10b515fe286d014bd6713", "html_url": "https://github.com/rust-lang/rust/commit/b695f99debd016e8f1d10b515fe286d014bd6713"}, {"sha": "8d799218ab29793b0ac08518c77cfabc8629c001", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d799218ab29793b0ac08518c77cfabc8629c001", "html_url": "https://github.com/rust-lang/rust/commit/8d799218ab29793b0ac08518c77cfabc8629c001"}], "stats": {"total": 81, "additions": 25, "deletions": 56}, "files": [{"sha": "c8c0ba4c66ee25af9ca919f9bbfecdcc11ef0f95", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=42f371c2eb0623b487c74f291956bb09af0b0351", "patch": "@@ -1,6 +1,6 @@\n use super::pat::{GateOr, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath};\n-use super::{BlockMode, Parser, PathStyle, PrevTokenKind, Restrictions, TokenType};\n+use super::{BlockMode, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType};\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n@@ -166,17 +166,10 @@ impl<'a> Parser<'a> {\n \n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = self.check_assoc_op() {\n-            // Adjust the span for interpolated LHS to point to the `$lhs` token and not to what\n-            // it refers to. Interpolated identifiers are unwrapped early and never show up here\n-            // as `PrevTokenKind::Interpolated` so if LHS is a single identifier we always process\n-            // it as \"interpolated\", it doesn't change the answer for non-interpolated idents.\n-            let lhs_span = match (self.prev_token_kind, &lhs.kind) {\n-                (PrevTokenKind::Interpolated, _) => self.prev_span,\n-                (PrevTokenKind::Ident, &ExprKind::Path(None, ref path))\n-                    if path.segments.len() == 1 =>\n-                {\n-                    self.prev_span\n-                }\n+            // Adjust the span for interpolated LHS to point to the `$lhs` token\n+            // and not to what it refers to.\n+            let lhs_span = match self.unnormalized_prev_token().kind {\n+                TokenKind::Interpolated(..) => self.prev_span,\n                 _ => lhs.span,\n             };\n \n@@ -535,11 +528,13 @@ impl<'a> Parser<'a> {\n         expr: PResult<'a, P<Expr>>,\n     ) -> PResult<'a, (Span, P<Expr>)> {\n         expr.map(|e| {\n-            if self.prev_token_kind == PrevTokenKind::Interpolated {\n-                (self.prev_span, e)\n-            } else {\n-                (e.span, e)\n-            }\n+            (\n+                match self.unnormalized_prev_token().kind {\n+                    TokenKind::Interpolated(..) => self.prev_span,\n+                    _ => e.span,\n+                },\n+                e,\n+            )\n         })\n     }\n "}, {"sha": "37b03cf32f49cce19191a1db510585f6f5480c0b", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=42f371c2eb0623b487c74f291956bb09af0b0351", "patch": "@@ -83,18 +83,6 @@ macro_rules! maybe_recover_from_interpolated_ty_qpath {\n     };\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq)]\n-enum PrevTokenKind {\n-    DocComment,\n-    Comma,\n-    Plus,\n-    Interpolated,\n-    Eof,\n-    Ident,\n-    BitOr,\n-    Other,\n-}\n-\n #[derive(Clone)]\n pub struct Parser<'a> {\n     pub sess: &'a ParseSess,\n@@ -115,9 +103,6 @@ pub struct Parser<'a> {\n     /// Preferable use is through the `unnormalized_prev_token()` getter.\n     /// Use span from this token if you need to concatenate it with some neighbouring spans.\n     unnormalized_prev_token: Option<Token>,\n-    /// Equivalent to `prev_token.kind` in simplified form.\n-    /// FIXME: Remove in favor of `(unnormalized_)prev_token().kind`.\n-    prev_token_kind: PrevTokenKind,\n     /// Equivalent to `unnormalized_prev_token().span`.\n     /// FIXME: Remove in favor of `(unnormalized_)prev_token().span`.\n     pub prev_span: Span,\n@@ -396,7 +381,6 @@ impl<'a> Parser<'a> {\n             unnormalized_token: None,\n             prev_token: Token::dummy(),\n             unnormalized_prev_token: None,\n-            prev_token_kind: PrevTokenKind::Other,\n             prev_span: DUMMY_SP,\n             restrictions: Restrictions::empty(),\n             recurse_into_file_modules,\n@@ -523,10 +507,11 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 Ok(Ident::new(name, span))\n             }\n-            _ => Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n-                self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n-            } else {\n-                self.expected_ident_found()\n+            _ => Err(match self.prev_token.kind {\n+                TokenKind::DocComment(..) => {\n+                    self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n+                }\n+                _ => self.expected_ident_found(),\n             }),\n         }\n     }\n@@ -908,7 +893,7 @@ impl<'a> Parser<'a> {\n \n     /// Advance the parser by one token.\n     pub fn bump(&mut self) {\n-        if self.prev_token_kind == PrevTokenKind::Eof {\n+        if self.prev_token.kind == TokenKind::Eof {\n             // Bumping after EOF is a bad sign, usually an infinite loop.\n             let msg = \"attempted to bump the parser past EOF (may be stuck in a loop)\";\n             self.span_bug(self.token.span, msg);\n@@ -920,16 +905,6 @@ impl<'a> Parser<'a> {\n         self.unnormalized_prev_token = self.unnormalized_token.take();\n \n         // Update fields derived from the previous token.\n-        self.prev_token_kind = match self.prev_token.kind {\n-            token::DocComment(..) => PrevTokenKind::DocComment,\n-            token::Comma => PrevTokenKind::Comma,\n-            token::BinOp(token::Plus) => PrevTokenKind::Plus,\n-            token::BinOp(token::Or) => PrevTokenKind::BitOr,\n-            token::Interpolated(..) => PrevTokenKind::Interpolated,\n-            token::Eof => PrevTokenKind::Eof,\n-            token::Ident(..) => PrevTokenKind::Ident,\n-            _ => PrevTokenKind::Other,\n-        };\n         self.prev_span = self.unnormalized_prev_token().span;\n \n         self.expected_tokens.clear();\n@@ -949,7 +924,6 @@ impl<'a> Parser<'a> {\n         self.unnormalized_prev_token = self.unnormalized_token.take();\n \n         // Update fields derived from the previous token.\n-        self.prev_token_kind = PrevTokenKind::Other;\n         self.prev_span = self.unnormalized_prev_token().span.with_hi(span.lo());\n \n         self.expected_tokens.clear();"}, {"sha": "e11cdd5dadb7241d97e0c07a8ce6b3a53ecfec7a", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=42f371c2eb0623b487c74f291956bb09af0b0351", "patch": "@@ -2,7 +2,7 @@ use super::diagnostics::Error;\n use super::expr::LhsExpr;\n use super::pat::GateOr;\n use super::path::PathStyle;\n-use super::{BlockMode, Parser, PrevTokenKind, Restrictions, SemiColonMode};\n+use super::{BlockMode, Parser, Restrictions, SemiColonMode};\n use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n@@ -190,7 +190,7 @@ impl<'a> Parser<'a> {\n     /// Also error if the previous token was a doc comment.\n     fn error_outer_attrs(&self, attrs: &[Attribute]) {\n         if !attrs.is_empty() {\n-            if self.prev_token_kind == PrevTokenKind::DocComment {\n+            if matches!(self.prev_token.kind, TokenKind::DocComment(..)) {\n                 self.span_fatal_err(self.prev_span, Error::UselessDocComment).emit();\n             } else if attrs.iter().any(|a| a.style == AttrStyle::Outer) {\n                 self.struct_span_err(self.token.span, \"expected statement after outer attribute\")"}, {"sha": "e74ce622947bfe330d7ec14f472f048ac06e6c9c", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f371c2eb0623b487c74f291956bb09af0b0351/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=42f371c2eb0623b487c74f291956bb09af0b0351", "patch": "@@ -1,5 +1,5 @@\n use super::item::ParamCfg;\n-use super::{Parser, PathStyle, PrevTokenKind, TokenType};\n+use super::{Parser, PathStyle, TokenType};\n \n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n@@ -14,7 +14,7 @@ use syntax::ast::{\n };\n use syntax::ast::{Mac, Mutability};\n use syntax::ptr::P;\n-use syntax::token::{self, Token};\n+use syntax::token::{self, Token, TokenKind};\n \n /// Any `?` or `?const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n@@ -196,7 +196,7 @@ impl<'a> Parser<'a> {\n         let mut trailing_plus = false;\n         let (ts, trailing) = self.parse_paren_comma_seq(|p| {\n             let ty = p.parse_ty()?;\n-            trailing_plus = p.prev_token_kind == PrevTokenKind::Plus;\n+            trailing_plus = p.prev_token.kind == TokenKind::BinOp(token::Plus);\n             Ok(ty)\n         })?;\n \n@@ -320,7 +320,7 @@ impl<'a> Parser<'a> {\n     fn parse_impl_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n         // Always parse bounds greedily for better error recovery.\n         let bounds = self.parse_generic_bounds(None)?;\n-        *impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+        *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))\n     }\n \n@@ -340,7 +340,7 @@ impl<'a> Parser<'a> {\n         self.bump(); // `dyn`\n         // Always parse bounds greedily for better error recovery.\n         let bounds = self.parse_generic_bounds(None)?;\n-        *impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+        *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn))\n     }\n "}]}