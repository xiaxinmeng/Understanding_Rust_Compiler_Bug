{"sha": "2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "node_id": "C_kwDOAAsO6NoAKDJmZTM4ZDNiNjNjZjRiNmYyMjc4YTY1NmI3ZmZlZDQwYTUyNGYwZmY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-05T14:06:44Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-05T14:28:59Z"}, "message": "Indicate the number of float tokens in the first token", "tree": {"sha": "bc7071ea59791f91a0b7adc5fe95b067916edf5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc7071ea59791f91a0b7adc5fe95b067916edf5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "html_url": "https://github.com/rust-lang/rust/commit/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34dc8e93835d80ed4825bfad6e4979e6c4a4076a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34dc8e93835d80ed4825bfad6e4979e6c4a4076a", "html_url": "https://github.com/rust-lang/rust/commit/34dc8e93835d80ed4825bfad6e4979e6c4a4076a"}], "stats": {"total": 238, "additions": 194, "deletions": 44}, "files": [{"sha": "92f3302538743e67fb632bbd23a604d6f3ff019e", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -39,6 +39,7 @@ mod generic_params;\n mod types;\n \n use crate::{\n+    grammar::expressions::FLOAT_LITERAL_FIRST,\n     parser::{CompletedMarker, Marker, Parser},\n     SyntaxKind::{self, *},\n     TokenSet, T,\n@@ -318,9 +319,15 @@ fn name_ref(p: &mut Parser) {\n }\n \n fn name_ref_or_index(p: &mut Parser) {\n-    assert!(p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART));\n+    assert!(\n+        p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST)\n+    );\n     let m = p.start();\n-    p.bump_any();\n+    if p.at_ts(FLOAT_LITERAL_FIRST) {\n+        p.bump_remap(FLOAT_NUMBER_PART);\n+    } else {\n+        p.bump_any();\n+    }\n     m.complete(p, NAME_REF);\n }\n "}, {"sha": "15dba362a94ff96cec5b19c43a8d28b8ab3289b6", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -3,7 +3,7 @@ mod atom;\n use super::*;\n \n pub(crate) use self::atom::{block_expr, match_arm_list};\n-pub(super) use self::atom::{float_literal, literal, LITERAL_FIRST};\n+pub(super) use self::atom::{float_literal, literal, FLOAT_LITERAL_FIRST, LITERAL_FIRST};\n \n #[derive(PartialEq, Eq)]\n pub(super) enum Semicolon {\n@@ -452,6 +452,9 @@ fn index_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n // fn foo() {\n //     x.foo();\n //     y.bar::<T>(1, 2,);\n+//\n+//     0e0.sin();\n+//     0e0f32.sin();\n // }\n fn method_call_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]) && p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])));\n@@ -477,7 +480,7 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     assert!(p.at(T![.]));\n     let m = lhs.precede(p);\n     p.bump(T![.]);\n-    if p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) {\n+    if p.at(IDENT) || p.at(INT_NUMBER) || p.at(FLOAT_NUMBER_PART) || p.at_ts(FLOAT_LITERAL_FIRST) {\n         name_ref_or_index(p);\n     } else {\n         p.error(\"expected field name or number\");"}, {"sha": "c191b5593db2e9598ce68b076b502a8865d8da2a", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -17,19 +17,24 @@ pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     T![true],\n     T![false],\n     INT_NUMBER,\n-    FLOAT_NUMBER_PART,\n+    FLOAT_NUMBER_START_0,\n+    FLOAT_NUMBER_START_1,\n+    FLOAT_NUMBER_START_2,\n     BYTE,\n     CHAR,\n     STRING,\n     BYTE_STRING,\n ]);\n \n+pub(crate) const FLOAT_LITERAL_FIRST: TokenSet =\n+    TokenSet::new(&[FLOAT_NUMBER_START_0, FLOAT_NUMBER_START_1, FLOAT_NUMBER_START_2]);\n+\n pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     if !p.at_ts(LITERAL_FIRST) {\n         return None;\n     }\n     let m = p.start();\n-    if p.at(FLOAT_NUMBER_PART) {\n+    if p.at_ts(FLOAT_LITERAL_FIRST) {\n         float_literal(p);\n     } else {\n         // Everything else is just one token.\n@@ -38,15 +43,30 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     Some(m.complete(p, LITERAL))\n }\n \n+// test float_literal\n+// fn f() {\n+//     0.0;\n+//     1.;\n+//     0e0;\n+//     0e0f32;\n+//     1.23f64;\n+// }\n pub(crate) fn float_literal(p: &mut Parser) {\n-    // Floats can be up to 3 tokens: 2 `FLOAT_NUMBER_PART`s separated by 1 `DOT`\n+    // Floats can be up to 3 tokens. The first token indicates how many there are.\n+    // We remap the first token to `FLOAT_NUMBER_PART` so that no subsequent code has to deal with\n+    // this awful, awful hack.\n     let f = p.start();\n-    p.bump(FLOAT_NUMBER_PART);\n-    if p.at(DOT) {\n+    if p.at(FLOAT_NUMBER_START_0) {\n+        p.bump_remap(FLOAT_NUMBER_PART);\n+    } else if p.at(FLOAT_NUMBER_START_1) {\n+        p.bump_remap(FLOAT_NUMBER_PART);\n         p.bump(DOT);\n-        if p.at(FLOAT_NUMBER_PART) {\n-            p.bump(FLOAT_NUMBER_PART);\n-        }\n+    } else if p.at(FLOAT_NUMBER_START_2) {\n+        p.bump_remap(FLOAT_NUMBER_PART);\n+        p.bump(DOT);\n+        p.bump(FLOAT_NUMBER_PART);\n+    } else {\n+        unreachable!();\n     }\n     f.complete(p, FLOAT_LITERAL);\n }"}, {"sha": "65166034023404e7bafd332b5a16fd76cd14ed5f", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -457,7 +457,7 @@ pub(crate) fn token_tree(p: &mut Parser) {\n                 return;\n             }\n             T![')'] | T![']'] => p.err_and_bump(\"unmatched brace\"),\n-            FLOAT_NUMBER_PART => {\n+            FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2 => {\n                 float_literal(p);\n             }\n             _ => p.bump_any(),"}, {"sha": "9887960871f8b39ef2435f3e2afdc703950c7567", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -240,19 +240,24 @@ impl<'a> Converter<'a> {\n \n                 // In order to correctly parse nested tuple accesses like `tup.0.0`, where the `0.0`\n                 // is lexed as a float, we split floats that contain a `.` into 3 tokens.\n+                // To ensure that later stages can always reconstruct the token correctly, the first\n+                // token in the sequence indicates the number of following tokens that are part of\n+                // the float literal.\n                 if let Some((before, after)) = token_text.split_once('.') {\n                     let err = if err.is_empty() { None } else { Some(err) };\n-                    if !before.is_empty() {\n-                        self.push(FLOAT_NUMBER_PART, before.len(), None);\n-                    }\n+\n+                    assert!(!before.is_empty());\n+                    let tok =\n+                        if after.is_empty() { FLOAT_NUMBER_START_1 } else { FLOAT_NUMBER_START_2 };\n+                    self.push(tok, before.len(), None);\n                     self.push(DOT, 1, None);\n                     if !after.is_empty() {\n                         self.push(FLOAT_NUMBER_PART, after.len(), err);\n                     }\n                     return;\n                 }\n \n-                FLOAT_NUMBER_PART\n+                FLOAT_NUMBER_START_0\n             }\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {"}, {"sha": "5ddcd6ad6a42ade1460bc3e11b3a7f349a06b074", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -110,6 +110,9 @@ pub enum SyntaxKind {\n     RAW_KW,\n     MACRO_RULES_KW,\n     INT_NUMBER,\n+    FLOAT_NUMBER_START_0,\n+    FLOAT_NUMBER_START_1,\n+    FLOAT_NUMBER_START_2,\n     FLOAT_NUMBER_PART,\n     CHAR,\n     BYTE,\n@@ -287,7 +290,8 @@ impl SyntaxKind {\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            INT_NUMBER | FLOAT_NUMBER_PART | CHAR | BYTE | STRING | BYTE_STRING => true,\n+            INT_NUMBER | FLOAT_NUMBER_START_0 | FLOAT_NUMBER_START_1 | FLOAT_NUMBER_START_2\n+            | FLOAT_NUMBER_PART | CHAR | BYTE | STRING | BYTE_STRING => true,\n             _ => false,\n         }\n     }\n@@ -387,5 +391,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number_part] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_PART } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; [float_number_part] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_PART } ; [float_number_start_0] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_0 } ; [float_number_start_1] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_1 } ; [float_number_start_2] => { $ crate :: SyntaxKind :: FLOAT_NUMBER_START_2 } ; }\n pub use T;"}, {"sha": "73de4cac24358ecfbdc7098ffd94a8f54756348b", "filename": "crates/parser/test_data/lexer/err/empty_exponent.rast", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Fempty_exponent.rast?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -1,14 +1,14 @@\n-FLOAT_NUMBER_PART \"0e\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"0e\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"0E\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"0E\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER_PART \"42e+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42e-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42E+\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42E-\" error: Missing digits after the exponent symbol\n+FLOAT_NUMBER_START_0 \"42E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n INT_NUMBER \"42\"\n DOT \".\"\n@@ -30,35 +30,35 @@ DOT \".\"\n IDENT \"E\"\n MINUS \"-\"\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2e+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2e-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2E+\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2E-\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2e+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2e-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2E+f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"42\"\n+FLOAT_NUMBER_START_2 \"42\"\n DOT \".\"\n FLOAT_NUMBER_PART \"2E-f32\" error: Missing digits after the exponent symbol\n WHITESPACE \"\\n\""}, {"sha": "428bdf8a1f9a6f6e5fc5712da7e65c5e6f04a602", "filename": "crates/parser/test_data/lexer/ok/numbers.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Fok%2Fnumbers.rast?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -4,7 +4,7 @@ INT_NUMBER \"00\"\n WHITESPACE \" \"\n INT_NUMBER \"0_\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_PART \"0\"\n+FLOAT_NUMBER_START_1 \"0\"\n DOT \".\"\n WHITESPACE \" \"\n INT_NUMBER \"0z\"\n@@ -21,13 +21,13 @@ INT_NUMBER \"001279\"\n WHITESPACE \" \"\n INT_NUMBER \"0_1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_PART \"0\"\n+FLOAT_NUMBER_START_2 \"0\"\n DOT \".\"\n FLOAT_NUMBER_PART \"1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_PART \"0e1279\"\n+FLOAT_NUMBER_START_0 \"0e1279\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_PART \"0E1279\"\n+FLOAT_NUMBER_START_0 \"0E1279\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n@@ -40,25 +40,25 @@ IDENT \"foo\"\n L_PAREN \"(\"\n R_PAREN \")\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"0e+1\"\n+FLOAT_NUMBER_START_0 \"0e+1\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"0\"\n DOT \".\"\n IDENT \"e\"\n PLUS \"+\"\n INT_NUMBER \"1\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"0\"\n+FLOAT_NUMBER_START_2 \"0\"\n DOT \".\"\n FLOAT_NUMBER_PART \"0E-2\"\n WHITESPACE \"\\n\"\n-FLOAT_NUMBER_PART \"0___0\"\n+FLOAT_NUMBER_START_2 \"0___0\"\n DOT \".\"\n FLOAT_NUMBER_PART \"10000____0000e+111__\"\n WHITESPACE \"\\n\"\n INT_NUMBER \"1i64\"\n WHITESPACE \" \"\n-FLOAT_NUMBER_PART \"92\"\n+FLOAT_NUMBER_START_2 \"92\"\n DOT \".\"\n FLOAT_NUMBER_PART \"0f32\"\n WHITESPACE \" \""}, {"sha": "0a14e20da85054b365df421e21e4ee8495caaf1e", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rast", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rast?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -58,6 +58,32 @@ SOURCE_FILE\n               COMMA \",\"\n               R_PAREN \")\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n\\n    \"\n+        EXPR_STMT\n+          METHOD_CALL_EXPR\n+            LITERAL\n+              FLOAT_LITERAL\n+                FLOAT_NUMBER_PART \"0e0\"\n+            DOT \".\"\n+            NAME_REF\n+              IDENT \"sin\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          METHOD_CALL_EXPR\n+            LITERAL\n+              FLOAT_LITERAL\n+                FLOAT_NUMBER_PART \"0e0f32\"\n+            DOT \".\"\n+            NAME_REF\n+              IDENT \"sin\"\n+            ARG_LIST\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "3e5d464e238fdf72b4ab2a108278e8659f28b815", "filename": "crates/parser/test_data/parser/inline/ok/0107_method_call_expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0107_method_call_expr.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -1,4 +1,7 @@\n fn foo() {\n     x.foo();\n     y.bar::<T>(1, 2,);\n+\n+    0e0.sin();\n+    0e0f32.sin();\n }"}, {"sha": "a5cd2dffa4a6bdac3c76d3cb1c9d248c0c437528", "filename": "crates/parser/test_data/parser/inline/ok/0201_float_literal.rast", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rast?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -0,0 +1,51 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_PART \"0\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"0\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_PART \"1\"\n+              DOT \".\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_PART \"0e0\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_PART \"0e0f32\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          LITERAL\n+            FLOAT_LITERAL\n+              FLOAT_NUMBER_PART \"1\"\n+              DOT \".\"\n+              FLOAT_NUMBER_PART \"23f64\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "0d51ec1252fa8d2814d249ffa6ff16960843e24b", "filename": "crates/parser/test_data/parser/inline/ok/0201_float_literal.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0201_float_literal.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -0,0 +1,7 @@\n+fn f() {\n+    0.0;\n+    1.;\n+    0e0;\n+    0e0f32;\n+    1.23f64;\n+}"}, {"sha": "85270dee6244bd1ef18d9f633b08ccf97e9d9bde", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -373,7 +373,9 @@ Literal =\n   )\n \n FloatLiteral =\n-  'float_number_part'\n+  'float_number_start_0'?\n+  'float_number_start_1'?\n+  'float_number_start_2'?\n   '.'?\n   'float_number_part'?\n "}, {"sha": "9d5af8e63ca85d1264e278405675e3c4e96d5419", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -1090,10 +1090,19 @@ pub struct FloatLiteral {\n     pub(crate) syntax: SyntaxNode,\n }\n impl FloatLiteral {\n+    pub fn float_number_start_0_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_start_0])\n+    }\n+    pub fn float_number_start_1_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_start_1])\n+    }\n+    pub fn float_number_start_2_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![float_number_start_2])\n+    }\n+    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n     pub fn float_number_part_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![float_number_part])\n     }\n-    pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "f5a78e4119dcd88c0233a82b4febbe4c00fe7735", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -71,7 +71,17 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n-    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER_PART\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n+    literals: &[\n+        \"INT_NUMBER\",\n+        \"FLOAT_NUMBER_START_0\",\n+        \"FLOAT_NUMBER_START_1\",\n+        \"FLOAT_NUMBER_START_2\",\n+        \"FLOAT_NUMBER_PART\",\n+        \"CHAR\",\n+        \"BYTE\",\n+        \"STRING\",\n+        \"BYTE_STRING\",\n+    ],\n     tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n         \"SOURCE_FILE\","}, {"sha": "33bf2c0cbad2196507ae8bd5476fa77f05567065", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=2fe38d3b63cf4b6f2278a656b7ffed40a524f0ff", "patch": "@@ -463,6 +463,9 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n             [ident] => { $crate::SyntaxKind::IDENT };\n             [shebang] => { $crate::SyntaxKind::SHEBANG };\n             [float_number_part] => { $crate::SyntaxKind::FLOAT_NUMBER_PART };\n+            [float_number_start_0] => { $crate::SyntaxKind::FLOAT_NUMBER_START_0 };\n+            [float_number_start_1] => { $crate::SyntaxKind::FLOAT_NUMBER_START_1 };\n+            [float_number_start_2] => { $crate::SyntaxKind::FLOAT_NUMBER_START_2 };\n         }\n         pub use T;\n     };"}]}