{"sha": "423860cd7e1dd7d32635802d6c3368d97b3caaf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzg2MGNkN2UxZGQ3ZDMyNjM1ODAyZDZjMzM2OGQ5N2IzY2FhZjI=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T15:12:18Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T15:12:18Z"}, "message": "Add default body when implementing Default by hand", "tree": {"sha": "9ac5d19db2ab7e27920fd3864ec50f72656952dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac5d19db2ab7e27920fd3864ec50f72656952dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423860cd7e1dd7d32635802d6c3368d97b3caaf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423860cd7e1dd7d32635802d6c3368d97b3caaf2", "html_url": "https://github.com/rust-lang/rust/commit/423860cd7e1dd7d32635802d6c3368d97b3caaf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423860cd7e1dd7d32635802d6c3368d97b3caaf2/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5664a2b0b31403024ce5ab927760d630d5ddc9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5664a2b0b31403024ce5ab927760d630d5ddc9a4", "html_url": "https://github.com/rust-lang/rust/commit/5664a2b0b31403024ce5ab927760d630d5ddc9a4"}], "stats": {"total": 101, "additions": 99, "deletions": 2}, "files": [{"sha": "085489af3f58e01643729359e77f1c5973f4ac1f", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 91, "deletions": 2, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/423860cd7e1dd7d32635802d6c3368d97b3caaf2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423860cd7e1dd7d32635802d6c3368d97b3caaf2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=423860cd7e1dd7d32635802d6c3368d97b3caaf2", "patch": "@@ -169,7 +169,7 @@ fn impl_def_from_trait(\n \n     // Generate a default `impl` function body for the derived trait.\n     if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n-        let _ = gen_default_impl(func, trait_path, adt, annotated_name);\n+        let _ = gen_trait_body_impl(func, trait_path, adt, annotated_name);\n     };\n \n     Some((impl_def, first_assoc_item))\n@@ -180,14 +180,15 @@ fn impl_def_from_trait(\n /// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n /// `None` means that generating a custom trait body failed, and the body will remain\n /// as `todo!` instead.\n-fn gen_default_impl(\n+fn gen_trait_body_impl(\n     func: &ast::Fn,\n     trait_path: &ast::Path,\n     adt: &ast::Adt,\n     annotated_name: &ast::Name,\n ) -> Option<()> {\n     match trait_path.segment()?.name_ref()?.text().as_str() {\n         \"Debug\" => gen_debug_impl(adt, func, annotated_name),\n+        \"Default\" => gen_default_impl(adt, func),\n         _ => Some(()),\n     }\n }\n@@ -276,6 +277,50 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) ->\n     }\n }\n \n+/// Generate a `Debug` impl based on the fields and members of the target type.\n+fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    match adt {\n+        // `Debug` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => Some(()),\n+        // Deriving `Debug` for enums is not stable yet.\n+        ast::Adt::Enum(_) => Some(()),\n+        ast::Adt::Struct(strukt) => {\n+            let expr = match strukt.field_list() {\n+                Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                    let mut fields = vec![];\n+                    for field in field_list.fields() {\n+                        let trait_name = make::ext::ident_path(\"Default\");\n+                        let method_name = make::ext::ident_path(\"default\");\n+                        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n+                        let method_call = make::expr_call(fn_name, make::arg_list(None));\n+                        let name_ref = make::name_ref(&field.name()?.to_string());\n+                        let field = make::record_expr_field(name_ref, Some(method_call));\n+                        fields.push(field);\n+                    }\n+                    let struct_name = make::ext::ident_path(\"Self\");\n+                    let fields = make::record_expr_field_list(fields);\n+                    make::record_expr(struct_name, fields).into()\n+                }\n+                Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                    let mut fields = vec![];\n+                    for _ in field_list.fields() {\n+                        let trait_name = make::ext::ident_path(\"Default\");\n+                        let method_name = make::ext::ident_path(\"default\");\n+                        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n+                        let method_call = make::expr_call(fn_name, make::arg_list(None));\n+                        fields.push(method_call);\n+                    }\n+                    let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n+                    make::expr_call(struct_name, make::arg_list(fields))\n+                }\n+                None => todo!(),\n+            };\n+            let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n+            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+            Some(())\n+        }\n+    }\n+}\n fn update_attribute(\n     builder: &mut AssistBuilder,\n     input: &ast::TokenTree,\n@@ -405,6 +450,50 @@ impl core::fmt::Debug for Foo {\n         }\n     }\n }\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_default_record_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: default\n+#[derive(Defau$0lt)]\n+struct Foo {\n+    foo: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    foo: usize,\n+}\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self { foo: Default::default() }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_default_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: default\n+#[derive(Defau$0lt)]\n+struct Foo(usize);\n+\"#,\n+            r#\"\n+struct Foo(usize);\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self(Default::default())\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "b0bec676bb8eb5b0f6e3573eb7f31bff7d07ed46", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/423860cd7e1dd7d32635802d6c3368d97b3caaf2/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423860cd7e1dd7d32635802d6c3368d97b3caaf2/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=423860cd7e1dd7d32635802d6c3368d97b3caaf2", "patch": "@@ -346,6 +346,14 @@ pub mod fmt {\n }\n // endregion:fmt\n \n+// region:default\n+pub mod default {\n+    pub trait Default {\n+        fn default() -> Self;\n+    }\n+}\n+// endregion:default\n+\n // region:slice\n pub mod slice {\n     #[lang = \"slice\"]"}]}