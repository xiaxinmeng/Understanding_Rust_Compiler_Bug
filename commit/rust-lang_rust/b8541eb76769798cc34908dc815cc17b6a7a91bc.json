{"sha": "b8541eb76769798cc34908dc815cc17b6a7a91bc", "node_id": "C_kwDOAAsO6NoAKGI4NTQxZWI3Njc2OTc5OGNjMzQ5MDhkYzgxNWNjMTdiNmE3YTkxYmM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-15T13:36:10Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-03-21T08:57:22Z"}, "message": "use the correct param env", "tree": {"sha": "1b38d11c6a6ac2045545e9c04b138c298d4aeef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b38d11c6a6ac2045545e9c04b138c298d4aeef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8541eb76769798cc34908dc815cc17b6a7a91bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8541eb76769798cc34908dc815cc17b6a7a91bc", "html_url": "https://github.com/rust-lang/rust/commit/b8541eb76769798cc34908dc815cc17b6a7a91bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8541eb76769798cc34908dc815cc17b6a7a91bc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63861b9d5a91b827c5c8164e24ee556dd790bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63861b9d5a91b827c5c8164e24ee556dd790bbe", "html_url": "https://github.com/rust-lang/rust/commit/c63861b9d5a91b827c5c8164e24ee556dd790bbe"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "7b58bf03bbea8a76eab9f983cbee60fdbb248d57", "filename": "compiler/rustc_lint/src/for_loops_over_fallibles.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8541eb76769798cc34908dc815cc17b6a7a91bc/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8541eb76769798cc34908dc815cc17b6a7a91bc/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loops_over_fallibles.rs?ref=b8541eb76769798cc34908dc815cc17b6a7a91bc", "patch": "@@ -148,8 +148,7 @@ fn suggest_question_mark<'tcx>(\n \n     ocx.register_bound(\n         cause,\n-        // FIXME: using the empty param env is wrong, should use the one from `body_id`.\n-        ty::ParamEnv::empty(),\n+        cx.param_env,\n         // Erase any region vids from the type, which may not be resolved\n         infcx.tcx.erase_regions(ty),\n         into_iterator_did,"}]}