{"sha": "dba2ca888ae1b526a166344b4462e8e294fcb6a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYTJjYTg4OGFlMWI1MjZhMTY2MzQ0YjQ0NjJlOGUyOTRmY2I2YTQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-09-07T12:35:02Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-20T13:36:24Z"}, "message": "Sanity check the Expr visitation count", "tree": {"sha": "c1697aa7581b7887a2e8d9eea00976820441aefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1697aa7581b7887a2e8d9eea00976820441aefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dba2ca888ae1b526a166344b4462e8e294fcb6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dba2ca888ae1b526a166344b4462e8e294fcb6a4", "html_url": "https://github.com/rust-lang/rust/commit/dba2ca888ae1b526a166344b4462e8e294fcb6a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dba2ca888ae1b526a166344b4462e8e294fcb6a4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a511e06a5949ed9fbc552c161fcbe0cf17e5e2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a511e06a5949ed9fbc552c161fcbe0cf17e5e2c", "html_url": "https://github.com/rust-lang/rust/commit/3a511e06a5949ed9fbc552c161fcbe0cf17e5e2c"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "9435b28a013b074cc5a0000bddbcdab1b78e55df", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dba2ca888ae1b526a166344b4462e8e294fcb6a4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba2ca888ae1b526a166344b4462e8e294fcb6a4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=dba2ca888ae1b526a166344b4462e8e294fcb6a4", "patch": "@@ -252,6 +252,11 @@ pub struct ScopeTree {\n     /// stores the `Span` of the last one and the number of expressions\n     /// which came before it in a generator body.\n     yield_in_scope: FxHashMap<Scope, (Span, usize)>,\n+\n+    /// The number of visit_expr calls done in the body.\n+    /// Used to sanity check visit_expr call count when\n+    /// calculating geneartor interiors.\n+    body_expr_count: FxHashMap<hir::BodyId, usize>,\n }\n \n #[derive(Debug, Copy, Clone)]\n@@ -619,6 +624,13 @@ impl<'tcx> ScopeTree {\n     pub fn yield_in_scope(&self, scope: Scope) -> Option<(Span, usize)> {\n         self.yield_in_scope.get(&scope).cloned()\n     }\n+\n+    /// Gives the number of expressions visited in a body.\n+    /// Used to sanity check visit_expr call count when\n+    /// calculating geneartor interiors.\n+    pub fn body_expr_count(&self, body_id: hir::BodyId) -> Option<usize> {\n+        self.body_expr_count.get(&body_id).map(|r| *r)\n+    }\n }\n \n /// Records the lifetime of a local variable as `cx.var_parent`\n@@ -1166,6 +1178,10 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n             resolve_local(self, None, Some(&body.value));\n         }\n \n+        if body.is_generator {\n+            self.scope_tree.body_expr_count.insert(body_id, self.expr_count);\n+        }\n+\n         // Restore context we had at the start.\n         self.expr_count = outer_ec;\n         self.cx = outer_cx;"}, {"sha": "fc6ea0ad5b023d2127fbe29490c1fcf63085da82", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dba2ca888ae1b526a166344b4462e8e294fcb6a4/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba2ca888ae1b526a166344b4462e8e294fcb6a4/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=dba2ca888ae1b526a166344b4462e8e294fcb6a4", "patch": "@@ -77,6 +77,10 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n+    // Check that we visited the same amount of expressions and the RegionResolutionVisitor\n+    let region_expr_count = visitor.region_scope_tree.body_expr_count(body_id).unwrap();\n+    assert_eq!(region_expr_count, visitor.expr_count);\n+\n     let mut types: Vec<_> = visitor.types.drain().collect();\n \n     // Sort types by insertion order"}]}