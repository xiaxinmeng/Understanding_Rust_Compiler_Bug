{"sha": "ab83d501a404bede933df8f33e280a7534cc71bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiODNkNTAxYTQwNGJlZGU5MzNkZjhmMzNlMjgwYTc1MzRjYzcxYmY=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-12T21:07:23Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-12T21:07:23Z"}, "message": "Do not issue E0071 if a type error has already been reported", "tree": {"sha": "543bc4c223aaa4454b0b1ef41a58bf2ec71a3b47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543bc4c223aaa4454b0b1ef41a58bf2ec71a3b47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab83d501a404bede933df8f33e280a7534cc71bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab83d501a404bede933df8f33e280a7534cc71bf", "html_url": "https://github.com/rust-lang/rust/commit/ab83d501a404bede933df8f33e280a7534cc71bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab83d501a404bede933df8f33e280a7534cc71bf/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7dbe7a830100c70d59994fd940bf75bb6e39b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dbe7a830100c70d59994fd940bf75bb6e39b39", "html_url": "https://github.com/rust-lang/rust/commit/c7dbe7a830100c70d59994fd940bf75bb6e39b39"}], "stats": {"total": 68, "additions": 52, "deletions": 16}, "files": [{"sha": "a6d6d19762b58dde38260fbbfd5842a6a95d012c", "filename": "compiler/rustc_error_codes/src/error_codes/E0071.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab83d501a404bede933df8f33e280a7534cc71bf/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0071.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab83d501a404bede933df8f33e280a7534cc71bf/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0071.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0071.md?ref=ab83d501a404bede933df8f33e280a7534cc71bf", "patch": "@@ -15,13 +15,13 @@ form of initializer was used.\n For example, the code above can be fixed to:\n \n ```\n-enum Foo {\n-    FirstValue(i32)\n-}\n+type U32 = u32;\n+let t: U32 = 4;\n+```\n \n-fn main() {\n-    let u = Foo::FirstValue(0i32);\n+or:\n \n-    let t = 4;\n-}\n+```\n+struct U32 { value: u32 }\n+let t = U32 { value: 4 };\n ```"}, {"sha": "e74e79fd1bf1a7799caaa99aa717e4feada25581", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ab83d501a404bede933df8f33e280a7534cc71bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab83d501a404bede933df8f33e280a7534cc71bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=ab83d501a404bede933df8f33e280a7534cc71bf", "patch": "@@ -494,15 +494,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             Some((variant, ty))\n         } else {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                path_span,\n-                E0071,\n-                \"expected struct, variant or union type, found {}\",\n-                ty.sort_string(self.tcx)\n-            )\n-            .span_label(path_span, \"not a struct\")\n-            .emit();\n+            match ty.kind() {\n+                ty::Error(_) => {\n+                    // E0071 might be caused by a spelling error, which will have\n+                    // already caused an error message and probably a suggestion\n+                    // elsewhere. Refrain from emitting more unhelpful errors here\n+                    // (issue #88844).\n+                }\n+                _ => {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        path_span,\n+                        E0071,\n+                        \"expected struct, variant or union type, found {}\",\n+                        ty.sort_string(self.tcx)\n+                    )\n+                    .span_label(path_span, \"not a struct\")\n+                    .emit();\n+                }\n+            }\n             None\n         }\n     }"}, {"sha": "116c75aabdbdf4ed02f7322f7e8302c21480852f", "filename": "src/test/ui/typeck/issue-88844.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab83d501a404bede933df8f33e280a7534cc71bf/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab83d501a404bede933df8f33e280a7534cc71bf/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.rs?ref=ab83d501a404bede933df8f33e280a7534cc71bf", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #88844.\n+\n+struct Struct { value: i32 }\n+//~^ NOTE: similarly named struct `Struct` defined here\n+\n+impl Stuct {\n+//~^ ERROR: cannot find type `Stuct` in this scope [E0412]\n+//~| HELP: a struct with a similar name exists\n+    fn new() -> Self {\n+        Self { value: 42 }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "90bba90be346c3ecfadeb8f7cf4802bd4eafccca", "filename": "src/test/ui/typeck/issue-88844.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab83d501a404bede933df8f33e280a7534cc71bf/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab83d501a404bede933df8f33e280a7534cc71bf/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88844.stderr?ref=ab83d501a404bede933df8f33e280a7534cc71bf", "patch": "@@ -0,0 +1,12 @@\n+error[E0412]: cannot find type `Stuct` in this scope\n+  --> $DIR/issue-88844.rs:6:6\n+   |\n+LL | struct Struct { value: i32 }\n+   | ------------- similarly named struct `Struct` defined here\n+...\n+LL | impl Stuct {\n+   |      ^^^^^ help: a struct with a similar name exists: `Struct`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}