{"sha": "e24cc77cd147b710a0ca161acd2e8d6922e067bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGNjNzdjZDE0N2I3MTBhMGNhMTYxYWNkMmU4ZDY5MjJlMDY3YmQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-12T16:13:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-12T16:13:33Z"}, "message": "Fix extract_struct_from_enum_variant not updating record references", "tree": {"sha": "b4d1d3f08783e67785c192a1cb32c2c670abb21a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4d1d3f08783e67785c192a1cb32c2c670abb21a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24cc77cd147b710a0ca161acd2e8d6922e067bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24cc77cd147b710a0ca161acd2e8d6922e067bd", "html_url": "https://github.com/rust-lang/rust/commit/e24cc77cd147b710a0ca161acd2e8d6922e067bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24cc77cd147b710a0ca161acd2e8d6922e067bd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5775b320c4f274c77b38f01b39ea96336f046bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5775b320c4f274c77b38f01b39ea96336f046bb", "html_url": "https://github.com/rust-lang/rust/commit/d5775b320c4f274c77b38f01b39ea96336f046bb"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "38ecf5065fa3296a806254a3901fbf611e91b613", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 59, "deletions": 26, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e24cc77cd147b710a0ca161acd2e8d6922e067bd/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cc77cd147b710a0ca161acd2e8d6922e067bd/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=e24cc77cd147b710a0ca161acd2e8d6922e067bd", "patch": "@@ -5,10 +5,9 @@ use hir::{AsName, EnumVariant, Module, ModuleDef, Name};\n use ide_db::{defs::Definition, search::Reference, RootDatabase};\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n-    algo::find_node_at_offset,\n-    algo::SyntaxRewriter,\n-    ast::{self, edit::IndentLevel, make, ArgListOwner, AstNode, NameOwner, VisibilityOwner},\n-    SourceFile, SyntaxElement,\n+    algo::{find_node_at_offset, SyntaxRewriter},\n+    ast::{self, edit::IndentLevel, make, AstNode, NameOwner, VisibilityOwner},\n+    SourceFile, SyntaxElement, SyntaxNode, T,\n };\n \n use crate::{\n@@ -130,17 +129,17 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &En\n fn insert_import(\n     ctx: &AssistContext,\n     rewriter: &mut SyntaxRewriter,\n-    path: &ast::PathExpr,\n+    scope_node: &SyntaxNode,\n     module: &Module,\n     enum_module_def: &ModuleDef,\n     variant_hir_name: &Name,\n ) -> Option<()> {\n     let db = ctx.db();\n     let mod_path = module.find_use_path(db, enum_module_def.clone());\n-    if let Some(mut mod_path) = mod_path {\n+    if let Some(mut mod_path) = mod_path.filter(|path| path.len() > 1) {\n         mod_path.segments.pop();\n         mod_path.segments.push(variant_hir_name.clone());\n-        let scope = ImportScope::find_insert_use_container(path.syntax(), ctx)?;\n+        let scope = ImportScope::find_insert_use_container(scope_node, ctx)?;\n \n         *rewriter += insert_use(&scope, mod_path_to_ast(&mod_path), ctx.config.insert_use.merge);\n     }\n@@ -204,27 +203,31 @@ fn update_reference(\n     variant_hir_name: &Name,\n     visited_modules_set: &mut FxHashSet<Module>,\n ) -> Option<()> {\n-    let path_expr: ast::PathExpr = find_node_at_offset::<ast::PathExpr>(\n-        source_file.syntax(),\n-        reference.file_range.range.start(),\n-    )?;\n-    let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n-    let list = call.arg_list()?;\n-    let segment = path_expr.path()?.segment()?;\n-    let module = ctx.sema.scope(&path_expr.syntax()).module()?;\n+    let offset = reference.file_range.range.start();\n+    let (segment, expr) = if let Some(path_expr) =\n+        find_node_at_offset::<ast::PathExpr>(source_file.syntax(), offset)\n+    {\n+        // tuple variant\n+        (path_expr.path()?.segment()?, path_expr.syntax().parent()?.clone())\n+    } else if let Some(record_expr) =\n+        find_node_at_offset::<ast::RecordExpr>(source_file.syntax(), offset)\n+    {\n+        // record variant\n+        (record_expr.path()?.segment()?, record_expr.syntax().clone())\n+    } else {\n+        return None;\n+    };\n+\n+    let module = ctx.sema.scope(&expr).module()?;\n     if !visited_modules_set.contains(&module) {\n-        if insert_import(ctx, rewriter, &path_expr, &module, enum_module_def, variant_hir_name)\n-            .is_some()\n+        if insert_import(ctx, rewriter, &expr, &module, enum_module_def, variant_hir_name).is_some()\n         {\n             visited_modules_set.insert(module);\n         }\n     }\n-\n-    let lparen = syntax::SyntaxElement::from(list.l_paren_token()?);\n-    let rparen = syntax::SyntaxElement::from(list.r_paren_token()?);\n-    rewriter.insert_after(&lparen, segment.syntax());\n-    rewriter.insert_after(&lparen, &lparen);\n-    rewriter.insert_before(&rparen, &rparen);\n+    rewriter.insert_after(segment.syntax(), &make::token(T!['(']));\n+    rewriter.insert_after(segment.syntax(), segment.syntax());\n+    rewriter.insert_after(&expr, &make::token(T![')']));\n     Some(())\n }\n \n@@ -345,6 +348,33 @@ fn another_fn() {\n         );\n     }\n \n+    #[test]\n+    fn extract_record_fix_references() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum E {\n+    <|>V { i: i32, j: i32 }\n+}\n+\n+fn f() {\n+    let e = E::V { i: 9, j: 2 };\n+}\n+\"#,\n+            r#\"\n+struct V{ pub i: i32, pub j: i32 }\n+\n+enum E {\n+    V(V)\n+}\n+\n+fn f() {\n+    let e = E::V(V { i: 9, j: 2 });\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_several_files() {\n         check_assist(\n@@ -372,8 +402,6 @@ enum E {\n mod foo;\n \n //- /foo.rs\n-use V;\n-\n use crate::E;\n fn f() {\n     let e = E::V(V(9, 2));\n@@ -384,7 +412,6 @@ fn f() {\n \n     #[test]\n     fn test_several_files_record() {\n-        // FIXME: this should fix the usage as well!\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n@@ -401,13 +428,19 @@ fn f() {\n }\n \"#,\n             r#\"\n+//- /main.rs\n struct V{ pub i: i32, pub j: i32 }\n \n enum E {\n     V(V)\n }\n mod foo;\n \n+//- /foo.rs\n+use crate::E;\n+fn f() {\n+    let e = E::V(V { i: 9, j: 2 });\n+}\n \"#,\n         )\n     }"}]}