{"sha": "1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmI5MzBlZWJlMzlhYTExZDk0ODgxNWI5Y2Q5Yjc5MmE2ZGU4YjQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-26T11:43:37Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-02-26T11:43:37Z"}, "message": "clarify operator precedence", "tree": {"sha": "8a10a6ef3f6a1096abbb510725ba553e1511eae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a10a6ef3f6a1096abbb510725ba553e1511eae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "html_url": "https://github.com/rust-lang/rust/commit/1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f5aa93d47e9077775ad9038970fd4c77abaad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f5aa93d47e9077775ad9038970fd4c77abaad7", "html_url": "https://github.com/rust-lang/rust/commit/46f5aa93d47e9077775ad9038970fd4c77abaad7"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "aa50e7cdf578d5bae60bd9a5ecb2ed36d502faaf", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "patch": "@@ -304,7 +304,7 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n-            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << 8 * self.ntail;\n+            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n                 return;"}, {"sha": "f96bf6c110cec89eab727898ff41b027343aa38e", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "patch": "@@ -997,7 +997,7 @@ impl SpecializedEncoder<IntEncodedWithFixedSize> for opaque::Encoder {\n     fn specialized_encode(&mut self, x: &IntEncodedWithFixedSize) -> Result<(), Self::Error> {\n         let start_pos = self.position();\n         for i in 0..IntEncodedWithFixedSize::ENCODED_SIZE {\n-            ((x.0 >> i * 8) as u8).encode(self)?;\n+            ((x.0 >> (i * 8)) as u8).encode(self)?;\n         }\n         let end_pos = self.position();\n         assert_eq!((end_pos - start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);"}, {"sha": "beb28dd072058fd4a74d0c5d28d71b3196f9b91f", "filename": "src/librustc_data_structures/sip128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/src%2Flibrustc_data_structures%2Fsip128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6b930eebe39aa11d948815b9cd9b792a6de8b4/src%2Flibrustc_data_structures%2Fsip128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsip128.rs?ref=1a6b930eebe39aa11d948815b9cd9b792a6de8b4", "patch": "@@ -274,7 +274,7 @@ impl Hasher for SipHasher128 {\n \n         if self.ntail != 0 {\n             needed = 8 - self.ntail;\n-            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << 8 * self.ntail;\n+            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);\n             if length < needed {\n                 self.ntail += length;\n                 return;"}]}