{"sha": "6dbba4d75d56728a95f84ee978eae3ac84016c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYmJhNGQ3NWQ1NjcyOGE5NWY4NGVlOTc4ZWFlM2FjODQwMTZjNzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-15T17:15:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-15T17:15:33Z"}, "message": "Remove useless wrapper", "tree": {"sha": "de197df47b3e0a5e54f7a595172db6e1a129ab66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de197df47b3e0a5e54f7a595172db6e1a129ab66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dbba4d75d56728a95f84ee978eae3ac84016c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbba4d75d56728a95f84ee978eae3ac84016c73", "html_url": "https://github.com/rust-lang/rust/commit/6dbba4d75d56728a95f84ee978eae3ac84016c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dbba4d75d56728a95f84ee978eae3ac84016c73/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "html_url": "https://github.com/rust-lang/rust/commit/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "8d93edba21806238755d8d1b0442e2f5ccd15d5d", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -2,7 +2,6 @@\n \n use std::mem;\n \n-use algo::find_covering_element;\n use hir::Semantics;\n use ide_db::{\n     base_db::{AnchoredPathBuf, FileId, FileRange},\n@@ -94,11 +93,11 @@ impl<'a> AssistContext<'a> {\n         self.sema.find_node_at_offset_with_descend(self.source_file.syntax(), self.offset())\n     }\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n-        find_covering_element(self.source_file.syntax(), self.frange.range)\n+        self.source_file.syntax().covering_element(self.frange.range)\n     }\n     // FIXME: remove\n     pub(crate) fn covering_node_for_range(&self, range: TextRange) -> SyntaxElement {\n-        find_covering_element(self.source_file.syntax(), range)\n+        self.source_file.syntax().covering_element(range)\n     }\n }\n "}, {"sha": "b1e8eba8564ce3692f0a234495dd9e44b5fc6689", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -4,10 +4,8 @@ use hir::{Local, ScopeDef, Semantics, SemanticsScope, Type};\n use ide_db::base_db::{FilePosition, SourceDatabase};\n use ide_db::{call_info::ActiveParameter, RootDatabase};\n use syntax::{\n-    algo::{find_covering_element, find_node_at_offset},\n-    ast, match_ast, AstNode, NodeOrToken,\n-    SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, TextRange, TextSize,\n+    algo::find_node_at_offset, ast, match_ast, AstNode, NodeOrToken, SyntaxKind::*, SyntaxNode,\n+    SyntaxToken, TextRange, TextSize,\n };\n use test_utils::mark;\n use text_edit::Indel;\n@@ -513,7 +511,7 @@ impl<'a> CompletionContext<'a> {\n }\n \n fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n-    find_covering_element(syntax, range).ancestors().find_map(N::cast)\n+    syntax.covering_element(range).ancestors().find_map(N::cast)\n }\n \n fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {"}, {"sha": "467516eb740b0caf10869b0275cd4d8591c66d4a", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -118,7 +118,7 @@ pub fn expand_hypothetical(\n         parse_macro_with_arg(db, macro_file, Some(std::sync::Arc::new((tt, tmap_1)))).value?;\n     let token_id = macro_def.0.map_id_down(token_id);\n     let range = tmap_2.range_by_token(token_id)?.by_kind(token_to_map.kind())?;\n-    let token = syntax::algo::find_covering_element(&node.syntax_node(), range).into_token()?;\n+    let token = node.syntax_node().covering_element(range).into_token()?;\n     Some((node.syntax_node(), token))\n }\n "}, {"sha": "e388ddacc31dfb75086ddf237ca32b67e7708c27", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -22,7 +22,7 @@ use std::sync::Arc;\n \n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n-    algo::{self, skip_trivia_token},\n+    algo::skip_trivia_token,\n     ast::{self, AstNode},\n     Direction, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n@@ -335,7 +335,7 @@ impl ExpansionInfo {\n \n         let range = self.exp_map.range_by_token(token_id)?.by_kind(token.value.kind())?;\n \n-        let token = algo::find_covering_element(&self.expanded.value, range).into_token()?;\n+        let token = self.expanded.value.covering_element(range).into_token()?;\n \n         Some(self.expanded.with_value(token))\n     }\n@@ -360,8 +360,8 @@ impl ExpansionInfo {\n         };\n \n         let range = token_map.range_by_token(token_id)?.by_kind(token.value.kind())?;\n-        let token = algo::find_covering_element(&tt.value, range + tt.value.text_range().start())\n-            .into_token()?;\n+        let token =\n+            tt.value.covering_element(range + tt.value.text_range().start()).into_token()?;\n         Some((tt.with_value(token), origin))\n     }\n }"}, {"sha": "17a540972e149ed37f5aa0a2688046981722fafc", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -3,7 +3,7 @@ use std::iter::successors;\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n-    algo::{self, find_covering_element, skip_trivia_token},\n+    algo::{self, skip_trivia_token},\n     ast::{self, AstNode, AstToken},\n     Direction, NodeOrToken,\n     SyntaxKind::{self, *},\n@@ -76,7 +76,7 @@ fn try_extend_selection(\n         };\n         return Some(leaf_range);\n     };\n-    let node = match find_covering_element(root, range) {\n+    let node = match root.covering_element(range) {\n         NodeOrToken::Token(token) => {\n             if token.text_range() != range {\n                 return Some(token.text_range());\n@@ -120,7 +120,7 @@ fn extend_tokens_from_range(\n     macro_call: ast::MacroCall,\n     original_range: TextRange,\n ) -> Option<TextRange> {\n-    let src = find_covering_element(&macro_call.syntax(), original_range);\n+    let src = macro_call.syntax().covering_element(original_range);\n     let (first_token, last_token) = match src {\n         NodeOrToken::Node(it) => (it.first_token()?, it.last_token()?),\n         NodeOrToken::Token(it) => (it.clone(), it),"}, {"sha": "981467c8d3c7737399d16d68c05dfe6c84de7309", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -1,7 +1,7 @@\n use assists::utils::extract_trivial_expression;\n use itertools::Itertools;\n use syntax::{\n-    algo::{find_covering_element, non_trivia_sibling},\n+    algo::non_trivia_sibling,\n     ast::{self, AstNode, AstToken},\n     Direction, NodeOrToken, SourceFile,\n     SyntaxKind::{self, USE_TREE, WHITESPACE},\n@@ -31,7 +31,7 @@ pub(crate) fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n         range\n     };\n \n-    let node = match find_covering_element(file.syntax(), range) {\n+    let node = match file.syntax().covering_element(range) {\n         NodeOrToken::Node(node) => node,\n         NodeOrToken::Token(token) => token.parent(),\n     };"}, {"sha": "1d4bac7adca1b62c8eba19f701e0ea3c6afe0c87", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -1,7 +1,7 @@\n use ide_db::base_db::{FileId, SourceDatabase};\n use ide_db::RootDatabase;\n use syntax::{\n-    algo, AstNode, NodeOrToken, SourceFile, SyntaxKind::STRING, SyntaxToken, TextRange, TextSize,\n+    AstNode, NodeOrToken, SourceFile, SyntaxKind::STRING, SyntaxToken, TextRange, TextSize,\n };\n \n // Feature: Show Syntax Tree\n@@ -21,7 +21,7 @@ pub(crate) fn syntax_tree(\n ) -> String {\n     let parse = db.parse(file_id);\n     if let Some(text_range) = text_range {\n-        let node = match algo::find_covering_element(parse.tree().syntax(), text_range) {\n+        let node = match parse.tree().syntax().covering_element(text_range) {\n             NodeOrToken::Node(node) => node,\n             NodeOrToken::Token(token) => {\n                 if let Some(tree) = syntax_tree_for_string(&token, text_range) {"}, {"sha": "1456270d0b7acc0748f25a5ef1e66b63b806cdbd", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -45,7 +45,7 @@ pub fn find_node_at_offset<N: AstNode>(syntax: &SyntaxNode, offset: TextSize) ->\n }\n \n pub fn find_node_at_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n-    find_covering_element(syntax, range).ancestors().find_map(N::cast)\n+    syntax.covering_element(range).ancestors().find_map(N::cast)\n }\n \n /// Skip to next non `trivia` token\n@@ -74,10 +74,6 @@ pub fn non_trivia_sibling(element: SyntaxElement, direction: Direction) -> Optio\n     }\n }\n \n-pub fn find_covering_element(root: &SyntaxNode, range: TextRange) -> SyntaxElement {\n-    root.covering_element(range)\n-}\n-\n pub fn least_common_ancestor(u: &SyntaxNode, v: &SyntaxNode) -> Option<SyntaxNode> {\n     if u == v {\n         return Some(u.clone());"}, {"sha": "76f01084cd99c7e6916cf4ecced94851c3dcb86c", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbba4d75d56728a95f84ee978eae3ac84016c73/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=6dbba4d75d56728a95f84ee978eae3ac84016c73", "patch": "@@ -10,7 +10,6 @@ use parser::Reparser;\n use text_edit::Indel;\n \n use crate::{\n-    algo,\n     parsing::{\n         lexer::{lex_single_syntax_kind, tokenize, Token},\n         text_token_source::TextTokenSource,\n@@ -41,7 +40,7 @@ fn reparse_token<'node>(\n     root: &'node SyntaxNode,\n     edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n-    let prev_token = algo::find_covering_element(root, edit.delete).as_token()?.clone();\n+    let prev_token = root.covering_element(edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n     match prev_token_kind {\n         WHITESPACE | COMMENT | IDENT | STRING => {\n@@ -124,7 +123,7 @@ fn is_contextual_kw(text: &str) -> bool {\n }\n \n fn find_reparsable_node(node: &SyntaxNode, range: TextRange) -> Option<(SyntaxNode, Reparser)> {\n-    let node = algo::find_covering_element(node, range);\n+    let node = node.covering_element(range);\n \n     let mut ancestors = match node {\n         NodeOrToken::Token(it) => it.parent().ancestors(),"}]}