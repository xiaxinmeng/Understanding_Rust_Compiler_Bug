{"sha": "d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "node_id": "C_kwDOAAsO6NoAKGQ2ZjA1YzZhODllN2JiYWFmYzJjYTMwZjg0NWRlNDg4Y2Q1YTg5Nzg", "commit": {"author": {"name": "SabrinaJewson", "email": "sejewson@gmail.com", "date": "2022-03-30T17:47:50Z"}, "committer": {"name": "SabrinaJewson", "email": "sejewson@gmail.com", "date": "2022-03-30T17:47:50Z"}, "message": "Don't warn int-to-char transmutes in const contexts", "tree": {"sha": "1f99d09d92b86183c89801f733da7805ad762d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f99d09d92b86183c89801f733da7805ad762d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEpFrenxYsOeUIs3WAPVQ4/6XwVWQFAmJEl9wTHHNlamV3c29u\nQGdtYWlsLmNvbQAKCRA9VDj/pfBVZBD3D/9wgVqeyNGQcrk6gpNqA6tiBnjg2ZZp\n6wSKEtRdfjRwYESDWiQbnrSGA8EC13yh9bgeJjVtEQi+hoyCYULWdknWAWAEs3pP\nn/jDWogIl1nZpy3AkKRWIqBa1PxNzHFPpyj/rjxgaOD0XzyMQZdAtcudO9/+98gm\n+ambKifPb/4tVZvaGQMWpyH3D5cF0u9DTp/RzHCCRqE7gi0MXrXWwDabPu5s8Ep9\nrKrqLqGb2UhIp856xece+5vJjircyt4zZyth3Dmktv2d95bxxR1/oVvDlTE45e7w\nEHxZB+MTuo9X0mhOOCac1ZTy91pRvKYszm9cWWvH3f1paYwoB8iEYHs6CsGwxkXY\nzojGdtaAJ8i+Oo0FbD8EV4ZOmVGC/YilrVCApcUwa2xzViCCTp0HAs8XTWc6DpLZ\nQC20gFPK23aham3ZfgBjXBR0uSDJiw8USm91Ln5TiMdz+yEZBC3I7TdyHatadgRu\nUEWG4PFuYGtcW/gRllWaOCNv786JppJP9UZ0K4Xf6ZvHyP2QbWq2OQ/E38yzshH9\n6HP2GtDTtQZQnWNk+V/Pi/KWYTbSE3/2NSsHAQKjmFCGBtACtPHNt+VafXY0NRxT\nUWWUnJgcwdfLWYeNIuyk/4uAHJqxosA4dhv6xcRV0qpcEit4ASSFFvnJatxU0TA3\n1T8OUsgkE4f85g==\n=hyDm\n-----END PGP SIGNATURE-----", "payload": "tree 1f99d09d92b86183c89801f733da7805ad762d64\nparent fe7254ff6f9ed485fe3d8b31c97c0beac1102d12\nauthor SabrinaJewson <sejewson@gmail.com> 1648662470 +0100\ncommitter SabrinaJewson <sejewson@gmail.com> 1648662470 +0100\n\nDon't warn int-to-char transmutes in const contexts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "html_url": "https://github.com/rust-lang/rust/commit/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/comments", "author": {"login": "SabrinaJewson", "id": 58880148, "node_id": "MDQ6VXNlcjU4ODgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/58880148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SabrinaJewson", "html_url": "https://github.com/SabrinaJewson", "followers_url": "https://api.github.com/users/SabrinaJewson/followers", "following_url": "https://api.github.com/users/SabrinaJewson/following{/other_user}", "gists_url": "https://api.github.com/users/SabrinaJewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/SabrinaJewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SabrinaJewson/subscriptions", "organizations_url": "https://api.github.com/users/SabrinaJewson/orgs", "repos_url": "https://api.github.com/users/SabrinaJewson/repos", "events_url": "https://api.github.com/users/SabrinaJewson/events{/privacy}", "received_events_url": "https://api.github.com/users/SabrinaJewson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SabrinaJewson", "id": 58880148, "node_id": "MDQ6VXNlcjU4ODgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/58880148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SabrinaJewson", "html_url": "https://github.com/SabrinaJewson", "followers_url": "https://api.github.com/users/SabrinaJewson/followers", "following_url": "https://api.github.com/users/SabrinaJewson/following{/other_user}", "gists_url": "https://api.github.com/users/SabrinaJewson/gists{/gist_id}", "starred_url": "https://api.github.com/users/SabrinaJewson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SabrinaJewson/subscriptions", "organizations_url": "https://api.github.com/users/SabrinaJewson/orgs", "repos_url": "https://api.github.com/users/SabrinaJewson/repos", "events_url": "https://api.github.com/users/SabrinaJewson/events{/privacy}", "received_events_url": "https://api.github.com/users/SabrinaJewson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "html_url": "https://github.com/rust-lang/rust/commit/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "342f23f030cd06fa3bf3c55355f50f92c2ede39e", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "patch": "@@ -410,9 +410,10 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::transmute, def_id);\n             then {\n-                // Avoid suggesting from/to bits and dereferencing raw pointers in const contexts.\n-                // See https://github.com/rust-lang/rust/issues/73736 for progress on making them `const fn`.\n-                // And see https://github.com/rust-lang/rust/issues/51911 for dereferencing raw pointers.\n+                // Avoid suggesting non-const operations in const contexts:\n+                // - from/to bits (https://github.com/rust-lang/rust/issues/73736)\n+                // - dereferencing raw pointers (https://github.com/rust-lang/rust/issues/51911)\n+                // - char conversions (https://github.com/rust-lang/rust/issues/89259)\n                 let const_context = in_constant(cx, e.hir_id);\n \n                 let from_ty = cx.typeck_results().expr_ty_adjusted(arg);\n@@ -427,7 +428,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n                     | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, qpath)\n-                    | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg)\n+                    | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_int_to_bool::check(cx, e, from_ty, to_ty, arg)"}, {"sha": "9e1823c373bfdb4d641536bfd04b10157eda1b1c", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "patch": "@@ -15,9 +15,10 @@ pub(super) fn check<'tcx>(\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n+    const_context: bool,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n-        (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) => {\n+        (ty::Int(ty::IntTy::I32) | ty::Uint(ty::UintTy::U32), &ty::Char) if !const_context => {\n             span_lint_and_then(\n                 cx,\n                 TRANSMUTE_INT_TO_CHAR,"}, {"sha": "54f9727d8ea30b8bf7a75c8027f76a8570906ec3", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "patch": "@@ -73,6 +73,10 @@ fn crosspointer() {\n fn int_to_char() {\n     let _: char = unsafe { std::mem::transmute(0_u32) };\n     let _: char = unsafe { std::mem::transmute(0_i32) };\n+\n+    // These shouldn't warn\n+    const _: char = unsafe { std::mem::transmute(0_u32) };\n+    const _: char = unsafe { std::mem::transmute(0_i32) };\n }\n \n #[warn(clippy::transmute_int_to_bool)]"}, {"sha": "5c60fc2d5115d33b6de3c5fe4d7cb9f8b2250290", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6f05c6a89e7bbaafc2ca30f845de488cd5a8978/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=d6f05c6a89e7bbaafc2ca30f845de488cd5a8978", "patch": "@@ -107,135 +107,135 @@ LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:80:28\n+  --> $DIR/transmute.rs:84:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:86:31\n+  --> $DIR/transmute.rs:90:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:87:31\n+  --> $DIR/transmute.rs:91:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:88:31\n+  --> $DIR/transmute.rs:92:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:89:31\n+  --> $DIR/transmute.rs:93:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:109:30\n+  --> $DIR/transmute.rs:113:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n    |\n    = note: `-D clippy::transmute-num-to-bytes` implied by `-D warnings`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:110:30\n+  --> $DIR/transmute.rs:114:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:111:31\n+  --> $DIR/transmute.rs:115:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:112:30\n+  --> $DIR/transmute.rs:116:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:113:30\n+  --> $DIR/transmute.rs:117:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:114:31\n+  --> $DIR/transmute.rs:118:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `f32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:115:30\n+  --> $DIR/transmute.rs:119:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0.0f32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f32.to_ne_bytes()`\n \n error: transmute from a `f64` to a `[u8; 8]`\n-  --> $DIR/transmute.rs:116:30\n+  --> $DIR/transmute.rs:120:30\n    |\n LL |             let _: [u8; 8] = std::mem::transmute(0.0f64);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0.0f64.to_ne_bytes()`\n \n error: transmute from a `u8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:121:30\n+  --> $DIR/transmute.rs:125:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0u8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u8.to_ne_bytes()`\n \n error: transmute from a `u32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:122:30\n+  --> $DIR/transmute.rs:126:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0u32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u32.to_ne_bytes()`\n \n error: transmute from a `u128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:123:31\n+  --> $DIR/transmute.rs:127:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0u128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0u128.to_ne_bytes()`\n \n error: transmute from a `i8` to a `[u8; 1]`\n-  --> $DIR/transmute.rs:124:30\n+  --> $DIR/transmute.rs:128:30\n    |\n LL |             let _: [u8; 1] = std::mem::transmute(0i8);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i8.to_ne_bytes()`\n \n error: transmute from a `i32` to a `[u8; 4]`\n-  --> $DIR/transmute.rs:125:30\n+  --> $DIR/transmute.rs:129:30\n    |\n LL |             let _: [u8; 4] = std::mem::transmute(0i32);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i32.to_ne_bytes()`\n \n error: transmute from a `i128` to a `[u8; 16]`\n-  --> $DIR/transmute.rs:126:31\n+  --> $DIR/transmute.rs:130:31\n    |\n LL |             let _: [u8; 16] = std::mem::transmute(0i128);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `to_ne_bytes()`: `0i128.to_ne_bytes()`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:134:28\n+  --> $DIR/transmute.rs:138:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:135:32\n+  --> $DIR/transmute.rs:139:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`"}]}