{"sha": "62caa1e5c8555495f76f124a00d853bd615b7147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyY2FhMWU1Yzg1NTU0OTVmNzZmMTI0YTAwZDg1M2JkNjE1YjcxNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T04:31:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T04:31:45Z"}, "message": "auto merge of #6505 : cmr/rust/unsetenv, r=catamorphism", "tree": {"sha": "451ab5891ed236e2b8dc19275012ab9cdf2e1500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451ab5891ed236e2b8dc19275012ab9cdf2e1500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62caa1e5c8555495f76f124a00d853bd615b7147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62caa1e5c8555495f76f124a00d853bd615b7147", "html_url": "https://github.com/rust-lang/rust/commit/62caa1e5c8555495f76f124a00d853bd615b7147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62caa1e5c8555495f76f124a00d853bd615b7147/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6360b4eabb695ad37fae6aa6b589639852c0b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6360b4eabb695ad37fae6aa6b589639852c0b4e", "html_url": "https://github.com/rust-lang/rust/commit/f6360b4eabb695ad37fae6aa6b589639852c0b4e"}, {"sha": "6ef226d5d95ac2248178e85accc52d0161d76540", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef226d5d95ac2248178e85accc52d0161d76540", "html_url": "https://github.com/rust-lang/rust/commit/6ef226d5d95ac2248178e85accc52d0161d76540"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "b97b32330dec1edba1c90a3821360363513d0295", "filename": "src/libcore/os.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/62caa1e5c8555495f76f124a00d853bd615b7147/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62caa1e5c8555495f76f124a00d853bd615b7147/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=62caa1e5c8555495f76f124a00d853bd615b7147", "patch": "@@ -289,6 +289,33 @@ pub fn setenv(n: &str, v: &str) {\n     }\n }\n \n+/// Remove a variable from the environment entirely\n+pub fn unsetenv(n: &str) {\n+    #[cfg(unix)]\n+    fn _unsetenv(n: &str) {\n+        unsafe {\n+            do with_env_lock {\n+                do str::as_c_str(n) |nbuf| {\n+                    libc::funcs::posix01::unistd::unsetenv(nbuf);\n+                }\n+            }\n+        }\n+    }\n+    #[cfg(windows)]\n+    fn _unsetenv(n: &str) {\n+        unsafe {\n+            do with_env_lock {\n+                use os::win32::as_utf16_p;\n+                do as_utf16_p(n) |nbuf| {\n+                    libc::SetEnvironmentVariableW(nbuf, ptr::null());\n+                }\n+            }\n+        }\n+    }\n+\n+    _unsetenv(n);\n+}\n+\n pub fn fdopen(fd: c_int) -> *FILE {\n     unsafe {\n         return do as_c_charp(\"r\") |modebuf| {\n@@ -1412,7 +1439,7 @@ mod tests {\n     use option::Some;\n     use option;\n     use os::{as_c_charp, env, getcwd, getenv, make_absolute, real_args};\n-    use os::{remove_file, setenv};\n+    use os::{remove_file, setenv, unsetenv};\n     use os;\n     use path::Path;\n     use rand::RngUtil;\n@@ -1448,6 +1475,14 @@ mod tests {\n         assert!(getenv(n) == option::Some(~\"VALUE\"));\n     }\n \n+    #[test]\n+    fn test_unsetenv() {\n+        let n = make_rand_name();\n+        setenv(n, ~\"VALUE\");\n+        unsetenv(n);\n+        assert!(getenv(n) == option::None);\n+    }\n+\n     #[test]\n     #[ignore(cfg(windows))]\n     #[ignore]"}]}