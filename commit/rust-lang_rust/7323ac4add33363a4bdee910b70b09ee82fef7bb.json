{"sha": "7323ac4add33363a4bdee910b70b09ee82fef7bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMjNhYzRhZGQzMzM2M2E0YmRlZTkxMGI3MGIwOWVlODJmZWY3YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-09T16:17:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-09T16:17:35Z"}, "message": "Auto merge of #34728 - michaelwoerister:issue34569, r=luqmana\n\ntrans: Make sure that closures only get translated once.\n\nFixes #34569.", "tree": {"sha": "ea4ee8b7adea51944d4c41da71fc6ef7745b89de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4ee8b7adea51944d4c41da71fc6ef7745b89de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7323ac4add33363a4bdee910b70b09ee82fef7bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7323ac4add33363a4bdee910b70b09ee82fef7bb", "html_url": "https://github.com/rust-lang/rust/commit/7323ac4add33363a4bdee910b70b09ee82fef7bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7323ac4add33363a4bdee910b70b09ee82fef7bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459b1a4fbb3a6e564b3ecb56f888498369751894", "url": "https://api.github.com/repos/rust-lang/rust/commits/459b1a4fbb3a6e564b3ecb56f888498369751894", "html_url": "https://github.com/rust-lang/rust/commit/459b1a4fbb3a6e564b3ecb56f888498369751894"}, {"sha": "b732cf46f8a238b97bcb383594047cf7f2c9c924", "url": "https://api.github.com/repos/rust-lang/rust/commits/b732cf46f8a238b97bcb383594047cf7f2c9c924", "html_url": "https://github.com/rust-lang/rust/commit/b732cf46f8a238b97bcb383594047cf7f2c9c924"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "90443d9ec4f7067b0406ec02db37d4ab974e0f39", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 48, "deletions": 40, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7323ac4add33363a4bdee910b70b09ee82fef7bb/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7323ac4add33363a4bdee910b70b09ee82fef7bb/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=7323ac4add33363a4bdee910b70b09ee82fef7bb", "patch": "@@ -169,14 +169,14 @@ fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }));\n     let llfn = declare::declare_fn(ccx, &symbol, function_type);\n \n-    // set an inline hint for all closures\n-    attributes::inline(llfn, attributes::InlineAttr::Hint);\n     attributes::set_frame_pointer_elimination(ccx, llfn);\n \n     debug!(\"get_or_create_declaration_if_closure(): inserting new \\\n             closure {:?}: {:?}\",\n            instance, Value(llfn));\n-    ccx.instances().borrow_mut().insert(instance, llfn);\n+\n+    // NOTE: We do *not* store llfn in the ccx.instances() map here,\n+    //       that is only done, when the closures body is translated.\n \n     llfn\n }\n@@ -197,8 +197,8 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n     // (*) Note that in the case of inlined functions, the `closure_def_id` will be the\n     // defid of the closure in its original crate, whereas `id` will be the id of the local\n     // inlined copy.\n-\n-    let param_substs = closure_substs.func_substs;\n+    debug!(\"trans_closure_expr(id={:?}, closure_def_id={:?}, closure_substs={:?})\",\n+           id, closure_def_id, closure_substs);\n \n     let ccx = match dest {\n         Dest::SaveIn(bcx, _) => bcx.ccx(),\n@@ -207,41 +207,49 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n     let tcx = ccx.tcx();\n     let _icx = push_ctxt(\"closure::trans_closure_expr\");\n \n-    debug!(\"trans_closure_expr(id={:?}, closure_def_id={:?}, closure_substs={:?})\",\n-           id, closure_def_id, closure_substs);\n-\n-    let llfn = get_or_create_closure_declaration(ccx, closure_def_id, closure_substs);\n-    llvm::SetLinkage(llfn, llvm::WeakODRLinkage);\n-    llvm::SetUniqueComdat(ccx.llmod(), llfn);\n-\n-    // Get the type of this closure. Use the current `param_substs` as\n-    // the closure substitutions. This makes sense because the closure\n-    // takes the same set of type arguments as the enclosing fn, and\n-    // this function (`trans_closure`) is invoked at the point\n-    // of the closure expression.\n-\n-    let sig = &tcx.closure_type(closure_def_id, closure_substs).sig;\n-    let sig = tcx.erase_late_bound_regions(sig);\n-    let sig = tcx.normalize_associated_type(&sig);\n-\n-    let closure_type = tcx.mk_closure_from_closure_substs(closure_def_id,\n-                                                          closure_substs);\n-    let sig = ty::FnSig {\n-        inputs: Some(get_self_type(tcx, closure_def_id, closure_type))\n-                    .into_iter().chain(sig.inputs).collect(),\n-        output: sig.output,\n-        variadic: false\n-    };\n-\n-    trans_closure(ccx,\n-                  decl,\n-                  body,\n-                  llfn,\n-                  Instance::new(closure_def_id, param_substs),\n-                  id,\n-                  &sig,\n-                  Abi::RustCall,\n-                  ClosureEnv::Closure(closure_def_id, id));\n+    let param_substs = closure_substs.func_substs;\n+    let instance = Instance::new(closure_def_id, param_substs);\n+\n+    // If we have not done so yet, translate this closure's body\n+    if  !ccx.instances().borrow().contains_key(&instance) {\n+        let llfn = get_or_create_closure_declaration(ccx, closure_def_id, closure_substs);\n+        llvm::SetLinkage(llfn, llvm::WeakODRLinkage);\n+        llvm::SetUniqueComdat(ccx.llmod(), llfn);\n+\n+        // set an inline hint for all closures\n+        attributes::inline(llfn, attributes::InlineAttr::Hint);\n+\n+        // Get the type of this closure. Use the current `param_substs` as\n+        // the closure substitutions. This makes sense because the closure\n+        // takes the same set of type arguments as the enclosing fn, and\n+        // this function (`trans_closure`) is invoked at the point\n+        // of the closure expression.\n+\n+        let sig = &tcx.closure_type(closure_def_id, closure_substs).sig;\n+        let sig = tcx.erase_late_bound_regions(sig);\n+        let sig = tcx.normalize_associated_type(&sig);\n+\n+        let closure_type = tcx.mk_closure_from_closure_substs(closure_def_id,\n+                                                              closure_substs);\n+        let sig = ty::FnSig {\n+            inputs: Some(get_self_type(tcx, closure_def_id, closure_type))\n+                        .into_iter().chain(sig.inputs).collect(),\n+            output: sig.output,\n+            variadic: false\n+        };\n+\n+        trans_closure(ccx,\n+                      decl,\n+                      body,\n+                      llfn,\n+                      Instance::new(closure_def_id, param_substs),\n+                      id,\n+                      &sig,\n+                      Abi::RustCall,\n+                      ClosureEnv::Closure(closure_def_id, id));\n+\n+        ccx.instances().borrow_mut().insert(instance, llfn);\n+    }\n \n     // Don't hoist this to the top of the function. It's perfectly legitimate\n     // to have a zero-size closure (in which case dest will be `Ignore`) and"}, {"sha": "41d02e96cc2ed0f73fa302e189db312ebcc90b9c", "filename": "src/test/run-pass/issue34569.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7323ac4add33363a4bdee910b70b09ee82fef7bb/src%2Ftest%2Frun-pass%2Fissue34569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7323ac4add33363a4bdee910b70b09ee82fef7bb/src%2Ftest%2Frun-pass%2Fissue34569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue34569.rs?ref=7323ac4add33363a4bdee910b70b09ee82fef7bb", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-g\n+\n+// In this test we just want to make sure that the code below does not lead to\n+// a debuginfo verification assertion during compilation. This was caused by the\n+// closure in the guard being translated twice due to how match expressions are\n+// handled.\n+//\n+// See https://github.com/rust-lang/rust/issues/34569 for details.\n+\n+fn main() {\n+    match 0 {\n+        e if (|| { e == 0 })() => {},\n+        1 => {},\n+        _ => {}\n+    }\n+}"}]}