{"sha": "141f79f8440229f705f47f06c47b46a44d65584b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MWY3OWY4NDQwMjI5ZjcwNWY0N2YwNmM0N2I0NmE0NGQ2NTU4NGI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-02T17:07:12Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-02T17:07:12Z"}, "message": "Rustup", "tree": {"sha": "c26cd5be37da3c7e81c6784181aa4277fd5cd362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c26cd5be37da3c7e81c6784181aa4277fd5cd362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/141f79f8440229f705f47f06c47b46a44d65584b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/141f79f8440229f705f47f06c47b46a44d65584b", "html_url": "https://github.com/rust-lang/rust/commit/141f79f8440229f705f47f06c47b46a44d65584b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/141f79f8440229f705f47f06c47b46a44d65584b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41972f89dcb99819191ffbf2381430e63e9d916d", "url": "https://api.github.com/repos/rust-lang/rust/commits/41972f89dcb99819191ffbf2381430e63e9d916d", "html_url": "https://github.com/rust-lang/rust/commit/41972f89dcb99819191ffbf2381430e63e9d916d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9a0263f2f68c2a2e6cf0b958e44989954cb9fac4", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=141f79f8440229f705f47f06c47b46a44d65584b", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n \n impl EnumGlobUse {\n     fn lint_item(&self, cx: &LateContext, item: &Item) {\n-        if item.vis == Visibility::Public {\n+        if item.vis.node == VisibilityKind::Public {\n             return; // re-exports are fine\n         }\n         if let ItemUse(ref path, UseKind::Glob) = item.node {"}, {"sha": "1d1d0ef8faa1d879be5356b5b622fe16946e5502", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=141f79f8440229f705f47f06c47b46a44d65584b", "patch": "@@ -840,7 +840,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             .iter()\n                             .any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n                         then {\n-                            let lint = if item.vis == hir::Visibility::Public {\n+                            let lint = if item.vis.node == hir::VisibilityKind::Public {\n                                 WRONG_PUB_SELF_CONVENTION\n                             } else {\n                                 WRONG_SELF_CONVENTION"}, {"sha": "ccc4c9df6e7feb986f65efd1803e11f185f6f86c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=141f79f8440229f705f47f06c47b46a44d65584b", "patch": "@@ -51,14 +51,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         println!(\"impl item `{}`\", item.ident.name);\n-        match item.vis {\n-            hir::Visibility::Public => println!(\"public\"),\n-            hir::Visibility::Crate(_) => println!(\"visible crate wide\"),\n-            hir::Visibility::Restricted { ref path, .. } => println!(\n+        match item.vis.node {\n+            hir::VisibilityKind::Public => println!(\"public\"),\n+            hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n+            hir::VisibilityKind::Restricted { ref path, .. } => println!(\n                 \"visible in module `{}`\",\n                 print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n             ),\n-            hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n+            hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n         if item.defaultness.is_default() {\n             println!(\"default\");\n@@ -343,14 +343,14 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n fn print_item(cx: &LateContext, item: &hir::Item) {\n     let did = cx.tcx.hir.local_def_id(item.id);\n     println!(\"item `{}`\", item.name);\n-    match item.vis {\n-        hir::Visibility::Public => println!(\"public\"),\n-        hir::Visibility::Crate(_) => println!(\"visible crate wide\"),\n-        hir::Visibility::Restricted { ref path, .. } => println!(\n+    match item.vis.node {\n+        hir::VisibilityKind::Public => println!(\"public\"),\n+        hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n+        hir::VisibilityKind::Restricted { ref path, .. } => println!(\n             \"visible in module `{}`\",\n             print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n         ),\n-        hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n+        hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n     }\n     match item.node {\n         hir::ItemExternCrate(ref _renamed_from) => {"}, {"sha": "f0e3961600c108d805ab3145f583b2655fca15d4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/141f79f8440229f705f47f06c47b46a44d65584b/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=141f79f8440229f705f47f06c47b46a44d65584b", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n         if let ItemStatic(ref ty, MutImmutable, body_id) = item.node {\n             if is_lint_ref_type(ty) {\n                 self.declared_lints.insert(item.name, item.span);\n-            } else if is_lint_array_type(ty) && item.vis == Visibility::Inherited && item.name == \"ARRAY\" {\n+            } else if is_lint_array_type(ty) && item.vis.node == VisibilityKind::Inherited && item.name == \"ARRAY\" {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,\n                     cx,"}]}