{"sha": "a5164605bc3b572cf2281ce81ad5339fd6249aea", "node_id": "C_kwDOAAsO6NoAKGE1MTY0NjA1YmMzYjU3MmNmMjI4MWNlODFhZDUzMzlmZDYyNDlhZWE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-08T12:50:27Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-02-08T18:11:14Z"}, "message": "correctly update goals in the cache", "tree": {"sha": "00963e0136d08801703296005c1398da1169021d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00963e0136d08801703296005c1398da1169021d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5164605bc3b572cf2281ce81ad5339fd6249aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5164605bc3b572cf2281ce81ad5339fd6249aea", "html_url": "https://github.com/rust-lang/rust/commit/a5164605bc3b572cf2281ce81ad5339fd6249aea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5164605bc3b572cf2281ce81ad5339fd6249aea/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "html_url": "https://github.com/rust-lang/rust/commit/6eb9f2dd6752f591906281d8aa5e16a8c51a8801"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "a2ca4bc189c87faae28f66fa694633ab1ade0125", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5164605bc3b572cf2281ce81ad5339fd6249aea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5164605bc3b572cf2281ce81ad5339fd6249aea/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=a5164605bc3b572cf2281ce81ad5339fd6249aea", "patch": "@@ -7,7 +7,7 @@ use cache::ProvisionalCache;\n use overflow::OverflowData;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::TyCtxt;\n-use std::collections::hash_map::Entry;\n+use std::{collections::hash_map::Entry, mem};\n \n rustc_index::newtype_index! {\n     pub struct StackDepth {}\n@@ -134,12 +134,15 @@ impl<'tcx> SearchGraph<'tcx> {\n         let provisional_entry_index = *cache.lookup_table.get(&goal).unwrap();\n         let provisional_entry = &mut cache.entries[provisional_entry_index];\n         let depth = provisional_entry.depth;\n+        // We eagerly update the response in the cache here. If we have to reevaluate\n+        // this goal we use the new response when hitting a cycle, and we definitely\n+        // want to access the final response whenever we look at the cache.\n+        let prev_response = mem::replace(&mut provisional_entry.response, response);\n+\n         // Was the current goal the root of a cycle and was the provisional response\n         // different from the final one.\n-        if has_been_used && provisional_entry.response != response {\n-            // If so, update the provisional reponse for this goal...\n-            provisional_entry.response = response;\n-            // ...remove all entries whose result depends on this goal\n+        if has_been_used && prev_response != response {\n+            // If so, remove all entries whose result depends on this goal\n             // from the provisional cache...\n             //\n             // That's not completely correct, as a nested goal can also"}]}