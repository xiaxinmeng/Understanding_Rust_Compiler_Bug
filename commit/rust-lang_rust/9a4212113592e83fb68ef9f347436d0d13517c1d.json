{"sha": "9a4212113592e83fb68ef9f347436d0d13517c1d", "node_id": "C_kwDOAAsO6NoAKDlhNDIxMjExMzU5MmU4M2ZiNjhlZjlmMzQ3NDM2ZDBkMTM1MTdjMWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-16T17:59:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-16T17:59:29Z"}, "message": "Rollup merge of #93962 - joboet:branchless_slice_ord, r=Mark-Simulacrum\n\nMake [u8]::cmp implementation branchless\n\nThe current implementation generates rather ugly assembly code, branching when the common parts are equal. By performing the comparison of the lengths upfront using a subtraction, the assembly gets much prettier: https://godbolt.org/z/4e5fnEKGd.\n\nThis will probably not impact speed too much, as the expensive part is in most cases the `memcmp`, but it sure looks better (I'm porting a sorting algorithm currently, and that branch just bothered me).", "tree": {"sha": "7a1cc369ed510d6e2d68caaf5809ac753242ce66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a1cc369ed510d6e2d68caaf5809ac753242ce66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4212113592e83fb68ef9f347436d0d13517c1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDTuBCRBK7hj4Ov3rIwAA3Q8IAFllfYJFdLg/3Vb437Lm+d25\n34PNpIsIklilQhcCN1bAiKVQWdjMWhXpM/u6PfeHmKAbuAUkXzVSBayUZwIb9Px8\nrlNbYfkpQ3qFtRZ2pO0K0l5XnH/uKVAIgplOLM+7OBO474sqNWBabGW7JfMubVbQ\nazDksh/qU6kX4tMEcBxBFKjLMjV298om83cbkoa+d/q8bBwZcmEaq4tf3xg/h+mj\nuM2TXTiWj/XM0sxh0YgL1aZuZUV/ps9/HCit132DY6CMNhVSmwPsh/kepHGt/EaL\nhHlMKJ05ed0YHaFZH4GjCj4QINPsw1bxIA+hH9ODyE1VBINYLV6J9QTb6ozAF9g=\n=Vmxi\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a1cc369ed510d6e2d68caaf5809ac753242ce66\nparent 01f0da2373183482148deee18e35fcad202d045e\nparent 3960ce6ec5222d77a5aa1681eca36f2a59c62c1b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645034369 +0100\ncommitter GitHub <noreply@github.com> 1645034369 +0100\n\nRollup merge of #93962 - joboet:branchless_slice_ord, r=Mark-Simulacrum\n\nMake [u8]::cmp implementation branchless\n\nThe current implementation generates rather ugly assembly code, branching when the common parts are equal. By performing the comparison of the lengths upfront using a subtraction, the assembly gets much prettier: https://godbolt.org/z/4e5fnEKGd.\n\nThis will probably not impact speed too much, as the expensive part is in most cases the `memcmp`, but it sure looks better (I'm porting a sorting algorithm currently, and that branch just bothered me).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4212113592e83fb68ef9f347436d0d13517c1d", "html_url": "https://github.com/rust-lang/rust/commit/9a4212113592e83fb68ef9f347436d0d13517c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4212113592e83fb68ef9f347436d0d13517c1d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f0da2373183482148deee18e35fcad202d045e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f0da2373183482148deee18e35fcad202d045e", "html_url": "https://github.com/rust-lang/rust/commit/01f0da2373183482148deee18e35fcad202d045e"}, {"sha": "3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b", "html_url": "https://github.com/rust-lang/rust/commit/3960ce6ec5222d77a5aa1681eca36f2a59c62c1b"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "27c6b6f5bc02f474a8954a54c53de4f7f6347ed9", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a4212113592e83fb68ef9f347436d0d13517c1d/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4212113592e83fb68ef9f347436d0d13517c1d/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=9a4212113592e83fb68ef9f347436d0d13517c1d", "patch": "@@ -1,7 +1,6 @@\n //! Comparison traits for `[T]`.\n \n-use crate::cmp;\n-use crate::cmp::Ordering::{self, Greater, Less};\n+use crate::cmp::{self, Ordering};\n use crate::mem;\n \n use super::from_raw_parts;\n@@ -189,18 +188,18 @@ impl<A: Ord> SliceOrd for A {\n impl SliceOrd for u8 {\n     #[inline]\n     fn compare(left: &[Self], right: &[Self]) -> Ordering {\n-        let order =\n-            // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.\n-            // We use the minimum of both lengths which guarantees that both regions are\n-            // valid for reads in that interval.\n-            unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };\n+        // Since the length of a slice is always less than or equal to isize::MAX, this never underflows.\n+        let diff = left.len() as isize - right.len() as isize;\n+        // This comparison gets optimized away (on x86_64 and ARM) because the subtraction updates flags.\n+        let len = if left.len() < right.len() { left.len() } else { right.len() };\n+        // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.\n+        // We use the minimum of both lengths which guarantees that both regions are\n+        // valid for reads in that interval.\n+        let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len) as isize };\n         if order == 0 {\n-            left.len().cmp(&right.len())\n-        } else if order < 0 {\n-            Less\n-        } else {\n-            Greater\n+            order = diff;\n         }\n+        order.cmp(&0)\n     }\n }\n "}]}