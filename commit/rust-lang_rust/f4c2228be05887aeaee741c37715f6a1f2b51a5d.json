{"sha": "f4c2228be05887aeaee741c37715f6a1f2b51a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YzIyMjhiZTA1ODg3YWVhZWU3NDFjMzc3MTVmNmExZjJiNTFhNWQ=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-04-07T13:45:10Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-04-07T13:49:43Z"}, "message": "Check casts from float", "tree": {"sha": "03b9f53fe34211ba555adc998dea901479a5fcdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03b9f53fe34211ba555adc998dea901479a5fcdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4c2228be05887aeaee741c37715f6a1f2b51a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c2228be05887aeaee741c37715f6a1f2b51a5d", "html_url": "https://github.com/rust-lang/rust/commit/f4c2228be05887aeaee741c37715f6a1f2b51a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4c2228be05887aeaee741c37715f6a1f2b51a5d/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7529afa66c68d33944e68298e78f6203f92699", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7529afa66c68d33944e68298e78f6203f92699", "html_url": "https://github.com/rust-lang/rust/commit/da7529afa66c68d33944e68298e78f6203f92699"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "b7aebff9ac0960bab180cf34412717ae02f8a863", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4c2228be05887aeaee741c37715f6a1f2b51a5d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c2228be05887aeaee741c37715f6a1f2b51a5d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=f4c2228be05887aeaee741c37715f6a1f2b51a5d", "patch": "@@ -94,9 +94,11 @@ pub fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n     let t_e_is_c_enum = ty::type_is_c_like_enum(fcx.tcx(), t_e);\n \n     let t_1_is_scalar = ty::type_is_scalar(t_1);\n+    let t_1_is_integral = ty::type_is_integral(t_1);\n     let t_1_is_char = ty::type_is_char(t_1);\n     let t_1_is_bare_fn = ty::type_is_bare_fn(t_1);\n     let t_1_is_float = ty::type_is_floating_point(t_1);\n+    let t_1_is_c_enum = ty::type_is_c_like_enum(fcx.tcx(), t_1);\n \n     // casts to scalars other than `char` and `bare fn` are trivial\n     let t_1_is_trivial = t_1_is_scalar && !t_1_is_char && !t_1_is_bare_fn;\n@@ -113,6 +115,10 @@ pub fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n     } else if t_1.sty == ty::ty_bool {\n         span_err!(fcx.tcx().sess, span, E0054,\n                   \"cannot cast as `bool`, compare with zero instead\");\n+    } else if t_e_is_float && (t_1_is_scalar || t_1_is_c_enum) && !(\n+        t_1_is_integral || t_1_is_float) {\n+        // Casts from float must go through an integer\n+        cast_through_integer_err(fcx, span, t_1, t_e)\n     } else if t_1_is_float && (t_e_is_scalar || t_e_is_c_enum) && !(\n         t_e_is_integral || t_e_is_float || t_e.sty == ty::ty_bool) {\n         // Casts to float must go through an integer or boolean"}, {"sha": "b4246f2ed87f3009e181b2a501f31cd8e42e4d80", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4c2228be05887aeaee741c37715f6a1f2b51a5d/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4c2228be05887aeaee741c37715f6a1f2b51a5d/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=f4c2228be05887aeaee741c37715f6a1f2b51a5d", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME: #13993\n-// error-pattern:unsupported cast\n+// error-pattern:illegal cast\n+\n+#![feature(libc)]\n \n extern crate libc;\n "}]}