{"sha": "1fab03e90810d2290e8632e99f36f553fc717817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWIwM2U5MDgxMGQyMjkwZTg2MzJlOTlmMzZmNTUzZmM3MTc4MTc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-30T18:02:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-01T12:20:33Z"}, "message": "Move lint levels machanism in librustc_lint.", "tree": {"sha": "cb67b6000783286e304b54d5e07e8fc3fc79a997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb67b6000783286e304b54d5e07e8fc3fc79a997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fab03e90810d2290e8632e99f36f553fc717817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fab03e90810d2290e8632e99f36f553fc717817", "html_url": "https://github.com/rust-lang/rust/commit/1fab03e90810d2290e8632e99f36f553fc717817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fab03e90810d2290e8632e99f36f553fc717817/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96180ff655dc10bc03bce3fb630f6d16cde71398", "url": "https://api.github.com/repos/rust-lang/rust/commits/96180ff655dc10bc03bce3fb630f6d16cde71398", "html_url": "https://github.com/rust-lang/rust/commit/96180ff655dc10bc03bce3fb630f6d16cde71398"}], "stats": {"total": 251, "additions": 129, "deletions": 122}, "files": [{"sha": "97211f7082457b8c0d229ab2b8a7c05a946b758b", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=1fab03e90810d2290e8632e99f36f553fc717817", "patch": "@@ -155,7 +155,7 @@ pub struct LintLevelsBuilder<'a> {\n \n pub struct BuilderPush {\n     prev: u32,\n-    pub(super) changed: bool,\n+    pub changed: bool,\n }\n \n impl<'a> LintLevelsBuilder<'a> {"}, {"sha": "31f3f0d1737e26ccbc7ee38856beecee66fab9af", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 120, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=1fab03e90810d2290e8632e99f36f553fc717817", "patch": "@@ -24,11 +24,8 @@ pub use self::LintSource::*;\n use rustc_data_structures::sync;\n \n use crate::hir;\n-use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n-use crate::hir::intravisit;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::session::{DiagnosticMessageId, Session};\n-use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -375,7 +372,7 @@ mod context;\n pub mod internal;\n mod levels;\n \n-pub use self::levels::{LintLevelMap, LintLevelSets};\n+pub use self::levels::{LintLevelMap, LintLevelSets, LintLevelsBuilder};\n \n #[derive(Default)]\n pub struct LintBuffer {\n@@ -563,122 +560,6 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n-fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-    let store = &tcx.lint_store;\n-    let mut builder = LintLevelMapBuilder {\n-        levels: LintLevelSets::builder(tcx.sess, false, &store),\n-        tcx: tcx,\n-        store: store,\n-    };\n-    let krate = tcx.hir().krate();\n-\n-    let push = builder.levels.push(&krate.attrs, &store);\n-    builder.levels.register_id(hir::CRATE_HIR_ID);\n-    for macro_def in krate.exported_macros {\n-        builder.levels.register_id(macro_def.hir_id);\n-    }\n-    intravisit::walk_crate(&mut builder, krate);\n-    builder.levels.pop(push);\n-\n-    tcx.arena.alloc(builder.levels.build_map())\n-}\n-\n-struct LintLevelMapBuilder<'a, 'tcx> {\n-    levels: levels::LintLevelsBuilder<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n-    store: &'a LintStore,\n-}\n-\n-impl LintLevelMapBuilder<'_, '_> {\n-    fn with_lint_attrs<F>(&mut self, id: hir::HirId, attrs: &[ast::Attribute], f: F)\n-    where\n-        F: FnOnce(&mut Self),\n-    {\n-        let push = self.levels.push(attrs, self.store);\n-        if push.changed {\n-            self.levels.register_id(id);\n-        }\n-        f(self);\n-        self.levels.pop(push);\n-    }\n-}\n-\n-impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-        intravisit::NestedVisitorMap::All(&self.tcx.hir())\n-    }\n-\n-    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.with_lint_attrs(param.hir_id, &param.attrs, |builder| {\n-            intravisit::walk_param(builder, param);\n-        });\n-    }\n-\n-    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n-            intravisit::walk_item(builder, it);\n-        });\n-    }\n-\n-    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n-        self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n-            intravisit::walk_foreign_item(builder, it);\n-        })\n-    }\n-\n-    fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        self.with_lint_attrs(e.hir_id, &e.attrs, |builder| {\n-            intravisit::walk_expr(builder, e);\n-        })\n-    }\n-\n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n-        self.with_lint_attrs(s.hir_id, &s.attrs, |builder| {\n-            intravisit::walk_struct_field(builder, s);\n-        })\n-    }\n-\n-    fn visit_variant(\n-        &mut self,\n-        v: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-    ) {\n-        self.with_lint_attrs(v.id, &v.attrs, |builder| {\n-            intravisit::walk_variant(builder, v, g, item_id);\n-        })\n-    }\n-\n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n-        self.with_lint_attrs(l.hir_id, &l.attrs, |builder| {\n-            intravisit::walk_local(builder, l);\n-        })\n-    }\n-\n-    fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {\n-        self.with_lint_attrs(a.hir_id, &a.attrs, |builder| {\n-            intravisit::walk_arm(builder, a);\n-        })\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.with_lint_attrs(trait_item.hir_id, &trait_item.attrs, |builder| {\n-            intravisit::walk_trait_item(builder, trait_item);\n-        });\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.with_lint_attrs(impl_item.hir_id, &impl_item.attrs, |builder| {\n-            intravisit::walk_impl_item(builder, impl_item);\n-        });\n-    }\n-}\n-\n-pub fn provide(providers: &mut Providers<'_>) {\n-    providers.lint_levels = lint_levels;\n-}\n-\n /// Returns whether `span` originates in a foreign crate's external macro.\n ///\n /// This is used to test whether a lint should not even begin to figure out whether it should"}, {"sha": "22dc0b2de8bf0eb812534ec17b82485d48d05125", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=1fab03e90810d2290e8632e99f36f553fc717817", "patch": "@@ -692,7 +692,6 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_resolve::provide(providers);\n     rustc_traits::provide(providers);\n     rustc_metadata::provide(providers);\n-    lint::provide(providers);\n     rustc_lint::provide(providers);\n     rustc_codegen_utils::provide(providers);\n     rustc_codegen_ssa::provide(providers);"}, {"sha": "c148d39c80c513a11e9e03fffa97208e5d782a7e", "filename": "src/librustc_lint/levels.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=1fab03e90810d2290e8632e99f36f553fc717817", "patch": "@@ -0,0 +1,125 @@\n+use rustc::hir;\n+use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc::hir::intravisit;\n+use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n+use syntax::ast;\n+\n+pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n+\n+fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+    let store = &tcx.lint_store;\n+    let mut builder = LintLevelMapBuilder {\n+        levels: LintLevelSets::builder(tcx.sess, false, &store),\n+        tcx: tcx,\n+        store: store,\n+    };\n+    let krate = tcx.hir().krate();\n+\n+    let push = builder.levels.push(&krate.attrs, &store);\n+    builder.levels.register_id(hir::CRATE_HIR_ID);\n+    for macro_def in krate.exported_macros {\n+        builder.levels.register_id(macro_def.hir_id);\n+    }\n+    intravisit::walk_crate(&mut builder, krate);\n+    builder.levels.pop(push);\n+\n+    tcx.arena.alloc(builder.levels.build_map())\n+}\n+\n+struct LintLevelMapBuilder<'a, 'tcx> {\n+    levels: LintLevelsBuilder<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    store: &'a LintStore,\n+}\n+\n+impl LintLevelMapBuilder<'_, '_> {\n+    fn with_lint_attrs<F>(&mut self, id: hir::HirId, attrs: &[ast::Attribute], f: F)\n+    where\n+        F: FnOnce(&mut Self),\n+    {\n+        let push = self.levels.push(attrs, self.store);\n+        if push.changed {\n+            self.levels.register_id(id);\n+        }\n+        f(self);\n+        self.levels.pop(push);\n+    }\n+}\n+\n+impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+    }\n+\n+    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        self.with_lint_attrs(param.hir_id, &param.attrs, |builder| {\n+            intravisit::walk_param(builder, param);\n+        });\n+    }\n+\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n+        self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n+            intravisit::walk_item(builder, it);\n+        });\n+    }\n+\n+    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n+        self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n+            intravisit::walk_foreign_item(builder, it);\n+        })\n+    }\n+\n+    fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n+        self.with_lint_attrs(e.hir_id, &e.attrs, |builder| {\n+            intravisit::walk_expr(builder, e);\n+        })\n+    }\n+\n+    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n+        self.with_lint_attrs(s.hir_id, &s.attrs, |builder| {\n+            intravisit::walk_struct_field(builder, s);\n+        })\n+    }\n+\n+    fn visit_variant(\n+        &mut self,\n+        v: &'tcx hir::Variant<'tcx>,\n+        g: &'tcx hir::Generics<'tcx>,\n+        item_id: hir::HirId,\n+    ) {\n+        self.with_lint_attrs(v.id, &v.attrs, |builder| {\n+            intravisit::walk_variant(builder, v, g, item_id);\n+        })\n+    }\n+\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n+        self.with_lint_attrs(l.hir_id, &l.attrs, |builder| {\n+            intravisit::walk_local(builder, l);\n+        })\n+    }\n+\n+    fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {\n+        self.with_lint_attrs(a.hir_id, &a.attrs, |builder| {\n+            intravisit::walk_arm(builder, a);\n+        })\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n+        self.with_lint_attrs(trait_item.hir_id, &trait_item.attrs, |builder| {\n+            intravisit::walk_trait_item(builder, trait_item);\n+        });\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n+        self.with_lint_attrs(impl_item.hir_id, &impl_item.attrs, |builder| {\n+            intravisit::walk_impl_item(builder, impl_item);\n+        });\n+    }\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    providers.lint_levels = lint_levels;\n+}"}, {"sha": "2a3b90f8c93b41f0e14f56556e3b4c1dab219fd6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fab03e90810d2290e8632e99f36f553fc717817/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1fab03e90810d2290e8632e99f36f553fc717817", "patch": "@@ -26,6 +26,7 @@ mod array_into_iter;\n pub mod builtin;\n mod early;\n mod late;\n+mod levels;\n mod non_ascii_idents;\n mod nonstandard_style;\n mod redundant_semicolon;\n@@ -63,6 +64,7 @@ pub use early::check_ast_crate;\n pub use late::check_crate;\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    levels::provide(providers);\n     *providers = Providers { lint_mod, ..*providers };\n }\n "}]}