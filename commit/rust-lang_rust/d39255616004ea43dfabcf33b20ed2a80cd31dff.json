{"sha": "d39255616004ea43dfabcf33b20ed2a80cd31dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTI1NTYxNjAwNGVhNDNkZmFiY2YzM2IyMGVkMmE4MGNkMzFkZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-09T08:15:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-09T08:15:31Z"}, "message": "std: Fix perf of local allocations in newsched\n\nMostly optimizing TLS accesses to bring local heap allocation performance\ncloser to that of oldsched. It's not completely at parity but removing the\nbranches involved in supporting oldsched and optimizing pthread_get/setspecific\nto instead use our dedicated TCB slot will probably make up for it.", "tree": {"sha": "9ff8806f2fe5e92546a6f769f08e798f16863f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff8806f2fe5e92546a6f769f08e798f16863f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39255616004ea43dfabcf33b20ed2a80cd31dff", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39255616004ea43dfabcf33b20ed2a80cd31dff", "html_url": "https://github.com/rust-lang/rust/commit/d39255616004ea43dfabcf33b20ed2a80cd31dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39255616004ea43dfabcf33b20ed2a80cd31dff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a931e04b757a795e3867ea98c81cee731bd54ac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a931e04b757a795e3867ea98c81cee731bd54ac1", "html_url": "https://github.com/rust-lang/rust/commit/a931e04b757a795e3867ea98c81cee731bd54ac1"}], "stats": {"total": 160, "additions": 92, "deletions": 68}, "files": [{"sha": "f7bd2aa240d7d043fd5ccb9c8f4006cea5a362d0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -1142,9 +1142,9 @@ pub fn real_args() -> ~[~str] {\n #[cfg(target_os = \"freebsd\")]\n pub fn real_args() -> ~[~str] {\n     use rt;\n-    use rt::TaskContext;\n+    use rt::NewRtContext;\n \n-    if rt::context() == TaskContext {\n+    if rt::context() == NewRtContext {\n         match rt::args::clone() {\n             Some(args) => args,\n             None => fail!(\"process arguments not initialized\")"}, {"sha": "793e244bec7b937276096033741de9751dc5cf53", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -15,6 +15,7 @@ use cast;\n use ops::Drop;\n use rt::kill::BlockedTask;\n use kinds::Send;\n+use rt;\n use rt::sched::Scheduler;\n use rt::local::Local;\n use rt::select::{Select, SelectPort};\n@@ -24,7 +25,6 @@ use util::Void;\n use comm::{GenericChan, GenericSmartChan, GenericPort, Peekable};\n use cell::Cell;\n use clone::Clone;\n-use rt::{context, SchedulerContext};\n use tuple::ImmutableTuple;\n \n /// A combined refcount / BlockedTask-as-uint pointer.\n@@ -113,7 +113,7 @@ impl<T> ChanOne<T> {\n     // 'do_resched' configures whether the scheduler immediately switches to\n     // the receiving task, or leaves the sending task still running.\n     fn try_send_inner(self, val: T, do_resched: bool) -> bool {\n-        rtassert!(context() != SchedulerContext);\n+        rtassert!(!rt::in_sched_context());\n \n         let mut this = self;\n         let mut recvr_active = true;"}, {"sha": "8832597f40c452ee8b021d32f5150268f69b60f0", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -13,6 +13,7 @@\n use libc;\n use libc::{c_void, uintptr_t, size_t};\n use ops::Drop;\n+use option::{Some, None};\n use rt;\n use rt::OldTaskContext;\n use rt::local::Local;\n@@ -86,20 +87,19 @@ impl Drop for LocalHeap {\n \n // A little compatibility function\n pub unsafe fn local_free(ptr: *libc::c_char) {\n-    match rt::context() {\n-        OldTaskContext => {\n+    // XXX: Unsafe borrow for speed. Lame.\n+    match Local::try_unsafe_borrow::<Task>() {\n+        Some(task) => {\n+            (*task).heap.free(ptr as *libc::c_void);\n+        }\n+        None => {\n             rust_upcall_free_noswitch(ptr);\n \n             extern {\n                 #[fast_ffi]\n                 fn rust_upcall_free_noswitch(ptr: *libc::c_char);\n             }\n         }\n-        _ => {\n-            do Local::borrow::<Task,()> |task| {\n-                task.heap.free(ptr as *libc::c_void);\n-            }\n-        }\n     }\n }\n \n@@ -119,20 +119,28 @@ pub fn live_allocs() -> *raw::Box<()> {\n }\n \n extern {\n+    #[fast_ffi]\n     fn rust_new_memory_region(synchronized: uintptr_t,\n                                detailed_leaks: uintptr_t,\n                                poison_on_free: uintptr_t) -> *MemoryRegion;\n+    #[fast_ffi]\n     fn rust_delete_memory_region(region: *MemoryRegion);\n+    #[fast_ffi]\n     fn rust_new_boxed_region(region: *MemoryRegion,\n                              poison_on_free: uintptr_t) -> *BoxedRegion;\n+    #[fast_ffi]\n     fn rust_delete_boxed_region(region: *BoxedRegion);\n+    #[fast_ffi]\n     fn rust_boxed_region_malloc(region: *BoxedRegion,\n                                 td: *TypeDesc,\n                                 size: size_t) -> *OpaqueBox;\n+    #[fast_ffi]\n     fn rust_boxed_region_realloc(region: *BoxedRegion,\n                                  ptr: *OpaqueBox,\n                                  size: size_t) -> *OpaqueBox;\n+    #[fast_ffi]\n     fn rust_boxed_region_free(region: *BoxedRegion, box: *OpaqueBox);\n+    #[fast_ffi]\n     fn rust_current_boxed_region() -> *BoxedRegion;\n }\n "}, {"sha": "be71bc651df5902abccc2b90852e8a29a934d631", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -407,14 +407,10 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n /// or the old scheduler.\n #[deriving(Eq)]\n pub enum RuntimeContext {\n-    // Only the exchange heap is available\n-    GlobalContext,\n-    // The scheduler may be accessed\n-    SchedulerContext,\n-    // Full task services, e.g. local heap, unwinding\n-    TaskContext,\n     // Running in an old-style task\n-    OldTaskContext\n+    OldTaskContext,\n+    // Not old task context\n+    NewRtContext\n }\n \n /// Determine the current RuntimeContext\n@@ -424,23 +420,40 @@ pub fn context() -> RuntimeContext {\n \n     if unsafe { rust_try_get_task().is_not_null() } {\n         return OldTaskContext;\n-    } else if Local::exists::<Task>() {\n-        // In this case we know it is a new runtime context, but we\n-        // need to check which one. Going to try borrowing task to\n-        // check. Task should always be in TLS, so hopefully this\n-        // doesn't conflict with other ops that borrow.\n-        return do Local::borrow::<Task,RuntimeContext> |task| {\n-            match task.task_type {\n-                SchedTask => SchedulerContext,\n-                GreenTask(_) => TaskContext\n-            }\n-        };\n     } else {\n-        return GlobalContext;\n+        return NewRtContext;\n     }\n \n     extern {\n         #[rust_stack]\n         pub fn rust_try_get_task() -> *rust_task;\n     }\n }\n+\n+pub fn in_sched_context() -> bool {\n+    unsafe {\n+        match Local::try_unsafe_borrow::<Task>() {\n+            Some(task) => {\n+                match (*task).task_type {\n+                    SchedTask => true,\n+                    _ => false\n+                }\n+            }\n+            None => false\n+        }\n+    }\n+}\n+\n+pub fn in_green_task_context() -> bool {\n+    unsafe {\n+        match Local::try_unsafe_borrow::<Task>() {\n+            Some(task) => {\n+                match (*task).task_type {\n+                    GreenTask(_) => true,\n+                    _ => false\n+                }\n+            }\n+            None => false\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "15c096ad04fd5f0a66f2bd102487cd92e2102909", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -136,7 +136,7 @@ impl FailWithCause for &'static str {\n pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n     use either::Left;\n     use option::{Some, None};\n-    use rt::{context, OldTaskContext, TaskContext};\n+    use rt::{context, OldTaskContext, in_green_task_context};\n     use rt::task::Task;\n     use rt::local::Local;\n     use rt::logging::Logger;\n@@ -158,7 +158,7 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n \n                 // XXX: Logging doesn't work correctly in non-task context because it\n                 // invokes the local heap\n-                if context == TaskContext {\n+                if in_green_task_context() {\n                     // XXX: Logging doesn't work here - the check to call the log\n                     // function never passes - so calling the log function directly.\n                     do Local::borrow::<Task, ()> |task| {"}, {"sha": "269c828a9845f7bc23ddba2e54360b1bbc183344", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -42,7 +42,7 @@ use cmp::Eq;\n use comm::{stream, Chan, GenericChan, GenericPort, Port};\n use result::Result;\n use result;\n-use rt::{context, OldTaskContext, TaskContext};\n+use rt::{context, OldTaskContext, in_green_task_context};\n use rt::local::Local;\n use unstable::finally::Finally;\n use util;\n@@ -527,14 +527,15 @@ pub fn try<T:Send>(f: ~fn() -> T) -> Result<T,()> {\n pub fn with_task_name<U>(blk: &fn(Option<&str>) -> U) -> U {\n     use rt::task::Task;\n \n-    match context() {\n-        TaskContext => do Local::borrow::<Task, U> |task| {\n+    if in_green_task_context() {\n+        do Local::borrow::<Task, U> |task| {\n             match task.name {\n                 Some(ref name) => blk(Some(name.as_slice())),\n                 None => blk(None)\n             }\n-        },\n-        _ => fail!(\"no task name exists in %?\", context()),\n+        }\n+    } else {\n+        fail!(\"no task name exists in %?\", context())\n     }\n }\n \n@@ -614,7 +615,7 @@ pub fn unkillable<U>(f: &fn() -> U) -> U {\n                     rt::rust_task_allow_kill(t);\n                 }\n             }\n-            TaskContext => {\n+            _ if in_green_task_context() => {\n                 // The inhibits/allows might fail and need to borrow the task.\n                 let t = Local::unsafe_borrow::<Task>();\n                 do (|| {\n@@ -645,7 +646,7 @@ pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n                 rt::rust_task_inhibit_kill(t);\n             }\n         }\n-        TaskContext => {\n+        _ if in_green_task_context() => {\n             let t = Local::unsafe_borrow::<Task>();\n             do (|| {\n                 (*t).death.allow_kill((*t).unwinder.unwinding);"}, {"sha": "314377b8dc9c17c9e065e617bb42492f84c504ec", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -91,7 +91,7 @@ use to_bytes::IterBytes;\n use uint;\n use util;\n use unstable::sync::Exclusive;\n-use rt::{OldTaskContext, TaskContext, SchedulerContext, GlobalContext, context};\n+use rt::{OldTaskContext, NewRtContext, context, in_green_task_context};\n use rt::local::Local;\n use rt::task::{Task, Sched};\n use rt::kill::KillHandle;\n@@ -526,7 +526,7 @@ impl RuntimeGlue {\n                 let me = rt::rust_get_task();\n                 blk(OldTask(me), rt::rust_task_is_unwinding(me))\n             },\n-            TaskContext => unsafe {\n+            NewRtContext if in_green_task_context() => unsafe {\n                 // Can't use safe borrow, because the taskgroup destructor needs to\n                 // access the scheduler again to send kill signals to other tasks.\n                 let me = Local::unsafe_borrow::<Task>();\n@@ -535,7 +535,7 @@ impl RuntimeGlue {\n                 blk(NewTask((*me).death.kill_handle.get_ref().clone()),\n                     (*me).unwinder.unwinding)\n             },\n-            SchedulerContext | GlobalContext => rtabort!(\"task dying in bad context\"),\n+            NewRtContext => rtabort!(\"task dying in bad context\"),\n         }\n     }\n \n@@ -563,7 +563,7 @@ impl RuntimeGlue {\n                     }\n                 }\n             },\n-            TaskContext => unsafe {\n+            NewRtContext if in_green_task_context() => unsafe {\n                 // Can't use safe borrow, because creating new hashmaps for the\n                 // tasksets requires an rng, which needs to borrow the sched.\n                 let me = Local::unsafe_borrow::<Task>();\n@@ -588,7 +588,7 @@ impl RuntimeGlue {\n                     Some(ref group) => group,\n                 })\n             },\n-            SchedulerContext | GlobalContext => rtabort!(\"spawning in bad context\"),\n+            NewRtContext => rtabort!(\"spawning in bad context\"),\n         }\n     }\n }\n@@ -666,10 +666,9 @@ fn enlist_many(child: TaskHandle, child_arc: &TaskGroupArc,\n \n pub fn spawn_raw(opts: TaskOpts, f: ~fn()) {\n     match context() {\n-        OldTaskContext   => spawn_raw_oldsched(opts, f),\n-        TaskContext      => spawn_raw_newsched(opts, f),\n-        SchedulerContext => fail!(\"can't spawn from scheduler context\"),\n-        GlobalContext    => fail!(\"can't spawn from global context\"),\n+        OldTaskContext => spawn_raw_oldsched(opts, f),\n+        _ if in_green_task_context() => spawn_raw_newsched(opts, f),\n+        _ => fail!(\"can't spawn from this context\")\n     }\n }\n "}, {"sha": "c5112529aed9f2494dc8f11eab25cc0b6fc40471", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -12,9 +12,9 @@\n \n use cast::transmute;\n use libc::{c_char, c_uchar, c_void, size_t, uintptr_t, c_int};\n+use option::{Some, None};\n use str;\n use sys;\n-use rt::{context, OldTaskContext};\n use rt::task::Task;\n use rt::local::Local;\n use rt::borrowck;\n@@ -56,16 +56,13 @@ pub fn fail_bounds_check(file: *c_char, line: size_t,\n \n #[lang=\"malloc\"]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n-    match context() {\n-        OldTaskContext => {\n-            return rustrt::rust_upcall_malloc_noswitch(td, size);\n+    // XXX: Unsafe borrow for speed. Lame.\n+    match Local::try_unsafe_borrow::<Task>() {\n+        Some(task) => {\n+            (*task).heap.alloc(td as *c_void, size as uint) as *c_char\n         }\n-        _ => {\n-            let mut alloc = ::ptr::null();\n-            do Local::borrow::<Task,()> |task| {\n-                alloc = task.heap.alloc(td as *c_void, size as uint) as *c_char;\n-            }\n-            return alloc;\n+        None => {\n+            rustrt::rust_upcall_malloc_noswitch(td, size)\n         }\n     }\n }"}, {"sha": "a8d942a46b3152503a6d833dce5b0f7f24263424", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39255616004ea43dfabcf33b20ed2a80cd31dff/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=d39255616004ea43dfabcf33b20ed2a80cd31dff", "patch": "@@ -282,7 +282,7 @@ pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n     use rt::task::Task;\n     use task::rt;\n     use rt::local::Local;\n-    use rt::{context, OldTaskContext, TaskContext};\n+    use rt::{context, OldTaskContext};\n \n     match context() {\n         OldTaskContext => {\n@@ -296,17 +296,23 @@ pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n                 rt::rust_task_allow_kill(t);\n             }\n         }\n-        TaskContext => {\n-            let t = Local::unsafe_borrow::<Task>();\n-            do (|| {\n-                (*t).death.inhibit_yield();\n-                f()\n-            }).finally {\n-                (*t).death.allow_yield();\n+        _ => {\n+            let t = Local::try_unsafe_borrow::<Task>();\n+            match t {\n+                Some(t) => {\n+                    do (|| {\n+                        (*t).death.inhibit_yield();\n+                        f()\n+                    }).finally {\n+                        (*t).death.allow_yield();\n+                    }\n+                }\n+                None => {\n+                    // FIXME(#3095): As in unkillable().\n+                    f()\n+                }\n             }\n         }\n-        // FIXME(#3095): As in unkillable().\n-        _ => f()\n     }\n }\n "}]}