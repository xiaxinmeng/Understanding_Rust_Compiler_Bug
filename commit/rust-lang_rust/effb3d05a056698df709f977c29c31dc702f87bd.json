{"sha": "effb3d05a056698df709f977c29c31dc702f87bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZmIzZDA1YTA1NjY5OGRmNzA5Zjk3N2MyOWMzMWRjNzAyZjg3YmQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-23T20:16:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Improve the comments", "tree": {"sha": "824fed8c3cf48a0fa1dc8dd1453497eed3885ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824fed8c3cf48a0fa1dc8dd1453497eed3885ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/effb3d05a056698df709f977c29c31dc702f87bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/effb3d05a056698df709f977c29c31dc702f87bd", "html_url": "https://github.com/rust-lang/rust/commit/effb3d05a056698df709f977c29c31dc702f87bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/effb3d05a056698df709f977c29c31dc702f87bd/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f2c5a7b27e929061117095ae6f2ec5eb2a1b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f2c5a7b27e929061117095ae6f2ec5eb2a1b4d", "html_url": "https://github.com/rust-lang/rust/commit/a9f2c5a7b27e929061117095ae6f2ec5eb2a1b4d"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "1c9cdfd03b390072c91b6059575dd7b8727c62dd", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/effb3d05a056698df709f977c29c31dc702f87bd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effb3d05a056698df709f977c29c31dc702f87bd/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=effb3d05a056698df709f977c29c31dc702f87bd", "patch": "@@ -470,20 +470,21 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             ]\n         }\n         ty::TyInt(_) if exhaustive_integer_patterns => {\n-            let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n+            // FIXME(49937): refactor these bit manipulations into interpret.\n+            let bits = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n                              .unwrap().size.bits() as u128;\n-            let min = (1u128 << (size - 1)).wrapping_neg();\n-            let max = (1u128 << (size - 1)).wrapping_sub(1);\n+            let min = 1u128 << (bits - 1);\n+            let max = (1u128 << (bits - 1)) - 1;\n             value_constructors = true;\n             vec![ConstantRange(ty::Const::from_bits(cx.tcx, min as u128, pcx.ty),\n                                ty::Const::from_bits(cx.tcx, max as u128, pcx.ty),\n                                RangeEnd::Included)]\n         }\n         ty::TyUint(_) if exhaustive_integer_patterns => {\n-            let size = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n+            // FIXME(49937): refactor these bit manipulations into interpret.\n+            let bits = cx.tcx.layout_of(ty::ParamEnv::reveal_all().and(pcx.ty))\n                              .unwrap().size.bits() as u32;\n-            let shift = 1u128.overflowing_shl(size);\n-            let max = shift.0.wrapping_sub(1 + (shift.1 as u128));\n+            let max = (!0u128).wrapping_shr(128 - bits);\n             value_constructors = true;\n             vec![ConstantRange(ty::Const::from_bits(cx.tcx, 0u128, pcx.ty),\n                                ty::Const::from_bits(cx.tcx, max as u128, pcx.ty),\n@@ -603,8 +604,12 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n }\n \n /// An inclusive interval, used for precise integer exhaustiveness checking.\n-/// `Interval`s always store a contiguous range of integers. That means that\n-/// signed integers are offset (see `offset_sign`) by their minimum value.\n+/// `Interval`s always store a contiguous range of integers. This means that\n+/// signed values are encoded by offsetting them such that `0` represents the\n+/// minimum value for the integer, regardless of sign.\n+/// For example, the range `-128...127` is encoded as `0...255`.\n+/// This makes comparisons and arithmetic on interval endpoints much more\n+/// straightforward. See `offset_sign` for the conversion technique.\n struct Interval<'tcx> {\n     pub range: RangeInclusive<u128>,\n     pub ty: Ty<'tcx>,\n@@ -661,10 +666,11 @@ impl<'tcx> Interval<'tcx> {\n         let (lo, hi) = range.into_inner();\n         match ty.sty {\n             ty::TyInt(_) => {\n-                let size = tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n+                // FIXME(49937): refactor these bit manipulations into interpret.\n+                let bits = tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n                                  .unwrap().size.bits() as u128;\n-                let min = (1u128 << (size - 1)).wrapping_neg();\n-                let shift = 1u128.overflowing_shl(size as u32);\n+                let min = 1u128 << (bits - 1);\n+                let shift = 1u128.overflowing_shl(bits as u32);\n                 let mask = shift.0.wrapping_sub(1 + (shift.1 as u128));\n                 if encode {\n                     let offset = |x: u128| x.wrapping_sub(min) & mask;"}]}