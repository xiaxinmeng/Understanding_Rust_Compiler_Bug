{"sha": "2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "node_id": "C_kwDOAAsO6NoAKDJhNDcxMTNlZmEzN2U2OTBiZmQ1YTc2OTVlMjkzZDRkMGMwYzdhODg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-18T08:11:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Remove IntoDefIdTree", "tree": {"sha": "09af144a62955b721bdc742d0936ff8ec2aedc09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09af144a62955b721bdc742d0936ff8ec2aedc09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "html_url": "https://github.com/rust-lang/rust/commit/2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a47113efa37e690bfd5a7695e293d4d0c0c7a88/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab14ea7c261388e863e15b2688f16e704d76c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab14ea7c261388e863e15b2688f16e704d76c47", "html_url": "https://github.com/rust-lang/rust/commit/1ab14ea7c261388e863e15b2688f16e704d76c47"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "893bf54b8660b101e5dafda730db29fde96b5517", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a47113efa37e690bfd5a7695e293d4d0c0c7a88/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a47113efa37e690bfd5a7695e293d4d0c0c7a88/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "patch": "@@ -194,11 +194,6 @@ impl EffectiveVisibilities {\n     }\n }\n \n-pub trait IntoDefIdTree {\n-    type Tree: DefIdTree;\n-    fn tree(self) -> Self::Tree;\n-}\n-\n impl<Id: Eq + Hash> EffectiveVisibilities<Id> {\n     pub fn iter(&self) -> impl Iterator<Item = (&Id, &EffectiveVisibility)> {\n         self.map.iter()\n@@ -217,25 +212,21 @@ impl<Id: Eq + Hash> EffectiveVisibilities<Id> {\n         self.map.entry(id).or_insert_with(|| EffectiveVisibility::from_vis(lazy_private_vis()))\n     }\n \n-    pub fn update<T: IntoDefIdTree>(\n+    pub fn update(\n         &mut self,\n         id: Id,\n         nominal_vis: Visibility,\n-        lazy_private_vis: impl FnOnce(T) -> (Visibility, T),\n+        lazy_private_vis: impl FnOnce() -> Visibility,\n         inherited_effective_vis: EffectiveVisibility,\n         level: Level,\n-        mut into_tree: T,\n+        tree: impl DefIdTree,\n     ) -> bool {\n         let mut changed = false;\n-        let mut current_effective_vis = match self.map.get(&id).copied() {\n-            Some(eff_vis) => eff_vis,\n-            None => {\n-                let private_vis;\n-                (private_vis, into_tree) = lazy_private_vis(into_tree);\n-                EffectiveVisibility::from_vis(private_vis)\n-            }\n-        };\n-        let tree = into_tree.tree();\n+        let mut current_effective_vis = self\n+            .map\n+            .get(&id)\n+            .copied()\n+            .unwrap_or_else(|| EffectiveVisibility::from_vis(lazy_private_vis()));\n \n         let mut inherited_effective_vis_at_prev_level = *inherited_effective_vis.at_level(level);\n         let mut calculated_effective_vis = inherited_effective_vis_at_prev_level;"}, {"sha": "adb6c4aefbcd6c085c5bfbdf6062ab111f79d04e", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a47113efa37e690bfd5a7695e293d4d0c0c7a88/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a47113efa37e690bfd5a7695e293d4d0c0c7a88/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=2a47113efa37e690bfd5a7695e293d4d0c0c7a88", "patch": "@@ -7,8 +7,8 @@ use rustc_ast::EnumDef;\n use rustc_data_structures::intern::Interned;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::CRATE_DEF_ID;\n+use rustc_middle::middle::privacy::Level;\n use rustc_middle::middle::privacy::{EffectiveVisibilities, EffectiveVisibility};\n-use rustc_middle::middle::privacy::{IntoDefIdTree, Level};\n use rustc_middle::ty::{DefIdTree, Visibility};\n use std::mem;\n \n@@ -67,13 +67,6 @@ impl Resolver<'_, '_> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> IntoDefIdTree for &'b mut Resolver<'a, 'tcx> {\n-    type Tree = &'b Resolver<'a, 'tcx>;\n-    fn tree(self) -> Self::Tree {\n-        self\n-    }\n-}\n-\n impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n     /// Fills the `Resolver::effective_visibilities` table with public & exported items\n     /// For now, this doesn't resolve macros (FIXME) and cannot resolve Impl, as we\n@@ -167,26 +160,28 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n         let nominal_vis = binding.vis.expect_local();\n         let private_vis = self.cheap_private_vis(parent_id);\n         let inherited_eff_vis = self.effective_vis_or_private(parent_id);\n+        let tcx = self.r.tcx;\n         self.changed |= self.import_effective_visibilities.update(\n             binding,\n             nominal_vis,\n-            |r| (private_vis.unwrap_or_else(|| r.private_vis_import(binding)), r),\n+            || private_vis.unwrap_or_else(|| self.r.private_vis_import(binding)),\n             inherited_eff_vis,\n             parent_id.level(),\n-            &mut *self.r,\n+            tcx,\n         );\n     }\n \n     fn update_def(&mut self, def_id: LocalDefId, nominal_vis: Visibility, parent_id: ParentId<'a>) {\n         let private_vis = self.cheap_private_vis(parent_id);\n         let inherited_eff_vis = self.effective_vis_or_private(parent_id);\n+        let tcx = self.r.tcx;\n         self.changed |= self.def_effective_visibilities.update(\n             def_id,\n             nominal_vis,\n-            |r| (private_vis.unwrap_or_else(|| r.private_vis_def(def_id)), r),\n+            || private_vis.unwrap_or_else(|| self.r.private_vis_def(def_id)),\n             inherited_eff_vis,\n             parent_id.level(),\n-            &mut *self.r,\n+            tcx,\n         );\n     }\n "}]}