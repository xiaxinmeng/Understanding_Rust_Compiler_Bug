{"sha": "368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OGUwOTJjMjZkNDBkYTJkNDQ0MmJmN2NmMWI2ZTRkZjEzYTZmODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-11T06:37:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-11T06:37:19Z"}, "message": "Auto merge of #38250 - michaelwoerister:trait-methods-in-reachable, r=alexcrichton\n\nConsider provided trait methods in middle::reachable\n\nFixes https://github.com/rust-lang/rust/issues/38226 by also considering trait methods with default implementation instead of just methods provided in an impl.\n\nr? @alexcrichton\ncc @panicbit", "tree": {"sha": "95d7ee7e177aad13fd902ce731fd3cbb421b3d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d7ee7e177aad13fd902ce731fd3cbb421b3d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "html_url": "https://github.com/rust-lang/rust/commit/368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea798527e42379af207b3da9e9aef41fd7e812c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea798527e42379af207b3da9e9aef41fd7e812c8", "html_url": "https://github.com/rust-lang/rust/commit/ea798527e42379af207b3da9e9aef41fd7e812c8"}, {"sha": "5d35dfb01edd8f53862ac30e1eaec2cea40bace9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d35dfb01edd8f53862ac30e1eaec2cea40bace9", "html_url": "https://github.com/rust-lang/rust/commit/5d35dfb01edd8f53862ac30e1eaec2cea40bace9"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "2c4710f1e452b6559c2709bfc55df0eb538b928e", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "patch": "@@ -323,19 +323,37 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n // items of non-exported traits (or maybe all local traits?) unless their respective\n // trait items are used from inlinable code through method call syntax or UFCS, or their\n // trait is a lang item.\n-struct CollectPrivateImplItemsVisitor<'a> {\n+struct CollectPrivateImplItemsVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     access_levels: &'a privacy::AccessLevels,\n     worklist: &'a mut Vec<ast::NodeId>,\n }\n \n-impl<'a, 'v> ItemLikeVisitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n+impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         // We need only trait impls here, not inherent impls, and only non-exported ones\n-        if let hir::ItemImpl(.., Some(_), _, ref impl_item_refs) = item.node {\n+        if let hir::ItemImpl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n             if !self.access_levels.is_reachable(item.id) {\n                 for impl_item_ref in impl_item_refs {\n                     self.worklist.push(impl_item_ref.id.node_id);\n                 }\n+\n+                let trait_def_id = match trait_ref.path.def {\n+                    Def::Trait(def_id) => def_id,\n+                    _ => unreachable!()\n+                };\n+\n+                if !trait_def_id.is_local() {\n+                    return\n+                }\n+\n+                for default_method in self.tcx.provided_trait_methods(trait_def_id) {\n+                    let node_id = self.tcx\n+                                      .map\n+                                      .as_local_node_id(default_method.def_id)\n+                                      .unwrap();\n+                    self.worklist.push(node_id);\n+                }\n             }\n         }\n     }\n@@ -369,6 +387,7 @@ pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n     {\n         let mut collect_private_impl_items = CollectPrivateImplItemsVisitor {\n+            tcx: tcx,\n             access_levels: access_levels,\n             worklist: &mut reachable_context.worklist,\n         };"}, {"sha": "eef464eb7f4dc61098e64884dd9f9a70ae1ac756", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "patch": "@@ -51,8 +51,10 @@ impl ExportedSymbols {\n                 scx.tcx().map.local_def_id(node_id)\n             })\n             .map(|def_id| {\n-                (symbol_for_def_id(scx, def_id, symbol_map),\n-                 export_level(scx, def_id))\n+                let name = symbol_for_def_id(scx, def_id, symbol_map);\n+                let export_level = export_level(scx, def_id);\n+                debug!(\"EXPORTED SYMBOL (local): {} ({:?})\", name, export_level);\n+                (name, export_level)\n             })\n             .collect();\n \n@@ -90,9 +92,10 @@ impl ExportedSymbols {\n                 .exported_symbols(cnum)\n                 .iter()\n                 .map(|&def_id| {\n-                    debug!(\"EXTERN-SYMBOL: {:?}\", def_id);\n                     let name = Instance::mono(scx, def_id).symbol_name(scx);\n-                    (name, export_level(scx, def_id))\n+                    let export_level = export_level(scx, def_id);\n+                    debug!(\"EXPORTED SYMBOL (re-export): {} ({:?})\", name, export_level);\n+                    (name, export_level)\n                 })\n                 .collect();\n "}, {"sha": "d48a973368501d978dddade44c045f5674e42a0c", "filename": "src/test/run-pass/auxiliary/issue_38226_aux.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38226_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38226_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38226_aux.rs?ref=368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"rlib\"]\n+\n+#[inline(never)]\n+pub fn foo<T>() {\n+    let _: Box<SomeTrait> = Box::new(SomeTraitImpl);\n+}\n+\n+pub fn bar() {\n+    SomeTraitImpl.bar();\n+}\n+\n+mod submod {\n+    pub trait SomeTrait {\n+        fn bar(&self) {\n+            panic!(\"NO\")\n+        }\n+    }\n+}\n+\n+use self::submod::SomeTrait;\n+\n+pub struct SomeTraitImpl;\n+impl SomeTrait for SomeTraitImpl {}"}, {"sha": "33604212af9516c0357c7e7d6b1a53cfaa6ffb6d", "filename": "src/test/run-pass/issue-38226.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368e092c26d40da2d4442bf7cf1b6e4df13a6f87/src%2Ftest%2Frun-pass%2Fissue-38226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38226.rs?ref=368e092c26d40da2d4442bf7cf1b6e4df13a6f87", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test makes sure that we don't run into a linker error because of the\n+// middle::reachable pass missing trait methods with default impls.\n+\n+// aux-build:issue_38226_aux.rs\n+\n+// Need -Cno-prepopulate-passes to really disable inlining, otherwise the faulty\n+// code gets optimized out:\n+// compile-flags: -Cno-prepopulate-passes\n+\n+extern crate issue_38226_aux;\n+\n+fn main() {\n+    issue_38226_aux::foo::<()>();\n+}"}]}