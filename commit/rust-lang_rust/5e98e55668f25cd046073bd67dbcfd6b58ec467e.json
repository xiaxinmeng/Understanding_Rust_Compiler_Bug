{"sha": "5e98e55668f25cd046073bd67dbcfd6b58ec467e", "node_id": "C_kwDOAAsO6NoAKDVlOThlNTU2NjhmMjVjZDA0NjA3M2JkNjdkYmNmZDZiNThlYzQ2N2U", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-24T07:43:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-24T07:43:49Z"}, "message": "Rollup merge of #98419 - WaffleLapkin:remove_excess_rib, r=compiler-errors\n\nRemove excess rib while resolving closures\n\nI've mentioned this on [zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/.60ClosureOrAsyncRibKind.60.20weirdness/near/286982959), in `rustc_resolve`, while resolving closures we add an excess `ClosureOrAsyncRibKind`. It's excess because we later add another one in `visit_fn`.\n\nI couldn't find a way in which removing this will break anything, all test seem to pass, etc.\n\nr? ``@compiler-errors``\ncc ``@davidtwco``", "tree": {"sha": "2b3ee9ef5bd82f2cded85c4989ffe49857a7783c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3ee9ef5bd82f2cded85c4989ffe49857a7783c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e98e55668f25cd046073bd67dbcfd6b58ec467e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJitWs1CRBK7hj4Ov3rIwAAU5wIAJkcCVeYApA/hje6lBr3lpg2\nBW68sZabZmcP6BFXc5jE7jXmoouZ9N7TxzN/NLX3CXA0yGXx/3COicV5x2xF+oFi\nVOsXEW3hePuTeCv7IQb7THOhQ6G9Q+h/rCGeygKaZAfgwu2vgVypNiZI6UuEDYnu\naAhDg4JFRg3IcNXmZrRED0gcRkSv4qBaCBDnJd+Mn9E80IMquikbu9c1HpH3C+0h\n5KDUn7UvQRlg8ABemCheg3ZzzXLBDkRsSyHK7E+q5x3at5qTFP7iq/fy7qhnhgih\nyrpg8k0ccKGBQn57NeDjRHw8dOHHUI6+4Kh3FeSkanTIZo2B5R5ex4l2dUrWy0c=\n=wXrh\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b3ee9ef5bd82f2cded85c4989ffe49857a7783c\nparent d26b03c429699eda669175a0f1e69fb9e664ad7d\nparent 9730221b9d8adafcd7615d5dc43cf83a60baf123\nauthor Yuki Okushi <jtitor@2k36.org> 1656056629 +0900\ncommitter GitHub <noreply@github.com> 1656056629 +0900\n\nRollup merge of #98419 - WaffleLapkin:remove_excess_rib, r=compiler-errors\n\nRemove excess rib while resolving closures\n\nI've mentioned this on [zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/.60ClosureOrAsyncRibKind.60.20weirdness/near/286982959), in `rustc_resolve`, while resolving closures we add an excess `ClosureOrAsyncRibKind`. It's excess because we later add another one in `visit_fn`.\n\nI couldn't find a way in which removing this will break anything, all test seem to pass, etc.\n\nr? ``@compiler-errors``\ncc ``@davidtwco``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e98e55668f25cd046073bd67dbcfd6b58ec467e", "html_url": "https://github.com/rust-lang/rust/commit/5e98e55668f25cd046073bd67dbcfd6b58ec467e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e98e55668f25cd046073bd67dbcfd6b58ec467e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26b03c429699eda669175a0f1e69fb9e664ad7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26b03c429699eda669175a0f1e69fb9e664ad7d", "html_url": "https://github.com/rust-lang/rust/commit/d26b03c429699eda669175a0f1e69fb9e664ad7d"}, {"sha": "9730221b9d8adafcd7615d5dc43cf83a60baf123", "url": "https://api.github.com/repos/rust-lang/rust/commits/9730221b9d8adafcd7615d5dc43cf83a60baf123", "html_url": "https://github.com/rust-lang/rust/commit/9730221b9d8adafcd7615d5dc43cf83a60baf123"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "640d13ea435478dc8a141b2e1fbf1435e8350431", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e98e55668f25cd046073bd67dbcfd6b58ec467e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e98e55668f25cd046073bd67dbcfd6b58ec467e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5e98e55668f25cd046073bd67dbcfd6b58ec467e", "patch": "@@ -3514,7 +3514,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     })\n                 });\n             }\n-            ExprKind::Async(..) | ExprKind::Closure(..) => {\n+            // For closures, ClosureOrAsyncRibKind is added in visit_fn\n+            ExprKind::Closure(..) => visit::walk_expr(self, expr),\n+            ExprKind::Async(..) => {\n                 self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {"}]}