{"sha": "47377904a1f45b055b392c0d221416a95c67d06b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Mzc3OTA0YTFmNDViMDU1YjM5MmMwZDIyMTQxNmE5NWM2N2QwNmI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T01:43:21Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T06:38:21Z"}, "message": "Rollup merge of #22680 - FlaPer87:type_builtin, r=nikomatsakis\n\n Fixes #20302", "tree": {"sha": "0d1eac9e383c2977a78ba8a233ffbdcaa674f119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1eac9e383c2977a78ba8a233ffbdcaa674f119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47377904a1f45b055b392c0d221416a95c67d06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47377904a1f45b055b392c0d221416a95c67d06b", "html_url": "https://github.com/rust-lang/rust/commit/47377904a1f45b055b392c0d221416a95c67d06b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47377904a1f45b055b392c0d221416a95c67d06b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4337ddb62db0296dbc47ded1b263a888c9a485eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4337ddb62db0296dbc47ded1b263a888c9a485eb", "html_url": "https://github.com/rust-lang/rust/commit/4337ddb62db0296dbc47ded1b263a888c9a485eb"}, {"sha": "7ff11d7be8f5523674996bb7941e01b1991fd039", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff11d7be8f5523674996bb7941e01b1991fd039", "html_url": "https://github.com/rust-lang/rust/commit/7ff11d7be8f5523674996bb7941e01b1991fd039"}], "stats": {"total": 99, "additions": 75, "deletions": 24}, "files": [{"sha": "581279c2c9ca89ee082120a71e87d96aced31f75", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/47377904a1f45b055b392c0d221416a95c67d06b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47377904a1f45b055b392c0d221416a95c67d06b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=47377904a1f45b055b392c0d221416a95c67d06b", "patch": "@@ -305,9 +305,9 @@ fn create_region_substs<'tcx>(\n             rscope.anon_regions(span, expected_num_region_params);\n \n         if supplied_num_region_params != 0 || anon_regions.is_err() {\n-            span_err!(tcx.sess, span, E0107,\n-                      \"wrong number of lifetime parameters: expected {}, found {}\",\n-                      expected_num_region_params, supplied_num_region_params);\n+            report_lifetime_number_error(tcx, span,\n+                                         supplied_num_region_params,\n+                                         expected_num_region_params);\n         }\n \n         match anon_regions {\n@@ -355,31 +355,14 @@ fn create_substs_for_ast_path<'tcx>(\n                                                .count();\n \n     let mut type_substs = types_provided;\n+    check_type_argument_count(this.tcx(), span, supplied_ty_param_count,\n+                              required_ty_param_count, formal_ty_param_count);\n+\n     if supplied_ty_param_count < required_ty_param_count {\n-        let expected = if required_ty_param_count < formal_ty_param_count {\n-            \"expected at least\"\n-        } else {\n-            \"expected\"\n-        };\n-        span_err!(this.tcx().sess, span, E0243,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected,\n-                  required_ty_param_count,\n-                  supplied_ty_param_count);\n         while type_substs.len() < required_ty_param_count {\n             type_substs.push(tcx.types.err);\n         }\n     } else if supplied_ty_param_count > formal_ty_param_count {\n-        let expected = if required_ty_param_count < formal_ty_param_count {\n-            \"expected at most\"\n-        } else {\n-            \"expected\"\n-        };\n-        span_err!(this.tcx().sess, span, E0244,\n-                  \"wrong number of type arguments: {} {}, found {}\",\n-                  expected,\n-                  formal_ty_param_count,\n-                  supplied_ty_param_count);\n         type_substs.truncate(formal_ty_param_count);\n     }\n     assert!(type_substs.len() >= required_ty_param_count &&\n@@ -1847,7 +1830,16 @@ pub fn partition_bounds<'a>(tcx: &ty::ctxt,\n                         if ty::try_add_builtin_trait(tcx,\n                                                      trait_did,\n                                                      &mut builtin_bounds) {\n-                            // FIXME(#20302) -- we should check for things like Copy<T>\n+                            let segments = &b.trait_ref.path.segments;\n+                            let parameters = &segments[segments.len() - 1].parameters;\n+                            if parameters.types().len() > 0 {\n+                                check_type_argument_count(tcx, b.trait_ref.path.span,\n+                                                          parameters.types().len(), 0, 0);\n+                            }\n+                            if parameters.lifetimes().len() > 0{\n+                                report_lifetime_number_error(tcx, b.trait_ref.path.span,\n+                                                             parameters.lifetimes().len(), 0);\n+                            }\n                             continue; // success\n                         }\n                     }\n@@ -1880,3 +1872,34 @@ fn prohibit_projections<'tcx>(tcx: &ty::ctxt<'tcx>,\n             \"associated type bindings are not allowed here\");\n     }\n }\n+\n+fn check_type_argument_count(tcx: &ty::ctxt, span: Span, supplied: usize,\n+                             required: usize, accepted: usize) {\n+    if supplied < required {\n+        let expected = if required < accepted {\n+            \"expected at least\"\n+        } else {\n+            \"expected\"\n+        };\n+        span_err!(tcx.sess, span, E0243,\n+                  \"wrong number of type arguments: {} {}, found {}\",\n+                  expected, required, supplied);\n+    } else if supplied > accepted {\n+        let expected = if required < accepted {\n+            \"expected at most\"\n+        } else {\n+            \"expected\"\n+        };\n+        span_err!(tcx.sess, span, E0244,\n+                  \"wrong number of type arguments: {} {}, found {}\",\n+                  expected,\n+                  accepted,\n+                  supplied);\n+    }\n+}\n+\n+fn report_lifetime_number_error(tcx: &ty::ctxt, span: Span, number: usize, expected: usize) {\n+    span_err!(tcx.sess, span, E0107,\n+              \"wrong number of lifetime parameters: expected {}, found {}\",\n+              expected, number);\n+}"}, {"sha": "fb6c43a19059a42885a94ada94ab2f894e54dd1a", "filename": "src/test/compile-fail/typeck-builtin-bound-type-parameters.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47377904a1f45b055b392c0d221416a95c67d06b/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47377904a1f45b055b392c0d221416a95c67d06b/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-builtin-bound-type-parameters.rs?ref=47377904a1f45b055b392c0d221416a95c67d06b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo1<T:Copy<U>, U>(x: T) {}\n+//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+\n+trait Trait: Copy<Send> {}\n+//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+\n+struct MyStruct1<T: Copy<T>>;\n+//~^ ERROR wrong number of type arguments: expected 0, found 1\n+\n+struct MyStruct2<'a, T: Copy<'a>>;\n+//~^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+\n+fn foo2<'a, T:Copy<'a, U>, U>(x: T) {}\n+//~^ ERROR: wrong number of type arguments: expected 0, found 1\n+//~^^ ERROR: wrong number of lifetime parameters: expected 0, found 1\n+\n+fn main() {\n+}"}]}