{"sha": "ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTViNGY0YmQyYjgzYjRmYTJlZDJjMzFiOTg3ZDdjNTQyNjg5Mzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-08T07:43:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-08T07:43:43Z"}, "message": "Rollup merge of #56248 - estebank:suggest-bare-pub, r=petrochenkov\n\nSuggest an appropriate token when encountering `pub Ident<'a>`\n\nFix #55403. Follow up to #45997.", "tree": {"sha": "26ecdcb046a78beefe483dcebbbb0a6279050693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ecdcb046a78beefe483dcebbbb0a6279050693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcC3YwCRBK7hj4Ov3rIwAAdHIIAE8YmHCSLVxoJFqgeTxycPF/\nqUiZotX/0x3GE6JY8fXtovkWfBWsUmjVh7QjbtR4HEwQbIYgEYZTdNxvKMGt6K2l\nxwSrbvfvvudLa6DrTiZr6LScg+NBiPwuRanKvNfXNAv0M9J/Fr4zFOr5OQQh70LD\n9C1sdC6qgBeGkH4Ix5OM319CYgU+D5/pxKbaaKQbDhhiMcAVuYr5mEpU2nYv7kkR\nC+mhlm6BJbyjGvqXQcLQkpwRyn5QLQzqpRDKeTSssxBExzDTO04oXHwNRCXTK1AE\naEdNM687Y72kM9gcNVujz/YiQK58JDvhy6BfRkK/l2waeD7vwdWcunIwBMkekow=\n=Bm/d\n-----END PGP SIGNATURE-----\n", "payload": "tree 26ecdcb046a78beefe483dcebbbb0a6279050693\nparent 059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e\nparent 26458711118011645cfddef11d9e786c04cb727a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1544255023 +0100\ncommitter GitHub <noreply@github.com> 1544255023 +0100\n\nRollup merge of #56248 - estebank:suggest-bare-pub, r=petrochenkov\n\nSuggest an appropriate token when encountering `pub Ident<'a>`\n\nFix #55403. Follow up to #45997.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "html_url": "https://github.com/rust-lang/rust/commit/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e", "html_url": "https://github.com/rust-lang/rust/commit/059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e"}, {"sha": "26458711118011645cfddef11d9e786c04cb727a", "url": "https://api.github.com/repos/rust-lang/rust/commits/26458711118011645cfddef11d9e786c04cb727a", "html_url": "https://github.com/rust-lang/rust/commit/26458711118011645cfddef11d9e786c04cb727a"}], "stats": {"total": 155, "additions": 124, "deletions": 31}, "files": [{"sha": "e3a3454de497fb2d0cd905277645690f94f944c3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -5811,20 +5811,14 @@ impl<'a> Parser<'a> {\n     }\n \n     fn complain_if_pub_macro(&mut self, vis: &VisibilityKind, sp: Span) {\n-        if let Err(mut err) = self.complain_if_pub_macro_diag(vis, sp) {\n-            err.emit();\n-        }\n-    }\n-\n-    fn complain_if_pub_macro_diag(&mut self, vis: &VisibilityKind, sp: Span) -> PResult<'a, ()> {\n         match *vis {\n-            VisibilityKind::Inherited => Ok(()),\n+            VisibilityKind::Inherited => {}\n             _ => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == Symbol::intern(\"macro_rules\"),\n                     _ => false,\n                 };\n-                if is_macro_rules {\n+                let mut err = if is_macro_rules {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n                     err.span_suggestion_with_applicability(\n@@ -5833,13 +5827,14 @@ impl<'a> Parser<'a> {\n                         \"#[macro_export]\".to_owned(),\n                         Applicability::MaybeIncorrect // speculative\n                     );\n-                    Err(err)\n+                    err\n                 } else {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n                     err.help(\"try adjusting the macro to put `pub` inside the invocation\");\n-                    Err(err)\n-                }\n+                    err\n+                };\n+                err.emit();\n             }\n         }\n     }\n@@ -6148,9 +6143,6 @@ impl<'a> Parser<'a> {\n \n     fn consume_block(&mut self, delim: token::DelimToken) {\n         let mut brace_depth = 0;\n-        if !self.eat(&token::OpenDelim(delim)) {\n-            return;\n-        }\n         loop {\n             if self.eat(&token::OpenDelim(delim)) {\n                 brace_depth += 1;\n@@ -6161,7 +6153,7 @@ impl<'a> Parser<'a> {\n                     brace_depth -= 1;\n                     continue;\n                 }\n-            } else if self.eat(&token::Eof) || self.eat(&token::CloseDelim(token::NoDelim)) {\n+            } else if self.token == token::Eof || self.eat(&token::CloseDelim(token::NoDelim)) {\n                 return;\n             } else {\n                 self.bump();\n@@ -7410,17 +7402,27 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n+                self.bump();  // `(`\n+                let kw_name = if let Ok(Some(_)) = self.parse_self_arg() {\n+                    \"method\"\n+                } else {\n+                    \"function\"\n+                };\n                 self.consume_block(token::Paren);\n-                let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) ||\n-                    self.check(&token::OpenDelim(token::Brace))\n-                {\n-                    (\"fn\", \"method\", false)\n+                let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n+                    self.eat_to_tokens(&[&token::OpenDelim(token::Brace)]);\n+                    self.bump();  // `{`\n+                    (\"fn\", kw_name, false)\n+                } else if self.check(&token::OpenDelim(token::Brace)) {\n+                    self.bump();  // `{`\n+                    (\"fn\", kw_name, false)\n                 } else if self.check(&token::Colon) {\n                     let kw = \"struct\";\n                     (kw, kw, false)\n                 } else {\n-                    (\"fn` or `struct\", \"method or struct\", true)\n+                    (\"fn` or `struct\", \"function or struct\", true)\n                 };\n+                self.consume_block(token::Brace);\n \n                 let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n                 let mut err = self.diagnostic().struct_span_err(sp, &msg);\n@@ -7447,6 +7449,32 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 return Err(err);\n+            } else if self.look_ahead(1, |t| *t == token::Lt) {\n+                let ident = self.parse_ident().unwrap();\n+                self.eat_to_tokens(&[&token::Gt]);\n+                self.bump();  // `>`\n+                let (kw, kw_name, ambiguous) = if self.eat(&token::OpenDelim(token::Paren)) {\n+                    if let Ok(Some(_)) = self.parse_self_arg() {\n+                        (\"fn\", \"method\", false)\n+                    } else {\n+                        (\"fn\", \"function\", false)\n+                    }\n+                } else if self.check(&token::OpenDelim(token::Brace)) {\n+                    (\"struct\", \"struct\", false)\n+                } else {\n+                    (\"fn` or `struct\", \"function or struct\", true)\n+                };\n+                let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n+                let mut err = self.diagnostic().struct_span_err(sp, &msg);\n+                if !ambiguous {\n+                    err.span_suggestion_short_with_applicability(\n+                        sp,\n+                        &format!(\"add `{}` here to parse `{}` as a public {}\", kw, ident, kw_name),\n+                        format!(\" {} \", kw),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                return Err(err);\n             }\n         }\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)"}, {"sha": "648b1067add0db25f6e495bf0067335ae828e0e9", "filename": "src/test/ui/pub/pub-ident-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub foo(s: usize) { bar() }\n-//~^ ERROR missing `fn` for method definition\n+//~^ ERROR missing `fn` for function definition\n \n fn main() {\n     foo(2);"}, {"sha": "ed7430fd3941907e3075df330bbb2c62a55cf64b", "filename": "src/test/ui/pub/pub-ident-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -1,9 +1,9 @@\n-error: missing `fn` for method definition\n+error: missing `fn` for function definition\n   --> $DIR/pub-ident-fn-2.rs:11:4\n    |\n LL | pub foo(s: usize) { bar() }\n    |    ^\n-help: add `fn` here to parse `foo` as a public method\n+help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo(s: usize) { bar() }\n    |     ^^"}, {"sha": "e528e86fbc6e9e99430c361738b8f5d6550a78b2", "filename": "src/test/ui/pub/pub-ident-fn-or-struct-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub S();\n-//~^ ERROR missing `fn` or `struct` for method or struct definition\n+//~^ ERROR missing `fn` or `struct` for function or struct definition\n \n fn main() {}"}, {"sha": "d423b838f051438fbb984f45fbf9f16883796d22", "filename": "src/test/ui/pub/pub-ident-fn-or-struct-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct-2.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -1,4 +1,4 @@\n-error: missing `fn` or `struct` for method or struct definition\n+error: missing `fn` or `struct` for function or struct definition\n   --> $DIR/pub-ident-fn-or-struct-2.rs:11:4\n    |\n LL | pub S();"}, {"sha": "d5254bf2066c287152b6981a101dee1fb74e7020", "filename": "src/test/ui/pub/pub-ident-fn-or-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub S (foo) bar\n-//~^ ERROR missing `fn` or `struct` for method or struct definition\n+//~^ ERROR missing `fn` or `struct` for function or struct definition\n \n fn main() {}"}, {"sha": "b8b5e8a4bbf74efe6211f68b0015f071bd4a7653", "filename": "src/test/ui/pub/pub-ident-fn-or-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-or-struct.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -1,4 +1,4 @@\n-error: missing `fn` or `struct` for method or struct definition\n+error: missing `fn` or `struct` for function or struct definition\n   --> $DIR/pub-ident-fn-or-struct.rs:11:4\n    |\n LL | pub S (foo) bar"}, {"sha": "1ee8c84f13bd3b78f2a753b0bd0dabedb82b621b", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,6 @@\n+pub   bar<'a>(&self, _s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for method definition\n+\n+fn main() {\n+    bar(2);\n+}"}, {"sha": "c403774df8ede0362c014ee566f6e2631bc1ee56", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime-2.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn-with-lifetime-2.rs:1:4\n+   |\n+LL | pub   bar<'a>(&self, _s: &'a usize) -> bool { true }\n+   |    ^^^\n+help: add `fn` here to parse `bar` as a public method\n+   |\n+LL | pub fn bar<'a>(&self, _s: &'a usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "84f7bdc1fb14796d9bd4642eacc072fcb5a86934", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,6 @@\n+pub   foo<'a>(_s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for function definition\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "858238096408f0068c201cd1ac060186a5675248", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for function definition\n+  --> $DIR/pub-ident-fn-with-lifetime.rs:1:4\n+   |\n+LL | pub   foo<'a>(_s: &'a usize) -> bool { true }\n+   |    ^^^\n+help: add `fn` here to parse `foo` as a public function\n+   |\n+LL | pub fn foo<'a>(_s: &'a usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "667e02114a1a880699bd1eac3c9a8ab5628c26c4", "filename": "src/test/ui/pub/pub-ident-fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.fixed?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n pub fn foo(_s: usize) -> bool { true }\n-//~^ ERROR missing `fn` for method definition\n+//~^ ERROR missing `fn` for function definition\n \n fn main() {\n     foo(2);"}, {"sha": "91bbf58fe77e8cf0b45239be1dd059e72d4e98d4", "filename": "src/test/ui/pub/pub-ident-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n pub   foo(_s: usize) -> bool { true }\n-//~^ ERROR missing `fn` for method definition\n+//~^ ERROR missing `fn` for function definition\n \n fn main() {\n     foo(2);"}, {"sha": "1df6dd85ffec58c4fbc64febe4de8b10488cdbc0", "filename": "src/test/ui/pub/pub-ident-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -1,9 +1,9 @@\n-error: missing `fn` for method definition\n+error: missing `fn` for function definition\n   --> $DIR/pub-ident-fn.rs:13:4\n    |\n LL | pub   foo(_s: usize) -> bool { true }\n    |    ^^^\n-help: add `fn` here to parse `foo` as a public method\n+help: add `fn` here to parse `foo` as a public function\n    |\n LL | pub fn foo(_s: usize) -> bool { true }\n    |     ^^"}, {"sha": "2feb0266070d5283f7051d3708dd73420c1ccb14", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,4 @@\n+pub S<'a> {\n+//~^ ERROR missing `struct` for struct definition\n+}\n+fn main() {}"}, {"sha": "2bbcf5dfff01098a34c3a1098de7a92f47588dbd", "filename": "src/test/ui/pub/pub-ident-struct-with-lifetime.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct-with-lifetime.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,12 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/pub-ident-struct-with-lifetime.rs:1:4\n+   |\n+LL | pub S<'a> {\n+   |    ^\n+help: add `struct` here to parse `S` as a public struct\n+   |\n+LL | pub struct S<'a> {\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c86a9f2fdd655f00f36f69049d0c35f365dc03d9", "filename": "src/test/ui/pub/pub-ident-with-lifetime-incomplete.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.rs?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+}\n+\n+pub   foo<'a>\n+//~^ ERROR missing `fn` or `struct` for function or struct definition"}, {"sha": "0e0b127054d1d547d366d1e2b77aed1cf3164ae0", "filename": "src/test/ui/pub/pub-ident-with-lifetime-incomplete.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-with-lifetime-incomplete.stderr?ref=ac15b4f4bd2b83b4fa2ed2c31b987d7c54268937", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for function or struct definition\n+  --> $DIR/pub-ident-with-lifetime-incomplete.rs:4:4\n+   |\n+LL | pub   foo<'a>\n+   |    ^^^\n+\n+error: aborting due to previous error\n+"}]}