{"sha": "1ced98ac651510f1a614caf287fca88721c2b983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWQ5OGFjNjUxNTEwZjFhNjE0Y2FmMjg3ZmNhODg3MjFjMmI5ODM=", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-15T18:36:42Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2021-05-16T11:31:01Z"}, "message": "Remap after prepending cwd", "tree": {"sha": "06f73d805016164fb25f39c2512a36e497c6e6ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f73d805016164fb25f39c2512a36e497c6e6ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ced98ac651510f1a614caf287fca88721c2b983", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmChAnUACgkQGBtJ+fOP\nM3QI3wv6AxwqN1lc3c2QgpOosychu/EMn4I8DHhEx4/rEwTaoK5x8k0pdv3UiURQ\nmLUdYX/9G96HivBainNJCOXbh1fWisvdOqX8EFQFy3oGPpBypGmuRYcjqUb1RPZE\ngBDstb7vPD1Bhnssu979He3D9g2ZxqL5A/nZ4PBUP6RAwAsuvYLlNEqiRI7yJCyZ\njEIkaEVVvzeeJ/0/p6LDKHcVAqs2q7u1mnvJ6UsEpIb3q7joFz2stJSUFb8M87h+\nPH/PwNS4ufEsUhyL3zDZAIJSl1sR+omuFWWeekRsv4lDEvIkdH7WpejO1SV57irb\nzQtiQn5sb1PeuSxOrIo/OPifAA+nUXBeM/EmRtRoTtjFO0J7MbCVMP8S84FsUWtc\nGZuPEBbL4qy3EGzjwTA14Cd3fLbqXNZ3Snj/Rw5jYh4PXVN2pI+acDg/xCtsAKy7\nMkPUBkAwU8qd0Fasct0m8oC2DE6gaOgMbi/lm4p8gIgkHMBmcSJ+kLIwAZggmTV+\nMAiTqGYx\n=qcLO\n-----END PGP SIGNATURE-----", "payload": "tree 06f73d805016164fb25f39c2512a36e497c6e6ae\nparent b76ce696061f6c72a1df5aa6a935ade7cc30696b\nauthor Andy Wang <cbeuw.andy@gmail.com> 1621103802 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1621164661 +0100\n\nRemap after prepending cwd\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ced98ac651510f1a614caf287fca88721c2b983", "html_url": "https://github.com/rust-lang/rust/commit/1ced98ac651510f1a614caf287fca88721c2b983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ced98ac651510f1a614caf287fca88721c2b983/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b76ce696061f6c72a1df5aa6a935ade7cc30696b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b76ce696061f6c72a1df5aa6a935ade7cc30696b", "html_url": "https://github.com/rust-lang/rust/commit/b76ce696061f6c72a1df5aa6a935ade7cc30696b"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "1b7b851382e00dddcb95207c6c53b63084d5aef0", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ced98ac651510f1a614caf287fca88721c2b983/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ced98ac651510f1a614caf287fca88721c2b983/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=1ced98ac651510f1a614caf287fca88721c2b983", "patch": "@@ -497,11 +497,22 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                                 let working_dir = &self.tcx.sess.working_dir;\n                                 match working_dir {\n                                     RealFileName::LocalPath(absolute) => {\n-                                        // If working_dir has not been remapped, then we emit a\n-                                        // LocalPath variant as it's likely to be a valid path\n-                                        RealFileName::LocalPath(\n-                                            Path::new(absolute).join(path_to_file),\n-                                        )\n+                                        // Although neither working_dir or the file name were subject\n+                                        // to path remapping, the concatenation between the two may\n+                                        // be. Hence we need to do a remapping here.\n+                                        let joined = Path::new(absolute).join(path_to_file);\n+                                        let (joined, remapped) =\n+                                            source_map.path_mapping().map_prefix(joined);\n+                                        if remapped {\n+                                            RealFileName::Remapped {\n+                                                local_path: None,\n+                                                virtual_name: joined,\n+                                            }\n+                                        } else {\n+                                            RealFileName::LocalPath(\n+                                                Path::new(absolute).join(path_to_file),\n+                                            )\n+                                        }\n                                     }\n                                     RealFileName::Remapped { local_path: _, virtual_name } => {\n                                         // If working_dir has been remapped, then we emit"}]}