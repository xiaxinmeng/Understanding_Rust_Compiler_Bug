{"sha": "562b44d8c3dbcf7c36209774e50fe833e65a98d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MmI0NGQ4YzNkYmNmN2MzNjIwOTc3NGU1MGZlODMzZTY1YTk4ZDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-10T10:43:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-10T11:07:26Z"}, "message": "Rename ignored_generic_bounds -> type_alias_bounds\n\nFirst of all, the lint is specific for type aliases.  Second, it turns out the\nbounds are not entirely ignored but actually used when accessing associated\ntypes.  So change the wording of the lint, and adapt its name to reality.\n\nThe lint has never been on stable or beta, so renaming is safe.", "tree": {"sha": "c50ace35d913273050b942788d3156f08b35b70b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50ace35d913273050b942788d3156f08b35b70b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/562b44d8c3dbcf7c36209774e50fe833e65a98d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/562b44d8c3dbcf7c36209774e50fe833e65a98d6", "html_url": "https://github.com/rust-lang/rust/commit/562b44d8c3dbcf7c36209774e50fe833e65a98d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/562b44d8c3dbcf7c36209774e50fe833e65a98d6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81130ed4b104adf28921120416dcc9db3253c996", "url": "https://api.github.com/repos/rust-lang/rust/commits/81130ed4b104adf28921120416dcc9db3253c996", "html_url": "https://github.com/rust-lang/rust/commit/81130ed4b104adf28921120416dcc9db3253c996"}], "stats": {"total": 101, "additions": 68, "deletions": 33}, "files": [{"sha": "bdb36ab15b6243bc750b7b534a3f3d3b7b954fc2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=562b44d8c3dbcf7c36209774e50fe833e65a98d6", "patch": "@@ -1316,24 +1316,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     }\n }\n \n-/// Lint for trait and lifetime bounds that are (accidentally) accepted by the parser, but\n-/// ignored later.\n+/// Lint for trait and lifetime bounds in type aliases being mostly ignored:\n+/// They are relevant when using associated types, but otherwise neither checked\n+/// at definition site nor enforced at use site.\n \n-pub struct IgnoredGenericBounds;\n+pub struct TypeAliasBounds;\n \n declare_lint! {\n-    IGNORED_GENERIC_BOUNDS,\n+    TYPE_ALIAS_BOUNDS,\n     Warn,\n-    \"these generic bounds are ignored\"\n+    \"bounds in type aliases are not enforced\"\n }\n \n-impl LintPass for IgnoredGenericBounds {\n+impl LintPass for TypeAliasBounds {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(IGNORED_GENERIC_BOUNDS)\n+        lint_array!(TYPE_ALIAS_BOUNDS)\n     }\n }\n \n-impl EarlyLintPass for IgnoredGenericBounds {\n+impl EarlyLintPass for TypeAliasBounds {\n     fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n         let type_alias_generics = match item.node {\n             ast::ItemKind::Ty(_, ref generics) => generics,\n@@ -1343,8 +1344,8 @@ impl EarlyLintPass for IgnoredGenericBounds {\n         if !type_alias_generics.where_clause.predicates.is_empty() {\n             let spans : Vec<_> = type_alias_generics.where_clause.predicates.iter()\n                 .map(|pred| pred.span()).collect();\n-            cx.span_lint(IGNORED_GENERIC_BOUNDS, spans,\n-                \"where clauses are ignored in type aliases\");\n+            cx.span_lint(TYPE_ALIAS_BOUNDS, spans,\n+                \"where clauses are not enforced in type aliases\");\n         }\n         // The parameters must not have bounds\n         for param in type_alias_generics.params.iter() {\n@@ -1354,9 +1355,9 @@ impl EarlyLintPass for IgnoredGenericBounds {\n             };\n             if !spans.is_empty() {\n                 cx.span_lint(\n-                    IGNORED_GENERIC_BOUNDS,\n+                    TYPE_ALIAS_BOUNDS,\n                     spans,\n-                    \"bounds on generic parameters are ignored in type aliases\",\n+                    \"bounds on generic parameters are not enforced in type aliases\",\n                 );\n             }\n         }"}, {"sha": "38f7a0b6faa0fb896dd864e6f50c1db9c34d49d8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=562b44d8c3dbcf7c36209774e50fe833e65a98d6", "patch": "@@ -109,7 +109,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        UnusedDocComment,\n-                       IgnoredGenericBounds,\n+                       TypeAliasBounds,\n                        );\n \n     add_early_builtin_with_new!(sess,"}, {"sha": "7c3811e2ef28bad41106046465ac762e46d188a5", "filename": "src/test/compile-fail/issue-17994.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs?ref=562b44d8c3dbcf7c36209774e50fe833e65a98d6", "patch": "@@ -10,5 +10,5 @@\n \n trait Tr {}\n type Huh<T> where T: Tr = isize; //~  ERROR type parameter `T` is unused\n-                                 //~| WARNING where clauses are ignored in type aliases\n+                                 //~| WARNING where clauses are not enforced in type aliases\n fn main() {}"}, {"sha": "8bd9b0a901d65ddb823132c43006cc7f142ac9bd", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=562b44d8c3dbcf7c36209774e50fe833e65a98d6", "patch": "@@ -58,7 +58,7 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARNING bounds on generic parameters are ignored\n+    //~^ WARNING bounds on generic parameters are not enforced in type aliases\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error\n@@ -85,7 +85,7 @@ mod traits_where {\n     pub type Alias<T> where T: PrivTr = T;\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n-        //~| WARNING where clauses are ignored in type aliases\n+        //~| WARNING where clauses are not enforced in type aliases\n     pub trait Tr2<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error"}, {"sha": "7ec3afd9c870a2adf2fc509a5db7c0b156e9baf5", "filename": "src/test/ui/type-alias-bounds.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fui%2Ftype-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.rs?ref=562b44d8c3dbcf7c36209774e50fe833e65a98d6", "patch": "@@ -10,21 +10,20 @@\n \n // Test ignored_generic_bounds lint warning about bounds in type aliases\n \n-// must-compile-successfully\n #![allow(dead_code)]\n \n use std::rc::Rc;\n \n type SVec<T: Send+Send> = Vec<T>;\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n+//~^ WARN bounds on generic parameters are not enforced in type aliases [type_alias_bounds]\n type S2Vec<T> where T: Send = Vec<T>;\n-//~^ WARN where clauses are ignored in type aliases\n+//~^ WARN where clauses are not enforced in type aliases [type_alias_bounds]\n type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n+//~^ WARN bounds on generic parameters are not enforced in type aliases [type_alias_bounds]\n type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n-//~^ WARN bounds on generic parameters are ignored in type aliases\n+//~^ WARN bounds on generic parameters are not enforced in type aliases [type_alias_bounds]\n type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n-//~^ WARN where clauses are ignored in type aliases\n+//~^ WARN where clauses are not enforced in type aliases [type_alias_bounds]\n \n static STATIC : u32 = 0;\n \n@@ -48,4 +47,18 @@ fn foo<'a>(y: &'a i32) {\n     x.1.push(y); // &'a i32: 'static does not hold\n }\n \n+// Bounds are not checked either, i.e. the definition is not necessarily well-formed\n+struct Sendable<T: Send>(T);\n+type MySendable<T> = Sendable<T>; // no error here!\n+\n+// However, bounds *are* taken into account when accessing associated types\n+trait Bound { type Assoc; }\n+type T1<U: Bound> = U::Assoc;\n+//~^ WARN bounds on generic parameters are not enforced in type aliases\n+type T2<U> where U: Bound = U::Assoc;\n+//~^ WARN where clauses are not enforced in type aliases\n+type T3<U> = U::Assoc;\n+//~^ ERROR associated type `Assoc` not found for `U`\n+type T4<U> = <U as Bound>::Assoc;\n+\n fn main() {}"}, {"sha": "46aacd7321ccbc63bd49126aec26ea1982f8d4af", "filename": "src/test/ui/type-alias-bounds.stderr", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/562b44d8c3dbcf7c36209774e50fe833e65a98d6/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-bounds.stderr?ref=562b44d8c3dbcf7c36209774e50fe833e65a98d6", "patch": "@@ -1,32 +1,53 @@\n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/type-alias-bounds.rs:18:14\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:17:14\n    |\n LL | type SVec<T: Send+Send> = Vec<T>;\n    |              ^^^^ ^^^^\n    |\n-   = note: #[warn(ignored_generic_bounds)] on by default\n+   = note: #[warn(type_alias_bounds)] on by default\n \n-warning: where clauses are ignored in type aliases\n-  --> $DIR/type-alias-bounds.rs:20:21\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:19:21\n    |\n LL | type S2Vec<T> where T: Send = Vec<T>;\n    |                     ^^^^^^^\n \n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/type-alias-bounds.rs:22:19\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:21:19\n    |\n LL | type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);\n    |                   ^^ ^^\n \n-warning: bounds on generic parameters are ignored in type aliases\n-  --> $DIR/type-alias-bounds.rs:24:18\n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:23:18\n    |\n LL | type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);\n    |                  ^^ ^^\n \n-warning: where clauses are ignored in type aliases\n-  --> $DIR/type-alias-bounds.rs:26:25\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:25:25\n    |\n LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n    |                         ^^^^^  ^^^^^\n \n+warning: bounds on generic parameters are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:56:12\n+   |\n+LL | type T1<U: Bound> = U::Assoc;\n+   |            ^^^^^\n+\n+warning: where clauses are not enforced in type aliases\n+  --> $DIR/type-alias-bounds.rs:58:18\n+   |\n+LL | type T2<U> where U: Bound = U::Assoc;\n+   |                  ^^^^^^^^\n+\n+error[E0220]: associated type `Assoc` not found for `U`\n+  --> $DIR/type-alias-bounds.rs:60:14\n+   |\n+LL | type T3<U> = U::Assoc;\n+   |              ^^^^^^^^ associated type `Assoc` not found\n+\n+error: aborting due to previous error\n+\n+If you want more information on this error, try using \"rustc --explain E0220\""}]}