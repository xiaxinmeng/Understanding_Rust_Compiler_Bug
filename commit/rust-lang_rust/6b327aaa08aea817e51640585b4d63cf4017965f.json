{"sha": "6b327aaa08aea817e51640585b4d63cf4017965f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzI3YWFhMDhhZWE4MTdlNTE2NDA1ODViNGQ2M2NmNDAxNzk2NWY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-15T14:29:57Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-21T16:31:44Z"}, "message": "Check for ptr-to-int casts in const functions in THIR unsafeck", "tree": {"sha": "37a87fbaaa68c67a4f02968a1af8c0275ddfd3cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a87fbaaa68c67a4f02968a1af8c0275ddfd3cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b327aaa08aea817e51640585b4d63cf4017965f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b327aaa08aea817e51640585b4d63cf4017965f", "html_url": "https://github.com/rust-lang/rust/commit/6b327aaa08aea817e51640585b4d63cf4017965f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b327aaa08aea817e51640585b4d63cf4017965f/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "html_url": "https://github.com/rust-lang/rust/commit/592fecbafb9c2fe7f793bdb0529fcb25032bda6e"}], "stats": {"total": 119, "additions": 105, "deletions": 14}, "files": [{"sha": "66b30679ccb98f74af7fd5284e0a8c8752276c55", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b327aaa08aea817e51640585b4d63cf4017965f/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b327aaa08aea817e51640585b4d63cf4017965f/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=6b327aaa08aea817e51640585b4d63cf4017965f", "patch": "@@ -25,6 +25,7 @@ struct UnsafetyVisitor<'a, 'tcx> {\n     /// The `#[target_feature]` attributes of the body. Used for checking\n     /// calls to functions with `#[target_feature]` (RFC 2396).\n     body_target_features: &'tcx Vec<Symbol>,\n+    is_const: bool,\n }\n \n impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n@@ -187,6 +188,16 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 (Bound::Unbounded, Bound::Unbounded) => {}\n                 _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n             },\n+            ExprKind::Cast { source } => {\n+                let source = &self.thir[source];\n+                if self.tcx.features().const_raw_ptr_to_usize_cast\n+                    && self.is_const\n+                    && (source.ty.is_unsafe_ptr() || source.ty.is_fn_ptr())\n+                    && expr.ty.is_integral()\n+                {\n+                    self.requires_unsafe(expr.span, CastOfPointerToInt);\n+                }\n+            }\n             _ => {}\n         }\n \n@@ -230,7 +241,6 @@ enum UnsafeOpKind {\n     CallToUnsafeFunction,\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n-    #[allow(dead_code)] // FIXME\n     CastOfPointerToInt,\n     #[allow(dead_code)] // FIXME\n     UseOfMutableStatic,\n@@ -331,13 +341,19 @@ pub fn check_unsafety<'tcx>(\n     let body_target_features = &tcx.codegen_fn_attrs(def_id).target_features;\n     let safety_context =\n         if body_unsafety.is_unsafe() { SafetyContext::UnsafeFn } else { SafetyContext::Safe };\n+    let is_const = match tcx.hir().body_owner_kind(hir_id) {\n+        hir::BodyOwnerKind::Closure => false,\n+        hir::BodyOwnerKind::Fn => tcx.is_const_fn_raw(def_id.to_def_id()),\n+        hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => true,\n+    };\n     let mut visitor = UnsafetyVisitor {\n         tcx,\n         thir,\n         safety_context,\n         hir_context: hir_id,\n         body_unsafety,\n         body_target_features,\n+        is_const,\n     };\n     visitor.visit_expr(&thir[expr]);\n }"}, {"sha": "dcc9a243f0f399a0b73e63fe5820de16224cbcbe", "filename": "src/test/ui/cast/cast-ptr-to-int-const.mir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.mir.stderr?ref=6b327aaa08aea817e51640585b4d63cf4017965f", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:10:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:17:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "01ea627679d135b0d4201ec25a5437f5065be6cb", "filename": "src/test/ui/cast/cast-ptr-to-int-const.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.rs?ref=6b327aaa08aea817e51640585b4d63cf4017965f", "patch": "@@ -1,25 +1,19 @@\n-// gate-test-const_raw_ptr_to_usize_cast\n-// revisions: with_feature without_feature\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n \n-#![cfg_attr(with_feature, feature(const_raw_ptr_to_usize_cast))]\n+#![feature(const_raw_ptr_to_usize_cast)]\n \n fn main() {\n-    const X: usize = unsafe {\n-        main as usize //[without_feature]~ ERROR casting pointers to integers in constants is unstable\n-    };\n     const Y: u32 = 0;\n-    const Z: usize = unsafe {\n-        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n-    };\n     // Cast in `const` without `unsafe` block\n     const SAFE: usize = {\n-        &Y as *const u32 as usize //[without_feature]~ ERROR is unstable\n-        //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n+        &Y as *const u32 as usize\n+        //~^ ERROR cast of pointer to int is unsafe and requires unsafe\n     };\n }\n \n // Cast in `const fn` without `unsafe` block\n const fn test() -> usize {\n-    &0 as *const i32 as usize //[without_feature]~ ERROR is unstable\n-    //[with_feature]~^ ERROR cast of pointer to int is unsafe and requires unsafe\n+    &0 as *const i32 as usize\n+    //~^ ERROR cast of pointer to int is unsafe and requires unsafe\n }"}, {"sha": "dcc9a243f0f399a0b73e63fe5820de16224cbcbe", "filename": "src/test/ui/cast/cast-ptr-to-int-const.thir.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.thir.stderr?ref=6b327aaa08aea817e51640585b4d63cf4017965f", "patch": "@@ -0,0 +1,19 @@\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:10:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error[E0133]: cast of pointer to int is unsafe and requires unsafe function or block\n+  --> $DIR/cast-ptr-to-int-const.rs:17:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cast of pointer to int\n+   |\n+   = note: casting pointers to integers in constants\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "03e99eb752740c2822b372050269fc9679aacf15", "filename": "src/test/ui/cast/feature-gate-const_raw_ptr_to_usize_cast.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.rs?ref=6b327aaa08aea817e51640585b4d63cf4017965f", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    const X: usize = unsafe {\n+        main as usize //~ ERROR casting pointers to integers in constants is unstable\n+    };\n+    const Y: u32 = 0;\n+    const Z: usize = unsafe {\n+        &Y as *const u32 as usize //~ ERROR is unstable\n+    };\n+}\n+\n+const fn test() -> usize {\n+    &0 as *const i32 as usize //~ ERROR is unstable\n+}"}, {"sha": "4a0b424e1816b3d7df6a0d08821c1ccbb676d3ac", "filename": "src/test/ui/cast/feature-gate-const_raw_ptr_to_usize_cast.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b327aaa08aea817e51640585b4d63cf4017965f/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Ffeature-gate-const_raw_ptr_to_usize_cast.stderr?ref=6b327aaa08aea817e51640585b4d63cf4017965f", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:3:9\n+   |\n+LL |         main as usize\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:7:9\n+   |\n+LL |         &Y as *const u32 as usize\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0658]: casting pointers to integers in constant functions is unstable\n+  --> $DIR/feature-gate-const_raw_ptr_to_usize_cast.rs:12:5\n+   |\n+LL |     &0 as *const i32 as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}