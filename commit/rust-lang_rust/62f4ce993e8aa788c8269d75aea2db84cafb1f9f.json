{"sha": "62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "node_id": "C_kwDOAAsO6NoAKDYyZjRjZTk5M2U4YWE3ODhjODI2OWQ3NWFlYTJkYjg0Y2FmYjFmOWY", "commit": {"author": {"name": "Michael", "email": "michael.prantl@hotmail.de", "date": "2021-11-26T20:37:56Z"}, "committer": {"name": "Michael", "email": "michael.prantl@hotmail.de", "date": "2021-12-01T21:04:13Z"}, "message": "Stop treating extern crate loading failures as fatal errors", "tree": {"sha": "b6dac0bfe1866cd5c9d3521d01ee39b5329fa73c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6dac0bfe1866cd5c9d3521d01ee39b5329fa73c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "html_url": "https://github.com/rust-lang/rust/commit/62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/comments", "author": {"login": "mjptree", "id": 18014796, "node_id": "MDQ6VXNlcjE4MDE0Nzk2", "avatar_url": "https://avatars.githubusercontent.com/u/18014796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjptree", "html_url": "https://github.com/mjptree", "followers_url": "https://api.github.com/users/mjptree/followers", "following_url": "https://api.github.com/users/mjptree/following{/other_user}", "gists_url": "https://api.github.com/users/mjptree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjptree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjptree/subscriptions", "organizations_url": "https://api.github.com/users/mjptree/orgs", "repos_url": "https://api.github.com/users/mjptree/repos", "events_url": "https://api.github.com/users/mjptree/events{/privacy}", "received_events_url": "https://api.github.com/users/mjptree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjptree", "id": 18014796, "node_id": "MDQ6VXNlcjE4MDE0Nzk2", "avatar_url": "https://avatars.githubusercontent.com/u/18014796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjptree", "html_url": "https://github.com/mjptree", "followers_url": "https://api.github.com/users/mjptree/followers", "following_url": "https://api.github.com/users/mjptree/following{/other_user}", "gists_url": "https://api.github.com/users/mjptree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjptree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjptree/subscriptions", "organizations_url": "https://api.github.com/users/mjptree/orgs", "repos_url": "https://api.github.com/users/mjptree/repos", "events_url": "https://api.github.com/users/mjptree/events{/privacy}", "received_events_url": "https://api.github.com/users/mjptree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b3a571d2b57ea06a895932f876f28caebef5e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b3a571d2b57ea06a895932f876f28caebef5e1", "html_url": "https://github.com/rust-lang/rust/commit/10b3a571d2b57ea06a895932f876f28caebef5e1"}], "stats": {"total": 165, "additions": 124, "deletions": 41}, "files": [{"sha": "f3e7d84c1c5301f0c973d99b063b3053389fa16b", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -9,6 +9,7 @@ use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::FatalError;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -507,18 +508,31 @@ impl<'a> CrateLoader<'a> {\n         }))\n     }\n \n-    fn resolve_crate<'b>(\n+    fn resolve_crate_or_abort<'b>(\n         &'b mut self,\n         name: Symbol,\n         span: Span,\n         dep_kind: CrateDepKind,\n     ) -> CrateNum {\n+        self.resolve_crate(name, span, dep_kind).unwrap_or_else(|| FatalError.raise())\n+    }\n+\n+    fn resolve_crate<'b>(\n+        &'b mut self,\n+        name: Symbol,\n+        span: Span,\n+        dep_kind: CrateDepKind,\n+    ) -> Option<CrateNum> {\n         self.used_extern_options.insert(name);\n-        self.maybe_resolve_crate(name, dep_kind, None).unwrap_or_else(|err| {\n-            let missing_core =\n-                self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n-            err.report(&self.sess, span, missing_core)\n-        })\n+        self.maybe_resolve_crate(name, dep_kind, None).map_or_else(\n+            |err| {\n+                let missing_core =\n+                    self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n+                err.report(&self.sess, span, missing_core);\n+                None\n+            },\n+            |cnum| Some(cnum),\n+        )\n     }\n \n     fn maybe_resolve_crate<'b>(\n@@ -751,7 +765,7 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let cnum = self.resolve_crate_or_abort(name, DUMMY_SP, CrateDepKind::Implicit);\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -791,7 +805,7 @@ impl<'a> CrateLoader<'a> {\n             );\n         }\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let cnum = self.resolve_crate_or_abort(name, DUMMY_SP, CrateDepKind::Implicit);\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n@@ -991,7 +1005,7 @@ impl<'a> CrateLoader<'a> {\n         item: &ast::Item,\n         definitions: &Definitions,\n         def_id: LocalDefId,\n-    ) -> CrateNum {\n+    ) -> Option<CrateNum> {\n         match item.kind {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\n@@ -1011,7 +1025,7 @@ impl<'a> CrateLoader<'a> {\n                     CrateDepKind::Explicit\n                 };\n \n-                let cnum = self.resolve_crate(name, item.span, dep_kind);\n+                let cnum = self.resolve_crate(name, item.span, dep_kind)?;\n \n                 let path_len = definitions.def_path(def_id).data.len();\n                 self.update_extern_crate(\n@@ -1023,14 +1037,14 @@ impl<'a> CrateLoader<'a> {\n                         dependency_of: LOCAL_CRATE,\n                     },\n                 );\n-                cnum\n+                Some(cnum)\n             }\n             _ => bug!(),\n         }\n     }\n \n     pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit);\n+        let cnum = self.resolve_crate_or_abort(name, span, CrateDepKind::Explicit);\n \n         self.update_extern_crate(\n             cnum,"}, {"sha": "03181012bccb79224c5a6daeaa8362331fa880fc", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -220,7 +220,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, FatalError};\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n@@ -814,11 +814,11 @@ pub fn find_plugin_registrar(\n     span: Span,\n     name: Symbol,\n ) -> PathBuf {\n-    match find_plugin_registrar_impl(sess, metadata_loader, name) {\n-        Ok(res) => res,\n+    find_plugin_registrar_impl(sess, metadata_loader, name).unwrap_or_else(|err| {\n         // `core` is always available if we got as far as loading plugins.\n-        Err(err) => err.report(sess, span, false),\n-    }\n+        err.report(sess, span, false);\n+        FatalError.raise()\n+    })\n }\n \n fn find_plugin_registrar_impl<'a>(\n@@ -931,8 +931,8 @@ impl fmt::Display for MetadataError<'_> {\n }\n \n impl CrateError {\n-    crate fn report(self, sess: &Session, span: Span, missing_core: bool) -> ! {\n-        let mut err = match self {\n+    fn build_diag(self, sess: &Session, span: Span, missing_core: bool) -> DiagnosticBuilder<'_> {\n+        match self {\n             CrateError::NonAsciiName(crate_name) => sess.struct_span_err(\n                 span,\n                 &format!(\"cannot load a crate with a non-ascii name `{}`\", crate_name),\n@@ -1208,10 +1208,10 @@ impl CrateError {\n                 \"plugin `{}` only found in rlib format, but must be available in dylib format\",\n                 crate_name,\n             ),\n-        };\n+        }\n+    }\n \n-        err.emit();\n-        sess.abort_if_errors();\n-        unreachable!();\n+    crate fn report(self, sess: &Session, span: Span, missing_core: bool) {\n+        self.build_diag(sess, span, missing_core).emit();\n     }\n }"}, {"sha": "aaa946f75421bb3ffb99507f80d294b065145fd2", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -685,11 +685,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ItemKind::ExternCrate(orig_name) => {\n                 self.build_reduced_graph_for_extern_crate(\n                     orig_name,\n-                    ident,\n                     item,\n                     local_def_id,\n-                    sp,\n-                    expansion,\n                     vis,\n                     parent,\n                 );\n@@ -833,14 +830,16 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn build_reduced_graph_for_extern_crate(\n         &mut self,\n         orig_name: Option<Symbol>,\n-        ident: Ident,\n         item: &Item,\n         local_def_id: LocalDefId,\n-        sp: Span,\n-        expansion: LocalExpnId,\n         vis: ty::Visibility,\n         parent: Module<'a>,\n     ) {\n+        let ident = item.ident;\n+        let sp = item.span;\n+        let parent_scope = self.parent_scope;\n+        let expansion = parent_scope.expansion;\n+\n         let module = if orig_name.is_none() && ident.name == kw::SelfLower {\n             self.r\n                 .session\n@@ -856,10 +855,32 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         } else if orig_name == Some(kw::SelfLower) {\n             self.r.graph_root\n         } else {\n-            let crate_id =\n-                self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id);\n-            self.r.extern_crate_map.insert(local_def_id, crate_id);\n-            self.r.expect_module(crate_id.as_def_id())\n+            match self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id)\n+            {\n+                Some(crate_id) => {\n+                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n+                    self.r.expect_module(crate_id.as_def_id())\n+                }\n+                _ => {\n+                    let dummy_import = self.r.arenas.alloc_import(Import {\n+                        kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n+                        root_id: item.id,\n+                        id: item.id,\n+                        parent_scope: self.parent_scope,\n+                        imported_module: Cell::new(None),\n+                        has_attributes: !item.attrs.is_empty(),\n+                        use_span_with_attributes: item.span_with_attributes(),\n+                        use_span: item.span,\n+                        root_span: item.span,\n+                        span: item.span,\n+                        module_path: Vec::new(),\n+                        vis: Cell::new(vis),\n+                        used: Cell::new(true),\n+                    });\n+                    self.r.import_dummy_binding(dummy_import);\n+                    return;\n+                }\n+            }\n         };\n         let used = self.process_macro_use_imports(item, module);\n         let binding ="}, {"sha": "d2c64b7e4418d39fafc1268d8427fea650ed4f02", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -600,8 +600,10 @@ impl<'a> Resolver<'a> {\n \n     // Define a \"dummy\" resolution containing a Res::Err as a placeholder for a\n     // failed resolution\n-    fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n-        if let ImportKind::Single { target, .. } = import.kind {\n+    crate fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n+        if let ImportKind::Single { target, .. } | ImportKind::ExternCrate { target, .. } =\n+            import.kind\n+        {\n             let dummy_binding = self.dummy_binding;\n             let dummy_binding = self.import(dummy_binding, import);\n             self.per_ns(|this, ns| {"}, {"sha": "400d9f6e0ba12c94b6b6b1e414a07f13322518b1", "filename": "src/test/ui/crate-loading/missing-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: --target x86_64-unknown-uefi\n // needs-llvm-components: x86\n // rustc-env:CARGO=/usr/bin/cargo\n+#![feature(no_core)]\n #![no_core]\n extern crate core;\n //~^ ERROR can't find crate for `core`"}, {"sha": "70bcae1e0edd076cb843a176948814a7f569ff4c", "filename": "src/test/ui/crate-loading/missing-std.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -1,5 +1,5 @@\n error[E0463]: can't find crate for `core`\n-  --> $DIR/missing-std.rs:5:1\n+  --> $DIR/missing-std.rs:6:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ can't find crate\n@@ -8,6 +8,8 @@ LL | extern crate core;\n    = help: consider downloading the target with `rustup target add x86_64-unknown-uefi`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error: requires `sized` lang_item\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "b0628a4f6dd62a68fe6b8fe0490c293a45753dc4", "filename": "src/test/ui/extern-flag/empty-extern-arg.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -1,4 +1,8 @@\n error: extern location for std does not exist: \n \n-error: aborting due to previous error\n+error: language item required, but not found: `eh_personality`\n+\n+error: `#[panic_handler]` function required, but not found\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "fa7da83a6dfef3afc5725a89217b19cd96f2bfba", "filename": "src/test/ui/extern/extern-crate-multiple-missing.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -0,0 +1,8 @@\n+// If multiple `extern crate` resolutions fail each of them should produce an error\n+extern crate bar; //~ ERROR can't find crate for `bar`\n+extern crate foo; //~ ERROR can't find crate for `foo`\n+\n+fn main() {\n+    foo::something();\n+    bar::something();\n+}"}, {"sha": "893bb4fb26d0d955adfa0ccf50bbd3d4fd6ad8d1", "filename": "src/test/ui/extern/extern-crate-multiple-missing.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -0,0 +1,15 @@\n+error[E0463]: can't find crate for `bar`\n+  --> $DIR/extern-crate-multiple-missing.rs:2:1\n+   |\n+LL | extern crate bar;\n+   | ^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error[E0463]: can't find crate for `foo`\n+  --> $DIR/extern-crate-multiple-missing.rs:3:1\n+   |\n+LL | extern crate foo;\n+   | ^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "9ecae3e7a2b2437794896087d813dcafda6d3b3a", "filename": "src/test/ui/issues/issue-37131.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -4,6 +4,8 @@ error[E0463]: can't find crate for `std`\n    = help: consider downloading the target with `rustup target add thumbv6m-none-eabi`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error: requires `sized` lang_item\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "4e56cca33d6a9301febbb5b4ebbba23dbd2c531a", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -1,4 +1,5 @@\n-//~ ERROR 1:1: 1:1: can't find crate for `core` [E0463]\n+//~ ERROR can't find crate for `core`\n+//~^ ERROR can't find crate for `compiler_builtins`\n \n // compile-flags: --target thumbv7em-none-eabihf\n // needs-llvm-components: arm\n@@ -7,3 +8,6 @@\n #![no_std]\n \n extern crate cortex_m;\n+//~^ ERROR can't find crate for `cortex_m`\n+\n+fn main() {}"}, {"sha": "fcfa2bf119cff6f29c5410cdb34524ff1ab4972e", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62f4ce993e8aa788c8269d75aea2db84cafb1f9f/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr?ref=62f4ce993e8aa788c8269d75aea2db84cafb1f9f", "patch": "@@ -4,6 +4,16 @@ error[E0463]: can't find crate for `core`\n    = help: consider downloading the target with `rustup target add thumbv7em-none-eabihf`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error[E0463]: can't find crate for `compiler_builtins`\n+\n+error[E0463]: can't find crate for `cortex_m`\n+  --> $DIR/compiler-builtins-error.rs:10:1\n+   |\n+LL | extern crate cortex_m;\n+   | ^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}]}