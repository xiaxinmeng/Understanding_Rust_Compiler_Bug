{"sha": "e7ed8443eab1902432df5864a0fe7adae851d5ea", "node_id": "C_kwDOAAsO6NoAKGU3ZWQ4NDQzZWFiMTkwMjQzMmRmNTg2NGEwZmU3YWRhZTg1MWQ1ZWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-05T16:24:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-05T16:24:37Z"}, "message": "Rollup merge of #100168 - WaffleLapkin:improve_diagnostics_for_missing_type_in_a_const_item, r=compiler-errors\n\nImprove diagnostics for `const a: = expr;`\n\nAdds a suggestion to write a type when there is a colon, but the type is not present.\nI've also shrunk spans a little, so the suggestions are a little nicer.\n\nResolves #100146\n\nr? `@compiler-errors`", "tree": {"sha": "bb7a9c8dd3aed7b5f7a4040105d0ca15e31915e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7a9c8dd3aed7b5f7a4040105d0ca15e31915e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7ed8443eab1902432df5864a0fe7adae851d5ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7URFCRBK7hj4Ov3rIwAAFXAIAE/km4W+7+WIsFfuCc9kzv0d\naQD7jzU+F3SAXB/9BbMfvSiC5gCBZzjDIP3ryFwHS+N+6D1dDkjUMUc7XkTk76mw\npbVBqyFnc1q2G6iFKetol0Oc5ffinHZBzfKsXhWaMnPJ6XsbuWVxl7ItksQHMr0Y\nSCNew0cXNEQFCUKTM2z8pNCkfjLcO1rhzoXGuOpOjCJ9toLdhUOtf1b4eelO/XYb\nbT5yX6fimCdFNUhU5ThsRi4OMHq5kX0i9mph9hIAJJlnSn+8eoVoUFARAemSVgsy\npO1zSs4xjf56sxexuSbieVYYW3WdQJZqoPYjVF32SaJVQwvRPk4av3n6cmFPdAg=\n=Nago\n-----END PGP SIGNATURE-----\n", "payload": "tree bb7a9c8dd3aed7b5f7a4040105d0ca15e31915e5\nparent 404782dffe570849539b795f4d7aa330437bbc7d\nparent 743ad07c4b267bc5806a455b51ff07b3012591cc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659716677 +0530\ncommitter GitHub <noreply@github.com> 1659716677 +0530\n\nRollup merge of #100168 - WaffleLapkin:improve_diagnostics_for_missing_type_in_a_const_item, r=compiler-errors\n\nImprove diagnostics for `const a: = expr;`\n\nAdds a suggestion to write a type when there is a colon, but the type is not present.\nI've also shrunk spans a little, so the suggestions are a little nicer.\n\nResolves #100146\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ed8443eab1902432df5864a0fe7adae851d5ea", "html_url": "https://github.com/rust-lang/rust/commit/e7ed8443eab1902432df5864a0fe7adae851d5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7ed8443eab1902432df5864a0fe7adae851d5ea/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404782dffe570849539b795f4d7aa330437bbc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/404782dffe570849539b795f4d7aa330437bbc7d", "html_url": "https://github.com/rust-lang/rust/commit/404782dffe570849539b795f4d7aa330437bbc7d"}, {"sha": "743ad07c4b267bc5806a455b51ff07b3012591cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/743ad07c4b267bc5806a455b51ff07b3012591cc", "html_url": "https://github.com/rust-lang/rust/commit/743ad07c4b267bc5806a455b51ff07b3012591cc"}], "stats": {"total": 175, "additions": 109, "deletions": 66}, "files": [{"sha": "fb92ce41252fe5b4392803998703eaa6119a437f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -1179,39 +1179,47 @@ impl<'a> Parser<'a> {\n \n         // Parse the type of a `const` or `static mut?` item.\n         // That is, the `\":\" $ty` fragment.\n-        let ty = if self.eat(&token::Colon) {\n-            self.parse_ty()?\n-        } else {\n-            self.recover_missing_const_type(id, m)\n+        let ty = match (self.eat(&token::Colon), self.check(&token::Eq) | self.check(&token::Semi))\n+        {\n+            // If there wasn't a `:` or the colon was followed by a `=` or `;` recover a missing type.\n+            (true, false) => self.parse_ty()?,\n+            (colon, _) => self.recover_missing_const_type(colon, m),\n         };\n \n         let expr = if self.eat(&token::Eq) { Some(self.parse_expr()?) } else { None };\n         self.expect_semi()?;\n         Ok((id, ty, expr))\n     }\n \n-    /// We were supposed to parse `:` but the `:` was missing.\n+    /// We were supposed to parse `\":\" $ty` but the `:` or the type was missing.\n     /// This means that the type is missing.\n-    fn recover_missing_const_type(&mut self, id: Ident, m: Option<Mutability>) -> P<Ty> {\n+    fn recover_missing_const_type(&mut self, colon_present: bool, m: Option<Mutability>) -> P<Ty> {\n         // Construct the error and stash it away with the hope\n         // that typeck will later enrich the error with a type.\n         let kind = match m {\n             Some(Mutability::Mut) => \"static mut\",\n             Some(Mutability::Not) => \"static\",\n             None => \"const\",\n         };\n-        let mut err = self.struct_span_err(id.span, &format!(\"missing type for `{kind}` item\"));\n+\n+        let colon = match colon_present {\n+            true => \"\",\n+            false => \":\",\n+        };\n+\n+        let span = self.prev_token.span.shrink_to_hi();\n+        let mut err = self.struct_span_err(span, &format!(\"missing type for `{kind}` item\"));\n         err.span_suggestion(\n-            id.span,\n+            span,\n             \"provide a type for the item\",\n-            format!(\"{id}: <type>\"),\n+            format!(\"{colon} <type>\"),\n             Applicability::HasPlaceholders,\n         );\n-        err.stash(id.span, StashKey::ItemNoType);\n+        err.stash(span, StashKey::ItemNoType);\n \n         // The user intended that the type be inferred,\n         // so treat this as if the user wrote e.g. `const A: _ = expr;`.\n-        P(Ty { kind: TyKind::Infer, span: id.span, id: ast::DUMMY_NODE_ID, tokens: None })\n+        P(Ty { kind: TyKind::Infer, span, id: ast::DUMMY_NODE_ID, tokens: None })\n     }\n \n     /// Parses an enum declaration."}, {"sha": "f1dbe64f13abbb33e3cb4a323abb015be0288489", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -801,6 +801,9 @@ fn infer_placeholder_type<'a>(\n     match tcx.sess.diagnostic().steal_diagnostic(span, StashKey::ItemNoType) {\n         Some(mut err) => {\n             if !ty.references_error() {\n+                // Only suggest adding `:` if it was missing (and suggested by parsing diagnostic)\n+                let colon = if span == item_ident.span.shrink_to_hi() { \":\" } else { \"\" };\n+\n                 // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n                 // We are typeck and have the real type, so remove that and suggest the actual type.\n                 // FIXME(eddyb) this looks like it should be functionality on `Diagnostic`.\n@@ -816,7 +819,7 @@ fn infer_placeholder_type<'a>(\n                     err.span_suggestion(\n                         span,\n                         &format!(\"provide a type for the {item}\", item = kind),\n-                        format!(\"{}: {}\", item_ident, sugg_ty),\n+                        format!(\"{colon} {sugg_ty}\"),\n                         Applicability::MachineApplicable,\n                     );\n                 } else {"}, {"sha": "894ec8341f8e0aac35a4806c4b3b9da05fb0fbcd", "filename": "src/test/ui/attributes/issue-90873.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-90873.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -34,10 +34,10 @@ LL | #![a={impl std::ops::Neg for i8 {}}]\n    |                                     ^ consider adding a `main` function to `$DIR/issue-90873.rs`\n \n error: missing type for `static` item\n-  --> $DIR/issue-90873.rs:1:16\n+  --> $DIR/issue-90873.rs:1:17\n    |\n LL | #![u=||{static d=||1;}]\n-   |                ^ help: provide a type for the item: `d: <type>`\n+   |                 ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f581429a281540cf6242a6c4708beac4ccacee3f", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -17,10 +17,10 @@ LL | | }\n    = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: missing type for `const` item\n-  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n+  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:20\n    |\n LL |               const A = \"A\".$fn();\n-   |                     ^ help: provide a type for the constant: `A: usize`\n+   |                      ^ help: provide a type for the constant: `: usize`\n ...\n LL | / suite! {\n LL | |     len;\n@@ -31,13 +31,13 @@ LL | | }\n    = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n+  --> $DIR/issue-69396-const-no-type-in-macro.rs:4:20\n    |\n LL |               const A = \"A\".$fn();\n-   |                     ^\n-   |                     |\n-   |                     not allowed in type signatures\n-   |                     help: replace with the correct type: `bool`\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace with the correct type: `bool`\n ...\n LL | / suite! {\n LL | |     len;"}, {"sha": "fb1312c782aab95fe0d3ad607486324c38311bec", "filename": "src/test/ui/parser/issues/issue-89574.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-89574.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-89574.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-89574.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -1,8 +1,8 @@\n error: missing type for `const` item\n-  --> $DIR/issue-89574.rs:2:11\n+  --> $DIR/issue-89574.rs:2:22\n    |\n LL |     const EMPTY_ARRAY = [];\n-   |           ^^^^^^^^^^^ help: provide a type for the item: `EMPTY_ARRAY: <type>`\n+   |                      ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to previous error\n "}, {"sha": "5365b0a1f824264dcc5179720ea00b2e9863b25e", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -15,10 +15,10 @@ LL | const B;\n    |        help: provide a definition for the constant: `= <expr>;`\n \n error: missing type for `const` item\n-  --> $DIR/item-free-const-no-body-semantic-fail.rs:6:7\n+  --> $DIR/item-free-const-no-body-semantic-fail.rs:6:8\n    |\n LL | const B;\n-   |       ^ help: provide a type for the item: `B: <type>`\n+   |        ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1b61e430546e0de76e4a53c27209740de9af8ab0", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -31,16 +31,16 @@ LL | static mut D;\n    |             help: provide a definition for the static: `= <expr>;`\n \n error: missing type for `static` item\n-  --> $DIR/item-free-static-no-body-semantic-fail.rs:6:8\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:6:9\n    |\n LL | static B;\n-   |        ^ help: provide a type for the item: `B: <type>`\n+   |         ^ help: provide a type for the item: `: <type>`\n \n error: missing type for `static mut` item\n-  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:12\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:13\n    |\n LL | static mut D;\n-   |            ^ help: provide a type for the item: `D: <type>`\n+   |             ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "52e0658949d3dd64e5144f392de1cc68a6089e9c", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -16,10 +16,10 @@ LL | }\n    | - the item list ends here\n \n error: missing type for `static` item\n-  --> $DIR/removed-syntax-static-fn.rs:4:12\n+  --> $DIR/removed-syntax-static-fn.rs:4:14\n    |\n LL |     static fn f() {}\n-   |            ^^ help: provide a type for the item: `r#fn: <type>`\n+   |              ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c6fdcdadbeafc22822019764337289151c68180f", "filename": "src/test/ui/suggestions/const-no-type.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -14,38 +14,38 @@ fn main() {}\n const C2 = 42;\n //~^ ERROR missing type for `const` item\n //~| HELP provide a type for the item\n-//~| SUGGESTION C2: <type>\n+//~| SUGGESTION : <type>\n \n #[cfg(FALSE)]\n static S2 = \"abc\";\n //~^ ERROR missing type for `static` item\n //~| HELP provide a type for the item\n-//~| SUGGESTION S2: <type>\n+//~| SUGGESTION : <type>\n \n #[cfg(FALSE)]\n static mut SM2 = \"abc\";\n //~^ ERROR missing type for `static mut` item\n //~| HELP provide a type for the item\n-//~| SUGGESTION SM2: <type>\n+//~| SUGGESTION : <type>\n \n // These will, so the diagnostics should be stolen by typeck:\n \n const C = 42;\n //~^ ERROR missing type for `const` item\n //~| HELP provide a type for the constant\n-//~| SUGGESTION C: i32\n+//~| SUGGESTION : i32\n \n const D = &&42;\n //~^ ERROR missing type for `const` item\n //~| HELP provide a type for the constant\n-//~| SUGGESTION D: &&i32\n+//~| SUGGESTION : &&i32\n \n static S = Vec::<String>::new();\n //~^ ERROR missing type for `static` item\n //~| HELP provide a type for the static variable\n-//~| SUGGESTION S: Vec<String>\n+//~| SUGGESTION : Vec<String>\n \n static mut SM = \"abc\";\n //~^ ERROR missing type for `static mut` item\n //~| HELP provide a type for the static variable\n-//~| SUGGESTION &str\n+//~| SUGGESTION : &str"}, {"sha": "bd703992fd4a623445a62f9e2c26b8c585ec223a", "filename": "src/test/ui/suggestions/const-no-type.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -1,44 +1,44 @@\n error: missing type for `const` item\n-  --> $DIR/const-no-type.rs:33:7\n+  --> $DIR/const-no-type.rs:33:8\n    |\n LL | const C = 42;\n-   |       ^ help: provide a type for the constant: `C: i32`\n+   |        ^ help: provide a type for the constant: `: i32`\n \n error: missing type for `const` item\n-  --> $DIR/const-no-type.rs:38:7\n+  --> $DIR/const-no-type.rs:38:8\n    |\n LL | const D = &&42;\n-   |       ^ help: provide a type for the constant: `D: &&i32`\n+   |        ^ help: provide a type for the constant: `: &&i32`\n \n error: missing type for `static` item\n-  --> $DIR/const-no-type.rs:43:8\n+  --> $DIR/const-no-type.rs:43:9\n    |\n LL | static S = Vec::<String>::new();\n-   |        ^ help: provide a type for the static variable: `S: Vec<String>`\n+   |         ^ help: provide a type for the static variable: `: Vec<String>`\n \n error: missing type for `static mut` item\n-  --> $DIR/const-no-type.rs:48:12\n+  --> $DIR/const-no-type.rs:48:14\n    |\n LL | static mut SM = \"abc\";\n-   |            ^^ help: provide a type for the static variable: `SM: &str`\n+   |              ^ help: provide a type for the static variable: `: &str`\n \n error: missing type for `const` item\n-  --> $DIR/const-no-type.rs:14:7\n+  --> $DIR/const-no-type.rs:14:9\n    |\n LL | const C2 = 42;\n-   |       ^^ help: provide a type for the item: `C2: <type>`\n+   |         ^ help: provide a type for the item: `: <type>`\n \n error: missing type for `static` item\n-  --> $DIR/const-no-type.rs:20:8\n+  --> $DIR/const-no-type.rs:20:10\n    |\n LL | static S2 = \"abc\";\n-   |        ^^ help: provide a type for the item: `S2: <type>`\n+   |          ^ help: provide a type for the item: `: <type>`\n \n error: missing type for `static mut` item\n-  --> $DIR/const-no-type.rs:26:12\n+  --> $DIR/const-no-type.rs:26:15\n    |\n LL | static mut SM2 = \"abc\";\n-   |            ^^^ help: provide a type for the item: `SM2: <type>`\n+   |               ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "ede3ebfa739c4f3ce3ca5e584799f62652aac022", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -1,8 +1,8 @@\n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:6:7\n+  --> $DIR/unnamable-types.rs:6:8\n    |\n LL | const A = 5;\n-   |       ^ help: provide a type for the constant: `A: i32`\n+   |        ^ help: provide a type for the constant: `: i32`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/unnamable-types.rs:10:11\n@@ -26,10 +26,10 @@ LL | const C: _ = || 42;\n    |              ^^^^^\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:23:7\n+  --> $DIR/unnamable-types.rs:23:8\n    |\n LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n-   |       ^\n+   |        ^\n    |\n note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:23:31: 23:45]>` cannot be named\n   --> $DIR/unnamable-types.rs:23:11\n@@ -38,22 +38,22 @@ LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:29:7\n+  --> $DIR/unnamable-types.rs:29:8\n    |\n LL | const E = foo;\n-   |       ^ help: provide a type for the constant: `E: fn() -> i32`\n+   |        ^ help: provide a type for the constant: `: fn() -> i32`\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:32:7\n+  --> $DIR/unnamable-types.rs:32:8\n    |\n LL | const F = S { t: foo };\n-   |       ^ help: provide a type for the constant: `F: S<fn() -> i32>`\n+   |        ^ help: provide a type for the constant: `: S<fn() -> i32>`\n \n error: missing type for `const` item\n-  --> $DIR/unnamable-types.rs:37:7\n+  --> $DIR/unnamable-types.rs:37:8\n    |\n LL | const G = || -> i32 { yield 0; return 1; };\n-   |       ^\n+   |        ^\n    |\n note: however, the inferred type `[generator@$DIR/unnamable-types.rs:37:11: 37:20]` cannot be named\n   --> $DIR/unnamable-types.rs:37:11"}, {"sha": "a5f68beb1d5229031d146dfc74e6c8a1435bff45", "filename": "src/test/ui/typeck/issue-100164.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.fixed?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+const _A: i32 = 123;\n+//~^ ERROR: missing type for `const` item\n+\n+fn main() {\n+    const _B: i32 = 123;\n+    //~^ ERROR: missing type for `const` item\n+}"}, {"sha": "7efb9ac624042fb03f346351cac4abda6e472b53", "filename": "src/test/ui/typeck/issue-100164.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.rs?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+const _A: = 123;\n+//~^ ERROR: missing type for `const` item\n+\n+fn main() {\n+    const _B: = 123;\n+    //~^ ERROR: missing type for `const` item\n+}"}, {"sha": "06a132d6514293c6e74b775f30bdac996105bda1", "filename": "src/test/ui/typeck/issue-100164.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-100164.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -0,0 +1,14 @@\n+error: missing type for `const` item\n+  --> $DIR/issue-100164.rs:3:10\n+   |\n+LL | const _A: = 123;\n+   |          ^ help: provide a type for the constant: `i32`\n+\n+error: missing type for `const` item\n+  --> $DIR/issue-100164.rs:7:14\n+   |\n+LL |     const _B: = 123;\n+   |              ^ help: provide a type for the constant: `i32`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c820d1e08c4adbd2abb9f040739eee8415827e26", "filename": "src/test/ui/typeck/issue-79040.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -7,10 +7,10 @@ LL |     const FOO = \"hello\" + 1;\n    |                 &str\n \n error: missing type for `const` item\n-  --> $DIR/issue-79040.rs:2:11\n+  --> $DIR/issue-79040.rs:2:14\n    |\n LL |     const FOO = \"hello\" + 1;\n-   |           ^^^ help: provide a type for the item: `FOO: <type>`\n+   |              ^ help: provide a type for the item: `: <type>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c57f71b8057a956a93c67ea818679891ee4d9b85", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7ed8443eab1902432df5864a0fe7adae851d5ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=e7ed8443eab1902432df5864a0fe7adae851d5ea", "patch": "@@ -189,10 +189,10 @@ LL ~     b: (T, T),\n    |\n \n error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:73:12\n+  --> $DIR/typeck_type_placeholder_item.rs:73:13\n    |\n LL |     static A = 42;\n-   |            ^ help: provide a type for the static variable: `A: i32`\n+   |             ^ help: provide a type for the static variable: `: i32`\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:75:15"}]}