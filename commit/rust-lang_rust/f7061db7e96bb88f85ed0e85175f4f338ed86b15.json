{"sha": "f7061db7e96bb88f85ed0e85175f4f338ed86b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MDYxZGI3ZTk2YmI4OGY4NWVkMGU4NTE3NWY0ZjMzOGVkODZiMTU=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-06-30T19:27:32Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-06-30T19:27:32Z"}, "message": "Update mem::replace example to not be identical to mem::take\n\nThis also adds assertions that the operations work as expected.", "tree": {"sha": "1c8b591cba21d4c99965402be46ad6fe85c6f7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8b591cba21d4c99965402be46ad6fe85c6f7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7061db7e96bb88f85ed0e85175f4f338ed86b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7061db7e96bb88f85ed0e85175f4f338ed86b15", "html_url": "https://github.com/rust-lang/rust/commit/f7061db7e96bb88f85ed0e85175f4f338ed86b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7061db7e96bb88f85ed0e85175f4f338ed86b15/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af8e872ea5ac77effa59f8d3f8794f12cb8865c", "html_url": "https://github.com/rust-lang/rust/commit/0af8e872ea5ac77effa59f8d3f8794f12cb8865c"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "b31522db474b7613d98757b92a151e39fa37ca27", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f7061db7e96bb88f85ed0e85175f4f338ed86b15/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7061db7e96bb88f85ed0e85175f4f338ed86b15/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=f7061db7e96bb88f85ed0e85175f4f338ed86b15", "patch": "@@ -552,6 +552,12 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n ///         mem::take(&mut self.buf)\n ///     }\n /// }\n+///\n+/// let mut buffer = Buffer { buf: vec![0, 1] };\n+/// assert_eq!(buffer.buf.len(), 2);\n+///\n+/// assert_eq!(buffer.get_and_reset(), vec![0, 1]);\n+/// assert_eq!(buffer.buf.len(), 0);\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n@@ -586,17 +592,17 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// struct Buffer<T> { buf: Vec<T> }\n ///\n /// impl<T> Buffer<T> {\n-///     fn get_and_reset(&mut self) -> Vec<T> {\n+///     fn replace_index(&mut self, i: usize, v: T) -> T {\n ///         // error: cannot move out of dereference of `&mut`-pointer\n-///         let buf = self.buf;\n-///         self.buf = Vec::new();\n-///         buf\n+///         let t = self.buf[i];\n+///         self.buf[i] = v;\n+///         t\n ///     }\n /// }\n /// ```\n ///\n-/// Note that `T` does not necessarily implement [`Clone`], so it can't even clone and reset\n-/// `self.buf`. But `replace` can be used to disassociate the original value of `self.buf` from\n+/// Note that `T` does not necessarily implement [`Clone`], so we can't even clone `self.buf[i]` to\n+/// avoid the move. But `replace` can be used to disassociate the original value at that index from\n /// `self`, allowing it to be returned:\n ///\n /// ```\n@@ -605,10 +611,16 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n ///\n /// # struct Buffer<T> { buf: Vec<T> }\n /// impl<T> Buffer<T> {\n-///     fn get_and_reset(&mut self) -> Vec<T> {\n-///         mem::replace(&mut self.buf, Vec::new())\n+///     fn replace_index(&mut self, i: usize, v: T) -> T {\n+///         mem::replace(&mut self.buf[i], v)\n ///     }\n /// }\n+///\n+/// let mut buffer = Buffer { buf: vec![0, 1] };\n+/// assert_eq!(buffer.buf[0], 0);\n+///\n+/// assert_eq!(buffer.replace_index(0, 2), 0);\n+/// assert_eq!(buffer.buf[0], 2);\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html"}]}