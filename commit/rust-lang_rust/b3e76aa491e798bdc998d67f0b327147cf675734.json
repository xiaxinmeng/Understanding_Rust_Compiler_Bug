{"sha": "b3e76aa491e798bdc998d67f0b327147cf675734", "node_id": "C_kwDOAAsO6NoAKGIzZTc2YWE0OTFlNzk4YmRjOTk4ZDY3ZjBiMzI3MTQ3Y2Y2NzU3MzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-14T04:06:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-14T04:06:53Z"}, "message": "Rollup merge of #100479 - compiler-errors:argument-type-error-improvements, r=lcnr\n\nArgument type error improvements\n\nMotivated by this interesting code snippet:\n\n```rust\n#[derive(Copy, Clone)]\nstruct Wrapper<T>(T);\n\nfn foo(_: fn(i32), _: Wrapper<i32>) {}\n\nfn f(_: u32) {}\n\nfn main() {\n    let w = Wrapper::<isize>(1isize);\n    foo(f, w);\n}\n```\n\nWhich currently errors like:\n```\nerror[E0308]: arguments to this function are incorrect\n  --> src/main.rs:10:5\n   |\n10 |     foo(f, w);\n   |     ^^^ -  - expected `i32`, found `isize`\n   |         |\n   |         expected `i32`, found `u32`\n   |\n   = note: expected fn pointer `fn(i32)`\n                 found fn item `fn(u32) {f}`\n   = note: expected struct `Wrapper<i32>`\n              found struct `Wrapper<isize>`\nnote: function defined here\n  --> src/main.rs:4:4\n   |\n4  | fn foo(_: fn(i32), _: Wrapper<i32>) {}\n   |    ^^^ ----------  ---------------\n```\n\nSpecifically, that double `expected .. found ..` which is very difficult to correlate to the types in the arguments. Also, the fact that \"expected `i32`, found `isize`\" and the other argument mismatch label don't even really explain what's going on here.\n\nAfter this PR:\n```\nerror[E0308]: arguments to this function are incorrect\n  --> $DIR/two-mismatch-notes.rs:10:5\n   |\nLL |     foo(f, w);\n   |     ^^^\n   |\nnote: expected fn pointer, found fn item\n  --> $DIR/two-mismatch-notes.rs:10:9\n   |\nLL |     foo(f, w);\n   |         ^\n   = note: expected fn pointer `fn(i32)`\n                 found fn item `fn(u32) {f}`\nnote: expected struct `Wrapper`, found a different struct `Wrapper`\n  --> $DIR/two-mismatch-notes.rs:10:12\n   |\nLL |     foo(f, w);\n   |            ^\n   = note: expected struct `Wrapper<i32>`\n              found struct `Wrapper<isize>`\nnote: function defined here\n  --> $DIR/two-mismatch-notes.rs:4:4\n   |\nLL | fn foo(_: fn(i32), _: Wrapper<i32>) {}\n   |    ^^^ ----------  ---------------\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nYeah, it's a bit verbose, but much clearer IMO.\n\n---\n\nOpen to discussions about how this could be further improved. Motivated by `@jyn514's` [tweet](https://mobile.twitter.com/joshuayn514/status/1558042020601634816) here.", "tree": {"sha": "36c0a5fdffbce3b762baf8fb62716354d27355b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c0a5fdffbce3b762baf8fb62716354d27355b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3e76aa491e798bdc998d67f0b327147cf675734", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+HTdCRBK7hj4Ov3rIwAAzFkIAIv6ArKmA+/IpQxxU4WZ1OPh\nC8D568phG69bc7ctedJS6P22wya/xa5liBKgRnE9G/2mA3qHWHysOozOZJdj6Z4C\nXOH/vQq3Ixp4Do94RmTO2DHih77Kqh9DyXxBASnYYFjcVO3zWp7WGGzKicmADww6\nKiyJcwF2FxxkyC9zHKZToIup8ddAZo/TZ5jzHoR6a9eupOKpCnStJabxd/hWAY2g\nahz4gAj9nKOXt92CrQRvV8RZwT5Sc/VGuMUDz6jNN2XABztwoPbsl4X5hoojZWu/\nzC4lpWXx99qFrALMDNDru3yyMuajvR4NrrDuKlUUCHuWabvSn8y0ytoDSYZhl9I=\n=Mtdg\n-----END PGP SIGNATURE-----\n", "payload": "tree 36c0a5fdffbce3b762baf8fb62716354d27355b7\nparent 809fc868714a10e9b706386098b4f3870275278e\nparent aa1a07f114740ef067a5a586fbe5d4f763788460\nauthor Michael Goulet <michael@errs.io> 1660450013 -0700\ncommitter GitHub <noreply@github.com> 1660450013 -0700\n\nRollup merge of #100479 - compiler-errors:argument-type-error-improvements, r=lcnr\n\nArgument type error improvements\n\nMotivated by this interesting code snippet:\n\n```rust\n#[derive(Copy, Clone)]\nstruct Wrapper<T>(T);\n\nfn foo(_: fn(i32), _: Wrapper<i32>) {}\n\nfn f(_: u32) {}\n\nfn main() {\n    let w = Wrapper::<isize>(1isize);\n    foo(f, w);\n}\n```\n\nWhich currently errors like:\n```\nerror[E0308]: arguments to this function are incorrect\n  --> src/main.rs:10:5\n   |\n10 |     foo(f, w);\n   |     ^^^ -  - expected `i32`, found `isize`\n   |         |\n   |         expected `i32`, found `u32`\n   |\n   = note: expected fn pointer `fn(i32)`\n                 found fn item `fn(u32) {f}`\n   = note: expected struct `Wrapper<i32>`\n              found struct `Wrapper<isize>`\nnote: function defined here\n  --> src/main.rs:4:4\n   |\n4  | fn foo(_: fn(i32), _: Wrapper<i32>) {}\n   |    ^^^ ----------  ---------------\n```\n\nSpecifically, that double `expected .. found ..` which is very difficult to correlate to the types in the arguments. Also, the fact that \"expected `i32`, found `isize`\" and the other argument mismatch label don't even really explain what's going on here.\n\nAfter this PR:\n```\nerror[E0308]: arguments to this function are incorrect\n  --> $DIR/two-mismatch-notes.rs:10:5\n   |\nLL |     foo(f, w);\n   |     ^^^\n   |\nnote: expected fn pointer, found fn item\n  --> $DIR/two-mismatch-notes.rs:10:9\n   |\nLL |     foo(f, w);\n   |         ^\n   = note: expected fn pointer `fn(i32)`\n                 found fn item `fn(u32) {f}`\nnote: expected struct `Wrapper`, found a different struct `Wrapper`\n  --> $DIR/two-mismatch-notes.rs:10:12\n   |\nLL |     foo(f, w);\n   |            ^\n   = note: expected struct `Wrapper<i32>`\n              found struct `Wrapper<isize>`\nnote: function defined here\n  --> $DIR/two-mismatch-notes.rs:4:4\n   |\nLL | fn foo(_: fn(i32), _: Wrapper<i32>) {}\n   |    ^^^ ----------  ---------------\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n```\n\nYeah, it's a bit verbose, but much clearer IMO.\n\n---\n\nOpen to discussions about how this could be further improved. Motivated by `@jyn514's` [tweet](https://mobile.twitter.com/joshuayn514/status/1558042020601634816) here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e76aa491e798bdc998d67f0b327147cf675734", "html_url": "https://github.com/rust-lang/rust/commit/b3e76aa491e798bdc998d67f0b327147cf675734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3e76aa491e798bdc998d67f0b327147cf675734/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "809fc868714a10e9b706386098b4f3870275278e", "url": "https://api.github.com/repos/rust-lang/rust/commits/809fc868714a10e9b706386098b4f3870275278e", "html_url": "https://github.com/rust-lang/rust/commit/809fc868714a10e9b706386098b4f3870275278e"}, {"sha": "aa1a07f114740ef067a5a586fbe5d4f763788460", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1a07f114740ef067a5a586fbe5d4f763788460", "html_url": "https://github.com/rust-lang/rust/commit/aa1a07f114740ef067a5a586fbe5d4f763788460"}], "stats": {"total": 96, "additions": 76, "deletions": 20}, "files": [{"sha": "772b81992c46b9252de05eb66a0c2653f951ad6f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -1424,7 +1424,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// E0271, like `src/test/ui/issues/issue-39970.stderr`.\n     #[tracing::instrument(\n         level = \"debug\",\n-        skip(self, diag, secondary_span, swap_secondary_and_primary, force_label)\n+        skip(self, diag, secondary_span, swap_secondary_and_primary, prefer_label)\n     )]\n     pub fn note_type_err(\n         &self,\n@@ -1434,7 +1434,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut values: Option<ValuePairs<'tcx>>,\n         terr: &TypeError<'tcx>,\n         swap_secondary_and_primary: bool,\n-        force_label: bool,\n+        prefer_label: bool,\n     ) {\n         let span = cause.span();\n \n@@ -1612,7 +1612,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             TypeError::ObjectUnsafeCoercion(_) => {}\n             _ => {\n                 let mut label_or_note = |span: Span, msg: &str| {\n-                    if force_label || &[span] == diag.span.primary_spans() {\n+                    if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n                         diag.span_label(span, msg);\n                     } else {\n                         diag.span_note(span, msg);"}, {"sha": "a7df5320296cd77b7e52107a487fd4d33e8bf0cf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -544,7 +544,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerced_ty = expectation.only_has_type(self).unwrap_or(formal_input_ty);\n             let can_coerce = self.can_coerce(arg_ty, coerced_ty);\n             if !can_coerce {\n-                return Compatibility::Incompatible(None);\n+                return Compatibility::Incompatible(Some(ty::error::TypeError::Sorts(\n+                    ty::error::ExpectedFound::new(true, coerced_ty, arg_ty),\n+                )));\n             }\n \n             // Using probe here, since we don't want this subtyping to affect inference."}, {"sha": "804cb1aa322190344eecfd1d60c619cfce52f32a", "filename": "src/test/ui/argument-suggestions/issue-96638.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.stderr?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -2,7 +2,9 @@ error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n   --> $DIR/issue-96638.rs:8:5\n    |\n LL |     f(&x, \"\");\n-   |     ^ -- an argument of type `usize` is missing\n+   |     ^ --  -- expected `usize`, found `&str`\n+   |       |\n+   |       an argument of type `usize` is missing\n    |\n note: function defined here\n   --> $DIR/issue-96638.rs:1:4"}, {"sha": "b5dedf0f4fa05494a8b9dea6823f83639cda07ef", "filename": "src/test/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -2,8 +2,9 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n   --> $DIR/issue-97484.rs:12:5\n    |\n LL |     foo(&&A, B, C, D, E, F, G);\n-   |     ^^^      -  -        - argument of type `F` unexpected\n-   |              |  |\n+   |     ^^^      -  -     -  - argument of type `F` unexpected\n+   |              |  |     |\n+   |              |  |     expected `&E`, found struct `E`\n    |              |  argument of type `C` unexpected\n    |              argument of type `B` unexpected\n    |"}, {"sha": "1309041ab9a59b346c4b3b38d05055600c5d5dc0", "filename": "src/test/ui/argument-suggestions/two-mismatch-notes.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.rs?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -0,0 +1,11 @@\n+#[derive(Copy, Clone)]\n+struct Wrapper<T>(T);\n+\n+fn foo(_: fn(i32), _: Wrapper<i32>) {}\n+\n+fn f(_: u32) {}\n+\n+fn main() {\n+    let w = Wrapper::<isize>(1isize);\n+    foo(f, w); //~ ERROR arguments to this function are incorrect\n+}"}, {"sha": "7873cf964cbbc978b278bf3cf58b0a5320152d66", "filename": "src/test/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: arguments to this function are incorrect\n+  --> $DIR/two-mismatch-notes.rs:10:5\n+   |\n+LL |     foo(f, w);\n+   |     ^^^\n+   |\n+note: expected `i32`, found `u32`\n+  --> $DIR/two-mismatch-notes.rs:10:9\n+   |\n+LL |     foo(f, w);\n+   |         ^\n+   = note: expected fn pointer `fn(i32)`\n+                 found fn item `fn(u32) {f}`\n+note: expected `i32`, found `isize`\n+  --> $DIR/two-mismatch-notes.rs:10:12\n+   |\n+LL |     foo(f, w);\n+   |            ^\n+   = note: expected struct `Wrapper<i32>`\n+              found struct `Wrapper<isize>`\n+note: function defined here\n+  --> $DIR/two-mismatch-notes.rs:4:4\n+   |\n+LL | fn foo(_: fn(i32), _: Wrapper<i32>) {}\n+   |    ^^^ ----------  ---------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e499d0572f607c278f7f6ad8334de0d29e3e34fb", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -2,11 +2,13 @@ error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n LL |     print_x(X);\n-   |     ^^^^^^^---\n-   |            ||\n-   |            |expected reference, found struct `X`\n-   |            an argument of type `&str` is missing\n+   |     ^^^^^^^--- an argument of type `&str` is missing\n    |\n+note: expected reference, found struct `X`\n+  --> $DIR/issue-18819.rs:16:13\n+   |\n+LL |     print_x(X);\n+   |             ^\n    = note: expected reference `&dyn Foo<Item = bool>`\n                  found struct `X`\n note: function defined here"}, {"sha": "4c952669cfafda9f0aae592cf2350f1178f3af00", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -2,10 +2,13 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:6:34\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n-   |                                  ^^^^ -  - argument of type `{integer}` unexpected\n-   |                                       |\n-   |                                       expected tuple, found integer\n+   |                                  ^^^^    - argument of type `{integer}` unexpected\n    |\n+note: expected tuple, found integer\n+  --> $DIR/args-instead-of-tuple-errors.rs:6:39\n+   |\n+LL |     let _: Option<(i32, bool)> = Some(1, 2);\n+   |                                       ^\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n note: tuple variant defined here\n@@ -22,10 +25,13 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n    |\n LL |     int_bool(1, 2);\n-   |     ^^^^^^^^ -  - argument of type `{integer}` unexpected\n-   |              |\n-   |              expected tuple, found integer\n+   |     ^^^^^^^^    - argument of type `{integer}` unexpected\n    |\n+note: expected tuple, found integer\n+  --> $DIR/args-instead-of-tuple-errors.rs:8:14\n+   |\n+LL |     int_bool(1, 2);\n+   |              ^\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n note: function defined here"}, {"sha": "968cb75db7633582680eee04cd997990409bbc1e", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e76aa491e798bdc998d67f0b327147cf675734/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=b3e76aa491e798bdc998d67f0b327147cf675734", "patch": "@@ -2,10 +2,13 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);\n-   |                ^^^^ ---------  ------------- argument of type `Vec<&Process>` unexpected\n-   |                     |\n-   |                     expected tuple, found struct `Vec`\n+   |                ^^^^            ------------- argument of type `Vec<&Process>` unexpected\n    |\n+note: expected tuple, found struct `Vec`\n+  --> $DIR/wrong_argument_ice-3.rs:9:21\n+   |\n+LL |         groups.push(new_group, vec![process]);\n+   |                     ^^^^^^^^^\n    = note: expected tuple `(Vec<String>, Vec<Process>)`\n              found struct `Vec<String>`\n note: associated function defined here"}]}