{"sha": "0bf4e900d421f011d7c68016308aab4998f9084e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjRlOTAwZDQyMWYwMTFkN2M2ODAxNjMwOGFhYjQ5OThmOTA4NGU=", "commit": {"author": {"name": "Kasey Carrothers", "email": "kaseyc.808@gmail.com", "date": "2014-04-07T01:04:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:22:00Z"}, "message": "Renamed ast::Purity to ast::FnStyle and ast::ImpureFn to ast::NormalFn and updated associated variable and function names.", "tree": {"sha": "fd128aabc724629c461caa4e8fc79da30a2c1e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd128aabc724629c461caa4e8fc79da30a2c1e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf4e900d421f011d7c68016308aab4998f9084e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf4e900d421f011d7c68016308aab4998f9084e", "html_url": "https://github.com/rust-lang/rust/commit/0bf4e900d421f011d7c68016308aab4998f9084e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf4e900d421f011d7c68016308aab4998f9084e/comments", "author": {"login": "kaseyc", "id": 2405952, "node_id": "MDQ6VXNlcjI0MDU5NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2405952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaseyc", "html_url": "https://github.com/kaseyc", "followers_url": "https://api.github.com/users/kaseyc/followers", "following_url": "https://api.github.com/users/kaseyc/following{/other_user}", "gists_url": "https://api.github.com/users/kaseyc/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaseyc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaseyc/subscriptions", "organizations_url": "https://api.github.com/users/kaseyc/orgs", "repos_url": "https://api.github.com/users/kaseyc/repos", "events_url": "https://api.github.com/users/kaseyc/events{/privacy}", "received_events_url": "https://api.github.com/users/kaseyc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "html_url": "https://github.com/rust-lang/rust/commit/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550"}], "stats": {"total": 524, "additions": 262, "deletions": 262}, "files": [{"sha": "16068dd939b1d13edd7ca0ccfac7646a30e24384", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -28,7 +28,7 @@ use syntax::parse::token;\n pub struct StaticMethodInfo {\n     pub ident: ast::Ident,\n     pub def_id: ast::DefId,\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub vis: ast::Visibility,\n }\n "}, {"sha": "28968a6001616c7dbcd6045434277ddbda3505c9", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -330,11 +330,11 @@ fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         MutStatic => DlDef(ast::DefStatic(did, true)),\n         Struct    => DlDef(ast::DefStruct(did)),\n         UnsafeFn  => DlDef(ast::DefFn(did, ast::UnsafeFn)),\n-        Fn        => DlDef(ast::DefFn(did, ast::ImpureFn)),\n+        Fn        => DlDef(ast::DefFn(did, ast::NormalFn)),\n         ForeignFn => DlDef(ast::DefFn(did, ast::ExternFn)),\n         StaticMethod | UnsafeStaticMethod => {\n-            let purity = if fam == UnsafeStaticMethod { ast::UnsafeFn } else\n-                { ast::ImpureFn };\n+            let fn_style = if fam == UnsafeStaticMethod { ast::UnsafeFn } else\n+                { ast::NormalFn };\n             // def_static_method carries an optional field of its enclosing\n             // trait or enclosing impl (if this is an inherent static method).\n             // So we need to detect whether this is in a trait or not, which\n@@ -348,7 +348,7 @@ fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n                 ast::FromImpl(item_reqd_and_translated_parent_item(cnum,\n                                                                    item))\n             };\n-            DlDef(ast::DefStaticMethod(did, provenance, purity))\n+            DlDef(ast::DefStaticMethod(did, provenance, fn_style))\n         }\n         Type | ForeignType => DlDef(ast::DefTy(did)),\n         Mod => DlDef(ast::DefMod(did)),\n@@ -905,17 +905,17 @@ pub fn get_static_methods_if_impl(intr: Rc<IdentInterner>,\n         let family = item_family(impl_method_doc);\n         match family {\n             StaticMethod | UnsafeStaticMethod => {\n-                let purity;\n+                let fn_style;\n                 match item_family(impl_method_doc) {\n-                    StaticMethod => purity = ast::ImpureFn,\n-                    UnsafeStaticMethod => purity = ast::UnsafeFn,\n+                    StaticMethod => fn_style = ast::NormalFn,\n+                    UnsafeStaticMethod => fn_style = ast::UnsafeFn,\n                     _ => fail!()\n                 }\n \n                 static_impl_methods.push(StaticMethodInfo {\n                     ident: item_name(&*intr, impl_method_doc),\n                     def_id: item_def_id(impl_method_doc, cdata),\n-                    purity: purity,\n+                    fn_style: fn_style,\n                     vis: item_visibility(impl_method_doc),\n                 });\n             }"}, {"sha": "ac62702e59ed1f1645c12b8dedabc18594ee7f80", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -758,12 +758,12 @@ fn encode_method_ty_fields(ecx: &EncodeContext,\n     encode_method_fty(ecx, ebml_w, &method_ty.fty);\n     encode_visibility(ebml_w, method_ty.vis);\n     encode_explicit_self(ebml_w, method_ty.explicit_self);\n-    let purity = method_ty.fty.purity;\n+    let fn_style = method_ty.fty.fn_style;\n     match method_ty.explicit_self {\n         ast::SelfStatic => {\n-            encode_family(ebml_w, purity_static_method_family(purity));\n+            encode_family(ebml_w, fn_style_static_method_family(fn_style));\n         }\n-        _ => encode_family(ebml_w, purity_fn_family(purity))\n+        _ => encode_family(ebml_w, style_fn_family(fn_style))\n     }\n     encode_provided_source(ebml_w, method_ty.provided_source);\n }\n@@ -811,18 +811,18 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     ebml_w.end_tag();\n }\n \n-fn purity_fn_family(p: Purity) -> char {\n-    match p {\n+fn style_fn_family(s: FnStyle) -> char {\n+    match s {\n         UnsafeFn => 'u',\n-        ImpureFn => 'f',\n+        NormalFn => 'f',\n         ExternFn => 'e'\n     }\n }\n \n-fn purity_static_method_family(p: Purity) -> char {\n-    match p {\n+fn fn_style_static_method_family(s: FnStyle) -> char {\n+    match s {\n         UnsafeFn => 'U',\n-        ImpureFn => 'F',\n+        NormalFn => 'F',\n         _ => fail!(\"extern fn can't be static\")\n     }\n }\n@@ -911,11 +911,11 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n       }\n-      ItemFn(_, purity, _, ref generics, _) => {\n+      ItemFn(_, fn_style, _, ref generics, _) => {\n         add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n-        encode_family(ebml_w, purity_fn_family(purity));\n+        encode_family(ebml_w, style_fn_family(fn_style));\n         let tps_len = generics.ty_params.len();\n         encode_bounds_and_type(ebml_w, ecx, &lookup_item_type(tcx, def_id));\n         encode_name(ebml_w, item.ident.name);\n@@ -1165,17 +1165,17 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             match method_ty.explicit_self {\n                 SelfStatic => {\n                     encode_family(ebml_w,\n-                                  purity_static_method_family(\n-                                      method_ty.fty.purity));\n+                                  fn_style_static_method_family(\n+                                      method_ty.fty.fn_style));\n \n                     let tpt = ty::lookup_item_type(tcx, method_def_id);\n                     encode_bounds_and_type(ebml_w, ecx, &tpt);\n                 }\n \n                 _ => {\n                     encode_family(ebml_w,\n-                                  purity_fn_family(\n-                                      method_ty.fty.purity));\n+                                  style_fn_family(\n+                                      method_ty.fty.fn_style));\n                 }\n             }\n \n@@ -1227,7 +1227,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n     encode_def_id(ebml_w, local_def(nitem.id));\n     match nitem.node {\n       ForeignItemFn(..) => {\n-        encode_family(ebml_w, purity_fn_family(ImpureFn));\n+        encode_family(ebml_w, style_fn_family(NormalFn));\n         encode_bounds_and_type(ebml_w, ecx,\n                                &lookup_item_type(ecx.tcx,local_def(nitem.id)));\n         encode_name(ebml_w, nitem.ident.name);"}, {"sha": "cf404481670285619af0422dedf99af6d3b7835b", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -449,12 +449,12 @@ fn parse_hex(st: &mut PState) -> uint {\n     };\n }\n \n-fn parse_purity(c: char) -> Purity {\n+fn parse_fn_style(c: char) -> FnStyle {\n     match c {\n         'u' => UnsafeFn,\n-        'i' => ImpureFn,\n+        'n' => NormalFn,\n         'c' => ExternFn,\n-        _ => fail!(\"parse_purity: bad purity {}\", c)\n+        _ => fail!(\"parse_fn_style: bad fn_style {}\", c)\n     }\n }\n \n@@ -476,13 +476,13 @@ fn parse_onceness(c: char) -> ast::Onceness {\n \n fn parse_closure_ty(st: &mut PState, conv: conv_did) -> ty::ClosureTy {\n     let sigil = parse_sigil(st);\n-    let purity = parse_purity(next(st));\n+    let fn_style = parse_fn_style(next(st));\n     let onceness = parse_onceness(next(st));\n     let region = parse_region(st, |x,y| conv(x,y));\n     let bounds = parse_bounds(st, |x,y| conv(x,y));\n     let sig = parse_sig(st, |x,y| conv(x,y));\n     ty::ClosureTy {\n-        purity: purity,\n+        fn_style: fn_style,\n         sigil: sigil,\n         onceness: onceness,\n         region: region,\n@@ -492,11 +492,11 @@ fn parse_closure_ty(st: &mut PState, conv: conv_did) -> ty::ClosureTy {\n }\n \n fn parse_bare_fn_ty(st: &mut PState, conv: conv_did) -> ty::BareFnTy {\n-    let purity = parse_purity(next(st));\n+    let fn_style = parse_fn_style(next(st));\n     let abi = parse_abi_set(st);\n     let sig = parse_sig(st, |x,y| conv(x,y));\n     ty::BareFnTy {\n-        purity: purity,\n+        fn_style: fn_style,\n         abi: abi,\n         sig: sig\n     }"}, {"sha": "485b28ca13bea674b97472624d31b2f27c1c7d49", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -332,9 +332,9 @@ fn enc_sigil(w: &mut MemWriter, sigil: Sigil) {\n     }\n }\n \n-fn enc_purity(w: &mut MemWriter, p: Purity) {\n+fn enc_fn_style(w: &mut MemWriter, p: FnStyle) {\n     match p {\n-        ImpureFn => mywrite!(w, \"i\"),\n+        NormalFn => mywrite!(w, \"n\"),\n         UnsafeFn => mywrite!(w, \"u\"),\n         ExternFn => mywrite!(w, \"c\")\n     }\n@@ -354,14 +354,14 @@ fn enc_onceness(w: &mut MemWriter, o: Onceness) {\n }\n \n pub fn enc_bare_fn_ty(w: &mut MemWriter, cx: &ctxt, ft: &ty::BareFnTy) {\n-    enc_purity(w, ft.purity);\n+    enc_fn_style(w, ft.fn_style);\n     enc_abi(w, ft.abi);\n     enc_fn_sig(w, cx, &ft.sig);\n }\n \n fn enc_closure_ty(w: &mut MemWriter, cx: &ctxt, ft: &ty::ClosureTy) {\n     enc_sigil(w, ft.sigil);\n-    enc_purity(w, ft.purity);\n+    enc_fn_style(w, ft.fn_style);\n     enc_onceness(w, ft.onceness);\n     enc_region(w, cx, ft.region);\n     let bounds = ty::ParamBounds {builtin_bounds: ft.bounds,"}, {"sha": "827d07484b739d9a10726d483ae8e6ce106c92f7", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -29,8 +29,8 @@ enum UnsafeContext {\n \n fn type_is_unsafe_function(ty: ty::t) -> bool {\n     match ty::get(ty).sty {\n-        ty::ty_bare_fn(ref f) => f.purity == ast::UnsafeFn,\n-        ty::ty_closure(ref f) => f.purity == ast::UnsafeFn,\n+        ty::ty_bare_fn(ref f) => f.fn_style == ast::UnsafeFn,\n+        ty::ty_closure(ref f) => f.fn_style == ast::UnsafeFn,\n         _ => false,\n     }\n }\n@@ -84,10 +84,10 @@ impl<'a> Visitor<()> for EffectCheckVisitor<'a> {\n                 block: &ast::Block, span: Span, node_id: ast::NodeId, _:()) {\n \n         let (is_item_fn, is_unsafe_fn) = match *fn_kind {\n-            visit::FkItemFn(_, _, purity, _) =>\n-                (true, purity == ast::UnsafeFn),\n+            visit::FkItemFn(_, _, fn_style, _) =>\n+                (true, fn_style == ast::UnsafeFn),\n             visit::FkMethod(_, _, method) =>\n-                (true, method.purity == ast::UnsafeFn),\n+                (true, method.fn_style == ast::UnsafeFn),\n             _ => (false, false),\n         };\n "}, {"sha": "95101dc63371aa118a043f66c75ae0b5b2df48e0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -1182,11 +1182,11 @@ impl<'a> Resolver<'a> {\n                     (DefStatic(local_def(item.id), mutbl), sp, is_public);\n                 parent\n             }\n-            ItemFn(_, purity, _, _, _) => {\n+            ItemFn(_, fn_style, _, _, _) => {\n               let (name_bindings, new_parent) =\n                 self.add_child(ident, parent, ForbidDuplicateValues, sp);\n \n-                let def = DefFn(local_def(item.id), purity);\n+                let def = DefFn(local_def(item.id), fn_style);\n                 name_bindings.define_value(def, sp, is_public);\n                 new_parent\n             }\n@@ -1313,7 +1313,7 @@ impl<'a> Resolver<'a> {\n                                     DefStaticMethod(local_def(method.id),\n                                                       FromImpl(local_def(\n                                                         item.id)),\n-                                                      method.purity)\n+                                                      method.fn_style)\n                                 }\n                                 _ => {\n                                     // Non-static methods become\n@@ -1364,7 +1364,7 @@ impl<'a> Resolver<'a> {\n                             // Static methods become `def_static_method`s.\n                             DefStaticMethod(local_def(ty_m.id),\n                                               FromTrait(local_def(item.id)),\n-                                              ty_m.purity)\n+                                              ty_m.fn_style)\n                         }\n                         _ => {\n                             // Non-static methods become `def_method`s.\n@@ -1869,7 +1869,7 @@ impl<'a> Resolver<'a> {\n                                                        DUMMY_SP);\n                                     let def = DefFn(\n                                         static_method_info.def_id,\n-                                        static_method_info.purity);\n+                                        static_method_info.fn_style);\n \n                                     method_name_bindings.define_value(\n                                         def, DUMMY_SP,"}, {"sha": "92b1a60598b7ce506f03131dcb907eddfd397a12", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -1554,8 +1554,8 @@ impl<'a> Visitor<()> for TransItemVisitor<'a> {\n pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     let _icx = push_ctxt(\"trans_item\");\n     match item.node {\n-      ast::ItemFn(decl, purity, _abi, ref generics, body) => {\n-        if purity == ast::ExternFn  {\n+      ast::ItemFn(decl, fn_style, _abi, ref generics, body) => {\n+        if fn_style == ast::ExternFn  {\n             let llfndecl = get_item_val(ccx, item.id);\n             foreign::trans_rust_fn_with_foreign_abi(\n                 ccx, decl, body, item.attrs.as_slice(), llfndecl, item.id);\n@@ -1899,8 +1899,8 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     }\n                 }\n \n-                ast::ItemFn(_, purity, _, _, _) => {\n-                    let llfn = if purity != ast::ExternFn {\n+                ast::ItemFn(_, fn_style, _, _, _) => {\n+                    let llfn = if fn_style != ast::ExternFn {\n                         register_fn(ccx, i.span, sym, i.id, ty)\n                     } else {\n                         foreign::register_rust_fn_with_foreign_abi(ccx,"}, {"sha": "d6156e7c3e64eae80152deee8745d0db9420f4b0", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -615,7 +615,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n \n             let opt_def = cx.tcx().def_map.borrow().find_copy(&e.id);\n             match opt_def {\n-                Some(ast::DefFn(def_id, _purity)) => {\n+                Some(ast::DefFn(def_id, _fn_style)) => {\n                     if !ast_util::is_local(def_id) {\n                         let ty = csearch::get_type(cx.tcx(), def_id).ty;\n                         (base::trans_external_path(cx, def_id, ty), true)"}, {"sha": "2244c769af1c004edd5d6cdeb9cca17a3a2fcfe4", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -211,7 +211,7 @@ impl<'a> Reflector<'a> {\n           // FIXME (#2594): fetch constants out of intrinsic\n           // FIXME (#4809): visitor should break out bare fns from other fns\n           ty::ty_closure(ref fty) => {\n-            let pureval = ast_purity_constant(fty.purity);\n+            let pureval = ast_fn_style_constant(fty.fn_style);\n             let sigilval = ast_sigil_constant(fty.sigil);\n             let retval = if ty::type_is_bot(fty.sig.output) {0u} else {1u};\n             let extra = vec!(self.c_uint(pureval),\n@@ -226,7 +226,7 @@ impl<'a> Reflector<'a> {\n           // FIXME (#2594): fetch constants out of intrinsic:: for the\n           // numbers.\n           ty::ty_bare_fn(ref fty) => {\n-            let pureval = ast_purity_constant(fty.purity);\n+            let pureval = ast_fn_style_constant(fty.fn_style);\n             let sigilval = 0u;\n             let retval = if ty::type_is_bot(fty.sig.output) {0u} else {1u};\n             let extra = vec!(self.c_uint(pureval),\n@@ -399,10 +399,10 @@ pub fn ast_sigil_constant(sigil: ast::Sigil) -> uint {\n     }\n }\n \n-pub fn ast_purity_constant(purity: ast::Purity) -> uint {\n-    match purity {\n+pub fn ast_fn_style_constant(fn_style: ast::FnStyle) -> uint {\n+    match fn_style {\n         ast::UnsafeFn => 1u,\n-        ast::ImpureFn => 2u,\n+        ast::NormalFn => 2u,\n         ast::ExternFn => 3u\n     }\n }"}, {"sha": "aac847c795aeb32c1bfdb36655e95295170319ef", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -415,14 +415,14 @@ pub fn type_id(t: t) -> uint { get(t).id }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct BareFnTy {\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub abi: abi::Abi,\n     pub sig: FnSig,\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct ClosureTy {\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub sigil: ast::Sigil,\n     pub onceness: ast::Onceness,\n     pub region: Region,\n@@ -791,7 +791,7 @@ pub struct expected_found<T> {\n #[deriving(Clone, Show)]\n pub enum type_err {\n     terr_mismatch,\n-    terr_purity_mismatch(expected_found<Purity>),\n+    terr_fn_style_mismatch(expected_found<FnStyle>),\n     terr_onceness_mismatch(expected_found<Onceness>),\n     terr_abi_mismatch(expected_found<abi::Abi>),\n     terr_mutability,\n@@ -1397,7 +1397,7 @@ pub fn mk_ctor_fn(cx: &ctxt,\n     let input_args = input_tys.iter().map(|t| *t).collect();\n     mk_bare_fn(cx,\n                BareFnTy {\n-                   purity: ast::ImpureFn,\n+                   fn_style: ast::NormalFn,\n                    abi: abi::Rust,\n                    sig: FnSig {\n                     binder_id: binder_id,\n@@ -2843,7 +2843,7 @@ pub fn adjust_ty(cx: &ctxt,\n                         ty::ty_bare_fn(ref b) => {\n                             ty::mk_closure(\n                                 cx,\n-                                ty::ClosureTy {purity: b.purity,\n+                                ty::ClosureTy {fn_style: b.fn_style,\n                                                sigil: s,\n                                                onceness: ast::Many,\n                                                region: r,\n@@ -3340,7 +3340,7 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> ~str {\n \n     match *err {\n         terr_mismatch => ~\"types differ\",\n-        terr_purity_mismatch(values) => {\n+        terr_fn_style_mismatch(values) => {\n             format!(\"expected {} fn but found {} fn\",\n                  values.expected.to_str(), values.found.to_str())\n         }\n@@ -4297,16 +4297,16 @@ pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::Expr) ->\n     }\n }\n \n-// Determine what purity to check a nested function under\n-pub fn determine_inherited_purity(parent: (ast::Purity, ast::NodeId),\n-                                  child: (ast::Purity, ast::NodeId),\n+// Determine what the style to check a nested function under\n+pub fn determine_inherited_style(parent: (ast::FnStyle, ast::NodeId),\n+                                  child: (ast::FnStyle, ast::NodeId),\n                                   child_sigil: ast::Sigil)\n-                                    -> (ast::Purity, ast::NodeId) {\n+                                    -> (ast::FnStyle, ast::NodeId) {\n     // If the closure is a stack closure and hasn't had some non-standard\n-    // purity inferred for it, then check it under its parent's purity.\n+    // style inferred for it, then check it under its parent's style.\n     // Otherwise, use its own\n     match child_sigil {\n-        ast::BorrowedSigil if child.val0() == ast::ImpureFn => parent,\n+        ast::BorrowedSigil if child.val0() == ast::NormalFn => parent,\n         _ => child\n     }\n }\n@@ -4665,12 +4665,12 @@ pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 {\n             }\n             ty_bare_fn(ref b) => {\n                 byte!(14);\n-                hash!(b.purity);\n+                hash!(b.fn_style);\n                 hash!(b.abi);\n             }\n             ty_closure(ref c) => {\n                 byte!(15);\n-                hash!(c.purity);\n+                hash!(c.fn_style);\n                 hash!(c.sigil);\n                 hash!(c.onceness);\n                 hash!(c.bounds);"}, {"sha": "a0d2318e1d024f362c38877932381e238eac6aac", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -49,7 +49,7 @@ pub trait TypeFolder {\n                        -> ty::BareFnTy {\n         ty::BareFnTy { sig: self.fold_sig(&fty.sig),\n                        abi: fty.abi,\n-                       purity: fty.purity }\n+                       fn_style: fty.fn_style }\n     }\n \n     fn fold_closure_ty(&mut self,\n@@ -58,7 +58,7 @@ pub trait TypeFolder {\n         ty::ClosureTy {\n             region: self.fold_region(fty.region),\n             sig: self.fold_sig(&fty.sig),\n-            purity: fty.purity,\n+            fn_style: fty.fn_style,\n             sigil: fty.sigil,\n             onceness: fty.onceness,\n             bounds: fty.bounds,"}, {"sha": "d2e98c617a7dee82ff9ec766ceb99fe5cc1ce1e0", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -523,7 +523,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                     tcx.sess.span_err(ast_ty.span,\n                                       \"variadic function must have C calling convention\");\n                 }\n-                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, ast_ty.id, bf.purity,\n+                ty::mk_bare_fn(tcx, ty_of_bare_fn(this, ast_ty.id, bf.fn_style,\n                                                   bf.abi, bf.decl))\n             }\n             ast::TyClosure(ref f) => {\n@@ -543,7 +543,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                                             rscope,\n                                             ast_ty.id,\n                                             f.sigil,\n-                                            f.purity,\n+                                            f.fn_style,\n                                             f.onceness,\n                                             bounds,\n                                             &f.region,\n@@ -661,24 +661,24 @@ struct SelfInfo {\n pub fn ty_of_method<AC:AstConv>(\n     this: &AC,\n     id: ast::NodeId,\n-    purity: ast::Purity,\n+    fn_style: ast::FnStyle,\n     untransformed_self_ty: ty::t,\n     explicit_self: ast::ExplicitSelf,\n     decl: &ast::FnDecl) -> ty::BareFnTy {\n-    ty_of_method_or_bare_fn(this, id, purity, abi::Rust, Some(SelfInfo {\n+    ty_of_method_or_bare_fn(this, id, fn_style, abi::Rust, Some(SelfInfo {\n         untransformed_self_ty: untransformed_self_ty,\n         explicit_self: explicit_self\n     }), decl)\n }\n \n pub fn ty_of_bare_fn<AC:AstConv>(this: &AC, id: ast::NodeId,\n-                                 purity: ast::Purity, abi: abi::Abi,\n+                                 fn_style: ast::FnStyle, abi: abi::Abi,\n                                  decl: &ast::FnDecl) -> ty::BareFnTy {\n-    ty_of_method_or_bare_fn(this, id, purity, abi, None, decl)\n+    ty_of_method_or_bare_fn(this, id, fn_style, abi, None, decl)\n }\n \n fn ty_of_method_or_bare_fn<AC:AstConv>(this: &AC, id: ast::NodeId,\n-                                       purity: ast::Purity, abi: abi::Abi,\n+                                       fn_style: ast::FnStyle, abi: abi::Abi,\n                                        opt_self_info: Option<SelfInfo>,\n                                        decl: &ast::FnDecl) -> ty::BareFnTy {\n     debug!(\"ty_of_method_or_bare_fn\");\n@@ -724,7 +724,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv>(this: &AC, id: ast::NodeId,\n     };\n \n     return ty::BareFnTy {\n-        purity: purity,\n+        fn_style: fn_style,\n         abi: abi,\n         sig: ty::FnSig {\n             binder_id: id,\n@@ -740,7 +740,7 @@ pub fn ty_of_closure<AC:AstConv,RS:RegionScope>(\n     rscope: &RS,\n     id: ast::NodeId,\n     sigil: ast::Sigil,\n-    purity: ast::Purity,\n+    fn_style: ast::FnStyle,\n     onceness: ast::Onceness,\n     bounds: ty::BuiltinBounds,\n     opt_lifetime: &Option<ast::Lifetime>,\n@@ -797,7 +797,7 @@ pub fn ty_of_closure<AC:AstConv,RS:RegionScope>(\n     };\n \n     ty::ClosureTy {\n-        purity: purity,\n+        fn_style: fn_style,\n         sigil: sigil,\n         onceness: onceness,\n         region: bound_region,"}, {"sha": "611b3653ab3f45b9505d059e6fb2cda73c23ff8a", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -1163,7 +1163,7 @@ impl<'a> LookupContext<'a> {\n         let transformed_self_ty = *fn_sig.inputs.get(0);\n         let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n             sig: fn_sig,\n-            purity: bare_fn_ty.purity,\n+            fn_style: bare_fn_ty.fn_style,\n             abi: bare_fn_ty.abi.clone(),\n         });\n         debug!(\"after replacing bound regions, fty={}\", self.ty_to_str(fty));"}, {"sha": "bfbac7aaebb1ad05d6c1580a15536041994e4d88", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -177,32 +177,32 @@ pub enum FnKind {\n }\n \n #[deriving(Clone)]\n-pub struct PurityState {\n+pub struct FnStyleState {\n     pub def: ast::NodeId,\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     from_fn: bool\n }\n \n-impl PurityState {\n-    pub fn function(purity: ast::Purity, def: ast::NodeId) -> PurityState {\n-        PurityState { def: def, purity: purity, from_fn: true }\n+impl FnStyleState {\n+    pub fn function(fn_style: ast::FnStyle, def: ast::NodeId) -> FnStyleState {\n+        FnStyleState { def: def, fn_style: fn_style, from_fn: true }\n     }\n \n-    pub fn recurse(&mut self, blk: &ast::Block) -> PurityState {\n-        match self.purity {\n+    pub fn recurse(&mut self, blk: &ast::Block) -> FnStyleState {\n+        match self.fn_style {\n             // If this unsafe, then if the outer function was already marked as\n             // unsafe we shouldn't attribute the unsafe'ness to the block. This\n             // way the block can be warned about instead of ignoring this\n             // extraneous block (functions are never warned about).\n             ast::UnsafeFn if self.from_fn => *self,\n \n-            purity => {\n-                let (purity, def) = match blk.rules {\n+            fn_style => {\n+                let (fn_style, def) = match blk.rules {\n                     ast::UnsafeBlock(..) => (ast::UnsafeFn, blk.id),\n-                    ast::DefaultBlock => (purity, self.def),\n+                    ast::DefaultBlock => (fn_style, self.def),\n                 };\n-                PurityState{ def: def,\n-                             purity: purity,\n+                FnStyleState{ def: def,\n+                             fn_style: fn_style,\n                              from_fn: false }\n             }\n         }\n@@ -227,7 +227,7 @@ pub struct FnCtxt<'a> {\n     err_count_on_creation: uint,\n \n     ret_ty: ty::t,\n-    ps: RefCell<PurityState>,\n+    ps: RefCell<FnStyleState>,\n \n     // Sometimes we generate region pointers where the precise region\n     // to use is not known. For example, an expression like `&x.f`\n@@ -281,7 +281,7 @@ fn blank_fn_ctxt<'a>(ccx: &'a CrateCtxt<'a>,\n     FnCtxt {\n         err_count_on_creation: ccx.tcx.sess.err_count(),\n         ret_ty: rty,\n-        ps: RefCell::new(PurityState::function(ast::ImpureFn, 0)),\n+        ps: RefCell::new(FnStyleState::function(ast::NormalFn, 0)),\n         region_lb: Cell::new(region_bnd),\n         fn_kind: Vanilla,\n         inh: inh,\n@@ -335,7 +335,7 @@ fn check_bare_fn(ccx: &CrateCtxt,\n     match ty::get(fty).sty {\n         ty::ty_bare_fn(ref fn_ty) => {\n             let inh = Inherited::new(ccx.tcx, param_env);\n-            let fcx = check_fn(ccx, fn_ty.purity, &fn_ty.sig,\n+            let fcx = check_fn(ccx, fn_ty.fn_style, &fn_ty.sig,\n                                decl, id, body, Vanilla, &inh);\n \n             vtable::resolve_in_block(&fcx, body);\n@@ -415,7 +415,7 @@ impl<'a> Visitor<()> for GatherLocalsVisitor<'a> {\n }\n \n fn check_fn<'a>(ccx: &'a CrateCtxt<'a>,\n-                purity: ast::Purity,\n+                fn_style: ast::FnStyle,\n                 fn_sig: &ty::FnSig,\n                 decl: &ast::FnDecl,\n                 id: ast::NodeId,\n@@ -456,7 +456,7 @@ fn check_fn<'a>(ccx: &'a CrateCtxt<'a>,\n     let fcx = FnCtxt {\n         err_count_on_creation: err_count_on_creation,\n         ret_ty: ret_ty,\n-        ps: RefCell::new(PurityState::function(purity, id)),\n+        ps: RefCell::new(FnStyleState::function(fn_style, id)),\n         region_lb: Cell::new(body.id),\n         fn_kind: fn_kind,\n         inh: inherited,\n@@ -2127,7 +2127,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         // fresh bound regions for any bound regions we find in the\n         // expected types so as to avoid capture.\n         //\n-        // Also try to pick up inferred purity and sigil, defaulting\n+        // Also try to pick up inferred style and sigil, defaulting\n         // to impure and block. Note that we only will use those for\n         // block syntax lambdas; that is, lambdas without explicit\n         // sigils.\n@@ -2136,7 +2136,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                            |x| Some((*x).clone()));\n         let error_happened = false;\n         let (expected_sig,\n-             expected_purity,\n+             expected_style,\n              expected_sigil,\n              expected_onceness,\n              expected_bounds) = {\n@@ -2146,7 +2146,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         replace_late_bound_regions_in_fn_sig(\n                             tcx, &cenv.sig,\n                             |_| fcx.inh.infcx.fresh_bound_region(expr.id));\n-                    (Some(sig), cenv.purity, cenv.sigil,\n+                    (Some(sig), cenv.fn_style, cenv.sigil,\n                      cenv.onceness, cenv.bounds)\n                 }\n                 _ => {\n@@ -2162,25 +2162,25 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                         }\n                         _ => ()\n                     }\n-                    (None, ast::ImpureFn, sigil,\n+                    (None, ast::NormalFn, sigil,\n                      onceness, bounds)\n                 }\n             }\n         };\n \n         // If the proto is specified, use that, otherwise select a\n         // proto based on inference.\n-        let (sigil, purity) = match ast_sigil_opt {\n-            Some(p) => (p, ast::ImpureFn),\n-            None => (expected_sigil, expected_purity)\n+        let (sigil, fn_style) = match ast_sigil_opt {\n+            Some(p) => (p, ast::NormalFn),\n+            None => (expected_sigil, expected_style)\n         };\n \n         // construct the function type\n         let fn_ty = astconv::ty_of_closure(fcx,\n                                            fcx.infcx(),\n                                            expr.id,\n                                            sigil,\n-                                           purity,\n+                                           fn_style,\n                                            expected_onceness,\n                                            expected_bounds,\n                                            &None,\n@@ -2208,13 +2208,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         fcx.write_ty(expr.id, fty);\n \n-        let (inherited_purity, id) =\n-            ty::determine_inherited_purity((fcx.ps.borrow().purity,\n+        let (inherited_style, id) =\n+            ty::determine_inherited_style((fcx.ps.borrow().fn_style,\n                                             fcx.ps.borrow().def),\n-                                           (purity, expr.id),\n+                                           (fn_style, expr.id),\n                                            sigil);\n \n-        check_fn(fcx.ccx, inherited_purity, &fty_sig,\n+        check_fn(fcx.ccx, inherited_style, &fty_sig,\n                  decl, id, body, fn_kind, fcx.inh);\n     }\n \n@@ -3272,8 +3272,8 @@ pub fn check_block_with_expected(fcx: &FnCtxt,\n                                  expected: Option<ty::t>) {\n     let prev = {\n         let mut fcx_ps = fcx.ps.borrow_mut();\n-        let purity_state = fcx_ps.recurse(blk);\n-        replace(&mut *fcx_ps, purity_state)\n+        let fn_style_state = fcx_ps.recurse(blk);\n+        replace(&mut *fcx_ps, fn_style_state)\n     };\n \n     fcx.with_region_lb(blk.id, || {\n@@ -4223,7 +4223,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n         }\n     };\n     let fty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-        purity: ast::UnsafeFn,\n+        fn_style: ast::UnsafeFn,\n         abi: abi::RustIntrinsic,\n         sig: FnSig {binder_id: it.id,\n                     inputs: inputs,"}, {"sha": "7e53445147f50dc97b4ea2fc978d96a30da0d117", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -200,14 +200,14 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n                                 ty_method_of_trait_method(\n                                     ccx, trait_id, &trait_ty_generics,\n                                     &m.id, &m.ident, &m.explicit_self,\n-                                    &m.generics, &m.purity, m.decl)\n+                                    &m.generics, &m.fn_style, m.decl)\n                             }\n \n                             &ast::Provided(ref m) => {\n                                 ty_method_of_trait_method(\n                                     ccx, trait_id, &trait_ty_generics,\n                                     &m.id, &m.ident, &m.explicit_self,\n-                                    &m.generics, &m.purity, m.decl)\n+                                    &m.generics, &m.fn_style, m.decl)\n                             }\n                         };\n \n@@ -376,11 +376,11 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n                                  m_ident: &ast::Ident,\n                                  m_explicit_self: &ast::ExplicitSelf,\n                                  m_generics: &ast::Generics,\n-                                 m_purity: &ast::Purity,\n+                                 m_fn_style: &ast::FnStyle,\n                                  m_decl: &ast::FnDecl) -> ty::Method\n     {\n         let trait_self_ty = ty::mk_self(this.tcx, local_def(trait_id));\n-        let fty = astconv::ty_of_method(this, *m_id, *m_purity, trait_self_ty,\n+        let fty = astconv::ty_of_method(this, *m_id, *m_fn_style, trait_self_ty,\n                                         *m_explicit_self, m_decl);\n         let num_trait_type_params = trait_generics.type_param_defs().len();\n         let ty_generics = ty_generics_for_fn_or_method(this, m_generics,\n@@ -508,7 +508,7 @@ fn convert_methods(ccx: &CrateCtxt,\n                     rcvr_generics: &ast::Generics,\n                     rcvr_visibility: ast::Visibility) -> ty::Method\n     {\n-        let fty = astconv::ty_of_method(ccx, m.id, m.purity,\n+        let fty = astconv::ty_of_method(ccx, m.id, m.fn_style,\n                                         untransformed_rcvr_ty,\n                                         m.explicit_self, m.decl);\n \n@@ -818,11 +818,11 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)\n             tcx.tcache.borrow_mut().insert(local_def(it.id), tpt.clone());\n             return tpt;\n         }\n-        ast::ItemFn(decl, purity, abi, ref generics, _) => {\n+        ast::ItemFn(decl, fn_style, abi, ref generics, _) => {\n             let ty_generics = ty_generics_for_fn_or_method(ccx, generics, 0);\n             let tofd = astconv::ty_of_bare_fn(ccx,\n                                               it.id,\n-                                              purity,\n+                                              fn_style,\n                                               abi,\n                                               decl);\n             let tpt = ty_param_bounds_and_ty {\n@@ -1029,7 +1029,7 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n         ccx.tcx,\n         ty::BareFnTy {\n             abi: abi,\n-            purity: ast::UnsafeFn,\n+            fn_style: ast::UnsafeFn,\n             sig: ty::FnSig {binder_id: def_id.node,\n                             inputs: input_tys,\n                             output: output_ty,"}, {"sha": "38ffa2ae508287318f200a765630a95dfa461240", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -385,7 +385,7 @@ impl<'f> Coerce<'f> {\n             debug!(\"coerce_from_bare_fn(a={}, b={})\",\n                    a.inf_str(self.get_ref().infcx), b.inf_str(self.get_ref().infcx));\n \n-            if fn_ty_a.abi != abi::Rust || fn_ty_a.purity != ast::ImpureFn {\n+            if fn_ty_a.abi != abi::Rust || fn_ty_a.fn_style != ast::NormalFn {\n                 return self.subtype(a, b);\n             }\n "}, {"sha": "555aaa90da144b7ec27a0ae36b390578ccc4efca", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -64,7 +64,7 @@ use util::ppaux::Repr;\n \n use std::result;\n \n-use syntax::ast::{Onceness, Purity};\n+use syntax::ast::{Onceness, FnStyle};\n use syntax::ast;\n use syntax::owned_slice::OwnedSlice;\n use syntax::abi;\n@@ -194,10 +194,10 @@ pub trait Combine {\n \n     fn bare_fn_tys(&self, a: &ty::BareFnTy,\n                    b: &ty::BareFnTy) -> cres<ty::BareFnTy> {\n-        let purity = if_ok!(self.purities(a.purity, b.purity));\n+        let fn_style = if_ok!(self.fn_styles(a.fn_style, b.fn_style));\n         let abi = if_ok!(self.abi(a.abi, b.abi));\n         let sig = if_ok!(self.fn_sigs(&a.sig, &b.sig));\n-        Ok(ty::BareFnTy {purity: purity,\n+        Ok(ty::BareFnTy {fn_style: fn_style,\n                 abi: abi,\n                 sig: sig})\n     }\n@@ -207,11 +207,11 @@ pub trait Combine {\n \n         let p = if_ok!(self.sigils(a.sigil, b.sigil));\n         let r = if_ok!(self.contraregions(a.region, b.region));\n-        let purity = if_ok!(self.purities(a.purity, b.purity));\n+        let fn_style = if_ok!(self.fn_styles(a.fn_style, b.fn_style));\n         let onceness = if_ok!(self.oncenesses(a.onceness, b.onceness));\n         let bounds = if_ok!(self.bounds(a.bounds, b.bounds));\n         let sig = if_ok!(self.fn_sigs(&a.sig, &b.sig));\n-        Ok(ty::ClosureTy {purity: purity,\n+        Ok(ty::ClosureTy {fn_style: fn_style,\n                 sigil: p,\n                 onceness: onceness,\n                 region: r,\n@@ -246,7 +246,7 @@ pub trait Combine {\n         }\n     }\n \n-    fn purities(&self, a: Purity, b: Purity) -> cres<Purity>;\n+    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<FnStyle>;\n \n     fn abi(&self, a: abi::Abi, b: abi::Abi) -> cres<abi::Abi> {\n         if a == b {"}, {"sha": "24a6ab338a76152dd1b5a50ec8813f3109bdfbbb", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -1102,10 +1102,10 @@ impl<'a> ErrorReportingHelpers for InferCtxt<'a> {\n                                 output: ast::P<ast::Ty>,\n                                 item: ast::P<ast::Item>,\n                                 generics: ast::Generics) {\n-        let (fn_decl, purity, ident) = match item.node {\n+        let (fn_decl, fn_style, ident) = match item.node {\n             // FIXME: handling method\n-            ast::ItemFn(ref fn_decl, ref purity, _, _, _) => {\n-                (fn_decl, purity, item.ident)\n+            ast::ItemFn(ref fn_decl, ref fn_style, _, _, _) => {\n+                (fn_decl, fn_style, item.ident)\n             },\n             _ => fail!(\"Expect function or method\")\n \n@@ -1117,7 +1117,7 @@ impl<'a> ErrorReportingHelpers for InferCtxt<'a> {\n             variadic: fn_decl.variadic\n         };\n         let suggested_fn =\n-            pprust::fun_to_str(&fd, *purity, ident, None, &generics);\n+            pprust::fun_to_str(&fd, *fn_style, ident, None, &generics);\n         let msg = format!(\"consider using an explicit lifetime \\\n                            parameter as shown: {}\", suggested_fn);\n         self.tcx.sess.span_note(item.span, msg);"}, {"sha": "ea0d3a1c1d40cdc630bea3e763d413dabf1ce5a7", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -22,8 +22,8 @@ use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::infer::{TypeTrace, Subtype};\n use middle::typeck::infer::fold_regions_in_sig;\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n-use syntax::ast::{ExternFn, ImpureFn, UnsafeFn, NodeId};\n-use syntax::ast::{Onceness, Purity};\n+use syntax::ast::{ExternFn, NormalFn, UnsafeFn, NodeId};\n+use syntax::ast::{Onceness, FnStyle};\n use collections::HashMap;\n use util::common::{indenter};\n use util::ppaux::mt_to_str;\n@@ -81,10 +81,10 @@ impl<'f> Combine for Glb<'f> {\n         Lub(*self.get_ref()).tys(a, b)\n     }\n \n-    fn purities(&self, a: Purity, b: Purity) -> cres<Purity> {\n+    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<FnStyle> {\n         match (a, b) {\n           (ExternFn, _) | (_, ExternFn) => Ok(ExternFn),\n-          (ImpureFn, _) | (_, ImpureFn) => Ok(ImpureFn),\n+          (NormalFn, _) | (_, NormalFn) => Ok(NormalFn),\n           (UnsafeFn, UnsafeFn) => Ok(UnsafeFn)\n         }\n     }"}, {"sha": "e355d7d48ac2321b22ae37b18947cc35608bf28b", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -23,8 +23,8 @@ use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::infer::{TypeTrace, Subtype};\n use collections::HashMap;\n use syntax::ast::{Many, Once, NodeId};\n-use syntax::ast::{ExternFn, ImpureFn, UnsafeFn};\n-use syntax::ast::{Onceness, Purity};\n+use syntax::ast::{ExternFn, NormalFn, UnsafeFn};\n+use syntax::ast::{Onceness, FnStyle};\n use util::ppaux::mt_to_str;\n \n pub struct Lub<'f>(pub CombineFields<'f>);  // least-upper-bound: common supertype\n@@ -75,10 +75,10 @@ impl<'f> Combine for Lub<'f> {\n         Glb(*self.get_ref()).tys(a, b)\n     }\n \n-    fn purities(&self, a: Purity, b: Purity) -> cres<Purity> {\n+    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<FnStyle> {\n         match (a, b) {\n           (UnsafeFn, _) | (_, UnsafeFn) => Ok(UnsafeFn),\n-          (ImpureFn, _) | (_, ImpureFn) => Ok(ImpureFn),\n+          (NormalFn, _) | (_, NormalFn) => Ok(NormalFn),\n           (ExternFn, ExternFn) => Ok(ExternFn),\n         }\n     }"}, {"sha": "95b95380fa3efd35ca6697809acc4566085883e7", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -25,7 +25,7 @@ use middle::typeck::infer::{TypeTrace, Subtype};\n use util::common::{indenter};\n use util::ppaux::bound_region_to_str;\n \n-use syntax::ast::{Onceness, Purity};\n+use syntax::ast::{Onceness, FnStyle};\n \n pub struct Sub<'f>(pub CombineFields<'f>);  // \"subtype\", \"subregion\" etc\n \n@@ -87,9 +87,9 @@ impl<'f> Combine for Sub<'f> {\n         }\n     }\n \n-    fn purities(&self, a: Purity, b: Purity) -> cres<Purity> {\n-        self.lub().purities(a, b).compare(b, || {\n-            ty::terr_purity_mismatch(expected_found(self, a, b))\n+    fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<FnStyle> {\n+        self.lub().fn_styles(a, b).compare(b, || {\n+            ty::terr_fn_style_mismatch(expected_found(self, a, b))\n         })\n     }\n "}, {"sha": "791cd4f86250d63801f630220b4d570d11bfe19d", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -182,7 +182,7 @@ impl Env {\n         let inputs = input_tys.map(|t| {mode: ast::expl(ast::by_copy),\n                                         ty: *t});\n         ty::mk_fn(self.tcx, FnTyBase {\n-            meta: FnMeta {purity: ast::ImpureFn,\n+            meta: FnMeta {fn_style: ast::NormalFn,\n                           proto: ast::ProtoBare,\n                           onceness: ast::Many,\n                           region: ty::ReStatic,"}, {"sha": "f78f0a8f2731f672ac2d731f5524b8f1133b5a8e", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -357,7 +357,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-                purity: ast::ImpureFn,\n+                fn_style: ast::NormalFn,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     binder_id: main_id,\n@@ -403,7 +403,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             }\n \n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n-                purity: ast::ImpureFn,\n+                fn_style: ast::NormalFn,\n                 abi: abi::Rust,\n                 sig: ty::FnSig {\n                     binder_id: start_id,"}, {"sha": "e7b925197076aefb7cdb21916bea9228c29453bb", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -252,7 +252,7 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n         ty_to_str(cx, input)\n     }\n     fn bare_fn_to_str(cx: &ctxt,\n-                      purity: ast::Purity,\n+                      fn_style: ast::FnStyle,\n                       abi: abi::Abi,\n                       ident: Option<ast::Ident>,\n                       sig: &ty::FnSig)\n@@ -263,10 +263,10 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n             format!(\"extern {} \", abi.to_str())\n         };\n \n-        match purity {\n-            ast::ImpureFn => {}\n+        match fn_style {\n+            ast::NormalFn => {}\n             _ => {\n-                s.push_str(purity.to_str());\n+                s.push_str(fn_style.to_str());\n                 s.push_char(' ');\n             }\n         };\n@@ -305,10 +305,10 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n             }\n         }\n \n-        match cty.purity {\n-            ast::ImpureFn => {}\n+        match cty.fn_style {\n+            ast::NormalFn => {}\n             _ => {\n-                s.push_str(cty.purity.to_str());\n+                s.push_str(cty.fn_style.to_str());\n                 s.push_char(' ');\n             }\n         };\n@@ -405,7 +405,7 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n           closure_to_str(cx, *f)\n       }\n       ty_bare_fn(ref f) => {\n-          bare_fn_to_str(cx, f.purity, f.abi, None, &f.sig)\n+          bare_fn_to_str(cx, f.fn_style, f.abi, None, &f.sig)\n       }\n       ty_infer(infer_ty) => infer_ty.to_str(),\n       ty_err => ~\"[type error]\",\n@@ -812,8 +812,8 @@ impl Repr for ast::Visibility {\n \n impl Repr for ty::BareFnTy {\n     fn repr(&self, tcx: &ctxt) -> ~str {\n-        format!(\"BareFnTy \\\\{purity: {:?}, abi: {}, sig: {}\\\\}\",\n-             self.purity,\n+        format!(\"BareFnTy \\\\{fn_style: {:?}, abi: {}, sig: {}\\\\}\",\n+             self.fn_style,\n              self.abi.to_str(),\n              self.sig.repr(tcx))\n     }"}, {"sha": "ce7f167ea1724fc3450cc1d09d5df5ac8f970b1c", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -356,7 +356,7 @@ impl Clean<Generics> for ast::Generics {\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub decl: FnDecl,\n }\n \n@@ -383,7 +383,7 @@ impl Clean<Item> for ast::Method {\n             inner: MethodItem(Method {\n                 generics: self.generics.clean(),\n                 self_: self.explicit_self.clean(),\n-                purity: self.purity.clone(),\n+                fn_style: self.fn_style.clone(),\n                 decl: decl,\n             }),\n         }\n@@ -392,7 +392,7 @@ impl Clean<Item> for ast::Method {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyMethod {\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -419,7 +419,7 @@ impl Clean<Item> for ast::TypeMethod {\n             id: self.id,\n             visibility: None,\n             inner: TyMethodItem(TyMethod {\n-                purity: self.purity.clone(),\n+                fn_style: self.fn_style.clone(),\n                 decl: decl,\n                 self_: self.explicit_self.clean(),\n                 generics: self.generics.clean(),\n@@ -451,7 +451,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf {\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -465,7 +465,7 @@ impl Clean<Item> for doctree::Function {\n             inner: FunctionItem(Function {\n                 decl: self.decl.clean(),\n                 generics: self.generics.clean(),\n-                purity: self.purity,\n+                fn_style: self.fn_style,\n             }),\n         }\n     }\n@@ -478,7 +478,7 @@ pub struct ClosureDecl {\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: FnDecl,\n     pub onceness: ast::Onceness,\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub bounds: Vec<TyParamBound>,\n }\n \n@@ -490,7 +490,7 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n             lifetimes: self.lifetimes.clean().move_iter().collect(),\n             decl: self.decl.clean(),\n             onceness: self.onceness,\n-            purity: self.purity,\n+            fn_style: self.fn_style,\n             bounds: match self.bounds {\n                 Some(ref x) => x.clean().move_iter().collect(),\n                 None        => Vec::new()\n@@ -960,7 +960,7 @@ impl Clean<Item> for doctree::Typedef {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct BareFunctionDecl {\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub generics: Generics,\n     pub decl: FnDecl,\n     pub abi: ~str,\n@@ -969,7 +969,7 @@ pub struct BareFunctionDecl {\n impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     fn clean(&self) -> BareFunctionDecl {\n         BareFunctionDecl {\n-            purity: self.purity,\n+            fn_style: self.fn_style,\n             generics: Generics {\n                 lifetimes: self.lifetimes.clean().move_iter().collect(),\n                 type_params: Vec::new(),\n@@ -1164,7 +1164,7 @@ impl Clean<Item> for ast::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl: decl.clean(),\n                     generics: generics.clean(),\n-                    purity: ast::ExternFn,\n+                    fn_style: ast::ExternFn,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "5104ce81465ba829b3fc87928c7b9cf2f54a01ca", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -113,7 +113,7 @@ pub struct Function {\n     pub id: NodeId,\n     pub name: Ident,\n     pub vis: ast::Visibility,\n-    pub purity: ast::Purity,\n+    pub fn_style: ast::FnStyle,\n     pub where: Span,\n     pub generics: ast::Generics,\n }"}, {"sha": "a93107a73921083bb6507ef3f2da3ad03373e4c7", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -29,9 +29,9 @@ use html::render::{cache_key, current_location_key};\n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n pub struct VisSpace(pub Option<ast::Visibility>);\n-/// Similarly to VisSpace, this structure is used to render a purity with a\n+/// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n-pub struct PuritySpace(pub ast::Purity);\n+pub struct FnStyleSpace(pub ast::FnStyle);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n \n@@ -41,9 +41,9 @@ impl VisSpace {\n     }\n }\n \n-impl PuritySpace {\n-    pub fn get(&self) -> ast::Purity {\n-        let PuritySpace(v) = *self; v\n+impl FnStyleSpace {\n+    pub fn get(&self) -> ast::FnStyle {\n+        let FnStyleSpace(v) = *self; v\n     }\n }\n \n@@ -343,7 +343,7 @@ impl fmt::Show for clean::Type {\n                 };\n \n                 write!(f.buf, \"{}{}{arrow, select, yes{ -&gt; {ret}} other{}}\",\n-                       PuritySpace(decl.purity),\n+                       FnStyleSpace(decl.fn_style),\n                        match decl.sigil {\n                            ast::OwnedSigil => format!(\"proc({})\", decl.decl.inputs),\n                            ast::BorrowedSigil => format!(\"{}|{}|\", region, decl.decl.inputs),\n@@ -355,7 +355,7 @@ impl fmt::Show for clean::Type {\n             }\n             clean::BareFunction(ref decl) => {\n                 write!(f.buf, \"{}{}fn{}{}\",\n-                       PuritySpace(decl.purity),\n+                       FnStyleSpace(decl.fn_style),\n                        match decl.abi {\n                            ref x if \"\" == *x => ~\"\",\n                            ref x if \"\\\"Rust\\\"\" == *x => ~\"\",\n@@ -472,12 +472,12 @@ impl fmt::Show for VisSpace {\n     }\n }\n \n-impl fmt::Show for PuritySpace {\n+impl fmt::Show for FnStyleSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n             ast::UnsafeFn => write!(f.buf, \"unsafe \"),\n             ast::ExternFn => write!(f.buf, \"extern \"),\n-            ast::ImpureFn => Ok(())\n+            ast::NormalFn => Ok(())\n         }\n     }\n }"}, {"sha": "2bc4b6e841f55047a3ba03d27a3e41031f9ca8da", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -51,7 +51,7 @@ use rustc::util::nodemap::NodeSet;\n use clean;\n use doctree;\n use fold::DocFolder;\n-use html::format::{VisSpace, Method, PuritySpace};\n+use html::format::{VisSpace, Method, FnStyleSpace};\n use html::layout;\n use html::markdown;\n use html::markdown::Markdown;\n@@ -1191,10 +1191,10 @@ fn item_module(w: &mut Writer, cx: &Context,\n \n fn item_function(w: &mut Writer, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n-    try!(write!(w, \"<pre class='rust fn'>{vis}{purity}fn \\\n+    try!(write!(w, \"<pre class='rust fn'>{vis}{fn_style}fn \\\n                     {name}{generics}{decl}</pre>\",\n            vis = VisSpace(it.visibility),\n-           purity = PuritySpace(f.purity),\n+           fn_style = FnStyleSpace(f.fn_style),\n            name = it.name.get_ref().as_slice(),\n            generics = f.generics,\n            decl = f.decl));\n@@ -1305,12 +1305,12 @@ fn item_trait(w: &mut Writer, it: &clean::Item,\n }\n \n fn render_method(w: &mut Writer, meth: &clean::Item) -> fmt::Result {\n-    fn fun(w: &mut Writer, it: &clean::Item, purity: ast::Purity,\n+    fn fun(w: &mut Writer, it: &clean::Item, fn_style: ast::FnStyle,\n            g: &clean::Generics, selfty: &clean::SelfTy,\n            d: &clean::FnDecl) -> fmt::Result {\n         write!(w, \"{}fn <a href='\\\\#{ty}.{name}' class='fnname'>{name}</a>\\\n                    {generics}{decl}\",\n-               match purity {\n+               match fn_style {\n                    ast::UnsafeFn => \"unsafe \",\n                    _ => \"\",\n                },\n@@ -1321,10 +1321,10 @@ fn render_method(w: &mut Writer, meth: &clean::Item) -> fmt::Result {\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl)\n+            fun(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl)\n+            fun(w, meth, m.fn_style, &m.generics, &m.self_, &m.decl)\n         }\n         _ => unreachable!()\n     }"}, {"sha": "7de898a50a9e3485f410ba41179eb45932e7518c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -95,7 +95,7 @@ impl<'a> RustdocVisitor<'a> {\n     }\n \n     pub fn visit_fn(&mut self, item: &ast::Item, fd: &ast::FnDecl,\n-                    purity: &ast::Purity, _abi: &abi::Abi,\n+                    fn_style: &ast::FnStyle, _abi: &abi::Abi,\n                     gen: &ast::Generics) -> Function {\n         debug!(\"Visiting fn\");\n         Function {\n@@ -106,7 +106,7 @@ impl<'a> RustdocVisitor<'a> {\n             name: item.ident,\n             where: item.span,\n             generics: gen.clone(),\n-            purity: *purity,\n+            fn_style: *fn_style,\n         }\n     }\n "}, {"sha": "1eb034a573ac38ab3d7216741269bd7f89c0ec16", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -210,8 +210,8 @@ pub enum MethodProvenance {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum Def {\n-    DefFn(DefId, Purity),\n-    DefStaticMethod(/* method */ DefId, MethodProvenance, Purity),\n+    DefFn(DefId, FnStyle),\n+    DefStaticMethod(/* method */ DefId, MethodProvenance, FnStyle),\n     DefSelfTy(/* trait id */ NodeId),\n     DefMod(DefId),\n     DefForeignMod(DefId),\n@@ -696,7 +696,7 @@ pub struct TypeField {\n pub struct TypeMethod {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub purity: Purity,\n+    pub fn_style: FnStyle,\n     pub decl: P<FnDecl>,\n     pub generics: Generics,\n     pub explicit_self: ExplicitSelf,\n@@ -794,7 +794,7 @@ pub struct ClosureTy {\n     pub sigil: Sigil,\n     pub region: Option<Lifetime>,\n     pub lifetimes: Vec<Lifetime>,\n-    pub purity: Purity,\n+    pub fn_style: FnStyle,\n     pub onceness: Onceness,\n     pub decl: P<FnDecl>,\n     // Optional optvec distinguishes between \"fn()\" and \"fn:()\" so we can\n@@ -806,7 +806,7 @@ pub struct ClosureTy {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct BareFnTy {\n-    pub purity: Purity,\n+    pub fn_style: FnStyle,\n     pub abi: Abi,\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: P<FnDecl>\n@@ -886,16 +886,16 @@ pub struct FnDecl {\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n-pub enum Purity {\n+pub enum FnStyle {\n     UnsafeFn, // declared with \"unsafe fn\"\n-    ImpureFn, // declared with \"fn\"\n+    NormalFn, // declared with \"fn\"\n     ExternFn, // declared with \"extern fn\"\n }\n \n-impl fmt::Show for Purity {\n+impl fmt::Show for FnStyle {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            ImpureFn => \"impure\".fmt(f),\n+            NormalFn => \"normal\".fmt(f),\n             UnsafeFn => \"unsafe\".fmt(f),\n             ExternFn => \"extern\".fmt(f),\n         }\n@@ -925,7 +925,7 @@ pub struct Method {\n     pub attrs: Vec<Attribute>,\n     pub generics: Generics,\n     pub explicit_self: ExplicitSelf,\n-    pub purity: Purity,\n+    pub fn_style: FnStyle,\n     pub decl: P<FnDecl>,\n     pub body: P<Block>,\n     pub id: NodeId,\n@@ -1119,7 +1119,7 @@ pub struct Item {\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum Item_ {\n     ItemStatic(P<Ty>, Mutability, @Expr),\n-    ItemFn(P<FnDecl>, Purity, Abi, Generics, P<Block>),\n+    ItemFn(P<FnDecl>, FnStyle, Abi, Generics, P<Block>),\n     ItemMod(Mod),\n     ItemForeignMod(ForeignMod),\n     ItemTy(P<Ty>, Generics),"}, {"sha": "558642059969d2354539e3f840402b6f28a9e228", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -264,7 +264,7 @@ pub fn trait_method_to_ty_method(method: &TraitMethod) -> TypeMethod {\n             TypeMethod {\n                 ident: m.ident,\n                 attrs: m.attrs.clone(),\n-                purity: m.purity,\n+                fn_style: m.fn_style,\n                 decl: m.decl,\n                 generics: m.generics.clone(),\n                 explicit_self: m.explicit_self,"}, {"sha": "203edf6590fb771cdad0e7f5edde1bc0474c65c7", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -825,7 +825,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                   name,\n                   Vec::new(),\n                   ast::ItemFn(self.fn_decl(inputs, output),\n-                              ast::ImpureFn,\n+                              ast::NormalFn,\n                               abi::Rust,\n                               generics,\n                               body))"}, {"sha": "8a44caf34a5b4c4cc6aebd2c4ee4b05af9b68ff6", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -619,7 +619,7 @@ impl<'a> MethodDef<'a> {\n             attrs: attrs,\n             generics: fn_generics,\n             explicit_self: explicit_self,\n-            purity: ast::ImpureFn,\n+            fn_style: ast::NormalFn,\n             decl: fn_decl,\n             body: body_block,\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "e9e69eabef8968c20743f66bf293d42bd25e228a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -158,7 +158,7 @@ pub trait Folder {\n             TyClosure(ref f) => {\n                 TyClosure(@ClosureTy {\n                     sigil: f.sigil,\n-                    purity: f.purity,\n+                    fn_style: f.fn_style,\n                     region: fold_opt_lifetime(&f.region, self),\n                     onceness: f.onceness,\n                     bounds: fold_opt_bounds(&f.bounds, self),\n@@ -169,7 +169,7 @@ pub trait Folder {\n             TyBareFn(ref f) => {\n                 TyBareFn(@BareFnTy {\n                     lifetimes: f.lifetimes.iter().map(|l| fold_lifetime(l, self)).collect(),\n-                    purity: f.purity,\n+                    fn_style: f.fn_style,\n                     abi: f.abi,\n                     decl: self.fold_fn_decl(f.decl)\n                 })\n@@ -549,10 +549,10 @@ pub fn noop_fold_item_underscore<T: Folder>(i: &Item_, folder: &mut T) -> Item_\n         ItemStatic(t, m, e) => {\n             ItemStatic(folder.fold_ty(t), m, folder.fold_expr(e))\n         }\n-        ItemFn(decl, purity, abi, ref generics, body) => {\n+        ItemFn(decl, fn_style, abi, ref generics, body) => {\n             ItemFn(\n                 folder.fold_fn_decl(decl),\n-                purity,\n+                fn_style,\n                 abi,\n                 fold_generics(generics, folder),\n                 folder.fold_block(body)\n@@ -603,7 +603,7 @@ pub fn noop_fold_type_method<T: Folder>(m: &TypeMethod, fld: &mut T) -> TypeMeth\n         id: fld.new_id(m.id), // Needs to be first, for ast_map.\n         ident: fld.fold_ident(m.ident),\n         attrs: m.attrs.iter().map(|a| fold_attribute_(*a, fld)).collect(),\n-        purity: m.purity,\n+        fn_style: m.fn_style,\n         decl: fld.fold_fn_decl(m.decl),\n         generics: fold_generics(&m.generics, fld),\n         explicit_self: fld.fold_explicit_self(&m.explicit_self),\n@@ -680,7 +680,7 @@ pub fn noop_fold_method<T: Folder>(m: &Method, folder: &mut T) -> @Method {\n         attrs: m.attrs.iter().map(|a| fold_attribute_(*a, folder)).collect(),\n         generics: fold_generics(&m.generics, folder),\n         explicit_self: folder.fold_explicit_self(&m.explicit_self),\n-        purity: m.purity,\n+        fn_style: m.fn_style,\n         decl: folder.fold_fn_decl(m.decl),\n         body: folder.fold_block(m.body),\n         span: folder.new_span(m.span),"}, {"sha": "eca9f955d9392fa3131ecd55d24aad56cae058c0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -657,7 +657,7 @@ mod test {\n                                 cf: ast::Return,\n                                 variadic: false\n                             }),\n-                                    ast::ImpureFn,\n+                                    ast::NormalFn,\n                                     abi::Rust,\n                                     ast::Generics{ // no idea on either of these:\n                                         lifetimes: Vec::new(),"}, {"sha": "fe4bd87c4eb18da42fd48a314558e2797b51c37d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -14,7 +14,7 @@ use abi;\n use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};\n use ast::{BareFnTy, ClosureTy};\n use ast::{RegionTyParamBound, TraitTyParamBound};\n-use ast::{Provided, Public, Purity};\n+use ast::{Provided, Public, FnStyle};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, Block};\n use ast::{BlockCheckMode, UnBox};\n@@ -31,7 +31,7 @@ use ast::{ExprVec, ExprVstore, ExprVstoreSlice};\n use ast::{ExprVstoreMutSlice, ExprWhile, ExprForLoop, ExternFn, Field, FnDecl};\n use ast::{ExprVstoreUniq, Once, Many};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod};\n-use ast::{Ident, ImpureFn, Inherited, Item, Item_, ItemStatic};\n+use ast::{Ident, NormalFn, Inherited, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, Lit, Lit_};\n use ast::{LitBool, LitFloat, LitFloatUnsuffixed, LitInt, LitChar};\n@@ -867,7 +867,7 @@ impl<'a> Parser<'a> {\n                   |      |           |  Argument types\n                   |      |       Lifetimes\n                   |      |\n-                  |    Purity\n+                  |    Function Style\n                  ABI\n \n         */\n@@ -878,12 +878,12 @@ impl<'a> Parser<'a> {\n             abi::Rust\n         };\n \n-        let purity = self.parse_unsafety();\n+        let fn_style = self.parse_unsafety();\n         self.expect_keyword(keywords::Fn);\n         let (decl, lifetimes) = self.parse_ty_fn_decl(true);\n         return TyBareFn(@BareFnTy {\n             abi: abi,\n-            purity: purity,\n+            fn_style: fn_style,\n             lifetimes: lifetimes,\n             decl: decl\n         });\n@@ -925,7 +925,7 @@ impl<'a> Parser<'a> {\n         TyClosure(@ClosureTy {\n             sigil: OwnedSigil,\n             region: None,\n-            purity: ImpureFn,\n+            fn_style: NormalFn,\n             onceness: Once,\n             bounds: bounds,\n             decl: decl,\n@@ -945,11 +945,11 @@ impl<'a> Parser<'a> {\n           |        |      |  Argument types\n           |        |    Lifetimes\n           |     Once-ness (a.k.a., affine)\n-        Purity\n+        Function Style\n \n         */\n \n-        let purity = self.parse_unsafety();\n+        let fn_style = self.parse_unsafety();\n         let onceness = if self.eat_keyword(keywords::Once) {Once} else {Many};\n \n         let lifetimes = if self.eat(&token::LT) {\n@@ -985,19 +985,19 @@ impl<'a> Parser<'a> {\n         TyClosure(@ClosureTy {\n             sigil: BorrowedSigil,\n             region: region,\n-            purity: purity,\n+            fn_style: fn_style,\n             onceness: onceness,\n             bounds: bounds,\n             decl: decl,\n             lifetimes: lifetimes,\n         })\n     }\n \n-    pub fn parse_unsafety(&mut self) -> Purity {\n+    pub fn parse_unsafety(&mut self) -> FnStyle {\n         if self.eat_keyword(keywords::Unsafe) {\n             return UnsafeFn;\n         } else {\n-            return ImpureFn;\n+            return NormalFn;\n         }\n     }\n \n@@ -1045,7 +1045,7 @@ impl<'a> Parser<'a> {\n \n             let vis_span = p.span;\n             let vis = p.parse_visibility();\n-            let pur = p.parse_fn_purity();\n+            let style = p.parse_fn_style();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n             let ident = p.parse_ident();\n@@ -1071,7 +1071,7 @@ impl<'a> Parser<'a> {\n                 Required(TypeMethod {\n                     ident: ident,\n                     attrs: attrs,\n-                    purity: pur,\n+                    fn_style: style,\n                     decl: d,\n                     generics: generics,\n                     explicit_self: explicit_self,\n@@ -1089,7 +1089,7 @@ impl<'a> Parser<'a> {\n                     attrs: attrs,\n                     generics: generics,\n                     explicit_self: explicit_self,\n-                    purity: pur,\n+                    fn_style: style,\n                     decl: d,\n                     body: body,\n                     id: ast::DUMMY_NODE_ID,\n@@ -3754,11 +3754,11 @@ impl<'a> Parser<'a> {\n     }\n \n     // parse an item-position function declaration.\n-    fn parse_item_fn(&mut self, purity: Purity, abi: abi::Abi) -> ItemInfo {\n+    fn parse_item_fn(&mut self, fn_style: FnStyle, abi: abi::Abi) -> ItemInfo {\n         let (ident, generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl(false);\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block();\n-        (ident, ItemFn(decl, purity, abi, generics, body), Some(inner_attrs))\n+        (ident, ItemFn(decl, fn_style, abi, generics, body), Some(inner_attrs))\n     }\n \n     // parse a method in a trait impl, starting with `attrs` attributes.\n@@ -3772,7 +3772,7 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n \n         let visa = self.parse_visibility();\n-        let pur = self.parse_fn_purity();\n+        let fn_style = self.parse_fn_style();\n         let ident = self.parse_ident();\n         let generics = self.parse_generics();\n         let (explicit_self, decl) = self.parse_fn_decl_with_self(|p| {\n@@ -3787,7 +3787,7 @@ impl<'a> Parser<'a> {\n             attrs: attrs,\n             generics: generics,\n             explicit_self: explicit_self,\n-            purity: pur,\n+            fn_style: fn_style,\n             decl: decl,\n             body: body,\n             id: ast::DUMMY_NODE_ID,\n@@ -4169,8 +4169,8 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n \n         // Parse obsolete purity.\n-        let purity = self.parse_fn_purity();\n-        if purity != ImpureFn {\n+        let fn_style = self.parse_fn_style();\n+        if fn_style != NormalFn {\n             self.obsolete(self.last_span, ObsoleteUnsafeExternFn);\n         }\n \n@@ -4208,8 +4208,8 @@ impl<'a> Parser<'a> {\n     }\n \n     // parse safe/unsafe and fn\n-    fn parse_fn_purity(&mut self) -> Purity {\n-        if self.eat_keyword(keywords::Fn) { ImpureFn }\n+    fn parse_fn_style(&mut self) -> FnStyle {\n+        if self.eat_keyword(keywords::Fn) { NormalFn }\n         else if self.eat_keyword(keywords::Unsafe) {\n             self.expect_keyword(keywords::Fn);\n             UnsafeFn\n@@ -4540,7 +4540,7 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             self.bump();\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(ImpureFn, abi::Rust);\n+                self.parse_item_fn(NormalFn, abi::Rust);\n             let item = self.mk_item(lo,\n                                     self.last_span.hi,\n                                     ident,"}, {"sha": "b33f76a6047ef614180ef519ae079fa54aaa8c83", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -186,11 +186,11 @@ pub fn path_to_str(p: &ast::Path) -> ~str {\n     to_str(|s| s.print_path(p, false))\n }\n \n-pub fn fun_to_str(decl: &ast::FnDecl, purity: ast::Purity, name: ast::Ident,\n+pub fn fun_to_str(decl: &ast::FnDecl, fn_style: ast::FnStyle, name: ast::Ident,\n                   opt_explicit_self: Option<ast::ExplicitSelf_>,\n                   generics: &ast::Generics) -> ~str {\n     to_str(|s| {\n-        try!(s.print_fn(decl, Some(purity), abi::Rust,\n+        try!(s.print_fn(decl, Some(fn_style), abi::Rust,\n                         name, generics, opt_explicit_self, ast::Inherited));\n         try!(s.end()); // Close the head box\n         s.end() // Close the outer box\n@@ -479,7 +479,7 @@ impl<'a> State<'a> {\n                     ty_params: OwnedSlice::empty()\n                 };\n                 try!(self.print_ty_fn(Some(f.abi), None, &None,\n-                                   f.purity, ast::Many, f.decl, None, &None,\n+                                   f.fn_style, ast::Many, f.decl, None, &None,\n                                    Some(&generics), None));\n             }\n             ast::TyClosure(f) => {\n@@ -488,7 +488,7 @@ impl<'a> State<'a> {\n                     ty_params: OwnedSlice::empty()\n                 };\n                 try!(self.print_ty_fn(None, Some(f.sigil), &f.region,\n-                                   f.purity, f.onceness, f.decl, None, &f.bounds,\n+                                   f.fn_style, f.onceness, f.decl, None, &f.bounds,\n                                    Some(&generics), None));\n             }\n             ast::TyPath(ref path, ref bounds, _) => {\n@@ -567,10 +567,10 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \";\"));\n                 try!(self.end()); // end the outer cbox\n             }\n-            ast::ItemFn(decl, purity, abi, ref typarams, body) => {\n+            ast::ItemFn(decl, fn_style, abi, ref typarams, body) => {\n                 try!(self.print_fn(\n                     decl,\n-                    Some(purity),\n+                    Some(fn_style),\n                     abi,\n                     item.ident,\n                     typarams,\n@@ -861,7 +861,7 @@ impl<'a> State<'a> {\n         try!(self.print_ty_fn(None,\n                               None,\n                               &None,\n-                              m.purity,\n+                              m.fn_style,\n                               ast::Many,\n                               m.decl,\n                               Some(m.ident),\n@@ -883,7 +883,7 @@ impl<'a> State<'a> {\n         try!(self.hardbreak_if_not_bol());\n         try!(self.maybe_print_comment(meth.span.lo));\n         try!(self.print_outer_attributes(meth.attrs.as_slice()));\n-        try!(self.print_fn(meth.decl, Some(meth.purity), abi::Rust,\n+        try!(self.print_fn(meth.decl, Some(meth.fn_style), abi::Rust,\n                         meth.ident, &meth.generics, Some(meth.explicit_self.node),\n                         meth.vis));\n         try!(word(&mut self.s, \" \"));\n@@ -1708,14 +1708,14 @@ impl<'a> State<'a> {\n \n     pub fn print_fn(&mut self,\n                     decl: &ast::FnDecl,\n-                    purity: Option<ast::Purity>,\n+                    fn_style: Option<ast::FnStyle>,\n                     abi: abi::Abi,\n                     name: ast::Ident,\n                     generics: &ast::Generics,\n                     opt_explicit_self: Option<ast::ExplicitSelf_>,\n                     vis: ast::Visibility) -> IoResult<()> {\n         try!(self.head(\"\"));\n-        try!(self.print_fn_header_info(opt_explicit_self, purity, abi,\n+        try!(self.print_fn_header_info(opt_explicit_self, fn_style, abi,\n                                        ast::Many, None, vis));\n         try!(self.nbsp());\n         try!(self.print_ident(name));\n@@ -2024,7 +2024,7 @@ impl<'a> State<'a> {\n                        opt_abi: Option<abi::Abi>,\n                        opt_sigil: Option<ast::Sigil>,\n                        opt_region: &Option<ast::Lifetime>,\n-                       purity: ast::Purity,\n+                       fn_style: ast::FnStyle,\n                        onceness: ast::Onceness,\n                        decl: &ast::FnDecl,\n                        id: Option<ast::Ident>,\n@@ -2040,12 +2040,12 @@ impl<'a> State<'a> {\n             try!(word(&mut self.s, \"proc\"));\n         } else if opt_sigil == Some(ast::BorrowedSigil) {\n             try!(self.print_extern_opt_abi(opt_abi));\n-            try!(self.print_purity(purity));\n+            try!(self.print_fn_style(fn_style));\n             try!(self.print_onceness(onceness));\n         } else {\n             try!(self.print_opt_abi_and_extern_if_nondefault(opt_abi));\n             try!(self.print_opt_sigil(opt_sigil));\n-            try!(self.print_purity(purity));\n+            try!(self.print_fn_style(fn_style));\n             try!(self.print_onceness(onceness));\n             try!(word(&mut self.s, \"fn\"));\n         }\n@@ -2294,10 +2294,10 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_opt_purity(&mut self,\n-                            opt_purity: Option<ast::Purity>) -> IoResult<()> {\n-        match opt_purity {\n-            Some(purity) => self.print_purity(purity),\n+    pub fn print_opt_fn_style(&mut self,\n+                            opt_fn_style: Option<ast::FnStyle>) -> IoResult<()> {\n+        match opt_fn_style {\n+            Some(fn_style) => self.print_fn_style(fn_style),\n             None => Ok(())\n         }\n     }\n@@ -2338,7 +2338,7 @@ impl<'a> State<'a> {\n \n     pub fn print_fn_header_info(&mut self,\n                                 _opt_explicit_self: Option<ast::ExplicitSelf_>,\n-                                opt_purity: Option<ast::Purity>,\n+                                opt_fn_style: Option<ast::FnStyle>,\n                                 abi: abi::Abi,\n                                 onceness: ast::Onceness,\n                                 opt_sigil: Option<ast::Sigil>,\n@@ -2349,21 +2349,21 @@ impl<'a> State<'a> {\n             try!(self.word_nbsp(\"extern\"));\n             try!(self.word_nbsp(abi.to_str()));\n \n-            if opt_purity != Some(ast::ExternFn) {\n-                try!(self.print_opt_purity(opt_purity));\n+            if opt_fn_style != Some(ast::ExternFn) {\n+                try!(self.print_opt_fn_style(opt_fn_style));\n             }\n         } else {\n-            try!(self.print_opt_purity(opt_purity));\n+            try!(self.print_opt_fn_style(opt_fn_style));\n         }\n \n         try!(self.print_onceness(onceness));\n         try!(word(&mut self.s, \"fn\"));\n         self.print_opt_sigil(opt_sigil)\n     }\n \n-    pub fn print_purity(&mut self, p: ast::Purity) -> IoResult<()> {\n-        match p {\n-            ast::ImpureFn => Ok(()),\n+    pub fn print_fn_style(&mut self, s: ast::FnStyle) -> IoResult<()> {\n+        match s {\n+            ast::NormalFn => Ok(()),\n             ast::UnsafeFn => self.word_nbsp(\"unsafe\"),\n             ast::ExternFn => self.word_nbsp(\"extern\")\n         }\n@@ -2399,7 +2399,7 @@ mod test {\n             variadic: false\n         };\n         let generics = ast_util::empty_generics();\n-        assert_eq!(&fun_to_str(&decl, ast::ImpureFn, abba_ident,\n+        assert_eq!(&fun_to_str(&decl, ast::NormalFn, abba_ident,\n                                None, &generics),\n                    &~\"fn abba()\");\n     }"}, {"sha": "5b376f4c5feb6ae9e3b3c77b717f1083949b0f48", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -29,7 +29,7 @@ use owned_slice::OwnedSlice;\n \n pub enum FnKind<'a> {\n     // fn foo() or extern \"Abi\" fn foo()\n-    FkItemFn(Ident, &'a Generics, Purity, Abi),\n+    FkItemFn(Ident, &'a Generics, FnStyle, Abi),\n \n     // fn foo(&self)\n     FkMethod(Ident, &'a Generics, &'a Method),\n@@ -207,8 +207,8 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n             visitor.visit_ty(typ, env.clone());\n             visitor.visit_expr(expr, env);\n         }\n-        ItemFn(declaration, purity, abi, ref generics, body) => {\n-            visitor.visit_fn(&FkItemFn(item.ident, generics, purity, abi),\n+        ItemFn(declaration, fn_style, abi, ref generics, body) => {\n+            visitor.visit_fn(&FkItemFn(item.ident, generics, fn_style, abi),\n                              declaration,\n                              body,\n                              item.span,"}, {"sha": "e64f76bb4cd779418d8bdda9d79c5b61f1e2efb0", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf4e900d421f011d7c68016308aab4998f9084e/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=0bf4e900d421f011d7c68016308aab4998f9084e", "patch": "@@ -17,7 +17,7 @@ trait Mumbo {\n impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: @uint) { *self + *x; }\n-    //~^ ERROR expected impure fn but found unsafe fn\n+    //~^ ERROR expected normal fn but found unsafe fn\n }\n \n fn main() {}"}]}