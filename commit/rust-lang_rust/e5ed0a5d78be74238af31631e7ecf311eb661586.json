{"sha": "e5ed0a5d78be74238af31631e7ecf311eb661586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZWQwYTVkNzhiZTc0MjM4YWYzMTYzMWU3ZWNmMzExZWI2NjE1ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-20T05:39:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-20T05:39:25Z"}, "message": "Auto merge of #37842 - nikomatsakis:incremental-test, r=mw\n\nAdd tests for incremental reuse scenarios\n\nThese are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.\n\nr? @michaelwoerister", "tree": {"sha": "1c99ccad60102594b579a82f4f30fd38b90614a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c99ccad60102594b579a82f4f30fd38b90614a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ed0a5d78be74238af31631e7ecf311eb661586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ed0a5d78be74238af31631e7ecf311eb661586", "html_url": "https://github.com/rust-lang/rust/commit/e5ed0a5d78be74238af31631e7ecf311eb661586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ed0a5d78be74238af31631e7ecf311eb661586/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c535c6ec688fba62ba50e4cd156b3ea8d01d57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c535c6ec688fba62ba50e4cd156b3ea8d01d57a", "html_url": "https://github.com/rust-lang/rust/commit/7c535c6ec688fba62ba50e4cd156b3ea8d01d57a"}, {"sha": "36f2af19995d5273e9def5396c62f8766218ca59", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f2af19995d5273e9def5396c62f8766218ca59", "html_url": "https://github.com/rust-lang/rust/commit/36f2af19995d5273e9def5396c62f8766218ca59"}], "stats": {"total": 382, "additions": 382, "deletions": 0}, "files": [{"sha": "261eb38a51aebee089915408fd61f716ff28c0fc", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/e5ed0a5d78be74238af31631e7ecf311eb661586/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ed0a5d78be74238af31631e7ecf311eb661586/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=e5ed0a5d78be74238af31631e7ecf311eb661586", "patch": "@@ -0,0 +1,164 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we change a type definition by adding a field.  Fns with\n+// this type in their signature are recompiled, as are their callers.\n+// Fns with that type used only in their body are also recompiled, but\n+// their callers are not.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(static_in_const)]\n+#![allow(dead_code)]\n+\n+// These are expected to require translation.\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_sig\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-call_fn_with_type_in_sig\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_body\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+\n+#![rustc_partition_reused(module=\"struct_point-call_fn_with_type_in_body\", cfg=\"rpass2\")]\n+\n+mod point {\n+    #[cfg(rpass1)]\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+    }\n+\n+    #[cfg(rpass2)]\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+        pub z: f32,\n+    }\n+\n+    impl Point {\n+        pub fn origin() -> Point {\n+            #[cfg(rpass1)]\n+            return Point { x: 0.0, y: 0.0 };\n+\n+            #[cfg(rpass2)]\n+            return Point { x: 0.0, y: 0.0, z: 0.0 };\n+        }\n+\n+        pub fn total(&self) -> f32 {\n+            #[cfg(rpass1)]\n+            return self.x + self.y;\n+\n+            #[cfg(rpass2)]\n+            return self.x + self.y + self.z;\n+        }\n+\n+        pub fn x(&self) -> f32 {\n+            self.x\n+        }\n+    }\n+}\n+\n+/// A fn that has the changed type in its signature; must currently be\n+/// rebuilt.\n+///\n+/// You could imagine that, in the future, if the change were\n+/// sufficiently \"private\", we might not need to type-check again.\n+/// Rebuilding is probably always necessary since the layout may be\n+/// affected.\n+mod fn_with_type_in_sig {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn boop(p: Option<&Point>) -> f32 {\n+        p.map(|p| p.total()).unwrap_or(0.0)\n+    }\n+}\n+\n+/// Call a fn that has the changed type in its signature; this\n+/// currently must also be rebuilt.\n+///\n+/// You could imagine that, in the future, if the change were\n+/// sufficiently \"private\", we might not need to type-check again.\n+/// Rebuilding is probably always necessary since the layout may be\n+/// affected.\n+mod call_fn_with_type_in_sig {\n+    use fn_with_type_in_sig;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn bip() -> f32 {\n+        fn_with_type_in_sig::boop(None)\n+    }\n+}\n+\n+/// A fn that uses the changed type, but only in its body, not its\n+/// signature.\n+///\n+/// You could imagine that, in the future, if the change were\n+/// sufficiently \"private\", we might not need to type-check again.\n+/// Rebuilding is probably always necessary since the layout may be\n+/// affected.\n+mod fn_with_type_in_body {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn boop() -> f32 {\n+        Point::origin().total()\n+    }\n+}\n+\n+/// A fn X that calls a fn Y, where Y uses the changed type in its\n+/// body. In this case, the effects of the change should be contained\n+/// to Y; X should not have to be rebuilt, nor should it need to be\n+/// typechecked again.\n+mod call_fn_with_type_in_body {\n+    use fn_with_type_in_body;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn bip() -> f32 {\n+        fn_with_type_in_body::boop()\n+    }\n+}\n+\n+/// A fn item that makes an instance of `Point` but does not invoke methods\n+mod fn_make_struct {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn make_origin(p: Point) -> Point {\n+        Point { ..p }\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_read_field {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn get_x(p: Point) -> f32 {\n+        p.x\n+    }\n+}\n+\n+/// A fn item that writes to a field of `Point` but does not invoke methods\n+mod fn_write_field {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn inc_x(p: &mut Point) {\n+        p.x += 1.0;\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "665eafb4f4eeb66fcd3310a506b575c4f163374a", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/e5ed0a5d78be74238af31631e7ecf311eb661586/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ed0a5d78be74238af31631e7ecf311eb661586/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=e5ed0a5d78be74238af31631e7ecf311eb661586", "patch": "@@ -0,0 +1,105 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we change the body of a public, inherent method.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+#![allow(dead_code)]\n+\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+\n+// FIXME(#35078) -- this gets recompiled because we don't separate sig from body\n+#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n+\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+\n+mod point {\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+    }\n+\n+    impl Point {\n+        pub fn distance_from_origin(&self) -> f32 {\n+            #[cfg(rpass1)]\n+            return self.x * self.x + self.y * self.y;\n+\n+            #[cfg(rpass2)]\n+            return (self.x * self.x + self.y * self.y).sqrt();\n+        }\n+\n+        pub fn x(&self) -> f32 {\n+            self.x\n+        }\n+    }\n+}\n+\n+/// A fn item that calls the method on `Point` which changed\n+mod fn_calls_changed_method {\n+    use point::Point;\n+\n+    // FIXME(#35078) -- this gets recompiled because we don't separate sig from body\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let p = Point { x: 2.0, y: 2.0 };\n+        p.distance_from_origin();\n+    }\n+}\n+\n+/// A fn item that calls a method on `Point` which did not change\n+mod fn_calls_another_method {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let p = Point { x: 2.0, y: 2.0 };\n+        p.x();\n+    }\n+}\n+\n+/// A fn item that makes an instance of `Point` but does not invoke methods\n+mod fn_make_struct {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn make_origin() -> Point {\n+        Point { x: 2.0, y: 2.0 }\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_read_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn get_x(p: Point) -> f32 {\n+        p.x\n+    }\n+}\n+\n+/// A fn item that writes to a field of `Point` but does not invoke methods\n+mod fn_write_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn inc_x(p: &mut Point) {\n+        p.x += 1.0;\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "54e06e16998cdfa92aee3af600d622d243c0c30e", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/e5ed0a5d78be74238af31631e7ecf311eb661586/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ed0a5d78be74238af31631e7ecf311eb661586/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=e5ed0a5d78be74238af31631e7ecf311eb661586", "patch": "@@ -0,0 +1,113 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we change the *signature* of a public, inherent method.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(static_in_const)]\n+#![allow(dead_code)]\n+\n+// These are expected to require translation.\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n+\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+\n+mod point {\n+    pub struct Point {\n+        pub x: f32,\n+        pub y: f32,\n+    }\n+\n+    impl Point {\n+        #[cfg(rpass1)]\n+        pub fn distance_from_point(&self, p: Option<Point>) -> f32 {\n+            let p = p.unwrap_or(Point { x: 0.0, y: 0.0 });\n+            let x_diff = self.x - p.x;\n+            let y_diff = self.y - p.y;\n+            return x_diff * x_diff + y_diff * y_diff;\n+        }\n+\n+        #[cfg(rpass2)]\n+        pub fn distance_from_point(&self, p: Option<&Point>) -> f32 {\n+            const ORIGIN: &Point = &Point { x: 0.0, y: 0.0 };\n+            let p = p.unwrap_or(ORIGIN);\n+            let x_diff = self.x - p.x;\n+            let y_diff = self.y - p.y;\n+            return x_diff * x_diff + y_diff * y_diff;\n+        }\n+\n+        pub fn x(&self) -> f32 {\n+            self.x\n+        }\n+    }\n+}\n+\n+/// A fn item that calls the method that was changed\n+mod fn_calls_changed_method {\n+    use point::Point;\n+\n+    #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let p = Point { x: 2.0, y: 2.0 };\n+        p.distance_from_point(None);\n+    }\n+}\n+\n+/// A fn item that calls a method that was not changed\n+mod fn_calls_another_method {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let p = Point { x: 2.0, y: 2.0 };\n+        p.x();\n+    }\n+}\n+\n+/// A fn item that makes an instance of `Point` but does not invoke methods\n+mod fn_make_struct {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn make_origin() -> Point {\n+        Point { x: 2.0, y: 2.0 }\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_read_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn get_x(p: Point) -> f32 {\n+        p.x\n+    }\n+}\n+\n+/// A fn item that writes to a field of `Point` but does not invoke methods\n+mod fn_write_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn inc_x(p: &mut Point) {\n+        p.x += 1.0;\n+    }\n+}\n+\n+fn main() {\n+}"}]}