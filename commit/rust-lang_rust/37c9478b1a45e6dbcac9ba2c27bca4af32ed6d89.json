{"sha": "37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "node_id": "C_kwDOAAsO6NoAKDM3Yzk0NzhiMWE0NWU2ZGJjYWM5YmEyYzI3YmNhNGFmMzJlZDZkODk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-23T17:53:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-23T17:53:42Z"}, "message": "Rollup merge of #111761 - bvanjoi:fix-109148, r=petrochenkov\n\nfix(resolve): not defined `extern crate shadow_name`\n\nFixes https://github.com/rust-lang/rust/issues/109148\n\n## Why does #109148 panic?\n\nWhen resolving `use std::xx` it enters `visit_scopes` from `early_resolve_ident_in_lexical_scope`, and iters twice during the loop:\n\n|iter| `scope` | `break_result` | result |\n|-|-|-|-|\n| 0 | `Module` pointed to root | binding pointed to `Undetermined`, so result is `None` | scope changed to `ExternPrelude` |\n| 1 | `ExternPrelude` | binding pointed to `std` | - |\n\nThen, the result of `maybe_resolve_path` is `Module(std)`, so `import.imported_module.set` is executed.\n\nFinally, during the `finalize_import` of `use std::xx`, `resolve_path` returns `NonModule` because `Binding(Ident(std), Module(root)`'s binding points to `extern crate blah as std`, which causes the assertion to fail at `assert!(import.imported_module.get().is_none());`.\n\n## Investigation\n\nThe question is why `#[a] extern crate blah as std` is not defined as a binding of `std::xxx`, which causes the iteration twice during `visit_scopes` when resolving `std::xxx`. Ideally, the value of `break_result.is_some()` should have been valid in the first iteration.\n\nAfter debugging, I found that because `#[a] extern crate blah as std` had been dummied by `placeholder` during `collect_invocations`, so it had lost its attrs, span, etc..., so it will not be defined. However, `expand_invoc` added them back, then the next `build_reduced_graph`, `#[a] extern crate blah as std` would have been defined, so it makes the result of `resolved_path` unexpected, and the program panics.\n\n## Try to solve\n\nI think there has two-way to solve this issue:\n\n- Expand invocations before the first `resolve_imports` during `fully_expand_fragment`. However, I do not think this is a good idea because it would mess up the current design.\n- As my PR described: do not define to `extern crate blah as std` during the second `build_reduced_graph`, which is very easy and more reasonable.\n\nr? `@petrochenkov`", "tree": {"sha": "11eb8d943f8a0828cf308c43381bbf93f4b94ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11eb8d943f8a0828cf308c43381bbf93f4b94ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbP2mCRBK7hj4Ov3rIwAA3j0IAFmpYi/eY+uB9A0BvqszjwaD\nBKUeTJi0qV8U7JR/iE87dRU90o29XTkxN61KoXxPVlh11tqmghBpFSPrAtbSKzn9\nvJjDI3vJdmUWeI4Q/WISQ7jScprri+xX53hLFv3TukzULcoAbVkCfQEKgShoixuu\nI1AwBXzsf/gnS72a3UrBI1cR9Nbb5gb5ljLyB26F3ya1jrVIcmLLJCLEDPGZ9atc\nKseSAN047tvf1qlRSy6xcn3RieDOfulsCd1a+g8Z2LqAPea4job6lN+S63P2yqM3\nzhS6/94/XWZAl2ybShHdBKr7X45/2DwFdn3ieYwZ/7GAdU4KphbnFVAVzWQ1Oes=\n=i2cq\n-----END PGP SIGNATURE-----\n", "payload": "tree 11eb8d943f8a0828cf308c43381bbf93f4b94ea7\nparent ee08dd86582a15cf2755951f40c9e50adf72d39d\nparent c41b2089c7a059a7ce86107b8f3528c05ca11254\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684864422 +0200\ncommitter GitHub <noreply@github.com> 1684864422 +0200\n\nRollup merge of #111761 - bvanjoi:fix-109148, r=petrochenkov\n\nfix(resolve): not defined `extern crate shadow_name`\n\nFixes https://github.com/rust-lang/rust/issues/109148\n\n## Why does #109148 panic?\n\nWhen resolving `use std::xx` it enters `visit_scopes` from `early_resolve_ident_in_lexical_scope`, and iters twice during the loop:\n\n|iter| `scope` | `break_result` | result |\n|-|-|-|-|\n| 0 | `Module` pointed to root | binding pointed to `Undetermined`, so result is `None` | scope changed to `ExternPrelude` |\n| 1 | `ExternPrelude` | binding pointed to `std` | - |\n\nThen, the result of `maybe_resolve_path` is `Module(std)`, so `import.imported_module.set` is executed.\n\nFinally, during the `finalize_import` of `use std::xx`, `resolve_path` returns `NonModule` because `Binding(Ident(std), Module(root)`'s binding points to `extern crate blah as std`, which causes the assertion to fail at `assert!(import.imported_module.get().is_none());`.\n\n## Investigation\n\nThe question is why `#[a] extern crate blah as std` is not defined as a binding of `std::xxx`, which causes the iteration twice during `visit_scopes` when resolving `std::xxx`. Ideally, the value of `break_result.is_some()` should have been valid in the first iteration.\n\nAfter debugging, I found that because `#[a] extern crate blah as std` had been dummied by `placeholder` during `collect_invocations`, so it had lost its attrs, span, etc..., so it will not be defined. However, `expand_invoc` added them back, then the next `build_reduced_graph`, `#[a] extern crate blah as std` would have been defined, so it makes the result of `resolved_path` unexpected, and the program panics.\n\n## Try to solve\n\nI think there has two-way to solve this issue:\n\n- Expand invocations before the first `resolve_imports` during `fully_expand_fragment`. However, I do not think this is a good idea because it would mess up the current design.\n- As my PR described: do not define to `extern crate blah as std` during the second `build_reduced_graph`, which is very easy and more reasonable.\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "html_url": "https://github.com/rust-lang/rust/commit/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee08dd86582a15cf2755951f40c9e50adf72d39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee08dd86582a15cf2755951f40c9e50adf72d39d", "html_url": "https://github.com/rust-lang/rust/commit/ee08dd86582a15cf2755951f40c9e50adf72d39d"}, {"sha": "c41b2089c7a059a7ce86107b8f3528c05ca11254", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41b2089c7a059a7ce86107b8f3528c05ca11254", "html_url": "https://github.com/rust-lang/rust/commit/c41b2089c7a059a7ce86107b8f3528c05ca11254"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "b3d0e4ba258941b08d1033eae329d8d83360911a", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "patch": "@@ -873,6 +873,11 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n                     let msg = \"macro-expanded `extern crate` items cannot \\\n                                        shadow names passed with `--extern`\";\n                     self.r.tcx.sess.span_err(item.span, msg);\n+                    // `return` is intended to discard this binding because it's an\n+                    // unregistered ambiguity error which would result in a panic\n+                    // caused by inconsistency `path_res`\n+                    // more details: https://github.com/rust-lang/rust/pull/111761\n+                    return;\n                 }\n             }\n             let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert("}, {"sha": "1e31a0ff27824da3fc3876c5690a6c635b8ff6aa", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "patch": "@@ -106,7 +106,7 @@ impl Determinacy {\n /// A specific scope in which a name can be looked up.\n /// This enum is currently used only for early resolution (imports and macros),\n /// but not for late resolution yet.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n enum Scope<'a> {\n     DeriveHelpers(LocalExpnId),\n     DeriveHelpersCompat,"}, {"sha": "694cb494a15dc9280dbf44300b2e33fd56b584ff", "filename": "tests/ui/imports/issue-109148.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/tests%2Fui%2Fimports%2Fissue-109148.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/tests%2Fui%2Fimports%2Fissue-109148.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-109148.rs?ref=37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "patch": "@@ -0,0 +1,15 @@\n+// edition: 2021\n+\n+// https://github.com/rust-lang/rust/pull/111761#issuecomment-1557777314\n+macro_rules! m {\n+    () => {\n+        extern crate core as std;\n+        //~^ ERROR macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+    }\n+}\n+\n+m!();\n+\n+use std::mem;\n+\n+fn main() {}"}, {"sha": "6cc1221cfe9935ccb5cdfac488e01a9f8f79e1f4", "filename": "tests/ui/imports/issue-109148.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/tests%2Fui%2Fimports%2Fissue-109148.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89/tests%2Fui%2Fimports%2Fissue-109148.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-109148.stderr?ref=37c9478b1a45e6dbcac9ba2c27bca4af32ed6d89", "patch": "@@ -0,0 +1,13 @@\n+error: macro-expanded `extern crate` items cannot shadow names passed with `--extern`\n+  --> $DIR/issue-109148.rs:6:9\n+   |\n+LL |         extern crate core as std;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | m!();\n+   | ---- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}