{"sha": "2be062a4b08c4d0c108f41c8714f380cb5a05873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTA2MmE0YjA4YzRkMGMxMDhmNDFjODcxNGYzODBjYjVhMDU4NzM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-08T23:53:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-08T23:53:55Z"}, "message": "Rollup merge of #68918 - brson:unwrapdoc, r=Dylan-DPC\n\nDon't use the word \"unwrap\" to describe \"unwrap\" methods\n\nIt's tautological, and \"unwrap\" is essentially Rust-specific jargon.\n\nI was teaching a newbie some Rust, and doing the usual hand-waving about error handling using unwrap. They asked what 'unwrap' means. I said look it up in the docs. The docs read (paraphrased) \"unwrap unwraps\". I was embarrassed.\n\nThis changes all the Option/Result functions with unwrapping behavior to use a variation on a single description:\n\n> \"Returns the contained `Some/Ok` value [or ...].\"\n\nIt also renames the closure of `Result::unwrap_or_else` to `default` for consistency with `Option`, and perhaps makes a few other small tweaks.\n\nPrevious: https://github.com/rust-lang/rust/pull/68849", "tree": {"sha": "58d1feb4f913b50b671261452712427c1e7b3ea2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58d1feb4f913b50b671261452712427c1e7b3ea2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be062a4b08c4d0c108f41c8714f380cb5a05873", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeP0oTCRBK7hj4Ov3rIwAAdHIIADAaiYoQf3wqYvIywxkvhz4P\nYj7GXK6tslMI+qFHEUMcoLz5qbobUc+2CuhWDk7E4SzymClGx9rAMyCYF/nefjOV\nHz2yex1gaf3+ktZBkzPMRrpAJPkWRk/u06uRN3Ff9s15XchGR29ezp4ouns5n618\nuqCjuJxNe/0oD8tzwaVijeWybZZZDpfbsMnU1kDa5LoZaejz+xkJSY2KKntEt82w\nEKhvtWiJVG+q0651TtPlkCY4YcI2Ovlq1hc+Fhw3SpA4k4vwnzqrpBaC4K5s6Tkx\nhNA2/fMDlcT1TMmpWF0jmXhxrdLbp/Ouyk3BwcBHjheZKkmB5lpIsigizU0VkKU=\n=lVkq\n-----END PGP SIGNATURE-----\n", "payload": "tree 58d1feb4f913b50b671261452712427c1e7b3ea2\nparent 664d87f9b1e54421e9fa77988e92be53337821fd\nparent 8251e12950159c5802dd3995b14be7cf4fa99acd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581206035 +0100\ncommitter GitHub <noreply@github.com> 1581206035 +0100\n\nRollup merge of #68918 - brson:unwrapdoc, r=Dylan-DPC\n\nDon't use the word \"unwrap\" to describe \"unwrap\" methods\n\nIt's tautological, and \"unwrap\" is essentially Rust-specific jargon.\n\nI was teaching a newbie some Rust, and doing the usual hand-waving about error handling using unwrap. They asked what 'unwrap' means. I said look it up in the docs. The docs read (paraphrased) \"unwrap unwraps\". I was embarrassed.\n\nThis changes all the Option/Result functions with unwrapping behavior to use a variation on a single description:\n\n> \"Returns the contained `Some/Ok` value [or ...].\"\n\nIt also renames the closure of `Result::unwrap_or_else` to `default` for consistency with `Option`, and perhaps makes a few other small tweaks.\n\nPrevious: https://github.com/rust-lang/rust/pull/68849\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be062a4b08c4d0c108f41c8714f380cb5a05873", "html_url": "https://github.com/rust-lang/rust/commit/2be062a4b08c4d0c108f41c8714f380cb5a05873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be062a4b08c4d0c108f41c8714f380cb5a05873/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664d87f9b1e54421e9fa77988e92be53337821fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/664d87f9b1e54421e9fa77988e92be53337821fd", "html_url": "https://github.com/rust-lang/rust/commit/664d87f9b1e54421e9fa77988e92be53337821fd"}, {"sha": "8251e12950159c5802dd3995b14be7cf4fa99acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8251e12950159c5802dd3995b14be7cf4fa99acd", "html_url": "https://github.com/rust-lang/rust/commit/8251e12950159c5802dd3995b14be7cf4fa99acd"}], "stats": {"total": 138, "additions": 75, "deletions": 63}, "files": [{"sha": "9b32442371c37a32c77577b8e66e2f6551972911", "filename": "src/libcore/option.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2be062a4b08c4d0c108f41c8714f380cb5a05873/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be062a4b08c4d0c108f41c8714f380cb5a05873/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=2be062a4b08c4d0c108f41c8714f380cb5a05873", "patch": "@@ -317,7 +317,7 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps an option, yielding the content of a [`Some`].\n+    /// Returns the contained [`Some`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n@@ -348,17 +348,22 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].\n+    /// Returns the contained [`Some`] value, consuming the `self` value.\n     ///\n-    /// In general, because this function may panic, its use is discouraged.\n+    /// Because this function may panic, its use is generally discouraged.\n     /// Instead, prefer to use pattern matching and handle the [`None`]\n-    /// case explicitly.\n+    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n+    /// [`unwrap_or_default`].\n+    ///\n+    /// [`unwrap_or`]: #method.unwrap_or\n+    /// [`unwrap_or_else`]: #method.unwrap_or_else\n+    /// [`unwrap_or_default`]: #method.unwrap_or_default\n     ///\n     /// # Panics\n     ///\n     /// Panics if the self value equals [`None`].\n     ///\n-    /// [`Some(v)`]: #variant.Some\n+    /// [`Some`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -382,12 +387,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the contained value or a default.\n+    /// Returns the contained [`Some`] value or a provided default.\n     ///\n     /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n     /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n     /// which is lazily evaluated.\n     ///\n+    /// [`Some`]: #variant.Some\n     /// [`unwrap_or_else`]: #method.unwrap_or_else\n     ///\n     /// # Examples\n@@ -405,7 +411,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the contained value or computes it from a closure.\n+    /// Returns the contained [`Some`] value or computes it from a closure.\n     ///\n     /// # Examples\n     ///\n@@ -986,7 +992,7 @@ impl<T: Clone> Option<&mut T> {\n }\n \n impl<T: fmt::Debug> Option<T> {\n-    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    /// Consumes `self` while expecting [`None`] and returning nothing.\n     ///\n     /// # Panics\n     ///\n@@ -1029,7 +1035,7 @@ impl<T: fmt::Debug> Option<T> {\n         }\n     }\n \n-    /// Unwraps an option, expecting [`None`] and returning nothing.\n+    /// Consumes `self` while expecting [`None`] and returning nothing.\n     ///\n     /// # Panics\n     ///\n@@ -1074,7 +1080,7 @@ impl<T: fmt::Debug> Option<T> {\n }\n \n impl<T: Default> Option<T> {\n-    /// Returns the contained value or a default\n+    /// Returns the contained [`Some`] value or a default\n     ///\n     /// Consumes the `self` argument then, if [`Some`], returns the contained\n     /// value, otherwise if [`None`], returns the [default value] for that"}, {"sha": "0bc29e1bc662cfb94dc28f43b808d2d933401be6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2be062a4b08c4d0c108f41c8714f380cb5a05873/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be062a4b08c4d0c108f41c8714f380cb5a05873/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=2be062a4b08c4d0c108f41c8714f380cb5a05873", "patch": "@@ -798,8 +798,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an [`Ok`].\n-    /// Else, it returns `optb`.\n+    /// Returns the contained [`Ok`] value or a provided default.\n     ///\n     /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n     /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n@@ -814,27 +813,25 @@ impl<T, E> Result<T, E> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let optb = 2;\n+    /// let default = 2;\n     /// let x: Result<u32, &str> = Ok(9);\n-    /// assert_eq!(x.unwrap_or(optb), 9);\n+    /// assert_eq!(x.unwrap_or(default), 9);\n     ///\n     /// let x: Result<u32, &str> = Err(\"error\");\n-    /// assert_eq!(x.unwrap_or(optb), optb);\n+    /// assert_eq!(x.unwrap_or(default), default);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap_or(self, optb: T) -> T {\n+    pub fn unwrap_or(self, default: T) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(_) => optb,\n+            Err(_) => default,\n         }\n     }\n \n-    /// Unwraps a result, yielding the content of an [`Ok`].\n-    /// If the value is an [`Err`] then it calls `op` with its value.\n+    /// Returns the contained [`Ok`] value or computes it from a closure.\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -937,7 +934,44 @@ impl<T: Clone, E> Result<&mut T, E> {\n }\n \n impl<T, E: fmt::Debug> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an [`Ok`].\n+    /// Returns the contained [`Ok`] value, consuming the `self` value.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is an [`Err`], with a panic message including the\n+    /// passed message, and the content of the [`Err`].\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```{.should_panic}\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n+    pub fn expect(self, msg: &str) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => unwrap_failed(msg, &e),\n+        }\n+    }\n+\n+    /// Returns the contained [`Ok`] value, consuming the `self` value.\n+    ///\n+    /// Because this function may panic, its use is generally discouraged.\n+    /// Instead, prefer to use pattern matching and handle the [`Err`]\n+    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n+    /// [`unwrap_or_default`].\n+    ///\n+    /// [`unwrap_or`]: #method.unwrap_or\n+    /// [`unwrap_or_else`]: #method.unwrap_or_else\n+    /// [`unwrap_or_default`]: #method.unwrap_or_default\n     ///\n     /// # Panics\n     ///\n@@ -969,13 +1003,15 @@ impl<T, E: fmt::Debug> Result<T, E> {\n             Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n         }\n     }\n+}\n \n-    /// Unwraps a result, yielding the content of an [`Ok`].\n+impl<T: fmt::Debug, E> Result<T, E> {\n+    /// Returns the contained [`Err`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the value is an [`Err`], with a panic message including the\n-    /// passed message, and the content of the [`Err`].\n+    /// Panics if the value is an [`Ok`], with a panic message including the\n+    /// passed message, and the content of the [`Ok`].\n     ///\n     /// [`Ok`]: enum.Result.html#variant.Ok\n     /// [`Err`]: enum.Result.html#variant.Err\n@@ -985,22 +1021,20 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// Basic usage:\n     ///\n     /// ```{.should_panic}\n-    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n+    /// let x: Result<u32, &str> = Ok(10);\n+    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n     #[inline]\n     #[track_caller]\n-    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n-    pub fn expect(self, msg: &str) -> T {\n+    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n+    pub fn expect_err(self, msg: &str) -> E {\n         match self {\n-            Ok(t) => t,\n-            Err(e) => unwrap_failed(msg, &e),\n+            Ok(t) => unwrap_failed(msg, &t),\n+            Err(e) => e,\n         }\n     }\n-}\n \n-impl<T: fmt::Debug, E> Result<T, E> {\n-    /// Unwraps a result, yielding the content of an [`Err`].\n+    /// Returns the contained [`Err`] value, consuming the `self` value.\n     ///\n     /// # Panics\n     ///\n@@ -1031,38 +1065,10 @@ impl<T: fmt::Debug, E> Result<T, E> {\n             Err(e) => e,\n         }\n     }\n-\n-    /// Unwraps a result, yielding the content of an [`Err`].\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is an [`Ok`], with a panic message including the\n-    /// passed message, and the content of the [`Ok`].\n-    ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```{.should_panic}\n-    /// let x: Result<u32, &str> = Ok(10);\n-    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n-    pub fn expect_err(self, msg: &str) -> E {\n-        match self {\n-            Ok(t) => unwrap_failed(msg, &t),\n-            Err(e) => e,\n-        }\n-    }\n }\n \n impl<T: Default, E> Result<T, E> {\n-    /// Returns the contained value or a default\n+    /// Returns the contained [`Ok`] value or a default\n     ///\n     /// Consumes the `self` argument then, if [`Ok`], returns the contained\n     /// value, otherwise if [`Err`], returns the default value for that\n@@ -1101,7 +1107,7 @@ impl<T: Default, E> Result<T, E> {\n \n #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n impl<T, E: Into<!>> Result<T, E> {\n-    /// Unwraps a result that can never be an [`Err`], yielding the content of the [`Ok`].\n+    /// Returns the contained [`Ok`] value, but never panics.\n     ///\n     /// Unlike [`unwrap`], this method is known to never panic on the\n     /// result types it is implemented for. Therefore, it can be used"}]}