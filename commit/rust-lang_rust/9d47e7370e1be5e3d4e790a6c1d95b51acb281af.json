{"sha": "9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNDdlNzM3MGUxYmU1ZTNkNGU3OTBhNmMxZDk1YjUxYWNiMjgxYWY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:41:43Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-19T03:55:12Z"}, "message": "Use SnippetProvider to implement SpanUtils over CodeMap\n\n`SnippetProvider::span_to_snippet` avoids allocating a `String` so it is more\nefficient than `CodeMap::span_to_snippet`.", "tree": {"sha": "3c5019744a663c415fb56cf670de6453d05cb691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5019744a663c415fb56cf670de6453d05cb691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "html_url": "https://github.com/rust-lang/rust/commit/9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0519c8001329df8e0ee798ddd593bac236e543a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0519c8001329df8e0ee798ddd593bac236e543a", "html_url": "https://github.com/rust-lang/rust/commit/f0519c8001329df8e0ee798ddd593bac236e543a"}], "stats": {"total": 151, "additions": 86, "deletions": 65}, "files": [{"sha": "6097f6339edb93ce2d6e8aa6d1007d8ec6de56e3", "filename": "rustfmt-core/src/closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fclosures.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -225,14 +225,14 @@ fn rewrite_closure_fn_decl(\n     let ret_str = fn_decl.output.rewrite(context, arg_shape)?;\n \n     let arg_items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         fn_decl.inputs.iter(),\n         \"|\",\n         \",\",\n         |arg| span_lo_for_arg(arg),\n         |arg| span_hi_for_arg(context, arg),\n         |arg| arg.rewrite(context, arg_shape),\n-        context.codemap.span_after(span, \"|\"),\n+        context.snippet_provider.span_after(span, \"|\"),\n         body.span.lo(),\n         false,\n     );"}, {"sha": "224b20835618cbf54fd3c39f2b8c169fcb608823", "filename": "rustfmt-core/src/codemap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcodemap.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -12,6 +12,7 @@\n //! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n \n use config::file_lines::LineRange;\n+use visitor::SnippetProvider;\n use syntax::codemap::{BytePos, CodeMap, Span};\n \n use comment::FindUncommented;\n@@ -32,7 +33,7 @@ pub trait LineRangeUtils {\n     fn lookup_line_range(&self, span: Span) -> LineRange;\n }\n \n-impl SpanUtils for CodeMap {\n+impl<'a> SpanUtils for SnippetProvider<'a> {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos {\n         let snippet = self.span_to_snippet(original).expect(\"Bad snippet\");\n         let offset = snippet.find_uncommented(needle).expect(\"Bad offset\") + needle.len();\n@@ -59,7 +60,7 @@ impl SpanUtils for CodeMap {\n     }\n \n     fn opt_span_after(&self, original: Span, needle: &str) -> Option<BytePos> {\n-        let snippet = self.span_to_snippet(original).ok()?;\n+        let snippet = self.span_to_snippet(original)?;\n         let offset = snippet.find_uncommented(needle)? + needle.len();\n \n         Some(original.lo() + BytePos(offset as u32))"}, {"sha": "a471445647e5579f2c6098d88b1eac19be3d032f", "filename": "rustfmt-core/src/expr.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fexpr.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -65,7 +65,10 @@ pub fn format_expr(\n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array(\n             &ptr_vec_to_ref_vec(expr_vec),\n-            mk_sp(context.codemap.span_after(expr.span, \"[\"), expr.span.hi()),\n+            mk_sp(\n+                context.snippet_provider.span_after(expr.span, \"[\"),\n+                expr.span.hi(),\n+            ),\n             context,\n             shape,\n             false,\n@@ -425,7 +428,7 @@ pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n     };\n \n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         exprs.iter(),\n         \"]\",\n         \",\",\n@@ -1002,13 +1005,15 @@ impl<'a> ControlFlow<'a> {\n         let lo = self.label.map_or(self.span.lo(), |label| label.span.hi());\n         let between_kwd_cond = mk_sp(\n             context\n-                .codemap\n+                .snippet_provider\n                 .span_after(mk_sp(lo, self.span.hi()), self.keyword.trim()),\n             self.pat.map_or(cond_span.lo(), |p| {\n                 if self.matcher.is_empty() {\n                     p.span.lo()\n                 } else {\n-                    context.codemap.span_before(self.span, self.matcher.trim())\n+                    context\n+                        .snippet_provider\n+                        .span_before(self.span, self.matcher.trim())\n                 }\n             }),\n         );\n@@ -1131,15 +1136,15 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             let between_kwd_else_block = mk_sp(\n                 self.block.span.hi(),\n                 context\n-                    .codemap\n+                    .snippet_provider\n                     .span_before(mk_sp(self.block.span.hi(), else_block.span.lo()), \"else\"),\n             );\n             let between_kwd_else_block_comment =\n                 extract_comment(between_kwd_else_block, context, shape);\n \n             let after_else = mk_sp(\n                 context\n-                    .codemap\n+                    .snippet_provider\n                     .span_after(mk_sp(self.block.span.hi(), else_block.span.lo()), \"else\"),\n                 else_block.span.lo(),\n             );\n@@ -1295,7 +1300,9 @@ fn rewrite_match(\n         } else {\n             arms[0].span().lo()\n         };\n-        context.codemap.span_after(mk_sp(cond.span.hi(), hi), \"{\")\n+        context\n+            .snippet_provider\n+            .span_after(mk_sp(cond.span.hi(), hi), \"{\")\n     } else {\n         inner_attrs[inner_attrs.len() - 1].span().hi()\n     };\n@@ -1353,7 +1360,7 @@ fn rewrite_match_arms(\n         .take(arm_len.checked_sub(1).unwrap_or(0))\n         .chain(repeat(true));\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         arms.iter()\n             .zip(is_last_iter)\n             .map(|(arm, is_last)| ArmWrapper::new(arm, is_last)),\n@@ -1915,7 +1922,7 @@ where\n         used_width + paren_overhead,\n     )?;\n \n-    let span_lo = context.codemap.span_after(span, \"(\");\n+    let span_lo = context.snippet_provider.span_after(span, \"(\");\n     let args_span = mk_sp(span_lo, span.hi());\n \n     let (extendable, list_str) = rewrite_call_args(\n@@ -1974,7 +1981,7 @@ where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         args.iter(),\n         \")\",\n         \",\",\n@@ -2473,7 +2480,7 @@ fn rewrite_struct_lit<'a>(\n     let (h_shape, v_shape) = struct_lit_shape(shape, context, path_str.len() + 3, 2)?;\n \n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n-    let body_lo = context.codemap.span_after(span, \"{\");\n+    let body_lo = context.snippet_provider.span_after(span, \"{\");\n     let fields_str = if struct_lit_can_be_aligned(fields, &base)\n         && context.config.struct_field_align_threshold() > 0\n     {\n@@ -2516,7 +2523,7 @@ fn rewrite_struct_lit<'a>(\n         };\n \n         let items = itemize_list(\n-            context.codemap,\n+            context.snippet_provider,\n             field_iter,\n             \"}\",\n             \",\",\n@@ -2665,10 +2672,10 @@ where\n             });\n     }\n \n-    let list_lo = context.codemap.span_after(span, \"(\");\n+    let list_lo = context.snippet_provider.span_after(span, \"(\");\n     let nested_shape = shape.sub_width(2)?.visual_indent(1);\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         items,\n         \")\",\n         \",\","}, {"sha": "9a6af3f267c97506bd77f64c884b785aa5bdfd7e", "filename": "rustfmt-core/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fimports.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -314,14 +314,14 @@ fn rewrite_nested_use_tree(\n         // Dummy value, see explanation below.\n         let mut items = vec![ListItem::from_str(\"\")];\n         let iter = itemize_list(\n-            context.codemap,\n+            context.snippet_provider,\n             trees.iter().map(|tree| &tree.0),\n             \"}\",\n             \",\",\n             |tree| tree.span.lo(),\n             |tree| tree.span.hi(),\n             |tree| tree.rewrite(context, nested_shape),\n-            context.codemap.span_after(span, \"{\"),\n+            context.snippet_provider.span_after(span, \"{\"),\n             span.hi(),\n             false,\n         );"}, {"sha": "f096301453085bb0be9f34aebe302e89ad9a8dde", "filename": "rustfmt-core/src/items.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fitems.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -477,7 +477,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let itemize_list_with = |one_line_width: usize| {\n             itemize_list(\n-                self.codemap,\n+                self.snippet_provider,\n                 enum_def.variants.iter(),\n                 \"}\",\n                 \",\",\n@@ -722,7 +722,7 @@ fn format_impl_ref_and_type(\n         result.push_str(format_unsafety(unsafety));\n         result.push_str(\"impl\");\n \n-        let lo = context.codemap.span_after(item.span, \"impl\");\n+        let lo = context.snippet_provider.span_after(item.span, \"impl\");\n         let hi = match *trait_ref {\n             Some(ref tr) => tr.path.span.lo(),\n             None => self_ty.span.lo(),\n@@ -929,7 +929,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         result.push_str(&header);\n \n-        let body_lo = context.codemap.span_after(item.span, \"{\");\n+        let body_lo = context.snippet_provider.span_after(item.span, \"{\");\n \n         let shape = Shape::indented(offset, context.config).offset_left(result.len())?;\n         let generics_str =\n@@ -939,7 +939,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n         if !type_param_bounds.is_empty() {\n             let ident_hi = context\n-                .codemap\n+                .snippet_provider\n                 .span_after(item.span, &format!(\"{}\", item.ident));\n             let bound_hi = type_param_bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n@@ -1133,7 +1133,7 @@ pub fn format_struct_struct(\n     result.push_str(&header_str);\n \n     let header_hi = span.lo() + BytePos(header_str.len() as u32);\n-    let body_lo = context.codemap.span_after(span, \"{\");\n+    let body_lo = context.snippet_provider.span_after(span, \"{\");\n \n     let generics_str = match struct_parts.generics {\n         Some(g) => format_generics(\n@@ -1231,7 +1231,7 @@ fn get_bytepos_after_visibility(\n ) -> BytePos {\n     match *vis {\n         ast::Visibility::Crate(s, CrateSugar::PubCrate) => context\n-            .codemap\n+            .snippet_provider\n             .span_after(mk_sp(s.hi(), default_span.hi()), terminator),\n         ast::Visibility::Crate(s, CrateSugar::JustCrate) => s.hi(),\n         ast::Visibility::Restricted { ref path, .. } => path.span.hi(),\n@@ -1253,20 +1253,24 @@ fn format_tuple_struct(\n \n     let body_lo = if fields.is_empty() {\n         let lo = get_bytepos_after_visibility(context, struct_parts.vis, span, \")\");\n-        context.codemap.span_after(mk_sp(lo, span.hi()), \"(\")\n+        context\n+            .snippet_provider\n+            .span_after(mk_sp(lo, span.hi()), \"(\")\n     } else {\n         fields[0].span.lo()\n     };\n     let body_hi = if fields.is_empty() {\n-        context.codemap.span_after(mk_sp(body_lo, span.hi()), \")\")\n+        context\n+            .snippet_provider\n+            .span_after(mk_sp(body_lo, span.hi()), \")\")\n     } else {\n         // This is a dirty hack to work around a missing `)` from the span of the last field.\n         let last_arg_span = fields[fields.len() - 1].span;\n         if context.snippet(last_arg_span).ends_with(')') {\n             last_arg_span.hi()\n         } else {\n             context\n-                .codemap\n+                .snippet_provider\n                 .span_after(mk_sp(last_arg_span.hi(), span.hi()), \")\")\n         }\n     };\n@@ -1309,7 +1313,9 @@ fn format_tuple_struct(\n         result.push('(');\n         let snippet = context.snippet(mk_sp(\n             body_lo,\n-            context.codemap.span_before(mk_sp(body_lo, span.hi()), \")\"),\n+            context\n+                .snippet_provider\n+                .span_before(mk_sp(body_lo, span.hi()), \")\"),\n         ));\n         if snippet.is_empty() {\n             // `struct S ()`\n@@ -1364,7 +1370,10 @@ pub fn rewrite_type_alias(\n     let g_shape = Shape::indented(indent, context.config)\n         .offset_left(result.len())?\n         .sub_width(2)?;\n-    let g_span = mk_sp(context.codemap.span_after(span, \"type\"), ty.span.lo());\n+    let g_span = mk_sp(\n+        context.snippet_provider.span_after(span, \"type\"),\n+        ty.span.lo(),\n+    );\n     let generics_str = rewrite_generics(context, generics, g_shape, g_span)?;\n     result.push_str(&generics_str);\n \n@@ -1881,15 +1890,15 @@ fn rewrite_fn_base(\n         .map_or(lo_after_visibility, |param| param.span().hi());\n     let args_end = if fd.inputs.is_empty() {\n         context\n-            .codemap\n+            .snippet_provider\n             .span_after(mk_sp(args_start, span.hi()), \")\")\n     } else {\n         let last_span = mk_sp(fd.inputs[fd.inputs.len() - 1].span().hi(), span.hi());\n-        context.codemap.span_after(last_span, \")\")\n+        context.snippet_provider.span_after(last_span, \")\")\n     };\n     let args_span = mk_sp(\n         context\n-            .codemap\n+            .snippet_provider\n             .span_after(mk_sp(args_start, span.hi()), \"(\"),\n         args_end,\n     );\n@@ -2140,7 +2149,7 @@ fn rewrite_args(\n             };\n             let reduced_span = mk_sp(span.lo(), second_arg_start);\n \n-            context.codemap.span_after_last(reduced_span, \",\")\n+            context.snippet_provider.span_after_last(reduced_span, \",\")\n         } else {\n             span.lo()\n         };\n@@ -2152,14 +2161,15 @@ fn rewrite_args(\n \n         let variadic_arg = if variadic {\n             let variadic_span = mk_sp(args.last().unwrap().ty.span.hi(), span.hi());\n-            let variadic_start = context.codemap.span_after(variadic_span, \"...\") - BytePos(3);\n+            let variadic_start =\n+                context.snippet_provider.span_after(variadic_span, \"...\") - BytePos(3);\n             Some(ArgumentKind::Variadic(variadic_start))\n         } else {\n             None\n         };\n \n         let more_items = itemize_list(\n-            context.codemap,\n+            context.snippet_provider,\n             args[min_args - 1..]\n                 .iter()\n                 .map(ArgumentKind::Regular)\n@@ -2353,14 +2363,14 @@ fn rewrite_generics_inner(\n     }\n \n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         generics.params.iter(),\n         \">\",\n         \",\",\n         |arg| arg.span().lo(),\n         |arg| arg.span().hi(),\n         |arg| arg.rewrite(context, shape),\n-        context.codemap.span_after(span, \"<\"),\n+        context.snippet_provider.span_after(span, \"<\"),\n         span.hi(),\n         false,\n     );\n@@ -2494,7 +2504,7 @@ fn rewrite_where_clause_rfc_style(\n     let end_of_preds = where_clause.predicates[len - 1].span().hi();\n     let span_end = span_end.unwrap_or(end_of_preds);\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         where_clause.predicates.iter(),\n         terminator,\n         \",\",\n@@ -2610,7 +2620,7 @@ fn rewrite_where_clause(\n     let end_of_preds = where_clause.predicates[len - 1].span().hi();\n     let span_end = span_end.unwrap_or(end_of_preds);\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         where_clause.predicates.iter(),\n         terminator,\n         \",\","}, {"sha": "49797a785bbaa6a3c8cd8216bb0840d7e79764be", "filename": "rustfmt-core/src/lists.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Flists.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -14,13 +14,14 @@ use std::cmp;\n use std::iter::Peekable;\n \n use config::lists::*;\n-use syntax::codemap::{BytePos, CodeMap};\n+use syntax::codemap::BytePos;\n \n use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n+use visitor::SnippetProvider;\n \n pub struct ListFormatting<'a> {\n     pub tactic: DefinitiveListTactic,\n@@ -446,7 +447,7 @@ pub struct ListItems<'a, I, F1, F2, F3>\n where\n     I: Iterator,\n {\n-    codemap: &'a CodeMap,\n+    snippet_provider: &'a SnippetProvider<'a>,\n     inner: Peekable<I>,\n     get_lo: F1,\n     get_hi: F2,\n@@ -473,7 +474,7 @@ where\n         self.inner.next().map(|item| {\n             let mut new_lines = false;\n             // Pre-comment\n-            let pre_snippet = self.codemap\n+            let pre_snippet = self.snippet_provider\n                 .span_to_snippet(mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n                 .unwrap();\n             let trimmed_pre_snippet = pre_snippet.trim();\n@@ -511,7 +512,7 @@ where\n                 Some(next_item) => (self.get_lo)(next_item),\n                 None => self.next_span_start,\n             };\n-            let post_snippet = self.codemap\n+            let post_snippet = self.snippet_provider\n                 .span_to_snippet(mk_sp((self.get_hi)(&item), next_start))\n                 .unwrap();\n \n@@ -619,7 +620,7 @@ where\n #[cfg_attr(feature = \"cargo-clippy\", allow(too_many_arguments))]\n // Creates an iterator over a list's items with associated comments.\n pub fn itemize_list<'a, T, I, F1, F2, F3>(\n-    codemap: &'a CodeMap,\n+    snippet_provider: &'a SnippetProvider,\n     inner: I,\n     terminator: &'a str,\n     separator: &'a str,\n@@ -637,7 +638,7 @@ where\n     F3: Fn(&T) -> Option<String>,\n {\n     ListItems {\n-        codemap,\n+        snippet_provider,\n         inner: inner.peekable(),\n         get_lo,\n         get_hi,"}, {"sha": "2994e1b85f276fc375139e211975756bf480cbcb", "filename": "rustfmt-core/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fmacros.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -272,7 +272,7 @@ pub fn rewrite_macro(\n                 // Convert `MacroArg` into `ast::Expr`, as `rewrite_array` only accepts the latter.\n                 let sp = mk_sp(\n                     context\n-                        .codemap\n+                        .snippet_provider\n                         .span_after(mac.span, original_style.opener()),\n                     mac.span.hi() - BytePos(1),\n                 );\n@@ -326,14 +326,14 @@ pub fn rewrite_macro_def(\n     };\n \n     let branch_items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         parsed_def.branches.iter(),\n         \"}\",\n         \";\",\n         |branch| branch.span.lo(),\n         |branch| branch.span.hi(),\n         |branch| branch.rewrite(context, arm_shape, multi_branch_style),\n-        context.codemap.span_after(span, \"{\"),\n+        context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,\n     ).collect::<Vec<_>>();"}, {"sha": "4bcf2890c35e8678b8e9cbd17706e2bee7611c25", "filename": "rustfmt-core/src/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fpatterns.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -156,14 +156,14 @@ fn rewrite_struct_pat(\n         struct_lit_shape(shape, context, path_str.len() + 3, ellipsis_str.len() + 2)?;\n \n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         fields.iter(),\n         terminator,\n         \",\",\n         |f| f.span.lo(),\n         |f| f.span.hi(),\n         |f| f.node.rewrite(context, v_shape),\n-        context.codemap.span_after(span, \"{\"),\n+        context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,\n     );\n@@ -353,14 +353,14 @@ fn count_wildcard_suffix_len(\n     let mut suffix_len = 0;\n \n     let items: Vec<_> = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         patterns.iter(),\n         \")\",\n         \",\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n         |item| item.rewrite(context, shape),\n-        context.codemap.span_after(span, \"(\"),\n+        context.snippet_provider.span_after(span, \"(\"),\n         span.hi() - BytePos(1),\n         false,\n     ).collect();"}, {"sha": "51c081e6ba88ee3c5f53339415d78b5bc1f121e1", "filename": "rustfmt-core/src/reorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Freorder.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -157,7 +157,7 @@ fn rewrite_reorderable_items(\n     span: Span,\n ) -> Option<String> {\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         reorderable_items.iter(),\n         \"\",\n         \";\","}, {"sha": "aaad36da0fe7149a81cf5796563e4d8c391cb5a1", "filename": "rustfmt-core/src/types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Ftypes.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -217,7 +217,9 @@ fn rewrite_segment(\n                     .collect::<Vec<_>>();\n \n                 let next_span_lo = param_list.last().unwrap().get_span().hi() + BytePos(1);\n-                let list_lo = context.codemap.span_after(mk_sp(*span_lo, span_hi), \"<\");\n+                let list_lo = context\n+                    .snippet_provider\n+                    .span_after(mk_sp(*span_lo, span_hi), \"<\");\n                 let separator = if path_context == PathContext::Expr {\n                     \"::\"\n                 } else {\n@@ -228,7 +230,7 @@ fn rewrite_segment(\n                     generics_shape_from_config(context.config, shape, separator.len())?;\n                 let one_line_width = shape.width.checked_sub(separator.len() + 2)?;\n                 let items = itemize_list(\n-                    context.codemap,\n+                    context.snippet_provider,\n                     param_list.into_iter(),\n                     \">\",\n                     \",\",\n@@ -295,7 +297,7 @@ where\n     }\n \n     let variadic_arg = if variadic {\n-        let variadic_start = context.codemap.span_before(span, \"...\");\n+        let variadic_start = context.snippet_provider.span_before(span, \"...\");\n         Some(ArgumentKind::Variadic(variadic_start))\n     } else {\n         None\n@@ -314,9 +316,9 @@ where\n         IndentStyle::Visual => shape.indent + 1,\n     };\n     let list_shape = Shape::legacy(budget, offset);\n-    let list_lo = context.codemap.span_after(span, \"(\");\n+    let list_lo = context.snippet_provider.span_after(span, \"(\");\n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         // FIXME Would be nice to avoid this allocation,\n         // but I couldn't get the types to work out.\n         inputs"}, {"sha": "887fefb2272a4aedba809a46bb284adb3a3eb2dc", "filename": "rustfmt-core/src/vertical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvertical.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -136,7 +136,7 @@ pub fn rewrite_with_alignment<T: AlignedItem>(\n         let rest_lo = rest[0].get_span().lo();\n         let missing_span = mk_sp(init_hi, rest_lo);\n         let missing_span = mk_sp(\n-            context.codemap.span_after(missing_span, \",\"),\n+            context.snippet_provider.span_after(missing_span, \",\"),\n             missing_span.hi(),\n         );\n \n@@ -227,7 +227,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n     }\n \n     let items = itemize_list(\n-        context.codemap,\n+        context.snippet_provider,\n         fields.iter(),\n         \"}\",\n         \",\","}, {"sha": "3ead19504f1b416db89f55de67b04ab7252bd980", "filename": "rustfmt-core/src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d47e7370e1be5e3d4e790a6c1d95b51acb281af/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=9d47e7370e1be5e3d4e790a6c1d95b51acb281af", "patch": "@@ -680,7 +680,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 _ => self.push_str(\" {\"),\n             }\n             // Hackery to account for the closing }.\n-            let mod_lo = self.codemap.span_after(source!(self, s), \"{\");\n+            let mod_lo = self.snippet_provider.span_after(source!(self, s), \"{\");\n             let body_snippet =\n                 self.snippet(mk_sp(mod_lo, source!(self, m.inner).hi() - BytePos(1)));\n             let body_snippet = body_snippet.trim();\n@@ -708,7 +708,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     pub fn skip_empty_lines(&mut self, end_pos: BytePos) {\n-        while let Some(pos) = self.codemap\n+        while let Some(pos) = self.snippet_provider\n             .opt_span_after(mk_sp(self.last_pos, end_pos), \"\\n\")\n         {\n             if let Some(snippet) = self.opt_snippet(mk_sp(self.last_pos, pos)) {\n@@ -756,7 +756,7 @@ impl Rewrite for ast::MetaItem {\n                     .shrink_left(name.len() + 1)\n                     .and_then(|s| s.sub_width(2))?;\n                 let items = itemize_list(\n-                    context.codemap,\n+                    context.snippet_provider,\n                     list.iter(),\n                     \")\",\n                     \",\","}]}