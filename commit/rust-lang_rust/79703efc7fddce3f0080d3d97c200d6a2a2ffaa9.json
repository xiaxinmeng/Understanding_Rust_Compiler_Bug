{"sha": "79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzAzZWZjN2ZkZGNlM2YwMDgwZDNkOTdjMjAwZDZhMmEyZmZhYTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-15T13:59:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-15T13:59:09Z"}, "message": "Merge #9290\n\n9290: internal: enforce no #[ignore] and no #[should_panic] r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "18d39b0aedee752543e5fdd4f73d4108694cae2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d39b0aedee752543e5fdd4f73d4108694cae2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgyLItCRBK7hj4Ov3rIwAALfIIAF4boCJ/+KHvscHpq4xUMPTf\nOFoJGLyOrOQCPpUt3iT49VhljmofSbWQJdUdihRyYRm16VNbWj0Lg412vQwYAOTd\n3PUDosYcB/zQPQAcF/QeZryWuuKrm9XvRijAQIohyRaJ8D3FKOw1S9mme1jryNIn\nLWX/XUH14gmQii+b4yu8Rn6J0lO7AuQjvAkc0GG1F2PnI4VAI7SN2pCsagyBRbmK\n2wcoz1AL0+hiqExmx0TRECm1Kxp0gXjFEvnEkqz+Knuy48/o/BAXIViTNowzZeor\nAHHglc0w2b1uUQcmopMa6CL23QtWoQzorHQJRYodJyrtRcUuGxUeI/5mxldVY/A=\n=/JA3\n-----END PGP SIGNATURE-----\n", "payload": "tree 18d39b0aedee752543e5fdd4f73d4108694cae2b\nparent 1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb\nparent 067e97d149edc5eccdd0a30079f313325e87e449\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623765549 +0000\ncommitter GitHub <noreply@github.com> 1623765549 +0000\n\nMerge #9290\n\n9290: internal: enforce no #[ignore] and no #[should_panic] r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "html_url": "https://github.com/rust-lang/rust/commit/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb", "html_url": "https://github.com/rust-lang/rust/commit/1c1f30bebfc3ffb8aabf85f688faa855ba36f3cb"}, {"sha": "067e97d149edc5eccdd0a30079f313325e87e449", "url": "https://api.github.com/repos/rust-lang/rust/commits/067e97d149edc5eccdd0a30079f313325e87e449", "html_url": "https://github.com/rust-lang/rust/commit/067e97d149edc5eccdd0a30079f313325e87e449"}], "stats": {"total": 145, "additions": 60, "deletions": 85}, "files": [{"sha": "d8e0dc4d598d2cc4a613efe985faca2b69a7265f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -1130,15 +1130,15 @@ fn foo<'foobar>(_: &'foobar ()) {\n     }\n \n     #[test]\n-    #[ignore] // requires the HIR to somehow track these hrtb lifetimes\n     fn goto_lifetime_hrtb() {\n-        check(\n+        // FIXME: requires the HIR to somehow track these hrtb lifetimes\n+        check_unresolved(\n             r#\"trait Foo<T> {}\n fn foo<T>() where for<'a> T: Foo<&'a$0 (u8, u16)>, {}\n                     //^^\n \"#,\n         );\n-        check(\n+        check_unresolved(\n             r#\"trait Foo<T> {}\n fn foo<T>() where for<'a$0> T: Foo<&'a (u8, u16)>, {}\n                     //^^\n@@ -1147,9 +1147,9 @@ fn foo<T>() where for<'a$0> T: Foo<&'a (u8, u16)>, {}\n     }\n \n     #[test]\n-    #[ignore] // requires ForTypes to be implemented\n     fn goto_lifetime_hrtb_for_type() {\n-        check(\n+        // FIXME: requires ForTypes to be implemented\n+        check_unresolved(\n             r#\"trait Foo<T> {}\n fn foo<T>() where T: for<'a> Foo<&'a$0 (u8, u16)>, {}\n                        //^^"}, {"sha": "f834bf16a5d19a17a181b6e45697c43b56227deb", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -361,8 +361,6 @@ pub struct Foo { pub bar: () }\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME reenable this test when `Semantics::resolve_record_field` works with union fields\n     fn fix_visibility_of_union_field() {\n         check_assist(\n             fix_visibility,"}, {"sha": "6a658d4cfd8bbf5848d743ca77a33aba6ee94a2c", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -811,9 +811,8 @@ fn bar(baz: Baz::Bof) ${0:-> ()} {\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME fix printing the generics of a `Ty` to make this test pass\n     fn add_function_with_generic_arg() {\n+        // FIXME: This is wrong, generated `bar` should include generic parameter.\n         check_assist(\n             generate_function,\n             r\"\n@@ -826,17 +825,16 @@ fn foo<T>(t: T) {\n     bar(t)\n }\n \n-fn bar<T>(t: T) ${0:-> ()} {\n+fn bar(t: T) ${0:-> ()} {\n     todo!()\n }\n \",\n         )\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME Fix function type printing to make this test pass\n     fn add_function_with_fn_arg() {\n+        // FIXME: The argument in `bar` is wrong.\n         check_assist(\n             generate_function,\n             r\"\n@@ -857,17 +855,16 @@ fn foo() {\n     bar(Baz::new);\n }\n \n-fn bar(arg: fn() -> Baz) ${0:-> ()} {\n+fn bar(new: fn) ${0:-> ()} {\n     todo!()\n }\n \",\n         )\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME Fix closure type printing to make this test pass\n     fn add_function_with_closure_arg() {\n+        // FIXME: The argument in `bar` is wrong.\n         check_assist(\n             generate_function,\n             r\"\n@@ -882,7 +879,7 @@ fn foo() {\n     bar(closure)\n }\n \n-fn bar(closure: impl Fn(i64) -> i64) ${0:-> ()} {\n+fn bar(closure: ()) ${0:-> ()} {\n     todo!()\n }\n \",\n@@ -986,13 +983,10 @@ fn foo() {\n     }\n \n     #[test]\n-    #[ignore]\n-    // Ignored until local imports are supported.\n-    // See https://github.com/rust-analyzer/rust-analyzer/issues/1165\n     fn qualified_path_uses_correct_scope() {\n         check_assist(\n             generate_function,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Foo;\n }\n@@ -1001,8 +995,8 @@ fn bar() {\n     let foo = Foo;\n     baz$0(foo)\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n mod foo {\n     pub struct Foo;\n }\n@@ -1015,7 +1009,7 @@ fn bar() {\n fn baz(foo: foo::Foo) ${0:-> ()} {\n     todo!()\n }\n-\",\n+\"#,\n         )\n     }\n \n@@ -1141,40 +1135,29 @@ fn bar() {}\n             // The assist is only active if the cursor is on an unresolved path,\n             // but the assist should only be offered if the path is a function call.\n             generate_function,\n-            r\"\n+            r#\"\n fn foo() {\n     bar(b$0az);\n }\n \n fn bar(baz: ()) {}\n-\",\n+\"#,\n         )\n     }\n \n     #[test]\n-    #[ignore]\n     fn create_method_with_no_args() {\n-        check_assist(\n+        // FIXME: This is wrong, this should just work.\n+        check_assist_not_applicable(\n             generate_function,\n-            r\"\n+            r#\"\n struct Foo;\n impl Foo {\n     fn foo(&self) {\n         self.bar()$0;\n     }\n }\n-        \",\n-            r\"\n-struct Foo;\n-impl Foo {\n-    fn foo(&self) {\n-        self.bar();\n-    }\n-    fn bar(&self) {\n-        todo!();\n-    }\n-}\n-        \",\n+        \"#,\n         )\n     }\n }"}, {"sha": "7b3133e5396d93ab4eca908d197e1fe6e06d5afc", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 6, "deletions": 43, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -93,57 +93,20 @@ mod tests {\n     }\n \n     #[test]\n-    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn empty_derive() {\n-        check(\n-            r#\"#[derive($0)] struct Test;\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at PartialEq\n-                at PartialEq, Eq\n-                at PartialEq, PartialOrd\n-                at PartialEq, Eq, PartialOrd, Ord\n-            \"#]],\n-        );\n+        // FIXME: Add build-in derives to fixture.\n+        check(r#\"#[derive($0)] struct Test;\"#, expect![[r#\"\"#]]);\n     }\n \n     #[test]\n-    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input() {\n-        check(\n-            r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at Eq\n-                at PartialOrd\n-                at Eq, PartialOrd, Ord\n-            \"#]],\n-        )\n+        // FIXME: Add build-in derives to fixture.\n+        check(r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#, expect![[r#\"\"#]])\n     }\n \n     #[test]\n-    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input2() {\n-        check(\n-            r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at Eq\n-                at PartialOrd\n-                at Eq, PartialOrd, Ord\n-            \"#]],\n-        )\n+        // FIXME: Add build-in derives to fixture.\n+        check(r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#, expect![[r#\"\"#]])\n     }\n }"}, {"sha": "31f76589dea8668aa47d5e398ea00f81d9da0322", "filename": "crates/syntax/test_data/parser/ok/0011_outer_attribute.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rast?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -21,7 +21,7 @@ SOURCE_FILE@0..60\n         PATH@15..21\n           PATH_SEGMENT@15..21\n             NAME_REF@15..21\n-              IDENT@15..21 \"ignore\"\n+              IDENT@15..21 \"Ignore\"\n       R_BRACK@21..22 \"]\"\n     WHITESPACE@22..23 \"\\n\"\n     FN_KW@23..25 \"fn\""}, {"sha": "6f04cb1717f6bdfe9a51a973b92cbd7eaaedf170", "filename": "crates/syntax/test_data/parser/ok/0011_outer_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0011_outer_attribute.rs?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -1,5 +1,5 @@\n #[cfg(test)]\n-#[ignore]\n+#[Ignore]\n fn foo() {}\n \n #[path = \"a.rs\"]"}, {"sha": "25ddb43b20fe2ee0cd84c46dfb5556e4a6e8af7f", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79703efc7fddce3f0080d3d97c200d6a2a2ffaa9/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=79703efc7fddce3f0080d3d97c200d6a2a2ffaa9", "patch": "@@ -89,6 +89,7 @@ fn rust_files_are_tidy() {\n         let text = read_file(&path).unwrap();\n         check_todo(&path, &text);\n         check_dbg(&path, &text);\n+        check_test_attrs(&path, &text);\n         check_trailing_ws(&path, &text);\n         deny_clippy(&path, &text);\n         tidy_docs.visit(&path, &text);\n@@ -334,6 +335,36 @@ fn check_dbg(path: &Path, text: &str) {\n     }\n }\n \n+fn check_test_attrs(path: &Path, text: &str) {\n+    let ignore_rule =\n+        \"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#ignore\";\n+    let need_ignore: &[&str] = &[\n+        // Special case to run `#[ignore]` tests\n+        \"ide/src/runnables.rs\",\n+        // A legit test which needs to be ignored, as it takes too long to run\n+        // :(\n+        \"hir_def/src/nameres/collector.rs\",\n+        // Obviously needs ignore.\n+        \"ide_assists/src/handlers/toggle_ignore.rs\",\n+        // See above.\n+        \"ide_assists/src/tests/generated.rs\",\n+    ];\n+    if text.contains(\"#[ignore\") && !need_ignore.iter().any(|p| path.ends_with(p)) {\n+        panic!(\"\\ndon't `#[ignore]` tests, see:\\n\\n    {}\\n\\n   {}\\n\", ignore_rule, path.display(),)\n+    }\n+\n+    let panic_rule =\n+        \"https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/dev/style.md#panic\";\n+    let need_panic: &[&str] = &[\"test_utils/src/fixture.rs\"];\n+    if text.contains(\"#[should_panic\") && !need_panic.iter().any(|p| path.ends_with(p)) {\n+        panic!(\n+            \"\\ndon't add `#[should_panic]` tests, see:\\n\\n    {}\\n\\n   {}\\n\",\n+            panic_rule,\n+            path.display(),\n+        )\n+    }\n+}\n+\n fn check_trailing_ws(path: &Path, text: &str) {\n     if is_exclude_dir(path, &[\"test_data\"]) {\n         return;"}]}