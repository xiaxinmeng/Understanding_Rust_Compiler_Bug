{"sha": "b2dd82929b5b956972446d9720ceabdee171d405", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGQ4MjkyOWI1Yjk1Njk3MjQ0NmQ5NzIwY2VhYmRlZTE3MWQ0MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-01T12:15:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-01T12:15:10Z"}, "message": "Auto merge of #79596 - m-ou-se:rollup-hujx3c7, r=m-ou-se\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #79038 (Change ui test that are run-pass and that do not test the compiler to library tests)\n - #79184 (Stop adding '*' at the end of slice and str typenames for MSVC case)\n - #79227 (Remove const_fn_feature_flags test)\n - #79444 (Move const ip in ui test to unit test)\n - #79522 (Validate lint docs separately.)\n - #79525 (Add -Z normalize-docs and enable it for compiler docs)\n - #79527 (Move intra-doc link tests into a subdirectory)\n - #79548 (Show since when a function is const in stdlib)\n - #79568 (update Miri)\n - #79573 (Update with status for various NetBSD ports.)\n - #79583 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0aab2888533c6ce4c1c3c3a0f5f66fdbc3625cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aab2888533c6ce4c1c3c3a0f5f66fdbc3625cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2dd82929b5b956972446d9720ceabdee171d405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dd82929b5b956972446d9720ceabdee171d405", "html_url": "https://github.com/rust-lang/rust/commit/b2dd82929b5b956972446d9720ceabdee171d405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2dd82929b5b956972446d9720ceabdee171d405/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "html_url": "https://github.com/rust-lang/rust/commit/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f"}, {"sha": "c06a00e21d93e000e2fa17eba66159240e08dfae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06a00e21d93e000e2fa17eba66159240e08dfae", "html_url": "https://github.com/rust-lang/rust/commit/c06a00e21d93e000e2fa17eba66159240e08dfae"}], "stats": {"total": 3618, "additions": 1878, "deletions": 1740}, "files": [{"sha": "ce1f705bdffadce9ad83195a2f1d3eef4b63d234", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -2131,6 +2131,7 @@ dependencies = [\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n  \"shell-escape\",\n+ \"smallvec 1.4.2\",\n ]\n \n [[package]]"}, {"sha": "d1bbf74307c6bd1f7b8dbff0783e1f1ced5dfab6", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -94,7 +94,14 @@ pub fn push_debuginfo_type_name<'tcx>(\n             push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n             if cpp_like_names {\n-                output.push('*');\n+                // Slices and `&str` are treated like C++ pointers when computing debug\n+                // info for MSVC debugger. However, adding '*' at the end of these types' names\n+                // causes the .natvis engine for WinDbg to fail to display their data, so we opt these\n+                // types out to aid debugging in MSVC.\n+                match *inner_type.kind() {\n+                    ty::Slice(_) | ty::Str => {}\n+                    _ => output.push('*'),\n+                }\n             }\n         }\n         ty::Array(inner_type, len) => {"}, {"sha": "aec0fc253ca5e4b5d059e5ce048342d2cb599507", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -366,11 +366,25 @@ impl LintBuffer {\n /// ```\n ///\n /// The `{{produces}}` tag will be automatically replaced with the output from\n-/// the example by the build system. You can build and view the rustc book\n-/// with `x.py doc --stage=1 src/doc/rustc --open`. If the lint example is too\n-/// complex to run as a simple example (for example, it needs an extern\n-/// crate), mark it with `ignore` and manually paste the expected output below\n-/// the example.\n+/// the example by the build system. If the lint example is too complex to run\n+/// as a simple example (for example, it needs an extern crate), mark the code\n+/// block with `ignore` and manually replace the `{{produces}}` line with the\n+/// expected output in a `text` code block.\n+///\n+/// If this is a rustdoc-only lint, then only include a brief introduction\n+/// with a link with the text `[rustdoc book]` so that the validator knows\n+/// that this is for rustdoc only (see BROKEN_INTRA_DOC_LINKS as an example).\n+///\n+/// Commands to view and test the documentation:\n+///\n+/// * `./x.py doc --stage=1 src/doc/rustc --open`: Builds the rustc book and opens it.\n+/// * `./x.py test src/tools/lint-docs`: Validates that the lint docs have the\n+///   correct style, and that the code example actually emits the expected\n+///   lint.\n+///\n+/// If you have already built the compiler, and you want to make changes to\n+/// just the doc comments, then use the `--keep-stage=0` flag with the above\n+/// commands to avoid rebuilding the compiler.\n #[macro_export]\n macro_rules! declare_lint {\n     ($(#[$attr:meta])* $vis: vis $NAME: ident, $Level: ident, $desc: expr) => ("}, {"sha": "66c709b4080986dd3df8bf3e8db9558ea28ae0d9", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -996,6 +996,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n     no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n         \"prevent automatic injection of the profiler_builtins crate\"),\n+    normalize_docs: bool = (false, parse_bool, [TRACKED],\n+        \"normalize associated items in rustdoc when generating documentation\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],"}, {"sha": "b13019146568cc35fa1043f458496ffc3b75b1aa", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 95, "deletions": 1, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Cow;\n use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::str::from_utf8;\n+use std::str::{from_utf8, from_utf8_unchecked};\n \n #[test]\n fn test_le() {\n@@ -1971,3 +1971,97 @@ fn test_str_escapes() {\n     \";\n     assert_eq!(x, r\"\\\\\"); // extraneous whitespace stripped\n }\n+\n+#[test]\n+fn const_str_ptr() {\n+    const A: [u8; 2] = ['h' as u8, 'i' as u8];\n+    const B: &'static [u8; 2] = &A;\n+    const C: *const u8 = B as *const u8;\n+\n+    unsafe {\n+        let foo = &A as *const u8;\n+        assert_eq!(foo, C);\n+        assert_eq!(from_utf8_unchecked(&A), \"hi\");\n+        assert_eq!(*C, A[0]);\n+        assert_eq!(*(&B[0] as *const u8), A[0]);\n+    }\n+}\n+\n+#[test]\n+fn utf8() {\n+    let yen: char = '\u00a5'; // 0xa5\n+    let c_cedilla: char = '\u00e7'; // 0xe7\n+    let thorn: char = '\u00fe'; // 0xfe\n+    let y_diaeresis: char = '\u00ff'; // 0xff\n+    let pi: char = '\u03a0'; // 0x3a0\n+\n+    assert_eq!(yen as isize, 0xa5);\n+    assert_eq!(c_cedilla as isize, 0xe7);\n+    assert_eq!(thorn as isize, 0xfe);\n+    assert_eq!(y_diaeresis as isize, 0xff);\n+    assert_eq!(pi as isize, 0x3a0);\n+\n+    assert_eq!(pi as isize, '\\u{3a0}' as isize);\n+    assert_eq!('\\x0a' as isize, '\\n' as isize);\n+\n+    let bhutan: String = \"\u0f60\u0f56\u0fb2\u0f74\u0f42\u0f0b\u0f61\u0f74\u0f63\u0f0d\".to_string();\n+    let japan: String = \"\u65e5\u672c\".to_string();\n+    let uzbekistan: String = \"\u040e\u0437\u0431\u0435\u043a\u0438\u0441\u0442\u043e\u043d\".to_string();\n+    let austria: String = \"\u00d6sterreich\".to_string();\n+\n+    let bhutan_e: String =\n+        \"\\u{f60}\\u{f56}\\u{fb2}\\u{f74}\\u{f42}\\u{f0b}\\u{f61}\\u{f74}\\u{f63}\\u{f0d}\".to_string();\n+    let japan_e: String = \"\\u{65e5}\\u{672c}\".to_string();\n+    let uzbekistan_e: String =\n+        \"\\u{40e}\\u{437}\\u{431}\\u{435}\\u{43a}\\u{438}\\u{441}\\u{442}\\u{43e}\\u{43d}\".to_string();\n+    let austria_e: String = \"\\u{d6}sterreich\".to_string();\n+\n+    let oo: char = '\u00d6';\n+    assert_eq!(oo as isize, 0xd6);\n+\n+    fn check_str_eq(a: String, b: String) {\n+        let mut i: isize = 0;\n+        for ab in a.bytes() {\n+            println!(\"{}\", i);\n+            println!(\"{}\", ab);\n+            let bb: u8 = b.as_bytes()[i as usize];\n+            println!(\"{}\", bb);\n+            assert_eq!(ab, bb);\n+            i += 1;\n+        }\n+    }\n+\n+    check_str_eq(bhutan, bhutan_e);\n+    check_str_eq(japan, japan_e);\n+    check_str_eq(uzbekistan, uzbekistan_e);\n+    check_str_eq(austria, austria_e);\n+}\n+\n+#[test]\n+fn utf8_chars() {\n+    // Chars of 1, 2, 3, and 4 bytes\n+    let chs: Vec<char> = vec!['e', '\u00e9', '\u20ac', '\\u{10000}'];\n+    let s: String = chs.iter().cloned().collect();\n+    let schs: Vec<char> = s.chars().collect();\n+\n+    assert_eq!(s.len(), 10);\n+    assert_eq!(s.chars().count(), 4);\n+    assert_eq!(schs.len(), 4);\n+    assert_eq!(schs.iter().cloned().collect::<String>(), s);\n+\n+    assert!((from_utf8(s.as_bytes()).is_ok()));\n+    // invalid prefix\n+    assert!((!from_utf8(&[0x80]).is_ok()));\n+    // invalid 2 byte prefix\n+    assert!((!from_utf8(&[0xc0]).is_ok()));\n+    assert!((!from_utf8(&[0xc0, 0x10]).is_ok()));\n+    // invalid 3 byte prefix\n+    assert!((!from_utf8(&[0xe0]).is_ok()));\n+    assert!((!from_utf8(&[0xe0, 0x10]).is_ok()));\n+    assert!((!from_utf8(&[0xe0, 0xff, 0x10]).is_ok()));\n+    // invalid 4 byte prefix\n+    assert!((!from_utf8(&[0xf0]).is_ok()));\n+    assert!((!from_utf8(&[0xf0, 0x10]).is_ok()));\n+    assert!((!from_utf8(&[0xf0, 0xff, 0x10]).is_ok()));\n+    assert!((!from_utf8(&[0xf0, 0xff, 0xff, 0x10]).is_ok()));\n+}"}, {"sha": "66c25e449df2b9f7035404899ede8c331f53ed13", "filename": "library/core/tests/ascii.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fascii.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -408,3 +408,56 @@ fn ascii_const() {\n     const BYTE_IS_ASCII: bool = 97u8.is_ascii();\n     assert!(BYTE_IS_ASCII);\n }\n+\n+#[test]\n+fn ascii_ctype_const() {\n+    macro_rules! suite {\n+        ( $( $fn:ident => [$a:ident, $A:ident, $nine:ident, $dot:ident, $space:ident]; )* ) => {\n+            $(\n+                mod $fn {\n+                    const CHAR_A_LOWER: bool = 'a'.$fn();\n+                    const CHAR_A_UPPER: bool = 'A'.$fn();\n+                    const CHAR_NINE: bool = '9'.$fn();\n+                    const CHAR_DOT: bool = '.'.$fn();\n+                    const CHAR_SPACE: bool = ' '.$fn();\n+\n+                    const U8_A_LOWER: bool = b'a'.$fn();\n+                    const U8_A_UPPER: bool = b'A'.$fn();\n+                    const U8_NINE: bool = b'9'.$fn();\n+                    const U8_DOT: bool = b'.'.$fn();\n+                    const U8_SPACE: bool = b' '.$fn();\n+\n+                    pub fn run() {\n+                        assert_eq!(CHAR_A_LOWER, $a);\n+                        assert_eq!(CHAR_A_UPPER, $A);\n+                        assert_eq!(CHAR_NINE, $nine);\n+                        assert_eq!(CHAR_DOT, $dot);\n+                        assert_eq!(CHAR_SPACE, $space);\n+\n+                        assert_eq!(U8_A_LOWER, $a);\n+                        assert_eq!(U8_A_UPPER, $A);\n+                        assert_eq!(U8_NINE, $nine);\n+                        assert_eq!(U8_DOT, $dot);\n+                        assert_eq!(U8_SPACE, $space);\n+                    }\n+                }\n+            )*\n+\n+            $( $fn::run(); )*\n+        }\n+    }\n+\n+    suite! {\n+        //                        'a'    'A'    '9'    '.'    ' '\n+        is_ascii_alphabetic   => [true,  true,  false, false, false];\n+        is_ascii_uppercase    => [false, true,  false, false, false];\n+        is_ascii_lowercase    => [true,  false, false, false, false];\n+        is_ascii_alphanumeric => [true,  true,  true,  false, false];\n+        is_ascii_digit        => [false, false, true,  false, false];\n+        is_ascii_hexdigit     => [true,  true,  true,  false, false];\n+        is_ascii_punctuation  => [false, false, false, true,  false];\n+        is_ascii_graphic      => [true,  true,  true,  true,  false];\n+        is_ascii_whitespace   => [false, false, false, false, true];\n+        is_ascii_control      => [false, false, false, false, false];\n+    }\n+}"}, {"sha": "75528ebb54eafdeebef52ac4d6c0030739ad3868", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -101,3 +101,82 @@ fn static_init() {\n     assert!(S_INT.fetch_add(1, SeqCst) == 0);\n     assert!(S_UINT.fetch_add(1, SeqCst) == 0);\n }\n+\n+#[test]\n+fn atomic_access_bool() {\n+    static mut ATOMIC: AtomicBool = AtomicBool::new(false);\n+\n+    unsafe {\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.store(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_or(false, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_and(false, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.fetch_nand(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_xor(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+    }\n+}\n+\n+#[test]\n+fn atomic_alignment() {\n+    use std::mem::{align_of, size_of};\n+\n+    #[cfg(target_has_atomic = \"8\")]\n+    assert_eq!(align_of::<AtomicBool>(), size_of::<AtomicBool>());\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    assert_eq!(align_of::<AtomicPtr<u8>>(), size_of::<AtomicPtr<u8>>());\n+    #[cfg(target_has_atomic = \"8\")]\n+    assert_eq!(align_of::<AtomicU8>(), size_of::<AtomicU8>());\n+    #[cfg(target_has_atomic = \"8\")]\n+    assert_eq!(align_of::<AtomicI8>(), size_of::<AtomicI8>());\n+    #[cfg(target_has_atomic = \"16\")]\n+    assert_eq!(align_of::<AtomicU16>(), size_of::<AtomicU16>());\n+    #[cfg(target_has_atomic = \"16\")]\n+    assert_eq!(align_of::<AtomicI16>(), size_of::<AtomicI16>());\n+    #[cfg(target_has_atomic = \"32\")]\n+    assert_eq!(align_of::<AtomicU32>(), size_of::<AtomicU32>());\n+    #[cfg(target_has_atomic = \"32\")]\n+    assert_eq!(align_of::<AtomicI32>(), size_of::<AtomicI32>());\n+    #[cfg(target_has_atomic = \"64\")]\n+    assert_eq!(align_of::<AtomicU64>(), size_of::<AtomicU64>());\n+    #[cfg(target_has_atomic = \"64\")]\n+    assert_eq!(align_of::<AtomicI64>(), size_of::<AtomicI64>());\n+    #[cfg(target_has_atomic = \"128\")]\n+    assert_eq!(align_of::<AtomicU128>(), size_of::<AtomicU128>());\n+    #[cfg(target_has_atomic = \"128\")]\n+    assert_eq!(align_of::<AtomicI128>(), size_of::<AtomicI128>());\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n+    #[cfg(target_has_atomic = \"ptr\")]\n+    assert_eq!(align_of::<AtomicIsize>(), size_of::<AtomicIsize>());\n+}\n+\n+#[test]\n+fn atomic_compare_exchange() {\n+    use Ordering::*;\n+\n+    static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n+\n+    ATOMIC.compare_exchange(0, 1, Relaxed, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, Acquire, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, Release, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, AcqRel, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, SeqCst, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, Acquire, Acquire).ok();\n+    ATOMIC.compare_exchange(0, 1, AcqRel, Acquire).ok();\n+    ATOMIC.compare_exchange(0, 1, SeqCst, Acquire).ok();\n+    ATOMIC.compare_exchange(0, 1, SeqCst, SeqCst).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Relaxed, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Acquire, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Acquire, Acquire).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Acquire).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Acquire).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n+}"}, {"sha": "e40f0482aee3e2f1f87b7d48c4da73e665a8eda6", "filename": "library/core/tests/bool.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fbool.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,3 +1,87 @@\n+use core::cmp::Ordering::{Equal, Greater, Less};\n+use core::ops::{BitAnd, BitOr, BitXor};\n+\n+#[test]\n+fn test_bool() {\n+    assert_eq!(false.eq(&true), false);\n+    assert_eq!(false == false, true);\n+    assert_eq!(false != true, true);\n+    assert_eq!(false.ne(&false), false);\n+\n+    assert_eq!(false.bitand(false), false);\n+    assert_eq!(true.bitand(false), false);\n+    assert_eq!(false.bitand(true), false);\n+    assert_eq!(true.bitand(true), true);\n+\n+    assert_eq!(false & false, false);\n+    assert_eq!(true & false, false);\n+    assert_eq!(false & true, false);\n+    assert_eq!(true & true, true);\n+\n+    assert_eq!(false.bitor(false), false);\n+    assert_eq!(true.bitor(false), true);\n+    assert_eq!(false.bitor(true), true);\n+    assert_eq!(true.bitor(true), true);\n+\n+    assert_eq!(false | false, false);\n+    assert_eq!(true | false, true);\n+    assert_eq!(false | true, true);\n+    assert_eq!(true | true, true);\n+\n+    assert_eq!(false.bitxor(false), false);\n+    assert_eq!(true.bitxor(false), true);\n+    assert_eq!(false.bitxor(true), true);\n+    assert_eq!(true.bitxor(true), false);\n+\n+    assert_eq!(false ^ false, false);\n+    assert_eq!(true ^ false, true);\n+    assert_eq!(false ^ true, true);\n+    assert_eq!(true ^ true, false);\n+\n+    assert_eq!(!true, false);\n+    assert_eq!(!false, true);\n+\n+    let s = false.to_string();\n+    assert_eq!(s, \"false\");\n+    let s = true.to_string();\n+    assert_eq!(s, \"true\");\n+\n+    assert!(true > false);\n+    assert!(!(false > true));\n+\n+    assert!(false < true);\n+    assert!(!(true < false));\n+\n+    assert!(false <= false);\n+    assert!(false >= false);\n+    assert!(true <= true);\n+    assert!(true >= true);\n+\n+    assert!(false <= true);\n+    assert!(!(false >= true));\n+    assert!(true >= false);\n+    assert!(!(true <= false));\n+\n+    assert_eq!(true.cmp(&true), Equal);\n+    assert_eq!(false.cmp(&false), Equal);\n+    assert_eq!(true.cmp(&false), Greater);\n+    assert_eq!(false.cmp(&true), Less);\n+}\n+\n+#[test]\n+pub fn test_bool_not() {\n+    if !false {\n+        assert!((true));\n+    } else {\n+        assert!((false));\n+    }\n+    if !true {\n+        assert!((false));\n+    } else {\n+        assert!((true));\n+    }\n+}\n+\n #[test]\n fn test_bool_to_option() {\n     assert_eq!(false.then_some(0), None);"}, {"sha": "11cf7add07ada9076ec3c9e1533343bf17c0ce95", "filename": "library/core/tests/cmp.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcmp.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -132,3 +132,74 @@ fn ordering_const() {\n     const THEN: Ordering = Equal.then(ORDERING);\n     assert_eq!(THEN, Greater);\n }\n+\n+#[test]\n+fn cmp_default() {\n+    // Test default methods in PartialOrd and PartialEq\n+\n+    #[derive(Debug)]\n+    struct Fool(bool);\n+\n+    impl PartialEq for Fool {\n+        fn eq(&self, other: &Fool) -> bool {\n+            let Fool(this) = *self;\n+            let Fool(other) = *other;\n+            this != other\n+        }\n+    }\n+\n+    struct Int(isize);\n+\n+    impl PartialEq for Int {\n+        fn eq(&self, other: &Int) -> bool {\n+            let Int(this) = *self;\n+            let Int(other) = *other;\n+            this == other\n+        }\n+    }\n+\n+    impl PartialOrd for Int {\n+        fn partial_cmp(&self, other: &Int) -> Option<Ordering> {\n+            let Int(this) = *self;\n+            let Int(other) = *other;\n+            this.partial_cmp(&other)\n+        }\n+    }\n+\n+    struct RevInt(isize);\n+\n+    impl PartialEq for RevInt {\n+        fn eq(&self, other: &RevInt) -> bool {\n+            let RevInt(this) = *self;\n+            let RevInt(other) = *other;\n+            this == other\n+        }\n+    }\n+\n+    impl PartialOrd for RevInt {\n+        fn partial_cmp(&self, other: &RevInt) -> Option<Ordering> {\n+            let RevInt(this) = *self;\n+            let RevInt(other) = *other;\n+            other.partial_cmp(&this)\n+        }\n+    }\n+\n+    assert!(Int(2) > Int(1));\n+    assert!(Int(2) >= Int(1));\n+    assert!(Int(1) >= Int(1));\n+    assert!(Int(1) < Int(2));\n+    assert!(Int(1) <= Int(2));\n+    assert!(Int(1) <= Int(1));\n+\n+    assert!(RevInt(2) < RevInt(1));\n+    assert!(RevInt(2) <= RevInt(1));\n+    assert!(RevInt(1) <= RevInt(1));\n+    assert!(RevInt(1) > RevInt(2));\n+    assert!(RevInt(1) >= RevInt(2));\n+    assert!(RevInt(1) >= RevInt(1));\n+\n+    assert_eq!(Fool(true), Fool(false));\n+    assert!(Fool(true) != Fool(true));\n+    assert!(Fool(false) != Fool(false));\n+    assert_eq!(Fool(false), Fool(true));\n+}"}, {"sha": "ec4b49da384c3da21c29feda2540d12704f16d32", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -3493,3 +3493,15 @@ fn test_flatten_non_fused_inner() {\n     assert_eq!(iter.next(), Some(1));\n     assert_eq!(iter.next(), None);\n }\n+\n+#[test]\n+pub fn extend_for_unit() {\n+    let mut x = 0;\n+    {\n+        let iter = (0..5).map(|_| {\n+            x += 1;\n+        });\n+        ().extend(iter);\n+    }\n+    assert_eq!(x, 5);\n+}"}, {"sha": "106c9fe5da3e6255a5964abe96a1df7a496365fe", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -8,6 +8,7 @@\n #![feature(bound_cloned)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n+#![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n #![feature(core_intrinsics)]\n@@ -63,6 +64,7 @@\n #![feature(int_bits_const)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n+#![feature(integer_atomics)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;\n@@ -82,6 +84,7 @@ mod hash;\n mod intrinsics;\n mod iter;\n mod lazy;\n+mod macros;\n mod manually_drop;\n mod mem;\n mod nonzero;\n@@ -98,3 +101,4 @@ mod str_lossy;\n mod task;\n mod time;\n mod tuple;\n+mod unicode;"}, {"sha": "482f3c1c99840655ed982a22cebbca63d3e1ad58", "filename": "library/core/tests/macros.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmacros.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,14 @@\n+#[test]\n+fn assert_eq_trailing_comma() {\n+    assert_eq!(1, 1,);\n+}\n+\n+#[test]\n+fn assert_escape() {\n+    assert!(r#\"\u2603\\backslash\"#.contains(\"\\\\\"));\n+}\n+\n+#[test]\n+fn assert_ne_trailing_comma() {\n+    assert_ne!(1, 2,);\n+}"}, {"sha": "01defab2b38f02f9b054438b3e96607c97fcbf93", "filename": "library/core/tests/num/wrapping.rs", "status": "modified", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -74,3 +74,236 @@ wrapping_test!(u64, u64::MIN, u64::MAX);\n #[cfg(not(target_os = \"emscripten\"))]\n wrapping_test!(u128, u128::MIN, u128::MAX);\n wrapping_test!(usize, usize::MIN, usize::MAX);\n+\n+// Don't warn about overflowing ops on 32-bit platforms\n+#[cfg_attr(target_pointer_width = \"32\", allow(const_err))]\n+fn wrapping_int_api() {\n+    assert_eq!(i8::MAX.wrapping_add(1), i8::MIN);\n+    assert_eq!(i16::MAX.wrapping_add(1), i16::MIN);\n+    assert_eq!(i32::MAX.wrapping_add(1), i32::MIN);\n+    assert_eq!(i64::MAX.wrapping_add(1), i64::MIN);\n+    assert_eq!(isize::MAX.wrapping_add(1), isize::MIN);\n+\n+    assert_eq!(i8::MIN.wrapping_sub(1), i8::MAX);\n+    assert_eq!(i16::MIN.wrapping_sub(1), i16::MAX);\n+    assert_eq!(i32::MIN.wrapping_sub(1), i32::MAX);\n+    assert_eq!(i64::MIN.wrapping_sub(1), i64::MAX);\n+    assert_eq!(isize::MIN.wrapping_sub(1), isize::MAX);\n+\n+    assert_eq!(u8::MAX.wrapping_add(1), u8::MIN);\n+    assert_eq!(u16::MAX.wrapping_add(1), u16::MIN);\n+    assert_eq!(u32::MAX.wrapping_add(1), u32::MIN);\n+    assert_eq!(u64::MAX.wrapping_add(1), u64::MIN);\n+    assert_eq!(usize::MAX.wrapping_add(1), usize::MIN);\n+\n+    assert_eq!(u8::MIN.wrapping_sub(1), u8::MAX);\n+    assert_eq!(u16::MIN.wrapping_sub(1), u16::MAX);\n+    assert_eq!(u32::MIN.wrapping_sub(1), u32::MAX);\n+    assert_eq!(u64::MIN.wrapping_sub(1), u64::MAX);\n+    assert_eq!(usize::MIN.wrapping_sub(1), usize::MAX);\n+\n+    assert_eq!((0xfe_u8 as i8).wrapping_mul(16), (0xe0_u8 as i8));\n+    assert_eq!((0xfedc_u16 as i16).wrapping_mul(16), (0xedc0_u16 as i16));\n+    assert_eq!((0xfedc_ba98_u32 as i32).wrapping_mul(16), (0xedcb_a980_u32 as i32));\n+    assert_eq!(\n+        (0xfedc_ba98_7654_3217_u64 as i64).wrapping_mul(16),\n+        (0xedcb_a987_6543_2170_u64 as i64)\n+    );\n+\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            assert_eq!((0xfedc_ba98_u32 as isize).wrapping_mul(16), (0xedcb_a980_u32 as isize));\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            assert_eq!(\n+                (0xfedc_ba98_7654_3217_u64 as isize).wrapping_mul(16),\n+                (0xedcb_a987_6543_2170_u64 as isize)\n+            );\n+        }\n+    }\n+\n+    assert_eq!((0xfe as u8).wrapping_mul(16), (0xe0 as u8));\n+    assert_eq!((0xfedc as u16).wrapping_mul(16), (0xedc0 as u16));\n+    assert_eq!((0xfedc_ba98 as u32).wrapping_mul(16), (0xedcb_a980 as u32));\n+    assert_eq!((0xfedc_ba98_7654_3217 as u64).wrapping_mul(16), (0xedcb_a987_6543_2170 as u64));\n+\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            assert_eq!((0xfedc_ba98 as usize).wrapping_mul(16), (0xedcb_a980 as usize));\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            assert_eq!(\n+                (0xfedc_ba98_7654_3217 as usize).wrapping_mul(16),\n+                (0xedcb_a987_6543_2170 as usize)\n+            );\n+        }\n+    }\n+\n+    macro_rules! check_mul_no_wrap {\n+        ($e:expr, $f:expr) => {\n+            assert_eq!(($e).wrapping_mul($f), ($e) * $f);\n+        };\n+    }\n+    macro_rules! check_mul_wraps {\n+        ($e:expr, $f:expr) => {\n+            assert_eq!(($e).wrapping_mul($f), $e);\n+        };\n+    }\n+\n+    check_mul_no_wrap!(0xfe_u8 as i8, -1);\n+    check_mul_no_wrap!(0xfedc_u16 as i16, -1);\n+    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n+\n+    check_mul_no_wrap!(0xfe_u8 as i8, -2);\n+    check_mul_no_wrap!(0xfedc_u16 as i16, -2);\n+    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n+    check_mul_no_wrap!(0xfedc_ba98_fedc_ba98_u64 as u64 as isize, -2);\n+\n+    check_mul_no_wrap!(0xfe_u8 as i8, 2);\n+    check_mul_no_wrap!(0xfedc_u16 as i16, 2);\n+    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n+    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n+    check_mul_no_wrap!(0xfedc_ba98_fedc_ba98_u64 as u64 as isize, 2);\n+\n+    check_mul_wraps!(0x80_u8 as i8, -1);\n+    check_mul_wraps!(0x8000_u16 as i16, -1);\n+    check_mul_wraps!(0x8000_0000_u32 as i32, -1);\n+    check_mul_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_mul_wraps!(0x8000_0000_u32 as isize, -1);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_mul_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n+        }\n+    }\n+\n+    macro_rules! check_div_no_wrap {\n+        ($e:expr, $f:expr) => {\n+            assert_eq!(($e).wrapping_div($f), ($e) / $f);\n+        };\n+    }\n+    macro_rules! check_div_wraps {\n+        ($e:expr, $f:expr) => {\n+            assert_eq!(($e).wrapping_div($f), $e);\n+        };\n+    }\n+\n+    check_div_no_wrap!(0xfe_u8 as i8, -1);\n+    check_div_no_wrap!(0xfedc_u16 as i16, -1);\n+    check_div_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n+\n+    check_div_no_wrap!(0xfe_u8 as i8, -2);\n+    check_div_no_wrap!(0xfedc_u16 as i16, -2);\n+    check_div_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n+\n+    check_div_no_wrap!(0xfe_u8 as i8, 2);\n+    check_div_no_wrap!(0xfedc_u16 as i16, 2);\n+    check_div_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n+    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n+\n+    check_div_wraps!(-128 as i8, -1);\n+    check_div_wraps!(0x8000_u16 as i16, -1);\n+    check_div_wraps!(0x8000_0000_u32 as i32, -1);\n+    check_div_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_div_wraps!(0x8000_0000_u32 as isize, -1);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_div_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n+        }\n+    }\n+\n+    macro_rules! check_rem_no_wrap {\n+        ($e:expr, $f:expr) => {\n+            assert_eq!(($e).wrapping_rem($f), ($e) % $f);\n+        };\n+    }\n+    macro_rules! check_rem_wraps {\n+        ($e:expr, $f:expr) => {\n+            assert_eq!(($e).wrapping_rem($f), 0);\n+        };\n+    }\n+\n+    check_rem_no_wrap!(0xfe_u8 as i8, -1);\n+    check_rem_no_wrap!(0xfedc_u16 as i16, -1);\n+    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n+\n+    check_rem_no_wrap!(0xfe_u8 as i8, -2);\n+    check_rem_no_wrap!(0xfedc_u16 as i16, -2);\n+    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n+\n+    check_rem_no_wrap!(0xfe_u8 as i8, 2);\n+    check_rem_no_wrap!(0xfedc_u16 as i16, 2);\n+    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n+    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n+\n+    check_rem_wraps!(0x80_u8 as i8, -1);\n+    check_rem_wraps!(0x8000_u16 as i16, -1);\n+    check_rem_wraps!(0x8000_0000_u32 as i32, -1);\n+    check_rem_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_rem_wraps!(0x8000_0000_u32 as isize, -1);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_rem_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n+        }\n+    }\n+\n+    macro_rules! check_neg_no_wrap {\n+        ($e:expr) => {\n+            assert_eq!(($e).wrapping_neg(), -($e));\n+        };\n+    }\n+    macro_rules! check_neg_wraps {\n+        ($e:expr) => {\n+            assert_eq!(($e).wrapping_neg(), ($e));\n+        };\n+    }\n+\n+    check_neg_no_wrap!(0xfe_u8 as i8);\n+    check_neg_no_wrap!(0xfedc_u16 as i16);\n+    check_neg_no_wrap!(0xfedc_ba98_u32 as i32);\n+    check_neg_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64);\n+    check_neg_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize);\n+\n+    check_neg_wraps!(0x80_u8 as i8);\n+    check_neg_wraps!(0x8000_u16 as i16);\n+    check_neg_wraps!(0x8000_0000_u32 as i32);\n+    check_neg_wraps!(0x8000_0000_0000_0000_u64 as i64);\n+    match () {\n+        #[cfg(target_pointer_width = \"32\")]\n+        () => {\n+            check_neg_wraps!(0x8000_0000_u32 as isize);\n+        }\n+        #[cfg(target_pointer_width = \"64\")]\n+        () => {\n+            check_neg_wraps!(0x8000_0000_0000_0000_u64 as isize);\n+        }\n+    }\n+}"}, {"sha": "53e5539fad91c5f5b0ba47a9f041e50586496d27", "filename": "library/core/tests/ops.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,4 +1,5 @@\n use core::ops::{Bound, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo, RangeToInclusive};\n+use core::ops::{Deref, DerefMut};\n \n // Test the Range structs and syntax.\n \n@@ -197,3 +198,35 @@ fn range_structural_match() {\n         _ => unreachable!(),\n     }\n }\n+\n+// Test Deref implementations\n+\n+#[test]\n+fn deref_mut_on_ref() {\n+    // Test that `&mut T` implements `DerefMut<T>`\n+\n+    fn inc<T: Deref<Target = isize> + DerefMut>(mut t: T) {\n+        *t += 1;\n+    }\n+\n+    let mut x: isize = 5;\n+    inc(&mut x);\n+    assert_eq!(x, 6);\n+}\n+\n+#[test]\n+fn deref_on_ref() {\n+    // Test that `&T` and `&mut T` implement `Deref<T>`\n+\n+    fn deref<U: Copy, T: Deref<Target = U>>(t: T) -> U {\n+        *t\n+    }\n+\n+    let x: isize = 3;\n+    let y = deref(&x);\n+    assert_eq!(y, 3);\n+\n+    let mut x: isize = 4;\n+    let y = deref(&mut x);\n+    assert_eq!(y, 4);\n+}"}, {"sha": "5388b4756245a668cd0d18a11e5a4af07ae2cb55", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -402,3 +402,13 @@ fn test_unwrap_drop() {\n \n     assert_eq!(x.get(), 0);\n }\n+\n+#[test]\n+pub fn option_ext() {\n+    let thing = \"{{ f }}\";\n+    let f = thing.find(\"{{\");\n+\n+    if f.is_none() {\n+        println!(\"None!\");\n+    }\n+}"}, {"sha": "57c2fb06c16dd2d3e298cb3b4a1475cc78bc4354", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -400,3 +400,16 @@ fn align_offset_weird_strides() {\n     }\n     assert!(!x);\n }\n+\n+#[test]\n+fn offset_from() {\n+    let mut a = [0; 5];\n+    let ptr1: *mut i32 = &mut a[1];\n+    let ptr2: *mut i32 = &mut a[3];\n+    unsafe {\n+        assert_eq!(ptr2.offset_from(ptr1), 2);\n+        assert_eq!(ptr1.offset_from(ptr2), -2);\n+        assert_eq!(ptr1.offset(2), ptr2);\n+        assert_eq!(ptr2.offset(-2), ptr1);\n+    }\n+}"}, {"sha": "81660870e95e477bc6c189603e9eb11cd835602e", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -320,3 +320,41 @@ fn result_const() {\n     const IS_ERR: bool = RESULT.is_err();\n     assert!(!IS_ERR)\n }\n+\n+#[test]\n+fn result_opt_conversions() {\n+    #[derive(Copy, Clone, Debug, PartialEq)]\n+    struct BadNumErr;\n+\n+    fn try_num(x: i32) -> Result<i32, BadNumErr> {\n+        if x <= 5 { Ok(x + 1) } else { Err(BadNumErr) }\n+    }\n+\n+    type ResOpt = Result<Option<i32>, BadNumErr>;\n+    type OptRes = Option<Result<i32, BadNumErr>>;\n+\n+    let mut x: ResOpt = Ok(Some(5));\n+    let mut y: OptRes = Some(Ok(5));\n+    assert_eq!(x, y.transpose());\n+    assert_eq!(x.transpose(), y);\n+\n+    x = Ok(None);\n+    y = None;\n+    assert_eq!(x, y.transpose());\n+    assert_eq!(x.transpose(), y);\n+\n+    x = Err(BadNumErr);\n+    y = Some(Err(BadNumErr));\n+    assert_eq!(x, y.transpose());\n+    assert_eq!(x.transpose(), y);\n+\n+    let res: Result<Vec<i32>, BadNumErr> = (0..10)\n+        .map(|x| {\n+            let y = try_num(x)?;\n+            Ok(if y % 2 == 0 { Some(y - 1) } else { None })\n+        })\n+        .filter_map(Result::transpose)\n+        .collect();\n+\n+    assert_eq!(res, Err(BadNumErr))\n+}"}, {"sha": "c28ea859115e13e8d0c10491a39ebbe27e5e0f01", "filename": "library/core/tests/unicode.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fcore%2Ftests%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Funicode.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,5 @@\n+#[test]\n+pub fn version() {\n+    let (major, _minor, _update) = core::unicode::UNICODE_VERSION;\n+    assert!(major >= 10);\n+}"}, {"sha": "44fb3adf07023d24ad12c21a4ac2a476278b4e65", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -936,4 +936,10 @@ fn ip_const() {\n \n     const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n     assert!(!IS_MULTICAST);\n+\n+    const IS_IP_V4: bool = IP_ADDRESS.is_ipv4();\n+    assert!(IS_IP_V4);\n+\n+    const IS_IP_V6: bool = IP_ADDRESS.is_ipv6();\n+    assert!(!IS_IP_V6);\n }"}, {"sha": "0e55ec648c9c5707e942c727f7605e8482845303", "filename": "library/std/tests/env.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fenv.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,5 +1,6 @@\n use std::env::*;\n use std::ffi::{OsStr, OsString};\n+use std::path::PathBuf;\n \n use rand::distributions::Alphanumeric;\n use rand::{thread_rng, Rng};\n@@ -76,3 +77,63 @@ fn test_env_set_var() {\n \n     assert!(vars_os().any(|(k, v)| { &*k == &*n && &*v == \"VALUE\" }));\n }\n+\n+#[test]\n+#[cfg_attr(any(target_os = \"emscripten\", target_env = \"sgx\"), ignore)]\n+#[allow(deprecated)]\n+fn env_home_dir() {\n+    fn var_to_os_string(var: Result<String, VarError>) -> Option<OsString> {\n+        match var {\n+            Ok(var) => Some(OsString::from(var)),\n+            Err(VarError::NotUnicode(var)) => Some(var),\n+            _ => None,\n+        }\n+    }\n+\n+    cfg_if::cfg_if! {\n+        if #[cfg(unix)] {\n+            let oldhome = var_to_os_string(var(\"HOME\"));\n+\n+            set_var(\"HOME\", \"/home/MountainView\");\n+            assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n+\n+            remove_var(\"HOME\");\n+            if cfg!(target_os = \"android\") {\n+                assert!(home_dir().is_none());\n+            } else {\n+                // When HOME is not set, some platforms return `None`,\n+                // but others return `Some` with a default.\n+                // Just check that it is not \"/home/MountainView\".\n+                assert_ne!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n+            }\n+\n+            if let Some(oldhome) = oldhome { set_var(\"HOME\", oldhome); }\n+        } else if #[cfg(windows)] {\n+            let oldhome = var_to_os_string(var(\"HOME\"));\n+            let olduserprofile = var_to_os_string(var(\"USERPROFILE\"));\n+\n+            remove_var(\"HOME\");\n+            remove_var(\"USERPROFILE\");\n+\n+            assert!(home_dir().is_some());\n+\n+            set_var(\"HOME\", \"/home/MountainView\");\n+            assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n+\n+            remove_var(\"HOME\");\n+\n+            set_var(\"USERPROFILE\", \"/home/MountainView\");\n+            assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n+\n+            set_var(\"HOME\", \"/home/MountainView\");\n+            set_var(\"USERPROFILE\", \"/home/PaloAlto\");\n+            assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n+\n+            remove_var(\"HOME\");\n+            remove_var(\"USERPROFILE\");\n+\n+            if let Some(oldhome) = oldhome { set_var(\"HOME\", oldhome); }\n+            if let Some(olduserprofile) = olduserprofile { set_var(\"USERPROFILE\", olduserprofile); }\n+        }\n+    }\n+}"}, {"sha": "754b264c6ad9394bcc1b6b27e485ee28593cde2b", "filename": "library/std/tests/thread.rs", "status": "renamed", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fstd%2Ftests%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/library%2Fstd%2Ftests%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fthread.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,17 +1,16 @@\n-// run-pass\n-// ignore-emscripten no threads support\n-\n-use std::thread::{self, sleep};\n-use std::time::Duration;\n use std::sync::{Arc, Mutex};\n+use std::thread;\n+use std::time::Duration;\n \n-fn main() {\n+#[test]\n+#[cfg_attr(target_os = \"emscripten\", ignore)]\n+fn sleep() {\n     let finished = Arc::new(Mutex::new(false));\n     let t_finished = finished.clone();\n     thread::spawn(move || {\n-        sleep(Duration::new(u64::MAX, 0));\n+        thread::sleep(Duration::new(u64::MAX, 0));\n         *t_finished.lock().unwrap() = true;\n     });\n-    sleep(Duration::from_millis(100));\n+    thread::sleep(Duration::from_millis(100));\n     assert_eq!(*finished.lock().unwrap(), false);\n }", "previous_filename": "src/test/ui/sleep.rs"}, {"sha": "b5bbb6372ee6ced5efe36fcc06d937b269441fa1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -413,6 +413,7 @@ impl<'a> Builder<'a> {\n                 test::TheBook,\n                 test::UnstableBook,\n                 test::RustcBook,\n+                test::LintDocs,\n                 test::RustcGuide,\n                 test::EmbeddedBook,\n                 test::EditionGuide,\n@@ -730,6 +731,7 @@ impl<'a> Builder<'a> {\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")\n+            .arg(\"-Znormalize_docs\")\n             .arg(\"-Winvalid_codeblock_attributes\");\n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");"}, {"sha": "a296a1fe3f4fef002564335004ec3bcc9c622ce0", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -527,6 +527,7 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--document-private-items\");\n         cargo.rustdocflag(\"--enable-index-page\");\n         cargo.rustdocflag(\"-Zunstable-options\");\n+        cargo.rustdocflag(\"-Znormalize-docs\");\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`.\n@@ -726,6 +727,7 @@ fn symlink_dir_force(config: &Config, src: &Path, dst: &Path) -> io::Result<()>\n pub struct RustcBook {\n     pub compiler: Compiler,\n     pub target: TargetSelection,\n+    pub validate: bool,\n }\n \n impl Step for RustcBook {\n@@ -742,6 +744,7 @@ impl Step for RustcBook {\n         run.builder.ensure(RustcBook {\n             compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n             target: run.target,\n+            validate: false,\n         });\n     }\n \n@@ -772,6 +775,9 @@ impl Step for RustcBook {\n         if builder.config.verbose() {\n             cmd.arg(\"--verbose\");\n         }\n+        if self.validate {\n+            cmd.arg(\"--validate\");\n+        }\n         // If the lib directories are in an unusual location (changed in\n         // config.toml), then this needs to explicitly update the dylib search\n         // path."}, {"sha": "1df50322a0732a3f39108ffff931a2c21b7fbdfa", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -688,38 +688,6 @@ impl Step for RustdocJSNotStd {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct RustdocUi {\n-    pub target: TargetSelection,\n-    pub compiler: Compiler,\n-}\n-\n-impl Step for RustdocUi {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/test/rustdoc-ui\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n-        run.builder.ensure(RustdocUi { target: run.target, compiler });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        builder.ensure(Compiletest {\n-            compiler: self.compiler,\n-            target: self.target,\n-            mode: \"ui\",\n-            suite: \"rustdoc-ui\",\n-            path: \"src/test/rustdoc-ui\",\n-            compare_mode: None,\n-        })\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy;\n \n@@ -934,6 +902,7 @@ default_test!(Debuginfo { path: \"src/test/debuginfo\", mode: \"debuginfo\", suite:\n host_test!(UiFullDeps { path: \"src/test/ui-fulldeps\", mode: \"ui\", suite: \"ui-fulldeps\" });\n \n host_test!(Rustdoc { path: \"src/test/rustdoc\", mode: \"rustdoc\", suite: \"rustdoc\" });\n+host_test!(RustdocUi { path: \"src/test/rustdoc-ui\", mode: \"ui\", suite: \"rustdoc-ui\" });\n \n host_test!(Pretty { path: \"src/test/pretty\", mode: \"pretty\", suite: \"pretty\" });\n \n@@ -2115,3 +2084,36 @@ impl Step for TierCheck {\n         try_run(builder, &mut cargo.into());\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct LintDocs {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for LintDocs {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/lint-docs\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(LintDocs {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+            target: run.target,\n+        });\n+    }\n+\n+    /// Tests that the lint examples in the rustc book generate the correct\n+    /// lints and have the expected format.\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.ensure(crate::doc::RustcBook {\n+            compiler: self.compiler,\n+            target: self.target,\n+            validate: true,\n+        });\n+    }\n+}"}, {"sha": "a190438d77d28041f24da4f6592e287fab073a61", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1 +1 @@\n-Subproject commit 13e1c05420bca86ecc79e4ba5b6d02de9bd53c62\n+Subproject commit a190438d77d28041f24da4f6592e287fab073a61"}, {"sha": "ba34b8a968f9531d38c4dc4411d5568b7c076bfe", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1 +1 @@\n-Subproject commit ca8169e69b479f615855d0eece7e318138fcfc00\n+Subproject commit ba34b8a968f9531d38c4dc4411d5568b7c076bfe"}, {"sha": "d8383b65f7948c2ca19191b3b4bd709b403aaf45", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1 +1 @@\n-Subproject commit 23c49f1d5ce4720bc5b7e3a920f47eccc8da6b63\n+Subproject commit d8383b65f7948c2ca19191b3b4bd709b403aaf45"}, {"sha": "a8afdca5d0715b2257b6f8b9a032fd4dd7dae855", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1 +1 @@\n-Subproject commit a7de763c213292f5b44bf10acb87ffa38724814d\n+Subproject commit a8afdca5d0715b2257b6f8b9a032fd4dd7dae855"}, {"sha": "236c734a2cb323541b3394f98682cb981b9ec086", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1 +1 @@\n-Subproject commit 1886fda6981b723e4de637074455558f8bc1e83c\n+Subproject commit 236c734a2cb323541b3394f98682cb981b9ec086"}, {"sha": "ce8caae375e98263d260604566374816826724a9", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -156,7 +156,7 @@ target | std | host | notes\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |\n-`aarch64-unknown-netbsd` | ? |  |\n+`aarch64-unknown-netbsd` | \u2713 | \u2713 |\n `aarch64-unknown-openbsd` | \u2713 | \u2713 | ARM64 OpenBSD\n `aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n `aarch64-uwp-windows-msvc` | ? |  |\n@@ -167,7 +167,7 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n-`armv7-unknown-netbsd-eabihf` | ? |  |\n+`armv7-unknown-netbsd-eabihf` | \u2713 | \u2713 |\n `armv7-wrs-vxworks-eabihf` | ? |  |\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n `armv7s-apple-ios` | \u2713 |  |\n@@ -178,7 +178,7 @@ target | std | host | notes\n `i686-pc-windows-msvc` | \u2713 |  | 32-bit Windows XP support\n `i686-unknown-uefi` | ? |  | 32-bit UEFI\n `i686-unknown-haiku` | \u2713 | \u2713 | 32-bit Haiku\n-`i686-unknown-netbsd` | \u2713 |  | NetBSD/i386 with SSE2\n+`i686-unknown-netbsd` | \u2713 | \u2713 | NetBSD/i386 with SSE2\n `i686-unknown-openbsd` | \u2713 | \u2713 | 32-bit OpenBSD\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n@@ -194,7 +194,7 @@ target | std | host | notes\n `msp430-none-elf` | * |  | 16-bit MSP430 microcontrollers\n `powerpc-unknown-linux-gnuspe` | \u2713 |  | PowerPC SPE Linux\n `powerpc-unknown-linux-musl` | ? |  |\n-`powerpc-unknown-netbsd` | ? |  |\n+`powerpc-unknown-netbsd` | \u2713 | \u2713 |\n `powerpc-wrs-vxworks` | ? |  |\n `powerpc-wrs-vxworks-spe` | ? |  |\n `powerpc64-unknown-freebsd` | \u2713 | \u2713 | PPC64 FreeBSD (ELFv1 and ELFv2)"}, {"sha": "8feef9c259c1396dd9027b5605d3d003e1abbf9f", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -124,6 +124,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(param_env_def_id.krate),\n                     stability: None,\n+                    const_stability: None,\n                     deprecation: None,\n                     kind: ImplItem(Impl {\n                         unsafety: hir::Unsafety::Normal,"}, {"sha": "33b5e84c5e07432c8f8cff3900ec424eafef55ff", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: self.cx.next_def_id(impl_def_id.krate),\n                     stability: None,\n+                    const_stability: None,\n                     deprecation: None,\n                     kind: ImplItem(Impl {\n                         unsafety: hir::Unsafety::Normal,"}, {"sha": "f3067360f0680a209fba82bac644a56e719fdbc6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -483,6 +483,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         def_id: DefId::local(CRATE_DEF_INDEX),\n                         visibility: clean::Public,\n                         stability: None,\n+                        const_stability: None,\n                         deprecation: None,\n                         kind: clean::ImportItem(clean::Import::new_simple(\n                             item.ident.to_string(),"}, {"sha": "d294d8f02a80ffdab9117543f89d71c9c0a73fbf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1515,9 +1515,12 @@ impl Clean<Type> for hir::Ty<'_> {\n }\n \n /// Returns `None` if the type could not be normalized\n-#[allow(unreachable_code, unused_variables)]\n fn normalize(cx: &DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n-    return None; // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n+    // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n+    if !cx.tcx.sess.opts.debugging_opts.normalize_docs {\n+        return None;\n+    }\n+\n     use crate::rustc_trait_selection::infer::TyCtxtInferExt;\n     use crate::rustc_trait_selection::traits::query::normalize::AtExt;\n     use rustc_middle::traits::ObligationCause;\n@@ -2189,6 +2192,7 @@ fn clean_extern_crate(\n         def_id: crate_def_id,\n         visibility: krate.vis.clean(cx),\n         stability: None,\n+        const_stability: None,\n         deprecation: None,\n         kind: ExternCrateItem(name.clean(cx), path),\n     }]\n@@ -2259,6 +2263,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n                         def_id: cx.tcx.hir().local_def_id(self.id).to_def_id(),\n                         visibility: self.vis.clean(cx),\n                         stability: None,\n+                        const_stability: None,\n                         deprecation: None,\n                         kind: ImportItem(Import::new_simple(\n                             self.name.clean(cx),\n@@ -2279,6 +2284,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             def_id: DefId::local(CRATE_DEF_INDEX),\n             visibility: self.vis.clean(cx),\n             stability: None,\n+            const_stability: None,\n             deprecation: None,\n             kind: ImportItem(inner),\n         }]"}, {"sha": "38d25d8d98e8560b5003c532e1b419611bca4f51", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::attr;\n use rustc_ast::util::comments::beautify_doc_string;\n use rustc_ast::{self as ast, AttrStyle};\n use rustc_ast::{FloatTy, IntTy, UintTy};\n-use rustc_attr::{Stability, StabilityLevel};\n+use rustc_attr::{ConstStability, Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n@@ -87,6 +87,7 @@ crate struct Item {\n     crate def_id: DefId,\n     crate stability: Option<Stability>,\n     crate deprecation: Option<Deprecation>,\n+    crate const_stability: Option<ConstStability>,\n }\n \n impl fmt::Debug for Item {\n@@ -155,6 +156,7 @@ impl Item {\n             visibility: cx.tcx.visibility(def_id).clean(cx),\n             stability: cx.tcx.lookup_stability(def_id).cloned(),\n             deprecation: cx.tcx.lookup_deprecation(def_id).clean(cx),\n+            const_stability: cx.tcx.lookup_const_stability(def_id).cloned(),\n         }\n     }\n \n@@ -262,6 +264,13 @@ impl Item {\n         }\n     }\n \n+    crate fn const_stable_since(&self) -> Option<SymbolStr> {\n+        match self.const_stability?.level {\n+            StabilityLevel::Stable { since, .. } => Some(since.as_str()),\n+            StabilityLevel::Unstable { .. } => None,\n+        }\n+    }\n+\n     crate fn is_non_exhaustive(&self) -> bool {\n         self.attrs.other_attrs.iter().any(|a| a.has_name(sym::non_exhaustive))\n     }"}, {"sha": "de620a35c80d735ec41213e5f0921e12c99d070e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 73, "deletions": 17, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1692,13 +1692,13 @@ fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache)\n     debug_assert!(!item.is_stripped());\n     // Write the breadcrumb trail header for the top\n     write!(buf, \"<h1 class=\\\"fqn\\\"><span class=\\\"out-of-band\\\">\");\n-    if let Some(version) = item.stable_since() {\n-        write!(\n-            buf,\n-            \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n-            version\n-        );\n-    }\n+    render_stability_since_raw(\n+        buf,\n+        item.stable_since().as_deref(),\n+        item.const_stable_since().as_deref(),\n+        None,\n+        None,\n+    );\n     write!(\n         buf,\n         \"<span id=\\\"render-detail\\\">\\\n@@ -2476,6 +2476,7 @@ fn render_implementor(\n         AssocItemLink::Anchor(None),\n         RenderMode::Normal,\n         implementor.impl_item.stable_since().as_deref(),\n+        implementor.impl_item.const_stable_since().as_deref(),\n         false,\n         Some(use_absolute),\n         false,\n@@ -2506,6 +2507,7 @@ fn render_impls(\n                 assoc_link,\n                 RenderMode::Normal,\n                 containing_item.stable_since().as_deref(),\n+                containing_item.const_stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -2756,6 +2758,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait,\n                     assoc_link,\n                     RenderMode::Normal,\n                     implementor.impl_item.stable_since().as_deref(),\n+                    implementor.impl_item.const_stable_since().as_deref(),\n                     false,\n                     None,\n                     true,\n@@ -2898,10 +2901,40 @@ fn assoc_type(\n     }\n }\n \n-fn render_stability_since_raw(w: &mut Buffer, ver: Option<&str>, containing_ver: Option<&str>) {\n+fn render_stability_since_raw(\n+    w: &mut Buffer,\n+    ver: Option<&str>,\n+    const_ver: Option<&str>,\n+    containing_ver: Option<&str>,\n+    containing_const_ver: Option<&str>,\n+) {\n+    let ver = ver.and_then(|inner| if !inner.is_empty() { Some(inner) } else { None });\n+\n+    let const_ver = const_ver.and_then(|inner| if !inner.is_empty() { Some(inner) } else { None });\n+\n     if let Some(v) = ver {\n-        if containing_ver != ver && !v.is_empty() {\n-            write!(w, \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\", v)\n+        if let Some(cv) = const_ver {\n+            if const_ver != containing_const_ver {\n+                write!(\n+                    w,\n+                    \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const since {1}\\\">{0} (const: {1})</span>\",\n+                    v, cv\n+                );\n+            } else if ver != containing_ver {\n+                write!(\n+                    w,\n+                    \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n+                    v\n+                );\n+            }\n+        } else {\n+            if ver != containing_ver {\n+                write!(\n+                    w,\n+                    \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}\\\">{0}</span>\",\n+                    v\n+                );\n+            }\n         }\n     }\n }\n@@ -2910,7 +2943,9 @@ fn render_stability_since(w: &mut Buffer, item: &clean::Item, containing_item: &\n     render_stability_since_raw(\n         w,\n         item.stable_since().as_deref(),\n+        item.const_stable_since().as_deref(),\n         containing_item.stable_since().as_deref(),\n+        containing_item.const_stable_since().as_deref(),\n     )\n }\n \n@@ -3462,6 +3497,7 @@ fn render_assoc_items(\n                 AssocItemLink::Anchor(None),\n                 render_mode,\n                 containing_item.stable_since().as_deref(),\n+                containing_item.const_stable_since().as_deref(),\n                 true,\n                 None,\n                 false,\n@@ -3654,6 +3690,7 @@ fn render_impl(\n     link: AssocItemLink<'_>,\n     render_mode: RenderMode,\n     outer_version: Option<&str>,\n+    outer_const_version: Option<&str>,\n     show_def_docs: bool,\n     use_absolute: Option<bool>,\n     is_on_foreign_type: bool,\n@@ -3705,11 +3742,13 @@ fn render_impl(\n             );\n         }\n         write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-        let since = i.impl_item.stability.as_ref().and_then(|s| match s.level {\n-            StabilityLevel::Stable { since } => Some(since.as_str()),\n-            StabilityLevel::Unstable { .. } => None,\n-        });\n-        render_stability_since_raw(w, since.as_deref(), outer_version);\n+        render_stability_since_raw(\n+            w,\n+            i.impl_item.stable_since().as_deref(),\n+            i.impl_item.const_stable_since().as_deref(),\n+            outer_version,\n+            outer_const_version,\n+        );\n         write_srclink(cx, &i.impl_item, w, cache);\n         write!(w, \"</h3>\");\n \n@@ -3746,6 +3785,7 @@ fn render_impl(\n         render_mode: RenderMode,\n         is_default_item: bool,\n         outer_version: Option<&str>,\n+        outer_const_version: Option<&str>,\n         trait_: Option<&clean::Trait>,\n         show_def_docs: bool,\n         cache: &Cache,\n@@ -3775,7 +3815,13 @@ fn render_impl(\n                     write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n-                    render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n+                    render_stability_since_raw(\n+                        w,\n+                        item.stable_since().as_deref(),\n+                        item.const_stable_since().as_deref(),\n+                        outer_version,\n+                        outer_const_version,\n+                    );\n                     write_srclink(cx, item, w, cache);\n                     write!(w, \"</h4>\");\n                 }\n@@ -3791,7 +3837,13 @@ fn render_impl(\n                 write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n-                render_stability_since_raw(w, item.stable_since().as_deref(), outer_version);\n+                render_stability_since_raw(\n+                    w,\n+                    item.stable_since().as_deref(),\n+                    item.const_stable_since().as_deref(),\n+                    outer_version,\n+                    outer_const_version,\n+                );\n                 write_srclink(cx, item, w, cache);\n                 write!(w, \"</h4>\");\n             }\n@@ -3854,6 +3906,7 @@ fn render_impl(\n             render_mode,\n             false,\n             outer_version,\n+            outer_const_version,\n             trait_,\n             show_def_docs,\n             cache,\n@@ -3868,6 +3921,7 @@ fn render_impl(\n         parent: &clean::Item,\n         render_mode: RenderMode,\n         outer_version: Option<&str>,\n+        outer_const_version: Option<&str>,\n         show_def_docs: bool,\n         cache: &Cache,\n     ) {\n@@ -3888,6 +3942,7 @@ fn render_impl(\n                 render_mode,\n                 true,\n                 outer_version,\n+                outer_const_version,\n                 None,\n                 show_def_docs,\n                 cache,\n@@ -3909,6 +3964,7 @@ fn render_impl(\n                 &i.impl_item,\n                 render_mode,\n                 outer_version,\n+                outer_const_version,\n                 show_def_docs,\n                 cache,\n             );"}, {"sha": "2bcabdffb3d93dfef806d4f55e8ca87de97a1fa7", "filename": "src/test/rustdoc-ui/.gitattributes", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc-ui%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc-ui%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2F.gitattributes?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1 +0,0 @@\n-intra-links-warning-crlf.rs eol=crlf"}, {"sha": "6c125fac52f5e285021902d19dd727fa3ea0ca93", "filename": "src/test/rustdoc-ui/intra-doc/.gitattributes", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2F.gitattributes?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1 @@\n+warning-crlf.rs eol=crlf"}, {"sha": "c053e378e7147f5c53b6b54c13662108dc0e4826", "filename": "src/test/rustdoc-ui/intra-doc/alias-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-doc-alias-ice.rs"}, {"sha": "3db5fad4cfbdcf062cdf3d3a091e332317280f6a", "filename": "src/test/rustdoc-ui/intra-doc/alias-ice.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Falias-ice.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,11 +1,11 @@\n error: unresolved link to `TypeAlias::hoge`\n-  --> $DIR/intra-doc-alias-ice.rs:5:30\n+  --> $DIR/alias-ice.rs:5:30\n    |\n LL | /// [broken cross-reference](TypeAlias::hoge)\n    |                              ^^^^^^^^^^^^^^^ the type alias `TypeAlias` has no associated item named `hoge`\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-doc-alias-ice.rs:1:9\n+  --> $DIR/alias-ice.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr"}, {"sha": "f63435337cfbcaed8da4705a1b314460da85e75d", "filename": "src/test/rustdoc-ui/intra-doc/ambiguity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-links-ambiguity.rs"}, {"sha": "7e967dc88bcdd018e18a6c91133a17ef8cad9073", "filename": "src/test/rustdoc-ui/intra-doc/ambiguity.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fambiguity.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,11 +1,11 @@\n error: `true` is both a module and a builtin type\n-  --> $DIR/intra-links-ambiguity.rs:38:6\n+  --> $DIR/ambiguity.rs:38:6\n    |\n LL | /// [true]\n    |      ^^^^ ambiguous link\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-links-ambiguity.rs:1:9\n+  --> $DIR/ambiguity.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | /// [prim@true]\n    |      ^^^^^^^^^\n \n error: `ambiguous` is both a struct and a function\n-  --> $DIR/intra-links-ambiguity.rs:27:6\n+  --> $DIR/ambiguity.rs:27:6\n    |\n LL | /// [`ambiguous`] is ambiguous.\n    |      ^^^^^^^^^^^ ambiguous link\n@@ -34,7 +34,7 @@ LL | /// [`ambiguous()`] is ambiguous.\n    |      ^^^^^^^^^^^^^\n \n error: `ambiguous` is both a struct and a function\n-  --> $DIR/intra-links-ambiguity.rs:29:6\n+  --> $DIR/ambiguity.rs:29:6\n    |\n LL | /// [ambiguous] is ambiguous.\n    |      ^^^^^^^^^ ambiguous link\n@@ -49,7 +49,7 @@ LL | /// [ambiguous()] is ambiguous.\n    |      ^^^^^^^^^^^\n \n error: `multi_conflict` is a struct, a function, and a macro\n-  --> $DIR/intra-links-ambiguity.rs:31:6\n+  --> $DIR/ambiguity.rs:31:6\n    |\n LL | /// [`multi_conflict`] is a three-way conflict.\n    |      ^^^^^^^^^^^^^^^^ ambiguous link\n@@ -68,7 +68,7 @@ LL | /// [`multi_conflict!`] is a three-way conflict.\n    |      ^^^^^^^^^^^^^^^^^\n \n error: `type_and_value` is both a module and a constant\n-  --> $DIR/intra-links-ambiguity.rs:33:16\n+  --> $DIR/ambiguity.rs:33:16\n    |\n LL | /// Ambiguous [type_and_value].\n    |                ^^^^^^^^^^^^^^ ambiguous link\n@@ -83,7 +83,7 @@ LL | /// Ambiguous [const@type_and_value].\n    |                ^^^^^^^^^^^^^^^^^^^^\n \n error: `foo::bar` is both an enum and a function\n-  --> $DIR/intra-links-ambiguity.rs:35:42\n+  --> $DIR/ambiguity.rs:35:42\n    |\n LL | /// Ambiguous non-implied shortcut link [`foo::bar`].\n    |                                          ^^^^^^^^^^ ambiguous link", "previous_filename": "src/test/rustdoc-ui/intra-links-ambiguity.stderr"}, {"sha": "ccefd2e6fabb5edb7fdb7f0deb2118f7f3a241ac", "filename": "src/test/rustdoc-ui/intra-doc/anchors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-links-anchors.rs"}, {"sha": "5b272d960d50f4546f8a36614e91d171998c5e5e", "filename": "src/test/rustdoc-ui/intra-doc/anchors.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,29 +1,29 @@\n error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n-  --> $DIR/intra-links-anchors.rs:25:15\n+  --> $DIR/anchors.rs:25:15\n    |\n LL | /// Or maybe [Foo::f#hola].\n    |               ^^^^^^^^^^^ contains invalid anchor\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-links-anchors.rs:1:9\n+  --> $DIR/anchors.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `hello#people#!` contains multiple anchors\n-  --> $DIR/intra-links-anchors.rs:31:28\n+  --> $DIR/anchors.rs:31:28\n    |\n LL | /// Another anchor error: [hello#people#!].\n    |                            ^^^^^^^^^^^^^^ contains invalid anchor\n \n error: `Enum::A#whatever` contains an anchor, but links to variants are already anchored\n-  --> $DIR/intra-links-anchors.rs:37:28\n+  --> $DIR/anchors.rs:37:28\n    |\n LL | /// Damn enum's variants: [Enum::A#whatever].\n    |                            ^^^^^^^^^^^^^^^^ contains invalid anchor\n \n error: `u32#hello` contains an anchor, but links to builtin types are already anchored\n-  --> $DIR/intra-links-anchors.rs:43:6\n+  --> $DIR/anchors.rs:43:6\n    |\n LL | /// [u32#hello]\n    |      ^^^^^^^^^ contains invalid anchor", "previous_filename": "src/test/rustdoc-ui/intra-links-anchors.stderr"}, {"sha": "31a8310d472423bd1ef7001bf523185fdbfdab8c", "filename": "src/test/rustdoc-ui/intra-doc/auxiliary/intra-doc-broken.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fintra-doc-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fintra-doc-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fauxiliary%2Fintra-doc-broken.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/auxiliary/intra-doc-broken.rs"}, {"sha": "ef261359ebd9ec4506cf670fa77bb6290dd87db5", "filename": "src/test/rustdoc-ui/intra-doc/broken-reexport.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fbroken-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fbroken-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fbroken-reexport.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-doc-broken-reexport.rs"}, {"sha": "b9c8e033b1b21002ceb70070deeb30b5b991a5c7", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.rs"}, {"sha": "2f5f3daa297858f5a8155b68a809a2a3a13f84ee", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,90 +1,90 @@\n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:14:14\n+  --> $DIR/disambiguator-mismatch.rs:14:14\n    |\n LL | /// Link to [struct@S]\n    |              ^^^^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:1:9\n+  --> $DIR/disambiguator-mismatch.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: this link resolved to an enum, which is not a struct\n \n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:19:14\n+  --> $DIR/disambiguator-mismatch.rs:19:14\n    |\n LL | /// Link to [mod@S]\n    |              ^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n    |\n    = note: this link resolved to an enum, which is not a module\n \n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:24:14\n+  --> $DIR/disambiguator-mismatch.rs:24:14\n    |\n LL | /// Link to [union@S]\n    |              ^^^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n    |\n    = note: this link resolved to an enum, which is not a union\n \n error: incompatible link kind for `S`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:29:14\n+  --> $DIR/disambiguator-mismatch.rs:29:14\n    |\n LL | /// Link to [trait@S]\n    |              ^^^^^^^ help: to link to the enum, prefix with `enum@`: `enum@S`\n    |\n    = note: this link resolved to an enum, which is not a trait\n \n error: incompatible link kind for `T`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:34:14\n+  --> $DIR/disambiguator-mismatch.rs:34:14\n    |\n LL | /// Link to [struct@T]\n    |              ^^^^^^^^ help: to link to the trait, prefix with `trait@`: `trait@T`\n    |\n    = note: this link resolved to a trait, which is not a struct\n \n error: incompatible link kind for `m`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:39:14\n+  --> $DIR/disambiguator-mismatch.rs:39:14\n    |\n LL | /// Link to [derive@m]\n    |              ^^^^^^^^ help: to link to the macro, add an exclamation mark: `m!`\n    |\n    = note: this link resolved to a macro, which is not a derive macro\n \n error: incompatible link kind for `s`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:44:14\n+  --> $DIR/disambiguator-mismatch.rs:44:14\n    |\n LL | /// Link to [const@s]\n    |              ^^^^^^^ help: to link to the static, prefix with `static@`: `static@s`\n    |\n    = note: this link resolved to a static, which is not a constant\n \n error: incompatible link kind for `c`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:49:14\n+  --> $DIR/disambiguator-mismatch.rs:49:14\n    |\n LL | /// Link to [static@c]\n    |              ^^^^^^^^ help: to link to the constant, prefix with `const@`: `const@c`\n    |\n    = note: this link resolved to a constant, which is not a static\n \n error: incompatible link kind for `c`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:54:14\n+  --> $DIR/disambiguator-mismatch.rs:54:14\n    |\n LL | /// Link to [fn@c]\n    |              ^^^^ help: to link to the constant, prefix with `const@`: `const@c`\n    |\n    = note: this link resolved to a constant, which is not a function\n \n error: incompatible link kind for `c`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:59:14\n+  --> $DIR/disambiguator-mismatch.rs:59:14\n    |\n LL | /// Link to [c()]\n    |              ^^^ help: to link to the constant, prefix with `const@`: `const@c`\n    |\n    = note: this link resolved to a constant, which is not a function\n \n error: incompatible link kind for `f`\n-  --> $DIR/intra-links-disambiguator-mismatch.rs:64:14\n+  --> $DIR/disambiguator-mismatch.rs:64:14\n    |\n LL | /// Link to [const@f]\n    |              ^^^^^^^ help: to link to the function, add parentheses: `f()`", "previous_filename": "src/test/rustdoc-ui/intra-links-disambiguator-mismatch.stderr"}, {"sha": "a01211c4f32b1b8479e37c37cf476be43a6c1339", "filename": "src/test/rustdoc-ui/intra-doc/double-anchor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-link-double-anchor.rs"}, {"sha": "1cd9231eded4ded44db7856539492790afe167c3", "filename": "src/test/rustdoc-ui/intra-doc/double-anchor.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdouble-anchor.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,5 +1,5 @@\n warning: `with#anchor#error` contains multiple anchors\n-  --> $DIR/intra-link-double-anchor.rs:5:18\n+  --> $DIR/double-anchor.rs:5:18\n    |\n LL | /// docs [label][with#anchor#error]\n    |                  ^^^^^^^^^^^^^^^^^ contains invalid anchor", "previous_filename": "src/test/rustdoc-ui/intra-link-double-anchor.stderr"}, {"sha": "81e42643ae8fc5e6b70bf8554fab26f530fa3499", "filename": "src/test/rustdoc-ui/intra-doc/errors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-link-errors.rs"}, {"sha": "21c806108e3af1db5c6e1e3bd42039d37e569913", "filename": "src/test/rustdoc-ui/intra-doc/errors.stderr", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,95 +1,95 @@\n error: unresolved link to `path::to::nonexistent::module`\n-  --> $DIR/intra-link-errors.rs:7:6\n+  --> $DIR/errors.rs:7:6\n    |\n LL | /// [path::to::nonexistent::module]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `path` in scope\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-link-errors.rs:1:9\n+  --> $DIR/errors.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unresolved link to `path::to::nonexistent::macro`\n-  --> $DIR/intra-link-errors.rs:11:6\n+  --> $DIR/errors.rs:11:6\n    |\n LL | /// [path::to::nonexistent::macro!]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `path` in scope\n \n error: unresolved link to `path::to::nonexistent::type`\n-  --> $DIR/intra-link-errors.rs:15:6\n+  --> $DIR/errors.rs:15:6\n    |\n LL | /// [type@path::to::nonexistent::type]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `path` in scope\n \n error: unresolved link to `std::io::not::here`\n-  --> $DIR/intra-link-errors.rs:19:6\n+  --> $DIR/errors.rs:19:6\n    |\n LL | /// [std::io::not::here]\n    |      ^^^^^^^^^^^^^^^^^^ no item named `not` in module `io`\n \n error: unresolved link to `std::io::not::here`\n-  --> $DIR/intra-link-errors.rs:23:6\n+  --> $DIR/errors.rs:23:6\n    |\n LL | /// [type@std::io::not::here]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^ no item named `not` in module `io`\n \n error: unresolved link to `std::io::Error::x`\n-  --> $DIR/intra-link-errors.rs:27:6\n+  --> $DIR/errors.rs:27:6\n    |\n LL | /// [std::io::Error::x]\n    |      ^^^^^^^^^^^^^^^^^ the struct `Error` has no field or associated item named `x`\n \n error: unresolved link to `std::io::ErrorKind::x`\n-  --> $DIR/intra-link-errors.rs:31:6\n+  --> $DIR/errors.rs:31:6\n    |\n LL | /// [std::io::ErrorKind::x]\n    |      ^^^^^^^^^^^^^^^^^^^^^ the enum `ErrorKind` has no variant or associated item named `x`\n \n error: unresolved link to `f::A`\n-  --> $DIR/intra-link-errors.rs:35:6\n+  --> $DIR/errors.rs:35:6\n    |\n LL | /// [f::A]\n    |      ^^^^ `f` is a function, not a module or type, and cannot have associated items\n \n error: unresolved link to `f::A`\n-  --> $DIR/intra-link-errors.rs:39:6\n+  --> $DIR/errors.rs:39:6\n    |\n LL | /// [f::A!]\n    |      ^^^^^ `f` is a function, not a module or type, and cannot have associated items\n \n error: unresolved link to `S::A`\n-  --> $DIR/intra-link-errors.rs:43:6\n+  --> $DIR/errors.rs:43:6\n    |\n LL | /// [S::A]\n    |      ^^^^ the struct `S` has no field or associated item named `A`\n \n error: unresolved link to `S::fmt`\n-  --> $DIR/intra-link-errors.rs:47:6\n+  --> $DIR/errors.rs:47:6\n    |\n LL | /// [S::fmt]\n    |      ^^^^^^ the struct `S` has no field or associated item named `fmt`\n \n error: unresolved link to `E::D`\n-  --> $DIR/intra-link-errors.rs:51:6\n+  --> $DIR/errors.rs:51:6\n    |\n LL | /// [E::D]\n    |      ^^^^ the enum `E` has no variant or associated item named `D`\n \n error: unresolved link to `u8::not_found`\n-  --> $DIR/intra-link-errors.rs:55:6\n+  --> $DIR/errors.rs:55:6\n    |\n LL | /// [u8::not_found]\n    |      ^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n \n error: unresolved link to `std::primitive::u8::not_found`\n-  --> $DIR/intra-link-errors.rs:59:6\n+  --> $DIR/errors.rs:59:6\n    |\n LL | /// [std::primitive::u8::not_found]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the builtin type `u8` has no associated item named `not_found`\n \n error: unresolved link to `Vec::into_iter`\n-  --> $DIR/intra-link-errors.rs:63:6\n+  --> $DIR/errors.rs:63:6\n    |\n LL | /// [type@Vec::into_iter]\n    |      ^^^^^^^^^^^^^^^^^^^\n@@ -98,7 +98,7 @@ LL | /// [type@Vec::into_iter]\n    |      help: to link to the associated function, add parentheses: `Vec::into_iter()`\n \n error: unresolved link to `S`\n-  --> $DIR/intra-link-errors.rs:68:6\n+  --> $DIR/errors.rs:68:6\n    |\n LL | /// [S!]\n    |      ^^\n@@ -107,7 +107,7 @@ LL | /// [S!]\n    |      help: to link to the struct, prefix with `struct@`: `struct@S`\n \n error: unresolved link to `S::h`\n-  --> $DIR/intra-link-errors.rs:78:6\n+  --> $DIR/errors.rs:78:6\n    |\n LL | /// [type@S::h]\n    |      ^^^^^^^^^\n@@ -116,7 +116,7 @@ LL | /// [type@S::h]\n    |      help: to link to the associated function, add parentheses: `S::h()`\n \n error: unresolved link to `T::g`\n-  --> $DIR/intra-link-errors.rs:86:6\n+  --> $DIR/errors.rs:86:6\n    |\n LL | /// [type@T::g]\n    |      ^^^^^^^^^\n@@ -125,13 +125,13 @@ LL | /// [type@T::g]\n    |      help: to link to the associated function, add parentheses: `T::g()`\n \n error: unresolved link to `T::h`\n-  --> $DIR/intra-link-errors.rs:91:6\n+  --> $DIR/errors.rs:91:6\n    |\n LL | /// [T::h!]\n    |      ^^^^^ the trait `T` has no macro named `h`\n \n error: unresolved link to `m`\n-  --> $DIR/intra-link-errors.rs:98:6\n+  --> $DIR/errors.rs:98:6\n    |\n LL | /// [m()]\n    |      ^^^", "previous_filename": "src/test/rustdoc-ui/intra-link-errors.stderr"}, {"sha": "9c54092146fef61753e436cd8e55f7b9c45e1a16", "filename": "src/test/rustdoc-ui/intra-doc/malformed-generics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-link-malformed-generics.rs"}, {"sha": "2e1b22807bc39d6cefff8589858b436f1500254b", "filename": "src/test/rustdoc-ui/intra-doc/malformed-generics.stderr", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmalformed-generics.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,97 +1,97 @@\n error: unresolved link to `Vec<`\n-  --> $DIR/intra-link-malformed-generics.rs:3:6\n+  --> $DIR/malformed-generics.rs:3:6\n    |\n LL | //! [Vec<]\n    |      ^^^^ unbalanced angle brackets\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-link-malformed-generics.rs:1:9\n+  --> $DIR/malformed-generics.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: unresolved link to `Vec<Box<T`\n-  --> $DIR/intra-link-malformed-generics.rs:4:6\n+  --> $DIR/malformed-generics.rs:4:6\n    |\n LL | //! [Vec<Box<T]\n    |      ^^^^^^^^^ unbalanced angle brackets\n \n error: unresolved link to `Vec<Box<T>`\n-  --> $DIR/intra-link-malformed-generics.rs:5:6\n+  --> $DIR/malformed-generics.rs:5:6\n    |\n LL | //! [Vec<Box<T>]\n    |      ^^^^^^^^^^ unbalanced angle brackets\n \n error: unresolved link to `Vec<Box<T>>>`\n-  --> $DIR/intra-link-malformed-generics.rs:6:6\n+  --> $DIR/malformed-generics.rs:6:6\n    |\n LL | //! [Vec<Box<T>>>]\n    |      ^^^^^^^^^^^^ unbalanced angle brackets\n \n error: unresolved link to `Vec<T>>>`\n-  --> $DIR/intra-link-malformed-generics.rs:7:6\n+  --> $DIR/malformed-generics.rs:7:6\n    |\n LL | //! [Vec<T>>>]\n    |      ^^^^^^^^ unbalanced angle brackets\n \n error: unresolved link to `<Vec`\n-  --> $DIR/intra-link-malformed-generics.rs:8:6\n+  --> $DIR/malformed-generics.rs:8:6\n    |\n LL | //! [<Vec]\n    |      ^^^^ unbalanced angle brackets\n \n error: unresolved link to `Vec::<`\n-  --> $DIR/intra-link-malformed-generics.rs:9:6\n+  --> $DIR/malformed-generics.rs:9:6\n    |\n LL | //! [Vec::<]\n    |      ^^^^^^ unbalanced angle brackets\n \n error: unresolved link to `<T>`\n-  --> $DIR/intra-link-malformed-generics.rs:10:6\n+  --> $DIR/malformed-generics.rs:10:6\n    |\n LL | //! [<T>]\n    |      ^^^ missing type for generic parameters\n \n error: unresolved link to `<invalid syntax>`\n-  --> $DIR/intra-link-malformed-generics.rs:11:6\n+  --> $DIR/malformed-generics.rs:11:6\n    |\n LL | //! [<invalid syntax>]\n    |      ^^^^^^^^^^^^^^^^ missing type for generic parameters\n \n error: unresolved link to `Vec:<T>:new`\n-  --> $DIR/intra-link-malformed-generics.rs:12:6\n+  --> $DIR/malformed-generics.rs:12:6\n    |\n LL | //! [Vec:<T>:new()]\n    |      ^^^^^^^^^^^^^ has invalid path separator\n \n error: unresolved link to `Vec<<T>>`\n-  --> $DIR/intra-link-malformed-generics.rs:13:6\n+  --> $DIR/malformed-generics.rs:13:6\n    |\n LL | //! [Vec<<T>>]\n    |      ^^^^^^^^ too many angle brackets\n \n error: unresolved link to `Vec<>`\n-  --> $DIR/intra-link-malformed-generics.rs:14:6\n+  --> $DIR/malformed-generics.rs:14:6\n    |\n LL | //! [Vec<>]\n    |      ^^^^^ empty angle brackets\n \n error: unresolved link to `Vec<<>>`\n-  --> $DIR/intra-link-malformed-generics.rs:15:6\n+  --> $DIR/malformed-generics.rs:15:6\n    |\n LL | //! [Vec<<>>]\n    |      ^^^^^^^ too many angle brackets\n \n error: unresolved link to `<Vec as IntoIterator>::into_iter`\n-  --> $DIR/intra-link-malformed-generics.rs:18:6\n+  --> $DIR/malformed-generics.rs:18:6\n    |\n LL | //! [<Vec as IntoIterator>::into_iter]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ fully-qualified syntax is unsupported\n    |\n    = note: see https://github.com/rust-lang/rust/issues/74563 for more information\n \n error: unresolved link to `<Vec<T> as IntoIterator>::iter`\n-  --> $DIR/intra-link-malformed-generics.rs:19:6\n+  --> $DIR/malformed-generics.rs:19:6\n    |\n LL | //! [<Vec<T> as IntoIterator>::iter]\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ fully-qualified syntax is unsupported", "previous_filename": "src/test/rustdoc-ui/intra-link-malformed-generics.stderr"}, {"sha": "85738ceae8e615b34eeedffa8a0ffb35d9e1b0ac", "filename": "src/test/rustdoc-ui/intra-doc/prim-conflict.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-link-prim-conflict.rs"}, {"sha": "01275f8d9afb0a6703cbc78956be74687a943260", "filename": "src/test/rustdoc-ui/intra-doc/prim-conflict.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprim-conflict.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,11 +1,11 @@\n error: `char` is both a module and a builtin type\n-  --> $DIR/intra-link-prim-conflict.rs:4:6\n+  --> $DIR/prim-conflict.rs:4:6\n    |\n LL | /// [char]\n    |      ^^^^ ambiguous link\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-link-prim-conflict.rs:1:9\n+  --> $DIR/prim-conflict.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | /// [prim@char]\n    |      ^^^^^^^^^\n \n error: `char` is both a module and a builtin type\n-  --> $DIR/intra-link-prim-conflict.rs:10:6\n+  --> $DIR/prim-conflict.rs:10:6\n    |\n LL | /// [type@char]\n    |      ^^^^^^^^^ ambiguous link\n@@ -34,15 +34,15 @@ LL | /// [prim@char]\n    |      ^^^^^^^^^\n \n error: incompatible link kind for `char`\n-  --> $DIR/intra-link-prim-conflict.rs:19:6\n+  --> $DIR/prim-conflict.rs:19:6\n    |\n LL | /// [struct@char]\n    |      ^^^^^^^^^^^ help: to link to the module, prefix with `mod@`: `mod@char`\n    |\n    = note: this link resolved to a module, which is not a struct\n \n error: incompatible link kind for `char`\n-  --> $DIR/intra-link-prim-conflict.rs:26:10\n+  --> $DIR/prim-conflict.rs:26:10\n    |\n LL |     //! [struct@char]\n    |          ^^^^^^^^^^^ help: to link to the builtin type, prefix with `prim@`: `prim@char`", "previous_filename": "src/test/rustdoc-ui/intra-link-prim-conflict.stderr"}, {"sha": "6e11ec3e87bf9dc148fbc7dac103daff30a4cd50", "filename": "src/test/rustdoc-ui/intra-doc/private.private.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,5 +1,5 @@\n warning: public documentation for `DocMe` links to private item `DontDocMe`\n-  --> $DIR/intra-links-private.rs:5:11\n+  --> $DIR/private.rs:5:11\n    |\n LL | /// docs [DontDocMe]\n    |           ^^^^^^^^^ this item is private", "previous_filename": "src/test/rustdoc-ui/intra-links-private.private.stderr"}, {"sha": "3a6a4b664522a7addc5070585ae654885e101303", "filename": "src/test/rustdoc-ui/intra-doc/private.public.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,5 +1,5 @@\n warning: public documentation for `DocMe` links to private item `DontDocMe`\n-  --> $DIR/intra-links-private.rs:5:11\n+  --> $DIR/private.rs:5:11\n    |\n LL | /// docs [DontDocMe]\n    |           ^^^^^^^^^ this item is private", "previous_filename": "src/test/rustdoc-ui/intra-links-private.public.stderr"}, {"sha": "613236d75d2ee952e847f7ac23590a95509bfccd", "filename": "src/test/rustdoc-ui/intra-doc/private.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-links-private.rs"}, {"sha": "7764a6df6ee772b4aa578d8416af3323889605b7", "filename": "src/test/rustdoc-ui/intra-doc/span-ice-55723.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.rs"}, {"sha": "10ca14e850fd79fc16df84012e28967f2540babb", "filename": "src/test/rustdoc-ui/intra-doc/span-ice-55723.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fspan-ice-55723.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,11 +1,11 @@\n error: unresolved link to `i`\n-  --> $DIR/intra-link-span-ice-55723.rs:9:10\n+  --> $DIR/span-ice-55723.rs:9:10\n    |\n LL | /// \uff08arr[i]\uff09\n    |           ^ no item named `i` in scope\n    |\n note: the lint level is defined here\n-  --> $DIR/intra-link-span-ice-55723.rs:1:9\n+  --> $DIR/span-ice-55723.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr"}, {"sha": "a19c33b53be09673b8f24197a2ab001812800f13", "filename": "src/test/rustdoc-ui/intra-doc/warning-crlf.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-links-warning-crlf.rs"}, {"sha": "01e428200376691d90f1787b1c8d3dd8a9ef6dfb", "filename": "src/test/rustdoc-ui/intra-doc/warning-crlf.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning-crlf.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,5 +1,5 @@\n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning-crlf.rs:7:6\n+  --> $DIR/warning-crlf.rs:7:6\n    |\n LL | /// [error]\n    |      ^^^^^ no item named `error` in scope\n@@ -8,23 +8,23 @@ LL | /// [error]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error1`\n-  --> $DIR/intra-links-warning-crlf.rs:12:11\n+  --> $DIR/warning-crlf.rs:12:11\n    |\n LL | /// docs [error1]\n    |           ^^^^^^ no item named `error1` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error2`\n-  --> $DIR/intra-links-warning-crlf.rs:15:11\n+  --> $DIR/warning-crlf.rs:15:11\n    |\n LL | /// docs [error2]\n    |           ^^^^^^ no item named `error2` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning-crlf.rs:23:20\n+  --> $DIR/warning-crlf.rs:23:20\n    |\n LL |  * It also has an [error].\n    |                    ^^^^^ no item named `error` in scope", "previous_filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr"}, {"sha": "eab1f03480460b2d05d9c722a44aaa41085805bc", "filename": "src/test/rustdoc-ui/intra-doc/warning.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc-ui/intra-links-warning.rs"}, {"sha": "430d18165a005601c98fbbe875fb1bfd7c8f35d5", "filename": "src/test/rustdoc-ui/intra-doc/warning.stderr", "status": "renamed", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,75 +1,75 @@\n warning: unresolved link to `Foo::baz`\n-  --> $DIR/intra-links-warning.rs:3:23\n+  --> $DIR/warning.rs:3:23\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                       ^^^^^^^^ the struct `Foo` has no field or associated item named `baz`\n    |\n    = note: `#[warn(broken_intra_doc_links)]` on by default\n \n warning: unresolved link to `Bar::foo`\n-  --> $DIR/intra-links-warning.rs:3:35\n+  --> $DIR/warning.rs:3:35\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |                                   ^^^^^^^^ no item named `Bar` in scope\n \n warning: unresolved link to `Uniooon::X`\n-  --> $DIR/intra-links-warning.rs:6:13\n+  --> $DIR/warning.rs:6:13\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n    |             ^^^^^^^^^^ no item named `Uniooon` in scope\n \n warning: unresolved link to `Qux::Z`\n-  --> $DIR/intra-links-warning.rs:6:30\n+  --> $DIR/warning.rs:6:30\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n    |                              ^^^^^^ no item named `Qux` in scope\n \n warning: unresolved link to `Uniooon::X`\n-  --> $DIR/intra-links-warning.rs:10:14\n+  --> $DIR/warning.rs:10:14\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |              ^^^^^^^^^^ no item named `Uniooon` in scope\n \n warning: unresolved link to `Qux::Z`\n-  --> $DIR/intra-links-warning.rs:10:31\n+  --> $DIR/warning.rs:10:31\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n    |                               ^^^^^^ no item named `Qux` in scope\n \n warning: unresolved link to `Qux:Y`\n-  --> $DIR/intra-links-warning.rs:14:13\n+  --> $DIR/warning.rs:14:13\n    |\n LL |        /// [Qux:Y]\n    |             ^^^^^ no item named `Qux:Y` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarA`\n-  --> $DIR/intra-links-warning.rs:21:10\n+  --> $DIR/warning.rs:21:10\n    |\n LL | /// bar [BarA] bar\n    |          ^^^^ no item named `BarA` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarB`\n-  --> $DIR/intra-links-warning.rs:27:9\n+  --> $DIR/warning.rs:27:9\n    |\n LL |  * bar [BarB] bar\n    |         ^^^^ no item named `BarB` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarC`\n-  --> $DIR/intra-links-warning.rs:34:6\n+  --> $DIR/warning.rs:34:6\n    |\n LL | bar [BarC] bar\n    |      ^^^^ no item named `BarC` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarD`\n-  --> $DIR/intra-links-warning.rs:45:1\n+  --> $DIR/warning.rs:45:1\n    |\n LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarF`\n-  --> $DIR/intra-links-warning.rs:50:9\n+  --> $DIR/warning.rs:50:9\n    |\n LL |         #[doc = $f]\n    |         ^^^^^^^^^^^\n@@ -99,23 +99,23 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning.rs:58:30\n+  --> $DIR/warning.rs:58:30\n    |\n LL |  * time to introduce a link [error]*/\n    |                              ^^^^^ no item named `error` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning.rs:64:30\n+  --> $DIR/warning.rs:64:30\n    |\n LL |  * time to introduce a link [error]\n    |                              ^^^^^ no item named `error` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning.rs:68:1\n+  --> $DIR/warning.rs:68:1\n    |\n LL | #[doc = \"single line [error]\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -128,7 +128,7 @@ LL | #[doc = \"single line [error]\"]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning.rs:71:1\n+  --> $DIR/warning.rs:71:1\n    |\n LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -141,7 +141,7 @@ LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n-  --> $DIR/intra-links-warning.rs:74:1\n+  --> $DIR/warning.rs:74:1\n    |\n LL | / /// Item docs.\n LL | | #[doc=\"Hello there!\"]\n@@ -156,15 +156,15 @@ LL | | /// [error]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error1`\n-  --> $DIR/intra-links-warning.rs:80:11\n+  --> $DIR/warning.rs:80:11\n    |\n LL | /// docs [error1]\n    |           ^^^^^^ no item named `error1` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error2`\n-  --> $DIR/intra-links-warning.rs:82:11\n+  --> $DIR/warning.rs:82:11\n    |\n LL | /// docs [error2]\n    |           ^^^^^^ no item named `error2` in scope", "previous_filename": "src/test/rustdoc-ui/intra-links-warning.stderr"}, {"sha": "11ba68a388fba238830ff4ed3486b7b8611ba9bc", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n #![crate_name = \"foo\"]\n \n #![unstable(feature = \"humans\",\n@@ -17,6 +19,7 @@ pub const unsafe fn foo() -> u32 { 42 }\n pub const fn foo2() -> u32 { 42 }\n \n // @has 'foo/fn.bar2.html' '//pre' 'pub const fn bar2() -> u32'\n+// @has - //span '1.0.0 (const: 1.0.0)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn bar2() -> u32 { 42 }\n@@ -26,6 +29,7 @@ pub const fn bar2() -> u32 { 42 }\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar2_gated.html' '//pre' 'pub const unsafe fn bar2_gated() -> u32'\n+// @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.0.0)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n@@ -40,4 +44,10 @@ impl Foo {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n     pub const unsafe fn gated() -> u32 { 42 }\n+\n+    // @has 'foo/struct.Foo.html' '//h4[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n+    // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_stable(feature = \"rust1\", since = \"1.2.0\")]\n+    pub const fn stable_impl() -> u32 { 42 }\n }"}, {"sha": "bd733e1023033963bcfc483e17ab37884f19d654", "filename": "src/test/rustdoc/intra-doc-link-mod-ambiguity.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-doc-link-mod-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-doc-link-mod-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-mod-ambiguity.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,18 +0,0 @@\n-// ignore-tidy-linelength\n-\n-#![deny(broken_intra_doc_links)]\n-\n-\n-pub fn foo() {\n-\n-}\n-\n-pub mod foo {}\n-// @has intra_doc_link_mod_ambiguity/struct.A.html '//a/@href' '../intra_doc_link_mod_ambiguity/foo/index.html'\n-/// Module is [`module@foo`]\n-pub struct A;\n-\n-\n-// @has intra_doc_link_mod_ambiguity/struct.B.html '//a/@href' '../intra_doc_link_mod_ambiguity/fn.foo.html'\n-/// Function is [`fn@foo`]\n-pub struct B;"}, {"sha": "e4f0c737bdd3312be648ff318704194405ee7574", "filename": "src/test/rustdoc/intra-doc/anchors.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fanchors.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -3,8 +3,8 @@\n /// # Anchor!\n pub struct Something;\n \n-// @has intra_links_anchors/struct.SomeOtherType.html\n-// @has - '//a/@href' '../intra_links_anchors/struct.Something.html#Anchor!'\n+// @has anchors/struct.SomeOtherType.html\n+// @has - '//a/@href' '../anchors/struct.Something.html#Anchor!'\n \n /// I want...\n ///", "previous_filename": "src/test/rustdoc/intra-links-anchors.rs"}, {"sha": "f99d9b5baea4421108217cfc613eb10e001bd728", "filename": "src/test/rustdoc/intra-doc/associated-defaults.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-defaults.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,27 @@\n+// ignore-tidy-linelength\n+#![deny(intra_doc_link_resolution_failure)]\n+#![feature(associated_type_defaults)]\n+\n+pub trait TraitWithDefault {\n+    type T = usize;\n+    fn f() -> Self::T {\n+        0\n+    }\n+}\n+\n+/// Link to [UsesDefaults::T] and [UsesDefaults::f]\n+// @has 'associated_defaults/struct.UsesDefaults.html' '//a[@href=\"../associated_defaults/struct.UsesDefaults.html#associatedtype.T\"]' 'UsesDefaults::T'\n+// @has 'associated_defaults/struct.UsesDefaults.html' '//a[@href=\"../associated_defaults/struct.UsesDefaults.html#method.f\"]' 'UsesDefaults::f'\n+pub struct UsesDefaults;\n+impl TraitWithDefault for UsesDefaults {}\n+\n+/// Link to [OverridesDefaults::T] and [OverridesDefaults::f]\n+// @has 'associated_defaults/struct.OverridesDefaults.html' '//a[@href=\"../associated_defaults/struct.OverridesDefaults.html#associatedtype.T\"]' 'OverridesDefaults::T'\n+// @has 'associated_defaults/struct.OverridesDefaults.html' '//a[@href=\"../associated_defaults/struct.OverridesDefaults.html#method.f\"]' 'OverridesDefaults::f'\n+pub struct OverridesDefaults;\n+impl TraitWithDefault for OverridesDefaults {\n+    type T = bool;\n+    fn f() -> bool {\n+        true\n+    }\n+}"}, {"sha": "09dfbfcf68a32f1c45a448a4512f3d32fe676917", "filename": "src/test/rustdoc/intra-doc/associated-items.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fassociated-items.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,61 @@\n+// ignore-tidy-linelength\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+/// [`std::collections::BTreeMap::into_iter`]\n+/// [`String::from`] is ambiguous as to which `From` impl\n+/// [Vec::into_iter()] uses a disambiguator\n+// @has 'associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html#method.into_iter\"]' 'std::collections::BTreeMap::into_iter'\n+// @has 'associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html#method.from\"]' 'String::from'\n+// @has 'associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_iter\"]' 'Vec::into_iter'\n+pub fn foo() {}\n+\n+/// Link to [MyStruct], [link from struct][MyStruct::method], [MyStruct::clone], [MyStruct::Input]\n+// @has 'associated_items/struct.MyStruct.html' '//a[@href=\"../associated_items/struct.MyStruct.html\"]' 'MyStruct'\n+// @has 'associated_items/struct.MyStruct.html' '//a[@href=\"../associated_items/struct.MyStruct.html#method.method\"]' 'link from struct'\n+// @has 'associated_items/struct.MyStruct.html' '//a[@href=\"../associated_items/struct.MyStruct.html#method.clone\"]' 'MyStruct::clone'\n+// @has 'associated_items/struct.MyStruct.html' '//a[@href=\"../associated_items/struct.MyStruct.html#associatedtype.Input\"]' 'MyStruct::Input'\n+pub struct MyStruct { foo: () }\n+\n+impl Clone for MyStruct {\n+    fn clone(&self) -> Self {\n+        MyStruct\n+    }\n+}\n+\n+pub trait T {\n+    type Input;\n+    fn method(i: Self::Input);\n+}\n+\n+impl T for MyStruct {\n+    type Input = usize;\n+\n+    /// [link from method][MyStruct::method] on method\n+    // @has 'associated_items/struct.MyStruct.html' '//a[@href=\"../associated_items/struct.MyStruct.html#method.method\"]' 'link from method'\n+    fn method(i: usize) {\n+    }\n+}\n+\n+/// Ambiguity between which trait to use\n+pub trait T1 {\n+    fn ambiguous_method();\n+}\n+\n+pub trait T2 {\n+    fn ambiguous_method();\n+}\n+\n+/// Link to [S::ambiguous_method]\n+// FIXME: there is no way to disambiguate these.\n+// Since we have `#[deny(intra_doc_failure)]`, we still know it was one or the other.\n+pub struct S;\n+\n+impl T1 for S {\n+    fn ambiguous_method() {}\n+}\n+\n+impl T2 for S {\n+    fn ambiguous_method() {}\n+}\n+\n+fn main() {}"}, {"sha": "db3bb38ada0da9bda76e35202fd4fe0931e0557a", "filename": "src/test/rustdoc/intra-doc/auxiliary/intra-link-extern-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-extern-crate.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/intra-link-extern-crate.rs"}, {"sha": "a4db2ffc445f8f9562681bd7cecd275c9a83c78e", "filename": "src/test/rustdoc/intra-doc/auxiliary/intra-link-pub-use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-pub-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-pub-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-pub-use.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/intra-link-pub-use.rs"}, {"sha": "fc51995a94eccc7724f30c13a1a98f3c92269093", "filename": "src/test/rustdoc/intra-doc/auxiliary/intra-link-reexport-additional-docs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-reexport-additional-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-reexport-additional-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-link-reexport-additional-docs.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/intra-link-reexport-additional-docs.rs"}, {"sha": "6142dcda986cf0b951a30a664ce56685fa7e8349", "filename": "src/test/rustdoc/intra-doc/auxiliary/intra-links-external-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-links-external-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-links-external-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fintra-links-external-traits.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/intra-links-external-traits.rs"}, {"sha": "54e986be9eccf2b2094796f2e68a9471070a3ebb", "filename": "src/test/rustdoc/intra-doc/auxiliary/my-core.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/my-core.rs"}, {"sha": "5ba132f25b4710b6c4e0345b52193e3f8f93601e", "filename": "src/test/rustdoc/intra-doc/auxiliary/proc-macro-macro.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fproc-macro-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fproc-macro-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fproc-macro-macro.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -3,7 +3,6 @@\n // compile-flags: --crate-type proc-macro\n \n #![crate_type=\"proc-macro\"]\n-#![crate_name=\"intra_link_proc_macro_macro\"]\n \n extern crate proc_macro;\n ", "previous_filename": "src/test/rustdoc/auxiliary/intra-link-proc-macro-macro.rs"}, {"sha": "5c4a01ee3a74a5e18c59c10b6a318e73da165447", "filename": "src/test/rustdoc/intra-doc/auxiliary/through-proc-macro-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fthrough-proc-macro-aux.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/through-proc-macro-aux.rs"}, {"sha": "7760546e1fa1cf288efff0c6676ff4ba49eaca0c", "filename": "src/test/rustdoc/intra-doc/basic.rs", "status": "renamed", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbasic.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,21 +1,21 @@\n-// @has intra_links/index.html\n-// @has - '//a/@href' '../intra_links/struct.ThisType.html'\n-// @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'\n-// @has - '//a/@href' '../intra_links/trait.ThisTrait.html'\n-// @has - '//a/@href' '../intra_links/trait.ThisTrait.html#tymethod.this_associated_method'\n-// @has - '//a/@href' '../intra_links/trait.ThisTrait.html#associatedtype.ThisAssociatedType'\n-// @has - '//a/@href' '../intra_links/trait.ThisTrait.html#associatedconstant.THIS_ASSOCIATED_CONST'\n-// @has - '//a/@href' '../intra_links/trait.ThisTrait.html'\n-// @has - '//a/@href' '../intra_links/type.ThisAlias.html'\n-// @has - '//a/@href' '../intra_links/union.ThisUnion.html'\n-// @has - '//a/@href' '../intra_links/fn.this_function.html'\n-// @has - '//a/@href' '../intra_links/constant.THIS_CONST.html'\n-// @has - '//a/@href' '../intra_links/static.THIS_STATIC.html'\n-// @has - '//a/@href' '../intra_links/macro.this_macro.html'\n-// @has - '//a/@href' '../intra_links/trait.SoAmbiguous.html'\n-// @has - '//a/@href' '../intra_links/fn.SoAmbiguous.html'\n+// @has basic/index.html\n+// @has - '//a/@href' '../basic/struct.ThisType.html'\n+// @has - '//a/@href' '../basic/struct.ThisType.html#method.this_method'\n+// @has - '//a/@href' '../basic/enum.ThisEnum.html'\n+// @has - '//a/@href' '../basic/enum.ThisEnum.html#variant.ThisVariant'\n+// @has - '//a/@href' '../basic/trait.ThisTrait.html'\n+// @has - '//a/@href' '../basic/trait.ThisTrait.html#tymethod.this_associated_method'\n+// @has - '//a/@href' '../basic/trait.ThisTrait.html#associatedtype.ThisAssociatedType'\n+// @has - '//a/@href' '../basic/trait.ThisTrait.html#associatedconstant.THIS_ASSOCIATED_CONST'\n+// @has - '//a/@href' '../basic/trait.ThisTrait.html'\n+// @has - '//a/@href' '../basic/type.ThisAlias.html'\n+// @has - '//a/@href' '../basic/union.ThisUnion.html'\n+// @has - '//a/@href' '../basic/fn.this_function.html'\n+// @has - '//a/@href' '../basic/constant.THIS_CONST.html'\n+// @has - '//a/@href' '../basic/static.THIS_STATIC.html'\n+// @has - '//a/@href' '../basic/macro.this_macro.html'\n+// @has - '//a/@href' '../basic/trait.SoAmbiguous.html'\n+// @has - '//a/@href' '../basic/fn.SoAmbiguous.html'\n //! In this crate we would like to link to:\n //!\n //! * [`ThisType`](ThisType)\n@@ -46,7 +46,7 @@ macro_rules! this_macro {\n     () => {};\n }\n \n-// @has intra_links/struct.ThisType.html '//a/@href' '../intra_links/macro.this_macro.html'\n+// @has basic/struct.ThisType.html '//a/@href' '../basic/macro.this_macro.html'\n /// another link to [`this_macro!()`]\n pub struct ThisType;\n \n@@ -72,10 +72,10 @@ pub trait SoAmbiguous {}\n pub fn SoAmbiguous() {}\n \n \n-// @has intra_links/struct.SomeOtherType.html '//a/@href' '../intra_links/struct.ThisType.html'\n-// @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'\n+// @has basic/struct.SomeOtherType.html '//a/@href' '../basic/struct.ThisType.html'\n+// @has - '//a/@href' '../basic/struct.ThisType.html#method.this_method'\n+// @has - '//a/@href' '../basic/enum.ThisEnum.html'\n+// @has - '//a/@href' '../basic/enum.ThisEnum.html#variant.ThisVariant'\n /// Shortcut links for:\n /// * [`ThisType`]\n /// * [`ThisType::this_method`]", "previous_filename": "src/test/rustdoc/intra-links.rs"}, {"sha": "74216a587e1da6f30129d22bcabc81e3cad1e49f", "filename": "src/test/rustdoc/intra-doc/builtin-macros.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbuiltin-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbuiltin-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fbuiltin-macros.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,3 +1,3 @@\n-// @has intra_link_builtin_macros/index.html\n+// @has builtin_macros/index.html\n // @has - '//a/@href' 'https://doc.rust-lang.org/nightly/core/macro.cfg.html'\n //! [cfg]", "previous_filename": "src/test/rustdoc/intra-link-builtin-macros.rs"}, {"sha": "837390b3c716102a0005a5a0a4eca8169f7fd1db", "filename": "src/test/rustdoc/intra-doc/cross-crate/additional_doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fadditional_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fadditional_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fadditional_doc.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/additional_doc.rs"}, {"sha": "849d25687337b7f0af342659dc9fe893512bd783", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/additional_doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fadditional_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fadditional_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fadditional_doc.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/additional_doc.rs"}, {"sha": "b543ae764c05bb9a014c74c66007dbc4985fe6c1", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/hidden.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fhidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fhidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fhidden.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/hidden.rs"}, {"sha": "5342baecbc4b89aa16cd1b11c0cd6ea279ca4fbb", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/intra-doc-basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fintra-doc-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fintra-doc-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fintra-doc-basic.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/intra-doc-basic.rs"}, {"sha": "a37848e23d9931a27e52cb00cb230b2490fcc3e0", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/intra-link-cross-crate-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fintra-link-cross-crate-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fintra-link-cross-crate-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fintra-link-cross-crate-crate.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/auxiliary/intra-link-cross-crate-crate.rs"}, {"sha": "a94f9e5dcca2ec5421f286e3ade6932038d556d1", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/macro_inner.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fmacro_inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fmacro_inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fmacro_inner.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/macro_inner.rs"}, {"sha": "b7e3913f108f7553d089dfd1885d29f430532d56", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fmodule.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/module.rs"}, {"sha": "0d5a954075df22c24bc813c3bccd7aaf6c2ac7ca", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fproc_macro.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/proc_macro.rs"}, {"sha": "8ae0f6c16b3d8113e67d8412c2207b3dfe9c0297", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/submodule-inner.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fsubmodule-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fsubmodule-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fsubmodule-inner.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/submodule-inner.rs"}, {"sha": "d90c529e3855280415bf0a2a7a65fa176e2d4f74", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/submodule-outer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fsubmodule-outer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fsubmodule-outer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Fsubmodule-outer.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/submodule-outer.rs"}, {"sha": "c16e39d56f3d0d80dcb2b41e6457270ee18e0d9b", "filename": "src/test/rustdoc/intra-doc/cross-crate/auxiliary/traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fauxiliary%2Ftraits.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/auxiliary/traits.rs"}, {"sha": "6ab9140c3c385c85ae472281e65d76334df43a2b", "filename": "src/test/rustdoc/intra-doc/cross-crate/basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fbasic.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/basic.rs"}, {"sha": "edf544708b628e9bcd081f5a3a26f2bf2bdd777c", "filename": "src/test/rustdoc/intra-doc/cross-crate/crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fcrate.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-cross-crate-crate.rs"}, {"sha": "9c9d4c649455ebe3c82c1088b9d0539d3985550d", "filename": "src/test/rustdoc/intra-doc/cross-crate/hidden.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fhidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fhidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fhidden.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/hidden.rs"}, {"sha": "311b16dff13bc67260c4942d353037000e0aa209", "filename": "src/test/rustdoc/intra-doc/cross-crate/macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmacro.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/macro.rs"}, {"sha": "9039e344f7b003711a1a7a60785f29683437d235", "filename": "src/test/rustdoc/intra-doc/cross-crate/module.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fmodule.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/module.rs"}, {"sha": "e1465816368bf178ed9fd2e3b8e4faeaed08458e", "filename": "src/test/rustdoc/intra-doc/cross-crate/submodule-inner.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fsubmodule-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fsubmodule-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fsubmodule-inner.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/submodule-inner.rs"}, {"sha": "45f561328f279040293c625f41f678f86b1be403", "filename": "src/test/rustdoc/intra-doc/cross-crate/submodule-outer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fsubmodule-outer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fsubmodule-outer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Fsubmodule-outer.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/submodule-outer.rs"}, {"sha": "07decb48019da26c168cbcc031ba6df4f48e4bb7", "filename": "src/test/rustdoc/intra-doc/cross-crate/traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fcross-crate%2Ftraits.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-crate/traits.rs"}, {"sha": "aa0ced62aaf30bea333a6f35ed0582b6a41eb24d", "filename": "src/test/rustdoc/intra-doc/disambiguators-removed.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fdisambiguators-removed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fdisambiguators-removed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fdisambiguators-removed.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,51 @@\n+// ignore-tidy-linelength\n+#![deny(intra_doc_link_resolution_failure)]\n+// first try backticks\n+/// Trait: [`trait@Name`], fn: [`fn@Name`], [`Name`][`macro@Name`]\n+// @has disambiguators_removed/struct.AtDisambiguator.html\n+// @has - '//a[@href=\"../disambiguators_removed/trait.Name.html\"][code]' \"Name\"\n+// @has - '//a[@href=\"../disambiguators_removed/fn.Name.html\"][code]' \"Name\"\n+// @has - '//a[@href=\"../disambiguators_removed/macro.Name.html\"][code]' \"Name\"\n+pub struct AtDisambiguator;\n+\n+/// fn: [`Name()`], macro: [`Name!`]\n+// @has disambiguators_removed/struct.SymbolDisambiguator.html\n+// @has - '//a[@href=\"../disambiguators_removed/fn.Name.html\"][code]' \"Name()\"\n+// @has - '//a[@href=\"../disambiguators_removed/macro.Name.html\"][code]' \"Name!\"\n+pub struct SymbolDisambiguator;\n+\n+// Now make sure that backticks aren't added if they weren't already there\n+/// [fn@Name]\n+// @has disambiguators_removed/trait.Name.html\n+// @has - '//a[@href=\"../disambiguators_removed/fn.Name.html\"]' \"Name\"\n+// @!has - '//a[@href=\"../disambiguators_removed/fn.Name.html\"][code]' \"Name\"\n+\n+// FIXME: this will turn !() into ! alone\n+/// [Name!()]\n+// @has - '//a[@href=\"../disambiguators_removed/macro.Name.html\"]' \"Name!\"\n+pub trait Name {}\n+\n+#[allow(non_snake_case)]\n+\n+// Try collapsed reference links\n+/// [macro@Name][]\n+// @has disambiguators_removed/fn.Name.html\n+// @has - '//a[@href=\"../disambiguators_removed/macro.Name.html\"]' \"Name\"\n+\n+// Try links that have the same text as a generated URL\n+/// Weird URL aligned [../disambiguators_removed/macro.Name.html][trait@Name]\n+// @has - '//a[@href=\"../disambiguators_removed/trait.Name.html\"]' \"../disambiguators_removed/macro.Name.html\"\n+pub fn Name() {}\n+\n+#[macro_export]\n+// Rustdoc doesn't currently handle links that have weird interspersing of inline code blocks.\n+/// [fn@Na`m`e]\n+// @has disambiguators_removed/macro.Name.html\n+// @has - '//a[@href=\"../disambiguators_removed/fn.Name.html\"]' \"fn@Name\"\n+\n+// It also doesn't handle any case where the code block isn't the whole link text:\n+/// [trait@`Name`]\n+// @has - '//a[@href=\"../disambiguators_removed/trait.Name.html\"]' \"trait@Name\"\n+macro_rules! Name {\n+    () => ()\n+}"}, {"sha": "70bf343a9a5e5a144950de51f51e3767bce088ff", "filename": "src/test/rustdoc/intra-doc/enum-struct-field.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fenum-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fenum-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fenum-struct-field.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-link-enum-struct-field.rs"}, {"sha": "193bca704bfbdffca4c18f58a174672715aec34d", "filename": "src/test/rustdoc/intra-doc/extern-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-crate.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-extern-crate.rs"}, {"sha": "e1934698d1fadce81e0f04bed9b727333e6c0f5c", "filename": "src/test/rustdoc/intra-doc/extern-type.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,17 @@\n+#![feature(extern_types)]\n+\n+extern {\n+    pub type ExternType;\n+}\n+\n+impl ExternType {\n+    pub fn f(&self) {\n+\n+    }\n+}\n+\n+// @has 'extern_type/foreigntype.ExternType.html'\n+// @has 'extern_type/fn.links_to_extern_type.html' \\\n+// 'href=\"../extern_type/foreigntype.ExternType.html#method.f\"'\n+/// See also [ExternType::f]\n+pub fn links_to_extern_type() {}"}, {"sha": "de76f29476c66818f8268035716ea855fb9897e7", "filename": "src/test/rustdoc/intra-doc/external-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fexternal-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fexternal-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fexternal-traits.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-links-external-traits.rs"}, {"sha": "1de6410f10c430c2c4520d639349230a7f22112d", "filename": "src/test/rustdoc/intra-doc/generic-params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-params.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-link-generic-params.rs"}, {"sha": "ec965a99dc240039c4e83cb80d0e02861f32d53f", "filename": "src/test/rustdoc/intra-doc/in-bodies.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fin-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fin-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fin-bodies.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-in-bodies.rs"}, {"sha": "d0af3aec6609782384c90afa9f80d5c263f68575", "filename": "src/test/rustdoc/intra-doc/libstd-re-export.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Flibstd-re-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Flibstd-re-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Flibstd-re-export.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-libstd-re-export.rs"}, {"sha": "feb013b22be65a7569333a883aafc00350793bc1", "filename": "src/test/rustdoc/intra-doc/mod-ambiguity.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmod-ambiguity.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,16 @@\n+#![deny(broken_intra_doc_links)]\n+\n+\n+pub fn foo() {\n+\n+}\n+\n+pub mod foo {}\n+// @has mod_ambiguity/struct.A.html '//a/@href' '../mod_ambiguity/foo/index.html'\n+/// Module is [`module@foo`]\n+pub struct A;\n+\n+\n+// @has mod_ambiguity/struct.B.html '//a/@href' '../mod_ambiguity/fn.foo.html'\n+/// Function is [`fn@foo`]\n+pub struct B;"}, {"sha": "d687cbd69bb18007186c6f12566bb5efe1dd4a8a", "filename": "src/test/rustdoc/intra-doc/prim-assoc.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-assoc.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,5 @@\n+// ignore-tidy-linelength\n+#![deny(broken_intra_doc_links)]\n+\n+//! [i32::MAX]\n+// @has prim_assoc/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\"]' \"i32::MAX\""}, {"sha": "434e03389835fd552e1776d6089a3f9b0c990c3a", "filename": "src/test/rustdoc/intra-doc/prim-methods-external-core.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -9,7 +9,7 @@\n #![no_core]\n #![crate_type = \"rlib\"]\n \n-// @has intra_link_prim_methods_external_core/index.html\n+// @has prim_methods_external_core/index.html\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n ", "previous_filename": "src/test/rustdoc/intra-link-prim-methods-external-core.rs"}, {"sha": "9888f29db5bacc85cc09f2ad6ce6857513a2c0c0", "filename": "src/test/rustdoc/intra-doc/prim-methods-local.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -5,7 +5,7 @@\n \n // ignore-tidy-linelength\n \n-// @has intra_link_prim_methods_local/index.html\n+// @has prim_methods_local/index.html\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n ", "previous_filename": "src/test/rustdoc/intra-link-prim-methods-local.rs"}, {"sha": "f19cff7d34afa5d78730fc6a0da3e5738ddc3239", "filename": "src/test/rustdoc/intra-doc/prim-methods.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -2,7 +2,7 @@\n \n // ignore-tidy-linelength\n \n-// @has intra_link_prim_methods/index.html\n+// @has prim_methods/index.html\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n // @has - '//*[@id=\"main\"]//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html#method.len_utf8\"]' 'char::len_utf8'\n ", "previous_filename": "src/test/rustdoc/intra-link-prim-methods.rs"}, {"sha": "ed2c2cda7184dfa7df85be95e747d96eaec192e3", "filename": "src/test/rustdoc/intra-doc/prim-precedence.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,17 @@\n+// ignore-tidy-linelength\n+#![deny(broken_intra_doc_links)]\n+\n+pub mod char {\n+    /// [char]\n+    // @has prim_precedence/char/struct.Inner.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n+    pub struct Inner;\n+}\n+\n+/// See [prim@char]\n+// @has prim_precedence/struct.MyString.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n+pub struct MyString;\n+\n+/// See also [crate::char] and [mod@char]\n+// @has prim_precedence/struct.MyString2.html '//*[@href=\"../prim_precedence/char/index.html\"]' 'crate::char'\n+// @has - '//*[@href=\"../prim_precedence/char/index.html\"]' 'mod@char'\n+pub struct MyString2;"}, {"sha": "548eb090a32762267f0f5248971faadf6484db47", "filename": "src/test/rustdoc/intra-doc/primitive-non-default-impl.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-non-default-impl.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -2,7 +2,7 @@\n \n // ignore-tidy-linelength\n \n-// @has intra_link_primitive_non_default_impl/fn.str_methods.html\n+// @has primitive_non_default_impl/fn.str_methods.html\n /// [`str::trim`]\n // @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim\"]' 'str::trim'\n /// [`str::to_lowercase`]\n@@ -13,7 +13,7 @@\n // @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.replace\"]' 'str::replace'\n pub fn str_methods() {}\n \n-// @has intra_link_primitive_non_default_impl/fn.f32_methods.html\n+// @has primitive_non_default_impl/fn.f32_methods.html\n /// [f32::powi]\n // @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.powi\"]' 'f32::powi'\n /// [f32::sqrt]\n@@ -22,7 +22,7 @@ pub fn str_methods() {}\n // @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.mul_add\"]' 'f32::mul_add'\n pub fn f32_methods() {}\n \n-// @has intra_link_primitive_non_default_impl/fn.f64_methods.html\n+// @has primitive_non_default_impl/fn.f64_methods.html\n /// [`f64::powi`]\n // @has - '//*[@href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html#method.powi\"]' 'f64::powi'\n /// [`f64::sqrt`]", "previous_filename": "src/test/rustdoc/intra-link-primitive-non-default-impl.rs"}, {"sha": "cf8bc0b15869f469a97066101c0ed14a5851dfce", "filename": "src/test/rustdoc/intra-doc/private-failures-ignored.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprivate-failures-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprivate-failures-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprivate-failures-ignored.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-private.rs"}, {"sha": "f86ca44403d93e42ae9b752d7bb3fdc588263ded", "filename": "src/test/rustdoc/intra-doc/private.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprivate.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-link-private.rs"}, {"sha": "ab4626ccfc3abfd4e46d87427a03f358d7035481", "filename": "src/test/rustdoc/intra-doc/proc-macro.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fproc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fproc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fproc-macro.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -0,0 +1,27 @@\n+// aux-build:proc-macro-macro.rs\n+// build-aux-docs\n+#![deny(broken_intra_doc_links)]\n+\n+extern crate proc_macro_macro;\n+\n+\n+pub use proc_macro_macro::{DeriveA, attr_a};\n+use proc_macro_macro::{DeriveB, attr_b};\n+\n+// @has proc_macro/struct.Foo.html\n+// @has - '//a/@href' '../proc_macro/derive.DeriveA.html'\n+// @has - '//a/@href' '../proc_macro/attr.attr_a.html'\n+// @has - '//a/@href' '../proc_macro/trait.DeriveTrait.html'\n+// @has - '//a/@href' '../proc_macro_macro/derive.DeriveB.html'\n+// @has - '//a/@href' '../proc_macro_macro/attr.attr_b.html'\n+/// Link to [DeriveA], [attr_a], [DeriveB], [attr_b], [DeriveTrait]\n+pub struct Foo;\n+\n+// @has proc_macro/struct.Bar.html\n+// @has - '//a/@href' '../proc_macro/derive.DeriveA.html'\n+// @has - '//a/@href' '../proc_macro/attr.attr_a.html'\n+/// Link to [deriveA](derive@DeriveA) [attr](macro@attr_a)\n+pub struct Bar;\n+\n+// this should not cause ambiguity errors\n+pub trait DeriveTrait {}"}, {"sha": "dd52249abc6d0ad27cab524bd0c82325ba7fa7e5", "filename": "src/test/rustdoc/intra-doc/pub-use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fpub-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fpub-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fpub-use.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-pub-use.rs"}, {"sha": "96f3580f3055e8e2405fbfb5627c4c59ecb42f65", "filename": "src/test/rustdoc/intra-doc/reexport-additional-docs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Freexport-additional-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Freexport-additional-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Freexport-additional-docs.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-reexport-additional-docs.rs"}, {"sha": "81545fec7411bc0654e6bf399f135759f6e5f1e8", "filename": "src/test/rustdoc/intra-doc/self.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-self.rs"}, {"sha": "613410871f0d1c237e56b76ab59d81124cbbbfd5", "filename": "src/test/rustdoc/intra-doc/through-proc-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fthrough-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Fthrough-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fthrough-proc-macro.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/through-proc-macro.rs"}, {"sha": "fab8406d525e5f83ca18ccd341b735ae2ad05d08", "filename": "src/test/rustdoc/intra-doc/trait-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-impl.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-link-trait-impl.rs"}, {"sha": "de8585f4c9a781e9ea8b2541591234db95f94209", "filename": "src/test/rustdoc/intra-doc/trait-item.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrait-item.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -3,7 +3,7 @@\n \n /// Link to [S::assoc_fn()]\n /// Link to [Default::default()]\n-// @has intra_link_trait_item/struct.S.html '//*[@href=\"../intra_link_trait_item/struct.S.html#method.assoc_fn\"]' 'S::assoc_fn()'\n+// @has trait_item/struct.S.html '//*[@href=\"../trait_item/struct.S.html#method.assoc_fn\"]' 'S::assoc_fn()'\n // @has - '//*[@href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\"]' 'Default::default()'\n pub struct S;\n ", "previous_filename": "src/test/rustdoc/intra-link-trait-item.rs"}, {"sha": "7b21e9341474032b84064337a3d4280ea20b5752", "filename": "src/test/rustdoc/intra-doc/true-false.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftrue-false.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "previous_filename": "src/test/rustdoc/intra-doc-link-true-false.rs"}, {"sha": "2051129b948f3ca71170ee2ed02ca09cbd1dfefc", "filename": "src/test/rustdoc/intra-link-associated-defaults.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-associated-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-associated-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-associated-defaults.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,27 +0,0 @@\n-// ignore-tidy-linelength\n-#![deny(intra_doc_link_resolution_failure)]\n-#![feature(associated_type_defaults)]\n-\n-pub trait TraitWithDefault {\n-    type T = usize;\n-    fn f() -> Self::T {\n-        0\n-    }\n-}\n-\n-/// Link to [UsesDefaults::T] and [UsesDefaults::f]\n-// @has 'intra_link_associated_defaults/struct.UsesDefaults.html' '//a[@href=\"../intra_link_associated_defaults/struct.UsesDefaults.html#associatedtype.T\"]' 'UsesDefaults::T'\n-// @has 'intra_link_associated_defaults/struct.UsesDefaults.html' '//a[@href=\"../intra_link_associated_defaults/struct.UsesDefaults.html#method.f\"]' 'UsesDefaults::f'\n-pub struct UsesDefaults;\n-impl TraitWithDefault for UsesDefaults {}\n-\n-/// Link to [OverridesDefaults::T] and [OverridesDefaults::f]\n-// @has 'intra_link_associated_defaults/struct.OverridesDefaults.html' '//a[@href=\"../intra_link_associated_defaults/struct.OverridesDefaults.html#associatedtype.T\"]' 'OverridesDefaults::T'\n-// @has 'intra_link_associated_defaults/struct.OverridesDefaults.html' '//a[@href=\"../intra_link_associated_defaults/struct.OverridesDefaults.html#method.f\"]' 'OverridesDefaults::f'\n-pub struct OverridesDefaults;\n-impl TraitWithDefault for OverridesDefaults {\n-    type T = bool;\n-    fn f() -> bool {\n-        true\n-    }\n-}"}, {"sha": "daf7075a91740359157af834bb7b50b42447d0c3", "filename": "src/test/rustdoc/intra-link-associated-items.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-associated-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-associated-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-associated-items.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,61 +0,0 @@\n-// ignore-tidy-linelength\n-#![deny(intra_doc_link_resolution_failure)]\n-\n-/// [`std::collections::BTreeMap::into_iter`]\n-/// [`String::from`] is ambiguous as to which `From` impl\n-/// [Vec::into_iter()] uses a disambiguator\n-// @has 'intra_link_associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html#method.into_iter\"]' 'std::collections::BTreeMap::into_iter'\n-// @has 'intra_link_associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html#method.from\"]' 'String::from'\n-// @has 'intra_link_associated_items/fn.foo.html' '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html#method.into_iter\"]' 'Vec::into_iter'\n-pub fn foo() {}\n-\n-/// Link to [MyStruct], [link from struct][MyStruct::method], [MyStruct::clone], [MyStruct::Input]\n-// @has 'intra_link_associated_items/struct.MyStruct.html' '//a[@href=\"../intra_link_associated_items/struct.MyStruct.html\"]' 'MyStruct'\n-// @has 'intra_link_associated_items/struct.MyStruct.html' '//a[@href=\"../intra_link_associated_items/struct.MyStruct.html#method.method\"]' 'link from struct'\n-// @has 'intra_link_associated_items/struct.MyStruct.html' '//a[@href=\"../intra_link_associated_items/struct.MyStruct.html#method.clone\"]' 'MyStruct::clone'\n-// @has 'intra_link_associated_items/struct.MyStruct.html' '//a[@href=\"../intra_link_associated_items/struct.MyStruct.html#associatedtype.Input\"]' 'MyStruct::Input'\n-pub struct MyStruct { foo: () }\n-\n-impl Clone for MyStruct {\n-    fn clone(&self) -> Self {\n-        MyStruct\n-    }\n-}\n-\n-pub trait T {\n-    type Input;\n-    fn method(i: Self::Input);\n-}\n-\n-impl T for MyStruct {\n-    type Input = usize;\n-\n-    /// [link from method][MyStruct::method] on method\n-    // @has 'intra_link_associated_items/struct.MyStruct.html' '//a[@href=\"../intra_link_associated_items/struct.MyStruct.html#method.method\"]' 'link from method'\n-    fn method(i: usize) {\n-    }\n-}\n-\n-/// Ambiguity between which trait to use\n-pub trait T1 {\n-    fn ambiguous_method();\n-}\n-\n-pub trait T2 {\n-    fn ambiguous_method();\n-}\n-\n-/// Link to [S::ambiguous_method]\n-// FIXME: there is no way to disambiguate these.\n-// Since we have `#[deny(intra_doc_failure)]`, we still know it was one or the other.\n-pub struct S;\n-\n-impl T1 for S {\n-    fn ambiguous_method() {}\n-}\n-\n-impl T2 for S {\n-    fn ambiguous_method() {}\n-}\n-\n-fn main() {}"}, {"sha": "26d05b484b919b73ec6b0729eecfae0038b0d815", "filename": "src/test/rustdoc/intra-link-disambiguators-removed.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-disambiguators-removed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-disambiguators-removed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-disambiguators-removed.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,51 +0,0 @@\n-// ignore-tidy-linelength\n-#![deny(intra_doc_link_resolution_failure)]\n-// first try backticks\n-/// Trait: [`trait@Name`], fn: [`fn@Name`], [`Name`][`macro@Name`]\n-// @has intra_link_disambiguators_removed/struct.AtDisambiguator.html\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/trait.Name.html\"][code]' \"Name\"\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/fn.Name.html\"][code]' \"Name\"\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/macro.Name.html\"][code]' \"Name\"\n-pub struct AtDisambiguator;\n-\n-/// fn: [`Name()`], macro: [`Name!`]\n-// @has intra_link_disambiguators_removed/struct.SymbolDisambiguator.html\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/fn.Name.html\"][code]' \"Name()\"\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/macro.Name.html\"][code]' \"Name!\"\n-pub struct SymbolDisambiguator;\n-\n-// Now make sure that backticks aren't added if they weren't already there\n-/// [fn@Name]\n-// @has intra_link_disambiguators_removed/trait.Name.html\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/fn.Name.html\"]' \"Name\"\n-// @!has - '//a[@href=\"../intra_link_disambiguators_removed/fn.Name.html\"][code]' \"Name\"\n-\n-// FIXME: this will turn !() into ! alone\n-/// [Name!()]\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/macro.Name.html\"]' \"Name!\"\n-pub trait Name {}\n-\n-#[allow(non_snake_case)]\n-\n-// Try collapsed reference links\n-/// [macro@Name][]\n-// @has intra_link_disambiguators_removed/fn.Name.html\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/macro.Name.html\"]' \"Name\"\n-\n-// Try links that have the same text as a generated URL\n-/// Weird URL aligned [../intra_link_disambiguators_removed/macro.Name.html][trait@Name]\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/trait.Name.html\"]' \"../intra_link_disambiguators_removed/macro.Name.html\"\n-pub fn Name() {}\n-\n-#[macro_export]\n-// Rustdoc doesn't currently handle links that have weird interspersing of inline code blocks.\n-/// [fn@Na`m`e]\n-// @has intra_link_disambiguators_removed/macro.Name.html\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/fn.Name.html\"]' \"fn@Name\"\n-\n-// It also doesn't handle any case where the code block isn't the whole link text:\n-/// [trait@`Name`]\n-// @has - '//a[@href=\"../intra_link_disambiguators_removed/trait.Name.html\"]' \"trait@Name\"\n-macro_rules! Name {\n-    () => ()\n-}"}, {"sha": "418e0d91ea7ef8afa16d94071f67ff30caf354c1", "filename": "src/test/rustdoc/intra-link-extern-type.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-extern-type.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,18 +0,0 @@\n-#![feature(extern_types)]\n-\n-extern {\n-    pub type ExternType;\n-}\n-\n-impl ExternType {\n-    pub fn f(&self) {\n-\n-    }\n-}\n-\n-// @has 'intra_link_extern_type/foreigntype.ExternType.html'\n-// @has 'intra_link_extern_type/fn.links_to_extern_type.html' \\\n-// 'href=\"../intra_link_extern_type/foreigntype.ExternType.html#method.f\"'\n-/// See also [ExternType::f]\n-pub fn links_to_extern_type() {\n-}"}, {"sha": "c0066885e19910dea807da1e54295e3bf374b30f", "filename": "src/test/rustdoc/intra-link-prim-assoc.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-prim-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-prim-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-assoc.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,5 +0,0 @@\n-// ignore-tidy-linelength\n-#![deny(broken_intra_doc_links)]\n-\n-//! [i32::MAX]\n-// @has intra_link_prim_assoc/index.html '//a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html#associatedconstant.MAX\"]' \"i32::MAX\""}, {"sha": "0a4e57ef643e7824145262785828b4f9216192f0", "filename": "src/test/rustdoc/intra-link-prim-precedence.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,17 +0,0 @@\n-// ignore-tidy-linelength\n-#![deny(broken_intra_doc_links)]\n-\n-pub mod char {\n-    /// [char]\n-    // @has intra_link_prim_precedence/char/struct.Inner.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n-    pub struct Inner;\n-}\n-\n-/// See [prim@char]\n-// @has intra_link_prim_precedence/struct.MyString.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n-pub struct MyString;\n-\n-/// See also [crate::char] and [mod@char]\n-// @has intra_link_prim_precedence/struct.MyString2.html '//*[@href=\"../intra_link_prim_precedence/char/index.html\"]' 'crate::char'\n-// @has - '//*[@href=\"../intra_link_prim_precedence/char/index.html\"]' 'mod@char'\n-pub struct MyString2;"}, {"sha": "7a8403255edb65fd058a89725d28c413f4acae1b", "filename": "src/test/rustdoc/intra-link-proc-macro.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Frustdoc%2Fintra-link-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-proc-macro.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,27 +0,0 @@\n-// aux-build:intra-link-proc-macro-macro.rs\n-// build-aux-docs\n-#![deny(broken_intra_doc_links)]\n-\n-extern crate intra_link_proc_macro_macro;\n-\n-\n-pub use intra_link_proc_macro_macro::{DeriveA, attr_a};\n-use intra_link_proc_macro_macro::{DeriveB, attr_b};\n-\n-// @has intra_link_proc_macro/struct.Foo.html\n-// @has - '//a/@href' '../intra_link_proc_macro/derive.DeriveA.html'\n-// @has - '//a/@href' '../intra_link_proc_macro/attr.attr_a.html'\n-// @has - '//a/@href' '../intra_link_proc_macro/trait.DeriveTrait.html'\n-// @has - '//a/@href' '../intra_link_proc_macro_macro/derive.DeriveB.html'\n-// @has - '//a/@href' '../intra_link_proc_macro_macro/attr.attr_b.html'\n-/// Link to [DeriveA], [attr_a], [DeriveB], [attr_b], [DeriveTrait]\n-pub struct Foo;\n-\n-// @has intra_link_proc_macro/struct.Bar.html\n-// @has - '//a/@href' '../intra_link_proc_macro/derive.DeriveA.html'\n-// @has - '//a/@href' '../intra_link_proc_macro/attr.attr_a.html'\n-/// Link to [deriveA](derive@DeriveA) [attr](macro@attr_a)\n-pub struct Bar;\n-\n-// this should not cause ambiguity errors\n-pub trait DeriveTrait {}"}, {"sha": "ad1a868ee32b8ddfc6e8748a7480aa3a5652d58b", "filename": "src/test/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnormalize-assoc-item.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n // aux-build:normalize-assoc-item.rs\n // build-aux-docs\n-// ignore-test\n+// compile-flags:-Znormalize-docs\n \n pub trait Trait {\n     type X;"}, {"sha": "7071f80d7f7babc5131db864b7a9f14cb9749251", "filename": "src/test/ui/assert-eq-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fassert-eq-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fassert-eq-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassert-eq-trailing-comma.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,5 +0,0 @@\n-// run-pass\n-\n-fn main() {\n-    assert_eq!(1, 1,);\n-}"}, {"sha": "00e51d42cab9e06a1992e73d5cfdc836dd94f26f", "filename": "src/test/ui/assert-escape.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fassert-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fassert-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassert-escape.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,5 +0,0 @@\n-// run-pass\n-\n-fn main() {\n-    assert!(r#\"\u2603\\backslash\"#.contains(\"\\\\\"));\n-}"}, {"sha": "03308db9a1feec614f266d4d32fb88e0384683b5", "filename": "src/test/ui/assert-ne-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fassert-ne-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fassert-ne-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassert-ne-trailing-comma.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,5 +0,0 @@\n-// run-pass\n-\n-fn main() {\n-    assert_ne!(1, 2,);\n-}"}, {"sha": "e9d48bb3b43d82057c1210bbdbeea984b208a171", "filename": "src/test/ui/atomic-access-bool.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fatomic-access-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fatomic-access-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fatomic-access-bool.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,24 +0,0 @@\n-// run-pass\n-\n-#![allow(stable_features)]\n-#![feature(atomic_access)]\n-use std::sync::atomic::AtomicBool;\n-use std::sync::atomic::Ordering::*;\n-\n-static mut ATOMIC: AtomicBool = AtomicBool::new(false);\n-\n-fn main() {\n-    unsafe {\n-        assert_eq!(*ATOMIC.get_mut(), false);\n-        ATOMIC.store(true, SeqCst);\n-        assert_eq!(*ATOMIC.get_mut(), true);\n-        ATOMIC.fetch_or(false, SeqCst);\n-        assert_eq!(*ATOMIC.get_mut(), true);\n-        ATOMIC.fetch_and(false, SeqCst);\n-        assert_eq!(*ATOMIC.get_mut(), false);\n-        ATOMIC.fetch_nand(true, SeqCst);\n-        assert_eq!(*ATOMIC.get_mut(), true);\n-        ATOMIC.fetch_xor(true, SeqCst);\n-        assert_eq!(*ATOMIC.get_mut(), false);\n-    }\n-}"}, {"sha": "5bda90d2eab02a36e9c4685f225a4674ff2ea3ad", "filename": "src/test/ui/atomic-alignment.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fatomic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fatomic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fatomic-alignment.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,38 +0,0 @@\n-// run-pass\n-\n-#![feature(cfg_target_has_atomic)]\n-#![feature(integer_atomics)]\n-\n-use std::mem::{align_of, size_of};\n-use std::sync::atomic::*;\n-\n-fn main() {\n-    #[cfg(target_has_atomic = \"8\")]\n-    assert_eq!(align_of::<AtomicBool>(), size_of::<AtomicBool>());\n-    #[cfg(target_has_atomic = \"ptr\")]\n-    assert_eq!(align_of::<AtomicPtr<u8>>(), size_of::<AtomicPtr<u8>>());\n-    #[cfg(target_has_atomic = \"8\")]\n-    assert_eq!(align_of::<AtomicU8>(), size_of::<AtomicU8>());\n-    #[cfg(target_has_atomic = \"8\")]\n-    assert_eq!(align_of::<AtomicI8>(), size_of::<AtomicI8>());\n-    #[cfg(target_has_atomic = \"16\")]\n-    assert_eq!(align_of::<AtomicU16>(), size_of::<AtomicU16>());\n-    #[cfg(target_has_atomic = \"16\")]\n-    assert_eq!(align_of::<AtomicI16>(), size_of::<AtomicI16>());\n-    #[cfg(target_has_atomic = \"32\")]\n-    assert_eq!(align_of::<AtomicU32>(), size_of::<AtomicU32>());\n-    #[cfg(target_has_atomic = \"32\")]\n-    assert_eq!(align_of::<AtomicI32>(), size_of::<AtomicI32>());\n-    #[cfg(target_has_atomic = \"64\")]\n-    assert_eq!(align_of::<AtomicU64>(), size_of::<AtomicU64>());\n-    #[cfg(target_has_atomic = \"64\")]\n-    assert_eq!(align_of::<AtomicI64>(), size_of::<AtomicI64>());\n-    #[cfg(target_has_atomic = \"128\")]\n-    assert_eq!(align_of::<AtomicU128>(), size_of::<AtomicU128>());\n-    #[cfg(target_has_atomic = \"128\")]\n-    assert_eq!(align_of::<AtomicI128>(), size_of::<AtomicI128>());\n-    #[cfg(target_has_atomic = \"ptr\")]\n-    assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n-    #[cfg(target_has_atomic = \"ptr\")]\n-    assert_eq!(align_of::<AtomicIsize>(), size_of::<AtomicIsize>());\n-}"}, {"sha": "9b327eef3c8946be9c4815b7870e679be9073e5a", "filename": "src/test/ui/atomic-compare_exchange.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fatomic-compare_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fatomic-compare_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fatomic-compare_exchange.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-\n-#![allow(stable_features)]\n-\n-#![feature(extended_compare_and_swap)]\n-use std::sync::atomic::AtomicIsize;\n-use std::sync::atomic::Ordering::*;\n-\n-static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n-\n-fn main() {\n-    // Make sure codegen can emit all the intrinsics correctly\n-    ATOMIC.compare_exchange(0, 1, Relaxed, Relaxed).ok();\n-    ATOMIC.compare_exchange(0, 1, Acquire, Relaxed).ok();\n-    ATOMIC.compare_exchange(0, 1, Release, Relaxed).ok();\n-    ATOMIC.compare_exchange(0, 1, AcqRel, Relaxed).ok();\n-    ATOMIC.compare_exchange(0, 1, SeqCst, Relaxed).ok();\n-    ATOMIC.compare_exchange(0, 1, Acquire, Acquire).ok();\n-    ATOMIC.compare_exchange(0, 1, AcqRel, Acquire).ok();\n-    ATOMIC.compare_exchange(0, 1, SeqCst, Acquire).ok();\n-    ATOMIC.compare_exchange(0, 1, SeqCst, SeqCst).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, Relaxed, Relaxed).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, Acquire, Relaxed).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Relaxed).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Relaxed).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, Acquire, Acquire).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Acquire).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Acquire).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n-}"}, {"sha": "84713d6818a3ecc30e8be933d91b54842c5f8f79", "filename": "src/test/ui/bool-not.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fbool-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fbool-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbool-not.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,6 +0,0 @@\n-// run-pass\n-\n-pub fn main() {\n-    if !false { assert!((true)); } else { assert!((false)); }\n-    if !true { assert!((false)); } else { assert!((true)); }\n-}"}, {"sha": "92f36c8fd25ad418aa33dbe011a5b5df0609246f", "filename": "src/test/ui/bool.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbool.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,72 +0,0 @@\n-// run-pass\n-// Basic boolean tests\n-\n-\n-use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::ops::{BitAnd, BitOr, BitXor};\n-\n-fn main() {\n-    assert_eq!(false.eq(&true), false);\n-    assert_eq!(false == false, true);\n-    assert_eq!(false != true, true);\n-    assert_eq!(false.ne(&false), false);\n-\n-    assert_eq!(false.bitand(false), false);\n-    assert_eq!(true.bitand(false), false);\n-    assert_eq!(false.bitand(true), false);\n-    assert_eq!(true.bitand(true), true);\n-\n-    assert_eq!(false & false, false);\n-    assert_eq!(true & false, false);\n-    assert_eq!(false & true, false);\n-    assert_eq!(true & true, true);\n-\n-    assert_eq!(false.bitor(false), false);\n-    assert_eq!(true.bitor(false), true);\n-    assert_eq!(false.bitor(true), true);\n-    assert_eq!(true.bitor(true), true);\n-\n-    assert_eq!(false | false, false);\n-    assert_eq!(true | false, true);\n-    assert_eq!(false | true, true);\n-    assert_eq!(true | true, true);\n-\n-    assert_eq!(false.bitxor(false), false);\n-    assert_eq!(true.bitxor(false), true);\n-    assert_eq!(false.bitxor(true), true);\n-    assert_eq!(true.bitxor(true), false);\n-\n-    assert_eq!(false ^ false, false);\n-    assert_eq!(true ^ false, true);\n-    assert_eq!(false ^ true, true);\n-    assert_eq!(true ^ true, false);\n-\n-    assert_eq!(!true, false);\n-    assert_eq!(!false, true);\n-\n-    let s = false.to_string();\n-    assert_eq!(s, \"false\");\n-    let s = true.to_string();\n-    assert_eq!(s, \"true\");\n-\n-    assert!(true > false);\n-    assert!(!(false > true));\n-\n-    assert!(false < true);\n-    assert!(!(true < false));\n-\n-    assert!(false <= false);\n-    assert!(false >= false);\n-    assert!(true <= true);\n-    assert!(true >= true);\n-\n-    assert!(false <= true);\n-    assert!(!(false >= true));\n-    assert!(true >= false);\n-    assert!(!(true <= false));\n-\n-    assert_eq!(true.cmp(&true), Equal);\n-    assert_eq!(false.cmp(&false), Equal);\n-    assert_eq!(true.cmp(&false), Greater);\n-    assert_eq!(false.cmp(&true), Less);\n-}"}, {"sha": "65dda47066f4eac62a56a73010e2b9d046d438dc", "filename": "src/test/ui/char_unicode.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fchar_unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fchar_unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchar_unicode.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-\n-/// Tests access to the Unicode version constant.\n-pub fn main() {\n-    check(std::char::UNICODE_VERSION);\n-}\n-\n-pub fn check(unicode_version: (u8, u8, u8)) {\n-    assert!(unicode_version.0 >= 10);\n-}"}, {"sha": "bb5c39f5cdea9737b078f0b35cfa19846c89a958", "filename": "src/test/ui/cmp-default.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmp-default.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,73 +0,0 @@\n-// run-pass\n-\n-use std::cmp::Ordering;\n-\n-// Test default methods in PartialOrd and PartialEq\n-//\n-#[derive(Debug)]\n-struct Fool(bool);\n-\n-impl PartialEq for Fool {\n-    fn eq(&self, other: &Fool) -> bool {\n-        let Fool(this) = *self;\n-        let Fool(other) = *other;\n-        this != other\n-    }\n-}\n-\n-struct Int(isize);\n-\n-impl PartialEq for Int {\n-    fn eq(&self, other: &Int) -> bool {\n-        let Int(this) = *self;\n-        let Int(other) = *other;\n-        this == other\n-    }\n-}\n-\n-impl PartialOrd for Int {\n-    fn partial_cmp(&self, other: &Int) -> Option<Ordering> {\n-        let Int(this) = *self;\n-        let Int(other) = *other;\n-        this.partial_cmp(&other)\n-    }\n-}\n-\n-struct RevInt(isize);\n-\n-impl PartialEq for RevInt {\n-    fn eq(&self, other: &RevInt) -> bool {\n-        let RevInt(this) = *self;\n-        let RevInt(other) = *other;\n-        this == other\n-    }\n-}\n-\n-impl PartialOrd for RevInt {\n-    fn partial_cmp(&self, other: &RevInt) -> Option<Ordering> {\n-        let RevInt(this) = *self;\n-        let RevInt(other) = *other;\n-        other.partial_cmp(&this)\n-    }\n-}\n-\n-pub fn main() {\n-    assert!(Int(2) >  Int(1));\n-    assert!(Int(2) >= Int(1));\n-    assert!(Int(1) >= Int(1));\n-    assert!(Int(1) <  Int(2));\n-    assert!(Int(1) <= Int(2));\n-    assert!(Int(1) <= Int(1));\n-\n-    assert!(RevInt(2) <  RevInt(1));\n-    assert!(RevInt(2) <= RevInt(1));\n-    assert!(RevInt(1) <= RevInt(1));\n-    assert!(RevInt(1) >  RevInt(2));\n-    assert!(RevInt(1) >= RevInt(2));\n-    assert!(RevInt(1) >= RevInt(1));\n-\n-    assert_eq!(Fool(true), Fool(false));\n-    assert!(Fool(true)  != Fool(true));\n-    assert!(Fool(false) != Fool(false));\n-    assert_eq!(Fool(false), Fool(true));\n-}"}, {"sha": "ef2f7322f2718941fb27767fb5d3b4efa84b1aee", "filename": "src/test/ui/consts/ascii_ctype.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,53 +0,0 @@\n-// run-pass\n-\n-macro_rules! suite {\n-    ( $( $fn:ident => [$a:ident, $A:ident, $nine:ident, $dot:ident, $space:ident]; )* ) => {\n-        $(\n-            mod $fn {\n-                const CHAR_A_LOWER: bool = 'a'.$fn();\n-                const CHAR_A_UPPER: bool = 'A'.$fn();\n-                const CHAR_NINE: bool = '9'.$fn();\n-                const CHAR_DOT: bool = '.'.$fn();\n-                const CHAR_SPACE: bool = ' '.$fn();\n-\n-                const U8_A_LOWER: bool = b'a'.$fn();\n-                const U8_A_UPPER: bool = b'A'.$fn();\n-                const U8_NINE: bool = b'9'.$fn();\n-                const U8_DOT: bool = b'.'.$fn();\n-                const U8_SPACE: bool = b' '.$fn();\n-\n-                pub fn run() {\n-                    assert_eq!(CHAR_A_LOWER, $a);\n-                    assert_eq!(CHAR_A_UPPER, $A);\n-                    assert_eq!(CHAR_NINE, $nine);\n-                    assert_eq!(CHAR_DOT, $dot);\n-                    assert_eq!(CHAR_SPACE, $space);\n-\n-                    assert_eq!(U8_A_LOWER, $a);\n-                    assert_eq!(U8_A_UPPER, $A);\n-                    assert_eq!(U8_NINE, $nine);\n-                    assert_eq!(U8_DOT, $dot);\n-                    assert_eq!(U8_SPACE, $space);\n-                }\n-            }\n-        )*\n-\n-        fn main() {\n-            $( $fn::run(); )*\n-        }\n-    }\n-}\n-\n-suite! {\n-    //                        'a'    'A'    '9'    '.'    ' '\n-    is_ascii_alphabetic   => [true,  true,  false, false, false];\n-    is_ascii_uppercase    => [false, true,  false, false, false];\n-    is_ascii_lowercase    => [true,  false, false, false, false];\n-    is_ascii_alphanumeric => [true,  true,  true,  false, false];\n-    is_ascii_digit        => [false, false, true,  false, false];\n-    is_ascii_hexdigit     => [true,  true,  true,  false, false];\n-    is_ascii_punctuation  => [false, false, false, true,  false];\n-    is_ascii_graphic      => [true,  true,  true,  true,  false];\n-    is_ascii_whitespace   => [false, false, false, false, true];\n-    is_ascii_control      => [false, false, false, false, false];\n-}"}, {"sha": "30e7e102b863583b54058f83d243c4582a6e7080", "filename": "src/test/ui/consts/const-fn-feature-flags.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-feature-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-feature-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-feature-flags.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-// Test use of stabilized const fns in std formerly using individual feature gates.\n-\n-use std::cell::Cell;\n-\n-const CELL: Cell<i32> = Cell::new(42);\n-\n-fn main() {\n-    let v = CELL.get();\n-    CELL.set(v+1);\n-\n-    assert_eq!(CELL.get(), v);\n-}"}, {"sha": "56fd9d9f55ffcaa0b27b54a86c8c92667eb15e2c", "filename": "src/test/ui/consts/const-str-ptr.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-str-ptr.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,17 +0,0 @@\n-// run-pass\n-#![allow(unused_imports)]\n-use std::{str, string};\n-\n-const A: [u8; 2] = ['h' as u8, 'i' as u8];\n-const B: &'static [u8; 2] = &A;\n-const C: *const u8 = B as *const u8;\n-\n-pub fn main() {\n-    unsafe {\n-        let foo = &A as *const u8;\n-        assert_eq!(foo, C);\n-        assert_eq!(str::from_utf8_unchecked(&A), \"hi\");\n-        assert_eq!(*C, A[0]);\n-        assert_eq!(*(&B[0] as *const u8), A[0]);\n-    }\n-}"}, {"sha": "6730946577d515e6fc8522e66731c57548560d46", "filename": "src/test/ui/consts/std/net/ip.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fip.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-\n-use std::net::{IpAddr, Ipv4Addr};\n-\n-fn main() {\n-    const IP_ADDRESS : IpAddr = IpAddr::V4(Ipv4Addr::LOCALHOST);\n-\n-    const IS_IP_V4 : bool = IP_ADDRESS.is_ipv4();\n-    assert!(IS_IP_V4);\n-\n-    const IS_IP_V6 : bool = IP_ADDRESS.is_ipv6();\n-    assert!(!IS_IP_V6);\n-}"}, {"sha": "a6df5495a27758ae20c696438dd1875c6b2740ff", "filename": "src/test/ui/deref-mut-on-ref.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-mut-on-ref.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-// Test that `&mut T` implements `DerefMut<T>`\n-\n-\n-use std::ops::{Deref, DerefMut};\n-\n-fn inc<T: Deref<Target=isize> + DerefMut>(mut t: T) {\n-    *t += 1;\n-}\n-\n-fn main() {\n-    let mut x: isize = 5;\n-    inc(&mut x);\n-    assert_eq!(x, 6);\n-}"}, {"sha": "973e61c9d59fa4ff8f11e0f8ed3287b10db9c7da", "filename": "src/test/ui/deref-on-ref.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-on-ref.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,19 +0,0 @@\n-// run-pass\n-// Test that `&T` and `&mut T` implement `Deref<T>`\n-\n-\n-use std::ops::Deref;\n-\n-fn deref<U:Copy,T:Deref<Target=U>>(t: T) -> U {\n-    *t\n-}\n-\n-fn main() {\n-    let x: isize = 3;\n-    let y = deref(&x);\n-    assert_eq!(y, 3);\n-\n-    let mut x: isize = 4;\n-    let y = deref(&mut x);\n-    assert_eq!(y, 4);\n-}"}, {"sha": "c597b4732d15861c52035059abcc39570fd46d1b", "filename": "src/test/ui/env-home-dir.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenv-home-dir.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,50 +0,0 @@\n-// run-pass\n-\n-#![allow(unused_variables)]\n-#![allow(deprecated)]\n-// ignore-emscripten env vars don't work?\n-// ignore-sgx env vars cannot be modified\n-\n-use std::env::*;\n-use std::path::PathBuf;\n-\n-#[cfg(unix)]\n-fn main() {\n-    let oldhome = var(\"HOME\");\n-\n-    set_var(\"HOME\", \"/home/MountainView\");\n-    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n-\n-    remove_var(\"HOME\");\n-    if cfg!(target_os = \"android\") {\n-        assert!(home_dir().is_none());\n-    } else {\n-        // When HOME is not set, some platforms return `None`,\n-        // but others return `Some` with a default.\n-        // Just check that it is not \"/home/MountainView\".\n-        assert_ne!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n-    }\n-}\n-\n-#[cfg(windows)]\n-fn main() {\n-    let oldhome = var(\"HOME\");\n-    let olduserprofile = var(\"USERPROFILE\");\n-\n-    remove_var(\"HOME\");\n-    remove_var(\"USERPROFILE\");\n-\n-    assert!(home_dir().is_some());\n-\n-    set_var(\"HOME\", \"/home/MountainView\");\n-    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n-\n-    remove_var(\"HOME\");\n-\n-    set_var(\"USERPROFILE\", \"/home/MountainView\");\n-    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n-\n-    set_var(\"HOME\", \"/home/MountainView\");\n-    set_var(\"USERPROFILE\", \"/home/PaloAlto\");\n-    assert_eq!(home_dir(), Some(PathBuf::from(\"/home/MountainView\")));\n-}"}, {"sha": "01d743f70bc0a72472b0117304a893fa3a1288ac", "filename": "src/test/ui/extend-for-unit.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fextend-for-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fextend-for-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextend-for-unit.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-\n-pub fn main() {\n-    let mut x = 0;\n-    {\n-        let iter = (0..5).map(|_| {\n-            x += 1;\n-        });\n-        ().extend(iter);\n-    }\n-    assert_eq!(x, 5);\n-}"}, {"sha": "aa59c119706ea690ad56a1288b4fd0f4ea8ce259", "filename": "src/test/ui/offset_from.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Foffset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Foffset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foffset_from.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-\n-fn main() {\n-    let mut a = [0; 5];\n-    let ptr1: *mut i32 = &mut a[1];\n-    let ptr2: *mut i32 = &mut a[3];\n-    unsafe {\n-        assert_eq!(ptr2.offset_from(ptr1), 2);\n-        assert_eq!(ptr1.offset_from(ptr2), -2);\n-        assert_eq!(ptr1.offset(2), ptr2);\n-        assert_eq!(ptr2.offset(-2), ptr1);\n-    }\n-}"}, {"sha": "76d0cf43984b337adb7c2d39d910a5981b6ea938", "filename": "src/test/ui/option-ext.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Foption-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Foption-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-ext.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-\n-pub fn main() {\n-    let thing = \"{{ f }}\";\n-    let f = thing.find(\"{{\");\n-\n-    if f.is_none() {\n-        println!(\"None!\");\n-    }\n-}"}, {"sha": "57f258aab654a6c4e588c82378a6d1540898821e", "filename": "src/test/ui/result-opt-conversions.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fresult-opt-conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fresult-opt-conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresult-opt-conversions.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,47 +0,0 @@\n-// run-pass\n-\n-#[derive(Copy, Clone, Debug, PartialEq)]\n-struct BadNumErr;\n-\n-fn try_num(x: i32) -> Result<i32, BadNumErr> {\n-    if x <= 5 {\n-        Ok(x + 1)\n-    } else {\n-        Err(BadNumErr)\n-    }\n-}\n-\n-type ResOpt = Result<Option<i32>, BadNumErr>;\n-type OptRes = Option<Result<i32, BadNumErr>>;\n-\n-fn main() {\n-    let mut x: ResOpt = Ok(Some(5));\n-    let mut y: OptRes = Some(Ok(5));\n-    assert_eq!(x, y.transpose());\n-    assert_eq!(x.transpose(), y);\n-\n-    x = Ok(None);\n-    y = None;\n-    assert_eq!(x, y.transpose());\n-    assert_eq!(x.transpose(), y);\n-\n-    x = Err(BadNumErr);\n-    y = Some(Err(BadNumErr));\n-    assert_eq!(x, y.transpose());\n-    assert_eq!(x.transpose(), y);\n-\n-    let res: Result<Vec<i32>, BadNumErr> =\n-        (0..10)\n-            .map(|x| {\n-                let y = try_num(x)?;\n-                Ok(if y % 2 == 0 {\n-                    Some(y - 1)\n-                } else {\n-                    None\n-                })\n-            })\n-            .filter_map(Result::transpose)\n-            .collect();\n-\n-    assert_eq!(res, Err(BadNumErr))\n-}"}, {"sha": "75b6ddf7895c73253a6ee280be23a014448f4d91", "filename": "src/test/ui/utf8.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,50 +0,0 @@\n-// run-pass\n-\n-pub fn main() {\n-    let yen: char = '\u00a5'; // 0xa5\n-    let c_cedilla: char = '\u00e7'; // 0xe7\n-    let thorn: char = '\u00fe'; // 0xfe\n-    let y_diaeresis: char = '\u00ff'; // 0xff\n-    let pi: char = '\u03a0'; // 0x3a0\n-\n-    assert_eq!(yen as isize, 0xa5);\n-    assert_eq!(c_cedilla as isize, 0xe7);\n-    assert_eq!(thorn as isize, 0xfe);\n-    assert_eq!(y_diaeresis as isize, 0xff);\n-    assert_eq!(pi as isize, 0x3a0);\n-\n-    assert_eq!(pi as isize, '\\u{3a0}' as isize);\n-    assert_eq!('\\x0a' as isize, '\\n' as isize);\n-\n-    let bhutan: String = \"\u0f60\u0f56\u0fb2\u0f74\u0f42\u0f0b\u0f61\u0f74\u0f63\u0f0d\".to_string();\n-    let japan: String = \"\u65e5\u672c\".to_string();\n-    let uzbekistan: String = \"\u040e\u0437\u0431\u0435\u043a\u0438\u0441\u0442\u043e\u043d\".to_string();\n-    let austria: String = \"\u00d6sterreich\".to_string();\n-\n-    let bhutan_e: String =\n-        \"\\u{f60}\\u{f56}\\u{fb2}\\u{f74}\\u{f42}\\u{f0b}\\u{f61}\\u{f74}\\u{f63}\\u{f0d}\".to_string();\n-    let japan_e: String = \"\\u{65e5}\\u{672c}\".to_string();\n-    let uzbekistan_e: String =\n-        \"\\u{40e}\\u{437}\\u{431}\\u{435}\\u{43a}\\u{438}\\u{441}\\u{442}\\u{43e}\\u{43d}\".to_string();\n-    let austria_e: String = \"\\u{d6}sterreich\".to_string();\n-\n-    let oo: char = '\u00d6';\n-    assert_eq!(oo as isize, 0xd6);\n-\n-    fn check_str_eq(a: String, b: String) {\n-        let mut i: isize = 0;\n-        for ab in a.bytes() {\n-            println!(\"{}\", i);\n-            println!(\"{}\", ab);\n-            let bb: u8 = b.as_bytes()[i as usize];\n-            println!(\"{}\", bb);\n-            assert_eq!(ab, bb);\n-            i += 1;\n-        }\n-    }\n-\n-    check_str_eq(bhutan, bhutan_e);\n-    check_str_eq(japan, japan_e);\n-    check_str_eq(uzbekistan, uzbekistan_e);\n-    check_str_eq(austria, austria_e);\n-}"}, {"sha": "d764509813de117cd5ee310ed1a3ec6efddadbf1", "filename": "src/test/ui/utf8_chars.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_chars.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-\n-use std::str;\n-\n-pub fn main() {\n-    // Chars of 1, 2, 3, and 4 bytes\n-    let chs: Vec<char> = vec!['e', '\u00e9', '\u20ac', '\\u{10000}'];\n-    let s: String = chs.iter().cloned().collect();\n-    let schs: Vec<char> = s.chars().collect();\n-\n-    assert_eq!(s.len(), 10);\n-    assert_eq!(s.chars().count(), 4);\n-    assert_eq!(schs.len(), 4);\n-    assert_eq!(schs.iter().cloned().collect::<String>(), s);\n-\n-    assert!((str::from_utf8(s.as_bytes()).is_ok()));\n-    // invalid prefix\n-    assert!((!str::from_utf8(&[0x80]).is_ok()));\n-    // invalid 2 byte prefix\n-    assert!((!str::from_utf8(&[0xc0]).is_ok()));\n-    assert!((!str::from_utf8(&[0xc0, 0x10]).is_ok()));\n-    // invalid 3 byte prefix\n-    assert!((!str::from_utf8(&[0xe0]).is_ok()));\n-    assert!((!str::from_utf8(&[0xe0, 0x10]).is_ok()));\n-    assert!((!str::from_utf8(&[0xe0, 0xff, 0x10]).is_ok()));\n-    // invalid 4 byte prefix\n-    assert!((!str::from_utf8(&[0xf0]).is_ok()));\n-    assert!((!str::from_utf8(&[0xf0, 0x10]).is_ok()));\n-    assert!((!str::from_utf8(&[0xf0, 0xff, 0x10]).is_ok()));\n-    assert!((!str::from_utf8(&[0xf0, 0xff, 0xff, 0x10]).is_ok()));\n-}"}, {"sha": "6e2fc7f80b9c480404b05b788ee408bba2d9ec56", "filename": "src/test/ui/wrapping-int-api.rs", "status": "removed", "additions": 0, "deletions": 225, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fwrapping-int-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa9d31c41cfa5f60dbce1204104eb8d8261be5f/src%2Ftest%2Fui%2Fwrapping-int-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrapping-int-api.rs?ref=0fa9d31c41cfa5f60dbce1204104eb8d8261be5f", "patch": "@@ -1,225 +0,0 @@\n-// run-pass\n-// Test inherent wrapping_* methods for {i,u}{size,8,16,32,64}.\n-\n-// Don't warn about overflowing ops on 32-bit platforms\n-#![cfg_attr(target_pointer_width = \"32\", allow(const_err))]\n-\n-fn main() {\n-    assert_eq!(   i8::MAX.wrapping_add(1),    i8::MIN);\n-    assert_eq!(  i16::MAX.wrapping_add(1),   i16::MIN);\n-    assert_eq!(  i32::MAX.wrapping_add(1),   i32::MIN);\n-    assert_eq!(  i64::MAX.wrapping_add(1),   i64::MIN);\n-    assert_eq!(isize::MAX.wrapping_add(1), isize::MIN);\n-\n-    assert_eq!(   i8::MIN.wrapping_sub(1),    i8::MAX);\n-    assert_eq!(  i16::MIN.wrapping_sub(1),   i16::MAX);\n-    assert_eq!(  i32::MIN.wrapping_sub(1),   i32::MAX);\n-    assert_eq!(  i64::MIN.wrapping_sub(1),   i64::MAX);\n-    assert_eq!(isize::MIN.wrapping_sub(1), isize::MAX);\n-\n-    assert_eq!(   u8::MAX.wrapping_add(1),    u8::MIN);\n-    assert_eq!(  u16::MAX.wrapping_add(1),   u16::MIN);\n-    assert_eq!(  u32::MAX.wrapping_add(1),   u32::MIN);\n-    assert_eq!(  u64::MAX.wrapping_add(1),   u64::MIN);\n-    assert_eq!(usize::MAX.wrapping_add(1), usize::MIN);\n-\n-    assert_eq!(   u8::MIN.wrapping_sub(1),    u8::MAX);\n-    assert_eq!(  u16::MIN.wrapping_sub(1),   u16::MAX);\n-    assert_eq!(  u32::MIN.wrapping_sub(1),   u32::MAX);\n-    assert_eq!(  u64::MIN.wrapping_sub(1),   u64::MAX);\n-    assert_eq!(usize::MIN.wrapping_sub(1), usize::MAX);\n-\n-    assert_eq!((0xfe_u8 as i8).wrapping_mul(16),\n-               (0xe0_u8 as i8));\n-    assert_eq!((0xfedc_u16 as i16).wrapping_mul(16),\n-               (0xedc0_u16 as i16));\n-    assert_eq!((0xfedc_ba98_u32 as i32).wrapping_mul(16),\n-               (0xedcb_a980_u32 as i32));\n-    assert_eq!((0xfedc_ba98_7654_3217_u64 as i64).wrapping_mul(16),\n-               (0xedcb_a987_6543_2170_u64 as i64));\n-\n-    match () {\n-        #[cfg(target_pointer_width = \"32\")]\n-        () => {\n-            assert_eq!((0xfedc_ba98_u32 as isize).wrapping_mul(16),\n-                       (0xedcb_a980_u32 as isize));\n-        }\n-        #[cfg(target_pointer_width = \"64\")]\n-        () => {\n-            assert_eq!((0xfedc_ba98_7654_3217_u64 as isize).wrapping_mul(16),\n-                       (0xedcb_a987_6543_2170_u64 as isize));\n-        }\n-    }\n-\n-    assert_eq!((0xfe as u8).wrapping_mul(16),\n-               (0xe0 as u8));\n-    assert_eq!((0xfedc as u16).wrapping_mul(16),\n-               (0xedc0 as u16));\n-    assert_eq!((0xfedc_ba98 as u32).wrapping_mul(16),\n-               (0xedcb_a980 as u32));\n-    assert_eq!((0xfedc_ba98_7654_3217 as u64).wrapping_mul(16),\n-               (0xedcb_a987_6543_2170 as u64));\n-\n-    match () {\n-        #[cfg(target_pointer_width = \"32\")]\n-        () => {\n-            assert_eq!((0xfedc_ba98 as usize).wrapping_mul(16),\n-                       (0xedcb_a980 as usize));\n-        }\n-        #[cfg(target_pointer_width = \"64\")]\n-        () => {\n-            assert_eq!((0xfedc_ba98_7654_3217 as usize).wrapping_mul(16),\n-                       (0xedcb_a987_6543_2170 as usize));\n-        }\n-    }\n-\n-    macro_rules! check_mul_no_wrap {\n-        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_mul($f), ($e) * $f); }\n-    }\n-    macro_rules! check_mul_wraps {\n-        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_mul($f), $e); }\n-    }\n-\n-    check_mul_no_wrap!(0xfe_u8 as i8, -1);\n-    check_mul_no_wrap!(0xfedc_u16 as i16, -1);\n-    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n-    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n-    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n-\n-    check_mul_no_wrap!(0xfe_u8 as i8, -2);\n-    check_mul_no_wrap!(0xfedc_u16 as i16, -2);\n-    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n-    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n-    check_mul_no_wrap!(0xfedc_ba98_fedc_ba98_u64 as u64 as isize, -2);\n-\n-    check_mul_no_wrap!(0xfe_u8 as i8, 2);\n-    check_mul_no_wrap!(0xfedc_u16 as i16, 2);\n-    check_mul_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n-    check_mul_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n-    check_mul_no_wrap!(0xfedc_ba98_fedc_ba98_u64 as u64 as isize, 2);\n-\n-    check_mul_wraps!(0x80_u8 as i8, -1);\n-    check_mul_wraps!(0x8000_u16 as i16, -1);\n-    check_mul_wraps!(0x8000_0000_u32 as i32, -1);\n-    check_mul_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n-    match () {\n-        #[cfg(target_pointer_width = \"32\")]\n-        () => {\n-            check_mul_wraps!(0x8000_0000_u32 as isize, -1);\n-        }\n-        #[cfg(target_pointer_width = \"64\")]\n-        () => {\n-            check_mul_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n-        }\n-    }\n-\n-    macro_rules! check_div_no_wrap {\n-        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_div($f), ($e) / $f); }\n-    }\n-    macro_rules! check_div_wraps {\n-        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_div($f), $e); }\n-    }\n-\n-    check_div_no_wrap!(0xfe_u8 as i8, -1);\n-    check_div_no_wrap!(0xfedc_u16 as i16, -1);\n-    check_div_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n-    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n-    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n-\n-    check_div_no_wrap!(0xfe_u8 as i8, -2);\n-    check_div_no_wrap!(0xfedc_u16 as i16, -2);\n-    check_div_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n-    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n-    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n-\n-    check_div_no_wrap!(0xfe_u8 as i8, 2);\n-    check_div_no_wrap!(0xfedc_u16 as i16, 2);\n-    check_div_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n-    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n-    check_div_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n-\n-    check_div_wraps!(-128 as i8, -1);\n-    check_div_wraps!(0x8000_u16 as i16, -1);\n-    check_div_wraps!(0x8000_0000_u32 as i32, -1);\n-    check_div_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n-    match () {\n-        #[cfg(target_pointer_width = \"32\")]\n-        () => {\n-            check_div_wraps!(0x8000_0000_u32 as isize, -1);\n-        }\n-        #[cfg(target_pointer_width = \"64\")]\n-        () => {\n-            check_div_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n-        }\n-    }\n-\n-\n-    macro_rules! check_rem_no_wrap {\n-        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_rem($f), ($e) % $f); }\n-    }\n-    macro_rules! check_rem_wraps {\n-        ($e:expr, $f:expr) => { assert_eq!(($e).wrapping_rem($f), 0); }\n-    }\n-\n-    check_rem_no_wrap!(0xfe_u8 as i8, -1);\n-    check_rem_no_wrap!(0xfedc_u16 as i16, -1);\n-    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, -1);\n-    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -1);\n-    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -1);\n-\n-    check_rem_no_wrap!(0xfe_u8 as i8, -2);\n-    check_rem_no_wrap!(0xfedc_u16 as i16, -2);\n-    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, -2);\n-    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, -2);\n-    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, -2);\n-\n-    check_rem_no_wrap!(0xfe_u8 as i8, 2);\n-    check_rem_no_wrap!(0xfedc_u16 as i16, 2);\n-    check_rem_no_wrap!(0xfedc_ba98_u32 as i32, 2);\n-    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64, 2);\n-    check_rem_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize, 2);\n-\n-    check_rem_wraps!(0x80_u8 as i8, -1);\n-    check_rem_wraps!(0x8000_u16 as i16, -1);\n-    check_rem_wraps!(0x8000_0000_u32 as i32, -1);\n-    check_rem_wraps!(0x8000_0000_0000_0000_u64 as i64, -1);\n-    match () {\n-        #[cfg(target_pointer_width = \"32\")]\n-        () => {\n-            check_rem_wraps!(0x8000_0000_u32 as isize, -1);\n-        }\n-        #[cfg(target_pointer_width = \"64\")]\n-        () => {\n-            check_rem_wraps!(0x8000_0000_0000_0000_u64 as isize, -1);\n-        }\n-    }\n-\n-    macro_rules! check_neg_no_wrap {\n-        ($e:expr) => { assert_eq!(($e).wrapping_neg(), -($e)); }\n-    }\n-    macro_rules! check_neg_wraps {\n-        ($e:expr) => { assert_eq!(($e).wrapping_neg(),  ($e)); }\n-    }\n-\n-    check_neg_no_wrap!(0xfe_u8 as i8);\n-    check_neg_no_wrap!(0xfedc_u16 as i16);\n-    check_neg_no_wrap!(0xfedc_ba98_u32 as i32);\n-    check_neg_no_wrap!(0xfedc_ba98_7654_3217_u64 as i64);\n-    check_neg_no_wrap!(0xfedc_ba98_7654_3217_u64 as u64 as isize);\n-\n-    check_neg_wraps!(0x80_u8 as i8);\n-    check_neg_wraps!(0x8000_u16 as i16);\n-    check_neg_wraps!(0x8000_0000_u32 as i32);\n-    check_neg_wraps!(0x8000_0000_0000_0000_u64 as i64);\n-    match () {\n-        #[cfg(target_pointer_width = \"32\")]\n-        () => {\n-            check_neg_wraps!(0x8000_0000_u32 as isize);\n-        }\n-        #[cfg(target_pointer_width = \"64\")]\n-        () => {\n-            check_neg_wraps!(0x8000_0000_0000_0000_u64 as isize);\n-        }\n-    }\n-\n-}"}, {"sha": "0a69b18a3325413a4aa4b8642ca2e37152f3edb9", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 113, "deletions": 90, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1,11 +1,11 @@\n-use crate::Lint;\n+use crate::{Lint, LintExtractor};\n use std::collections::{BTreeMap, BTreeSet};\n use std::error::Error;\n use std::fmt::Write;\n use std::fs;\n-use std::path::Path;\n use std::process::Command;\n \n+/// Descriptions of rustc lint groups.\n static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n     (\"unused\", \"Lints that detect things being declared but not used, or excess syntax\"),\n     (\"rustdoc\", \"Rustdoc-specific lints\"),\n@@ -15,100 +15,123 @@ static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n     (\"rust-2018-compatibility\", \"Lints used to transition code from the 2015 edition to 2018\"),\n ];\n \n-/// Updates the documentation of lint groups.\n-pub(crate) fn generate_group_docs(\n-    lints: &[Lint],\n-    rustc: crate::Rustc<'_>,\n-    out_path: &Path,\n-) -> Result<(), Box<dyn Error>> {\n-    let groups = collect_groups(rustc)?;\n-    let groups_path = out_path.join(\"groups.md\");\n-    let contents = fs::read_to_string(&groups_path)\n-        .map_err(|e| format!(\"could not read {}: {}\", groups_path.display(), e))?;\n-    let new_contents = contents.replace(\"{{groups-table}}\", &make_groups_table(lints, &groups)?);\n-    // Delete the output because rustbuild uses hard links in its copies.\n-    let _ = fs::remove_file(&groups_path);\n-    fs::write(&groups_path, new_contents)\n-        .map_err(|e| format!(\"could not write to {}: {}\", groups_path.display(), e))?;\n-    Ok(())\n-}\n-\n type LintGroups = BTreeMap<String, BTreeSet<String>>;\n \n-/// Collects the group names from rustc.\n-fn collect_groups(rustc: crate::Rustc<'_>) -> Result<LintGroups, Box<dyn Error>> {\n-    let mut result = BTreeMap::new();\n-    let mut cmd = Command::new(rustc.path);\n-    cmd.arg(\"-Whelp\");\n-    let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n-    if !output.status.success() {\n-        return Err(format!(\n-            \"failed to collect lint info: {:?}\\n--- stderr\\n{}--- stdout\\n{}\\n\",\n-            output.status,\n-            std::str::from_utf8(&output.stderr).unwrap(),\n-            std::str::from_utf8(&output.stdout).unwrap(),\n-        )\n-        .into());\n+impl<'a> LintExtractor<'a> {\n+    /// Updates the documentation of lint groups.\n+    pub(crate) fn generate_group_docs(&self, lints: &[Lint]) -> Result<(), Box<dyn Error>> {\n+        let groups = self.collect_groups()?;\n+        let groups_path = self.out_path.join(\"groups.md\");\n+        let contents = fs::read_to_string(&groups_path)\n+            .map_err(|e| format!(\"could not read {}: {}\", groups_path.display(), e))?;\n+        let new_contents =\n+            contents.replace(\"{{groups-table}}\", &self.make_groups_table(lints, &groups)?);\n+        // Delete the output because rustbuild uses hard links in its copies.\n+        let _ = fs::remove_file(&groups_path);\n+        fs::write(&groups_path, new_contents)\n+            .map_err(|e| format!(\"could not write to {}: {}\", groups_path.display(), e))?;\n+        Ok(())\n     }\n-    let stdout = std::str::from_utf8(&output.stdout).unwrap();\n-    let lines = stdout.lines();\n-    let group_start = lines.skip_while(|line| !line.contains(\"groups provided\")).skip(1);\n-    let table_start = group_start.skip_while(|line| !line.contains(\"----\")).skip(1);\n-    for line in table_start {\n-        if line.is_empty() {\n-            break;\n+\n+    /// Collects the group names from rustc.\n+    fn collect_groups(&self) -> Result<LintGroups, Box<dyn Error>> {\n+        let mut result = BTreeMap::new();\n+        let mut cmd = Command::new(self.rustc_path);\n+        cmd.arg(\"-Whelp\");\n+        let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n+        if !output.status.success() {\n+            return Err(format!(\n+                \"failed to collect lint info: {:?}\\n--- stderr\\n{}--- stdout\\n{}\\n\",\n+                output.status,\n+                std::str::from_utf8(&output.stderr).unwrap(),\n+                std::str::from_utf8(&output.stdout).unwrap(),\n+            )\n+            .into());\n         }\n-        let mut parts = line.trim().splitn(2, ' ');\n-        let name = parts.next().expect(\"name in group\");\n-        if name == \"warnings\" {\n-            // This is special.\n-            continue;\n+        let stdout = std::str::from_utf8(&output.stdout).unwrap();\n+        let lines = stdout.lines();\n+        let group_start = lines.skip_while(|line| !line.contains(\"groups provided\")).skip(1);\n+        let table_start = group_start.skip_while(|line| !line.contains(\"----\")).skip(1);\n+        for line in table_start {\n+            if line.is_empty() {\n+                break;\n+            }\n+            let mut parts = line.trim().splitn(2, ' ');\n+            let name = parts.next().expect(\"name in group\");\n+            if name == \"warnings\" {\n+                // This is special.\n+                continue;\n+            }\n+            let lints = parts\n+                .next()\n+                .ok_or_else(|| format!(\"expected lints following name, got `{}`\", line))?;\n+            let lints = lints.split(',').map(|l| l.trim().to_string()).collect();\n+            assert!(result.insert(name.to_string(), lints).is_none());\n         }\n-        let lints =\n-            parts.next().ok_or_else(|| format!(\"expected lints following name, got `{}`\", line))?;\n-        let lints = lints.split(',').map(|l| l.trim().to_string()).collect();\n-        assert!(result.insert(name.to_string(), lints).is_none());\n-    }\n-    if result.is_empty() {\n-        return Err(\n-            format!(\"expected at least one group in -Whelp output, got:\\n{}\", stdout).into()\n-        );\n+        if result.is_empty() {\n+            return Err(\n+                format!(\"expected at least one group in -Whelp output, got:\\n{}\", stdout).into()\n+            );\n+        }\n+        Ok(result)\n     }\n-    Ok(result)\n-}\n \n-fn make_groups_table(lints: &[Lint], groups: &LintGroups) -> Result<String, Box<dyn Error>> {\n-    let mut result = String::new();\n-    let mut to_link = Vec::new();\n-    result.push_str(\"| Group | Description | Lints |\\n\");\n-    result.push_str(\"|-------|-------------|-------|\\n\");\n-    result.push_str(\"| warnings | All lints that are set to issue warnings | See [warn-by-default] for the default set of warnings |\\n\");\n-    for (group_name, group_lints) in groups {\n-        let description = GROUP_DESCRIPTIONS.iter().find(|(n, _)| n == group_name)\n-            .ok_or_else(|| format!(\"lint group `{}` does not have a description, please update the GROUP_DESCRIPTIONS list\", group_name))?\n-            .1;\n-        to_link.extend(group_lints);\n-        let brackets: Vec<_> = group_lints.iter().map(|l| format!(\"[{}]\", l)).collect();\n-        write!(result, \"| {} | {} | {} |\\n\", group_name, description, brackets.join(\", \")).unwrap();\n-    }\n-    result.push('\\n');\n-    result.push_str(\"[warn-by-default]: listing/warn-by-default.md\\n\");\n-    for lint_name in to_link {\n-        let lint_def =\n-            lints.iter().find(|l| l.name == lint_name.replace(\"-\", \"_\")).ok_or_else(|| {\n-                format!(\n-                    \"`rustc -W help` defined lint `{}` but that lint does not appear to exist\",\n-                    lint_name\n-                )\n-            })?;\n-        write!(\n-            result,\n-            \"[{}]: listing/{}#{}\\n\",\n-            lint_name,\n-            lint_def.level.doc_filename(),\n-            lint_name\n-        )\n-        .unwrap();\n+    fn make_groups_table(\n+        &self,\n+        lints: &[Lint],\n+        groups: &LintGroups,\n+    ) -> Result<String, Box<dyn Error>> {\n+        let mut result = String::new();\n+        let mut to_link = Vec::new();\n+        result.push_str(\"| Group | Description | Lints |\\n\");\n+        result.push_str(\"|-------|-------------|-------|\\n\");\n+        result.push_str(\"| warnings | All lints that are set to issue warnings | See [warn-by-default] for the default set of warnings |\\n\");\n+        for (group_name, group_lints) in groups {\n+            let description = match GROUP_DESCRIPTIONS.iter().find(|(n, _)| n == group_name) {\n+                Some((_, desc)) => desc,\n+                None if self.validate => {\n+                    return Err(format!(\n+                        \"lint group `{}` does not have a description, \\\n+                         please update the GROUP_DESCRIPTIONS list in \\\n+                         src/tools/lint-docs/src/groups.rs\",\n+                        group_name\n+                    )\n+                    .into());\n+                }\n+                None => {\n+                    eprintln!(\n+                        \"warning: lint group `{}` is missing from the GROUP_DESCRIPTIONS list\\n\\\n+                         If this is a new lint group, please update the GROUP_DESCRIPTIONS in \\\n+                         src/tools/lint-docs/src/groups.rs\",\n+                        group_name\n+                    );\n+                    continue;\n+                }\n+            };\n+            to_link.extend(group_lints);\n+            let brackets: Vec<_> = group_lints.iter().map(|l| format!(\"[{}]\", l)).collect();\n+            write!(result, \"| {} | {} | {} |\\n\", group_name, description, brackets.join(\", \"))\n+                .unwrap();\n+        }\n+        result.push('\\n');\n+        result.push_str(\"[warn-by-default]: listing/warn-by-default.md\\n\");\n+        for lint_name in to_link {\n+            let lint_def =\n+                lints.iter().find(|l| l.name == lint_name.replace(\"-\", \"_\")).ok_or_else(|| {\n+                    format!(\n+                        \"`rustc -W help` defined lint `{}` but that lint does not appear to exist\",\n+                        lint_name\n+                    )\n+                })?;\n+            write!(\n+                result,\n+                \"[{}]: listing/{}#{}\\n\",\n+                lint_name,\n+                lint_def.level.doc_filename(),\n+                lint_name\n+            )\n+            .unwrap();\n+        }\n+        Ok(result)\n     }\n-    Ok(result)\n }"}, {"sha": "326b7948098540ea7a1ef3bbc36f3b81573e698c", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 385, "deletions": 371, "changes": 756, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -7,6 +7,22 @@ use walkdir::WalkDir;\n \n mod groups;\n \n+pub struct LintExtractor<'a> {\n+    /// Path to the `src` directory, where it will scan for `.rs` files to\n+    /// find lint declarations.\n+    pub src_path: &'a Path,\n+    /// Path where to save the output.\n+    pub out_path: &'a Path,\n+    /// Path to the `rustc` executable.\n+    pub rustc_path: &'a Path,\n+    /// The target arch to build the docs for.\n+    pub rustc_target: &'a str,\n+    /// Verbose output.\n+    pub verbose: bool,\n+    /// Validate the style and the code example.\n+    pub validate: bool,\n+}\n+\n struct Lint {\n     name: String,\n     doc: Vec<String>,\n@@ -26,6 +42,28 @@ impl Lint {\n             .filter(|line| line.starts_with(\"```rust\"))\n             .all(|line| line.contains(\",ignore\"))\n     }\n+\n+    /// Checks the doc style of the lint.\n+    fn check_style(&self) -> Result<(), Box<dyn Error>> {\n+        for &expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n+            if expected == \"{{produces}}\" && self.is_ignored() {\n+                continue;\n+            }\n+            if !self.doc_contains(expected) {\n+                return Err(format!(\"lint docs should contain the line `{}`\", expected).into());\n+            }\n+        }\n+        if let Some(first) = self.doc.first() {\n+            if !first.starts_with(&format!(\"The `{}` lint\", self.name)) {\n+                return Err(format!(\n+                    \"lint docs should start with the text \\\"The `{}` lint\\\" to introduce the lint\",\n+                    self.name\n+                )\n+                .into());\n+            }\n+        }\n+        Ok(())\n+    }\n }\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -45,382 +83,396 @@ impl Level {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct Rustc<'a> {\n-    pub path: &'a Path,\n-    pub target: &'a str,\n-}\n-\n-/// Collects all lints, and writes the markdown documentation at the given directory.\n-pub fn extract_lint_docs(\n-    src_path: &Path,\n-    out_path: &Path,\n-    rustc: Rustc<'_>,\n-    verbose: bool,\n-) -> Result<(), Box<dyn Error>> {\n-    let mut lints = gather_lints(src_path)?;\n-    for lint in &mut lints {\n-        generate_output_example(lint, rustc, verbose).map_err(|e| {\n-            format!(\n-                \"failed to test example in lint docs for `{}` in {}:{}: {}\",\n-                lint.name,\n-                lint.path.display(),\n-                lint.lineno,\n-                e\n-            )\n-        })?;\n+impl<'a> LintExtractor<'a> {\n+    /// Collects all lints, and writes the markdown documentation at the given directory.\n+    pub fn extract_lint_docs(&self) -> Result<(), Box<dyn Error>> {\n+        let mut lints = self.gather_lints()?;\n+        for lint in &mut lints {\n+            self.generate_output_example(lint).map_err(|e| {\n+                format!(\n+                    \"failed to test example in lint docs for `{}` in {}:{}: {}\",\n+                    lint.name,\n+                    lint.path.display(),\n+                    lint.lineno,\n+                    e\n+                )\n+            })?;\n+        }\n+        self.save_lints_markdown(&lints)?;\n+        self.generate_group_docs(&lints)?;\n+        Ok(())\n     }\n-    save_lints_markdown(&lints, &out_path.join(\"listing\"))?;\n-    groups::generate_group_docs(&lints, rustc, out_path)?;\n-    Ok(())\n-}\n \n-/// Collects all lints from all files in the given directory.\n-fn gather_lints(src_path: &Path) -> Result<Vec<Lint>, Box<dyn Error>> {\n-    let mut lints = Vec::new();\n-    for entry in WalkDir::new(src_path).into_iter().filter_map(|e| e.ok()) {\n-        if !entry.path().extension().map_or(false, |ext| ext == \"rs\") {\n-            continue;\n+    /// Collects all lints from all files in the given directory.\n+    fn gather_lints(&self) -> Result<Vec<Lint>, Box<dyn Error>> {\n+        let mut lints = Vec::new();\n+        for entry in WalkDir::new(self.src_path).into_iter().filter_map(|e| e.ok()) {\n+            if !entry.path().extension().map_or(false, |ext| ext == \"rs\") {\n+                continue;\n+            }\n+            lints.extend(self.lints_from_file(entry.path())?);\n         }\n-        lints.extend(lints_from_file(entry.path())?);\n-    }\n-    if lints.is_empty() {\n-        return Err(\"no lints were found!\".into());\n+        if lints.is_empty() {\n+            return Err(\"no lints were found!\".into());\n+        }\n+        Ok(lints)\n     }\n-    Ok(lints)\n-}\n \n-/// Collects all lints from the given file.\n-fn lints_from_file(path: &Path) -> Result<Vec<Lint>, Box<dyn Error>> {\n-    let mut lints = Vec::new();\n-    let contents = fs::read_to_string(path)\n-        .map_err(|e| format!(\"could not read {}: {}\", path.display(), e))?;\n-    let mut lines = contents.lines().enumerate();\n-    loop {\n-        // Find a lint declaration.\n-        let lint_start = loop {\n-            match lines.next() {\n-                Some((lineno, line)) => {\n-                    if line.trim().starts_with(\"declare_lint!\") {\n-                        break lineno + 1;\n+    /// Collects all lints from the given file.\n+    fn lints_from_file(&self, path: &Path) -> Result<Vec<Lint>, Box<dyn Error>> {\n+        let mut lints = Vec::new();\n+        let contents = fs::read_to_string(path)\n+            .map_err(|e| format!(\"could not read {}: {}\", path.display(), e))?;\n+        let mut lines = contents.lines().enumerate();\n+        'outer: loop {\n+            // Find a lint declaration.\n+            let lint_start = loop {\n+                match lines.next() {\n+                    Some((lineno, line)) => {\n+                        if line.trim().starts_with(\"declare_lint!\") {\n+                            break lineno + 1;\n+                        }\n+                    }\n+                    None => return Ok(lints),\n+                }\n+            };\n+            // Read the lint.\n+            let mut doc_lines = Vec::new();\n+            let (doc, name) = loop {\n+                match lines.next() {\n+                    Some((lineno, line)) => {\n+                        let line = line.trim();\n+                        if let Some(text) = line.strip_prefix(\"/// \") {\n+                            doc_lines.push(text.trim().to_string());\n+                        } else if line.starts_with(\"///\") {\n+                            doc_lines.push(\"\".to_string());\n+                        } else if line.starts_with(\"// \") {\n+                            // Ignore comments.\n+                            continue;\n+                        } else {\n+                            let name = lint_name(line).map_err(|e| {\n+                                format!(\n+                                    \"could not determine lint name in {}:{}: {}, line was `{}`\",\n+                                    path.display(),\n+                                    lineno,\n+                                    e,\n+                                    line\n+                                )\n+                            })?;\n+                            if doc_lines.is_empty() {\n+                                if self.validate {\n+                                    return Err(format!(\n+                                        \"did not find doc lines for lint `{}` in {}\",\n+                                        name,\n+                                        path.display()\n+                                    )\n+                                    .into());\n+                                } else {\n+                                    eprintln!(\n+                                        \"warning: lint `{}` in {} does not define any doc lines, \\\n+                                         these are required for the lint documentation\",\n+                                        name,\n+                                        path.display()\n+                                    );\n+                                    continue 'outer;\n+                                }\n+                            }\n+                            break (doc_lines, name);\n+                        }\n+                    }\n+                    None => {\n+                        return Err(format!(\n+                            \"unexpected EOF for lint definition at {}:{}\",\n+                            path.display(),\n+                            lint_start\n+                        )\n+                        .into());\n                     }\n                 }\n-                None => return Ok(lints),\n+            };\n+            // These lints are specifically undocumented. This should be reserved\n+            // for internal rustc-lints only.\n+            if name == \"deprecated_in_future\" {\n+                continue;\n             }\n-        };\n-        // Read the lint.\n-        let mut doc_lines = Vec::new();\n-        let (doc, name) = loop {\n-            match lines.next() {\n-                Some((lineno, line)) => {\n-                    let line = line.trim();\n-                    if line.starts_with(\"/// \") {\n-                        doc_lines.push(line.trim()[4..].to_string());\n-                    } else if line.starts_with(\"///\") {\n-                        doc_lines.push(\"\".to_string());\n-                    } else if line.starts_with(\"// \") {\n-                        // Ignore comments.\n-                        continue;\n-                    } else {\n-                        let name = lint_name(line).map_err(|e| {\n-                            format!(\n-                                \"could not determine lint name in {}:{}: {}, line was `{}`\",\n-                                path.display(),\n-                                lineno,\n-                                e,\n-                                line\n-                            )\n-                        })?;\n-                        if doc_lines.is_empty() {\n+            // Read the level.\n+            let level = loop {\n+                match lines.next() {\n+                    // Ignore comments.\n+                    Some((_, line)) if line.trim().starts_with(\"// \") => {}\n+                    Some((lineno, line)) => match line.trim() {\n+                        \"Allow,\" => break Level::Allow,\n+                        \"Warn,\" => break Level::Warn,\n+                        \"Deny,\" => break Level::Deny,\n+                        _ => {\n                             return Err(format!(\n-                                \"did not find doc lines for lint `{}` in {}\",\n-                                name,\n-                                path.display()\n+                                \"unexpected lint level `{}` in {}:{}\",\n+                                line,\n+                                path.display(),\n+                                lineno\n                             )\n                             .into());\n                         }\n-                        break (doc_lines, name);\n-                    }\n-                }\n-                None => {\n-                    return Err(format!(\n-                        \"unexpected EOF for lint definition at {}:{}\",\n-                        path.display(),\n-                        lint_start\n-                    )\n-                    .into());\n-                }\n-            }\n-        };\n-        // These lints are specifically undocumented. This should be reserved\n-        // for internal rustc-lints only.\n-        if name == \"deprecated_in_future\" {\n-            continue;\n-        }\n-        // Read the level.\n-        let level = loop {\n-            match lines.next() {\n-                // Ignore comments.\n-                Some((_, line)) if line.trim().starts_with(\"// \") => {}\n-                Some((lineno, line)) => match line.trim() {\n-                    \"Allow,\" => break Level::Allow,\n-                    \"Warn,\" => break Level::Warn,\n-                    \"Deny,\" => break Level::Deny,\n-                    _ => {\n+                    },\n+                    None => {\n                         return Err(format!(\n-                            \"unexpected lint level `{}` in {}:{}\",\n-                            line,\n+                            \"expected lint level in {}:{}, got EOF\",\n                             path.display(),\n-                            lineno\n+                            lint_start\n                         )\n                         .into());\n                     }\n-                },\n-                None => {\n-                    return Err(format!(\n-                        \"expected lint level in {}:{}, got EOF\",\n-                        path.display(),\n-                        lint_start\n-                    )\n-                    .into());\n                 }\n-            }\n-        };\n-        // The rest of the lint definition is ignored.\n-        assert!(!doc.is_empty());\n-        lints.push(Lint { name, doc, level, path: PathBuf::from(path), lineno: lint_start });\n-    }\n-}\n-\n-/// Extracts the lint name (removing the visibility modifier, and checking validity).\n-fn lint_name(line: &str) -> Result<String, &'static str> {\n-    // Skip over any potential `pub` visibility.\n-    match line.trim().split(' ').next_back() {\n-        Some(name) => {\n-            if !name.ends_with(',') {\n-                return Err(\"lint name should end with comma\");\n-            }\n-            let name = &name[..name.len() - 1];\n-            if !name.chars().all(|ch| ch.is_uppercase() || ch == '_') || name.is_empty() {\n-                return Err(\"lint name did not have expected format\");\n-            }\n-            Ok(name.to_lowercase().to_string())\n+            };\n+            // The rest of the lint definition is ignored.\n+            assert!(!doc.is_empty());\n+            lints.push(Lint { name, doc, level, path: PathBuf::from(path), lineno: lint_start });\n         }\n-        None => Err(\"could not find lint name\"),\n-    }\n-}\n-\n-/// Mutates the lint definition to replace the `{{produces}}` marker with the\n-/// actual output from the compiler.\n-fn generate_output_example(\n-    lint: &mut Lint,\n-    rustc: Rustc<'_>,\n-    verbose: bool,\n-) -> Result<(), Box<dyn Error>> {\n-    // Explicit list of lints that are allowed to not have an example. Please\n-    // try to avoid adding to this list.\n-    if matches!(\n-        lint.name.as_str(),\n-        \"unused_features\" // broken lint\n-        | \"unstable_features\" // deprecated\n-    ) {\n-        return Ok(());\n-    }\n-    if lint.doc_contains(\"[rustdoc book]\") && !lint.doc_contains(\"{{produces}}\") {\n-        // Rustdoc lints are documented in the rustdoc book, don't check these.\n-        return Ok(());\n     }\n-    check_style(lint)?;\n-    // Unfortunately some lints have extra requirements that this simple test\n-    // setup can't handle (like extern crates). An alternative is to use a\n-    // separate test suite, and use an include mechanism such as mdbook's\n-    // `{{#rustdoc_include}}`.\n-    if !lint.is_ignored() {\n-        replace_produces(lint, rustc, verbose)?;\n-    }\n-    Ok(())\n-}\n \n-/// Checks the doc style of the lint.\n-fn check_style(lint: &Lint) -> Result<(), Box<dyn Error>> {\n-    for &expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n-        if expected == \"{{produces}}\" && lint.is_ignored() {\n-            continue;\n+    /// Mutates the lint definition to replace the `{{produces}}` marker with the\n+    /// actual output from the compiler.\n+    fn generate_output_example(&self, lint: &mut Lint) -> Result<(), Box<dyn Error>> {\n+        // Explicit list of lints that are allowed to not have an example. Please\n+        // try to avoid adding to this list.\n+        if matches!(\n+            lint.name.as_str(),\n+            \"unused_features\" // broken lint\n+            | \"unstable_features\" // deprecated\n+        ) {\n+            return Ok(());\n         }\n-        if !lint.doc_contains(expected) {\n-            return Err(format!(\"lint docs should contain the line `{}`\", expected).into());\n+        if lint.doc_contains(\"[rustdoc book]\") && !lint.doc_contains(\"{{produces}}\") {\n+            // Rustdoc lints are documented in the rustdoc book, don't check these.\n+            return Ok(());\n         }\n-    }\n-    if let Some(first) = lint.doc.first() {\n-        if !first.starts_with(&format!(\"The `{}` lint\", lint.name)) {\n-            return Err(format!(\n-                \"lint docs should start with the text \\\"The `{}` lint\\\" to introduce the lint\",\n-                lint.name\n-            )\n-            .into());\n+        if self.validate {\n+            lint.check_style()?;\n+        }\n+        // Unfortunately some lints have extra requirements that this simple test\n+        // setup can't handle (like extern crates). An alternative is to use a\n+        // separate test suite, and use an include mechanism such as mdbook's\n+        // `{{#rustdoc_include}}`.\n+        if !lint.is_ignored() {\n+            if let Err(e) = self.replace_produces(lint) {\n+                if self.validate {\n+                    return Err(e);\n+                }\n+                eprintln!(\n+                    \"warning: the code example in lint `{}` in {} failed to \\\n+                     generate the expected output: {}\",\n+                    lint.name,\n+                    lint.path.display(),\n+                    e\n+                );\n+            }\n         }\n+        Ok(())\n     }\n-    Ok(())\n-}\n \n-/// Mutates the lint docs to replace the `{{produces}}` marker with the actual\n-/// output from the compiler.\n-fn replace_produces(\n-    lint: &mut Lint,\n-    rustc: Rustc<'_>,\n-    verbose: bool,\n-) -> Result<(), Box<dyn Error>> {\n-    let mut lines = lint.doc.iter_mut();\n-    loop {\n-        // Find start of example.\n-        let options = loop {\n-            match lines.next() {\n-                Some(line) if line.starts_with(\"```rust\") => {\n-                    break line[7..].split(',').collect::<Vec<_>>();\n+    /// Mutates the lint docs to replace the `{{produces}}` marker with the actual\n+    /// output from the compiler.\n+    fn replace_produces(&self, lint: &mut Lint) -> Result<(), Box<dyn Error>> {\n+        let mut lines = lint.doc.iter_mut();\n+        loop {\n+            // Find start of example.\n+            let options = loop {\n+                match lines.next() {\n+                    Some(line) if line.starts_with(\"```rust\") => {\n+                        break line[7..].split(',').collect::<Vec<_>>();\n+                    }\n+                    Some(line) if line.contains(\"{{produces}}\") => {\n+                        return Err(\"lint marker {{{{produces}}}} found, \\\n+                            but expected to immediately follow a rust code block\"\n+                            .into());\n+                    }\n+                    Some(_) => {}\n+                    None => return Ok(()),\n                 }\n-                Some(line) if line.contains(\"{{produces}}\") => {\n-                    return Err(\"lint marker {{{{produces}}}} found, \\\n-                        but expected to immediately follow a rust code block\"\n+            };\n+            // Find the end of example.\n+            let mut example = Vec::new();\n+            loop {\n+                match lines.next() {\n+                    Some(line) if line == \"```\" => break,\n+                    Some(line) => example.push(line),\n+                    None => {\n+                        return Err(format!(\n+                            \"did not find end of example triple ticks ```, docs were:\\n{:?}\",\n+                            lint.doc\n+                        )\n                         .into());\n-                }\n-                Some(_) => {}\n-                None => return Ok(()),\n-            }\n-        };\n-        // Find the end of example.\n-        let mut example = Vec::new();\n-        loop {\n-            match lines.next() {\n-                Some(line) if line == \"```\" => break,\n-                Some(line) => example.push(line),\n-                None => {\n-                    return Err(format!(\n-                        \"did not find end of example triple ticks ```, docs were:\\n{:?}\",\n-                        lint.doc\n-                    )\n-                    .into());\n+                    }\n                 }\n             }\n-        }\n-        // Find the {{produces}} line.\n-        loop {\n-            match lines.next() {\n-                Some(line) if line.is_empty() => {}\n-                Some(line) if line == \"{{produces}}\" => {\n-                    let output =\n-                        generate_lint_output(&lint.name, &example, &options, rustc, verbose)?;\n-                    line.replace_range(\n-                        ..,\n-                        &format!(\n-                            \"This will produce:\\n\\\n-                        \\n\\\n-                        ```text\\n\\\n-                        {}\\\n-                        ```\",\n-                            output\n-                        ),\n-                    );\n-                    break;\n+            // Find the {{produces}} line.\n+            loop {\n+                match lines.next() {\n+                    Some(line) if line.is_empty() => {}\n+                    Some(line) if line == \"{{produces}}\" => {\n+                        let output = self.generate_lint_output(&lint.name, &example, &options)?;\n+                        line.replace_range(\n+                            ..,\n+                            &format!(\n+                                \"This will produce:\\n\\\n+                            \\n\\\n+                            ```text\\n\\\n+                            {}\\\n+                            ```\",\n+                                output\n+                            ),\n+                        );\n+                        break;\n+                    }\n+                    // No {{produces}} after example, find next example.\n+                    Some(_line) => break,\n+                    None => return Ok(()),\n                 }\n-                // No {{produces}} after example, find next example.\n-                Some(_line) => break,\n-                None => return Ok(()),\n             }\n         }\n     }\n-}\n \n-/// Runs the compiler against the example, and extracts the output.\n-fn generate_lint_output(\n-    name: &str,\n-    example: &[&mut String],\n-    options: &[&str],\n-    rustc: Rustc<'_>,\n-    verbose: bool,\n-) -> Result<String, Box<dyn Error>> {\n-    if verbose {\n-        eprintln!(\"compiling lint {}\", name);\n-    }\n-    let tempdir = tempfile::TempDir::new()?;\n-    let tempfile = tempdir.path().join(\"lint_example.rs\");\n-    let mut source = String::new();\n-    let needs_main = !example.iter().any(|line| line.contains(\"fn main\"));\n-    // Remove `# ` prefix for hidden lines.\n-    let unhidden =\n-        example.iter().map(|line| if line.starts_with(\"# \") { &line[2..] } else { line });\n-    let mut lines = unhidden.peekable();\n-    while let Some(line) = lines.peek() {\n-        if line.starts_with(\"#!\") {\n+    /// Runs the compiler against the example, and extracts the output.\n+    fn generate_lint_output(\n+        &self,\n+        name: &str,\n+        example: &[&mut String],\n+        options: &[&str],\n+    ) -> Result<String, Box<dyn Error>> {\n+        if self.verbose {\n+            eprintln!(\"compiling lint {}\", name);\n+        }\n+        let tempdir = tempfile::TempDir::new()?;\n+        let tempfile = tempdir.path().join(\"lint_example.rs\");\n+        let mut source = String::new();\n+        let needs_main = !example.iter().any(|line| line.contains(\"fn main\"));\n+        // Remove `# ` prefix for hidden lines.\n+        let unhidden = example.iter().map(|line| line.strip_prefix(\"# \").unwrap_or(line));\n+        let mut lines = unhidden.peekable();\n+        while let Some(line) = lines.peek() {\n+            if line.starts_with(\"#!\") {\n+                source.push_str(line);\n+                source.push('\\n');\n+                lines.next();\n+            } else {\n+                break;\n+            }\n+        }\n+        if needs_main {\n+            source.push_str(\"fn main() {\\n\");\n+        }\n+        for line in lines {\n             source.push_str(line);\n-            source.push('\\n');\n-            lines.next();\n+            source.push('\\n')\n+        }\n+        if needs_main {\n+            source.push_str(\"}\\n\");\n+        }\n+        fs::write(&tempfile, source)\n+            .map_err(|e| format!(\"failed to write {}: {}\", tempfile.display(), e))?;\n+        let mut cmd = Command::new(self.rustc_path);\n+        if options.contains(&\"edition2015\") {\n+            cmd.arg(\"--edition=2015\");\n         } else {\n-            break;\n+            cmd.arg(\"--edition=2018\");\n+        }\n+        cmd.arg(\"--error-format=json\");\n+        cmd.arg(\"--target\").arg(self.rustc_target);\n+        if options.contains(&\"test\") {\n+            cmd.arg(\"--test\");\n+        }\n+        cmd.arg(\"lint_example.rs\");\n+        cmd.current_dir(tempdir.path());\n+        let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n+        let stderr = std::str::from_utf8(&output.stderr).unwrap();\n+        let msgs = stderr\n+            .lines()\n+            .filter(|line| line.starts_with('{'))\n+            .map(serde_json::from_str)\n+            .collect::<Result<Vec<serde_json::Value>, _>>()?;\n+        match msgs\n+            .iter()\n+            .find(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n+        {\n+            Some(msg) => {\n+                let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n+                Ok(rendered.to_string())\n+            }\n+            None => {\n+                match msgs.iter().find(\n+                    |msg| matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)),\n+                ) {\n+                    Some(msg) => {\n+                        let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n+                        Ok(rendered.to_string())\n+                    }\n+                    None => {\n+                        let rendered: Vec<&str> =\n+                            msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n+                        let non_json: Vec<&str> =\n+                            stderr.lines().filter(|line| !line.starts_with('{')).collect();\n+                        Err(format!(\n+                            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n+                            name,\n+                            non_json.join(\"\\n\"),\n+                            rendered.join(\"\\n\")\n+                        )\n+                        .into())\n+                    }\n+                }\n+            }\n         }\n     }\n-    if needs_main {\n-        source.push_str(\"fn main() {\\n\");\n-    }\n-    for line in lines {\n-        source.push_str(line);\n-        source.push('\\n')\n-    }\n-    if needs_main {\n-        source.push_str(\"}\\n\");\n-    }\n-    fs::write(&tempfile, source)\n-        .map_err(|e| format!(\"failed to write {}: {}\", tempfile.display(), e))?;\n-    let mut cmd = Command::new(rustc.path);\n-    if options.contains(&\"edition2015\") {\n-        cmd.arg(\"--edition=2015\");\n-    } else {\n-        cmd.arg(\"--edition=2018\");\n-    }\n-    cmd.arg(\"--error-format=json\");\n-    cmd.arg(\"--target\").arg(rustc.target);\n-    if options.contains(&\"test\") {\n-        cmd.arg(\"--test\");\n+\n+    /// Saves the mdbook lint chapters at the given path.\n+    fn save_lints_markdown(&self, lints: &[Lint]) -> Result<(), Box<dyn Error>> {\n+        self.save_level(lints, Level::Allow, ALLOWED_MD)?;\n+        self.save_level(lints, Level::Warn, WARN_MD)?;\n+        self.save_level(lints, Level::Deny, DENY_MD)?;\n+        Ok(())\n     }\n-    cmd.arg(\"lint_example.rs\");\n-    cmd.current_dir(tempdir.path());\n-    let output = cmd.output().map_err(|e| format!(\"failed to run command {:?}\\n{}\", cmd, e))?;\n-    let stderr = std::str::from_utf8(&output.stderr).unwrap();\n-    let msgs = stderr\n-        .lines()\n-        .filter(|line| line.starts_with('{'))\n-        .map(serde_json::from_str)\n-        .collect::<Result<Vec<serde_json::Value>, _>>()?;\n-    match msgs\n-        .iter()\n-        .find(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n-    {\n-        Some(msg) => {\n-            let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-            Ok(rendered.to_string())\n+\n+    fn save_level(&self, lints: &[Lint], level: Level, header: &str) -> Result<(), Box<dyn Error>> {\n+        let mut result = String::new();\n+        result.push_str(header);\n+        let mut these_lints: Vec<_> = lints.iter().filter(|lint| lint.level == level).collect();\n+        these_lints.sort_unstable_by_key(|lint| &lint.name);\n+        for lint in &these_lints {\n+            write!(result, \"* [`{}`](#{})\\n\", lint.name, lint.name.replace(\"_\", \"-\")).unwrap();\n         }\n-        None => {\n-            match msgs.iter().find(\n-                |msg| matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)),\n-            ) {\n-                Some(msg) => {\n-                    let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                    Ok(rendered.to_string())\n-                }\n-                None => {\n-                    let rendered: Vec<&str> =\n-                        msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n-                    let non_json: Vec<&str> =\n-                        stderr.lines().filter(|line| !line.starts_with('{')).collect();\n-                    Err(format!(\n-                        \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n-                        name,\n-                        non_json.join(\"\\n\"),\n-                        rendered.join(\"\\n\")\n-                    )\n-                    .into())\n-                }\n+        result.push('\\n');\n+        for lint in &these_lints {\n+            write!(result, \"## {}\\n\\n\", lint.name.replace(\"_\", \"-\")).unwrap();\n+            for line in &lint.doc {\n+                result.push_str(line);\n+                result.push('\\n');\n+            }\n+            result.push('\\n');\n+        }\n+        let out_path = self.out_path.join(\"listing\").join(level.doc_filename());\n+        // Delete the output because rustbuild uses hard links in its copies.\n+        let _ = fs::remove_file(&out_path);\n+        fs::write(&out_path, result)\n+            .map_err(|e| format!(\"could not write to {}: {}\", out_path.display(), e))?;\n+        Ok(())\n+    }\n+}\n+\n+/// Extracts the lint name (removing the visibility modifier, and checking validity).\n+fn lint_name(line: &str) -> Result<String, &'static str> {\n+    // Skip over any potential `pub` visibility.\n+    match line.trim().split(' ').next_back() {\n+        Some(name) => {\n+            if !name.ends_with(',') {\n+                return Err(\"lint name should end with comma\");\n             }\n+            let name = &name[..name.len() - 1];\n+            if !name.chars().all(|ch| ch.is_uppercase() || ch == '_') || name.is_empty() {\n+                return Err(\"lint name did not have expected format\");\n+            }\n+            Ok(name.to_lowercase().to_string())\n         }\n+        None => Err(\"could not find lint name\"),\n     }\n }\n \n@@ -442,41 +494,3 @@ static DENY_MD: &str = r#\"# Deny-by-default lints\n These lints are all set to the 'deny' level by default.\n \n \"#;\n-\n-/// Saves the mdbook lint chapters at the given path.\n-fn save_lints_markdown(lints: &[Lint], out_dir: &Path) -> Result<(), Box<dyn Error>> {\n-    save_level(lints, Level::Allow, out_dir, ALLOWED_MD)?;\n-    save_level(lints, Level::Warn, out_dir, WARN_MD)?;\n-    save_level(lints, Level::Deny, out_dir, DENY_MD)?;\n-    Ok(())\n-}\n-\n-fn save_level(\n-    lints: &[Lint],\n-    level: Level,\n-    out_dir: &Path,\n-    header: &str,\n-) -> Result<(), Box<dyn Error>> {\n-    let mut result = String::new();\n-    result.push_str(header);\n-    let mut these_lints: Vec<_> = lints.iter().filter(|lint| lint.level == level).collect();\n-    these_lints.sort_unstable_by_key(|lint| &lint.name);\n-    for lint in &these_lints {\n-        write!(result, \"* [`{}`](#{})\\n\", lint.name, lint.name.replace(\"_\", \"-\")).unwrap();\n-    }\n-    result.push('\\n');\n-    for lint in &these_lints {\n-        write!(result, \"## {}\\n\\n\", lint.name.replace(\"_\", \"-\")).unwrap();\n-        for line in &lint.doc {\n-            result.push_str(line);\n-            result.push('\\n');\n-        }\n-        result.push('\\n');\n-    }\n-    let out_path = out_dir.join(level.doc_filename());\n-    // Delete the output because rustbuild uses hard links in its copies.\n-    let _ = fs::remove_file(&out_path);\n-    fs::write(&out_path, result)\n-        .map_err(|e| format!(\"could not write to {}: {}\", out_path.display(), e))?;\n-    Ok(())\n-}"}, {"sha": "2055fed2b480c0b8ef021afdb80c38864ef586f5", "filename": "src/tools/lint-docs/src/main.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dd82929b5b956972446d9720ceabdee171d405/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -3,7 +3,20 @@ use std::path::PathBuf;\n \n fn main() {\n     if let Err(e) = doit() {\n-        println!(\"error: {}\", e);\n+        eprintln!(\"error: {}\", e);\n+        eprintln!(\n+            \"\n+This error was generated by the lint-docs tool.\n+This tool extracts documentation for lints from the source code and places\n+them in the rustc book. See the declare_lint! documentation\n+https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint_defs/macro.declare_lint.html\n+for an example of the format of documentation this tool expects.\n+\n+To re-run these tests, run: ./x.py test --keep-stage=0 src/tools/lint-docs\n+The --keep-stage flag should be used if you have already built the compiler\n+and are only modifying the doc comments to avoid rebuilding the compiler.\n+\"\n+        );\n         std::process::exit(1);\n     }\n }\n@@ -15,6 +28,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     let mut rustc_path = None;\n     let mut rustc_target = None;\n     let mut verbose = false;\n+    let mut validate = false;\n     while let Some(arg) = args.next() {\n         match arg.as_str() {\n             \"--src\" => {\n@@ -42,6 +56,7 @@ fn doit() -> Result<(), Box<dyn Error>> {\n                 };\n             }\n             \"-v\" | \"--verbose\" => verbose = true,\n+            \"--validate\" => validate = true,\n             s => return Err(format!(\"unexpected argument `{}`\", s).into()),\n         }\n     }\n@@ -57,13 +72,13 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     if rustc_target.is_none() {\n         return Err(\"--rustc-target must be specified to the rustc target\".into());\n     }\n-    lint_docs::extract_lint_docs(\n-        &src_path.unwrap(),\n-        &out_path.unwrap(),\n-        lint_docs::Rustc {\n-            path: rustc_path.as_deref().unwrap(),\n-            target: rustc_target.as_deref().unwrap(),\n-        },\n+    let le = lint_docs::LintExtractor {\n+        src_path: &src_path.unwrap(),\n+        out_path: &out_path.unwrap(),\n+        rustc_path: &rustc_path.unwrap(),\n+        rustc_target: &rustc_target.unwrap(),\n         verbose,\n-    )\n+        validate,\n+    };\n+    le.extract_lint_docs()\n }"}, {"sha": "47acece7aa25d7b5edfae0bfd4b94e6e55a7b4b0", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=b2dd82929b5b956972446d9720ceabdee171d405", "patch": "@@ -1 +1 @@\n-Subproject commit 746ea5b141baf1f86c2ad17753a37b135e0c1aa3\n+Subproject commit 47acece7aa25d7b5edfae0bfd4b94e6e55a7b4b0"}]}