{"sha": "64ff2b05b9d2d346b456a72f1b5d602081a037e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmYyYjA1YjlkMmQzNDZiNDU2YTcyZjFiNWQ2MDIwODFhMDM3ZTI=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-08-06T23:01:27Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-08-06T23:59:05Z"}, "message": "Replace `span_to_snippet` calls with `snippet_opt` from `clippy_utils`", "tree": {"sha": "e273e62b17a8f31c440fa5f00e9ad5378681ab55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e273e62b17a8f31c440fa5f00e9ad5378681ab55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ff2b05b9d2d346b456a72f1b5d602081a037e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ff2b05b9d2d346b456a72f1b5d602081a037e2", "html_url": "https://github.com/rust-lang/rust/commit/64ff2b05b9d2d346b456a72f1b5d602081a037e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ff2b05b9d2d346b456a72f1b5d602081a037e2/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbf0c138de34d7805b9291705f2e2361324f219", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbf0c138de34d7805b9291705f2e2361324f219", "html_url": "https://github.com/rust-lang/rust/commit/2dbf0c138de34d7805b9291705f2e2361324f219"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "99c03844f49275e02461ca8a02c0195c81e96772", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=64ff2b05b9d2d346b456a72f1b5d602081a037e2", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n use clippy_utils::{is_expr_path_def_path, paths, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LintContext};\n+use rustc_lint::LateContext;\n use rustc_middle::ty::Ty;\n use rustc_span::sym;\n \n@@ -43,7 +44,7 @@ fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -\n \n     let call_site = expr.span.source_callsite();\n     if_chain! {\n-        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(call_site);\n+        if let Some(snippet) = snippet_opt(cx, call_site);\n         let snippet_split = snippet.split(\"::\").collect::<Vec<_>>();\n         if let Some((_, elements)) = snippet_split.split_last();\n "}, {"sha": "fff533167ede2032d935dbc3edbc4228d51bfba4", "filename": "clippy_lints/src/misc_early/unneeded_field_pattern.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs?ref=64ff2b05b9d2d346b456a72f1b5d602081a037e2", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{Pat, PatKind};\n-use rustc_lint::{EarlyContext, LintContext};\n+use rustc_lint::EarlyContext;\n \n use super::UNNEEDED_FIELD_PATTERN;\n \n@@ -48,7 +49,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                             match field.pat.kind {\n                                 PatKind::Wild => {},\n                                 _ => {\n-                                    if let Ok(n) = cx.sess().source_map().span_to_snippet(field.span) {\n+                                    if let Some(n) = snippet_opt(cx, field.span) {\n                                         normal.push(n);\n                                     }\n                                 },"}, {"sha": "77b6e60d89398e61c55f2377bed0933d1125e20d", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=64ff2b05b9d2d346b456a72f1b5d602081a037e2", "patch": "@@ -54,7 +54,8 @@ impl EarlyLintPass for DerefAddrOf {\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if e.span.from_expansion() {\n-                    if let Ok(macro_source) = cx.sess.source_map().span_to_snippet(e.span) {\n+                    #[allow(clippy::option_if_let_else)]\n+                    if let Some(macro_source) = snippet_opt(cx, e.span) {\n                         // Remove leading whitespace from the given span\n                         // e.g: ` $visitor` turns into `$visitor`\n                         let trim_leading_whitespaces = |span| {"}, {"sha": "1164ac4938fb6a28edce06017a0c0082869eaa83", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ff2b05b9d2d346b456a72f1b5d602081a037e2/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=64ff2b05b9d2d346b456a72f1b5d602081a037e2", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::position_before_rarrow;\n+use clippy_utils::source::{position_before_rarrow, snippet_opt};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit::FnKind;\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n@@ -125,17 +125,16 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n }\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n-    let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n-            (\n-                #[allow(clippy::cast_possible_truncation)]\n-                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                Applicability::MachineApplicable,\n-            )\n-        })\n-    } else {\n-        (ty.span, Applicability::MaybeIncorrect)\n-    };\n+    let (ret_span, appl) =\n+        snippet_opt(cx, span.with_hi(ty.span.hi())).map_or((ty.span, Applicability::MaybeIncorrect), |fn_source| {\n+            position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+                (\n+                    #[allow(clippy::cast_possible_truncation)]\n+                    ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                    Applicability::MachineApplicable,\n+                )\n+            })\n+        });\n     span_lint_and_sugg(\n         cx,\n         UNUSED_UNIT,"}]}