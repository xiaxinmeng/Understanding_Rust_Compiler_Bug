{"sha": "69fe4d6f92424441115ee521bfff951eb0493af4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZmU0ZDZmOTI0MjQ0NDExMTVlZTUyMWJmZmY5NTFlYjA0OTNhZjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-30T14:33:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-30T14:33:55Z"}, "message": "Workaround some missing encodings in cranelift", "tree": {"sha": "263a2ef188515ecbd0f35a472c9431507bb17266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263a2ef188515ecbd0f35a472c9431507bb17266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69fe4d6f92424441115ee521bfff951eb0493af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69fe4d6f92424441115ee521bfff951eb0493af4", "html_url": "https://github.com/rust-lang/rust/commit/69fe4d6f92424441115ee521bfff951eb0493af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69fe4d6f92424441115ee521bfff951eb0493af4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3965a65a79b38797480e1a27d4286ef16f747015", "url": "https://api.github.com/repos/rust-lang/rust/commits/3965a65a79b38797480e1a27d4286ef16f747015", "html_url": "https://github.com/rust-lang/rust/commit/3965a65a79b38797480e1a27d4286ef16f747015"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "9e247964f32b66f2ba01029cb83522b7ddafa2f9", "filename": "example/example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69fe4d6f92424441115ee521bfff951eb0493af4/example%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fe4d6f92424441115ee521bfff951eb0493af4/example%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fexample.rs?ref=69fe4d6f92424441115ee521bfff951eb0493af4", "patch": "@@ -192,3 +192,7 @@ pub struct StrWrapper {\n fn str_wrapper_get(w: &StrWrapper) -> &str {\n     &w.s\n }\n+\n+fn i16_as_i8(a: i16) -> i8 {\n+    a as i8\n+}"}, {"sha": "c9b09be83ea4ac60ff10bbaeae08de0c3058ee61", "filename": "src/base.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69fe4d6f92424441115ee521bfff951eb0493af4/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fe4d6f92424441115ee521bfff951eb0493af4/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=69fe4d6f92424441115ee521bfff951eb0493af4", "patch": "@@ -158,6 +158,11 @@ fn verify_func(tcx: TyCtxt, writer: crate::pretty_clif::CommentWriter, func: &Fu\n \n fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) {\n     for (bb, bb_data) in fx.mir.basic_blocks().iter_enumerated() {\n+        if bb_data.is_cleanup {\n+            // Unwinding after panicking is not supported\n+            continue;\n+        }\n+\n         let ebb = fx.get_ebb(bb);\n         fx.bcx.switch_to_block(ebb);\n \n@@ -523,13 +528,27 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (ty::Int(_), ty::Float(_)) => {\n+                            let from_ty = fx.cton_type(from_ty).unwrap();\n                             let from = operand.load_value(fx);\n+                            // FIXME missing encoding for fcvt_from_sint.f32.i8\n+                            let from = if from_ty == types::I8 || from_ty == types::I16 {\n+                                fx.bcx.ins().sextend(types::I32, from)\n+                            } else {\n+                                from\n+                            };\n                             let f_type = fx.cton_type(to_ty).unwrap();\n                             let res = fx.bcx.ins().fcvt_from_sint(f_type, from);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (ty::Uint(_), ty::Float(_)) => {\n+                            let from_ty = fx.cton_type(from_ty).unwrap();\n                             let from = operand.load_value(fx);\n+                            // FIXME missing encoding for fcvt_from_uint.f32.i8\n+                            let from = if from_ty == types::I8 || from_ty == types::I16 {\n+                                fx.bcx.ins().uextend(types::I32, from)\n+                            } else {\n+                                from\n+                            };\n                             let f_type = fx.cton_type(to_ty).unwrap();\n                             let res = fx.bcx.ins().fcvt_from_uint(f_type, from);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));"}, {"sha": "b11ab0445d3f3d3da3c98bb9c3c23cddbb91d39b", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69fe4d6f92424441115ee521bfff951eb0493af4/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fe4d6f92424441115ee521bfff951eb0493af4/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=69fe4d6f92424441115ee521bfff951eb0493af4", "patch": "@@ -116,10 +116,11 @@ impl<'tcx> CValue<'tcx> {\n                     size: layout.size.bytes() as u32,\n                     offset: None,\n                 });\n-                fx.bcx.ins().stack_store(value, stack_slot, 0);\n-                fx.bcx\n+                let addr = fx.bcx\n                     .ins()\n-                    .stack_addr(fx.module.pointer_type(), stack_slot, 0)\n+                    .stack_addr(fx.module.pointer_type(), stack_slot, 0);\n+                fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n+                addr\n             }\n             CValue::ByValPair(value, extra, layout) => {\n                 let stack_slot = fx.bcx.create_stack_slot(StackSlotData {"}]}