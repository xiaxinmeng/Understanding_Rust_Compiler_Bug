{"sha": "a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "node_id": "C_kwDOAAsO6NoAKGE4OTU0ZjFmNmEyMjQ1Nzk0ZmY0MWRiOWIxY2JhMzNhNzZlN2Q1Zjk", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-11-24T11:12:54Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-11-24T11:12:54Z"}, "message": "Stop peeling the last iteration of the loop in `Vec::repeat_with`", "tree": {"sha": "3f1cf4a5f01fdada8e1c6d9c6a4c63da4593d54e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f1cf4a5f01fdada8e1c6d9c6a4c63da4593d54e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "html_url": "https://github.com/rust-lang/rust/commit/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c966e7f15a46cc015e7acfde4650b45fee55168", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c966e7f15a46cc015e7acfde4650b45fee55168", "html_url": "https://github.com/rust-lang/rust/commit/1c966e7f15a46cc015e7acfde4650b45fee55168"}], "stats": {"total": 12, "additions": 1, "deletions": 11}, "files": [{"sha": "94ebcb863a421153b4d444108c0907bad220c65a", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "patch": "@@ -2163,7 +2163,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     {\n         let len = self.len();\n         if new_len > len {\n-            self.extend_with(new_len - len, ExtendFunc(f));\n+            self.extend_trusted(iter::repeat_with(f).take(new_len - len));\n         } else {\n             self.truncate(new_len);\n         }\n@@ -2491,16 +2491,6 @@ impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n     }\n }\n \n-struct ExtendFunc<F>(F);\n-impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {\n-    fn next(&mut self) -> T {\n-        (self.0)()\n-    }\n-    fn last(mut self) -> T {\n-        (self.0)()\n-    }\n-}\n-\n impl<T, A: Allocator> Vec<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n     /// Extend the vector by `n` values, using the given generator."}]}