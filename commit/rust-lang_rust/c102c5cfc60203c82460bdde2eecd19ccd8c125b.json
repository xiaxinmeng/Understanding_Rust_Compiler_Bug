{"sha": "c102c5cfc60203c82460bdde2eecd19ccd8c125b", "node_id": "C_kwDOAAsO6NoAKGMxMDJjNWNmYzYwMjAzYzgyNDYwYmRkZTJlZWNkMTljY2Q4YzEyNWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-19T10:53:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-19T10:53:53Z"}, "message": "Auto merge of #96020 - martingms:optimize-relate_substs, r=nnethercote\n\nMicro-optimize `ty::relate::relate_substs` by avoiding `match`\n\nWas a top-20 hot function in a callgrind profile of compiling `bitmaps-3.1.0`.\n\nYields some small speedups on that crate and some others according to local benching:\n\nBenchmark | Profile | Scenario | % Change | Significance Factor?\n-- | -- | -- | -- | --\nbitmaps-3.1.0 | check | full | -1.88% | 9.42x\nbitmaps-3.1.0 | debug | full | -1.80% | 8.99x\nbitmaps-3.1.0 | opt | full | -1.70% | 8.49x\nbitmaps-3.1.0 | check | incr-full | -1.54% | 7.68x\ndeep-vector | debug | full | 1.52% | 7.61x\nbitmaps-3.1.0 | debug | incr-full | -1.45% | 7.26x\nbitmaps-3.1.0 | opt | incr-full | -1.39% | 6.95x\nnalgebra-0.30.1 | check | full | -0.68% | 3.42x\nnalgebra-0.30.1 | debug | full | -0.64% | 3.22x\nnalgebra-0.30.1 | opt | full | -0.64% | 3.20x\nprojection-caching | check | full | -0.61% | 3.05x\nnalgebra-0.30.1 | check | incr-full | -0.56% | 2.78x\nnalgebra-0.30.1 | opt | incr-full | -0.54% | 2.72x\nnalgebra-0.30.1 | debug | incr-full | -0.54% | 2.69x\nprojection-caching | check | incr-full | -0.50% | 2.51x\ntt-muncher | opt | full | -0.48% | 2.42x\nprojection-caching | opt | full | -0.47% | 2.37x\nprojection-caching | debug | full | -0.47% | 2.35x\nprojection-caching | opt | incr-full | -0.44% | 2.21x\nprojection-caching | debug | incr-full | -0.42% | 2.08x\ndeeply-nested-multi | check | incr-full | 0.37% | 1.87x\nwf-projection-stress-65510 | opt | full | -0.37% | 1.84x\ndeep-vector | debug | incr-patched: add vec item | -0.32% | 1.61x\nprojection-caching | debug | incr-unchanged | -0.32% | 1.60x\nwf-projection-stress-65510 | check | full | -0.31% | 1.55x\nprojection-caching | opt | incr-unchanged | -0.31% | 1.53x\nwf-projection-stress-65510 | debug | incr-full | -0.30% | 1.51x\nwf-projection-stress-65510 | opt | incr-full | -0.30% | 1.51x\n\nr? `@nnethercote`", "tree": {"sha": "0fa5667a4c263401d6270c1816e15e31c330da10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa5667a4c263401d6270c1816e15e31c330da10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c102c5cfc60203c82460bdde2eecd19ccd8c125b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c102c5cfc60203c82460bdde2eecd19ccd8c125b", "html_url": "https://github.com/rust-lang/rust/commit/c102c5cfc60203c82460bdde2eecd19ccd8c125b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c102c5cfc60203c82460bdde2eecd19ccd8c125b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357", "html_url": "https://github.com/rust-lang/rust/commit/e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357"}, {"sha": "19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b", "html_url": "https://github.com/rust-lang/rust/commit/19dedf3a4b6cfd42ec46949b1d0c4416dd80d11b"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "0ca0fe33614f826600589d69fd0edfcea9b14d9e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -567,11 +567,17 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n             // Avoid fetching the variance if we are in an invariant\n             // context; no need, and it can induce dependency cycles\n             // (e.g., #41849).\n-            relate::relate_substs(self, None, a_subst, b_subst)\n+            relate::relate_substs(self, a_subst, b_subst)\n         } else {\n             let tcx = self.tcx();\n             let opt_variances = tcx.variances_of(item_def_id);\n-            relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)\n+            relate::relate_substs_with_variances(\n+                self,\n+                item_def_id,\n+                &opt_variances,\n+                a_subst,\n+                b_subst,\n+            )\n         }\n     }\n "}, {"sha": "ef6d464d3c6f101bad711e81647aa88450a4857b", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n         // performing trait matching (which then performs equality\n         // unification).\n \n-        relate::relate_substs(self, None, a_subst, b_subst)\n+        relate::relate_substs(self, a_subst, b_subst)\n     }\n \n     fn relate_with_variance<T: Relate<'tcx>>("}, {"sha": "4c1160e21fec2bf715d8257f46082faba65f2916", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c102c5cfc60203c82460bdde2eecd19ccd8c125b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c102c5cfc60203c82460bdde2eecd19ccd8c125b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c102c5cfc60203c82460bdde2eecd19ccd8c125b", "patch": "@@ -61,7 +61,7 @@ pub trait TypeRelation<'tcx>: Sized {\n \n         let tcx = self.tcx();\n         let opt_variances = tcx.variances_of(item_def_id);\n-        relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)\n+        relate_substs_with_variances(self, item_def_id, opt_variances, a_subst, b_subst)\n     }\n \n     /// Switch variance for the purpose of relating `a` and `b`.\n@@ -135,29 +135,34 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n     }\n }\n \n+#[inline]\n pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n-    variances: Option<(DefId, &[ty::Variance])>,\n+    a_subst: SubstsRef<'tcx>,\n+    b_subst: SubstsRef<'tcx>,\n+) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n+    relation.tcx().mk_substs(iter::zip(a_subst, b_subst).map(|(a, b)| {\n+        relation.relate_with_variance(ty::Invariant, ty::VarianceDiagInfo::default(), a, b)\n+    }))\n+}\n+\n+pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n+    relation: &mut R,\n+    ty_def_id: DefId,\n+    variances: &[ty::Variance],\n     a_subst: SubstsRef<'tcx>,\n     b_subst: SubstsRef<'tcx>,\n ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n     let tcx = relation.tcx();\n-    let mut cached_ty = None;\n \n+    let mut cached_ty = None;\n     let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n-        let (variance, variance_info) = match variances {\n-            Some((ty_def_id, variances)) => {\n-                let variance = variances[i];\n-                let variance_info = if variance == ty::Invariant {\n-                    let ty = *cached_ty\n-                        .get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));\n-                    ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n-                } else {\n-                    ty::VarianceDiagInfo::default()\n-                };\n-                (variance, variance_info)\n-            }\n-            None => (ty::Invariant, ty::VarianceDiagInfo::default()),\n+        let variance = variances[i];\n+        let variance_info = if variance == ty::Invariant {\n+            let ty = *cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));\n+            ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n+        } else {\n+            ty::VarianceDiagInfo::default()\n         };\n         relation.relate_with_variance(variance, variance_info, a, b)\n     });\n@@ -318,7 +323,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n         if a.def_id != b.def_id {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n-            let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+            let substs = relate_substs(relation, a.substs, b.substs)?;\n             Ok(ty::TraitRef { def_id: a.def_id, substs })\n         }\n     }\n@@ -334,7 +339,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n         if a.def_id != b.def_id {\n             Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n-            let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+            let substs = relate_substs(relation, a.substs, b.substs)?;\n             Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })\n         }\n     }\n@@ -554,7 +559,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))\n             if a_def_id == b_def_id =>\n         {\n-            let substs = relate_substs(relation, None, a_substs, b_substs)?;\n+            let substs = relate_substs(relation, a_substs, b_substs)?;\n             Ok(tcx.mk_opaque(a_def_id, substs))\n         }\n \n@@ -742,7 +747,7 @@ impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {\n         a: ty::ClosureSubsts<'tcx>,\n         b: ty::ClosureSubsts<'tcx>,\n     ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {\n-        let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+        let substs = relate_substs(relation, a.substs, b.substs)?;\n         Ok(ty::ClosureSubsts { substs })\n     }\n }\n@@ -753,7 +758,7 @@ impl<'tcx> Relate<'tcx> for ty::GeneratorSubsts<'tcx> {\n         a: ty::GeneratorSubsts<'tcx>,\n         b: ty::GeneratorSubsts<'tcx>,\n     ) -> RelateResult<'tcx, ty::GeneratorSubsts<'tcx>> {\n-        let substs = relate_substs(relation, None, a.substs, b.substs)?;\n+        let substs = relate_substs(relation, a.substs, b.substs)?;\n         Ok(ty::GeneratorSubsts { substs })\n     }\n }\n@@ -764,7 +769,7 @@ impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {\n         a: SubstsRef<'tcx>,\n         b: SubstsRef<'tcx>,\n     ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n-        relate_substs(relation, None, a, b)\n+        relate_substs(relation, a, b)\n     }\n }\n "}]}