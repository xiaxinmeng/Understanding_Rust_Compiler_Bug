{"sha": "b83167cf91bf9996e2cd2ad23e13181cee6618d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzE2N2NmOTFiZjk5OTZlMmNkMmFkMjNlMTMxODFjZWU2NjE4ZDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T19:12:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T19:19:40Z"}, "message": "rt: Make comparison through type vars work", "tree": {"sha": "584b0d67c27228965138ef7be750770283e01af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584b0d67c27228965138ef7be750770283e01af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83167cf91bf9996e2cd2ad23e13181cee6618d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83167cf91bf9996e2cd2ad23e13181cee6618d3", "html_url": "https://github.com/rust-lang/rust/commit/b83167cf91bf9996e2cd2ad23e13181cee6618d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83167cf91bf9996e2cd2ad23e13181cee6618d3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9363f01a1c2f00c6ef1cd9cd1882279419434a7", "html_url": "https://github.com/rust-lang/rust/commit/f9363f01a1c2f00c6ef1cd9cd1882279419434a7"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "8bbb090d826b140bfd8a6e125a59d1283e961663", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b83167cf91bf9996e2cd2ad23e13181cee6618d3/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b83167cf91bf9996e2cd2ad23e13181cee6618d3/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=b83167cf91bf9996e2cd2ad23e13181cee6618d3", "patch": "@@ -314,7 +314,6 @@ class arena {\n     inline T *alloc(size_t count = 1) {\n         // FIXME: align\n         size_t sz = count * sizeof(T);\n-        //DPRINT(\"size is %lu\\n\", sz);\n         T *rv = (T *)ptr;\n         ptr += sz;\n         if (ptr > &data[ARENA_SIZE]) {\n@@ -366,8 +365,6 @@ struct type_param {\n template<typename T>\n void\n ctxt<T>::walk(bool align) {\n-    fprintf(stderr, \"walking %d\\n\", *sp);\n-\n     switch (*sp++) {\n     case SHAPE_U8:      WALK_NUMBER(uint8_t);   break;\n     case SHAPE_U16:     WALK_NUMBER(uint16_t);  break;\n@@ -778,7 +775,7 @@ size_of::compute_tag_size(tag_info &tinfo) {\n         const uint8_t *variant_ptr = variant_ptr_and_end.first;\n         const uint8_t *variant_end = variant_ptr_and_end.second;\n \n-        size_of sub(*this, variant_ptr, params, NULL);\n+        size_of sub(*this, variant_ptr, tinfo.params, NULL);\n \n         // Compute the size of this variant.\n         size_align variant_sa;\n@@ -903,7 +900,11 @@ class data : public ctxt< data<T,U> > {\n     }\n \n     void walk_var(bool align, uint8_t param_index) {\n-        static_cast<T *>(this)->walk_var(align, param_index);\n+        const type_param *param = &this->params[param_index];\n+        T sub(*static_cast<T *>(this), param->shape, param->params,\n+              param->tables);\n+        sub.walk(align);\n+        static_cast<T *>(this)->walk_subcontext(align, sub);\n     }\n \n     template<typename W>\n@@ -947,7 +948,6 @@ data<T,U>::get_ivec_data_range(uint8_t *dp) {\n template<typename T,typename U>\n std::pair<ptr_pair,ptr_pair>\n data<T,U>::get_ivec_data_range(ptr_pair &dp) {\n-    fprintf(stderr, \"get_ivec_data_range %p/%p\\n\", dp.fst, dp.snd);\n     std::pair<uint8_t *,uint8_t *> fst = get_ivec_data_range(dp.fst);\n     std::pair<uint8_t *,uint8_t *> snd = get_ivec_data_range(dp.snd);\n     ptr_pair start(fst.first, snd.first);\n@@ -1007,12 +1007,19 @@ class copy : public data<copy,uint8_t *> {\n // Structural comparison glue.\n \n class cmp : public data<cmp,ptr_pair> {\n+    friend class data<cmp,ptr_pair>;\n+\n private:\n     template<typename T>\n     void cmp_number(const data_pair<T> &nums) {\n         result = (nums.fst < nums.snd) ? -1 : (nums.fst == nums.snd) ? 0 : 1;\n     }\n \n+    void walk_subcontext(bool align, cmp &sub) {\n+        sub.walk(align);\n+        result = sub.result;\n+    }\n+\n public:\n     int result;\n \n@@ -1058,31 +1065,19 @@ class cmp : public data<cmp,ptr_pair> {\n \n template<>\n void cmp::cmp_number<int32_t>(const data_pair<int32_t> &nums) {\n-    fprintf(stderr, \"cmp %d/%d\\n\", nums.fst, nums.snd);\n     result = (nums.fst < nums.snd) ? -1 : (nums.fst == nums.snd) ? 0 : 1;\n }\n \n void\n cmp::walk_ivec(bool align, bool is_pod, size_align &elem_sa) {\n     std::pair<ptr_pair,ptr_pair> data_range = get_ivec_data_range(dp);\n \n-    DPRINT(\"walk_ivec %p/%p\\n\", data_range.first.fst, data_range.first.snd);\n-\n     cmp sub(*this, data_range.first);\n     ptr_pair data_end = data_range.second;\n     while (!result && sub.dp < data_end) {\n-        DPRINT(\"walk_ivec elem %p/%p %p/%p\\n\", sub.dp.fst, sub.dp.snd,\n-               data_end.fst, data_end.snd);\n-        DPRINTCX(&sub);\n-        DPRINT(\"\\nend\\n\");\n-\n         sub.walk_reset(align);\n-        DPRINT(\"result = %d\\n\", sub.result);\n         result = sub.result;\n         align = true;\n-\n-        DPRINT(\"walk_ivec after elem %p/%p %p/%p\\n\", sub.dp.fst, sub.dp.snd,\n-               data_end.fst, data_end.snd);\n     }\n \n     if (!result) {\n@@ -1130,7 +1125,7 @@ void\n cmp::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n                   const std::pair<const uint8_t *,const uint8_t *>\n                   variant_ptr_and_end) {\n-    cmp sub(*this, variant_ptr_and_end.first);\n+    cmp sub(*this, variant_ptr_and_end.first, tinfo.params);\n \n     const uint8_t *variant_end = variant_ptr_and_end.second;\n     while (!result && sub.sp < variant_end) {\n@@ -1146,8 +1141,6 @@ extern \"C\" void\n upcall_cmp_type(int8_t *result, rust_task *task, type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n-    fprintf(stderr, \"cmp_type\\n\");\n-\n     shape::arena arena;\n     shape::type_param *params = shape::type_param::make(tydesc, arena);\n     shape::cmp cmp(task, tydesc->shape, params, tydesc->shape_tables, data_0,"}]}