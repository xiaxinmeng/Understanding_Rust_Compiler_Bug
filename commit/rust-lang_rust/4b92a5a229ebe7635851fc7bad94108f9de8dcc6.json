{"sha": "4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTJhNWEyMjllYmU3NjM1ODUxZmM3YmFkOTQxMDhmOWRlOGRjYzY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-25T22:01:16Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-26T23:30:36Z"}, "message": "Rebasing changes", "tree": {"sha": "a8008344fa0d47c27e882bc2942bcd95f50f985b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8008344fa0d47c27e882bc2942bcd95f50f985b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "html_url": "https://github.com/rust-lang/rust/commit/4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbde7419cc120d97e520063682751dfc3a901fb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbde7419cc120d97e520063682751dfc3a901fb5", "html_url": "https://github.com/rust-lang/rust/commit/dbde7419cc120d97e520063682751dfc3a901fb5"}], "stats": {"total": 69, "additions": 30, "deletions": 39}, "files": [{"sha": "bccd2a1198a4bb00b11b8204ea51a2c6bc3af9cc", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -3330,10 +3330,10 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n+    use super::*;\n     use prelude::*;\n     use test::Bencher;\n     use test::black_box;\n-    use super::*;\n \n     #[bench]\n     fn char_iterator(b: &mut Bencher) {"}, {"sha": "c0d5d6b11cf7ea8d89462fbe6ecc7c48c85f1501", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -77,7 +77,7 @@ use std::mem;\n use std::ops;\n use std::rc::Rc;\n use collections::enum_set::{EnumSet, CLike};\n-use std::collections::hash_map::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, DUMMY_NODE_ID, Ident, ItemTrait, LOCAL_CRATE};\n@@ -105,7 +105,7 @@ pub struct CrateAnalysis<'tcx> {\n     pub ty_cx: ty::ctxt<'tcx>,\n     pub reachable: NodeSet,\n     pub name: String,\n-    pub glob_map: Option<middle::resolve::GlobMap>,\n+    pub glob_map: Option<GlobMap>,\n }\n \n #[deriving(Copy, PartialEq, Eq, Hash)]\n@@ -6286,6 +6286,10 @@ pub type CaptureModeMap = NodeMap<ast::CaptureClause>;\n // Trait method resolution\n pub type TraitMap = NodeMap<Vec<DefId>>;\n \n+// Map from the NodeId of a glob import to a list of items which are actually\n+// imported.\n+pub type GlobMap = HashMap<NodeId, HashSet<Name>>;\n+\n pub fn with_freevars<T, F>(tcx: &ty::ctxt, fid: ast::NodeId, f: F) -> T where\n     F: FnOnce(&[Freevar]) -> T,\n {"}, {"sha": "4ab5c19430b5c1e30466c2bf495e5f7b07d65e56", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -343,10 +343,11 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                           middle::lang_items::collect_language_items(krate, &sess));\n \n     let make_glob_map = if save_analysis(&sess) {\n-        middle::resolve::MakeGlobMap::Yes\n+        resolve::MakeGlobMap::Yes\n     } else {\n-        middle::resolve::MakeGlobMap::No\n+        resolve::MakeGlobMap::No\n     };\n+    let resolve::CrateMap {\n         def_map,\n         freevars,\n         capture_mode_map,\n@@ -358,6 +359,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     } =\n         time(time_passes, \"resolution\", (),\n              |_| resolve::resolve_crate(&sess,\n+                                        &ast_map,\n                                         &lang_items,\n                                         krate,\n                                         make_glob_map));"}, {"sha": "78527315199ca3d044c40743789cdafeb51d1dd3", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -33,19 +33,19 @@ struct UnusedImportCheckVisitor<'a, 'b:'a, 'tcx:'b> {\n }\n \n // Deref and DerefMut impls allow treating UnusedImportCheckVisitor as Resolver.\n-impl<'a, 'b, 'tcx> Deref<Resolver<'b, 'tcx>> for UnusedImportCheckVisitor<'a, 'b, 'tcx:'b> {\n+impl<'a, 'b, 'tcx:'b> Deref<Resolver<'b, 'tcx>> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b, 'tcx> DerefMut<Resolver<'b, 'tcx>> for UnusedImportCheckVisitor<'a, 'b, 'tcx:'b> {\n+impl<'a, 'b, 'tcx:'b> DerefMut<Resolver<'b, 'tcx>> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> {\n         &mut *self.resolver\n     }\n }\n \n-impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     // We have information about whether `use` (import) directives are actually used now.\n     // If an import is not used at all, we signal a lint error. If an import is only used\n     // for a single namespace, we remove the other namespace from the recorded privacy"}, {"sha": "720883a8e9a5432ed5ecc842c6bd96253e6ef08e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -55,7 +55,7 @@ use rustc::middle::lang_items::LanguageItems;\n use rustc::middle::pat_util::pat_bindings;\n use rustc::middle::privacy::*;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n-use rustc::middle::ty::{CaptureModeMap, Freevar, FreevarMap, TraitMap};\n+use rustc::middle::ty::{CaptureModeMap, Freevar, FreevarMap, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n use rustc::util::lev_distance::lev_distance;\n \n@@ -66,7 +66,7 @@ use syntax::ast::{ExprPath, ExprStruct, FnDecl};\n use syntax::ast::{ForeignItem, ForeignItemFn, ForeignItemStatic, Generics};\n use syntax::ast::{Ident, ImplItem, Item, ItemConst, ItemEnum, ItemFn};\n use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic};\n-use syntax::ast::{ItemStruct, ItemTrait, ItemTy, Local};\n+use syntax::ast::{ItemStruct, ItemTrait, ItemTy, Local, LOCAL_CRATE};\n use syntax::ast::{MethodImplItem, Mod, Name, NamedField, NodeId};\n use syntax::ast::{Pat, PatEnum, PatIdent, PatLit};\n use syntax::ast::{PatRange, PatStruct, Path, PathListIdent, PathListMod};\n@@ -110,10 +110,6 @@ struct BindingInfo {\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name, BindingInfo>;\n \n-// Map from the NodeId of a glob import to a list of items which are actually\n-// imported.\n-pub type GlobMap = HashMap<NodeId, HashSet<Name>>;\n-\n #[deriving(Copy, PartialEq)]\n enum PatternBindingMode {\n     RefutableMode,\n@@ -970,20 +966,6 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n \n }\n \n-<<<<<<< HEAD:src/librustc_resolve/lib.rs\n-=======\n-struct UnusedImportCheckVisitor<'a, 'b:'a, 'tcx:'b> {\n-    resolver: &'a mut Resolver<'b, 'tcx>\n-}\n-\n-impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n-    fn visit_view_item(&mut self, vi: &ViewItem) {\n-        self.resolver.check_for_item_unused_imports(vi);\n-        visit::walk_view_item(self, vi);\n-    }\n-}\n-\n->>>>>>> save-analysis: emit names of items that a glob import actually imports.:src/librustc/middle/resolve.rs\n #[deriving(PartialEq)]\n enum FallbackChecks {\n     Everything,"}, {"sha": "80659152f9fc77450dafbae2a5cb26cb4f74b307", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -27,24 +27,24 @@ use syntax::parse::token;\n \n use std::rc::Rc;\n \n-struct ExportRecorder<'a, 'b:'a> {\n-    resolver: &'a mut Resolver<'b>\n+struct ExportRecorder<'a, 'b:'a, 'tcx:'b> {\n+    resolver: &'a mut Resolver<'b, 'tcx>\n }\n \n // Deref and DerefMut impls allow treating ExportRecorder as Resolver.\n-impl<'a, 'b> Deref<Resolver<'b>> for ExportRecorder<'a, 'b> {\n-    fn deref<'c>(&'c self) -> &'c Resolver<'b> {\n+impl<'a, 'b, 'tcx:'b> Deref<Resolver<'b, 'tcx>> for ExportRecorder<'a, 'b, 'tcx> {\n+    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b> DerefMut<Resolver<'b>> for ExportRecorder<'a, 'b> {\n-    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b> {\n+impl<'a, 'b, 'tcx:'b> DerefMut<Resolver<'b, 'tcx>> for ExportRecorder<'a, 'b, 'tcx> {\n+    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> {\n         &mut *self.resolver\n     }\n }\n \n-impl<'a, 'b> ExportRecorder<'a, 'b> {\n+impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n     fn record_exports_for_module_subtree(&mut self,\n                                          module_: Rc<Module>) {\n         // If this isn't a local krate, then bail out. We don't need to record"}, {"sha": "fb369924c64b11b235a85d1d94106748ab433b4a", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -534,13 +534,12 @@ pub unsafe fn from_c_multistring<F>(buf: *const libc::c_char,\n \n #[cfg(test)]\n mod tests {\n+    use super::*;\n     use prelude::*;\n     use ptr;\n     use thread::Thread;\n     use libc;\n \n-    use super::*;\n-\n     #[test]\n     fn test_str_multistring_parsing() {\n         unsafe {"}, {"sha": "d941665f0482f30b876cb8de6c5936664d2f2c55", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -448,7 +448,9 @@ static dot_dot_static: &'static [u8] = b\"..\";\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use prelude::*;\n+    use prelude::Option::{mod, Some, None};\n+    use prelude::{Vec, Clone, AsSlice, SliceExt, CloneSliceExt, IteratorExt};\n+    use prelude::{DoubleEndedIteratorExt, Str, StrExt, ToString, GenericPath};\n     use str;\n \n     macro_rules! t {"}, {"sha": "12da1752adf9cae8b8cc64eaa8fabcbc50a55a9f", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b92a5a229ebe7635851fc7bad94108f9de8dcc6/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=4b92a5a229ebe7635851fc7bad94108f9de8dcc6", "patch": "@@ -1121,8 +1121,10 @@ fn prefix_len(p: Option<PathPrefix>) -> uint {\n \n #[cfg(test)]\n mod tests {\n-    use mem;\n     use super::*;\n+    use prelude::Option::{mod, Some, None};\n+    use prelude::{Vec, Clone, AsSlice, SliceExt, CloneSliceExt, IteratorExt};\n+    use prelude::{DoubleEndedIteratorExt, Str, ToString, GenericPath};\n     use super::PathPrefix::*;\n     use super::parse_prefix;\n "}]}