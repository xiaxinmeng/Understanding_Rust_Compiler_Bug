{"sha": "e6225434fff7d493baac0aa91c57f2da923ea196", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MjI1NDM0ZmZmN2Q0OTNiYWFjMGFhOTFjNTdmMmRhOTIzZWExOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-04T07:11:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-04T07:11:41Z"}, "message": "Auto merge of #78177 - benjaminp:cleanups, r=jyn514\n\nA few miscellaneous comment fixes and a tiny code clarification.", "tree": {"sha": "b3cd7595de873a7c3376c83936ec3de4d2f76396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cd7595de873a7c3376c83936ec3de4d2f76396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6225434fff7d493baac0aa91c57f2da923ea196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6225434fff7d493baac0aa91c57f2da923ea196", "html_url": "https://github.com/rust-lang/rust/commit/e6225434fff7d493baac0aa91c57f2da923ea196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6225434fff7d493baac0aa91c57f2da923ea196/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9dd18ca749801a19d85bfb424ae12011a8ff894", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9dd18ca749801a19d85bfb424ae12011a8ff894", "html_url": "https://github.com/rust-lang/rust/commit/e9dd18ca749801a19d85bfb424ae12011a8ff894"}, {"sha": "504f136c74fb48967e0cddc8c05481b7fc1bac52", "url": "https://api.github.com/repos/rust-lang/rust/commits/504f136c74fb48967e0cddc8c05481b7fc1bac52", "html_url": "https://github.com/rust-lang/rust/commit/504f136c74fb48967e0cddc8c05481b7fc1bac52"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "39043980dc4f12698f759f214cd0272136399197", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e6225434fff7d493baac0aa91c57f2da923ea196", "patch": "@@ -24,9 +24,9 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n         // as-is, we need to do some extra work here in order to make sure\n         // that function subtyping works correctly with respect to regions\n         //\n-        // Note: this is a subtle algorithm.  For a full explanation,\n-        // please see the large comment at the end of the file in the (inlined) module\n-        // `doc`.\n+        // Note: this is a subtle algorithm.  For a full explanation, please see\n+        // the rustc dev guide:\n+        // <https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/placeholders_and_universes.html>\n \n         let span = self.trace.cause.span;\n "}, {"sha": "497754f20e4c5ce9b896f7f76f20ed76e0de1c07", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=e6225434fff7d493baac0aa91c57f2da923ea196", "patch": "@@ -67,22 +67,18 @@ impl<'tcx> Bounds<'tcx> {\n \n         sized_predicate\n             .into_iter()\n+            .chain(self.region_bounds.iter().map(|&(region_bound, span)| {\n+                let outlives = ty::OutlivesPredicate(param_ty, region_bound);\n+                (ty::Binder::bind(outlives).to_predicate(tcx), span)\n+            }))\n+            .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n+                let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);\n+                (predicate, span)\n+            }))\n             .chain(\n-                self.region_bounds\n+                self.projection_bounds\n                     .iter()\n-                    .map(|&(region_bound, span)| {\n-                        let outlives = ty::OutlivesPredicate(param_ty, region_bound);\n-                        (ty::Binder::bind(outlives).to_predicate(tcx), span)\n-                    })\n-                    .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n-                        let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);\n-                        (predicate, span)\n-                    }))\n-                    .chain(\n-                        self.projection_bounds\n-                            .iter()\n-                            .map(|&(projection, span)| (projection.to_predicate(tcx), span)),\n-                    ),\n+                    .map(|&(projection, span)| (projection.to_predicate(tcx), span)),\n             )\n             .collect()\n     }"}, {"sha": "891dd8b2f0228f98b44b75ae8d1bf59df41707a0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=e6225434fff7d493baac0aa91c57f2da923ea196", "patch": "@@ -765,13 +765,12 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             )\n         });\n \n-        // It is illegal to invoke a method on a trait instance that\n-        // refers to the `Self` type. An error will be reported by\n-        // `enforce_object_limitations()` if the method refers to the\n-        // `Self` type anywhere other than the receiver. Here, we use\n-        // a substitution that replaces `Self` with the object type\n-        // itself. Hence, a `&self` method will wind up with an\n-        // argument type like `&Trait`.\n+        // It is illegal to invoke a method on a trait instance that refers to\n+        // the `Self` type. An [`ObjectSafetyViolation::SupertraitSelf`] error\n+        // will be reported by `object_safety.rs` if the method refers to the\n+        // `Self` type anywhere other than the receiver. Here, we use a\n+        // substitution that replaces `Self` with the object type itself. Hence,\n+        // a `&self` method will wind up with an argument type like `&Trait`.\n         let trait_ref = principal.with_self_ty(self.tcx, self_ty);\n         self.elaborate_bounds(iter::once(trait_ref), |this, new_trait_ref, item| {\n             let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);"}, {"sha": "68b85a4da34f242ac43cc91a6135afc18baabada", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6225434fff7d493baac0aa91c57f2da923ea196/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=e6225434fff7d493baac0aa91c57f2da923ea196", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// The Writeback context. This visitor walks the AST, checking the\n+// The Writeback context. This visitor walks the HIR, checking the\n // fn-specific typeck results to find references to types or regions. It\n // resolves those regions to remove inference variables and writes the\n // final result back into the master typeck results in the tcx. Here and"}]}