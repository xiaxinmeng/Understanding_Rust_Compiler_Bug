{"sha": "b799cd83cc797b580be2d1492e6ae014848636ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OTljZDgzY2M3OTdiNTgwYmUyZDE0OTJlNmFlMDE0ODQ4NjM2ZWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-13T03:05:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-13T04:37:17Z"}, "message": "Remove SNAP comments", "tree": {"sha": "5fa701213be462c1f0fede3c20624a4808db9d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa701213be462c1f0fede3c20624a4808db9d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b799cd83cc797b580be2d1492e6ae014848636ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b799cd83cc797b580be2d1492e6ae014848636ee", "html_url": "https://github.com/rust-lang/rust/commit/b799cd83cc797b580be2d1492e6ae014848636ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b799cd83cc797b580be2d1492e6ae014848636ee/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "url": "https://api.github.com/repos/rust-lang/rust/commits/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "html_url": "https://github.com/rust-lang/rust/commit/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "35732dacd44f9aee58808895ae0a47daa42ce199", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -62,9 +62,9 @@ use core::ops::{Deref, DerefMut};\n use core::ptr::{Unique};\n use core::raw::{TraitObject};\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n use core::marker::Unsize;\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n use core::ops::CoerceUnsized;\n \n /// A value that represents the heap. This is the default place that the `box`\n@@ -396,5 +396,5 @@ impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+Send+'a> {\n     }\n }\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}"}, {"sha": "f2b83fdeefa3a8a0f2a8a143acc2886c9aaa3277", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -228,7 +228,7 @@ impl<T> !marker::Sync for Rc<T> {}\n #[cfg(not(stage0))]\n impl<T: ?Sized> !marker::Sync for Rc<T> {}\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n impl<T> Rc<T> {\n@@ -459,7 +459,7 @@ impl<T: ?Sized> Deref for Rc<T> {\n     }\n }\n \n-#[cfg(stage0)] // SNAP c64d671\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Rc<T> {\n     /// Drops the `Rc<T>`.\n@@ -510,7 +510,7 @@ impl<T> Drop for Rc<T> {\n     }\n }\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for Rc<T> {\n     /// Drops the `Rc<T>`.\n@@ -930,7 +930,7 @@ impl<T: ?Sized> Weak<T> {\n     }\n }\n \n-#[cfg(stage0)] // SNAP c64d671\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Weak<T> {\n     /// Drops the `Weak<T>`.\n@@ -975,7 +975,7 @@ impl<T> Drop for Weak<T> {\n     }\n }\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for Weak<T> {\n     /// Drops the `Weak<T>`."}, {"sha": "5909c5cc30e510dce250e58a7a01f0fa2d965ab4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -55,7 +55,7 @@ pub trait Sized {\n \n /// Types that can be \"unsized\" to a dynamically sized type.\n #[unstable(feature = \"core\")]\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n #[lang=\"unsize\"]\n pub trait Unsize<T> {\n     // Empty."}, {"sha": "173b73fdb0924366c269f8d2b31df974f44d9b5c", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -95,7 +95,7 @@ pub fn size_of<T>() -> usize {\n ///\n /// assert_eq!(4, mem::size_of_val(&5i32));\n /// ```\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n@@ -111,7 +111,7 @@ pub fn size_of_val<T: ?Sized>(val: &T) -> usize {\n ///\n /// assert_eq!(4, mem::size_of_val(&5i32));\n /// ```\n-#[cfg(stage0)] // SNAP c64d671\n+#[cfg(stage0)]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn size_of_val<T>(_val: &T) -> usize {\n@@ -144,7 +144,7 @@ pub fn min_align_of<T>() -> usize {\n ///\n /// assert_eq!(4, mem::min_align_of_val(&5i32));\n /// ```\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n@@ -160,7 +160,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n ///\n /// assert_eq!(4, mem::min_align_of_val(&5i32));\n /// ```\n-#[cfg(stage0)] // SNAP c64d671\n+#[cfg(stage0)]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn min_align_of_val<T>(_val: &T) -> usize {"}, {"sha": "59819fd500d1d25235ae95a1306c9a8504f60132", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -12,7 +12,7 @@\n \n use marker::Sized;\n use ops::Deref;\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n use ops::CoerceUnsized;\n \n /// Unsafe trait to indicate what types are usable with the NonZero struct\n@@ -57,5 +57,5 @@ impl<T: Zeroable> Deref for NonZero<T> {\n     }\n }\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<T: Zeroable+CoerceUnsized<U>, U: Zeroable> CoerceUnsized<NonZero<U>> for NonZero<T> {}"}, {"sha": "f16614cfd092d41df7269fc7f6a6cbcaf4a7ab26", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -70,7 +70,7 @@\n use marker::Sized;\n use fmt;\n \n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n use marker::Unsize;\n \n /// The `Drop` trait is used to run some code when a value goes out of scope. This\n@@ -1214,39 +1214,39 @@ mod impls {\n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n #[unstable(feature = \"core\")]\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n #[lang=\"coerce_unsized\"]\n pub trait CoerceUnsized<T> {\n     // Empty.\n }\n \n // &mut T -> &mut U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\n // &mut T -> &U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b mut T {}\n // &mut T -> *mut U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for &'a mut T {}\n // &mut T -> *const U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a mut T {}\n \n // &T -> &U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<'a, 'b: 'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n // &T -> *const U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a T {}\n \n // *mut T -> *mut U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n // *mut T -> *const U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n \n // *const T -> *const U\n-#[cfg(not(stage0))] // SNAP c64d671\n+#[cfg(not(stage0))]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}"}, {"sha": "8375061aa095b36e3993f50a50bd0abc29431d2f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b799cd83cc797b580be2d1492e6ae014848636ee/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b799cd83cc797b580be2d1492e6ae014848636ee", "patch": "@@ -309,7 +309,6 @@ register_diagnostics! {\n     E0034, // multiple applicable methods in scope\n     E0035, // does not take type parameters\n     E0036, // incorrect number of type parameters given for this method\n-    E0038, // cannot convert to a trait object because trait is not object-safe\n     E0040, // explicit use of destructor method\n     E0044, // foreign items may not have type parameters\n     E0045, // variadic function must have C calling convention"}]}