{"sha": "8e56729b4da52c56c51bbabf35c3999578d0b098", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTY3MjliNGRhNTJjNTZjNTFiYmFiZjM1YzM5OTk1NzhkMGIwOTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:19:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:19:26Z"}, "message": "Handle new ConstValue variants in mir\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "c252e9529ce3b1f7dd539ca8f4cf96840d9a72a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c252e9529ce3b1f7dd539ca8f4cf96840d9a72a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e56729b4da52c56c51bbabf35c3999578d0b098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e56729b4da52c56c51bbabf35c3999578d0b098", "html_url": "https://github.com/rust-lang/rust/commit/8e56729b4da52c56c51bbabf35c3999578d0b098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e56729b4da52c56c51bbabf35c3999578d0b098/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dfde8843885aec59c4cf90a424bf56e3658fc9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfde8843885aec59c4cf90a424bf56e3658fc9e", "html_url": "https://github.com/rust-lang/rust/commit/2dfde8843885aec59c4cf90a424bf56e3658fc9e"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "fdede054e15f304516dffe2c3c5d9f233c6363b7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -604,7 +604,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     search_stack.push((ty, hir_ty));\n                 }\n \n-                (UnpackedKind::Lifetime(_), _) | (UnpackedKind::Type(_), _) => {\n+                (UnpackedKind::Const(_ct), hir::GenericArg::Const(_hir_ct)) => {\n+                    // Lifetimes cannot be found in consts, so we don't need\n+                    // to search anything here.\n+                }\n+\n+                (UnpackedKind::Lifetime(_), _)\n+                | (UnpackedKind::Type(_), _)\n+                | (UnpackedKind::Const(_), _) => {\n                     // I *think* that HIR lowering should ensure this\n                     // doesn't happen, even in erroneous\n                     // programs. Else we should use delay-span-bug."}, {"sha": "bef159e996b8778a60902d2a71d7c7116a992f5c", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -99,6 +99,11 @@ impl<'a, 'gcx, 'tcx> ConstraintConversion<'a, 'gcx, 'tcx> {\n                     param_env,\n                 ).type_must_outlive(origin, t1, r2);\n             }\n+\n+            UnpackedKind::Const(_) => {\n+                // Consts cannot outlive one another, so we\n+                // don't need to handle any relations here.\n+            }\n         }\n     }\n "}, {"sha": "5b444ab9690ca7dcb76be567974639aa7097b78f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -2533,7 +2533,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                     ),\n                                 ))\n                             }\n-                            UnpackedKind::Type(_) => None,\n+                            UnpackedKind::Type(_) | UnpackedKind::Const(_) => None,\n                         }\n                     })\n                     .collect();"}, {"sha": "574506ed2329d4f7a1b9a5ea79530ad0120b3c1d", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -594,6 +594,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             self.layout_of(ty)\n         })?;\n         let op = match val.val {\n+            ConstValue::Param(_) => Err(EvalErrorKind::TooGeneric.into()),\n+            ConstValue::Infer(_) => bug!(),\n             ConstValue::ByRef(ptr, alloc) => {\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n                 // where none should happen -- and for `static mut`, we copy on demand anyway."}, {"sha": "1c6b1450be86230e2b40507023a6063d1db740d0", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::mir::*;\n-use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::query::Providers;\n@@ -450,12 +450,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n \n-        let substs = InternalSubsts::for_item(tcx, self.def_id, |param, _| {\n-            match param.kind {\n-                GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                GenericParamDefKind::Type {..} => ty.into(),\n-            }\n-        });\n+        let substs = tcx.mk_substs_trait(ty, &[]);\n \n         // `func == Clone::clone(&ty) -> ty`\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);"}, {"sha": "047731e3fe6a7bea4bd04ba1c6e9af9de64352bb", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -558,9 +558,10 @@ fn unsafe_derive_on_repr_packed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: D\n \n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n-    let message = if tcx.generics_of(def_id).own_counts().types != 0 {\n+    let counts = tcx.generics_of(def_id).own_counts();\n+    let message = if counts.types + counts.consts != 0 {\n         \"#[derive] can't be used on a #[repr(packed)] struct with \\\n-         type parameters (error E0133)\".to_string()\n+         type or const parameters (error E0133)\".to_string()\n     } else {\n         \"#[derive] can't be used on a #[repr(packed)] struct that \\\n          does not derive Copy (error E0133)\".to_string()"}, {"sha": "918375e426b7df606f30588a8b64a972fdf6be63", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e56729b4da52c56c51bbabf35c3999578d0b098/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=8e56729b4da52c56c51bbabf35c3999578d0b098", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         // inlining. This is to ensure that the final crate doesn't have MIR that\n         // reference unexported symbols\n         if callsite.callee.is_local() {\n-            if callsite.substs.types().count() == 0 && !hinted {\n+            if callsite.substs.non_erasable_generics().count() == 0 && !hinted {\n                 debug!(\"    callee is an exported function - not inlining\");\n                 return false;\n             }"}]}