{"sha": "816aee2501812c9e910c962c052a7166a37aa289", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmFlZTI1MDE4MTJjOWU5MTBjOTYyYzA1MmE3MTY2YTM3YWEyODk=", "commit": {"author": {"name": "Nadrieril Feneanar", "email": "Nadrieril@users.noreply.github.com", "date": "2019-11-06T14:51:24Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-06T15:09:03Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Mazdak Farrokhzad <twingoow@gmail.com>", "tree": {"sha": "89011658ad4b958ce25ffb953cb79f4394ec8bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89011658ad4b958ce25ffb953cb79f4394ec8bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816aee2501812c9e910c962c052a7166a37aa289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816aee2501812c9e910c962c052a7166a37aa289", "html_url": "https://github.com/rust-lang/rust/commit/816aee2501812c9e910c962c052a7166a37aa289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816aee2501812c9e910c962c052a7166a37aa289/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9531787ae5e8e6a4bfe629b9065233c87b61a654", "url": "https://api.github.com/repos/rust-lang/rust/commits/9531787ae5e8e6a4bfe629b9065233c87b61a654", "html_url": "https://github.com/rust-lang/rust/commit/9531787ae5e8e6a4bfe629b9065233c87b61a654"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "47f8c699e396e410380d272f6bfd45b3bef61a5c", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/816aee2501812c9e910c962c052a7166a37aa289/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816aee2501812c9e910c962c052a7166a37aa289/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=816aee2501812c9e910c962c052a7166a37aa289", "patch": "@@ -586,9 +586,9 @@ enum Constructor<'tcx> {\n     ConstantValue(&'tcx ty::Const<'tcx>, Span),\n     /// Ranges of literal values (`2..=5` and `2..5`).\n     ConstantRange(u128, u128, Ty<'tcx>, RangeEnd, Span),\n-    /// Array patterns of length n.\n+    /// Array patterns of length `n`.\n     FixedLenSlice(u64),\n-    /// Slice patterns. Captures any array constructor of length >= i+j.\n+    /// Slice patterns. Captures any array constructor of `length >= i + j`.\n     VarLenSlice(u64, u64),\n }\n \n@@ -616,8 +616,7 @@ impl<'tcx> std::cmp::PartialEq for Constructor<'tcx> {\n impl<'tcx> Constructor<'tcx> {\n     fn is_slice(&self) -> bool {\n         match self {\n-            FixedLenSlice { .. } => true,\n-            VarLenSlice { .. } => true,\n+            FixedLenSlice { .. } | VarLenSlice { .. } => true,\n             _ => false,\n         }\n     }\n@@ -687,13 +686,13 @@ impl<'tcx> Constructor<'tcx> {\n \n                 // For each used ctor, subtract from the current set of constructors.\n                 // Naming: we remove the \"neg\" constructors from the \"pos\" ones.\n-                // Remember, VarLenSlice(i, j) covers the union of FixedLenSlice from\n-                // i+j to infinity.\n+                // Remember, `VarLenSlice(i, j)` covers the union of `FixedLenSlice` from\n+                // `i + j` to infinity.\n                 for neg_ctor in other_ctors {\n                     remaining_ctors = remaining_ctors\n                         .into_iter()\n                         .flat_map(|pos_ctor| -> SmallVec<[Constructor<'tcx>; 1]> {\n-                            // Compute pos_ctor \\ neg_ctor\n+                            // Compute `pos_ctor \\ neg_ctor`.\n                             match (&pos_ctor, neg_ctor) {\n                                 (&FixedLenSlice(pos_len), &VarLenSlice(neg_prefix, neg_suffix)) => {\n                                     let neg_len = neg_prefix + neg_suffix;\n@@ -722,7 +721,7 @@ impl<'tcx> Constructor<'tcx> {\n                                     } else {\n                                         (pos_len..neg_len)\n                                             .map(FixedLenSlice)\n-                                            // We know neg_len + 1 >= pos_len >= pos_suffix\n+                                            // We know that `neg_len + 1 >= pos_len >= pos_suffix`.\n                                             .chain(Some(VarLenSlice(\n                                                 neg_len + 1 - pos_suffix,\n                                                 pos_suffix,\n@@ -2081,7 +2080,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n                 }\n \n                 // For diagnostics, we keep the prefix and suffix lengths separate, so in the case\n-                // where `max_fixed_len+1` is the largest, we adapt `max_prefix_len` accordingly,\n+                // where `max_fixed_len + 1` is the largest, we adapt `max_prefix_len` accordingly,\n                 // so that `L = max_prefix_len + max_suffix_len`.\n                 if max_fixed_len + 1 >= max_prefix_len + max_suffix_len {\n                     // The subtraction can't overflow thanks to the above check."}]}