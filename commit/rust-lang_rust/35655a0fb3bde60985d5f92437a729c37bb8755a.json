{"sha": "35655a0fb3bde60985d5f92437a729c37bb8755a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NjU1YTBmYjNiZGU2MDk4NWQ1ZjkyNDM3YTcyOWMzN2JiODc1NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T20:29:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T20:29:06Z"}, "message": "auto merge of #6803 : Thiez/rust/native_fmax_fmin, r=brson\n\nCalls to the libc versions of fmin and fmax were relatively slow (perhaps because they could not be inlined?). This pull request provides f32 and f64 with fmin and fmax written in Rust, and shows a significant speed increase on my system; I used https://github.com/thiez/rustray as my benchmark, with --opt-level 3 it brings the ray-tracing time down from 10.8 seconds to about 9.2, which seemed significant to me.\r\n\r\nr?", "tree": {"sha": "c53e8472af7f1d44e1d584654ec28135ea6050fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53e8472af7f1d44e1d584654ec28135ea6050fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35655a0fb3bde60985d5f92437a729c37bb8755a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35655a0fb3bde60985d5f92437a729c37bb8755a", "html_url": "https://github.com/rust-lang/rust/commit/35655a0fb3bde60985d5f92437a729c37bb8755a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35655a0fb3bde60985d5f92437a729c37bb8755a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2957091c496be86fe4b648a0ccae08753122661", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2957091c496be86fe4b648a0ccae08753122661", "html_url": "https://github.com/rust-lang/rust/commit/d2957091c496be86fe4b648a0ccae08753122661"}, {"sha": "3141acf674fd34f66141c4659a4a239779bb2802", "url": "https://api.github.com/repos/rust-lang/rust/commits/3141acf674fd34f66141c4659a4a239779bb2802", "html_url": "https://github.com/rust-lang/rust/commit/3141acf674fd34f66141c4659a4a239779bb2802"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "b578084268aff3a67e0cca2cbb2a6f80c57ae3b4", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35655a0fb3bde60985d5f92437a729c37bb8755a/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35655a0fb3bde60985d5f92437a729c37bb8755a/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=35655a0fb3bde60985d5f92437a729c37bb8755a", "patch": "@@ -86,8 +86,6 @@ delegate!(\n     fn erfc(n: c_float) -> c_float = c_float_utils::erfc,\n     fn exp_m1(n: c_float) -> c_float = c_float_utils::exp_m1,\n     fn abs_sub(a: c_float, b: c_float) -> c_float = c_float_utils::abs_sub,\n-    fn fmax(a: c_float, b: c_float) -> c_float = c_float_utils::fmax,\n-    fn fmin(a: c_float, b: c_float) -> c_float = c_float_utils::fmin,\n     fn next_after(x: c_float, y: c_float) -> c_float = c_float_utils::next_after,\n     fn frexp(n: c_float, value: &mut c_int) -> c_float = c_float_utils::frexp,\n     fn hypot(x: c_float, y: c_float) -> c_float = c_float_utils::hypot,\n@@ -147,6 +145,16 @@ pub fn ge(x: f32, y: f32) -> bool { return x >= y; }\n #[inline(always)]\n pub fn gt(x: f32, y: f32) -> bool { return x > y; }\n \n+#[inline(always)]\n+pub fn fmax(x: f32, y: f32) -> f32 {\n+    if x >= y || y.is_NaN() { x } else { y }\n+}\n+\n+#[inline(always)]\n+pub fn fmin(x: f32, y: f32) -> f32 {\n+    if x <= y || y.is_NaN() { x } else { y }\n+}\n+\n \n // FIXME (#1999): replace the predicates below with llvm intrinsics or\n // calls to the libmath macros in the rust runtime for performance."}, {"sha": "bca730c574817c4f979cd9e1f426d2ff8fa1be3a", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35655a0fb3bde60985d5f92437a729c37bb8755a/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35655a0fb3bde60985d5f92437a729c37bb8755a/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=35655a0fb3bde60985d5f92437a729c37bb8755a", "patch": "@@ -87,8 +87,6 @@ delegate!(\n     fn erfc(n: c_double) -> c_double = c_double_utils::erfc,\n     fn exp_m1(n: c_double) -> c_double = c_double_utils::exp_m1,\n     fn abs_sub(a: c_double, b: c_double) -> c_double = c_double_utils::abs_sub,\n-    fn fmax(a: c_double, b: c_double) -> c_double = c_double_utils::fmax,\n-    fn fmin(a: c_double, b: c_double) -> c_double = c_double_utils::fmin,\n     fn next_after(x: c_double, y: c_double) -> c_double = c_double_utils::next_after,\n     fn frexp(n: c_double, value: &mut c_int) -> c_double = c_double_utils::frexp,\n     fn hypot(x: c_double, y: c_double) -> c_double = c_double_utils::hypot,\n@@ -172,6 +170,15 @@ pub fn ge(x: f64, y: f64) -> bool { return x >= y; }\n #[inline(always)]\n pub fn gt(x: f64, y: f64) -> bool { return x > y; }\n \n+#[inline(always)]\n+pub fn fmax(x: f64, y: f64) -> f64 {\n+    if x >= y || y.is_NaN() { x } else { y }\n+}\n+\n+#[inline(always)]\n+pub fn fmin(x: f64, y: f64) -> f64 {\n+    if x <= y || y.is_NaN() { x } else { y }\n+}\n \n // FIXME (#1999): add is_normal, is_subnormal, and fpclassify\n "}]}