{"sha": "3db6ec3f11385c17e5f712cadfb3d31417ac166a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYjZlYzNmMTEzODVjMTdlNWY3MTJjYWRmYjNkMzE0MTdhYzE2NmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-08T14:32:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-08T14:32:49Z"}, "message": "prevent more deallocations of statics", "tree": {"sha": "2ea048712f98891aea645e8c1f6b3aca8fda8f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ea048712f98891aea645e8c1f6b3aca8fda8f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db6ec3f11385c17e5f712cadfb3d31417ac166a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db6ec3f11385c17e5f712cadfb3d31417ac166a", "html_url": "https://github.com/rust-lang/rust/commit/3db6ec3f11385c17e5f712cadfb3d31417ac166a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db6ec3f11385c17e5f712cadfb3d31417ac166a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbfd2d4bca94ba2d19b89724d8450cbff52a0484", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfd2d4bca94ba2d19b89724d8450cbff52a0484", "html_url": "https://github.com/rust-lang/rust/commit/fbfd2d4bca94ba2d19b89724d8450cbff52a0484"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "7ea4003b0f74a3346957081ec576bdb53de22028", "filename": "src/eval_context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3db6ec3f11385c17e5f712cadfb3d31417ac166a/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db6ec3f11385c17e5f712cadfb3d31417ac166a/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=3db6ec3f11385c17e5f712cadfb3d31417ac166a", "patch": "@@ -329,6 +329,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         }\n                     },\n                 }\n+                // see comment on `initialized` field\n+                assert!(!global_value.initialized);\n+                global_value.initialized = true;\n                 assert!(global_value.mutable);\n                 global_value.mutable = mutable;\n             } else {\n@@ -868,7 +871,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     _ => {\n                         let ptr = self.alloc_ptr_with_substs(global_val.ty, cid.substs)?;\n                         self.write_value_to_ptr(global_val.value, ptr, global_val.ty)?;\n-                        self.memory.mark_static(ptr.alloc_id, global_val.mutable)?;\n+                        // see comment on `initialized` field\n+                        if global_val.initialized {\n+                            self.memory.mark_static(ptr.alloc_id, global_val.mutable)?;\n+                        }\n                         let lval = self.globals.get_mut(&cid).expect(\"already checked\");\n                         *lval = Global {\n                             value: Value::ByRef(ptr),"}, {"sha": "d54c27904763c0442c01735d90daa8537b17b042", "filename": "src/lvalue.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3db6ec3f11385c17e5f712cadfb3d31417ac166a/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db6ec3f11385c17e5f712cadfb3d31417ac166a/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=3db6ec3f11385c17e5f712cadfb3d31417ac166a", "patch": "@@ -57,6 +57,11 @@ pub struct GlobalId<'tcx> {\n #[derive(Copy, Clone, Debug)]\n pub struct Global<'tcx> {\n     pub(super) value: Value,\n+    /// Only used in `force_allocation` to ensure we don't mark the memory\n+    /// before the static is initialized. It is possible to convert a\n+    /// global which initially is `Value::ByVal(PrimVal::Undef)` and gets\n+    /// lifted to an allocation before the static is fully initialized\n+    pub(super) initialized: bool,\n     pub(super) mutable: bool,\n     pub(super) ty: Ty<'tcx>,\n }\n@@ -102,6 +107,7 @@ impl<'tcx> Global<'tcx> {\n             value: Value::ByVal(PrimVal::Undef),\n             mutable: true,\n             ty,\n+            initialized: false,\n         }\n     }\n }"}, {"sha": "112ad0185d8cb15cbc19e0ca32194a0423fe0123", "filename": "tests/run-pass/issue-5917.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3db6ec3f11385c17e5f712cadfb3d31417ac166a/tests%2Frun-pass%2Fissue-5917.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db6ec3f11385c17e5f712cadfb3d31417ac166a/tests%2Frun-pass%2Fissue-5917.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-5917.rs?ref=3db6ec3f11385c17e5f712cadfb3d31417ac166a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+struct T (&'static [isize]);\n+static t : T = T (&[5, 4, 3]);\n+pub fn main () {\n+    let T(ref v) = t;\n+    assert_eq!(v[0], 5);\n+}"}]}