{"sha": "9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjBmZDk4YzZmNzgwYWM5M2I4NzdjNTQyOWZlMjJiNTBiZjRlMWE=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-24T09:04:04Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-24T13:59:53Z"}, "message": "check target abi support", "tree": {"sha": "495bfb82e7e6e17cb513c69ac7ba5f606b8dedbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495bfb82e7e6e17cb513c69ac7ba5f606b8dedbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "html_url": "https://github.com/rust-lang/rust/commit/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac468b67bffc6c386dd04b7955eec013ef99dc39", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac468b67bffc6c386dd04b7955eec013ef99dc39", "html_url": "https://github.com/rust-lang/rust/commit/ac468b67bffc6c386dd04b7955eec013ef99dc39"}], "stats": {"total": 186, "additions": 139, "deletions": 47}, "files": [{"sha": "5ef79359140f775bc6bd6396c22926dfd0d04b5d", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> TargetResult {\n             features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n             eliminate_frame_pointer: false,\n             max_atomic_width: Some(128),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         },\n     })"}, {"sha": "140195c780b9cae7eaa5cf45016a9cd55cf6e723", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n@@ -25,6 +25,9 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "b031de76fc3f3d8cee2e7291c5cbdd55c8335130", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n@@ -22,6 +22,9 @@ pub fn target() -> TargetResult {\n         arch: \"aarch64\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "ad132c27cb8412210f9920c9cb8c11905f9819b1", "filename": "src/librustc_back/target/arm_base.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_base.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use syntax::abi::Abi;\n+\n+// All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n+pub fn abi_blacklist() -> Vec<Abi> {\n+    vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Win64, Abi::SysV64]\n+}"}, {"sha": "c7d2df4344cb1efad4e8b22e6e4551751e25cbb5", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n@@ -24,6 +24,9 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "77d35edfbd09cc465ef90a0a9afe03684a9d56d5", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabi.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+v6\".to_string(),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         },\n     })"}, {"sha": "b183412be1934853bed150bfe546c3141d014cd3", "filename": "src/librustc_back/target/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_gnueabihf.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             features: \"+v6,+vfp2\".to_string(),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }\n     })"}, {"sha": "261d4353c7a09f6b2623b2c109ed7df084e41cb0", "filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -29,6 +29,9 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "1443dcf5bad418327f65be7807ee1bf31f4fe504", "filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -29,6 +29,9 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "9e9c443930624311c36e6f8483f8624b5bcf9f13", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }\n     })"}, {"sha": "42f0deaa3fbff7016f4283483061e4e937657c81", "filename": "src/librustc_back/target/armv7_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_linux_androideabi.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n@@ -24,6 +24,9 @@ pub fn target() -> TargetResult {\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "96ccedd5bea5c4b59a0f6a37349d97550e8784c9", "filename": "src/librustc_back/target/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_gnueabihf.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -27,6 +27,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }\n     })"}, {"sha": "8f66e6a4f58d484ac385ff5830575eb7fcb47436", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use target::{Target, TargetResult};\n+use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -30,6 +30,9 @@ pub fn target() -> TargetResult {\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n-        options: base,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "6edde6e73efd34415ce62bd70a9b77dd347dcfdc", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -25,6 +25,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v7,+vfp4,+neon\".to_string(),\n             max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n         }\n     })"}, {"sha": "c7fec9805ae6744f74b57cc4a68c2f6eb70521c5", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -48,13 +48,14 @@ use serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n use std::io::prelude::*;\n-use syntax::abi::Abi;\n+use syntax::abi::{Abi, lookup as lookup_abi};\n \n use PanicStrategy;\n \n mod android_base;\n mod apple_base;\n mod apple_ios_base;\n+mod arm_base;\n mod bitrig_base;\n mod dragonfly_base;\n mod freebsd_base;\n@@ -358,6 +359,10 @@ pub struct TargetOptions {\n \n     /// Panic strategy: \"unwind\" or \"abort\"\n     pub panic_strategy: PanicStrategy,\n+\n+    /// A blacklist of ABIs unsupported by the current target. Note that generic\n+    /// ABIs are considered to be supported on all platforms and cannot be blacklisted.\n+    pub abi_blacklist: Vec<Abi>,\n }\n \n impl Default for TargetOptions {\n@@ -408,6 +413,7 @@ impl Default for TargetOptions {\n             obj_is_bitcode: false,\n             max_atomic_width: None,\n             panic_strategy: PanicStrategy::Unwind,\n+            abi_blacklist: vec![],\n         }\n     }\n }\n@@ -433,6 +439,10 @@ impl Target {\n         self.options.max_atomic_width.unwrap_or(self.target_pointer_width.parse().unwrap())\n     }\n \n+    pub fn is_abi_supported(&self, abi: Abi) -> bool {\n+        abi.generic() || !self.options.abi_blacklist.contains(&abi)\n+    }\n+\n     /// Load a target descriptor from a JSON object.\n     pub fn from_json(obj: Json) -> TargetResult {\n         // While ugly, this code must remain this way to retain\n@@ -564,6 +574,22 @@ impl Target {\n         key!(max_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n \n+        if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n+            for name in array.iter().filter_map(|abi| abi.as_string()) {\n+                match lookup_abi(name) {\n+                    Some(abi) => {\n+                        if abi.generic() {\n+                            return Err(format!(\"The ABI \\\"{}\\\" is considered to be supported on \\\n+                                                all targets and cannot be blacklisted\", abi))\n+                        }\n+\n+                        base.options.abi_blacklist.push(abi)\n+                    }\n+                    None => return Err(format!(\"Unknown ABI \\\"{}\\\" in target specification\", name))\n+                }\n+            }\n+        }\n+\n         Ok(base)\n     }\n \n@@ -707,6 +733,12 @@ impl ToJson for Target {\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n \n+        if default.abi_blacklist != self.options.abi_blacklist {\n+            d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()\n+                .map(Abi::name).map(|name| name.to_json())\n+                .collect::<Vec<_>>().to_json());\n+        }\n+\n         Json::Object(d)\n     }\n }"}, {"sha": "6bb496649a8584cd31abf5c3419d0913db9d1300", "filename": "src/librustc_back/target/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -52,6 +52,7 @@ pub fn opts() -> TargetOptions {\n         // Similarly, one almost always never wants to use relocatable code because of the extra\n         // costs it involves.\n         relocation_model: \"static\".to_string(),\n+        abi_blacklist: super::arm_base::abi_blacklist(),\n         .. Default::default()\n     }\n }"}, {"sha": "c6e0b8b696cb84d96c1f1896c5e8cf0debc5bbe8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -531,13 +531,16 @@ pub fn check_drop_impls(ccx: &CrateCtxt) -> CompileResult {\n fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            decl: &'tcx hir::FnDecl,\n                            body: &'tcx hir::Block,\n-                           fn_id: ast::NodeId) {\n+                           fn_id: ast::NodeId,\n+                           span: Span) {\n     let raw_fty = ccx.tcx.lookup_item_type(ccx.tcx.map.local_def_id(fn_id)).ty;\n     let fn_ty = match raw_fty.sty {\n         ty::TyFnDef(.., f) => f,\n         _ => span_bug!(body.span, \"check_bare_fn: function type expected\")\n     };\n \n+    check_abi(ccx, span, fn_ty.abi);\n+\n     ccx.inherited(fn_id).enter(|inh| {\n         // Compute the fty from point of view of inside fn.\n         let fn_scope = inh.tcx.region_maps.call_site_extent(fn_id, body.id);\n@@ -561,6 +564,13 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     });\n }\n \n+fn check_abi<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, span: Span, abi: Abi) {\n+    if !ccx.tcx.sess.target.target.is_abi_supported(abi) {\n+        struct_span_err!(ccx.tcx.sess, span, E0570,\n+            \"The ABI `{}` is not supported for the current target\", abi).emit()\n+    }\n+}\n+\n struct GatherLocalsVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>\n }\n@@ -767,6 +777,8 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n         check_bounds_are_used(ccx, generics, pty_ty);\n       }\n       hir::ItemForeignMod(ref m) => {\n+        check_abi(ccx, it.span, m.abi);\n+\n         if m.abi == Abi::RustIntrinsic {\n             for item in &m.items {\n                 intrinsic::check_intrinsic_type(ccx, item);\n@@ -804,7 +816,7 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     let _indenter = indenter();\n     match it.node {\n       hir::ItemFn(ref decl, .., ref body) => {\n-        check_bare_fn(ccx, &decl, &body, it.id);\n+        check_bare_fn(ccx, &decl, &body, it.id, it.span);\n       }\n       hir::ItemImpl(.., ref impl_items) => {\n         debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n@@ -815,7 +827,7 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                     check_const(ccx, &expr, impl_item.id)\n                 }\n                 hir::ImplItemKind::Method(ref sig, ref body) => {\n-                    check_bare_fn(ccx, &sig.decl, body, impl_item.id);\n+                    check_bare_fn(ccx, &sig.decl, body, impl_item.id, impl_item.span);\n                 }\n                 hir::ImplItemKind::Type(_) => {\n                     // Nothing to do here.\n@@ -830,7 +842,7 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                     check_const(ccx, &expr, trait_item.id)\n                 }\n                 hir::MethodTraitItem(ref sig, Some(ref body)) => {\n-                    check_bare_fn(ccx, &sig.decl, body, trait_item.id);\n+                    check_bare_fn(ccx, &sig.decl, body, trait_item.id, trait_item.span);\n                 }\n                 hir::MethodTraitItem(_, None) |\n                 hir::ConstTraitItem(_, None) |"}, {"sha": "189f8490f6c1d62d75e430e10e381d53c8029560", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -4156,6 +4156,16 @@ let s = Simba { mother: 1, father: 0 }; // ok!\n ```\n \"##,\n \n+E0570: r##\"\n+The requested ABI is unsupported by the current target.\n+\n+The rust compiler maintains for each target a blacklist of ABIs unsupported on\n+that target. If an ABI is present in such a list this usually means that the\n+target / ABI combination is currently unsupported by llvm.\n+\n+If necessary, you can circumvent this check using custom target specifications.\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "a39cac8db99171a26b08a163461d387d774d94dc", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=9eb0fd98c6f780ac93b877c5429fe22b50bf4e1a", "patch": "@@ -33,7 +33,7 @@ pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)\n \n-    // Single platform ABIs come first (`for_arch()` relies on this)\n+    // Single platform ABIs\n     Cdecl,\n     Stdcall,\n     Fastcall,\n@@ -42,7 +42,7 @@ pub enum Abi {\n     Win64,\n     SysV64,\n \n-    // Multiplatform ABIs second\n+    // Multiplatform / generic ABIs\n     Rust,\n     C,\n     System,\n@@ -65,41 +65,31 @@ pub enum Architecture {\n pub struct AbiData {\n     abi: Abi,\n \n-    // Name of this ABI as we like it called.\n+    /// Name of this ABI as we like it called.\n     name: &'static str,\n-}\n \n-#[derive(Copy, Clone)]\n-pub enum AbiArchitecture {\n-    /// Not a real ABI (e.g., intrinsic)\n-    Rust,\n-    /// An ABI that specifies cross-platform defaults (e.g., \"C\")\n-    All,\n-    /// Multiple architectures (bitset)\n-    Archs(u32)\n+    /// A generic ABI is supported on all platforms.\n+    generic: bool,\n }\n \n #[allow(non_upper_case_globals)]\n const AbiDatas: &'static [AbiData] = &[\n     // Platform-specific ABIs\n-    AbiData {abi: Abi::Cdecl, name: \"cdecl\" },\n-    AbiData {abi: Abi::Stdcall, name: \"stdcall\" },\n-    AbiData {abi: Abi::Fastcall, name: \"fastcall\" },\n-    AbiData {abi: Abi::Vectorcall, name: \"vectorcall\"},\n-    AbiData {abi: Abi::Aapcs, name: \"aapcs\" },\n-    AbiData {abi: Abi::Win64, name: \"win64\" },\n-    AbiData {abi: Abi::SysV64, name: \"sysv64\" },\n+    AbiData {abi: Abi::Cdecl, name: \"cdecl\", generic: false },\n+    AbiData {abi: Abi::Stdcall, name: \"stdcall\", generic: false },\n+    AbiData {abi: Abi::Fastcall, name: \"fastcall\", generic: false },\n+    AbiData {abi: Abi::Vectorcall, name: \"vectorcall\", generic: false},\n+    AbiData {abi: Abi::Aapcs, name: \"aapcs\", generic: false },\n+    AbiData {abi: Abi::Win64, name: \"win64\", generic: false },\n+    AbiData {abi: Abi::SysV64, name: \"sysv64\", generic: false },\n \n     // Cross-platform ABIs\n-    //\n-    // NB: Do not adjust this ordering without\n-    // adjusting the indices below.\n-    AbiData {abi: Abi::Rust, name: \"Rust\" },\n-    AbiData {abi: Abi::C, name: \"C\" },\n-    AbiData {abi: Abi::System, name: \"system\" },\n-    AbiData {abi: Abi::RustIntrinsic, name: \"rust-intrinsic\" },\n-    AbiData {abi: Abi::RustCall, name: \"rust-call\" },\n-    AbiData {abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\" }\n+    AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },\n+    AbiData {abi: Abi::C, name: \"C\", generic: true },\n+    AbiData {abi: Abi::System, name: \"system\", generic: true },\n+    AbiData {abi: Abi::RustIntrinsic, name: \"rust-intrinsic\", generic: true },\n+    AbiData {abi: Abi::RustCall, name: \"rust-call\", generic: true },\n+    AbiData {abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\", generic: true },\n ];\n \n /// Returns the ABI with the given name (if any).\n@@ -125,6 +115,10 @@ impl Abi {\n     pub fn name(&self) -> &'static str {\n         self.data().name\n     }\n+\n+    pub fn generic(&self) -> bool {\n+        self.data().generic\n+    }\n }\n \n impl fmt::Display for Abi {"}]}