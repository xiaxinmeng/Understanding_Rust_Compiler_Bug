{"sha": "ac94bbef55648a47cbeced428ec13b3f848ba35b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOTRiYmVmNTU2NDhhNDdjYmVjZWQ0MjhlYzEzYjNmODQ4YmEzNWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-31T13:46:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-15T16:35:59Z"}, "message": "Stabilize type_alias_enum_variants.", "tree": {"sha": "121d002c8c6a4af8ed4bd4334bdbafce7aa625fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/121d002c8c6a4af8ed4bd4334bdbafce7aa625fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac94bbef55648a47cbeced428ec13b3f848ba35b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac94bbef55648a47cbeced428ec13b3f848ba35b", "html_url": "https://github.com/rust-lang/rust/commit/ac94bbef55648a47cbeced428ec13b3f848ba35b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac94bbef55648a47cbeced428ec13b3f848ba35b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f06855064ed06a50c496577b21ca50f92a2e67d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f06855064ed06a50c496577b21ca50f92a2e67d", "html_url": "https://github.com/rust-lang/rust/commit/9f06855064ed06a50c496577b21ca50f92a2e67d"}], "stats": {"total": 29, "additions": 4, "deletions": 25}, "files": [{"sha": "1f0a749112a1c1c75af346b5b1ae62a48fd13ce4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ac94bbef55648a47cbeced428ec13b3f848ba35b", "patch": "@@ -6,7 +6,7 @@\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(type_alias_enum_variants)]\n+#![cfg_attr(bootstrap, feature(type_alias_enum_variants))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "33b12374bb56347f6d07095b60ac866efda5b8bb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ac94bbef55648a47cbeced428ec13b3f848ba35b", "patch": "@@ -34,7 +34,6 @@ use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n \n-use super::{check_type_alias_enum_variants_enabled};\n use rustc_data_structures::fx::FxHashSet;\n \n #[derive(Debug)]\n@@ -1599,7 +1598,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 });\n                 if let Some(variant_def) = variant_def {\n                     if permit_variants {\n-                        check_type_alias_enum_variants_enabled(tcx, span);\n                         tcx.check_stability(variant_def.def_id, Some(hir_ref_id), span);\n                         return Ok((qself_ty, DefKind::Variant, variant_def.def_id));\n                     } else {"}, {"sha": "b8b65279fe7670c58e3d84a5c55687e41840737d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=ac94bbef55648a47cbeced428ec13b3f848ba35b", "patch": "@@ -26,7 +26,6 @@ use rustc::infer::{self, InferOk};\n use syntax::ast;\n use syntax_pos::Span;\n \n-use crate::{check_type_alias_enum_variants_enabled};\n use self::probe::{IsSuggestion, ProbeScope};\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n@@ -417,8 +416,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     tcx.hygienic_eq(method_name, vd.ident, adt_def.did)\n                 });\n                 if let Some(variant_def) = variant_def {\n-                    check_type_alias_enum_variants_enabled(tcx, span);\n-\n                     // Braced variants generate unusable names in value namespace (reserved for\n                     // possible future use), so variants resolved as associated items may refer to\n                     // them as well. It's ok to use the variant's id as a ctor id since an"}, {"sha": "aafe7408e6c0ce6fc0227fa7ee7c966a63fbf899", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ac94bbef55648a47cbeced428ec13b3f848ba35b", "patch": "@@ -105,7 +105,7 @@ use rustc::lint;\n use rustc::middle;\n use rustc::session;\n use rustc::util::common::ErrorReported;\n-use rustc::session::config::{EntryFnType, nightly_options};\n+use rustc::session::config::EntryFnType;\n use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -124,21 +124,6 @@ pub struct TypeAndSubsts<'tcx> {\n     ty: Ty<'tcx>,\n }\n \n-fn check_type_alias_enum_variants_enabled<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n-    if !tcx.features().type_alias_enum_variants {\n-        let mut err = tcx.sess.struct_span_err(\n-            span,\n-            \"enum variants on type aliases are experimental\"\n-        );\n-        if nightly_options::is_nightly_build() {\n-            help!(&mut err,\n-                \"add `#![feature(type_alias_enum_variants)]` to the \\\n-                crate attributes to enable\");\n-        }\n-        err.emit();\n-    }\n-}\n-\n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl, abi: Abi, span: Span) {\n     if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {\n         let mut err = struct_span_err!(tcx.sess, span, E0045,"}, {"sha": "2f88eb239bc4a50f91a020f957b27a8ff9f981bd", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac94bbef55648a47cbeced428ec13b3f848ba35b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ac94bbef55648a47cbeced428ec13b3f848ba35b", "patch": "@@ -532,9 +532,6 @@ declare_features! (\n     // Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n \n-    // Allows paths to enum variants on type aliases.\n-    (active, type_alias_enum_variants, \"1.31.0\", Some(49683), None),\n-\n     // Allows exhaustive integer pattern matching on `usize` and `isize`.\n     (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n \n@@ -849,6 +846,8 @@ declare_features! (\n     (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n     // Allows arbitrary delimited token streams in non-macro attributes.\n     (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n+    // Allows paths to enum variants on type aliases including `Self`.\n+    (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n     // Allows using `#[repr(align(X))]` on enums with equivalent semantics\n     // to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),"}]}