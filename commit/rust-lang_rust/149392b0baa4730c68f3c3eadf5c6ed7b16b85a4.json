{"sha": "149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "node_id": "C_kwDOAAsO6NoAKDE0OTM5MmIwYmFhNDczMGM2OGYzYzNlYWRmNWM2ZWQ3YjE2Yjg1YTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T23:34:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T23:34:06Z"}, "message": "Auto merge of #10402 - Jarcho:rustup, r=Jarcho\n\nRustup\n\nLooks like `@flip1995`  is busy.\n\nr? `@ghost`\n\nchangelog: None", "tree": {"sha": "8246d9759e8a732e7d9e263fc4fb1fec01b53a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8246d9759e8a732e7d9e263fc4fb1fec01b53a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "html_url": "https://github.com/rust-lang/rust/commit/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51551193d831f66a10f3ad515dd954292349842e", "url": "https://api.github.com/repos/rust-lang/rust/commits/51551193d831f66a10f3ad515dd954292349842e", "html_url": "https://github.com/rust-lang/rust/commit/51551193d831f66a10f3ad515dd954292349842e"}, {"sha": "69c4ff6df8605f5f0b293fcf2a597f42510d2fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c4ff6df8605f5f0b293fcf2a597f42510d2fd3", "html_url": "https://github.com/rust-lang/rust/commit/69c4ff6df8605f5f0b293fcf2a597f42510d2fd3"}], "stats": {"total": 341, "additions": 186, "deletions": 155}, "files": [{"sha": "6c8ee296c75101fa56389d038a983c7cf2980f6b", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -66,7 +66,7 @@ fn is_used_as_unaligned(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             if matches!(name.ident.as_str(), \"read_unaligned\" | \"write_unaligned\")\n                 && let Some(def_id) = cx.typeck_results().type_dependent_def_id(parent.hir_id)\n                 && let Some(def_id) = cx.tcx.impl_of_method(def_id)\n-                && cx.tcx.type_of(def_id).is_unsafe_ptr()\n+                && cx.tcx.type_of(def_id).subst_identity().is_unsafe_ptr()\n             {\n                 true\n             } else {"}, {"sha": "0fc11523298f177e6ac3166d6409b09485adc6c3", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n                 of_trait: Some(ref trait_ref),\n                 ..\n             }) = item.kind;\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.type_of(item.owner_id).subst_identity();\n             if is_copy(cx, ty);\n             if let Some(trait_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Iterator, trait_id);"}, {"sha": "080d44e6398c1f754202e7e4f5e82582c5f31826", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     .fields\n                     .iter()\n                     .all(|field| {\n-                        is_copy(cx, cx.tcx.type_of(field.did))\n+                        is_copy(cx, cx.tcx.type_of(field.did).subst_identity())\n                     });\n                 if !has_drop(cx, binding_type) || all_fields_are_copy;\n                 then {"}, {"sha": "4e1a6cd4d7355b47358fa974e27bc23a483a02de", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n                                     .iter()\n                                     .find_map(|f_def| {\n                                         if f_def.ident(self.cx.tcx) == field.ident\n-                                            { Some(self.cx.tcx.type_of(f_def.did)) }\n+                                            { Some(self.cx.tcx.type_of(f_def.did).subst_identity()) }\n                                         else { None }\n                                     });\n                             self.ty_bounds.push(bound.into());"}, {"sha": "5246a86cf8494ef419e78fdc9f44229affc424c1", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::mir::{Rvalue, StatementKind};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{\n     self, Binder, BoundVariableKind, Clause, EarlyBinder, FnSig, GenericArgKind, List, ParamEnv, ParamTy,\n-    PredicateKind, ProjectionPredicate, Ty, TyCtxt, TypeVisitable, TypeckResults,\n+    PredicateKind, ProjectionPredicate, Ty, TyCtxt, TypeVisitableExt, TypeckResults,\n };\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol};\n@@ -735,7 +735,7 @@ fn walk_parents<'tcx>(\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let ty = cx.tcx.type_of(owner_id.def_id);\n+                let ty = cx.tcx.type_of(owner_id.def_id).subst_identity();\n                 Some(ty_auto_deref_stability(cx.tcx, cx.param_env, ty, precedence).position_for_result(cx))\n             },\n \n@@ -781,7 +781,7 @@ fn walk_parents<'tcx>(\n                             cx.tcx,\n                             // Use the param_env of the target type.\n                             cx.tcx.param_env(adt.did()),\n-                            cx.tcx.type_of(field_def.did),\n+                            cx.tcx.type_of(field_def.did).subst_identity(),\n                             precedence,\n                         )\n                         .position_for_arg()"}, {"sha": "f95b8ccf067b46f62d45cc41b37b352fbe00ff8e", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let Some(Node::ImplItem(impl_item)) = cx.tcx.hir().find(impl_item_hir);\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n-            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).ty_adt_def();\n+            if let Some(adt_def) = cx.tcx.type_of(item.owner_id).subst_identity().ty_adt_def();\n             if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);"}, {"sha": "1cdcccd5f146c727ff44f0b8f0b86201b4226dd0", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n             ..\n         }) = item.kind\n         {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.type_of(item.owner_id).subst_identity();\n             let is_automatically_derived = cx.tcx.has_attr(item.owner_id.to_def_id(), sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n@@ -347,7 +347,7 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &h\n             let has_copy_impl = cx.tcx.all_local_trait_impls(()).get(&copy_id).map_or(false, |impls| {\n                 impls\n                     .iter()\n-                    .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n+                    .any(|&id| matches!(cx.tcx.type_of(id).subst_identity().kind(), ty::Adt(adt, _) if ty_adt.did() == adt.did()))\n             });\n             if !has_copy_impl {\n                 return;"}, {"sha": "384aca7feadd6d6939f383855bdae1da6778663e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Applicability, Handler, SuggestionStyle};\n+use rustc_errors::{Applicability, Handler, SuggestionStyle, TerminalUrl};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n@@ -707,7 +707,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n                 let fallback_bundle =\n-                    rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+                    rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,\n@@ -719,6 +719,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                     None,\n                     false,\n                     false,\n+                    TerminalUrl::No,\n                 );\n                 let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);"}, {"sha": "d94664daa5619a4c523751ab50c6ea21f91f1c3b", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for EmptyEnum {\n         }\n \n         if let ItemKind::Enum(..) = item.kind {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.type_of(item.owner_id).subst_identity();\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n             if adt.variants().is_empty() {\n                 span_lint_and_help("}, {"sha": "e275efaba25fbb2a2c7bf1f90eb22f19a43e052c", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n             for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);\n-                    let mut ty = cx.tcx.type_of(def_id.to_def_id());\n+                    let mut ty = cx.tcx.type_of(def_id.to_def_id()).subst_identity();\n                     let constant = cx\n                         .tcx\n                         .const_eval_poly(def_id.to_def_id())"}, {"sha": "b2071f4dcb1e2b5589eecdb578f65258317dcb74", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::{self, EarlyBinder, SubstsRef, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, EarlyBinder, SubstsRef, Ty, TypeVisitableExt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, None, args);\n             let callee_ty = cx.typeck_results().expr_ty_adjusted(callee);\n             let call_ty = cx.typeck_results().type_dependent_def_id(body.value.hir_id)\n-                .map_or(callee_ty, |id| cx.tcx.type_of(id));\n+                .map_or(callee_ty, |id| cx.tcx.type_of(id).subst_identity());\n             if check_sig(cx, closure_ty, call_ty);\n             let substs = cx.typeck_results().node_substs(callee.hir_id);\n             // This fixes some false positives that I don't entirely understand\n@@ -153,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_inputs(cx, body.params, Some(receiver), args);\n             let method_def_id = cx.typeck_results().type_dependent_def_id(body.value.hir_id).unwrap();\n             let substs = cx.typeck_results().node_substs(body.value.hir_id);\n-            let call_ty = cx.tcx.bound_type_of(method_def_id).subst(cx.tcx, substs);\n+            let call_ty = cx.tcx.type_of(method_def_id).subst(cx.tcx, substs);\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {\n@@ -233,7 +233,7 @@ fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs\n     match assoc_item.container {\n         ty::TraitContainer => cx.tcx.def_path_str(def_id),\n         ty::ImplContainer => {\n-            let ty = cx.tcx.type_of(def_id);\n+            let ty = cx.tcx.type_of(def_id).skip_binder();\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),\n                 ty::Array(..)"}, {"sha": "0c7aea6da8fee33864a21076a0db4986015d4cfd", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if let Some(const_id) = cx.typeck_results().type_dependent_def_id(cond_num_val.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(const_id);\n                             if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n-                            if cx.tcx.type_of(impl_id).is_integral();\n+                            if cx.tcx.type_of(impl_id).subst_identity().is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }\n@@ -115,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n                             if let Some(func_id) = cx.typeck_results().type_dependent_def_id(func.hir_id);\n                             if let Some(impl_id) = cx.tcx.impl_of_method(func_id);\n                             if let None = cx.tcx.impl_trait_ref(impl_id); // An inherent impl\n-                            if cx.tcx.type_of(impl_id).is_integral();\n+                            if cx.tcx.type_of(impl_id).subst_identity().is_integral();\n                             then {\n                                 print_lint_and_sugg(cx, var_name, expr)\n                             }"}, {"sha": "c384172fbde83abc95a834027334aded88aba190", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n             if let Some(range) = higher::Range::hir(index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.kind() {\n-                    let size: u128 = if let Some(size) = s.try_eval_usize(cx.tcx, cx.param_env) {\n+                    let size: u128 = if let Some(size) = s.try_eval_target_usize(cx.tcx, cx.param_env) {\n                         size.into()\n                     } else {\n                         return;"}, {"sha": "7c41699f307aa116920f7188420d5cb60de2a533", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -66,7 +66,8 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             )\n         }) {\n             for impl_id in impl_ids.iter().map(|id| id.expect_local()) {\n-                match type_map.entry(cx.tcx.type_of(impl_id)) {\n+                let impl_ty = cx.tcx.type_of(impl_id).subst_identity();\n+                match type_map.entry(impl_ty) {\n                     Entry::Vacant(e) => {\n                         // Store the id for the first impl block of this type. The span is retrieved lazily.\n                         e.insert(IdOrSpan::Id(impl_id));"}, {"sha": "4dc750c03b488d1a80cd5e66a33e4b09a9dcba18", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeConstArrays {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             if let ty::Array(element_type, cst) = ty.kind();\n             if let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind();\n-            if let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx);\n+            if let Ok(element_count) = element_count.try_to_target_usize(cx.tcx);\n             if let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < u128::from(element_count) * u128::from(element_size);\n "}, {"sha": "1c99bd2f3d02e98680a2856c3a1db8be20337170", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n             return;\n         }\n         if let ItemKind::Enum(ref def, _) = item.kind {\n-            let ty = cx.tcx.type_of(item.owner_id);\n+            let ty = cx.tcx.type_of(item.owner_id).subst_identity();\n             let Adt(adt, subst) = ty.kind() else {\n                 panic!(\"already checked whether this is an enum\")\n             };"}, {"sha": "32c6312e06946a1180235d3de00db25ebff23a8c", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> LateLintPass<'tcx> for LargeStackArrays {\n         if let ExprKind::Repeat(_, _) = expr.kind\n           && let ty::Array(element_type, cst) = cx.typeck_results().expr_ty(expr).kind()\n           && let ConstKind::Value(ty::ValTree::Leaf(element_count)) = cst.kind()\n-          && let Ok(element_count) = element_count.try_to_machine_usize(cx.tcx)\n+          && let Ok(element_count) = element_count.try_to_target_usize(cx.tcx)\n           && let Ok(element_size) = cx.layout_of(*element_type).map(|l| l.size.bytes())\n           && !cx.tcx.hir().parent_iter(expr.hir_id)\n               .any(|(_, node)| matches!(node, Node::Item(Item { kind: ItemKind::Static(..), .. })))"}, {"sha": "145cf524652f11576f238e458cefda110de4c403", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -43,6 +43,7 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n extern crate rustc_trait_selection;\n+extern crate thin_vec;\n \n #[macro_use]\n extern crate clippy_utils;"}, {"sha": "151c7f1d5d254d8d33a0c0a702b6220be399d43f", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -68,7 +68,7 @@ fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.kind() {\n         ty::Array(_, n) => n\n-            .try_eval_usize(cx.tcx, cx.param_env)\n+            .try_eval_target_usize(cx.tcx, cx.param_env)\n             .map_or(false, |val| (0..=32).contains(&val)),\n         _ => false,\n     }"}, {"sha": "5c317c2a5bbb6b115a5668897d6db85f7616596c", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -211,7 +211,7 @@ fn is_end_eq_array_len<'tcx>(\n         if let ExprKind::Lit(ref lit) = end.kind;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n         if let ty::Array(_, arr_len_const) = indexed_ty.kind();\n-        if let Some(arr_len) = arr_len_const.try_eval_usize(cx.tcx, cx.param_env);\n+        if let Some(arr_len) = arr_len_const.try_eval_target_usize(cx.tcx, cx.param_env);\n         then {\n             return match limits {\n                 ast::RangeLimits::Closed => end_int + 1 >= arr_len.into(),"}, {"sha": "d06bcdaa27f0a26699db02bed8bd448187442587", "filename": "clippy_lints/src/matches/rest_pat_in_fully_bound_struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Frest_pat_in_fully_bound_struct.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn check(cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if !pat.span.from_expansion();\n         if let PatKind::Struct(QPath::Resolved(_, path), fields, true) = pat.kind;\n         if let Some(def_id) = path.res.opt_def_id();\n-        let ty = cx.tcx.type_of(def_id);\n+        let ty = cx.tcx.type_of(def_id).subst_identity();\n         if let ty::Adt(def, _) = ty.kind();\n         if def.is_struct() || def.is_union();\n         if fields.len() == def.non_enum_variant().fields.len();"}, {"sha": "46a20ad412baf5ccaafe75280af9cc1ab0950d6d", "filename": "clippy_lints/src/methods/bytes_count_to_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_count_to_len.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(bytes_id) = cx.typeck_results().type_dependent_def_id(count_recv.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(bytes_id);\n-        if cx.tcx.type_of(impl_id).is_str();\n+        if cx.tcx.type_of(impl_id).subst_identity().is_str();\n         let ty = cx.typeck_results().expr_ty(bytes_recv).peel_refs();\n         if ty.is_str() || is_type_lang_item(cx, ty, hir::LangItem::String);\n         then {"}, {"sha": "7711aa78b2391d42cf417af3ddb412987ca98992", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_str();\n+        if cx.tcx.type_of(impl_id).subst_identity().is_str();\n         if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = arg.kind;\n         if (2..=6).contains(&ext_literal.as_str().len());\n         let ext_str = ext_literal.as_str();"}, {"sha": "a22285058d48e73e1b20f0bafcb41ef55872294e", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -33,7 +33,7 @@ pub(super) fn check<'tcx>(\n                     if (method_name.ident.name == sym::as_str || method_name.ident.name == sym::as_ref) && {\n                         let arg_type = cx.typeck_results().expr_ty(receiver);\n                         let base_type = arg_type.peel_refs();\n-                        *base_type.kind() == ty::Str || is_type_lang_item(cx, base_type, hir::LangItem::String)\n+                        base_type.is_str() || is_type_lang_item(cx, base_type, hir::LangItem::String)\n                     } {\n                         receiver\n                     } else {\n@@ -54,7 +54,7 @@ pub(super) fn check<'tcx>(\n             return false;\n         }\n         if let ty::Ref(_, ty, ..) = arg_ty.kind() {\n-            if *ty.kind() == ty::Str && can_be_static_str(cx, arg) {\n+            if ty.is_str() && can_be_static_str(cx, arg) {\n                 return false;\n             }\n         };"}, {"sha": "945bbf53bcf358edaeb84ce8d32e3dc22285308a", "filename": "clippy_lints/src/methods/get_first.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_slice();\n+        if cx.tcx.type_of(impl_id).subst_identity().is_slice();\n         if let Some(_) = is_slice_of_primitives(cx, recv);\n         if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = arg.kind;\n         then {"}, {"sha": "5a78a41687725655e8e0b18d07a7c67a5826dd33", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -53,7 +53,9 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_vec\" => cx\n             .tcx\n             .impl_of_method(method_def_id)\n-            .filter(|&impl_did| cx.tcx.type_of(impl_did).is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .filter(|&impl_did| {\n+                cx.tcx.type_of(impl_did).subst_identity().is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none()\n+            })\n             .is_some(),\n         _ => false,\n     }"}, {"sha": "b9a0ec779961e1557d9500c461918517ea66d8db", "filename": "clippy_lints/src/methods/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Option);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::Option);\n         if let ExprKind::Call(err_path, [err_arg]) = or_expr.kind;\n         if is_res_lang_ctor(cx, path_res(cx, err_path), ResultErr);\n         if is_ok_wrapping(cx, map_expr);"}, {"sha": "2b26ef01410969f6f110bfa66bae573c60445f88", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -19,7 +19,7 @@ pub(super) fn check(cx: &LateContext<'_>, e: &hir::Expr<'_>, recv: &hir::Expr<'_\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n         if cx.tcx.impl_of_method(method_id)\n-            .map_or(false, |id| is_type_diagnostic_item(cx, cx.tcx.type_of(id), sym::Option))\n+            .map_or(false, |id| is_type_diagnostic_item(cx, cx.tcx.type_of(id).subst_identity(), sym::Option))\n             || is_diag_trait_item(cx, method_id, sym::Iterator);\n         if let hir::ExprKind::Closure(&hir::Closure{ body, .. }) = arg.kind;\n         then {"}, {"sha": "a5beb291f3263c347a25fe28e9e0211716d9fe2c", "filename": "clippy_lints/src/methods/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -9,7 +9,7 @@ use super::MAP_ERR_IGNORE;\n pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, arg: &Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Result)\n+        && is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::Result)\n         && let ExprKind::Closure(&Closure {\n             capture_clause: CaptureBy::Ref,\n             body,"}, {"sha": "702df4b282b85fa93eb59e98a95b0bf9650490ec", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -3377,7 +3377,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let name = impl_item.ident.name.as_str();\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.owner_id);\n+        let self_ty = cx.tcx.type_of(item.owner_id).subst_identity();\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {"}, {"sha": "d0aa39d06275a6207081124d379d995e3879600a", "filename": "clippy_lints/src/methods/mut_mutex_lock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>, recv: &'\n         if let ty::Ref(_, _, Mutability::Mut) = cx.typeck_results().expr_ty(recv).kind();\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(ex.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Mutex);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::Mutex);\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "8ddbacc3d7ad4bb7ce2a76edd3e00404746b5034", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.mk_substs([GenericArg::from(typeck.expr_ty_adjusted(iter_expr))].into_iter())\n+        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}, {"sha": "c6a27cdd6fac0a5f0d625a8339c36dfcd8cb435c", "filename": "clippy_lints/src/methods/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fopen_options.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -11,7 +11,7 @@ use super::NONSENSICAL_OPEN_OPTIONS;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && match_type(cx, cx.tcx.type_of(impl_id), &paths::OPEN_OPTIONS)\n+        && match_type(cx, cx.tcx.type_of(impl_id).subst_identity(), &paths::OPEN_OPTIONS)\n     {\n         let mut options = Vec::new();\n         get_open_options(cx, recv, &mut options);"}, {"sha": "e3f2de3cd4669b03301c97620ff87154b1dca599", "filename": "clippy_lints/src/methods/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fpath_buf_push_overwrite.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::PathBuf);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::PathBuf);\n         if let ExprKind::Lit(ref lit) = arg.kind;\n         if let LitKind::Str(ref path_lit, _) = lit.node;\n         if let pushed_path = Path::new(path_lit.as_str());"}, {"sha": "afdb8ce94ac43a1196929eaf41ed0dbaa90a572d", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -8,7 +8,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::PatKind;\n use rustc_lint::LateContext;\n-use rustc_middle::ty;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n@@ -108,7 +107,7 @@ pub(super) fn check<'tcx>(\n             if is_type_lang_item(cx, self_ty, hir::LangItem::String) {\n                 true\n             } else {\n-                *self_ty.kind() == ty::Str\n+                self_ty.is_str()\n             }\n         };\n         if_chain! {"}, {"sha": "4d704ec39ebb15941fcab6fe6981490ba7b98e1c", "filename": "clippy_lints/src/methods/single_char_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -47,7 +47,7 @@ pub(super) fn check(\n     for &(method, pos) in &PATTERN_METHODS {\n         if_chain! {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty_adjusted(receiver).kind();\n-            if *ty.kind() == ty::Str;\n+            if ty.is_str();\n             if method_name.as_str() == method && args.len() > pos;\n             let arg = &args[pos];\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "b5fd0ad8ce524e6241787da5167dcec23d6595c3", "filename": "clippy_lints/src/methods/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -10,7 +10,7 @@ use super::STABLE_SORT_PRIMITIVE;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n-        && cx.tcx.type_of(impl_id).is_slice()\n+        && cx.tcx.type_of(impl_id).subst_identity().is_slice()\n         && let Some(slice_type) = is_slice_of_primitives(cx, recv)\n     {\n         span_lint_and_then("}, {"sha": "2c20c6d752d700686b016e3c54dc81df7655a7fc", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -5,7 +5,6 @@ use clippy_utils::ty::is_type_lang_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty;\n \n use super::STRING_EXTEND_CHARS;\n \n@@ -17,7 +16,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0].0;\n         let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-        let ref_str = if *self_ty.kind() == ty::Str {\n+        let ref_str = if self_ty.is_str() {\n             if matches!(target.kind, hir::ExprKind::Index(..)) {\n                 \"&\"\n             } else {"}, {"sha": "90ca66bd70c50f7f6b8ce2bcf0edd73346290a76", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n         if let Some(call_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(call_id);\n         if cx.tcx.impl_trait_ref(impl_id).is_none();\n-        let self_ty = cx.tcx.type_of(impl_id);\n+        let self_ty = cx.tcx.type_of(impl_id).subst_identity();\n         if self_ty.is_slice() || self_ty.is_str();\n         then {\n             // Ignore empty slice and string literals when used with a literal count."}, {"sha": "5201da52bbf1d4a3abaebf19da62153051980c68", "filename": "clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -122,7 +122,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Exp\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if cx.tcx.type_of(impl_id).is_slice();\n+        if cx.tcx.type_of(impl_id).subst_identity().is_slice();\n         if let ExprKind::Closure(&Closure { body, .. }) = arg.kind;\n         if let closure_body = cx.tcx.hir().body(body);\n         if let &["}, {"sha": "c96d69226972fa77b3820f7c73472515f7f47faa", "filename": "clippy_lints/src/methods/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -22,7 +22,7 @@ pub(super) fn derefs_to_slice<'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::Vec),\n-            ty::Array(_, size) => size.try_eval_usize(cx.tcx, cx.param_env).is_some(),\n+            ty::Array(_, size) => size.try_eval_target_usize(cx.tcx, cx.param_env).is_some(),\n             ty::Ref(_, inner, _) => may_slice(cx, *inner),\n             _ => false,\n         }\n@@ -143,7 +143,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for CloneOrCopyVisitor<'cx, 'tcx> {\n                         if_chain! {\n                             if args.iter().all(|arg| !self.is_binding(arg));\n                             if let Some(method_def_id) = self.cx.typeck_results().type_dependent_def_id(parent.hir_id);\n-                            let method_ty = self.cx.tcx.type_of(method_def_id);\n+                            let method_ty = self.cx.tcx.type_of(method_def_id).subst_identity();\n                             let self_ty = method_ty.fn_sig(self.cx.tcx).input(0).skip_binder();\n                             if matches!(self_ty.kind(), ty::Ref(_, _, Mutability::Not));\n                             then {"}, {"sha": "b0cfc163fd08b48e5da9b64171db6c58066c30fc", "filename": "clippy_lints/src/methods/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fvec_resize_to_zero.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n-        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Vec);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id).subst_identity(), sym::Vec);\n         if let ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = count_arg.kind;\n         if let ExprKind::Lit(Spanned { node: LitKind::Int(..), .. }) = default_arg.kind;\n         then {"}, {"sha": "8aa814b74053606f6c4cd0cffb1719873a49ca33", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::{def_path_def_ids, trait_ref_of_method};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_middle::ty::{Adt, Array, Ref, Slice, Tuple, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;\n@@ -166,7 +166,8 @@ impl MutableKeyType {\n             Ref(_, inner_ty, mutbl) => mutbl == hir::Mutability::Mut || self.is_interior_mutable_type(cx, inner_ty),\n             Slice(inner_ty) => self.is_interior_mutable_type(cx, inner_ty),\n             Array(inner_ty, size) => {\n-                size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n+                size.try_eval_target_usize(cx.tcx, cx.param_env)\n+                    .map_or(true, |u| u != 0)\n                     && self.is_interior_mutable_type(cx, inner_ty)\n             },\n             Tuple(fields) => fields.iter().any(|ty| self.is_interior_mutable_type(cx, ty)),"}, {"sha": "e91aac41bc48525de2edc176bbe929eea26375f0", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n             ExprKind::MethodCall(path, receiver, arguments, _) => {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n-                let method_type = cx.tcx.bound_type_of(def_id).subst(cx.tcx, substs);\n+                let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n                 check_arguments(\n                     cx,\n                     std::iter::once(receiver).chain(arguments.iter()).collect(),"}, {"sha": "1ab81aee7b8d5a805190c1c6b9e40f6f386aec4b", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -18,7 +18,7 @@ use rustc_hir_typeck::expr_use_visitor as euv;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, TypeVisitable};\n+use rustc_middle::ty::{self, TypeVisitableExt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::kw;"}, {"sha": "653b1a8a05f6684e50dd1e5748804a9045368110", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -98,14 +98,15 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if name == sym::new;\n                             if cx.effective_visibilities.is_reachable(impl_item.owner_id.def_id);\n                             let self_def_id = cx.tcx.hir().get_parent_item(id.into());\n-                            let self_ty = cx.tcx.type_of(self_def_id);\n+                            let self_ty = cx.tcx.type_of(self_def_id).subst_identity();\n                             if self_ty == return_ty(cx, id);\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);\n                             then {\n                                 if self.impling_types.is_none() {\n                                     let mut impls = HirIdSet::default();\n                                     cx.tcx.for_each_impl(default_trait_id, |d| {\n-                                        if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                                        let ty = cx.tcx.type_of(d).subst_identity();\n+                                        if let Some(ty_def) = ty.ty_adt_def() {\n                                             if let Some(local_def_id) = ty_def.did().as_local() {\n                                                 impls.insert(cx.tcx.hir().local_def_id_to_hir_id(local_def_id));\n                                             }\n@@ -118,7 +119,8 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                 // generics\n                                 if_chain! {\n                                     if let Some(ref impling_types) = self.impling_types;\n-                                    if let Some(self_def) = cx.tcx.type_of(self_def_id).ty_adt_def();\n+                                    let self_def = cx.tcx.type_of(self_def_id).subst_identity();\n+                                    if let Some(self_def) = self_def.ty_adt_def();\n                                     if let Some(self_local_did) = self_def.did().as_local();\n                                     let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n                                     if impling_types.contains(&self_id);"}, {"sha": "0bedab05eec6107b42601529a821f4116e05f9d6", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                                 // and, in that case, the definition is *not* generic.\n                                 cx.tcx.normalize_erasing_regions(\n                                     cx.tcx.param_env(of_trait_def_id),\n-                                    cx.tcx.type_of(of_assoc_item),\n+                                    cx.tcx.type_of(of_assoc_item).subst_identity(),\n                                 ),\n                             ))\n                             .is_err();"}, {"sha": "fc550936165e63e21fadaf8a66f30d67549e31f1", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -505,13 +505,13 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n     if let FnRetTy::Return(ty) = sig.decl.output\n         && let Some((out, Mutability::Mut, _)) = get_ref_lm(ty)\n     {\n-        let out_region = cx.tcx.named_region(out.hir_id);\n+        let out_region = cx.tcx.named_bound_var(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n             .filter_map(get_ref_lm)\n-            .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n+            .filter(|&(lt, _, _)| cx.tcx.named_bound_var(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n         if let Some(args) = args"}, {"sha": "398329e455bfaad443fbbd01bda5bf397657681d", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -11,8 +11,6 @@ use rustc_middle::ty::adjustment::{Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use std::iter;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for redundant slicing expressions which use the full range, and\n@@ -136,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                 } else if let Some(target_id) = cx.tcx.lang_items().deref_target() {\n                     if let Ok(deref_ty) = cx.tcx.try_normalize_erasing_regions(\n                         cx.param_env,\n-                        cx.tcx.mk_projection(target_id, cx.tcx.mk_substs(iter::once(GenericArg::from(indexed_ty)))),\n+                        cx.tcx.mk_projection(target_id, cx.tcx.intern_substs(&[GenericArg::from(indexed_ty)])),\n                     ) {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;"}, {"sha": "45433b2adf0657177b95ef7b17646e93c661b035", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n         for id in cx.tcx.hir().items() {\n-            if matches!(cx.tcx.def_kind(id.owner_id), DefKind::Impl)\n+            if matches!(cx.tcx.def_kind(id.owner_id), DefKind::Impl { .. })\n                 && let item = cx.tcx.hir().item(id)\n                 && let ItemKind::Impl(Impl {\n                     items,"}, {"sha": "beca203c868d85c9fc470e1309a9cd10995ef6b4", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n \n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let item = cx.tcx.hir().expect_item(parent);\n-        let self_ty = cx.tcx.type_of(item.owner_id);\n+        let self_ty = cx.tcx.type_of(item.owner_id).subst_identity();\n         let ret_ty = return_ty(cx, impl_item.owner_id);\n \n         // Do not check trait impls"}, {"sha": "b2f4b310915a6fa5b40549c86363fd97b966e84e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n             },\n             ExprKind::Index(target, _idx) => {\n                 let e_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-                if matches!(e_ty.kind(), ty::Str) || is_type_lang_item(cx, e_ty, LangItem::String) {\n+                if e_ty.is_str() || is_type_lang_item(cx, e_ty, LangItem::String) {\n                     span_lint(\n                         cx,\n                         STRING_SLICE,\n@@ -407,7 +407,7 @@ impl<'tcx> LateLintPass<'tcx> for StrToString {\n             if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, ty, ..) = ty.kind();\n-            if *ty.kind() == ty::Str;\n+            if ty.is_str();\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "1382c1a40da2417f21c747d71addff0b5fa10ed4", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -62,7 +62,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n \n         // Then check if that that array zero-sized\n         let length = Const::from_anon_const(cx.tcx, length.def_id);\n-        let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+        let length = length.try_eval_target_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;\n         then {\n             length == 0"}, {"sha": "6bdb9aa5a26d213bc2393998df675d7412ee4002", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n /// Checks for `transmute_ptr_to_ref` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`."}, {"sha": "426c7253806e394ca362cfb49d40375955afa897", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -22,7 +22,8 @@ pub(super) fn check<'tcx>(\n \n     if let (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) = (&from_ty.kind(), &to_ty.kind()) {\n         if_chain! {\n-            if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n+            if let ty::Slice(slice_ty) = *ty_from.kind();\n+            if ty_to.is_str();\n             if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n             if from_mutbl == to_mutbl;\n             then {"}, {"sha": "5e24213d07fd24cd9704e26ff039e037e3804701", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -273,7 +273,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     .non_enum_variant()\n                     .fields\n                     .iter()\n-                    .map(|f| cx.tcx.bound_type_of(f.did).subst(cx.tcx, substs));\n+                    .map(|f| cx.tcx.type_of(f.did).subst(cx.tcx, substs));\n                 let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::TypeErasure { raw_ptr_only: false };\n                 };"}, {"sha": "56207fe767c5716107cca75b48388463013e2a93", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n /// Checks for `useless_transmute` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`."}, {"sha": "f7adc9d35558b8eaae9b16223409574bb89b4723", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_span::symbol::sym;\n \n use super::{utils, REDUNDANT_ALLOCATION};"}, {"sha": "d3062f3d2e36002f3dcf5e2135535397e29dc8d4", "filename": "clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeVisitableExt;\n use rustc_span::symbol::sym;\n \n use super::VEC_BOX;"}, {"sha": "a57bf7ee82255f43782b0dd1e4f401bab86a73c4", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -12,9 +12,9 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::DUMMY_SP;\n-\n use std::cell::Cell;\n use std::mem;\n+use thin_vec::{thin_vec, ThinVec};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -214,7 +214,7 @@ macro_rules! always_pat {\n /// Focus on `focus_idx` in `alternatives`,\n /// attempting to extend it with elements of the same constructor `C`\n /// in `alternatives[focus_idx + 1..]`.\n-fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize) -> bool {\n+fn transform_with_focus_on_idx(alternatives: &mut ThinVec<P<Pat>>, focus_idx: usize) -> bool {\n     // Extract the kind; we'll need to make some changes in it.\n     let mut focus_kind = mem::replace(&mut alternatives[focus_idx].kind, PatKind::Wild);\n     // We'll focus on `alternatives[focus_idx]`,\n@@ -296,7 +296,7 @@ fn extend_with_struct_pat(\n     fps1: &mut [ast::PatField],\n     rest1: bool,\n     start: usize,\n-    alternatives: &mut Vec<P<Pat>>,\n+    alternatives: &mut ThinVec<P<Pat>>,\n ) -> bool {\n     (0..fps1.len()).any(|idx| {\n         let pos_in_2 = Cell::new(None); // The element `k`.\n@@ -336,9 +336,9 @@ fn extend_with_struct_pat(\n fn extend_with_matching_product(\n     targets: &mut [P<Pat>],\n     start: usize,\n-    alternatives: &mut Vec<P<Pat>>,\n+    alternatives: &mut ThinVec<P<Pat>>,\n     predicate: impl Fn(&PatKind, &[P<Pat>], usize) -> bool,\n-    extract: impl Fn(PatKind) -> Vec<P<Pat>>,\n+    extract: impl Fn(PatKind) -> ThinVec<P<Pat>>,\n ) -> bool {\n     (0..targets.len()).any(|idx| {\n         let tail_or = drain_matching(\n@@ -365,14 +365,14 @@ fn take_pat(from: &mut Pat) -> Pat {\n \n /// Extend `target` as an or-pattern with the alternatives\n /// in `tail_or` if there are any and return if there were.\n-fn extend_with_tail_or(target: &mut Pat, tail_or: Vec<P<Pat>>) -> bool {\n-    fn extend(target: &mut Pat, mut tail_or: Vec<P<Pat>>) {\n+fn extend_with_tail_or(target: &mut Pat, tail_or: ThinVec<P<Pat>>) -> bool {\n+    fn extend(target: &mut Pat, mut tail_or: ThinVec<P<Pat>>) {\n         match target {\n             // On an existing or-pattern in the target, append to it.\n             Pat { kind: Or(ps), .. } => ps.append(&mut tail_or),\n             // Otherwise convert the target to an or-pattern.\n             target => {\n-                let mut init_or = vec![P(take_pat(target))];\n+                let mut init_or = thin_vec![P(take_pat(target))];\n                 init_or.append(&mut tail_or);\n                 target.kind = Or(init_or);\n             },\n@@ -391,26 +391,42 @@ fn extend_with_tail_or(target: &mut Pat, tail_or: Vec<P<Pat>>) -> bool {\n // Only elements beginning with `start` are considered for extraction.\n fn drain_matching(\n     start: usize,\n-    alternatives: &mut Vec<P<Pat>>,\n+    alternatives: &mut ThinVec<P<Pat>>,\n     predicate: impl Fn(&PatKind) -> bool,\n     extract: impl Fn(PatKind) -> P<Pat>,\n-) -> Vec<P<Pat>> {\n-    let mut tail_or = vec![];\n+) -> ThinVec<P<Pat>> {\n+    let mut tail_or = ThinVec::new();\n     let mut idx = 0;\n-    for pat in alternatives.drain_filter(|p| {\n-        // Check if we should extract, but only if `idx >= start`.\n+\n+    // If `ThinVec` had the `drain_filter` method, this loop could be rewritten\n+    // like so:\n+    //\n+    //   for pat in alternatives.drain_filter(|p| {\n+    //       // Check if we should extract, but only if `idx >= start`.\n+    //       idx += 1;\n+    //       idx > start && predicate(&p.kind)\n+    //   }) {\n+    //       tail_or.push(extract(pat.into_inner().kind));\n+    //   }\n+    let mut i = 0;\n+    while i < alternatives.len() {\n         idx += 1;\n-        idx > start && predicate(&p.kind)\n-    }) {\n-        tail_or.push(extract(pat.into_inner().kind));\n+        // Check if we should extract, but only if `idx >= start`.\n+        if idx > start && predicate(&alternatives[i].kind) {\n+            let pat = alternatives.remove(i);\n+            tail_or.push(extract(pat.into_inner().kind));\n+        } else {\n+            i += 1;\n+        }\n     }\n+\n     tail_or\n }\n \n fn extend_with_matching(\n     target: &mut Pat,\n     start: usize,\n-    alternatives: &mut Vec<P<Pat>>,\n+    alternatives: &mut ThinVec<P<Pat>>,\n     predicate: impl Fn(&PatKind) -> bool,\n     extract: impl Fn(PatKind) -> P<Pat>,\n ) -> bool {"}, {"sha": "e7c54000684abda97e466d071186c88fbe92bd32", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             } else {\n                 hir_ty_to_ty(cx.tcx, hir_ty)\n             };\n-            if same_type_and_consts(ty, cx.tcx.type_of(impl_id));\n+            if same_type_and_consts(ty, cx.tcx.type_of(impl_id).subst_identity());\n             then {\n                 span_lint(cx, hir_ty.span);\n             }\n@@ -230,7 +230,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if !expr.span.from_expansion();\n             if self.msrv.meets(msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n-            if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n+            if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id).subst_identity();\n             then {} else { return; }\n         }\n         match expr.kind {\n@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let PatKind::Path(QPath::Resolved(_, path))\n                  | PatKind::TupleStruct(QPath::Resolved(_, path), _, _)\n                  | PatKind::Struct(QPath::Resolved(_, path), _, _) = pat.kind;\n-            if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n+            if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id).subst_identity();\n             then {\n                 check_path(cx, path);\n             }"}, {"sha": "688a8b865f329475037d888104412acd7cd3d687", "filename": "clippy_lints/src/utils/internal_lints/interning_defined_symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finterning_defined_symbol.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n                 for item in cx.tcx.module_children(def_id).iter() {\n                     if_chain! {\n                         if let Res::Def(DefKind::Const, item_def_id) = item.res;\n-                        let ty = cx.tcx.type_of(item_def_id);\n+                        let ty = cx.tcx.type_of(item_def_id).subst_identity();\n                         if match_type(cx, ty, &paths::SYMBOL);\n                         if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n                         if let Ok(value) = value.to_u32();"}, {"sha": "09f0f0d0adb6f28a8bb66aa595387e3790296b38", "filename": "clippy_lints/src/utils/internal_lints/msrv_attr_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmsrv_attr_impl.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -39,6 +39,7 @@ impl LateLintPass<'_> for MsrvAttrImpl {\n             if self_ty_def.all_fields().any(|f| {\n                 cx.tcx\n                     .type_of(f.did)\n+                    .subst_identity()\n                     .walk()\n                     .filter(|t| matches!(t.unpack(), GenericArgKind::Type(_)))\n                     .any(|t| match_type(cx, t.expect_ty(), &paths::MSRV))"}, {"sha": "b59ef4086cd8b77c45986a34e420dea505d126d9", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{def_path_def_ids, is_lint_allowed, match_any_def_paths, peel_hir_expr_refs};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -44,7 +44,7 @@ impl_lint_pass!(UnnecessaryDefPath => [UNNECESSARY_DEF_PATH]);\n \n #[derive(Default)]\n pub struct UnnecessaryDefPath {\n-    array_def_ids: FxHashSet<(DefId, Span)>,\n+    array_def_ids: FxIndexSet<(DefId, Span)>,\n     linted_def_ids: FxHashSet<DefId>,\n }\n \n@@ -229,11 +229,11 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n             Res::Def(DefKind::Static(_), def_id) => read_mir_alloc_def_path(\n                 cx,\n                 cx.tcx.eval_static_initializer(def_id).ok()?.inner(),\n-                cx.tcx.type_of(def_id),\n+                cx.tcx.type_of(def_id).subst_identity(),\n             ),\n             Res::Def(DefKind::Const, def_id) => match cx.tcx.const_eval_poly(def_id).ok()? {\n                 ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => {\n-                    read_mir_alloc_def_path(cx, alloc.inner(), cx.tcx.type_of(def_id))\n+                    read_mir_alloc_def_path(cx, alloc.inner(), cx.tcx.type_of(def_id).subst_identity())\n                 },\n                 _ => None,\n             },"}, {"sha": "93e4b023c5c79a6e03f3cfcb0d7994b50706ead0", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf as _;\n-use rustc_middle::ty::{Adt, Ty, TypeVisitable};\n+use rustc_middle::ty::{Adt, Ty, TypeVisitableExt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n "}, {"sha": "d82098523e3bea2a967577714dc9f2929f89e892", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -144,7 +144,8 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (_, Paren(r)) => eq_expr(l, r),\n         (Err, Err) => true,\n         (Box(l), Box(r)) | (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n-        (Array(l), Array(r)) | (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n+        (Array(l), Array(r)) => over(l, r, |l, r| eq_expr(l, r)),\n+        (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),\n         (Call(lc, la), Call(rc, ra)) => eq_expr(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n         ("}, {"sha": "8b00ce2cc258632bed3ee8259c169a86870e2ec4", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n             ExprKind::Tup(tup) => self.multi(tup).map(Constant::Tuple),\n             ExprKind::Repeat(value, _) => {\n                 let n = match self.typeck_results.expr_ty(e).kind() {\n-                    ty::Array(_, n) => n.try_eval_usize(self.lcx.tcx, self.lcx.param_env)?,\n+                    ty::Array(_, n) => n.try_eval_target_usize(self.lcx.tcx, self.lcx.param_env)?,\n                     _ => span_bug!(e.span, \"typeck error\"),\n                 };\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))\n@@ -640,7 +640,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n         },\n         mir::ConstantKind::Val(ConstValue::ByRef { alloc, offset: _ }, _) => match result.ty().kind() {\n             ty::Array(sub_type, len) => match sub_type.kind() {\n-                ty::Float(FloatTy::F32) => match len.kind().try_to_machine_usize(tcx) {\n+                ty::Float(FloatTy::F32) => match len.kind().try_to_target_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(4 * usize::try_from(len).unwrap()))\n@@ -651,7 +651,7 @@ pub fn miri_to_const<'tcx>(tcx: TyCtxt<'tcx>, result: mir::ConstantKind<'tcx>) -\n                         .map(Constant::Vec),\n                     _ => None,\n                 },\n-                ty::Float(FloatTy::F64) => match len.kind().try_to_machine_usize(tcx) {\n+                ty::Float(FloatTy::F64) => match len.kind().try_to_target_usize(tcx) {\n                     Some(len) => alloc\n                         .inner()\n                         .inspect_with_uninit_and_ptr_outside_interpreter(0..(8 * usize::try_from(len).unwrap()))"}, {"sha": "6ff7728374f83f87dd2906269e3d2df294ec6479", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -50,7 +50,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n     let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n-        Some(id) => cx.tcx.type_of(id),\n+        Some(id) => cx.tcx.type_of(id).subst_identity(),\n         None => return Lazy,\n     };\n \n@@ -71,7 +71,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             .variants()\n             .iter()\n             .flat_map(|v| v.fields.iter())\n-            .any(|x| matches!(cx.tcx.type_of(x.did).peel_refs().kind(), ty::Param(_)))\n+            .any(|x| matches!(cx.tcx.type_of(x.did).subst_identity().peel_refs().kind(), ty::Param(_)))\n             && all_predicates_of(cx.tcx, fn_id).all(|(pred, _)| match pred.kind().skip_binder() {\n                 PredicateKind::Clause(ty::Clause::Trait(pred)) => cx.tcx.trait_def(pred.trait_ref.def_id).is_marker,\n                 _ => true,"}, {"sha": "f02f8ecb43d7204568c012be76a2d7d4d87a10d0", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -104,7 +104,7 @@ use rustc_middle::ty::fast_reject::SimplifiedType::{\n     PtrSimplifiedType, SliceSimplifiedType, StrSimplifiedType, UintSimplifiedType,\n };\n use rustc_middle::ty::{\n-    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitable, UpvarCapture,\n+    layout::IntegerExt, BorrowKind, ClosureKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeVisitableExt, UpvarCapture,\n };\n use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -317,7 +317,7 @@ pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str])\n /// Checks if a method is defined in an impl of a diagnostic item\n pub fn is_diag_item_method(cx: &LateContext<'_>, def_id: DefId, diag_item: Symbol) -> bool {\n     if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n-        if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+        if let Some(adt) = cx.tcx.type_of(impl_did).subst_identity().ty_adt_def() {\n             return cx.tcx.is_diagnostic_item(diag_item, adt.did());\n         }\n     }\n@@ -552,7 +552,7 @@ fn non_local_item_children_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: Symbol)\n             .filter(|item| item.ident.name == name)\n             .map(|child| child.res.expect_non_local())\n             .collect(),\n-        DefKind::Impl => tcx\n+        DefKind::Impl { .. } => tcx\n             .associated_item_def_ids(def_id)\n             .iter()\n             .copied()\n@@ -812,7 +812,7 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n     if let QPath::TypeRelative(_, method) = path {\n         if method.ident.name == sym::new {\n             if let Some(impl_did) = cx.tcx.impl_of_method(def_id) {\n-                if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def() {\n+                if let Some(adt) = cx.tcx.type_of(impl_did).subst_identity().ty_adt_def() {\n                     return std_types_symbols.iter().any(|&symbol| {\n                         cx.tcx.is_diagnostic_item(symbol, adt.did()) || Some(adt.did()) == cx.tcx.lang_items().string()\n                     });"}, {"sha": "920ce8e655be01d9dc44d38d4d2364c66026e906", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::TypeVisitor};\n+use rustc_middle::ty::{self, visit::TypeVisitor, TyCtxt};\n use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;\n@@ -136,7 +136,7 @@ impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b,\n \n struct ContainsRegion;\n \n-impl TypeVisitor<'_> for ContainsRegion {\n+impl TypeVisitor<TyCtxt<'_>> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "1a35fe05067fc2ec715765c4c3321dd8cc57a6db", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -30,12 +30,14 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                     ty::Clause::RegionOutlives(_)\n                     | ty::Clause::TypeOutlives(_)\n                     | ty::Clause::Projection(_)\n-                    | ty::Clause::Trait(..),\n+                    | ty::Clause::Trait(..)\n+                    | ty::Clause::ConstArgHasType(..),\n                 )\n                 | ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n+                ty::PredicateKind::AliasEq(..) => panic!(\"alias eq predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),"}, {"sha": "7cbb77ea2a8b145cfa30729d0efc61887a537ffa", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -17,8 +17,8 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n-    VariantDef, VariantDiscr,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n+    TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -346,7 +346,7 @@ pub fn is_non_aggregate_primitive_type(ty: Ty<'_>) -> bool {\n pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n     match *ty.kind() {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n-        ty::Ref(_, inner, _) if *inner.kind() == ty::Str => true,\n+        ty::Ref(_, inner, _) if inner.is_str() => true,\n         ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(inner_type),\n         ty::Tuple(inner_types) => inner_types.iter().all(is_recursively_primitive_type),\n         _ => false,\n@@ -780,7 +780,7 @@ impl core::ops::Add<u32> for EnumValue {\n #[expect(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n     if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n-        match tcx.type_of(id).kind() {\n+        match tcx.type_of(id).subst_identity().kind() {\n             ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n                 1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n                 2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n@@ -838,7 +838,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n         index: u32,\n         f: F,\n     }\n-    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<'tcx> for V<F> {\n+    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<TyCtxt<'tcx>> for V<F> {\n         type BreakTy = B;\n         fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let RegionKind::ReLateBound(idx, bound) = r.kind() && idx.as_u32() == self.index {\n@@ -847,7 +847,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n                 ControlFlow::Continue(())\n             }\n         }\n-        fn visit_binder<T: TypeVisitable<'tcx>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(&mut self, t: &Binder<'tcx, T>) -> ControlFlow<Self::BreakTy> {\n             self.index += 1;\n             let res = t.super_visit_with(self);\n             self.index -= 1;\n@@ -914,7 +914,7 @@ pub fn adt_and_variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<\n             Some((adt, adt.variant_with_id(var_id)))\n         },\n         Res::SelfCtor(id) => {\n-            let adt = cx.tcx.type_of(id).ty_adt_def().unwrap();\n+            let adt = cx.tcx.type_of(id).subst_identity().ty_adt_def().unwrap();\n             Some((adt, adt.non_enum_variant()))\n         },\n         _ => None,\n@@ -962,7 +962,7 @@ pub fn approx_ty_size<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> u64 {\n         (Ok(size), _) => size,\n         (Err(_), ty::Tuple(list)) => list.as_substs().types().map(|t| approx_ty_size(cx, t)).sum(),\n         (Err(_), ty::Array(t, n)) => {\n-            n.try_eval_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n+            n.try_eval_target_usize(cx.tcx, cx.param_env).unwrap_or_default() * approx_ty_size(cx, *t)\n         },\n         (Err(_), ty::Adt(def, subst)) if def.is_struct() => def\n             .variants()"}, {"sha": "cfe845ec78f0a020bba0df2435244f3b10840082", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-02-10\"\n+channel = \"nightly-2023-02-25\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "dd183362f276e5b79ba34e4f9d5fe2939b1c16ed", "filename": "src/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -209,7 +209,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,\n@@ -220,6 +220,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         None,\n         false,\n         false,\n+        rustc_errors::TerminalUrl::No,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "837811bdf1effaa4188c5c4c0c2b5dbeecf9a39d", "filename": "tests/ui-internal/custom_ice_message.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,8 +1,9 @@\n // rustc-env:RUST_BACKTRACE=0\n // normalize-stderr-test: \"Clippy version: .*\" -> \"Clippy version: foo\"\n-// normalize-stderr-test: \"internal_lints.rs:\\d*:\\d*\" -> \"internal_lints.rs\"\n+// normalize-stderr-test: \"produce_ice.rs:\\d*:\\d*\" -> \"produce_ice.rs\"\n // normalize-stderr-test: \"', .*clippy_lints\" -> \"', clippy_lints\"\n // normalize-stderr-test: \"'rustc'\" -> \"'<unnamed>'\"\n+// normalize-stderr-test: \"(?ms)query stack during panic:\\n.*end of query stack\\n\" -> \"\"\n \n #![deny(clippy::internal)]\n #![allow(clippy::missing_clippy_version_attribute)]"}, {"sha": "7ed0ef0274fa39b824ab57cc5056ad996fd27aa0", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,4 +1,4 @@\n-thread '<unnamed>' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints/produce_ice.rs:28:9\n+thread '<unnamed>' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints/produce_ice.rs\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n@@ -9,5 +9,3 @@ note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy\n \n note: Clippy version: foo\n \n-query stack during panic:\n-end of query stack"}, {"sha": "3ca45404e44bb88290ad846bccca89f21b88f6a7", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,19 +1,11 @@\n-error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n-   |\n-LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `sym::deref_method`\n-   = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n-\n error: hardcoded path to a diagnostic item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n    |\n LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: convert all references to use `sym::Deref`\n+   = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n error: hardcoded path to a language item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n@@ -23,5 +15,13 @@ LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"]\n    |\n    = help: convert all references to use `LangItem::DerefMut`\n \n+error: hardcoded path to a diagnostic item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n+   |\n+LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `sym::deref_method`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "b410f56e1671a32d3ed3f98adacb7ac53236ad57", "filename": "tests/ui/missing_doc_impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fmissing_doc_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fmissing_doc_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.stderr?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -51,13 +51,13 @@ LL | |     fn foo_with_impl(&self) {}\n LL | | }\n    | |_^\n \n-error: missing documentation for an associated function\n+error: missing documentation for a method\n   --> $DIR/missing_doc_impl.rs:44:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n-error: missing documentation for an associated function\n+error: missing documentation for a method\n   --> $DIR/missing_doc_impl.rs:45:5\n    |\n LL |     fn foo_with_impl(&self) {}"}, {"sha": "7803418cb047dbd0ff25c097d68ebfe9d8b8567b", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,4 +1,9 @@\n-#![allow(dead_code, clippy::missing_safety_doc, clippy::extra_unused_lifetimes)]\n+#![allow(\n+    dead_code,\n+    clippy::missing_safety_doc,\n+    clippy::extra_unused_lifetimes,\n+    clippy::extra_unused_type_parameters\n+)]\n #![warn(clippy::new_without_default)]\n \n pub struct Foo;"}, {"sha": "583dd327d6a5d8856b2cae4eadd2efef217d9b82", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,5 +1,5 @@\n error: you should consider adding a `Default` implementation for `Foo`\n-  --> $DIR/new_without_default.rs:7:5\n+  --> $DIR/new_without_default.rs:12:5\n    |\n LL | /     pub fn new() -> Foo {\n LL | |         Foo\n@@ -17,7 +17,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Bar`\n-  --> $DIR/new_without_default.rs:15:5\n+  --> $DIR/new_without_default.rs:20:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Bar\n@@ -34,7 +34,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n-  --> $DIR/new_without_default.rs:79:5\n+  --> $DIR/new_without_default.rs:84:5\n    |\n LL | /     pub fn new() -> LtKo<'c> {\n LL | |         unimplemented!()\n@@ -51,7 +51,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n-  --> $DIR/new_without_default.rs:172:5\n+  --> $DIR/new_without_default.rs:177:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         NewNotEqualToDerive { foo: 1 }\n@@ -68,7 +68,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n-  --> $DIR/new_without_default.rs:180:5\n+  --> $DIR/new_without_default.rs:185:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -85,7 +85,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n-  --> $DIR/new_without_default.rs:187:5\n+  --> $DIR/new_without_default.rs:192:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -102,7 +102,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Foo<T>`\n-  --> $DIR/new_without_default.rs:198:9\n+  --> $DIR/new_without_default.rs:203:9\n    |\n LL | /         pub fn new() -> Self {\n LL | |             todo!()"}, {"sha": "276266a2dd80358b1af6d47a1d8b5e7a6a6b60b5", "filename": "tests/ui/redundant_field_names.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fredundant_field_names.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fredundant_field_names.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.fixed?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::redundant_field_names)]\n-#![allow(clippy::no_effect, dead_code, unused_variables)]\n+#![allow(clippy::extra_unused_type_parameters, clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "f674141c138e1283912809b8f1863a86d1d4b51d", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::redundant_field_names)]\n-#![allow(clippy::no_effect, dead_code, unused_variables)]\n+#![allow(clippy::extra_unused_type_parameters, clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "8b4613b3f6ec73f3c7072ce8a20583f5463ccd02", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::type_repetition_in_bounds)]\n+#![allow(clippy::extra_unused_type_parameters)]\n \n use std::ops::{Add, AddAssign, Div, DivAssign, Mul, MulAssign, Sub, SubAssign};\n "}, {"sha": "a90df03c04ffc2738fe848edd8023803d988e577", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/149392b0baa4730c68f3c3eadf5c6ed7b16b85a4/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=149392b0baa4730c68f3c3eadf5c6ed7b16b85a4", "patch": "@@ -1,5 +1,5 @@\n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:8:5\n+  --> $DIR/type_repetition_in_bounds.rs:9:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n@@ -12,23 +12,23 @@ LL | #![deny(clippy::type_repetition_in_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:25:5\n+  --> $DIR/type_repetition_in_bounds.rs:26:5\n    |\n LL |     Self: Copy + Default + Ord,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:85:5\n+  --> $DIR/type_repetition_in_bounds.rs:86:5\n    |\n LL |     T: Clone,\n    |     ^^^^^^^^\n    |\n    = help: consider combining the bounds: `T: ?Sized + Clone`\n \n error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:90:5\n+  --> $DIR/type_repetition_in_bounds.rs:91:5\n    |\n LL |     T: ?Sized,\n    |     ^^^^^^^^^"}]}