{"sha": "f07f793fa870b45237269a6266cb9eb85a4c05ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2Y3OTNmYTg3MGI0NTIzNzI2OWE2MjY2Y2I5ZWI4NWE0YzA1ZWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-02-21T08:16:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-21T08:16:07Z"}, "message": "Merge pull request #1544 from bood/master\n\nAdd lint for unnecessary casts (cast to same type)", "tree": {"sha": "6522c311f7b02be9e4b476e3daa674da30b64d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6522c311f7b02be9e4b476e3daa674da30b64d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07f793fa870b45237269a6266cb9eb85a4c05ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07f793fa870b45237269a6266cb9eb85a4c05ec", "html_url": "https://github.com/rust-lang/rust/commit/f07f793fa870b45237269a6266cb9eb85a4c05ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07f793fa870b45237269a6266cb9eb85a4c05ec/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3900223762824956e7c38aa64bc206549e617229", "url": "https://api.github.com/repos/rust-lang/rust/commits/3900223762824956e7c38aa64bc206549e617229", "html_url": "https://github.com/rust-lang/rust/commit/3900223762824956e7c38aa64bc206549e617229"}, {"sha": "ee86d46cd1555d06e2a01d9bd928b44db07cb853", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee86d46cd1555d06e2a01d9bd928b44db07cb853", "html_url": "https://github.com/rust-lang/rust/commit/ee86d46cd1555d06e2a01d9bd928b44db07cb853"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "fd29dd896012478ef3ae544f7220eeac56630172", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07f793fa870b45237269a6266cb9eb85a4c05ec/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f07f793fa870b45237269a6266cb9eb85a4c05ec/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f07f793fa870b45237269a6266cb9eb85a4c05ec", "patch": "@@ -447,6 +447,7 @@ All notable changes to this project will be documented in this file.\n [`type_complexity`]: https://github.com/Manishearth/rust-clippy/wiki#type_complexity\n [`unicode_not_nfc`]: https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc\n [`unit_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#unit_cmp\n+[`unnecessary_cast`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_cast\n [`unnecessary_mut_passed`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed\n [`unnecessary_operation`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation\n [`unneeded_field_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern"}, {"sha": "6c11c8e53eca894e913aab8c4a47af0a9e20a2b3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07f793fa870b45237269a6266cb9eb85a4c05ec/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f07f793fa870b45237269a6266cb9eb85a4c05ec/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f07f793fa870b45237269a6266cb9eb85a4c05ec", "patch": "@@ -351,6 +351,7 @@ name\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                     | warn    | usage of very complex types that might be better factored into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                     | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                   | warn    | comparing unit values\n+[unnecessary_cast](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_cast)                                   | warn    | cast to the same type, e.g `x as i32` where `x: i32`\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                       | warn    | an argument passed as a mutable reference although the callee only demands an immutable reference\n [unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                         | warn    | outer expressions with no effect\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                       | warn    | struct fields bound to a wildcard instead of using `..`"}, {"sha": "a755ed68407339ede19dcea6edea37ca174a2a26", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f07f793fa870b45237269a6266cb9eb85a4c05ec/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07f793fa870b45237269a6266cb9eb85a4c05ec/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f07f793fa870b45237269a6266cb9eb85a4c05ec", "patch": "@@ -497,6 +497,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         types::LINKEDLIST,\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n+        types::UNNECESSARY_CAST,\n         unicode::ZERO_WIDTH_SPACE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "17d4ebd870810dedd061ce84272038bb23e74a53", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f07f793fa870b45237269a6266cb9eb85a4c05ec/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07f793fa870b45237269a6266cb9eb85a4c05ec/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f07f793fa870b45237269a6266cb9eb85a4c05ec", "patch": "@@ -379,6 +379,22 @@ declare_lint! {\n      and `x > i32::MAX`\"\n }\n \n+/// **What it does:** Checks for casts to the same type.\n+///\n+/// **Why is this bad?** It's just unnecessary.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _ = 2i32 as i32\n+/// ```\n+declare_lint! {\n+    pub UNNECESSARY_CAST,\n+    Warn,\n+    \"cast to the same type, e.g `x as i32` where `x: i32`\"\n+}\n+\n /// Returns the size in bits of an integral type.\n /// Will return 0 if the type is not an int or uint variant\n fn int_ty_to_nbits(typ: &ty::TyS) -> usize {\n@@ -503,14 +519,32 @@ impl LintPass for CastPass {\n         lint_array!(CAST_PRECISION_LOSS,\n                     CAST_SIGN_LOSS,\n                     CAST_POSSIBLE_TRUNCATION,\n-                    CAST_POSSIBLE_WRAP)\n+                    CAST_POSSIBLE_WRAP,\n+                    UNNECESSARY_CAST)\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprCast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n+            if let ExprLit(ref lit) = ex.node {\n+                use syntax::ast::{LitKind, LitIntType};\n+                match lit.node {\n+                    LitKind::Int(_, LitIntType::Unsuffixed) |\n+                    LitKind::FloatUnsuffixed(_) => {},\n+                    _ => {\n+                        if cast_from.sty == cast_to.sty && !in_external_macro(cx, expr.span) {\n+                            span_lint(cx,\n+                                      UNNECESSARY_CAST,\n+                                      expr.span,\n+                                      &format!(\"casting to the same type is unnecessary (`{}` -> `{}`)\",\n+                                               cast_from,\n+                                               cast_to));\n+                        }\n+                    },\n+                }\n+            }\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false) => {"}, {"sha": "d63e0b102787e7a54d9fb24a0bc47ff9bbc0774e", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f07f793fa870b45237269a6266cb9eb85a4c05ec/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07f793fa870b45237269a6266cb9eb85a4c05ec/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=f07f793fa870b45237269a6266cb9eb85a4c05ec", "patch": "@@ -61,4 +61,17 @@ fn main() {\n     1u32 as usize; // Should not trigger any lint\n     1i32 as isize; // Neither should this\n     1i32 as usize;\n+\n+    // Test cast_unnecessary\n+    1i32 as i32;\n+    1f32 as f32;\n+    false as bool;\n+    &1i32 as &i32;\n+\n+    // Should not trigger\n+    1i32 as i64;\n+    let v = vec!(1);\n+    &v as &[i32];\n+    1.0 as f64;\n+    1 as u64;\n }"}, {"sha": "7238daa2b41165363bec6b2631448ff1de02a87b", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f07f793fa870b45237269a6266cb9eb85a4c05ec/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f07f793fa870b45237269a6266cb9eb85a4c05ec/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=f07f793fa870b45237269a6266cb9eb85a4c05ec", "patch": "@@ -274,5 +274,29 @@ error: casting i32 to usize may lose the sign of the value\n 63 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n+warning: casting to the same type is unnecessary (`i32` -> `i32`)\n+  --> $DIR/cast.rs:66:5\n+   |\n+66 |     1i32 as i32;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: #[warn(unnecessary_cast)] on by default\n+\n+warning: casting to the same type is unnecessary (`f32` -> `f32`)\n+  --> $DIR/cast.rs:67:5\n+   |\n+67 |     1f32 as f32;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: #[warn(unnecessary_cast)] on by default\n+\n+warning: casting to the same type is unnecessary (`bool` -> `bool`)\n+  --> $DIR/cast.rs:68:5\n+   |\n+68 |     false as bool;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(unnecessary_cast)] on by default\n+\n error: aborting due to 42 previous errors\n "}]}