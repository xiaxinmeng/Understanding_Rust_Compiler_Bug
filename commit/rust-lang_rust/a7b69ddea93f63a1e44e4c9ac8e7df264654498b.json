{"sha": "a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "node_id": "C_kwDOAAsO6NoAKGE3YjY5ZGRlYTkzZjYzYTFlNDRlNGM5YWM4ZTdkZjI2NDY1NDQ5OGI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-13T20:39:01Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-13T21:27:00Z"}, "message": "rustdoc: use a string with one-character codes for search index types\n\n    $ wc -c search-index.old.js search-index.new.js\n    3940530 search-index.old.js\n    3843222 search-index.new.js\n\n((3940530-3843222)/3940530)*100 = 2.47%\n\n    $ wc -c search-index.old.js.gz search-index.new.js.gz\n    380251 search-index.old.js.gz\n    379434 search-index.new.js.gz\n\n((380251-379434)/380251)*100 = 0.214%", "tree": {"sha": "d27eaac8c30723f992663c955c001a10bfd5919f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d27eaac8c30723f992663c955c001a10bfd5919f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "html_url": "https://github.com/rust-lang/rust/commit/a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b439b119b8d49450bddbbea317afeb0d4166f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b439b119b8d49450bddbbea317afeb0d4166f70", "html_url": "https://github.com/rust-lang/rust/commit/0b439b119b8d49450bddbbea317afeb0d4166f70"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "aafedc17499a7bb1a1769d2bbe321d1f4fd17f74", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "patch": "@@ -21,6 +21,7 @@ use crate::clean;\n /// a heading, edit the listing in `html/render.rs`, function `sidebar_module`. This uses an\n /// ordering based on a helper function inside `item_module`, in the same file.\n #[derive(Copy, PartialEq, Eq, Hash, Clone, Debug, PartialOrd, Ord)]\n+#[repr(u8)]\n pub(crate) enum ItemType {\n     Module = 0,\n     ExternCrate = 1,"}, {"sha": "090ea2cb15763ac0446cb8407ef357e7c7258d18", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "patch": "@@ -236,7 +236,16 @@ pub(crate) fn build_index<'tcx>(\n             crate_data.serialize_field(\"doc\", &self.doc)?;\n             crate_data.serialize_field(\n                 \"t\",\n-                &self.items.iter().map(|item| &item.ty).collect::<Vec<_>>(),\n+                &self\n+                    .items\n+                    .iter()\n+                    .map(|item| {\n+                        let n = item.ty as u8;\n+                        let c = char::try_from(n + b'A').expect(\"item types must fit in ASCII\");\n+                        assert!(c <= 'z', \"item types must fit within ASCII printables\");\n+                        c\n+                    })\n+                    .collect::<String>(),\n             )?;\n             crate_data.serialize_field(\n                 \"n\","}, {"sha": "1e6c94d29ba47dd0e32206573444fc6d599a80e6", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/a7b69ddea93f63a1e44e4c9ac8e7df264654498b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=a7b69ddea93f63a1e44e4c9ac8e7df264654498b", "patch": "@@ -1939,6 +1939,7 @@ function initSearch(rawSearchIndex) {\n          * @type {Array<string>}\n          */\n         const searchWords = [];\n+        const charA = \"A\".charCodeAt(0);\n         let i, word;\n         let currentIndex = 0;\n         let id = 0;\n@@ -1953,7 +1954,7 @@ function initSearch(rawSearchIndex) {\n             /**\n              * The raw search data for a given crate. `n`, `t`, `d`, and `q`, `i`, and `f`\n              * are arrays with the same length. n[i] contains the name of an item.\n-             * t[i] contains the type of that item (as a small integer that represents an\n+             * t[i] contains the type of that item (as a string of characters that represent an\n              * offset in `itemTypes`). d[i] contains the description of that item.\n              *\n              * q[i] contains the full path of the item, or an empty string indicating\n@@ -1980,7 +1981,7 @@ function initSearch(rawSearchIndex) {\n              *   doc: string,\n              *   a: Object,\n              *   n: Array<string>,\n-             *   t: Array<Number>,\n+             *   t: String,\n              *   d: Array<string>,\n              *   q: Array<string>,\n              *   i: Array<Number>,\n@@ -2009,7 +2010,7 @@ function initSearch(rawSearchIndex) {\n             searchIndex.push(crateRow);\n             currentIndex += 1;\n \n-            // an array of (Number) item types\n+            // a String of one character item type codes\n             const itemTypes = crateCorpus.t;\n             // an array of (String) item names\n             const itemNames = crateCorpus.n;\n@@ -2060,7 +2061,7 @@ function initSearch(rawSearchIndex) {\n                 }\n                 const row = {\n                     crate: crate,\n-                    ty: itemTypes[i],\n+                    ty: itemTypes.charCodeAt(i) - charA,\n                     name: itemNames[i],\n                     path: itemPaths[i] ? itemPaths[i] : lastPath,\n                     desc: itemDescs[i],"}]}