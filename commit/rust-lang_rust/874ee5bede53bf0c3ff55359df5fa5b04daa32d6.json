{"sha": "874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "node_id": "C_kwDOAAsO6NoAKDg3NGVlNWJlZGU1M2JmMGMzZmY1NTM1OWRmNWZhNWIwNGRhYTMyZDY", "commit": {"author": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2022-07-16T16:33:54Z"}, "committer": {"name": "Bryanskiy", "email": "ivakin.kir@gmail.com", "date": "2022-08-10T16:42:24Z"}, "message": "add crt-static for android", "tree": {"sha": "652eebb15872a7eadafdc3f53617ea075d1aab43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652eebb15872a7eadafdc3f53617ea075d1aab43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "html_url": "https://github.com/rust-lang/rust/commit/874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/comments", "author": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Bryanskiy", "id": 65131002, "node_id": "MDQ6VXNlcjY1MTMxMDAy", "avatar_url": "https://avatars.githubusercontent.com/u/65131002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bryanskiy", "html_url": "https://github.com/Bryanskiy", "followers_url": "https://api.github.com/users/Bryanskiy/followers", "following_url": "https://api.github.com/users/Bryanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/Bryanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bryanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bryanskiy/subscriptions", "organizations_url": "https://api.github.com/users/Bryanskiy/orgs", "repos_url": "https://api.github.com/users/Bryanskiy/repos", "events_url": "https://api.github.com/users/Bryanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/Bryanskiy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "html_url": "https://github.com/rust-lang/rust/commit/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "0d7604120462b328e796a1fca86515c33f31423a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "patch": "@@ -2139,9 +2139,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.126\"\n+version = \"0.2.129\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n+checksum = \"64de3cc433455c14174d42e554d4027ee631c4d046d43e3ecc6efc4636cdc7a7\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "2bf83a8782a1273a56eeeb04c4b52548bea9260f", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "patch": "@@ -10,6 +10,6 @@ pub fn opts() -> TargetOptions {\n     // for context. (At that time, there was no `-C force-unwind-tables`, so the only solution\n     // was to always emit `uwtable`).\n     base.default_uwtable = true;\n-    base.crt_static_respected = false;\n+    base.crt_static_respected = true;\n     base\n }"}, {"sha": "ebe0ccbdc0b2d4211b047bef1ba739d640c8f067", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "patch": "@@ -246,6 +246,7 @@\n #![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(linkage)]\n+#![feature(link_cfg)]\n #![feature(min_specialization)]\n #![feature(must_not_suspend)]\n #![feature(needs_panic_runtime)]"}, {"sha": "3a3750930998509fca767f8decf488a8f30797d5", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "patch": "@@ -295,8 +295,10 @@ pub fn abort_internal() -> ! {\n \n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"android\")] {\n-        #[link(name = \"dl\")]\n-        #[link(name = \"log\")]\n+        #[link(name = \"dl\", kind = \"static\", modifiers = \"-bundle\",\n+            cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"dl\", cfg(not(target_feature = \"crt-static\")))]\n+        #[link(name = \"log\", cfg(not(target_feature = \"crt-static\")))]\n         extern \"C\" {}\n     } else if #[cfg(target_os = \"freebsd\")] {\n         #[link(name = \"execinfo\")]"}, {"sha": "126e41d1e2015ecc5c930904222c1f45598dba06", "filename": "library/unwind/build.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "patch": "@@ -13,13 +13,8 @@ fn main() {\n         let has_unwind = build.is_flag_supported(\"-lunwind\").expect(\"Unable to invoke compiler\");\n \n         if has_unwind {\n-            println!(\"cargo:rustc-link-lib=unwind\");\n-        } else {\n-            println!(\"cargo:rustc-link-lib=gcc\");\n+            println!(\"cargo:rustc-cfg=feature=\\\"system-llvm-libunwind\\\"\");\n         }\n-\n-        // Android's unwinding library depends on dl_iterate_phdr in `libdl`.\n-        println!(\"cargo:rustc-link-lib=dl\");\n     } else if target.contains(\"freebsd\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"netbsd\") {"}, {"sha": "46fe50cb9453d9b045d95688e178146ff7b608ed", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874ee5bede53bf0c3ff55359df5fa5b04daa32d6/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=874ee5bede53bf0c3ff55359df5fa5b04daa32d6", "patch": "@@ -55,6 +55,26 @@ cfg_if::cfg_if! {\n     }\n }\n \n+#[cfg(target_os = \"android\")]\n+cfg_if::cfg_if! {\n+    if #[cfg(feature = \"llvm-libunwind\")] {\n+        compile_error!(\"`llvm-libunwind` is not supported for Android targets\");\n+    } else if #[cfg(feature = \"system-llvm-libunwind\")] {\n+        #[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"unwind\", cfg(not(target_feature = \"crt-static\")))]\n+        extern \"C\" {}\n+    } else {\n+        #[link(name = \"gcc\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"gcc\", cfg(not(target_feature = \"crt-static\")))]\n+        extern \"C\" {}\n+    }\n+}\n+// Android's unwinding library depends on dl_iterate_phdr in `libdl`.\n+#[cfg(target_os = \"android\")]\n+#[link(name = \"dl\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+#[link(name = \"dl\", cfg(not(target_feature = \"crt-static\")))]\n+extern \"C\" {}\n+\n // When building with crt-static, we get `gcc_eh` from the `libc` crate, since\n // glibc needs it, and needs it listed later on the linker command line. We\n // don't want to duplicate it here."}]}