{"sha": "80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZDlmOGJiNDhkMjc5OTMwN2Y4NGRkOGZhNjk4ODRjNWE0MDdhYzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-01T18:47:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-27T13:06:03Z"}, "message": "when canonicalizing query responses, preserve infer-var universes", "tree": {"sha": "5cdafac8f9de069ed4a652f82f6fdc035c559640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cdafac8f9de069ed4a652f82f6fdc035c559640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "html_url": "https://github.com/rust-lang/rust/commit/80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80d9f8bb48d2799307f84dd8fa69884c5a407ac6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9ab60afba07cd9015d2b2138906894a5359351", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9ab60afba07cd9015d2b2138906894a5359351", "html_url": "https://github.com/rust-lang/rust/commit/7f9ab60afba07cd9015d2b2138906894a5359351"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "94bb17988c7c2efd4769e1e660d81e6349e4e4e3", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/80d9f8bb48d2799307f84dd8fa69884c5a407ac6/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d9f8bb48d2799307f84dd8fa69884c5a407ac6/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=80d9f8bb48d2799307f84dd8fa69884c5a407ac6", "patch": "@@ -167,12 +167,20 @@ impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n     ) -> ty::Region<'tcx> {\n         match r {\n             ty::ReFree(_) | ty::ReEmpty | ty::ReErased | ty::ReStatic | ty::ReEarlyBound(..) => r,\n-            ty::RePlaceholder(placeholder) => {\n-                let info = CanonicalVarInfo {\n+            ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(\n+                CanonicalVarInfo {\n                     kind: CanonicalVarKind::PlaceholderRegion(*placeholder),\n-                };\n-                let cvar = canonicalizer.canonical_var(info, r.into());\n-                canonicalizer.tcx.mk_region(ty::ReCanonical(cvar.var))\n+                },\n+                r,\n+            ),\n+            ty::ReVar(vid) => {\n+                let universe = canonicalizer.region_var_universe(*vid);\n+                canonicalizer.canonical_var_for_region(\n+                    CanonicalVarInfo {\n+                        kind: CanonicalVarKind::Region(universe),\n+                    },\n+                    r,\n+                )\n             }\n             _ => {\n                 // Other than `'static` or `'empty`, the query\n@@ -259,7 +267,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n-                self.canonical_var_for_region_in_root_universe(r)\n+                self.canonicalize_region_mode\n+                    .canonicalize_free_region(self, r)\n             }\n \n             ty::ReStatic\n@@ -483,9 +492,29 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         &mut self,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n-        let info = CanonicalVarInfo {\n-            kind: CanonicalVarKind::Region(ty::UniverseIndex::ROOT),\n-        };\n+        self.canonical_var_for_region(\n+            CanonicalVarInfo {\n+                kind: CanonicalVarKind::Region(ty::UniverseIndex::ROOT),\n+            },\n+            r,\n+        )\n+    }\n+\n+    /// Returns the universe in which `vid` is defined.\n+    fn region_var_universe(&self, vid: ty::RegionVid) -> ty::UniverseIndex {\n+        self.infcx\n+            .unwrap()\n+            .borrow_region_constraints()\n+            .var_universe(vid)\n+    }\n+\n+    /// Create a canonical variable (with the given `info`)\n+    /// representing the region `r`; return a region referencing it.\n+    fn canonical_var_for_region(\n+        &mut self,\n+        info: CanonicalVarInfo,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n         let b = self.canonical_var(info, r.into());\n         debug_assert_eq!(ty::INNERMOST, b.level);\n         self.tcx().mk_region(ty::ReCanonical(b.var))"}]}