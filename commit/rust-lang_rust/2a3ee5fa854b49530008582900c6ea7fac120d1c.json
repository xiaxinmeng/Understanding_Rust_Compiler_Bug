{"sha": "2a3ee5fa854b49530008582900c6ea7fac120d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhM2VlNWZhODU0YjQ5NTMwMDA4NTgyOTAwYzZlYTdmYWMxMjBkMWM=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-07-07T20:47:32Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-08-27T16:25:38Z"}, "message": "Fix FP in `new_ret_no_self`: trigger in trait def instead of impl block", "tree": {"sha": "80f8970aa852ae3fdef3e68dd16c642b8a2dba63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f8970aa852ae3fdef3e68dd16c642b8a2dba63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3ee5fa854b49530008582900c6ea7fac120d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3ee5fa854b49530008582900c6ea7fac120d1c", "html_url": "https://github.com/rust-lang/rust/commit/2a3ee5fa854b49530008582900c6ea7fac120d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3ee5fa854b49530008582900c6ea7fac120d1c/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dead45fd5b2fb24d2259e3955a50c51de277a5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/dead45fd5b2fb24d2259e3955a50c51de277a5ac", "html_url": "https://github.com/rust-lang/rust/commit/dead45fd5b2fb24d2259e3955a50c51de277a5ac"}], "stats": {"total": 218, "additions": 212, "deletions": 6}, "files": [{"sha": "8e91cbb3cdfe0878a97a10ccf5aa9d5eaa8bb0a4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2a3ee5fa854b49530008582900c6ea7fac120d1c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3ee5fa854b49530008582900c6ea7fac120d1c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2a3ee5fa854b49530008582900c6ea7fac120d1c", "patch": "@@ -15,6 +15,7 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::{FnRetTy, FnSig, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n@@ -28,11 +29,11 @@ use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro, is_copy,\n-    is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n-    match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths,\n-    remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty,\n-    walk_ptrs_ty_depth, SpanlessEq,\n+    is_ctor_or_promotable_const_function, is_expn_of, is_self_ty, is_type_diagnostic_item, iter_input_pats,\n+    last_path_segment, match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls,\n+    method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1631,6 +1632,11 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n \n+        // if this impl block implements a trait, lint in trait definition instead\n+        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            return;\n+        }\n+\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n@@ -1670,6 +1676,48 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n     }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n+        if_chain! {\n+            if !in_external_macro(cx.tcx.sess, item.span);\n+            if !item.span.from_expansion();\n+            if item.ident.name == sym!(new);\n+            if let TraitItemKind::Fn(FnSig { decl, .. }, _) = &item.kind;\n+            if let FnRetTy::Return(ret_ty) = &decl.output;\n+\n+            then {\n+                let mut visitor = HasSelfVisitor { has_self_ty: false };\n+                visitor.visit_ty(ret_ty);\n+                if !visitor.has_self_ty {\n+                    span_lint(\n+                        cx,\n+                        NEW_RET_NO_SELF,\n+                        item.span,\n+                        \"methods called `new` usually return `Self`\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct HasSelfVisitor {\n+    pub has_self_ty: bool,\n+}\n+\n+impl<'tcx> intravisit::Visitor<'tcx> for HasSelfVisitor {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n+        if is_self_ty(ty) {\n+            self.has_self_ty = true;\n+        } else {\n+            intravisit::walk_ty(self, ty);\n+        }\n+    }\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::None\n+    }\n }\n \n /// Checks for the `OR_FUN_CALL` lint."}, {"sha": "e98360ea69115ce230cdae97fe1622648623c581", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/2a3ee5fa854b49530008582900c6ea7fac120d1c/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3ee5fa854b49530008582900c6ea7fac120d1c/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=2a3ee5fa854b49530008582900c6ea7fac120d1c", "patch": "@@ -210,3 +210,133 @@ impl<'a> WithLifetime<'a> {\n         unimplemented!();\n     }\n }\n+\n+mod issue5435 {\n+    struct V;\n+\n+    pub trait TraitRetSelf {\n+        // should not trigger lint\n+        fn new() -> Self;\n+    }\n+\n+    pub trait TraitRet {\n+        // should trigger lint as we are in trait definition\n+        fn new() -> String;\n+    }\n+    pub struct StructRet;\n+    impl TraitRet for StructRet {\n+        // should not trigger lint as we are in the impl block\n+        fn new() -> String {\n+            unimplemented!();\n+        }\n+    }\n+\n+    pub trait TraitRet2 {\n+        // should trigger lint\n+        fn new(_: String) -> String;\n+    }\n+\n+    trait TupleReturnerOk {\n+        // should not trigger lint\n+        fn new() -> (Self, u32)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait TupleReturnerOk2 {\n+        // should not trigger lint (it doesn't matter which element in the tuple is Self)\n+        fn new() -> (u32, Self)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait TupleReturnerOk3 {\n+        // should not trigger lint (tuple can contain multiple Self)\n+        fn new() -> (Self, Self)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait TupleReturnerBad {\n+        // should trigger lint\n+        fn new() -> (u32, u32) {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait MutPointerReturnerOk {\n+        // should not trigger lint\n+        fn new() -> *mut Self\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait MutPointerReturnerOk2 {\n+        // should not trigger lint\n+        fn new() -> *const Self\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait MutPointerReturnerBad {\n+        // should trigger lint\n+        fn new() -> *mut V {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait GenericReturnerOk {\n+        // should not trigger lint\n+        fn new() -> Option<Self>\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait NestedReturnerOk {\n+        // should not trigger lint\n+        fn new() -> (Option<Self>, u32)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait NestedReturnerOk2 {\n+        // should not trigger lint\n+        fn new() -> ((Self, u32), u32)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait NestedReturnerOk3 {\n+        // should not trigger lint\n+        fn new() -> Option<(Self, u32)>\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+}"}, {"sha": "8217bc6187f93aa5cfce1ddbc5ce7ed4788b6173", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a3ee5fa854b49530008582900c6ea7fac120d1c/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a3ee5fa854b49530008582900c6ea7fac120d1c/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=2a3ee5fa854b49530008582900c6ea7fac120d1c", "patch": "@@ -48,5 +48,33 @@ LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 6 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:224:9\n+   |\n+LL |         fn new() -> String;\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:236:9\n+   |\n+LL |         fn new(_: String) -> String;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:271:9\n+   |\n+LL | /         fn new() -> (u32, u32) {\n+LL | |             unimplemented!();\n+LL | |         }\n+   | |_________^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:298:9\n+   |\n+LL | /         fn new() -> *mut V {\n+LL | |             unimplemented!();\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 10 previous errors\n "}]}