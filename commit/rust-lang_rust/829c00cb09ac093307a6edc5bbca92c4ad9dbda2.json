{"sha": "829c00cb09ac093307a6edc5bbca92c4ad9dbda2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOWMwMGNiMDlhYzA5MzMwN2E2ZWRjNWJiY2E5MmM0YWQ5ZGJkYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-21T20:06:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-21T20:06:32Z"}, "message": "auto merge of #13656 : TeXitoi/rust/shootout-threadring-rewrite, r=alexcrichton\n\n* simplify the code\r\n* remove trace to satisfy official shootout test\r\n* use libgreen to improve performances", "tree": {"sha": "9d8bf5292db4d4b4b70b7bab149e0311be6da623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d8bf5292db4d4b4b70b7bab149e0311be6da623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/829c00cb09ac093307a6edc5bbca92c4ad9dbda2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/829c00cb09ac093307a6edc5bbca92c4ad9dbda2", "html_url": "https://github.com/rust-lang/rust/commit/829c00cb09ac093307a6edc5bbca92c4ad9dbda2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/829c00cb09ac093307a6edc5bbca92c4ad9dbda2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b77a49deef5fe0e8f46cefa652af4b55e7bac51", "html_url": "https://github.com/rust-lang/rust/commit/0b77a49deef5fe0e8f46cefa652af4b55e7bac51"}, {"sha": "72655677b173c5f77118b2535b22acaa94076f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/72655677b173c5f77118b2535b22acaa94076f17", "html_url": "https://github.com/rust-lang/rust/commit/72655677b173c5f77118b2535b22acaa94076f17"}], "stats": {"total": 68, "additions": 19, "deletions": 49}, "files": [{"sha": "a845481f0e0283c3606ab947a4d0a3d828f97e59", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/829c00cb09ac093307a6edc5bbca92c4ad9dbda2/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829c00cb09ac093307a6edc5bbca92c4ad9dbda2/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=829c00cb09ac093307a6edc5bbca92c4ad9dbda2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,69 +8,39 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Based on threadring.erlang by Jira Isa\n-\n-use std::os;\n+#![feature(phase)]\n+#[phase(syntax)] extern crate green;\n+green_start!(main)\n \n fn start(n_tasks: int, token: int) {\n     let (tx, mut rx) = channel();\n     tx.send(token);\n-    //  FIXME could not get this to work with a range closure\n-    let mut i = 2;\n-    while i <= n_tasks {\n+    for i in range(2, n_tasks + 1) {\n         let (tx, next_rx) = channel();\n-        let imm_i = i;\n-        let imm_rx = rx;\n-        spawn(proc() {\n-            roundtrip(imm_i, n_tasks, &imm_rx, &tx);\n-        });\n+        spawn(proc() roundtrip(i, tx, rx));\n         rx = next_rx;\n-        i += 1;\n     }\n-    let imm_rx = rx;\n-    spawn(proc() {\n-        roundtrip(1, n_tasks, &imm_rx, &tx);\n-    });\n+    spawn(proc() roundtrip(1, tx, rx));\n }\n \n-fn roundtrip(id: int, n_tasks: int, p: &Receiver<int>, ch: &Sender<int>) {\n-    loop {\n-        match p.recv() {\n-          1 => {\n-            println!(\"{}\\n\", id);\n-            return;\n-          }\n-          token => {\n-            println!(\"thread: {}   got token: {}\", id, token);\n-            ch.send(token - 1);\n-            if token <= n_tasks {\n-                return;\n-            }\n-          }\n+fn roundtrip(id: int, tx: Sender<int>, rx: Receiver<int>) {\n+    for token in rx.iter() {\n+        if token == 1 {\n+            println!(\"{}\", id);\n+            break;\n         }\n+        tx.send(token - 1);\n     }\n }\n \n fn main() {\n-    use std::from_str::FromStr;\n-\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"2000000\".to_owned(), \"503\".to_owned())\n+    let args = std::os::args();\n+    let token = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+        2000000\n     } else {\n-        os::args().move_iter().collect()\n-    };\n-    let token = if args.len() > 1u {\n-        FromStr::from_str(*args.get(1)).unwrap()\n-    }\n-    else {\n-        1000\n+        args.get(1).and_then(|arg| from_str(*arg)).unwrap_or(1000)\n     };\n-    let n_tasks = if args.len() > 2u {\n-        FromStr::from_str(*args.get(2)).unwrap()\n-    }\n-    else {\n-        503\n-    };\n-    start(n_tasks, token);\n+    let n_tasks = args.get(2).and_then(|arg| from_str(*arg)).unwrap_or(503);\n \n+    start(n_tasks, token);\n }"}]}