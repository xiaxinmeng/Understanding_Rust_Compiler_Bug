{"sha": "86a43c24d627131c7c543ffc2df7793939141404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YTQzYzI0ZDYyNzEzMWM3YzU0M2ZmYzJkZjc3OTM5MzkxNDE0MDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T22:19:26Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-17T22:19:26Z"}, "message": "Support + flag in #fmt", "tree": {"sha": "33891d314a6d14457b9628455c7a3b8a868ef5b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33891d314a6d14457b9628455c7a3b8a868ef5b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86a43c24d627131c7c543ffc2df7793939141404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86a43c24d627131c7c543ffc2df7793939141404", "html_url": "https://github.com/rust-lang/rust/commit/86a43c24d627131c7c543ffc2df7793939141404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86a43c24d627131c7c543ffc2df7793939141404/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bec738c56c221843adbb022914c1de6e3bd7c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bec738c56c221843adbb022914c1de6e3bd7c61", "html_url": "https://github.com/rust-lang/rust/commit/1bec738c56c221843adbb022914c1de6e3bd7c61"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "c05c74d1e46f7e2d9af6be7eb23fe4c4422fbcb0", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/86a43c24d627131c7c543ffc2df7793939141404/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a43c24d627131c7c543ffc2df7793939141404/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=86a43c24d627131c7c543ffc2df7793939141404", "patch": "@@ -29,7 +29,7 @@ import std.ExtFmt.CT.flag;\n import std.ExtFmt.CT.flag_left_justify;\n import std.ExtFmt.CT.flag_left_zero_pad;\n import std.ExtFmt.CT.flag_left_space_pad;\n-import std.ExtFmt.CT.flag_plus_if_positive;\n+import std.ExtFmt.CT.flag_sign_always;\n import std.ExtFmt.CT.flag_alternate;\n import std.ExtFmt.CT.count;\n import std.ExtFmt.CT.count_is;\n@@ -176,6 +176,10 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                         auto fstr = \"flag_left_justify\";\n                         flagexprs += vec(make_rt_path_expr(sp, fstr));\n                     }\n+                    case (flag_sign_always) {\n+                        auto fstr = \"flag_sign_always\";\n+                        flagexprs += vec(make_rt_path_expr(sp, fstr));\n+                    }\n                 }\n             }\n \n@@ -279,6 +283,26 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             alt (f) {\n                 case (flag_left_justify) {\n                 }\n+                case (flag_sign_always) {\n+                    auto err = \"+ flag only valid in signed #fmt conversions\";\n+                    alt (cnv.ty) {\n+                        case (ty_int(?s)) {\n+                            alt (s) {\n+                                case (signed) {\n+                                    // Valid\n+                                }\n+                                case (unsigned) {\n+                                    log err;\n+                                    fail;\n+                                }\n+                            }\n+                        }\n+                        case (_) {\n+                            log err;\n+                            fail;\n+                        }\n+                    }\n+                }\n                 case (_) {\n                     log unsupported;\n                     fail;\n@@ -361,8 +385,8 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n                 case (flag_left_space_pad) {\n                     log \"flag: left space pad\";\n                 }\n-                case (flag_plus_if_positive) {\n-                    log \"flag: plus if positive\";\n+                case (flag_sign_always) {\n+                    log \"flag: sign always\";\n                 }\n                 case (flag_alternate) {\n                     log \"flag: alternate\";"}, {"sha": "c2cce279ffb6bc4ac3a2981b18eeba01604086ac", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86a43c24d627131c7c543ffc2df7793939141404/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a43c24d627131c7c543ffc2df7793939141404/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=86a43c24d627131c7c543ffc2df7793939141404", "patch": "@@ -53,7 +53,7 @@ mod CT {\n         flag_left_justify;\n         flag_left_zero_pad;\n         flag_left_space_pad;\n-        flag_plus_if_positive;\n+        flag_sign_always;\n         flag_alternate;\n     }\n \n@@ -203,7 +203,7 @@ mod CT {\n         } else if (f == (' ' as u8)) {\n             ret more(flag_left_space_pad);\n         } else if (f == ('+' as u8)) {\n-            ret more(flag_plus_if_positive);\n+            ret more(flag_sign_always);\n         } else if (f == ('#' as u8)) {\n             ret more(flag_alternate);\n         } else {\n@@ -306,6 +306,7 @@ mod RT {\n \n     tag flag {\n         flag_left_justify;\n+        flag_sign_always;\n         // FIXME: This is a hack to avoid creating 0-length vec exprs,\n         // which have some difficulty typechecking currently. See\n         // comments in front.extfmt.make_flags\n@@ -334,7 +335,11 @@ mod RT {\n     fn conv_int(&conv cv, int i) -> str {\n         auto radix = 10u;\n         auto prec = get_int_precision(cv);\n-        ret pad(cv, int_to_str_prec(i, radix, prec));\n+        auto s = int_to_str_prec(i, radix, prec);\n+        if (0 <= i && have_flag(cv.flags, flag_sign_always)) {\n+            s = \"+\" + s;\n+        }\n+        ret pad(cv, s);\n     }\n \n     fn conv_uint(&conv cv, uint u) -> str {"}, {"sha": "1e283c2d360253b415c971f41e611d59ffbd6df8", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86a43c24d627131c7c543ffc2df7793939141404/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a43c24d627131c7c543ffc2df7793939141404/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=86a43c24d627131c7c543ffc2df7793939141404", "patch": "@@ -112,4 +112,9 @@ fn main() {\n   test(#fmt(\"%.b\", true), \"\");\n   test(#fmt(\"%.0b\", true), \"\");\n   test(#fmt(\"%.1b\", true), \"t\");\n+\n+  // Explicit + sign. Only for signed conversions\n+  test(#fmt(\"%+d\", 0), \"+0\");\n+  test(#fmt(\"%+d\", 1), \"+1\");\n+  test(#fmt(\"%+d\", -1), \"-1\");\n }"}]}