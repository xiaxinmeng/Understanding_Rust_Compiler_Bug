{"sha": "aca022f1d49a6d945f3ef4f8c781d7337120b68d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTAyMmYxZDQ5YTZkOTQ1ZjNlZjRmOGM3ODFkNzMzNzEyMGI2OGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-17T14:38:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-17T14:38:28Z"}, "message": "Refactor PathKind", "tree": {"sha": "4cddf22d75fc1a9a3e8ff2863a1983348f193b26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cddf22d75fc1a9a3e8ff2863a1983348f193b26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca022f1d49a6d945f3ef4f8c781d7337120b68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca022f1d49a6d945f3ef4f8c781d7337120b68d", "html_url": "https://github.com/rust-lang/rust/commit/aca022f1d49a6d945f3ef4f8c781d7337120b68d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca022f1d49a6d945f3ef4f8c781d7337120b68d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a58522119955f36d95212be902fe3ab79c5e922", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a58522119955f36d95212be902fe3ab79c5e922", "html_url": "https://github.com/rust-lang/rust/commit/4a58522119955f36d95212be902fe3ab79c5e922"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "ceffee9b87605f1c78d72218786acbeb4ea1f6d5", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=aca022f1d49a6d945f3ef4f8c781d7337120b68d", "patch": "@@ -582,8 +582,14 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n         hir::PathKind::Abs => ps.push(\"\".into()),\n         hir::PathKind::Crate => ps.push(\"crate\".into()),\n         hir::PathKind::Plain => {}\n-        hir::PathKind::Self_ => ps.push(\"self\".into()),\n-        hir::PathKind::Super => ps.push(\"super\".into()),\n+        hir::PathKind::Super(0) => ps.push(\"self\".into()),\n+        hir::PathKind::Super(lvl) => {\n+            let mut chain = \"super\".to_string();\n+            for _ in 0..*lvl {\n+                chain += \"::super\";\n+            }\n+            ps.push(chain.into());\n+        }\n         hir::PathKind::Type(_) | hir::PathKind::DollarCrate(_) => return None,\n     }\n     ps.extend(path.segments().iter().map(|it| it.name.to_string().into()));"}, {"sha": "8bbf7ffa27de502afc9d5aae4a84143b2bd70154", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=aca022f1d49a6d945f3ef4f8c781d7337120b68d", "patch": "@@ -890,7 +890,7 @@ where\n         // We rewrite simple path `macro_name` to `self::macro_name` to force resolve in module scope only.\n         let mut path = mac.path.clone();\n         if path.is_ident() {\n-            path.kind = PathKind::Self_;\n+            path.kind = PathKind::Super(0);\n         }\n \n         self.def_collector.unexpanded_macros.push(MacroDirective {"}, {"sha": "a3bfc15421854ab2c111e2b7bb0d0c4a7cd7f0df", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=aca022f1d49a6d945f3ef4f8c781d7337120b68d", "patch": "@@ -10,6 +10,8 @@\n //!\n //! `ReachedFixedPoint` signals about this.\n \n+use std::iter::successors;\n+\n use hir_expand::name::Name;\n use ra_db::Edition;\n use test_utils::tested_by;\n@@ -97,9 +99,6 @@ impl CrateDefMap {\n             PathKind::Crate => {\n                 PerNs::types(ModuleId { krate: self.krate, local_id: self.root }.into())\n             }\n-            PathKind::Self_ => {\n-                PerNs::types(ModuleId { krate: self.krate, local_id: original_module }.into())\n-            }\n             // plain import or absolute path in 2015: crate-relative with\n             // fallback to extern prelude (with the simplification in\n             // rust-lang/rust#57745)\n@@ -123,9 +122,22 @@ impl CrateDefMap {\n                 log::debug!(\"resolving {:?} in module\", segment);\n                 self.resolve_name_in_module(db, original_module, &segment, prefer_module(idx))\n             }\n-            PathKind::Super => {\n-                if let Some(p) = self.modules[original_module].parent {\n-                    PerNs::types(ModuleId { krate: self.krate, local_id: p }.into())\n+            // PathKind::Self_ => {\n+            //     PerNs::types(ModuleId { krate: self.krate, local_id: original_module }.into())\n+            // }\n+            // PathKind::Super => {\n+            //     if let Some(p) = self.modules[original_module].parent {\n+            //         PerNs::types(ModuleId { krate: self.krate, local_id: p }.into())\n+            //     } else {\n+            //         log::debug!(\"super path in root module\");\n+            //         return ResolvePathResult::empty(ReachedFixedPoint::Yes);\n+            //     }\n+            // }\n+            PathKind::Super(lvl) => {\n+                let m = successors(Some(original_module), |m| self.modules[*m].parent)\n+                    .nth(lvl as usize);\n+                if let Some(local_id) = m {\n+                    PerNs::types(ModuleId { krate: self.krate, local_id }.into())\n                 } else {\n                     log::debug!(\"super path in root module\");\n                     return ResolvePathResult::empty(ReachedFixedPoint::Yes);\n@@ -170,7 +182,7 @@ impl CrateDefMap {\n                     if module.krate != self.krate {\n                         let path = ModPath {\n                             segments: path.segments[i..].to_vec(),\n-                            kind: PathKind::Self_,\n+                            kind: PathKind::Super(0),\n                         };\n                         log::debug!(\"resolving {:?} in other crate\", path);\n                         let defp_map = db.crate_def_map(module.krate);"}, {"sha": "3b26e8337fbfd38f2c5068d209ea7a5f26b2cd99", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=aca022f1d49a6d945f3ef4f8c781d7337120b68d", "patch": "@@ -56,7 +56,7 @@ impl ModPath {\n     }\n \n     pub fn is_self(&self) -> bool {\n-        self.kind == PathKind::Self_ && self.segments.is_empty()\n+        self.kind == PathKind::Super(0) && self.segments.is_empty()\n     }\n \n     /// If this path is a single identifier, like `foo`, return its name.\n@@ -100,8 +100,7 @@ pub enum GenericArg {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum PathKind {\n     Plain,\n-    Self_,\n-    Super,\n+    Super(u8),\n     Crate,\n     // Absolute path\n     Abs,"}, {"sha": "c71b52d8988eb047488b4d1f11bb847bd8ef7b4e", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=aca022f1d49a6d945f3ef4f8c781d7337120b68d", "patch": "@@ -95,11 +95,11 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                 break;\n             }\n             ast::PathSegmentKind::SelfKw => {\n-                kind = PathKind::Self_;\n+                kind = PathKind::Super(0);\n                 break;\n             }\n             ast::PathSegmentKind::SuperKw => {\n-                kind = PathKind::Super;\n+                kind = PathKind::Super(1);\n                 break;\n             }\n         }"}, {"sha": "062c02063e50c18dc8df305840a008694a5e28c2", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca022f1d49a6d945f3ef4f8c781d7337120b68d/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=aca022f1d49a6d945f3ef4f8c781d7337120b68d", "patch": "@@ -95,13 +95,13 @@ fn convert_path(prefix: Option<ModPath>, path: ast::Path, hygiene: &Hygiene) ->\n             if prefix.is_some() {\n                 return None;\n             }\n-            ModPath::from_simple_segments(PathKind::Self_, iter::empty())\n+            ModPath::from_simple_segments(PathKind::Super(0), iter::empty())\n         }\n         ast::PathSegmentKind::SuperKw => {\n             if prefix.is_some() {\n                 return None;\n             }\n-            ModPath::from_simple_segments(PathKind::Super, iter::empty())\n+            ModPath::from_simple_segments(PathKind::Super(1), iter::empty())\n         }\n         ast::PathSegmentKind::Type { .. } => {\n             // not allowed in imports"}]}