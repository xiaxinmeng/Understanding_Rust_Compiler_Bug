{"sha": "f1a7e1df3aa9c698d4e793e865cac867b0bd3694", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYTdlMWRmM2FhOWM2OThkNGU3OTNlODY1Y2FjODY3YjBiZDM2OTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:20:24Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-23T12:55:57Z"}, "message": "Iterate on stability.", "tree": {"sha": "f58d57c99a70e8df4298a6e7bfc8a4cec6d0b004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f58d57c99a70e8df4298a6e7bfc8a4cec6d0b004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1a7e1df3aa9c698d4e793e865cac867b0bd3694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a7e1df3aa9c698d4e793e865cac867b0bd3694", "html_url": "https://github.com/rust-lang/rust/commit/f1a7e1df3aa9c698d4e793e865cac867b0bd3694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1a7e1df3aa9c698d4e793e865cac867b0bd3694/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0", "html_url": "https://github.com/rust-lang/rust/commit/7a5620c63a3c2431777e93169cfaf9d1e32ca8e0"}], "stats": {"total": 16, "additions": 2, "deletions": 14}, "files": [{"sha": "9314ccc4adb30f5b1c91a07c8cdbdd2fb09ce287", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1a7e1df3aa9c698d4e793e865cac867b0bd3694/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a7e1df3aa9c698d4e793e865cac867b0bd3694/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f1a7e1df3aa9c698d4e793e865cac867b0bd3694", "patch": "@@ -773,6 +773,7 @@ impl EncodeContext<'a, 'tcx> {\n             if should_encode_visibility(def_kind) {\n                 record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));\n             }\n+            self.encode_stability(def_id);\n         }\n     }\n \n@@ -805,7 +806,6 @@ impl EncodeContext<'a, 'tcx> {\n             f.did.index\n         }));\n         self.encode_ident_span(def_id, variant.ident);\n-        self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -836,7 +836,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));\n-        self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -893,7 +892,6 @@ impl EncodeContext<'a, 'tcx> {\n                 tcx.hir().local_def_id(item_id.id).local_def_index\n             }));\n         }\n-        self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n     }\n \n@@ -911,7 +909,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         self.encode_ident_span(def_id, field.ident);\n-        self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         self.encode_generics(def_id);\n@@ -932,7 +929,6 @@ impl EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));\n-        self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n@@ -1035,7 +1031,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         self.encode_ident_span(def_id, ast_item.ident);\n-        self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         match trait_item.kind {\n@@ -1136,7 +1131,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         self.encode_ident_span(def_id, impl_item.ident);\n-        self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -1411,7 +1405,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             _ => {}\n         }\n-        self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         match item.kind {\n@@ -1495,7 +1488,6 @@ impl EncodeContext<'a, 'tcx> {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id).to_def_id();\n         record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n         self.encode_ident_span(def_id, macro_def.ident);\n-        self.encode_stability(def_id);\n         self.encode_deprecation(def_id);\n     }\n \n@@ -1823,7 +1815,6 @@ impl EncodeContext<'a, 'tcx> {\n             }\n         }\n         self.encode_ident_span(def_id, nitem.ident);\n-        self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n@@ -1891,15 +1882,12 @@ impl EncodeContext<'a, 'tcx> {\n             let def_id = self.tcx.hir().local_def_id(param.hir_id);\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => continue,\n-                GenericParamKind::Type { ref default, .. } => {\n+                GenericParamKind::Type { default, .. } => {\n                     self.encode_info_for_generic_param(\n                         def_id.to_def_id(),\n                         EntryKind::TypeParam,\n                         default.is_some(),\n                     );\n-                    if default.is_some() {\n-                        self.encode_stability(def_id.to_def_id());\n-                    }\n                 }\n                 GenericParamKind::Const { .. } => {\n                     self.encode_info_for_generic_param("}]}