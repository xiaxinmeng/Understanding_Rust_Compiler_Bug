{"sha": "b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "node_id": "C_kwDOAAsO6NoAKGI4ZTFkMDliOTBmYTJkN2EwYjQ2NjhjODNlY2Y2ZjhkZmY4ZTYyZDg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-23T22:45:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T22:45:44Z"}, "message": "Merge #11806\n\n11806: fix: Fix async block type inference using containing function return type r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11804\r\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/11798#issuecomment-1076880521\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1cb35160a79b6265de9ffc5ccbfcd52148e1a3d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb35160a79b6265de9ffc5ccbfcd52148e1a3d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiO6MYCRBK7hj4Ov3rIwAAVzEIAIYleqeUFoHV9xo7KKDKB8cL\nu5vO9Xl2S+zW8gwYuvPQJ7m0giepUHECISwnkkDIKlqCaFK1qp/Glh36a8+oKbLk\nNHilMsFCTLNOXkS0y5DMwviXj9BIyWRIA6VmbO4TKfpHwaDf7bVbx9mb5uTP9OCF\n/xH43GHAu9bxEyrPRoMoZsyC6OsJZJ6ezu2PINOZ+xxVsYThQbJ3SFF8G3qdJNux\nqvJvvunQbThzsvyOrqJBXGCx4F0k0RqPZ3jwiXlYzUfTbWVpfoB3n6msE4tTN0v1\nr+VCMU87qazPNy1S8IGOGuK9FxgP8nwDNOGQ5ghPuBL1Rls1QPk2WCYkPG0mteE=\n=aU6T\n-----END PGP SIGNATURE-----\n", "payload": "tree 1cb35160a79b6265de9ffc5ccbfcd52148e1a3d8\nparent 15fdb9518359f648c184197626fd77f08a0f8581\nparent ed0c62597f9fdbe04e7c99988dad6f102acc4473\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648075544 +0000\ncommitter GitHub <noreply@github.com> 1648075544 +0000\n\nMerge #11806\n\n11806: fix: Fix async block type inference using containing function return type r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11804\r\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/11798#issuecomment-1076880521\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "html_url": "https://github.com/rust-lang/rust/commit/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15fdb9518359f648c184197626fd77f08a0f8581", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fdb9518359f648c184197626fd77f08a0f8581", "html_url": "https://github.com/rust-lang/rust/commit/15fdb9518359f648c184197626fd77f08a0f8581"}, {"sha": "ed0c62597f9fdbe04e7c99988dad6f102acc4473", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0c62597f9fdbe04e7c99988dad6f102acc4473", "html_url": "https://github.com/rust-lang/rust/commit/ed0c62597f9fdbe04e7c99988dad6f102acc4473"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "e78d3f267f06f79c6c1caf74c52243cdeb938db1", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "patch": "@@ -364,7 +364,7 @@ pub(crate) struct InferenceContext<'a> {\n     table: unify::InferenceTable<'a>,\n     trait_env: Arc<TraitEnvironment>,\n     result: InferenceResult,\n-    /// The return type of the function being inferred, or the closure if we're\n+    /// The return type of the function being inferred, the closure or async block if we're\n     /// currently within one.\n     ///\n     /// We might consider using a nested inference context for checking"}, {"sha": "01b11861cd940120d649bb0c50542e1ed5356518", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "patch": "@@ -157,9 +157,17 @@ impl<'a> InferenceContext<'a> {\n                 self.err_ty()\n             }\n             Expr::Async { body } => {\n+                let ret_ty = self.table.new_type_var();\n+                let prev_diverges = mem::replace(&mut self.diverges, Diverges::Maybe);\n+                let prev_ret_ty = mem::replace(&mut self.return_ty, ret_ty.clone());\n+\n+                let inner_ty = self.infer_expr_coerce(*body, &Expectation::has_type(ret_ty));\n+\n+                self.diverges = prev_diverges;\n+                self.return_ty = prev_ret_ty;\n+\n                 // Use the first type parameter as the output type of future.\n                 // existential type AsyncBlockImplTrait<InnerType>: Future<Output = InnerType>\n-                let inner_ty = self.infer_expr(*body, &Expectation::none());\n                 let impl_trait_id = crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n                 let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n                 TyKind::OpaqueType(opaque_ty_id, Substitution::from1(Interner, inner_ty))"}, {"sha": "31045c193c9a42494f9d24f82c4796c2f7e2b2cb", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=b8e1d09b90fa2d7a0b4668c83ecf6f8dff8e62d8", "patch": "@@ -1952,6 +1952,52 @@ async fn main() {\n         \"#]],\n     )\n }\n+#[test]\n+fn async_block_early_return() {\n+    check_infer(\n+        r#\"\n+//- minicore: future, result, fn\n+fn test<I, E, F: FnMut() -> Fut, Fut: core::future::Future<Output = Result<I, E>>>(f: F) {}\n+\n+fn main() {\n+    async {\n+        return Err(());\n+        Ok(())\n+    };\n+    test(|| async {\n+        return Err(());\n+        Ok(())\n+    });\n+}\n+        \"#,\n+        expect![[r#\"\n+            83..84 'f': F\n+            89..91 '{}': ()\n+            103..231 '{     ... }); }': ()\n+            109..161 'async ...     }': Result<(), ()>\n+            109..161 'async ...     }': impl Future<Output = Result<(), ()>>\n+            125..139 'return Err(())': !\n+            132..135 'Err': Err<(), ()>(()) -> Result<(), ()>\n+            132..139 'Err(())': Result<(), ()>\n+            136..138 '()': ()\n+            149..151 'Ok': Ok<(), ()>(()) -> Result<(), ()>\n+            149..155 'Ok(())': Result<(), ()>\n+            152..154 '()': ()\n+            167..171 'test': fn test<(), (), || -> impl Future<Output = Result<(), ()>>, impl Future<Output = Result<(), ()>>>(|| -> impl Future<Output = Result<(), ()>>)\n+            167..228 'test(|...    })': ()\n+            172..227 '|| asy...     }': || -> impl Future<Output = Result<(), ()>>\n+            175..227 'async ...     }': Result<(), ()>\n+            175..227 'async ...     }': impl Future<Output = Result<(), ()>>\n+            191..205 'return Err(())': !\n+            198..201 'Err': Err<(), ()>(()) -> Result<(), ()>\n+            198..205 'Err(())': Result<(), ()>\n+            202..204 '()': ()\n+            215..217 'Ok': Ok<(), ()>(()) -> Result<(), ()>\n+            215..221 'Ok(())': Result<(), ()>\n+            218..220 '()': ()\n+        \"#]],\n+    )\n+}\n \n #[test]\n fn infer_generic_from_later_assignment() {"}]}