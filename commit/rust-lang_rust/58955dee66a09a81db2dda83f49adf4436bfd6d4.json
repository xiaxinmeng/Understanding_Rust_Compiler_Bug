{"sha": "58955dee66a09a81db2dda83f49adf4436bfd6d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTU1ZGVlNjZhMDlhODFkYjJkZGE4M2Y0OWFkZjQ0MzZiZmQ2ZDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-06-25T12:21:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-06-26T00:26:42Z"}, "message": "Add new error codes and improve some explanations", "tree": {"sha": "fc7848ae79e0ea07d6c89492cbe3939eddd86038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7848ae79e0ea07d6c89492cbe3939eddd86038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58955dee66a09a81db2dda83f49adf4436bfd6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58955dee66a09a81db2dda83f49adf4436bfd6d4", "html_url": "https://github.com/rust-lang/rust/commit/58955dee66a09a81db2dda83f49adf4436bfd6d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58955dee66a09a81db2dda83f49adf4436bfd6d4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5", "html_url": "https://github.com/rust-lang/rust/commit/c128e9bb2e58d7e2fe9679ac81c33a859522d5a5"}], "stats": {"total": 289, "additions": 207, "deletions": 82}, "files": [{"sha": "7269a62b6063adbc2f612759250b72f72dd2e5d1", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 207, "deletions": 82, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/58955dee66a09a81db2dda83f49adf4436bfd6d4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58955dee66a09a81db2dda83f49adf4436bfd6d4/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=58955dee66a09a81db2dda83f49adf4436bfd6d4", "patch": "@@ -16,6 +16,8 @@\n register_long_diagnostics! {\n \n E0154: r##\"\n+## Note: this error code is no longer emitted by the compiler.\n+\n Imports (`use` statements) are not allowed after non-item statements, such as\n variable declarations and expression statements.\n \n@@ -50,6 +52,8 @@ https://doc.rust-lang.org/reference.html#statements\n \"##,\n \n E0251: r##\"\n+## Note: this error code is no longer emitted by the compiler.\n+\n Two items of the same name cannot be imported without rebinding one of the\n items under a new local name.\n \n@@ -75,9 +79,9 @@ E0252: r##\"\n Two items of the same name cannot be imported without rebinding one of the\n items under a new local name.\n \n-An example of this error:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0252\n use foo::baz;\n use bar::baz; // error, do `use bar::baz as quux` instead\n \n@@ -87,6 +91,41 @@ mod foo {\n     pub struct baz;\n }\n \n+mod bar {\n+    pub mod baz {}\n+}\n+```\n+\n+You can use aliases in order to fix this error. Example:\n+\n+```\n+use foo::baz as foo_baz;\n+use bar::baz; // ok!\n+\n+fn main() {}\n+\n+mod foo {\n+    pub struct baz;\n+}\n+\n+mod bar {\n+    pub mod baz {}\n+}\n+```\n+\n+Or you can reference the item with its parent:\n+\n+```\n+use bar::baz;\n+\n+fn main() {\n+    let x = foo::baz; // ok!\n+}\n+\n+mod foo {\n+    pub struct baz;\n+}\n+\n mod bar {\n     pub mod baz {}\n }\n@@ -95,16 +134,20 @@ mod bar {\n \n E0253: r##\"\n Attempt was made to import an unimportable value. This can happen when trying\n-to import a method from a trait. An example of this error:\n+to import a method from a trait.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0253\n mod foo {\n     pub trait MyTrait {\n         fn do_something();\n     }\n }\n \n use foo::MyTrait::do_something;\n+\n+fn main() {}\n ```\n \n It's invalid to directly import methods belonging to a trait or concrete type.\n@@ -114,10 +157,10 @@ E0255: r##\"\n You can't import a value whose name is the same as another value defined in the\n module.\n \n-An example of this error:\n+Erroneous code example:\n \n-```compile_fail\n-use bar::foo; // error, do `use bar::foo as baz` instead\n+```compile_fail,E0255\n+use bar::foo; // error: an item named `foo` is already in scope\n \n fn foo() {}\n \n@@ -127,9 +170,39 @@ mod bar {\n \n fn main() {}\n ```\n+\n+You can use aliases in order to fix this error. Example:\n+\n+```\n+use bar::foo as bar_foo; // ok!\n+\n+fn foo() {}\n+\n+mod bar {\n+     pub fn foo() {}\n+}\n+\n+fn main() {}\n+```\n+\n+Or you can reference the item with its parent:\n+\n+```\n+fn foo() {}\n+\n+mod bar {\n+     pub fn foo() {}\n+}\n+\n+fn main() {\n+    bar::foo(); // we get the item by referring to its parent\n+}\n+```\n \"##,\n \n E0256: r##\"\n+## Note: this error code is no longer emitted by the compiler.\n+\n You can't import a type or module when the name of the item being imported is\n the same as another type or submodule defined in the module.\n \n@@ -154,9 +227,11 @@ that has been imported into the current module.\n \n Erroneous code example:\n \n-```compile_fail\n-extern crate a;\n-extern crate crate_a as a;\n+```compile_fail,E0259\n+extern crate std;\n+extern crate libc as std;\n+\n+fn main() {}\n ```\n \n The solution is to choose a different name that doesn't conflict with any\n@@ -165,17 +240,17 @@ external crate imported into the current module.\n Correct example:\n \n ```ignore\n-extern crate a;\n-extern crate crate_a as other_name;\n+extern crate std;\n+extern crate libc as other_name;\n ```\n \"##,\n \n E0260: r##\"\n The name for an item declaration conflicts with an external crate's name.\n \n-For instance:\n+Erroneous code example:\n \n-```ignore\n+```ignore,E0260\n extern crate abc;\n \n struct abc;\n@@ -206,28 +281,32 @@ https://doc.rust-lang.org/reference.html#statements\n \"##,\n \n E0364: r##\"\n-Private items cannot be publicly re-exported.  This error indicates that you\n+Private items cannot be publicly re-exported. This error indicates that you\n attempted to `pub use` a type or value that was not itself public.\n \n-Here is an example that demonstrates the error:\n+Erroneous code example:\n \n ```compile_fail\n mod foo {\n     const X: u32 = 1;\n }\n \n pub use foo::X;\n+\n+fn main() {}\n ```\n \n The solution to this problem is to ensure that the items that you are\n re-exporting are themselves marked with `pub`:\n \n-```ignore\n+```\n mod foo {\n     pub const X: u32 = 1;\n }\n \n pub use foo::X;\n+\n+fn main() {}\n ```\n \n See the 'Use Declarations' section of the reference for more information on\n@@ -240,25 +319,29 @@ E0365: r##\"\n Private modules cannot be publicly re-exported. This error indicates that you\n attempted to `pub use` a module that was not itself public.\n \n-Here is an example that demonstrates the error:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0365\n mod foo {\n     pub const X: u32 = 1;\n }\n \n pub use foo as foo2;\n+\n+fn main() {}\n ```\n \n The solution to this problem is to ensure that the module that you are\n re-exporting is itself marked with `pub`:\n \n-```ignore\n+```\n pub mod foo {\n     pub const X: u32 = 1;\n }\n \n pub use foo as foo2;\n+\n+fn main() {}\n ```\n \n See the 'Use Declarations' section of the reference for more information\n@@ -269,9 +352,11 @@ https://doc.rust-lang.org/reference.html#use-declarations\n \n E0401: r##\"\n Inner items do not inherit type parameters from the functions they are embedded\n-in. For example, this will not compile:\n+in.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0401\n fn foo<T>(x: T) {\n     fn bar(y: T) { // T is defined in the \"outer\" function\n         // ..\n@@ -282,7 +367,7 @@ fn foo<T>(x: T) {\n \n Nor will this:\n \n-```compile_fail\n+```compile_fail,E0401\n fn foo<T>(x: T) {\n     type MaybeT = Option<T>;\n     // ...\n@@ -291,7 +376,7 @@ fn foo<T>(x: T) {\n \n Or this:\n \n-```compile_fail\n+```compile_fail,E0401\n fn foo<T>(x: T) {\n     struct Foo {\n         x: T,\n@@ -374,9 +459,11 @@ closures or copying the parameters should still work.\n \"##,\n \n E0403: r##\"\n-Some type parameters have the same name. Example of erroneous code:\n+Some type parameters have the same name.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0403\n fn foo<T, T>(s: T, u: T) {} // error: the name `T` is already used for a type\n                             //        parameter in this type parameter list\n ```\n@@ -390,10 +477,11 @@ fn foo<T, Y>(s: T, u: Y) {} // ok!\n \"##,\n \n E0404: r##\"\n-You tried to implement something which was not a trait on an object. Example of\n-erroneous code:\n+You tried to implement something which was not a trait on an object.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0404\n struct Foo;\n struct Bar;\n \n@@ -416,9 +504,11 @@ impl Foo for Bar { // ok!\n \"##,\n \n E0405: r##\"\n-The code refers to a trait that is not in scope. Example of erroneous code:\n+The code refers to a trait that is not in scope.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0405\n struct Foo;\n \n impl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n@@ -446,9 +536,11 @@ impl SomeTrait for Foo { // ok!\n \n E0407: r##\"\n A definition of a method not in the implemented trait was given in a trait\n-implementation. Example of erroneous code:\n+implementation.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0407\n trait Foo {\n     fn a();\n }\n@@ -501,9 +593,9 @@ E0408: r##\"\n An \"or\" pattern was used where the variable bindings are not consistently bound\n across patterns.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0408\n match x {\n     Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is\n                                       //        not bound in pattern #2\n@@ -545,9 +637,9 @@ E0409: r##\"\n An \"or\" pattern was used where the variable bindings are not consistently bound\n across patterns.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0409\n let x = (0, 2);\n match x {\n     (0, ref y) | (y, 0) => { /* use y */} // error: variable `y` is bound with\n@@ -583,9 +675,11 @@ match x {\n \"##,\n \n E0411: r##\"\n-The `Self` keyword was used outside an impl or a trait. Erroneous code example:\n+The `Self` keyword was used outside an impl or a trait.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0411\n <Self>::foo; // error: use of `Self` outside of an impl or trait\n ```\n \n@@ -639,9 +733,11 @@ trait Baz : Foo + Foo2 {\n \"##,\n \n E0412: r##\"\n-The type name used is not in scope. Example of erroneous codes:\n+The type name used is not in scope.\n \n-```compile_fail\n+Erroneous code examples:\n+\n+```compile_fail,E0412\n impl Something {} // error: type name `Something` is not in scope\n \n // or:\n@@ -678,9 +774,11 @@ fn foo<T>(x: T) {} // ok!\n \"##,\n \n E0415: r##\"\n-More than one function parameter have the same name. Example of erroneous code:\n+More than one function parameter have the same name.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0415\n fn foo(f: i32, f: i32) {} // error: identifier `f` is bound more than\n                           //        once in this parameter list\n ```\n@@ -693,9 +791,11 @@ fn foo(f: i32, g: i32) {} // ok!\n \"##,\n \n E0416: r##\"\n-An identifier is bound more than once in a pattern. Example of erroneous code:\n+An identifier is bound more than once in a pattern.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0416\n match (1, 2) {\n     (x, x) => {} // error: identifier `x` is bound more than once in the\n                  //        same pattern\n@@ -722,9 +822,10 @@ match (A, B, C) {\n \n E0422: r##\"\n You are trying to use an identifier that is either undefined or not a struct.\n-For instance:\n \n-``` compile_fail\n+Erroneous code example:\n+\n+``` compile_fail,E0422\n fn main () {\n     let x = Foo { x: 1, y: 2 };\n }\n@@ -733,7 +834,7 @@ fn main () {\n In this case, `Foo` is undefined, so it inherently isn't anything, and\n definitely not a struct.\n \n-```compile_fail\n+```compile_fail,E0422\n fn main () {\n     let foo = 1;\n     let x = foo { x: 1, y: 2 };\n@@ -745,10 +846,11 @@ one.\n \"##,\n \n E0423: r##\"\n-A `struct` variant name was used like a function name. Example of erroneous\n-code:\n+A `struct` variant name was used like a function name.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0423\n struct Foo { a: bool};\n \n let f = Foo();\n@@ -767,9 +869,11 @@ let f = Foo(); // ok!\n \"##,\n \n E0424: r##\"\n-The `self` keyword was used in a static method. Example of erroneous code:\n+The `self` keyword was used in a static method.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0424\n struct Foo;\n \n impl Foo {\n@@ -799,9 +903,11 @@ impl Foo {\n \"##,\n \n E0425: r##\"\n-An unresolved name was used. Example of erroneous codes:\n+An unresolved name was used.\n \n-```compile_fail\n+Erroneous code examples:\n+\n+```compile_fail,E0425\n something_that_doesnt_exist::foo;\n // error: unresolved name `something_that_doesnt_exist::foo`\n \n@@ -846,9 +952,11 @@ let x = unknown_variable; // ok!\n \"##,\n \n E0426: r##\"\n-An undeclared label was used. Example of erroneous code:\n+An undeclared label was used.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0426\n loop {\n     break 'a; // error: use of undeclared label `'a`\n }\n@@ -864,10 +972,11 @@ Please verify you spelt or declare the label correctly. Example:\n \"##,\n \n E0428: r##\"\n-A type or module has been defined more than once. Example of erroneous\n-code:\n+A type or module has been defined more than once.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0428\n struct Bar;\n struct Bar; // error: duplicate definition of value `Bar`\n ```\n@@ -885,9 +994,9 @@ E0429: r##\"\n The `self` keyword cannot appear alone as the last segment in a `use`\n declaration.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0429\n use std::fmt::self; // error: `self` imports are only allowed within a { } list\n ```\n \n@@ -906,9 +1015,11 @@ use std::fmt;\n \"##,\n \n E0430: r##\"\n-The `self` import appears more than once in the list. Erroneous code example:\n+The `self` import appears more than once in the list.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0430\n use something::{self, self}; // error: `self` import can only appear once in\n                              //        the list\n ```\n@@ -922,9 +1033,11 @@ use something::self; // ok!\n \"##,\n \n E0431: r##\"\n-An invalid `self` import was made. Erroneous code example:\n+An invalid `self` import was made.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0431\n use {self}; // error: `self` import can only appear in an import list with a\n             //        non-empty prefix\n ```\n@@ -934,9 +1047,11 @@ or verify you didn't misspell it.\n \"##,\n \n E0432: r##\"\n-An import was unresolved. Erroneous code example:\n+An import was unresolved.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0432\n use something::Foo; // error: unresolved import `something::Foo`.\n ```\n \n@@ -965,24 +1080,33 @@ use homura::Madoka;\n \"##,\n \n E0433: r##\"\n-Invalid import. Example of erroneous code:\n+An undeclared type or module was used.\n \n-```compile_fail\n-use something_which_doesnt_exist;\n-// error: unresolved import `something_which_doesnt_exist`\n+Erroneous code example:\n+\n+```compile_fail,E0433\n+let map = HashMap::new();\n+// error: failed to resolve. Use of undeclared type or module `HashMap`\n ```\n \n-Please verify you didn't misspell the import's name.\n+Please verify you didn't misspell the type/module's name or that you didn't\n+forgot to import it:\n+\n+\n+```\n+use std::collections::HashMap; // HashMap has been imported.\n+let map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n+```\n \"##,\n \n E0434: r##\"\n This error indicates that a variable usage inside an inner function is invalid\n because the variable comes from a dynamic environment. Inner functions do not\n have access to their containing environment.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0434\n fn foo() {\n     let y = 5;\n     fn bar() -> u32 {\n@@ -1021,10 +1145,11 @@ fn foo() {\n \"##,\n \n E0435: r##\"\n-A non-constant value was used to initialise a constant. Example of erroneous\n-code:\n+A non-constant value was used to initialise a constant.\n \n-```compile_fail\n+Erroneous code example:\n+\n+```compile_fail,E0435\n let foo = 42u32;\n const FOO : u32 = foo; // error: attempt to use a non-constant value in a\n                        //        constant\n@@ -1050,9 +1175,9 @@ the trait in question. This error indicates that you attempted to implement\n an associated type whose name does not match the name of any associated type\n in the trait.\n \n-Here is an example that demonstrates the error:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0437\n trait Foo {}\n \n impl Foo for i32 {\n@@ -1075,9 +1200,9 @@ members of the trait in question. This error indicates that you\n attempted to implement an associated constant whose name does not\n match the name of any associated constant in the trait.\n \n-Here is an example that demonstrates the error:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0438\n #![feature(associated_consts)]\n \n trait Foo {}"}]}