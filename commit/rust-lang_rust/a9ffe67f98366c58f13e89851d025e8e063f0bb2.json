{"sha": "a9ffe67f98366c58f13e89851d025e8e063f0bb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZmZlNjdmOTgzNjZjNThmMTNlODk4NTFkMDI1ZThlMDYzZjBiYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-08T06:57:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-08T06:57:38Z"}, "message": "Auto merge of #31606 - Ms2ger:ClosureKind, r=eddyb\n\nRename ClosureKind variants and stop re-exporting them.", "tree": {"sha": "6e76b1b00ac9adc3b59b9ef54686fa15ee228ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e76b1b00ac9adc3b59b9ef54686fa15ee228ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ffe67f98366c58f13e89851d025e8e063f0bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ffe67f98366c58f13e89851d025e8e063f0bb2", "html_url": "https://github.com/rust-lang/rust/commit/a9ffe67f98366c58f13e89851d025e8e063f0bb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ffe67f98366c58f13e89851d025e8e063f0bb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b7c3f20e83de20518abb879f7a0e41b6e93414f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7c3f20e83de20518abb879f7a0e41b6e93414f", "html_url": "https://github.com/rust-lang/rust/commit/8b7c3f20e83de20518abb879f7a0e41b6e93414f"}, {"sha": "c6474af96fe1cccd9364330e4a2d85c9123ae19f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6474af96fe1cccd9364330e4a2d85c9123ae19f", "html_url": "https://github.com/rust-lang/rust/commit/c6474af96fe1cccd9364330e4a2d85c9123ae19f"}], "stats": {"total": 113, "additions": 56, "deletions": 57}, "files": [{"sha": "877601e79a3eb35a082b201f1405a96975529eb5", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -120,9 +120,9 @@ impl LanguageItems {\n \n     pub fn fn_trait_kind(&self, id: DefId) -> Option<ty::ClosureKind> {\n         let def_id_kinds = [\n-            (self.fn_trait(), ty::FnClosureKind),\n-            (self.fn_mut_trait(), ty::FnMutClosureKind),\n-            (self.fn_once_trait(), ty::FnOnceClosureKind),\n+            (self.fn_trait(), ty::ClosureKind::Fn),\n+            (self.fn_mut_trait(), ty::ClosureKind::FnMut),\n+            (self.fn_once_trait(), ty::ClosureKind::FnOnce),\n             ];\n \n         for &(opt_def_id, kind) in &def_id_kinds {"}, {"sha": "9fc240fd495a479dc5195d11c92f1b49502ccefb", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -670,13 +670,13 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n         // conceptually a `&mut` or `&` reference, so we have to add a\n         // deref.\n         let cmt_result = match kind {\n-            ty::FnOnceClosureKind => {\n+            ty::ClosureKind::FnOnce => {\n                 cmt_result\n             }\n-            ty::FnMutClosureKind => {\n+            ty::ClosureKind::FnMut => {\n                 self.env_deref(id, span, upvar_id, var_mutbl, ty::MutBorrow, cmt_result)\n             }\n-            ty::FnClosureKind => {\n+            ty::ClosureKind::Fn => {\n                 self.env_deref(id, span, upvar_id, var_mutbl, ty::ImmBorrow, cmt_result)\n             }\n         };\n@@ -1630,9 +1630,9 @@ impl fmt::Debug for Upvar {\n impl fmt::Display for Upvar {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let kind = match self.kind {\n-            ty::FnClosureKind => \"Fn\",\n-            ty::FnMutClosureKind => \"FnMut\",\n-            ty::FnOnceClosureKind => \"FnOnce\",\n+            ty::ClosureKind::Fn => \"Fn\",\n+            ty::ClosureKind::FnMut => \"FnMut\",\n+            ty::ClosureKind::FnOnce => \"FnOnce\",\n         };\n         write!(f, \"captured outer variable in an `{}` closure\", kind)\n     }"}, {"sha": "2e38080bfb0705695411a8ccc9acbf526e7f9427", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub use self::ImplOrTraitItemId::*;\n-pub use self::ClosureKind::*;\n pub use self::Variance::*;\n pub use self::DtorKind::*;\n pub use self::ImplOrTraitItemContainer::*;\n@@ -1699,19 +1698,19 @@ pub enum ClosureKind {\n     // Warning: Ordering is significant here! The ordering is chosen\n     // because the trait Fn is a subtrait of FnMut and so in turn, and\n     // hence we order it so that Fn < FnMut < FnOnce.\n-    FnClosureKind,\n-    FnMutClosureKind,\n-    FnOnceClosureKind,\n+    Fn,\n+    FnMut,\n+    FnOnce,\n }\n \n impl ClosureKind {\n     pub fn trait_did(&self, cx: &TyCtxt) -> DefId {\n         let result = match *self {\n-            FnClosureKind => cx.lang_items.require(FnTraitLangItem),\n-            FnMutClosureKind => {\n+            ClosureKind::Fn => cx.lang_items.require(FnTraitLangItem),\n+            ClosureKind::FnMut => {\n                 cx.lang_items.require(FnMutTraitLangItem)\n             }\n-            FnOnceClosureKind => {\n+            ClosureKind::FnOnce => {\n                 cx.lang_items.require(FnOnceTraitLangItem)\n             }\n         };\n@@ -1725,12 +1724,12 @@ impl ClosureKind {\n     /// must also implement `other`.\n     pub fn extends(self, other: ty::ClosureKind) -> bool {\n         match (self, other) {\n-            (FnClosureKind, FnClosureKind) => true,\n-            (FnClosureKind, FnMutClosureKind) => true,\n-            (FnClosureKind, FnOnceClosureKind) => true,\n-            (FnMutClosureKind, FnMutClosureKind) => true,\n-            (FnMutClosureKind, FnOnceClosureKind) => true,\n-            (FnOnceClosureKind, FnOnceClosureKind) => true,\n+            (ClosureKind::Fn, ClosureKind::Fn) => true,\n+            (ClosureKind::Fn, ClosureKind::FnMut) => true,\n+            (ClosureKind::Fn, ClosureKind::FnOnce) => true,\n+            (ClosureKind::FnMut, ClosureKind::FnMut) => true,\n+            (ClosureKind::FnMut, ClosureKind::FnOnce) => true,\n+            (ClosureKind::FnOnce, ClosureKind::FnOnce) => true,\n             _ => false,\n         }\n     }"}, {"sha": "cab8125a61b33e06da6f3533e5ad90da400390fe", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -1009,7 +1009,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             Categorization::Upvar(mc::Upvar { kind, .. }) => kind,\n                             _ => unreachable!()\n                         };\n-                        if kind == ty::FnClosureKind {\n+                        if kind == ty::ClosureKind::Fn {\n                             db.span_help(\n                                 self.tcx.map.span(upvar_id.closure_expr_id),\n                                 \"consider changing this closure to take \\"}, {"sha": "1a8558b063aa2d31a1981324fc26c95886105703", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -725,7 +725,7 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n             let region = cx.tcx.mk_region(region);\n \n             let self_expr = match cx.tcx.closure_kind(cx.tcx.map.local_def_id(closure_expr_id)) {\n-                ty::ClosureKind::FnClosureKind => {\n+                ty::ClosureKind::Fn => {\n                     let ref_closure_ty =\n                         cx.tcx.mk_ref(region,\n                                    ty::TypeAndMut { ty: closure_ty,\n@@ -744,7 +744,7 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n                         }\n                     }\n                 }\n-                ty::ClosureKind::FnMutClosureKind => {\n+                ty::ClosureKind::FnMut => {\n                     let ref_closure_ty =\n                         cx.tcx.mk_ref(region,\n                                    ty::TypeAndMut { ty: closure_ty,\n@@ -763,7 +763,7 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n                         }\n                     }\n                 }\n-                ty::ClosureKind::FnOnceClosureKind => {\n+                ty::ClosureKind::FnOnce => {\n                     Expr {\n                         ty: closure_ty,\n                         temp_lifetime: temp_lifetime,"}, {"sha": "398f38c5ba92b9cf66cd851aa3f3f4d17dd81abb", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -252,15 +252,15 @@ fn closure_self_ty<'a, 'tcx>(tcx: &TyCtxt<'tcx>,\n     let region = tcx.mk_region(region);\n \n     match tcx.closure_kind(tcx.map.local_def_id(closure_expr_id)) {\n-        ty::ClosureKind::FnClosureKind =>\n+        ty::ClosureKind::Fn =>\n             tcx.mk_ref(region,\n                        ty::TypeAndMut { ty: closure_ty,\n                                         mutbl: hir::MutImmutable }),\n-        ty::ClosureKind::FnMutClosureKind =>\n+        ty::ClosureKind::FnMut =>\n             tcx.mk_ref(region,\n                        ty::TypeAndMut { ty: closure_ty,\n                                         mutbl: hir::MutMutable }),\n-        ty::ClosureKind::FnOnceClosureKind =>\n+        ty::ClosureKind::FnOnce =>\n             closure_ty\n     }\n }"}, {"sha": "8f9608926b9b7a8d868beec8bfbf4dbe4712f501", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -216,13 +216,13 @@ pub fn self_type_for_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                        -> Ty<'tcx> {\n     let closure_kind = ccx.tcx().closure_kind(closure_id);\n     match closure_kind {\n-        ty::FnClosureKind => {\n+        ty::ClosureKind::Fn => {\n             ccx.tcx().mk_imm_ref(ccx.tcx().mk_region(ty::ReStatic), fn_ty)\n         }\n-        ty::FnMutClosureKind => {\n+        ty::ClosureKind::FnMut => {\n             ccx.tcx().mk_mut_ref(ccx.tcx().mk_region(ty::ReStatic), fn_ty)\n         }\n-        ty::FnOnceClosureKind => fn_ty,\n+        ty::ClosureKind::FnOnce => fn_ty,\n     }\n }\n "}, {"sha": "85660f1641dedf6ee1fc11ab9cb7fadbaea768d4", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -270,8 +270,8 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n \n     // If this is an impl of `Fn` or `FnMut` trait, the receiver is `&self`.\n     let is_by_ref = match closure_kind {\n-        ty::FnClosureKind | ty::FnMutClosureKind => true,\n-        ty::FnOnceClosureKind => false,\n+        ty::ClosureKind::Fn | ty::ClosureKind::FnMut => true,\n+        ty::ClosureKind::FnOnce => false,\n     };\n     let bare_fn_ty_maybe_ref = if is_by_ref {\n         tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), bare_fn_ty)"}, {"sha": "0d9248a22b4a4c0333173e21812ac1a042516d68", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -49,7 +49,7 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let closure_ty = node_id_type(bcx, bcx.fcx.id);\n     let self_type = self_type_for_closure(bcx.ccx(), closure_def_id, closure_ty);\n     let kind = kind_for_closure(bcx.ccx(), closure_def_id);\n-    let llenv = if kind == ty::FnOnceClosureKind &&\n+    let llenv = if kind == ty::ClosureKind::FnOnce &&\n             !arg_is_indirect(bcx.ccx(), self_type) {\n         let datum = rvalue_scratch_datum(bcx,\n                                          self_type,\n@@ -85,7 +85,7 @@ fn load_closure_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         let node_id = freevar.def.var_id();\n         bcx.fcx.llupvars.borrow_mut().insert(node_id, upvar_ptr);\n \n-        if kind == ty::FnOnceClosureKind && !captured_by_ref {\n+        if kind == ty::ClosureKind::FnOnce && !captured_by_ref {\n             let hint = bcx.fcx.lldropflag_hints.borrow().hint_datum(upvar_id.var_id);\n             bcx.fcx.schedule_drop_mem(arg_scope_id,\n                                       upvar_ptr,\n@@ -300,20 +300,20 @@ fn trans_closure_adapter_shim<'a, 'tcx>(\n            ccx.tn().val_to_string(llfn));\n \n     match (llfn_closure_kind, trait_closure_kind) {\n-        (ty::FnClosureKind, ty::FnClosureKind) |\n-        (ty::FnMutClosureKind, ty::FnMutClosureKind) |\n-        (ty::FnOnceClosureKind, ty::FnOnceClosureKind) => {\n+        (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n+        (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n+        (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) => {\n             // No adapter needed.\n             llfn\n         }\n-        (ty::FnClosureKind, ty::FnMutClosureKind) => {\n+        (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {\n             // The closure fn `llfn` is a `fn(&self, ...)`.  We want a\n             // `fn(&mut self, ...)`. In fact, at trans time, these are\n             // basically the same thing, so we can just return llfn.\n             llfn\n         }\n-        (ty::FnClosureKind, ty::FnOnceClosureKind) |\n-        (ty::FnMutClosureKind, ty::FnOnceClosureKind) => {\n+        (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n+        (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n             // The closure fn `llfn` is a `fn(&self, ...)` or `fn(&mut\n             // self, ...)`.  We want a `fn(self, ...)`. We can produce\n             // this by doing something like:"}, {"sha": "4a8a893cc46965cd8f7da1f7bb4aaee615d5873b", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -697,11 +697,11 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // Check if this is one of the Fn,FnMut,FnOnce traits.\n         let tcx = self.tcx();\n         let kind = if Some(trait_def_id) == tcx.lang_items.fn_trait() {\n-            ty::FnClosureKind\n+            ty::ClosureKind::Fn\n         } else if Some(trait_def_id) == tcx.lang_items.fn_mut_trait() {\n-            ty::FnMutClosureKind\n+            ty::ClosureKind::FnMut\n         } else if Some(trait_def_id) == tcx.lang_items.fn_once_trait() {\n-            ty::FnOnceClosureKind\n+            ty::ClosureKind::FnOnce\n         } else {\n             return Ok(());\n         };"}, {"sha": "2bb8c874d20d696f8442a63a956f53f43f0e7e39", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ffe67f98366c58f13e89851d025e8e063f0bb2/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=a9ffe67f98366c58f13e89851d025e8e063f0bb2", "patch": "@@ -131,7 +131,7 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n         if !self.fcx.inh.tables.borrow().closure_kinds.contains_key(&closure_def_id) {\n             self.closures_with_inferred_kinds.insert(expr.id);\n             self.fcx.inh.tables.borrow_mut().closure_kinds\n-                                            .insert(closure_def_id, ty::FnClosureKind);\n+                                            .insert(closure_def_id, ty::ClosureKind::Fn);\n             debug!(\"check_closure: adding closure_id={:?} to closures_with_inferred_kinds\",\n                    closure_def_id);\n         }\n@@ -301,7 +301,7 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                                upvar_id);\n \n                         // to move out of an upvar, this must be a FnOnce closure\n-                        self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnOnceClosureKind);\n+                        self.adjust_closure_kind(upvar_id.closure_expr_id, ty::ClosureKind::FnOnce);\n \n                         let upvar_capture_map =\n                             &mut self.fcx.inh.tables.borrow_mut().upvar_capture_map;\n@@ -314,7 +314,7 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                         // must still adjust the kind of the closure\n                         // to be a FnOnce closure to permit moves out\n                         // of the environment.\n-                        self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnOnceClosureKind);\n+                        self.adjust_closure_kind(upvar_id.closure_expr_id, ty::ClosureKind::FnOnce);\n                     }\n                     mc::NoteNone => {\n                     }\n@@ -418,15 +418,15 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                 }\n \n                 // also need to be in an FnMut closure since this is not an ImmBorrow\n-                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnMutClosureKind);\n+                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::ClosureKind::FnMut);\n \n                 true\n             }\n             mc::NoteClosureEnv(upvar_id) => {\n                 // this kind of deref occurs in a `move` closure, or\n                 // for a by-value upvar; in either case, to mutate an\n                 // upvar, we need to be an FnMut closure\n-                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::FnMutClosureKind);\n+                self.adjust_closure_kind(upvar_id.closure_expr_id, ty::ClosureKind::FnMut);\n \n                 true\n             }\n@@ -488,16 +488,16 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n                closure_id, existing_kind, new_kind);\n \n         match (existing_kind, new_kind) {\n-            (ty::FnClosureKind, ty::FnClosureKind) |\n-            (ty::FnMutClosureKind, ty::FnClosureKind) |\n-            (ty::FnMutClosureKind, ty::FnMutClosureKind) |\n-            (ty::FnOnceClosureKind, _) => {\n+            (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n+            (ty::ClosureKind::FnMut, ty::ClosureKind::Fn) |\n+            (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n+            (ty::ClosureKind::FnOnce, _) => {\n                 // no change needed\n             }\n \n-            (ty::FnClosureKind, ty::FnMutClosureKind) |\n-            (ty::FnClosureKind, ty::FnOnceClosureKind) |\n-            (ty::FnMutClosureKind, ty::FnOnceClosureKind) => {\n+            (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) |\n+            (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n+            (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n                 // new kind is stronger than the old kind\n                 closure_kinds.insert(closure_def_id, new_kind);\n             }"}]}