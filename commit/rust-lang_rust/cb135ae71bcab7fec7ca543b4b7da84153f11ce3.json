{"sha": "cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "node_id": "C_kwDOAAsO6NoAKGNiMTM1YWU3MWJjYWI3ZmVjN2NhNTQzYjRiN2RhODQxNTNmMTFjZTM", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-17T18:28:25Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-17T18:28:25Z"}, "message": "Add a \"Add attribute\" assist", "tree": {"sha": "412b6085a7c896edd4c9dc66a0917f0c734dfee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/412b6085a7c896edd4c9dc66a0917f0c734dfee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "html_url": "https://github.com/rust-lang/rust/commit/cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e95c14ea730c6b06f5760c8c92e69b9a6def828", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e95c14ea730c6b06f5760c8c92e69b9a6def828", "html_url": "https://github.com/rust-lang/rust/commit/7e95c14ea730c6b06f5760c8c92e69b9a6def828"}], "stats": {"total": 405, "additions": 227, "deletions": 178}, "files": [{"sha": "dcb52b151dbf803d7993f9d329ddca56ba40837b", "filename": "crates/ide-assists/src/handlers/add_attribute.rs", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_attribute.rs?ref=cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "patch": "@@ -0,0 +1,196 @@\n+use ide_db::assists::{AssistId, AssistKind, GroupLabel};\n+use syntax::{\n+    ast::{self, HasAttrs},\n+    match_ast, AstNode, SyntaxKind, TextSize,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: add_attribute\n+//\n+// Adds commonly used attributes to items.\n+//\n+// ```\n+// struct Point {\n+//     x: u32,\n+//     y: u32,$0\n+// }\n+// ```\n+// ->add_derive\n+// ```\n+// #[derive($0)]\n+// struct Point {\n+//     x: u32,\n+//     y: u32,\n+// }\n+// ```\n+pub(crate) fn add_attribute(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let cap = ctx.config.snippet_cap?;\n+\n+    let (attr_owner, attrs) = ctx\n+        .find_node_at_offset::<ast::AnyHasAttrs>()?\n+        .syntax()\n+        .ancestors()\n+        .filter_map(ast::AnyHasAttrs::cast)\n+        .find_map(|attr_owner| {\n+            let node = attr_owner.syntax();\n+            match_ast! {\n+                match node {\n+                    ast::Adt(_) => Some((attr_owner, ADT_ATTRS)),\n+                    ast::Fn(_) => Some((attr_owner, FN_ATTRS)),\n+                    _ => None,\n+                }\n+            }\n+        })?;\n+\n+    let offset = attr_insertion_offset(&attr_owner)?;\n+\n+    for tpl in attrs {\n+        let existing_offset = attr_owner.attrs().find_map(|attr| {\n+            if attr.simple_name()? == tpl.name {\n+                match attr.token_tree() {\n+                    Some(tt) => {\n+                        // Attribute like `#[derive(...)]`, position cursor right before the `)`\n+                        return Some(tt.syntax().text_range().end() - TextSize::of(')'));\n+                    }\n+                    None => {\n+                        // `#[key = value]`\n+                        let tok = attr.syntax().last_token()?;\n+                        if tok.kind() == SyntaxKind::R_BRACK {\n+                            return Some(tok.text_range().end() - TextSize::of(']'));\n+                        }\n+                    }\n+                }\n+            }\n+            None\n+        });\n+        acc.add_group(\n+            &GroupLabel(\"Add attribute\".into()),\n+            AssistId(tpl.id, AssistKind::Generate),\n+            format!(\"Add `#[{}]`\", tpl.name),\n+            attr_owner.syntax().text_range(),\n+            |b| match existing_offset {\n+                Some(offset) => {\n+                    b.insert_snippet(cap, offset, \"$0\");\n+                }\n+                None => {\n+                    b.insert_snippet(cap, offset, format!(\"#[{}]\\n\", tpl.snippet));\n+                }\n+            },\n+        );\n+    }\n+\n+    Some(())\n+}\n+\n+fn attr_insertion_offset(nominal: &ast::AnyHasAttrs) -> Option<TextSize> {\n+    let non_ws_child = nominal\n+        .syntax()\n+        .children_with_tokens()\n+        .find(|it| it.kind() != SyntaxKind::COMMENT && it.kind() != SyntaxKind::WHITESPACE)?;\n+    Some(non_ws_child.text_range().start())\n+}\n+\n+static ADT_ATTRS: &[AttrTemplate] = &[\n+    AttrTemplate { id: \"add_derive\", name: \"derive\", snippet: \"derive($0)\" },\n+    AttrTemplate { id: \"add_must_use\", name: \"must_use\", snippet: \"must_use$0\" },\n+];\n+\n+static FN_ATTRS: &[AttrTemplate] = &[\n+    AttrTemplate { id: \"add_inline\", name: \"inline\", snippet: \"inline$0\" },\n+    AttrTemplate { id: \"add_must_use\", name: \"must_use\", snippet: \"must_use$0\" },\n+];\n+\n+struct AttrTemplate {\n+    /// Assist ID.\n+    id: &'static str,\n+    /// User-facing attribute name.\n+    name: &'static str,\n+    /// Snippet to insert.\n+    snippet: &'static str,\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist_by_label, check_assist_target};\n+\n+    use super::add_attribute;\n+\n+    fn check_derive(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        check_assist_by_label(\n+            add_attribute,\n+            ra_fixture_before,\n+            ra_fixture_after,\n+            \"Add `#[derive]`\",\n+        );\n+    }\n+\n+    fn check_must_use(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        check_assist_by_label(\n+            add_attribute,\n+            ra_fixture_before,\n+            ra_fixture_after,\n+            \"Add `#[must_use]`\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_derive_new() {\n+        check_derive(\"struct Foo { a: i32, $0}\", \"#[derive($0)]\\nstruct Foo { a: i32, }\");\n+        check_derive(\"struct Foo { $0 a: i32, }\", \"#[derive($0)]\\nstruct Foo {  a: i32, }\");\n+    }\n+\n+    #[test]\n+    fn add_derive_existing() {\n+        check_derive(\n+            \"#[derive(Clone)]\\nstruct Foo { a: i32$0, }\",\n+            \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_derive_new_with_doc_comment() {\n+        check_derive(\n+            \"\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32$0, }\n+            \",\n+            \"\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+#[derive($0)]\n+struct Foo { a: i32, }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_derive_target() {\n+        check_assist_target(\n+            add_attribute,\n+            r#\"\n+struct SomeThingIrrelevant;\n+/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32$0, }\n+struct EvenMoreIrrelevant;\n+            \"#,\n+            \"/// `Foo` is a pretty important struct.\n+/// It does stuff.\n+struct Foo { a: i32, }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn insert_must_use() {\n+        check_must_use(\"struct S$0;\", \"#[must_use$0]\\nstruct S;\");\n+        check_must_use(\"$0fn f() {}\", \"#[must_use$0]\\nfn f() {}\");\n+\n+        check_must_use(r#\"#[must_use = \"bla\"] struct S$0;\"#, r#\"#[must_use = \"bla\"$0] struct S;\"#);\n+        check_must_use(r#\"#[must_use = ] struct S$0;\"#, r#\"#[must_use = $0] struct S;\"#);\n+\n+        check_must_use(r#\"#[must_use = \"bla\"] $0fn f() {}\"#, r#\"#[must_use = \"bla\"$0] fn f() {}\"#);\n+        check_must_use(r#\"#[must_use = ] $0fn f() {}\"#, r#\"#[must_use = $0] fn f() {}\"#);\n+    }\n+}"}, {"sha": "28483f795e0f6c8fb5b0d20cec4b855050995084", "filename": "crates/ide-assists/src/handlers/generate_derive.rs", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/7e95c14ea730c6b06f5760c8c92e69b9a6def828/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95c14ea730c6b06f5760c8c92e69b9a6def828/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=7e95c14ea730c6b06f5760c8c92e69b9a6def828", "patch": "@@ -1,132 +0,0 @@\n-use syntax::{\n-    ast::{self, AstNode, HasAttrs},\n-    SyntaxKind::{COMMENT, WHITESPACE},\n-    TextSize,\n-};\n-\n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n-\n-// Assist: generate_derive\n-//\n-// Adds a new `#[derive()]` clause to a struct or enum.\n-//\n-// ```\n-// struct Point {\n-//     x: u32,\n-//     y: u32,$0\n-// }\n-// ```\n-// ->\n-// ```\n-// #[derive($0)]\n-// struct Point {\n-//     x: u32,\n-//     y: u32,\n-// }\n-// ```\n-pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let cap = ctx.config.snippet_cap?;\n-    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n-    let node_start = derive_insertion_offset(&nominal)?;\n-    let target = nominal.syntax().text_range();\n-    acc.add(\n-        AssistId(\"generate_derive\", AssistKind::Generate),\n-        \"Add `#[derive]`\",\n-        target,\n-        |builder| {\n-            let derive_attr = nominal\n-                .attrs()\n-                .filter_map(|x| x.as_simple_call())\n-                .filter(|(name, _arg)| name == \"derive\")\n-                .map(|(_name, arg)| arg)\n-                .next();\n-            match derive_attr {\n-                None => {\n-                    builder.insert_snippet(cap, node_start, \"#[derive($0)]\\n\");\n-                }\n-                Some(tt) => {\n-                    // Just move the cursor.\n-                    builder.insert_snippet(\n-                        cap,\n-                        tt.syntax().text_range().end() - TextSize::of(')'),\n-                        \"$0\",\n-                    )\n-                }\n-            };\n-        },\n-    )\n-}\n-\n-// Insert `derive` after doc comments.\n-fn derive_insertion_offset(nominal: &ast::Adt) -> Option<TextSize> {\n-    let non_ws_child = nominal\n-        .syntax()\n-        .children_with_tokens()\n-        .find(|it| it.kind() != COMMENT && it.kind() != WHITESPACE)?;\n-    Some(non_ws_child.text_range().start())\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_target};\n-\n-    use super::*;\n-\n-    #[test]\n-    fn add_derive_new() {\n-        check_assist(\n-            generate_derive,\n-            \"struct Foo { a: i32, $0}\",\n-            \"#[derive($0)]\\nstruct Foo { a: i32, }\",\n-        );\n-        check_assist(\n-            generate_derive,\n-            \"struct Foo { $0 a: i32, }\",\n-            \"#[derive($0)]\\nstruct Foo {  a: i32, }\",\n-        );\n-    }\n-\n-    #[test]\n-    fn add_derive_existing() {\n-        check_assist(\n-            generate_derive,\n-            \"#[derive(Clone)]\\nstruct Foo { a: i32$0, }\",\n-            \"#[derive(Clone$0)]\\nstruct Foo { a: i32, }\",\n-        );\n-    }\n-\n-    #[test]\n-    fn add_derive_new_with_doc_comment() {\n-        check_assist(\n-            generate_derive,\n-            \"\n-/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-struct Foo { a: i32$0, }\n-            \",\n-            \"\n-/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-#[derive($0)]\n-struct Foo { a: i32, }\n-            \",\n-        );\n-    }\n-\n-    #[test]\n-    fn add_derive_target() {\n-        check_assist_target(\n-            generate_derive,\n-            \"\n-struct SomeThingIrrelevant;\n-/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-struct Foo { a: i32$0, }\n-struct EvenMoreIrrelevant;\n-            \",\n-            \"/// `Foo` is a pretty important struct.\n-/// It does stuff.\n-struct Foo { a: i32, }\",\n-        );\n-    }\n-}"}, {"sha": "3702f543aa6567503ee6474e2eabb5354c4b51ae", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "patch": "@@ -38,7 +38,6 @@ use crate::{\n // }\n //\n // impl Person {\n-//     #[must_use]\n //     fn $0name(&self) -> &str {\n //         self.name.as_ref()\n //     }\n@@ -64,7 +63,6 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n // }\n //\n // impl Person {\n-//     #[must_use]\n //     fn $0name_mut(&mut self) -> &mut String {\n //         &mut self.name\n //     }\n@@ -133,8 +131,7 @@ pub(crate) fn generate_getter_impl(\n \n             format_to!(\n                 buf,\n-                \"    #[must_use]\n-    {}fn {}(&{}self) -> {} {{\n+                \"    {}fn {}(&{}self) -> {} {{\n         {}\n     }}\",\n                 vis,\n@@ -182,7 +179,6 @@ struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     fn $0data(&self) -> &Data {\n         &self.data\n     }\n@@ -203,7 +199,6 @@ struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     fn $0data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n@@ -237,7 +232,6 @@ struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     fn data_mut(&mut self) -> &mut Data {\n         &mut self.data\n     }\n@@ -261,7 +255,6 @@ pub(crate) struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     pub(crate) fn $0data(&self) -> &Data {\n         &self.data\n     }\n@@ -281,7 +274,6 @@ struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     fn data(&self) -> &Data {\n         &self.data\n     }\n@@ -294,12 +286,10 @@ struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     fn data(&self) -> &Data {\n         &self.data\n     }\n \n-    #[must_use]\n     fn $0count(&self) -> &usize {\n         &self.count\n     }\n@@ -325,7 +315,6 @@ pub struct String;\n struct S { foo: String }\n \n impl S {\n-    #[must_use]\n     fn $0foo(&self) -> &String {\n         &self.foo\n     }\n@@ -349,7 +338,6 @@ struct S { foo: $0bool }\n struct S { foo: bool }\n \n impl S {\n-    #[must_use]\n     fn $0foo(&self) -> bool {\n         self.foo\n     }\n@@ -382,7 +370,6 @@ impl AsRef<str> for String {\n struct S { foo: String }\n \n impl S {\n-    #[must_use]\n     fn $0foo(&self) -> &str {\n         self.foo.as_ref()\n     }\n@@ -419,7 +406,6 @@ impl<T> AsRef<T> for Box<T> {\n struct S { foo: Box<Sweets> }\n \n impl S {\n-    #[must_use]\n     fn $0foo(&self) -> &Sweets {\n         self.foo.as_ref()\n     }\n@@ -452,7 +438,6 @@ impl<T> AsRef<[T]> for Vec<T> {\n struct S { foo: Vec<()> }\n \n impl S {\n-    #[must_use]\n     fn $0foo(&self) -> &[()] {\n         self.foo.as_ref()\n     }\n@@ -475,7 +460,6 @@ struct Failure;\n struct S { foo: Option<Failure> }\n \n impl S {\n-    #[must_use]\n     fn $0foo(&self) -> Option<&Failure> {\n         self.foo.as_ref()\n     }\n@@ -498,7 +482,6 @@ struct Context {\n }\n \n impl Context {\n-    #[must_use]\n     fn $0data(&self) -> Result<&bool, &i32> {\n         self.data.as_ref()\n     }"}, {"sha": "c1751e8b406ebcdc1cca9ed65d9afa3df31b1030", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "patch": "@@ -106,6 +106,8 @@ mod handlers {\n     mod add_explicit_type;\n     mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n+    mod add_missing_match_arms;\n+    mod add_attribute;\n     mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n@@ -125,7 +127,6 @@ mod handlers {\n     mod extract_struct_from_enum_variant;\n     mod extract_type_alias;\n     mod extract_variable;\n-    mod add_missing_match_arms;\n     mod fix_visibility;\n     mod flip_binexpr;\n     mod flip_comma;\n@@ -134,7 +135,6 @@ mod handlers {\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n     mod generate_deref;\n-    mod generate_derive;\n     mod generate_documentation_template;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -190,6 +190,7 @@ mod handlers {\n     pub(crate) fn all() -> &'static [Handler] {\n         &[\n             // These are alphabetic for the foolish consistency\n+            add_attribute::add_attribute,\n             add_explicit_type::add_explicit_type,\n             add_missing_match_arms::add_missing_match_arms,\n             add_lifetime_to_type::add_lifetime_to_type,\n@@ -219,7 +220,6 @@ mod handlers {\n             generate_constant::generate_constant,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n-            generate_derive::generate_derive,\n             generate_documentation_template::generate_documentation_template,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}, {"sha": "ad2066a2ac2b666b85ca830533a9c6092a5e3e94", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "patch": "@@ -251,6 +251,7 @@ pub fn test_some_range(a: int) -> bool {\n         Extract into variable\n         Extract into function\n         Replace if let with match\n+        Add attribute\n     \"#]]\n     .assert_eq(&expected);\n }"}, {"sha": "d3917f6c97ca4c69eb9facc8b11d3b179ece24ef", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "patch": "@@ -2,6 +2,26 @@\n \n use super::check_doc_test;\n \n+#[test]\n+fn doctest_add_attribute() {\n+    check_doc_test(\n+        \"add_derive\",\n+        r#####\"\n+struct Point {\n+    x: u32,\n+    y: u32,$0\n+}\n+\"#####,\n+        r#####\"\n+#[derive($0)]\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_explicit_type() {\n     check_doc_test(\n@@ -822,26 +842,6 @@ impl core::ops::Deref for B {\n     )\n }\n \n-#[test]\n-fn doctest_generate_derive() {\n-    check_doc_test(\n-        \"generate_derive\",\n-        r#####\"\n-struct Point {\n-    x: u32,\n-    y: u32,$0\n-}\n-\"#####,\n-        r#####\"\n-#[derive($0)]\n-struct Point {\n-    x: u32,\n-    y: u32,\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_generate_documentation_template() {\n     check_doc_test(\n@@ -1037,7 +1037,6 @@ struct Person {\n }\n \n impl Person {\n-    #[must_use]\n     fn $0name(&self) -> &str {\n         self.name.as_ref()\n     }\n@@ -1061,7 +1060,6 @@ struct Person {\n }\n \n impl Person {\n-    #[must_use]\n     fn $0name_mut(&mut self) -> &mut String {\n         &mut self.name\n     }"}, {"sha": "577bc0894eec081d62b29db6b3895d6a20209c21", "filename": "crates/ide-assists/src/tests/sourcegen.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb135ae71bcab7fec7ca543b4b7da84153f11ce3/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fsourcegen.rs?ref=cb135ae71bcab7fec7ca543b4b7da84153f11ce3", "patch": "@@ -31,7 +31,7 @@ r#####\"\n }}\n \"######,\n                     &test_id,\n-                    &assist.id,\n+                    &section.assist_id,\n                     reveal_hash_comments(&section.before),\n                     reveal_hash_comments(&section.after)\n                 );\n@@ -61,6 +61,7 @@ r#####\"\n }\n #[derive(Debug)]\n struct Section {\n+    assist_id: String,\n     doc: String,\n     before: String,\n     after: String,\n@@ -111,11 +112,13 @@ impl Assist {\n \n                     let before = take_until(lines.by_ref(), \"```\");\n \n-                    assert_eq!(lines.next().unwrap().as_str(), \"->\");\n+                    let arrow = lines.next().unwrap();\n+                    assert!(arrow.starts_with(\"->\"));\n+                    let id = if arrow[2..].is_empty() { &assist.id } else { &arrow[2..] };\n                     assert_eq!(lines.next().unwrap().as_str(), \"```\");\n                     let after = take_until(lines.by_ref(), \"```\");\n \n-                    assist.sections.push(Section { doc, before, after });\n+                    assist.sections.push(Section { assist_id: id.to_string(), doc, before, after });\n                 }\n \n                 acc.push(assist)"}]}