{"sha": "20b30acfa856309857e8914fb2bb5f831e991d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYjMwYWNmYTg1NjMwOTg1N2U4OTE0ZmIyYmI1ZjgzMWU5OTFkMGI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-08T23:04:21Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-05-11T16:55:31Z"}, "message": "Include a warning in the layout docs that layout is unstable", "tree": {"sha": "322d0810d397193fcba90d21a90655c2808f258b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322d0810d397193fcba90d21a90655c2808f258b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20b30acfa856309857e8914fb2bb5f831e991d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20b30acfa856309857e8914fb2bb5f831e991d0b", "html_url": "https://github.com/rust-lang/rust/commit/20b30acfa856309857e8914fb2bb5f831e991d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20b30acfa856309857e8914fb2bb5f831e991d0b/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5859c5d333465fe91be46196e2b47bff9fc48ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/5859c5d333465fe91be46196e2b47bff9fc48ece", "html_url": "https://github.com/rust-lang/rust/commit/5859c5d333465fe91be46196e2b47bff9fc48ece"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "41565019c6b1948ba90abb7744bcf1001a2db37f", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/20b30acfa856309857e8914fb2bb5f831e991d0b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20b30acfa856309857e8914fb2bb5f831e991d0b/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=20b30acfa856309857e8914fb2bb5f831e991d0b", "patch": "@@ -1537,10 +1537,19 @@ fn document_ty_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n     let ty = cx.tcx().type_of(ty_def_id);\n     match cx.tcx().layout_of(param_env.and(ty)) {\n         Ok(ty_layout) => {\n-            writeln!(w, r#\"<h2 class=\"small-section-header\">Layout</h2>\"#);\n-            writeln!(w, \"<div>\");\n+            writeln!(w, \"<h2 class=\\\"small-section-header\\\">Layout</h2>\");\n+            writeln!(w, \"<div class=\\\"docblock\\\">\");\n+            writeln!(\n+                w,\n+                \"<div class=\\\"warning\\\"><p><strong>Note:</strong> Most layout information is \\\n+                 completely unstable and may be different between compiler versions. \\\n+                 The only exception is types with certain <code>repr(...)</code> attributes. \\\n+                 Please see the Rust Reference\u2019s \\\n+                 <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\\n+                 chapter for details on type layout guarantees.</p></div>\"\n+            );\n             if ty_layout.layout.abi.is_unsized() {\n-                writeln!(w, \"<strong>Sized:</strong> (unsized)\");\n+                writeln!(w, \"<p><strong>Size:</strong> (unsized)</p>\");\n             } else {\n                 writeln!(\n                     w,"}]}