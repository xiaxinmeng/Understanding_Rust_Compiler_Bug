{"sha": "ed66492a6ae903365be46f9ed8fa3e9ef121023a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjY0OTJhNmFlOTAzMzY1YmU0NmY5ZWQ4ZmEzZTllZjEyMTAyM2E=", "commit": {"author": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-26T10:46:49Z"}, "committer": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-28T07:46:33Z"}, "message": "Block indent formatting", "tree": {"sha": "cd55463b5f02462ca6295a2bf15f8ff71c19b0be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd55463b5f02462ca6295a2bf15f8ff71c19b0be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed66492a6ae903365be46f9ed8fa3e9ef121023a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed66492a6ae903365be46f9ed8fa3e9ef121023a", "html_url": "https://github.com/rust-lang/rust/commit/ed66492a6ae903365be46f9ed8fa3e9ef121023a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed66492a6ae903365be46f9ed8fa3e9ef121023a/comments", "author": null, "committer": null, "parents": [{"sha": "65c399613cfdbcea6384a781dda45c84a850ec4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c399613cfdbcea6384a781dda45c84a850ec4e", "html_url": "https://github.com/rust-lang/rust/commit/65c399613cfdbcea6384a781dda45c84a850ec4e"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "8300033bca7ef21008590b5be0e31e61297a6369", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ed66492a6ae903365be46f9ed8fa3e9ef121023a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed66492a6ae903365be46f9ed8fa3e9ef121023a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=ed66492a6ae903365be46f9ed8fa3e9ef121023a", "patch": "@@ -196,13 +196,14 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     block(&mut blocks, TerminatorKind::Goto { target: return_block });\n     block(&mut blocks, TerminatorKind::Return);\n \n-    let mut body = new_body(blocks,\n-                            IndexVec::from_elem_n(\n-                                SourceScopeData { span, parent_scope: None }, 1\n-                            ),\n-                            local_decls_for_sig(&sig, span),\n-                            sig.inputs().len(),\n-                            span);\n+    let mut body = new_body(\n+        blocks,\n+        IndexVec::from_elem_n(\n+            SourceScopeData { span, parent_scope: None }, 1\n+        ),\n+        local_decls_for_sig(&sig, span),\n+        sig.inputs().len(),\n+        span);\n \n     if let Some(..) = ty {\n         // The first argument (index 0), but add 1 for the return value.\n@@ -241,11 +242,12 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     body\n }\n \n-fn new_body<'tcx>(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n-                  source_scopes: IndexVec<SourceScope, SourceScopeData>,\n-                  local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n-                  arg_count: usize,\n-                  span: Span,\n+fn new_body<'tcx>(\n+    basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+    local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    arg_count: usize,\n+    span: Span,\n ) -> Body<'tcx> {\n     Body::new(\n         basic_blocks,\n@@ -377,13 +379,14 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn into_mir(self) -> Body<'tcx> {\n-        new_body(self.blocks,\n-                 IndexVec::from_elem_n(\n-                     SourceScopeData { span: self.span, parent_scope: None }, 1\n-                 ),\n-                 self.local_decls,\n-                 self.sig.inputs().len(),\n-                 self.span,\n+        new_body(\n+            self.blocks,\n+            IndexVec::from_elem_n(\n+                SourceScopeData { span: self.span, parent_scope: None }, 1\n+            ),\n+            self.local_decls,\n+            self.sig.inputs().len(),\n+            self.span,\n         )\n     }\n "}]}