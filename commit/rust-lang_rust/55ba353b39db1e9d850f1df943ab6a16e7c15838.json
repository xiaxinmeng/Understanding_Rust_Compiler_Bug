{"sha": "55ba353b39db1e9d850f1df943ab6a16e7c15838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YmEzNTNiMzlkYjFlOWQ4NTBmMWRmOTQzYWI2YTE2ZTdjMTU4Mzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-17T11:29:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-18T16:28:48Z"}, "message": "Don't expose SyntaxKind from IDE API\n\nSyntaxKind is somewhat of an internal type, but IDE is using it to\nbasically specify an icon. Let's have a dedicated entity for this\ninstead.", "tree": {"sha": "c29c3a31ea9e046d2767dfc189e0ab77b8ffdafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c29c3a31ea9e046d2767dfc189e0ab77b8ffdafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55ba353b39db1e9d850f1df943ab6a16e7c15838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55ba353b39db1e9d850f1df943ab6a16e7c15838", "html_url": "https://github.com/rust-lang/rust/commit/55ba353b39db1e9d850f1df943ab6a16e7c15838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55ba353b39db1e9d850f1df943ab6a16e7c15838/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2465fa02b7aa268d7d711b81417e7717427217c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2465fa02b7aa268d7d711b81417e7717427217c3", "html_url": "https://github.com/rust-lang/rust/commit/2465fa02b7aa268d7d711b81417e7717427217c3"}], "stats": {"total": 576, "additions": 337, "deletions": 239}, "files": [{"sha": "60e0cd4addfe5ddb7005f735077e5d41f47a59cf", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -181,8 +181,8 @@ fn caller() {\n     call<|>ee();\n }\n \"#,\n-            \"callee FN FileId(0) 0..14 3..9\",\n-            &[\"caller FN FileId(0) 15..44 18..24 : [33..39]\"],\n+            \"callee Function FileId(0) 0..14 3..9\",\n+            &[\"caller Function FileId(0) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -197,8 +197,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(0) 0..14 3..9\",\n-            &[\"caller FN FileId(0) 15..44 18..24 : [33..39]\"],\n+            \"callee Function FileId(0) 0..14 3..9\",\n+            &[\"caller Function FileId(0) 15..44 18..24 : [33..39]\"],\n             &[],\n         );\n     }\n@@ -214,8 +214,8 @@ fn caller() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(0) 0..14 3..9\",\n-            &[\"caller FN FileId(0) 15..58 18..24 : [33..39, 47..53]\"],\n+            \"callee Function FileId(0) 0..14 3..9\",\n+            &[\"caller Function FileId(0) 15..58 18..24 : [33..39, 47..53]\"],\n             &[],\n         );\n     }\n@@ -234,10 +234,10 @@ fn caller2() {\n     callee();\n }\n \"#,\n-            \"callee FN FileId(0) 0..14 3..9\",\n+            \"callee Function FileId(0) 0..14 3..9\",\n             &[\n-                \"caller1 FN FileId(0) 15..45 18..25 : [34..40]\",\n-                \"caller2 FN FileId(0) 47..77 50..57 : [66..72]\",\n+                \"caller1 Function FileId(0) 15..45 18..25 : [34..40]\",\n+                \"caller2 Function FileId(0) 47..77 50..57 : [66..72]\",\n             ],\n             &[],\n         );\n@@ -263,10 +263,10 @@ mod tests {\n     }\n }\n \"#,\n-            \"callee FN FileId(0) 0..14 3..9\",\n+            \"callee Function FileId(0) 0..14 3..9\",\n             &[\n-                \"caller1 FN FileId(0) 15..45 18..25 : [34..40]\",\n-                \"test_caller FN FileId(0) 95..149 110..121 : [134..140]\",\n+                \"caller1 Function FileId(0) 15..45 18..25 : [34..40]\",\n+                \"test_caller Function FileId(0) 95..149 110..121 : [134..140]\",\n             ],\n             &[],\n         );\n@@ -287,8 +287,8 @@ fn caller() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"callee FN FileId(1) 0..18 7..13\",\n-            &[\"caller FN FileId(0) 27..56 30..36 : [45..51]\"],\n+            \"callee Function FileId(1) 0..18 7..13\",\n+            &[\"caller Function FileId(0) 27..56 30..36 : [45..51]\"],\n             &[],\n         );\n     }\n@@ -304,9 +304,9 @@ fn call<|>er() {\n     callee();\n }\n \"#,\n-            \"caller FN FileId(0) 15..58 18..24\",\n+            \"caller Function FileId(0) 15..58 18..24\",\n             &[],\n-            &[\"callee FN FileId(0) 0..14 3..9 : [33..39, 47..53]\"],\n+            &[\"callee Function FileId(0) 0..14 3..9 : [33..39, 47..53]\"],\n         );\n     }\n \n@@ -325,9 +325,9 @@ fn call<|>er() {\n //- /foo/mod.rs\n pub fn callee() {}\n \"#,\n-            \"caller FN FileId(0) 27..56 30..36\",\n+            \"caller Function FileId(0) 27..56 30..36\",\n             &[],\n-            &[\"callee FN FileId(1) 0..18 7..13 : [45..51]\"],\n+            &[\"callee Function FileId(1) 0..18 7..13 : [45..51]\"],\n         );\n     }\n \n@@ -348,9 +348,9 @@ fn caller3() {\n \n }\n \"#,\n-            \"caller2 FN FileId(0) 33..64 36..43\",\n-            &[\"caller1 FN FileId(0) 0..31 3..10 : [19..26]\"],\n-            &[\"caller3 FN FileId(0) 66..83 69..76 : [52..59]\"],\n+            \"caller2 Function FileId(0) 33..64 36..43\",\n+            &[\"caller1 Function FileId(0) 0..31 3..10 : [19..26]\"],\n+            &[\"caller3 Function FileId(0) 66..83 69..76 : [52..59]\"],\n         );\n     }\n \n@@ -368,9 +368,9 @@ fn main() {\n     a<|>()\n }\n \"#,\n-            \"a FN FileId(0) 0..18 3..4\",\n-            &[\"main FN FileId(0) 31..52 34..38 : [47..48]\"],\n-            &[\"b FN FileId(0) 20..29 23..24 : [13..14]\"],\n+            \"a Function FileId(0) 0..18 3..4\",\n+            &[\"main Function FileId(0) 31..52 34..38 : [47..48]\"],\n+            &[\"b Function FileId(0) 20..29 23..24 : [13..14]\"],\n         );\n \n         check_hierarchy(\n@@ -385,8 +385,8 @@ fn main() {\n     a()\n }\n \"#,\n-            \"b FN FileId(0) 20..29 23..24\",\n-            &[\"a FN FileId(0) 0..18 3..4 : [13..14]\"],\n+            \"b Function FileId(0) 20..29 23..24\",\n+            &[\"a Function FileId(0) 0..18 3..4 : [13..14]\"],\n             &[],\n         );\n     }"}, {"sha": "bae9e40dfa2d03c65831f177d6ac2487f999b9d8", "filename": "crates/ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -1,10 +1,9 @@\n //! This module contains utilities for turning SyntaxNodes and HIR types\n //! into types that may be used to render in a UI.\n \n-mod navigation_target;\n+pub(crate) mod navigation_target;\n mod short_label;\n \n-pub use navigation_target::NavigationTarget;\n pub(crate) use navigation_target::{ToNav, TryToNav};\n pub(crate) use short_label::ShortLabel;\n "}, {"sha": "ac6346b2b4195870f5876e562f08efe930ca8fe7", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 94, "deletions": 38, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -2,19 +2,43 @@\n \n use either::Either;\n use hir::{AssocItem, Documentation, FieldSource, HasAttrs, HasSource, InFile, ModuleSource};\n-use ide_db::base_db::{FileId, SourceDatabase};\n+use ide_db::{\n+    base_db::{FileId, SourceDatabase},\n+    symbol_index::FileSymbolKind,\n+};\n use ide_db::{defs::Definition, RootDatabase};\n use syntax::{\n     ast::{self, NameOwner},\n-    match_ast, AstNode, SmolStr,\n-    SyntaxKind::{self, IDENT_PAT, LIFETIME_PARAM, TYPE_PARAM},\n-    TextRange,\n+    match_ast, AstNode, SmolStr, TextRange,\n };\n \n use crate::FileSymbol;\n \n use super::short_label::ShortLabel;\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum SymbolKind {\n+    Module,\n+    Impl,\n+    Field,\n+    TypeParam,\n+    LifetimeParam,\n+    SelfParam,\n+    Local,\n+    Function,\n+    Const,\n+    Static,\n+    Struct,\n+    Enum,\n+    Variant,\n+    Union,\n+    TypeAlias,\n+    Trait,\n+    Macro,\n+    // Do we actually need this?\n+    DocTest,\n+}\n+\n /// `NavigationTarget` represents and element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n ///\n@@ -40,7 +64,7 @@ pub struct NavigationTarget {\n     /// Clients should place the cursor on this range when navigating to this target.\n     pub focus_range: Option<TextRange>,\n     pub name: SmolStr,\n-    pub kind: SyntaxKind,\n+    pub kind: SymbolKind,\n     pub container_name: Option<SmolStr>,\n     pub description: Option<String>,\n     pub docs: Option<Documentation>,\n@@ -69,7 +93,7 @@ impl NavigationTarget {\n                 name,\n                 None,\n                 frange.range,\n-                src.value.syntax().kind(),\n+                SymbolKind::Module,\n             );\n             res.docs = module.attrs(db).docs();\n             res.description = src.value.short_label();\n@@ -101,28 +125,23 @@ impl NavigationTarget {\n     pub(crate) fn from_named(\n         db: &RootDatabase,\n         node: InFile<&dyn ast::NameOwner>,\n+        kind: SymbolKind,\n     ) -> NavigationTarget {\n         let name =\n             node.value.name().map(|it| it.text().clone()).unwrap_or_else(|| SmolStr::new(\"_\"));\n         let focus_range =\n             node.value.name().map(|it| node.with_value(it.syntax()).original_file_range(db).range);\n         let frange = node.map(|it| it.syntax()).original_file_range(db);\n \n-        NavigationTarget::from_syntax(\n-            frange.file_id,\n-            name,\n-            focus_range,\n-            frange.range,\n-            node.value.syntax().kind(),\n-        )\n+        NavigationTarget::from_syntax(frange.file_id, name, focus_range, frange.range, kind)\n     }\n \n     fn from_syntax(\n         file_id: FileId,\n         name: SmolStr,\n         focus_range: Option<TextRange>,\n         full_range: TextRange,\n-        kind: SyntaxKind,\n+        kind: SymbolKind,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n@@ -142,7 +161,17 @@ impl ToNav for FileSymbol {\n         NavigationTarget {\n             file_id: self.file_id,\n             name: self.name.clone(),\n-            kind: self.kind,\n+            kind: match self.kind {\n+                FileSymbolKind::Function => SymbolKind::Function,\n+                FileSymbolKind::Struct => SymbolKind::Struct,\n+                FileSymbolKind::Enum => SymbolKind::Enum,\n+                FileSymbolKind::Trait => SymbolKind::Trait,\n+                FileSymbolKind::Module => SymbolKind::Module,\n+                FileSymbolKind::TypeAlias => SymbolKind::TypeAlias,\n+                FileSymbolKind::Const => SymbolKind::Const,\n+                FileSymbolKind::Static => SymbolKind::Static,\n+                FileSymbolKind::Macro => SymbolKind::Macro,\n+            },\n             full_range: self.range,\n             focus_range: self.name_range,\n             container_name: self.container_name.clone(),\n@@ -191,16 +220,36 @@ impl TryToNav for hir::ModuleDef {\n     }\n }\n \n-pub(crate) trait ToNavFromAst {}\n-impl ToNavFromAst for hir::Function {}\n-impl ToNavFromAst for hir::Const {}\n-impl ToNavFromAst for hir::Static {}\n-impl ToNavFromAst for hir::Struct {}\n-impl ToNavFromAst for hir::Enum {}\n-impl ToNavFromAst for hir::EnumVariant {}\n-impl ToNavFromAst for hir::Union {}\n-impl ToNavFromAst for hir::TypeAlias {}\n-impl ToNavFromAst for hir::Trait {}\n+pub(crate) trait ToNavFromAst {\n+    const KIND: SymbolKind;\n+}\n+impl ToNavFromAst for hir::Function {\n+    const KIND: SymbolKind = SymbolKind::Function;\n+}\n+impl ToNavFromAst for hir::Const {\n+    const KIND: SymbolKind = SymbolKind::Const;\n+}\n+impl ToNavFromAst for hir::Static {\n+    const KIND: SymbolKind = SymbolKind::Static;\n+}\n+impl ToNavFromAst for hir::Struct {\n+    const KIND: SymbolKind = SymbolKind::Struct;\n+}\n+impl ToNavFromAst for hir::Enum {\n+    const KIND: SymbolKind = SymbolKind::Enum;\n+}\n+impl ToNavFromAst for hir::EnumVariant {\n+    const KIND: SymbolKind = SymbolKind::Variant;\n+}\n+impl ToNavFromAst for hir::Union {\n+    const KIND: SymbolKind = SymbolKind::Union;\n+}\n+impl ToNavFromAst for hir::TypeAlias {\n+    const KIND: SymbolKind = SymbolKind::TypeAlias;\n+}\n+impl ToNavFromAst for hir::Trait {\n+    const KIND: SymbolKind = SymbolKind::Trait;\n+}\n \n impl<D> ToNav for D\n where\n@@ -209,8 +258,11 @@ where\n {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n-        let mut res =\n-            NavigationTarget::from_named(db, src.as_ref().map(|it| it as &dyn ast::NameOwner));\n+        let mut res = NavigationTarget::from_named(\n+            db,\n+            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n+            D::KIND,\n+        );\n         res.docs = self.docs(db);\n         res.description = src.value.short_label();\n         res\n@@ -228,7 +280,7 @@ impl ToNav for hir::Module {\n             }\n         };\n         let frange = src.with_value(syntax).original_file_range(db);\n-        NavigationTarget::from_syntax(frange.file_id, name, focus, frange.range, syntax.kind())\n+        NavigationTarget::from_syntax(frange.file_id, name, focus, frange.range, SymbolKind::Module)\n     }\n }\n \n@@ -252,7 +304,7 @@ impl ToNav for hir::Impl {\n             \"impl\".into(),\n             focus_range,\n             frange.range,\n-            src.value.syntax().kind(),\n+            SymbolKind::Impl,\n         )\n     }\n }\n@@ -263,7 +315,8 @@ impl ToNav for hir::Field {\n \n         match &src.value {\n             FieldSource::Named(it) => {\n-                let mut res = NavigationTarget::from_named(db, src.with_value(it));\n+                let mut res =\n+                    NavigationTarget::from_named(db, src.with_value(it), SymbolKind::Field);\n                 res.docs = self.docs(db);\n                 res.description = it.short_label();\n                 res\n@@ -275,7 +328,7 @@ impl ToNav for hir::Field {\n                     \"\".into(),\n                     None,\n                     frange.range,\n-                    it.syntax().kind(),\n+                    SymbolKind::Field,\n                 )\n             }\n         }\n@@ -286,8 +339,11 @@ impl ToNav for hir::MacroDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         log::debug!(\"nav target {:#?}\", src.value.syntax());\n-        let mut res =\n-            NavigationTarget::from_named(db, src.as_ref().map(|it| it as &dyn ast::NameOwner));\n+        let mut res = NavigationTarget::from_named(\n+            db,\n+            src.as_ref().map(|it| it as &dyn ast::NameOwner),\n+            SymbolKind::Macro,\n+        );\n         res.docs = self.docs(db);\n         res\n     }\n@@ -330,7 +386,7 @@ impl ToNav for hir::Local {\n         NavigationTarget {\n             file_id: full_range.file_id,\n             name,\n-            kind: IDENT_PAT,\n+            kind: SymbolKind::Local,\n             full_range: full_range.range,\n             focus_range: None,\n             container_name: None,\n@@ -354,7 +410,7 @@ impl ToNav for hir::TypeParam {\n         NavigationTarget {\n             file_id: src.file_id.original_file(db),\n             name: self.name(db).to_string().into(),\n-            kind: TYPE_PARAM,\n+            kind: SymbolKind::TypeParam,\n             full_range,\n             focus_range,\n             container_name: None,\n@@ -371,7 +427,7 @@ impl ToNav for hir::LifetimeParam {\n         NavigationTarget {\n             file_id: src.file_id.original_file(db),\n             name: self.name(db).to_string().into(),\n-            kind: LIFETIME_PARAM,\n+            kind: SymbolKind::LifetimeParam,\n             full_range,\n             focus_range: Some(full_range),\n             container_name: None,\n@@ -432,7 +488,7 @@ fn foo() { enum FooInner { } }\n                         5..13,\n                     ),\n                     name: \"FooInner\",\n-                    kind: ENUM,\n+                    kind: Enum,\n                     container_name: None,\n                     description: Some(\n                         \"enum FooInner\",\n@@ -448,7 +504,7 @@ fn foo() { enum FooInner { } }\n                         34..42,\n                     ),\n                     name: \"FooInner\",\n-                    kind: ENUM,\n+                    kind: Enum,\n                     container_name: Some(\n                         \"foo\",\n                     ),"}, {"sha": "32556dad33a1347115a94409de3678927f758860", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -1,15 +1,17 @@\n use syntax::{\n     ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n-    match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, WalkEvent,\n+    match_ast, AstNode, SourceFile, SyntaxNode, TextRange, WalkEvent,\n };\n \n+use crate::SymbolKind;\n+\n #[derive(Debug, Clone)]\n pub struct StructureNode {\n     pub parent: Option<usize>,\n     pub label: String,\n     pub navigation_range: TextRange,\n     pub node_range: TextRange,\n-    pub kind: SyntaxKind,\n+    pub kind: SymbolKind,\n     pub detail: Option<String>,\n     pub deprecated: bool,\n }\n@@ -51,25 +53,27 @@ pub(crate) fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n }\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n-    fn decl<N: NameOwner + AttrsOwner>(node: N) -> Option<StructureNode> {\n-        decl_with_detail(&node, None)\n+    fn decl<N: NameOwner + AttrsOwner>(node: N, kind: SymbolKind) -> Option<StructureNode> {\n+        decl_with_detail(&node, None, kind)\n     }\n \n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n         node: &N,\n         type_ref: Option<ast::Type>,\n+        kind: SymbolKind,\n     ) -> Option<StructureNode> {\n         let detail = type_ref.map(|type_ref| {\n             let mut detail = String::new();\n             collapse_ws(type_ref.syntax(), &mut detail);\n             detail\n         });\n-        decl_with_detail(node, detail)\n+        decl_with_detail(node, detail, kind)\n     }\n \n     fn decl_with_detail<N: NameOwner + AttrsOwner>(\n         node: &N,\n         detail: Option<String>,\n+        kind: SymbolKind,\n     ) -> Option<StructureNode> {\n         let name = node.name()?;\n \n@@ -78,7 +82,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             label: name.text().to_string(),\n             navigation_range: name.syntax().text_range(),\n             node_range: node.syntax().text_range(),\n-            kind: node.syntax().kind(),\n+            kind,\n             detail,\n             deprecated: node.attrs().filter_map(|x| x.simple_name()).any(|x| x == \"deprecated\"),\n         })\n@@ -117,18 +121,18 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n \n-                decl_with_detail(&it, Some(detail))\n+                decl_with_detail(&it, Some(detail), SymbolKind::Function)\n             },\n-            ast::Struct(it) => decl(it),\n-            ast::Union(it) => decl(it),\n-            ast::Enum(it) => decl(it),\n-            ast::Variant(it) => decl(it),\n-            ast::Trait(it) => decl(it),\n-            ast::Module(it) => decl(it),\n-            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty()),\n-            ast::RecordField(it) => decl_with_type_ref(&it, it.ty()),\n-            ast::Const(it) => decl_with_type_ref(&it, it.ty()),\n-            ast::Static(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::Struct(it) => decl(it, SymbolKind::Struct),\n+            ast::Union(it) => decl(it, SymbolKind::Union),\n+            ast::Enum(it) => decl(it, SymbolKind::Enum),\n+            ast::Variant(it) => decl(it, SymbolKind::Variant),\n+            ast::Trait(it) => decl(it, SymbolKind::Trait),\n+            ast::Module(it) => decl(it, SymbolKind::Module),\n+            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::TypeAlias),\n+            ast::RecordField(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Field),\n+            ast::Const(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Const),\n+            ast::Static(it) => decl_with_type_ref(&it, it.ty(), SymbolKind::Static),\n             ast::Impl(it) => {\n                 let target_type = it.self_ty()?;\n                 let target_trait = it.trait_();\n@@ -144,13 +148,13 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     label,\n                     navigation_range: target_type.syntax().text_range(),\n                     node_range: it.syntax().text_range(),\n-                    kind: it.syntax().kind(),\n+                    kind: SymbolKind::Impl,\n                     detail: None,\n                     deprecated: false,\n                 };\n                 Some(node)\n             },\n-            ast::MacroRules(it) => decl(it),\n+            ast::MacroRules(it) => decl(it, SymbolKind::Macro),\n             _ => None,\n         }\n     }\n@@ -222,7 +226,7 @@ fn very_obsolete() {}\n                         label: \"Foo\",\n                         navigation_range: 8..11,\n                         node_range: 1..26,\n-                        kind: STRUCT,\n+                        kind: Struct,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -233,7 +237,7 @@ fn very_obsolete() {}\n                         label: \"x\",\n                         navigation_range: 18..19,\n                         node_range: 18..24,\n-                        kind: RECORD_FIELD,\n+                        kind: Field,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -244,7 +248,7 @@ fn very_obsolete() {}\n                         label: \"m\",\n                         navigation_range: 32..33,\n                         node_range: 28..158,\n-                        kind: MODULE,\n+                        kind: Module,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -255,7 +259,7 @@ fn very_obsolete() {}\n                         label: \"bar1\",\n                         navigation_range: 43..47,\n                         node_range: 40..52,\n-                        kind: FN,\n+                        kind: Function,\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -268,7 +272,7 @@ fn very_obsolete() {}\n                         label: \"bar2\",\n                         navigation_range: 60..64,\n                         node_range: 57..81,\n-                        kind: FN,\n+                        kind: Function,\n                         detail: Some(\n                             \"fn<T>(t: T) -> T\",\n                         ),\n@@ -281,7 +285,7 @@ fn very_obsolete() {}\n                         label: \"bar3\",\n                         navigation_range: 89..93,\n                         node_range: 86..156,\n-                        kind: FN,\n+                        kind: Function,\n                         detail: Some(\n                             \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n                         ),\n@@ -292,7 +296,7 @@ fn very_obsolete() {}\n                         label: \"E\",\n                         navigation_range: 165..166,\n                         node_range: 160..180,\n-                        kind: ENUM,\n+                        kind: Enum,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -303,7 +307,7 @@ fn very_obsolete() {}\n                         label: \"X\",\n                         navigation_range: 169..170,\n                         node_range: 169..170,\n-                        kind: VARIANT,\n+                        kind: Variant,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -314,7 +318,7 @@ fn very_obsolete() {}\n                         label: \"Y\",\n                         navigation_range: 172..173,\n                         node_range: 172..178,\n-                        kind: VARIANT,\n+                        kind: Variant,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -323,7 +327,7 @@ fn very_obsolete() {}\n                         label: \"T\",\n                         navigation_range: 186..187,\n                         node_range: 181..193,\n-                        kind: TYPE_ALIAS,\n+                        kind: TypeAlias,\n                         detail: Some(\n                             \"()\",\n                         ),\n@@ -334,7 +338,7 @@ fn very_obsolete() {}\n                         label: \"S\",\n                         navigation_range: 201..202,\n                         node_range: 194..213,\n-                        kind: STATIC,\n+                        kind: Static,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -345,7 +349,7 @@ fn very_obsolete() {}\n                         label: \"C\",\n                         navigation_range: 220..221,\n                         node_range: 214..232,\n-                        kind: CONST,\n+                        kind: Const,\n                         detail: Some(\n                             \"i32\",\n                         ),\n@@ -356,7 +360,7 @@ fn very_obsolete() {}\n                         label: \"impl E\",\n                         navigation_range: 239..240,\n                         node_range: 234..243,\n-                        kind: IMPL,\n+                        kind: Impl,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -365,7 +369,7 @@ fn very_obsolete() {}\n                         label: \"impl fmt::Debug for E\",\n                         navigation_range: 265..266,\n                         node_range: 245..269,\n-                        kind: IMPL,\n+                        kind: Impl,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -374,7 +378,7 @@ fn very_obsolete() {}\n                         label: \"mc\",\n                         navigation_range: 284..286,\n                         node_range: 271..303,\n-                        kind: MACRO_RULES,\n+                        kind: Macro,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -383,7 +387,7 @@ fn very_obsolete() {}\n                         label: \"mcexp\",\n                         navigation_range: 334..339,\n                         node_range: 305..356,\n-                        kind: MACRO_RULES,\n+                        kind: Macro,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -392,7 +396,7 @@ fn very_obsolete() {}\n                         label: \"mcexp\",\n                         navigation_range: 387..392,\n                         node_range: 358..409,\n-                        kind: MACRO_RULES,\n+                        kind: Macro,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -401,7 +405,7 @@ fn very_obsolete() {}\n                         label: \"obsolete\",\n                         navigation_range: 428..436,\n                         node_range: 411..441,\n-                        kind: FN,\n+                        kind: Function,\n                         detail: Some(\n                             \"fn()\",\n                         ),\n@@ -412,7 +416,7 @@ fn very_obsolete() {}\n                         label: \"very_obsolete\",\n                         navigation_range: 481..494,\n                         node_range: 443..499,\n-                        kind: FN,\n+                        kind: Function,\n                         detail: Some(\n                             \"fn()\",\n                         ),"}, {"sha": "5bee69f4bbc23ece430eb6f4a32fe17a6b69da6f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -9,7 +9,7 @@ use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset,\n \n use crate::{\n     display::{ToNav, TryToNav},\n-    FilePosition, NavigationTarget, RangeInfo,\n+    FilePosition, NavigationTarget, RangeInfo, SymbolKind,\n };\n \n // Feature: Go to Definition\n@@ -86,7 +86,7 @@ fn self_to_nav_target(self_param: ast::SelfParam, file_id: FileId) -> Option<Nav\n         full_range: self_param.syntax().text_range(),\n         focus_range: Some(self_token.text_range()),\n         name: self_token.text().clone(),\n-        kind: self_token.kind(),\n+        kind: SymbolKind::SelfParam,\n         container_name: None,\n         description: None,\n         docs: None,"}, {"sha": "dca098af6a60bd3dabe53cd98a2ce5337faaa2ee", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -2191,7 +2191,7 @@ fn foo_<|>test() {}\n                                     11..19,\n                                 ),\n                                 name: \"foo_test\",\n-                                kind: FN,\n+                                kind: Function,\n                                 container_name: None,\n                                 description: None,\n                                 docs: None,\n@@ -2234,7 +2234,7 @@ mod tests<|> {\n                                     4..9,\n                                 ),\n                                 name: \"tests\",\n-                                kind: MODULE,\n+                                kind: Module,\n                                 container_name: None,\n                                 description: None,\n                                 docs: None,\n@@ -2273,7 +2273,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                                         7..8,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2312,7 +2312,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         24..25,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2331,7 +2331,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         7..10,\n                                     ),\n                                     name: \"Arg\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -2370,7 +2370,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         24..25,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2389,7 +2389,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         7..10,\n                                     ),\n                                     name: \"Arg\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -2431,7 +2431,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         7..8,\n                                     ),\n                                     name: \"A\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct A\",\n@@ -2450,7 +2450,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         22..23,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2469,7 +2469,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         53..54,\n                                     ),\n                                     name: \"C\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"pub struct C\",\n@@ -2508,7 +2508,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2548,7 +2548,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2567,7 +2567,7 @@ fn main() { let s<|>t = foo(); }\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2607,7 +2607,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2626,7 +2626,7 @@ fn main() { let s<|>t = foo(); }\n                                         19..22,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -2669,7 +2669,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2688,7 +2688,7 @@ fn main() { let s<|>t = foo(); }\n                                         22..25,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -2707,7 +2707,7 @@ fn main() { let s<|>t = foo(); }\n                                         39..41,\n                                     ),\n                                     name: \"S1\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S1\",\n@@ -2726,7 +2726,7 @@ fn main() { let s<|>t = foo(); }\n                                         52..54,\n                                     ),\n                                     name: \"S2\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S2\",\n@@ -2763,7 +2763,7 @@ fn foo(ar<|>g: &impl Foo) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2803,7 +2803,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2822,7 +2822,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         19..22,\n                                     ),\n                                     name: \"Bar\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Bar\",\n@@ -2841,7 +2841,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         36..37,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2886,7 +2886,7 @@ mod future {\n                                         140..146,\n                                     ),\n                                     name: \"Future\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"pub trait Future\",\n@@ -2905,7 +2905,7 @@ mod future {\n                                         7..8,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2943,7 +2943,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -2962,7 +2962,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -3005,7 +3005,7 @@ fn main() { let s<|>t = foo(); }\n                                         49..50,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -3024,7 +3024,7 @@ fn main() { let s<|>t = foo(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -3061,7 +3061,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -3099,7 +3099,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\",\n@@ -3118,7 +3118,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -3159,7 +3159,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         6..15,\n                                     ),\n                                     name: \"ImplTrait\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait ImplTrait\",\n@@ -3178,7 +3178,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         50..51,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -3197,7 +3197,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         28..36,\n                                     ),\n                                     name: \"DynTrait\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait DynTrait\",\n@@ -3216,7 +3216,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         65..66,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT,\n+                                    kind: Struct,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -3264,7 +3264,7 @@ fn main() { let s<|>t = test().get(); }\n                                         6..9,\n                                     ),\n                                     name: \"Foo\",\n-                                    kind: TRAIT,\n+                                    kind: Trait,\n                                     container_name: None,\n                                     description: Some(\n                                         \"trait Foo\","}, {"sha": "dbad9a84f6a0244764fca82e100006acd314bca2", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -64,7 +64,7 @@ use crate::display::ToNav;\n pub use crate::{\n     call_hierarchy::CallItem,\n     diagnostics::{Diagnostic, DiagnosticsConfig, Fix, Severity},\n-    display::NavigationTarget,\n+    display::navigation_target::{NavigationTarget, SymbolKind},\n     expand_macro::ExpandedMacro,\n     file_structure::StructureNode,\n     folding_ranges::{Fold, FoldKind},"}, {"sha": "be344a09b32352571860c25329de4e07a372b7b2", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -78,7 +78,7 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo MODULE FileId(0) 0..8\");\n+        nav.assert_match(\"foo Module FileId(0) 0..8\");\n     }\n \n     #[test]\n@@ -97,7 +97,7 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"foo MODULE FileId(0) 0..8\");\n+        nav.assert_match(\"foo Module FileId(0) 0..8\");\n     }\n \n     #[test]\n@@ -113,7 +113,7 @@ mod tests {\n             \",\n         );\n         let nav = analysis.parent_module(pos).unwrap().pop().unwrap();\n-        nav.assert_match(\"baz MODULE FileId(0) 32..44\");\n+        nav.assert_match(\"baz Module FileId(0) 32..44\");\n     }\n \n     #[test]"}, {"sha": "d8069eb64d95fdb7f9bd5825a7bf4f459b1ac16e", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -24,7 +24,7 @@ use syntax::{\n     match_ast, AstNode, SyntaxKind, SyntaxNode, TextRange, TokenAtOffset,\n };\n \n-use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n+use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo, SymbolKind};\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n@@ -278,7 +278,7 @@ fn try_find_self_references(\n             full_range: self_param.syntax().text_range(),\n             focus_range: Some(param_self_token.text_range()),\n             name: param_self_token.text().clone(),\n-            kind: param_self_token.kind(),\n+            kind: SymbolKind::SelfParam,\n             container_name: None,\n             description: None,\n             docs: None,\n@@ -343,7 +343,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(0) 0..26 7..10 Other\n+                Foo Struct FileId(0) 0..26 7..10 Other\n \n                 FileId(0) 101..104 StructLiteral\n             \"#]],\n@@ -361,7 +361,7 @@ struct Foo<|> {}\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(0) 0..13 7..10 Other\n+                Foo Struct FileId(0) 0..13 7..10 Other\n \n                 FileId(0) 41..44 Other\n                 FileId(0) 54..57 StructLiteral\n@@ -380,7 +380,7 @@ struct Foo<T> <|>{}\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(0) 0..16 7..10 Other\n+                Foo Struct FileId(0) 0..16 7..10 Other\n \n                 FileId(0) 64..67 StructLiteral\n             \"#]],\n@@ -399,7 +399,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(0) 0..16 7..10 Other\n+                Foo Struct FileId(0) 0..16 7..10 Other\n \n                 FileId(0) 54..57 StructLiteral\n             \"#]],\n@@ -420,7 +420,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo ENUM FileId(0) 0..26 5..8 Other\n+                Foo Enum FileId(0) 0..26 5..8 Other\n \n                 FileId(0) 63..66 EnumLiteral\n             \"#]],\n@@ -441,7 +441,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo ENUM FileId(0) 0..26 5..8 Other\n+                Foo Enum FileId(0) 0..26 5..8 Other\n \n                 FileId(0) 50..53 Other\n                 FileId(0) 63..66 EnumLiteral\n@@ -463,7 +463,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo ENUM FileId(0) 0..32 5..8 Other\n+                Foo Enum FileId(0) 0..32 5..8 Other\n \n                 FileId(0) 73..76 EnumLiteral\n             \"#]],\n@@ -484,7 +484,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                Foo ENUM FileId(0) 0..33 5..8 Other\n+                Foo Enum FileId(0) 0..33 5..8 Other\n \n                 FileId(0) 70..73 EnumLiteral\n             \"#]],\n@@ -507,7 +507,7 @@ fn main() {\n     i = 5;\n }\"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(0) 24..25 Other Write\n+                i Local FileId(0) 24..25 Other Write\n \n                 FileId(0) 50..51 Other Write\n                 FileId(0) 54..55 Other Read\n@@ -531,7 +531,7 @@ fn bar() {\n }\n \"#,\n             expect![[r#\"\n-                spam IDENT_PAT FileId(0) 19..23 Other\n+                spam Local FileId(0) 19..23 Other\n \n                 FileId(0) 34..38 Other Read\n                 FileId(0) 41..45 Other Read\n@@ -546,7 +546,7 @@ fn bar() {\n fn foo(i : u32) -> u32 { i<|> }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(0) 7..8 Other\n+                i Local FileId(0) 7..8 Other\n \n                 FileId(0) 25..26 Other Read\n             \"#]],\n@@ -560,7 +560,7 @@ fn foo(i : u32) -> u32 { i<|> }\n fn foo(i<|> : u32) -> u32 { i }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(0) 7..8 Other\n+                i Local FileId(0) 7..8 Other\n \n                 FileId(0) 25..26 Other Read\n             \"#]],\n@@ -581,7 +581,7 @@ fn main(s: Foo) {\n }\n \"#,\n             expect![[r#\"\n-                spam RECORD_FIELD FileId(0) 17..30 21..25 Other\n+                spam Field FileId(0) 17..30 21..25 Other\n \n                 FileId(0) 67..71 Other Read\n             \"#]],\n@@ -598,7 +598,7 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                f FN FileId(0) 27..43 30..31 Other\n+                f Function FileId(0) 27..43 30..31 Other\n \n             \"#]],\n         );\n@@ -615,7 +615,7 @@ enum Foo {\n }\n \"#,\n             expect![[r#\"\n-                B VARIANT FileId(0) 22..23 22..23 Other\n+                B Variant FileId(0) 22..23 22..23 Other\n \n             \"#]],\n         );\n@@ -632,7 +632,7 @@ enum Foo {\n }\n \"#,\n             expect![[r#\"\n-                field RECORD_FIELD FileId(0) 26..35 26..31 Other\n+                field Field FileId(0) 26..35 26..31 Other\n \n             \"#]],\n         );\n@@ -673,7 +673,7 @@ fn f() {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(1) 17..51 28..31 Other\n+                Foo Struct FileId(1) 17..51 28..31 Other\n \n                 FileId(0) 53..56 StructLiteral\n                 FileId(2) 79..82 StructLiteral\n@@ -703,7 +703,7 @@ pub struct Foo {\n }\n \"#,\n             expect![[r#\"\n-                foo SOURCE_FILE FileId(1) 0..35 Other\n+                foo Module FileId(1) 0..35 Other\n \n                 FileId(0) 14..17 Other\n             \"#]],\n@@ -731,7 +731,7 @@ pub(super) struct Foo<|> {\n }\n \"#,\n             expect![[r#\"\n-                Foo STRUCT FileId(2) 0..41 18..21 Other\n+                Foo Struct FileId(2) 0..41 18..21 Other\n \n                 FileId(1) 20..23 Other\n                 FileId(1) 47..50 StructLiteral\n@@ -759,7 +759,7 @@ pub(super) struct Foo<|> {\n             code,\n             None,\n             expect![[r#\"\n-                quux FN FileId(0) 19..35 26..30 Other\n+                quux Function FileId(0) 19..35 26..30 Other\n \n                 FileId(1) 16..20 StructLiteral\n                 FileId(2) 16..20 StructLiteral\n@@ -770,7 +770,7 @@ pub(super) struct Foo<|> {\n             code,\n             Some(SearchScope::single_file(FileId(2))),\n             expect![[r#\"\n-                quux FN FileId(0) 19..35 26..30 Other\n+                quux Function FileId(0) 19..35 26..30 Other\n \n                 FileId(2) 16..20 StructLiteral\n             \"#]],\n@@ -790,7 +790,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                m1 MACRO_RULES FileId(0) 0..46 29..31 Other\n+                m1 Macro FileId(0) 0..46 29..31 Other\n \n                 FileId(0) 63..65 StructLiteral\n                 FileId(0) 73..75 StructLiteral\n@@ -808,7 +808,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(0) 23..24 Other Write\n+                i Local FileId(0) 23..24 Other Write\n \n                 FileId(0) 34..35 Other Write\n                 FileId(0) 38..39 Other Read\n@@ -830,7 +830,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                f RECORD_FIELD FileId(0) 15..21 15..16 Other\n+                f Field FileId(0) 15..21 15..16 Other\n \n                 FileId(0) 55..56 RecordFieldExprOrPat Read\n                 FileId(0) 68..69 Other Write\n@@ -848,7 +848,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                i IDENT_PAT FileId(0) 19..20 Other\n+                i Local FileId(0) 19..20 Other\n \n                 FileId(0) 26..27 Other Write\n             \"#]],\n@@ -872,7 +872,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                new FN FileId(0) 54..81 61..64 Other\n+                new Function FileId(0) 54..81 61..64 Other\n \n                 FileId(0) 126..129 StructLiteral\n             \"#]],\n@@ -894,7 +894,7 @@ use crate::f;\n fn g() { f(); }\n \"#,\n             expect![[r#\"\n-                f FN FileId(0) 22..31 25..26 Other\n+                f Function FileId(0) 22..31 25..26 Other\n \n                 FileId(1) 11..12 Other\n                 FileId(1) 24..25 StructLiteral\n@@ -917,7 +917,7 @@ fn f(s: S) {\n }\n \"#,\n             expect![[r#\"\n-                field RECORD_FIELD FileId(0) 15..24 15..20 Other\n+                field Field FileId(0) 15..24 15..20 Other\n \n                 FileId(0) 68..73 FieldShorthandForField Read\n             \"#]],\n@@ -941,7 +941,7 @@ fn f(e: En) {\n }\n \"#,\n             expect![[r#\"\n-                field RECORD_FIELD FileId(0) 32..41 32..37 Other\n+                field Field FileId(0) 32..41 32..37 Other\n \n                 FileId(0) 102..107 FieldShorthandForField Read\n             \"#]],\n@@ -965,7 +965,7 @@ fn f() -> m::En {\n }\n \"#,\n             expect![[r#\"\n-                field RECORD_FIELD FileId(0) 56..65 56..61 Other\n+                field Field FileId(0) 56..65 56..61 Other\n \n                 FileId(0) 125..130 RecordFieldExprOrPat Read\n             \"#]],\n@@ -990,7 +990,7 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                self SELF_KW FileId(0) 47..51 47..51 SelfKw Read\n+                self SelfParam FileId(0) 47..51 47..51 SelfKw Read\n \n                 FileId(0) 71..75 SelfKw Read\n                 FileId(0) 152..156 SelfKw Read\n@@ -1038,7 +1038,7 @@ fn foo<'a, 'b: 'a>(x: &'a<|> ()) -> &'a () where &'a (): Foo<'a> {\n }\n \"#,\n             expect![[r#\"\n-                'a LIFETIME_PARAM FileId(0) 55..57 55..57 Lifetime\n+                'a LifetimeParam FileId(0) 55..57 55..57 Lifetime\n \n                 FileId(0) 63..65 Lifetime\n                 FileId(0) 71..73 Lifetime\n@@ -1056,7 +1056,7 @@ fn foo<'a, 'b: 'a>(x: &'a<|> ()) -> &'a () where &'a (): Foo<'a> {\n type Foo<'a, T> where T: 'a<|> = &'a T;\n \"#,\n             expect![[r#\"\n-                'a LIFETIME_PARAM FileId(0) 9..11 9..11 Lifetime\n+                'a LifetimeParam FileId(0) 9..11 9..11 Lifetime\n \n                 FileId(0) 25..27 Lifetime\n                 FileId(0) 31..33 Lifetime\n@@ -1078,7 +1078,7 @@ impl<'a> Foo<'a> for &'a () {\n }\n \"#,\n             expect![[r#\"\n-                'a LIFETIME_PARAM FileId(0) 47..49 47..49 Lifetime\n+                'a LifetimeParam FileId(0) 47..49 47..49 Lifetime\n \n                 FileId(0) 55..57 Lifetime\n                 FileId(0) 64..66 Lifetime"}, {"sha": "600e93b6a316f7b029c045432721c41c7f583a38", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n \n use crate::{\n     display::{ToNav, TryToNav},\n-    FileId, NavigationTarget,\n+    FileId, NavigationTarget, SymbolKind,\n };\n \n #[derive(Debug, Clone)]\n@@ -137,7 +137,11 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, func: ast::Fn, file_id: FileId) -\n         }\n     };\n \n-    let nav = NavigationTarget::from_named(sema.db, InFile::new(file_id.into(), &func));\n+    let nav = NavigationTarget::from_named(\n+        sema.db,\n+        InFile::new(file_id.into(), &func),\n+        SymbolKind::Function,\n+    );\n     let cfg = def.attrs(sema.db).cfg();\n     Some(Runnable { nav, kind, cfg })\n }\n@@ -204,7 +208,7 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n     nav.focus_range = None;\n     nav.description = None;\n     nav.docs = None;\n-    nav.kind = syntax::SyntaxKind::COMMENT;\n+    nav.kind = SymbolKind::DocTest;\n     let res = Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg: attrs.cfg() };\n     Some(res)\n }\n@@ -352,7 +356,7 @@ fn bench() {}\n                                 4..8,\n                             ),\n                             name: \"main\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -370,7 +374,7 @@ fn bench() {}\n                                 26..34,\n                             ),\n                             name: \"test_foo\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -395,7 +399,7 @@ fn bench() {}\n                                 62..70,\n                             ),\n                             name: \"test_foo\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -420,7 +424,7 @@ fn bench() {}\n                                 89..94,\n                             ),\n                             name: \"bench\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -517,7 +521,7 @@ struct StructWithRunnable(String);\n                                 4..8,\n                             ),\n                             name: \"main\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -533,7 +537,7 @@ struct StructWithRunnable(String);\n                             full_range: 15..74,\n                             focus_range: None,\n                             name: \"should_have_runnable\",\n-                            kind: COMMENT,\n+                            kind: DocTest,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -553,7 +557,7 @@ struct StructWithRunnable(String);\n                             full_range: 76..148,\n                             focus_range: None,\n                             name: \"should_have_runnable_1\",\n-                            kind: COMMENT,\n+                            kind: DocTest,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -573,7 +577,7 @@ struct StructWithRunnable(String);\n                             full_range: 150..254,\n                             focus_range: None,\n                             name: \"should_have_runnable_2\",\n-                            kind: COMMENT,\n+                            kind: DocTest,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -593,7 +597,7 @@ struct StructWithRunnable(String);\n                             full_range: 756..821,\n                             focus_range: None,\n                             name: \"StructWithRunnable\",\n-                            kind: COMMENT,\n+                            kind: DocTest,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -639,7 +643,7 @@ impl Data {\n                                 4..8,\n                             ),\n                             name: \"main\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -655,7 +659,7 @@ impl Data {\n                             full_range: 44..98,\n                             focus_range: None,\n                             name: \"foo\",\n-                            kind: COMMENT,\n+                            kind: DocTest,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -696,7 +700,7 @@ mod test_mod {\n                                 5..13,\n                             ),\n                             name: \"test_mod\",\n-                            kind: MODULE,\n+                            kind: Module,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -716,7 +720,7 @@ mod test_mod {\n                                 35..44,\n                             ),\n                             name: \"test_foo1\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -776,7 +780,7 @@ mod root_tests {\n                                 26..40,\n                             ),\n                             name: \"nested_tests_0\",\n-                            kind: MODULE,\n+                            kind: Module,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -796,7 +800,7 @@ mod root_tests {\n                                 55..69,\n                             ),\n                             name: \"nested_tests_1\",\n-                            kind: MODULE,\n+                            kind: Module,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -816,7 +820,7 @@ mod root_tests {\n                                 107..121,\n                             ),\n                             name: \"nested_test_11\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -841,7 +845,7 @@ mod root_tests {\n                                 163..177,\n                             ),\n                             name: \"nested_test_12\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -866,7 +870,7 @@ mod root_tests {\n                                 206..220,\n                             ),\n                             name: \"nested_tests_2\",\n-                            kind: MODULE,\n+                            kind: Module,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -886,7 +890,7 @@ mod root_tests {\n                                 258..271,\n                             ),\n                             name: \"nested_test_2\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -929,7 +933,7 @@ fn test_foo1() {}\n                                 36..45,\n                             ),\n                             name: \"test_foo1\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,\n@@ -979,7 +983,7 @@ fn test_foo1() {}\n                                 58..67,\n                             ),\n                             name: \"test_foo1\",\n-                            kind: FN,\n+                            kind: Function,\n                             container_name: None,\n                             description: None,\n                             docs: None,"}, {"sha": "0aa6a076517e6cfbfb7502398317615d879f90a9", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -39,7 +39,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n     ast::{self, NameOwner},\n     match_ast, AstNode, Parse, SmolStr, SourceFile,\n-    SyntaxKind::{self, *},\n+    SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, TextRange, WalkEvent,\n };\n \n@@ -323,7 +323,7 @@ impl Query {\n                 let (start, end) = SymbolIndex::map_value_to_range(indexed_value.value);\n \n                 for symbol in &symbol_index.symbols[start..end] {\n-                    if self.only_types && !is_type(symbol.kind) {\n+                    if self.only_types && !symbol.kind.is_type() {\n                         continue;\n                     }\n                     if self.exact && symbol.name != self.query {\n@@ -341,23 +341,44 @@ impl Query {\n     }\n }\n \n-fn is_type(kind: SyntaxKind) -> bool {\n-    matches!(kind, STRUCT | ENUM | TRAIT | TYPE_ALIAS)\n-}\n-\n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FileSymbol {\n     pub file_id: FileId,\n     pub name: SmolStr,\n-    pub kind: SyntaxKind,\n+    pub kind: FileSymbolKind,\n     pub range: TextRange,\n     pub ptr: SyntaxNodePtr,\n     pub name_range: Option<TextRange>,\n     pub container_name: Option<SmolStr>,\n }\n \n+#[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n+pub enum FileSymbolKind {\n+    Function,\n+    Struct,\n+    Enum,\n+    Trait,\n+    Module,\n+    TypeAlias,\n+    Const,\n+    Static,\n+    Macro,\n+}\n+\n+impl FileSymbolKind {\n+    fn is_type(self: FileSymbolKind) -> bool {\n+        matches!(\n+            self,\n+            FileSymbolKind::Struct\n+                | FileSymbolKind::Enum\n+                | FileSymbolKind::Trait\n+                | FileSymbolKind::TypeAlias\n+        )\n+    }\n+}\n+\n fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec<FileSymbol> {\n     let mut symbols = Vec::new();\n     let mut stack = Vec::new();\n@@ -412,7 +433,18 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n     to_symbol(node).map(move |(name, ptr, name_range)| FileSymbol {\n         name,\n-        kind: node.kind(),\n+        kind: match node.kind() {\n+            FN => FileSymbolKind::Function,\n+            STRUCT => FileSymbolKind::Struct,\n+            ENUM => FileSymbolKind::Enum,\n+            TRAIT => FileSymbolKind::Trait,\n+            MODULE => FileSymbolKind::Module,\n+            TYPE_ALIAS => FileSymbolKind::TypeAlias,\n+            CONST => FileSymbolKind::Const,\n+            STATIC => FileSymbolKind::Static,\n+            MACRO_RULES => FileSymbolKind::Macro,\n+            kind => unreachable!(\"{:?}\", kind),\n+        },\n         range: node.text_range(),\n         ptr,\n         file_id,"}, {"sha": "404b350256a17b69f04c1e2c6cda55175840a1b8", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -9,7 +9,7 @@ use std::{\n \n use ide::{\n     CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n-    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n+    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, SymbolKind, TextEdit,\n };\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n@@ -27,7 +27,7 @@ use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n use stdx::{format_to, split_once};\n-use syntax::{algo, ast, AstNode, SyntaxKind, TextRange, TextSize};\n+use syntax::{algo, ast, AstNode, TextRange, TextSize};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -1037,10 +1037,10 @@ pub(crate) fn handle_code_lens(\n                 .filter(|it| {\n                     matches!(\n                         it.kind,\n-                        SyntaxKind::TRAIT\n-                            | SyntaxKind::STRUCT\n-                            | SyntaxKind::ENUM\n-                            | SyntaxKind::UNION\n+                        SymbolKind::Trait\n+                            | SymbolKind::Struct\n+                            | SymbolKind::Enum\n+                            | SymbolKind::Union\n                     )\n                 })\n                 .map(|it| {\n@@ -1263,7 +1263,7 @@ pub(crate) fn handle_call_hierarchy_prepare(\n     let RangeInfo { range: _, info: navs } = nav_info;\n     let res = navs\n         .into_iter()\n-        .filter(|it| it.kind == SyntaxKind::FN)\n+        .filter(|it| it.kind == SymbolKind::Function)\n         .map(|it| to_proto::call_hierarchy_item(&snap, it))\n         .collect::<Result<Vec<_>>>()?;\n "}, {"sha": "79caafe80b891d4ed704595ce2a00445a4303961", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55ba353b39db1e9d850f1df943ab6a16e7c15838/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=55ba353b39db1e9d850f1df943ab6a16e7c15838", "patch": "@@ -9,10 +9,9 @@ use ide::{\n     FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HighlightModifier, HighlightTag,\n     HighlightedRange, Indel, InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup,\n     NavigationTarget, ReferenceAccess, ResolvedAssist, Runnable, Severity, SourceChange,\n-    SourceFileEdit, TextEdit, TextRange, TextSize,\n+    SourceFileEdit, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n-use syntax::SyntaxKind;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec, global_state::GlobalStateSnapshot,\n@@ -30,21 +29,25 @@ pub(crate) fn range(line_index: &LineIndex, range: TextRange) -> lsp_types::Rang\n     lsp_types::Range::new(start, end)\n }\n \n-pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n-    match syntax_kind {\n-        SyntaxKind::FN => lsp_types::SymbolKind::Function,\n-        SyntaxKind::STRUCT => lsp_types::SymbolKind::Struct,\n-        SyntaxKind::ENUM => lsp_types::SymbolKind::Enum,\n-        SyntaxKind::VARIANT => lsp_types::SymbolKind::EnumMember,\n-        SyntaxKind::TRAIT => lsp_types::SymbolKind::Interface,\n-        SyntaxKind::MACRO_CALL => lsp_types::SymbolKind::Function,\n-        SyntaxKind::MODULE => lsp_types::SymbolKind::Module,\n-        SyntaxKind::TYPE_ALIAS => lsp_types::SymbolKind::TypeParameter,\n-        SyntaxKind::RECORD_FIELD => lsp_types::SymbolKind::Field,\n-        SyntaxKind::STATIC => lsp_types::SymbolKind::Constant,\n-        SyntaxKind::CONST => lsp_types::SymbolKind::Constant,\n-        SyntaxKind::IMPL => lsp_types::SymbolKind::Object,\n-        _ => lsp_types::SymbolKind::Variable,\n+pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n+    match symbol_kind {\n+        SymbolKind::Function => lsp_types::SymbolKind::Function,\n+        SymbolKind::Struct => lsp_types::SymbolKind::Struct,\n+        SymbolKind::Enum => lsp_types::SymbolKind::Enum,\n+        SymbolKind::Variant => lsp_types::SymbolKind::EnumMember,\n+        SymbolKind::Trait => lsp_types::SymbolKind::Interface,\n+        SymbolKind::Macro => lsp_types::SymbolKind::Function,\n+        SymbolKind::Module => lsp_types::SymbolKind::Module,\n+        SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TypeParameter,\n+        SymbolKind::Field => lsp_types::SymbolKind::Field,\n+        SymbolKind::Static => lsp_types::SymbolKind::Constant,\n+        SymbolKind::Const => lsp_types::SymbolKind::Constant,\n+        SymbolKind::Impl => lsp_types::SymbolKind::Object,\n+        SymbolKind::Local\n+        | SymbolKind::SelfParam\n+        | SymbolKind::LifetimeParam\n+        | SymbolKind::DocTest => lsp_types::SymbolKind::Variable,\n+        SymbolKind::Union => lsp_types::SymbolKind::Struct,\n     }\n }\n "}]}