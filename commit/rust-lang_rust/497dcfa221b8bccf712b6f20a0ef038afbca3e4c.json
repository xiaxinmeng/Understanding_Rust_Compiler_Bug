{"sha": "497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5N2RjZmEyMjFiOGJjY2Y3MTJiNmYyMGEwZWYwMzhhZmJjYTNlNGM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-22T16:35:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-23T10:42:14Z"}, "message": "Update ui tests", "tree": {"sha": "e1b75d3798c7d10c0b710f29207b56d90f5c9eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b75d3798c7d10c0b710f29207b56d90f5c9eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "html_url": "https://github.com/rust-lang/rust/commit/497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62838975d005b01c110a355a6e60cdedc08ecd48", "url": "https://api.github.com/repos/rust-lang/rust/commits/62838975d005b01c110a355a6e60cdedc08ecd48", "html_url": "https://github.com/rust-lang/rust/commit/62838975d005b01c110a355a6e60cdedc08ecd48"}], "stats": {"total": 196, "additions": 98, "deletions": 98}, "files": [{"sha": "40786c032b180f611ef8b7549f97446845c61a62", "filename": "src/test/ui/borrowck/two-phase-activation-sharing-interference.nll_target.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-activation-sharing-interference.nll_target.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:32:15\n+  --> $DIR/two-phase-activation-sharing-interference.rs:30:15\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:40:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:38:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -21,7 +21,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:51:13\n+  --> $DIR/two-phase-activation-sharing-interference.rs:49:13\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -32,7 +32,7 @@ LL |     *y += 1;\n    |     ------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/two-phase-activation-sharing-interference.rs:62:14\n+  --> $DIR/two-phase-activation-sharing-interference.rs:60:14\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here"}, {"sha": "f25cac5cddd474c5f5852b65ed1feda2c57a3fda", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-array-oob.rs:8:19\n+  --> $DIR/const-array-oob.rs:6:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n    |                   ^^^^^^ index out of bounds: the len is 3 but the index is 4"}, {"sha": "2284cfa8d685b9f0d730067665de5d037a261a73", "filename": "src/test/ui/deprecation/deprecation-in-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n warning: use of deprecated item 'deprecated_future': text\n-  --> $DIR/deprecation-in-future.rs:11:5\n+  --> $DIR/deprecation-in-future.rs:9:5\n    |\n LL |     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "cf0173dfad5cd53e347ce1e4423dfc5ea28917ea", "filename": "src/test/ui/derives/deriving-meta-unknown-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-unknown-trait.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error: cannot find derive macro `Eqr` in this scope\n-  --> $DIR/deriving-meta-unknown-trait.rs:3:10\n+  --> $DIR/deriving-meta-unknown-trait.rs:1:10\n    |\n LL | #[derive(Eqr)]\n    |          ^^^ help: try: `Eq`"}, {"sha": "198ebe9eb51f9383c264e600c1d8c5bf1f02a5c7", "filename": "src/test/ui/discrim/discrim-overflow-2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow-2.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:17:9\n+  --> $DIR/discrim-overflow-2.rs:15:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:26:9\n+  --> $DIR/discrim-overflow-2.rs:24:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:35:9\n+  --> $DIR/discrim-overflow-2.rs:33:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:44:9\n+  --> $DIR/discrim-overflow-2.rs:42:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:53:9\n+  --> $DIR/discrim-overflow-2.rs:51:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:62:9\n+  --> $DIR/discrim-overflow-2.rs:60:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:71:9\n+  --> $DIR/discrim-overflow-2.rs:69:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow-2.rs:80:9\n+  --> $DIR/discrim-overflow-2.rs:78:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "a2ae4863f9f79abe6e3c8ed35b077d7ab46b4c8b", "filename": "src/test/ui/discrim/discrim-overflow.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-overflow.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,61 +1,61 @@\n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:15:9\n+  --> $DIR/discrim-overflow.rs:13:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 127\n    |\n    = note: explicitly set `OhNo = -128` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:26:9\n+  --> $DIR/discrim-overflow.rs:24:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 255\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:37:9\n+  --> $DIR/discrim-overflow.rs:35:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 32767\n    |\n    = note: explicitly set `OhNo = -32768` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:48:9\n+  --> $DIR/discrim-overflow.rs:46:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 65535\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:60:9\n+  --> $DIR/discrim-overflow.rs:58:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 2147483647\n    |\n    = note: explicitly set `OhNo = -2147483648` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:72:9\n+  --> $DIR/discrim-overflow.rs:70:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 4294967295\n    |\n    = note: explicitly set `OhNo = 0` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:84:9\n+  --> $DIR/discrim-overflow.rs:82:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 9223372036854775807\n    |\n    = note: explicitly set `OhNo = -9223372036854775808` if that is desired outcome\n \n error[E0370]: enum discriminant overflowed\n-  --> $DIR/discrim-overflow.rs:96:9\n+  --> $DIR/discrim-overflow.rs:94:9\n    |\n LL |         OhNo,\n    |         ^^^^ overflowed on value after 18446744073709551615"}, {"sha": "508d5df2a7160cc59ff9c4fe189e06732c91f0b4", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,11 +1,11 @@\n error: type annotations needed\n-  --> $DIR/edition-raw-pointer-method-2015.rs:10:15\n+  --> $DIR/edition-raw-pointer-method-2015.rs:9:15\n    |\n LL |     let _ = y.is_null();\n    |               ^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/edition-raw-pointer-method-2015.rs:6:8\n+  --> $DIR/edition-raw-pointer-method-2015.rs:5:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^"}, {"sha": "23452495b4bc6fbe84ca9e2e6934cde63721b5ab", "filename": "src/test/ui/editions/edition-raw-pointer-method-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0699]: the type of this value must be known to call a method on a raw pointer on it\n-  --> $DIR/edition-raw-pointer-method-2018.rs:10:15\n+  --> $DIR/edition-raw-pointer-method-2018.rs:9:15\n    |\n LL |     let _ = y.is_null();\n    |               ^^^^^^^"}, {"sha": "a68b3af5aaf76be695286389958e6c803ea837c2", "filename": "src/test/ui/error-codes/E0375.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0375.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0375]: implementing the trait `CoerceUnsized` requires multiple coercions\n-  --> $DIR/E0375.rs:12:12\n+  --> $DIR/E0375.rs:10:12\n    |\n LL | impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^ requires multiple coercions"}, {"sha": "72e414eab9248aedbd831511d741abb53765afaa", "filename": "src/test/ui/feature-gates/feature-gate-ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_returns_twice.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the `#[ffi_returns_twice]` attribute is an experimental feature\n-  --> $DIR/feature-gate-ffi_returns_twice.rs:5:5\n+  --> $DIR/feature-gate-ffi_returns_twice.rs:4:5\n    |\n LL |     #[ffi_returns_twice]\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "862892e27be98a1b3e82b22a33bda6956b33532c", "filename": "src/test/ui/ffi_returns_twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_returns_twice.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0724]: `#[ffi_returns_twice]` may only be used on foreign functions\n-  --> $DIR/ffi_returns_twice.rs:5:1\n+  --> $DIR/ffi_returns_twice.rs:4:1\n    |\n LL | #[ffi_returns_twice]\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "61450d3203cd876830e14d34858be9b4b383a610", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,29 +1,29 @@\n error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:14:16\n+  --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:14:1\n+  --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:23:16\n+  --> $DIR/auto-trait-leak.rs:21:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:23:1\n+  --> $DIR/auto-trait-leak.rs:21:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:3:1\n+  --> $DIR/auto-trait-leak.rs:1:1\n    |\n LL | / use std::cell::Cell;\n LL | | use std::rc::Rc;\n@@ -35,30 +35,30 @@ LL | | }\n    | |_^\n \n error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n-  --> $DIR/auto-trait-leak.rs:14:16\n+  --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n    |\n note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:14:1\n+  --> $DIR/auto-trait-leak.rs:12:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{opaque}}#0`...\n-  --> $DIR/auto-trait-leak.rs:23:16\n+  --> $DIR/auto-trait-leak.rs:21:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:23:1\n+  --> $DIR/auto-trait-leak.rs:21:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n-  --> $DIR/auto-trait-leak.rs:3:1\n+  --> $DIR/auto-trait-leak.rs:1:1\n    |\n LL | / use std::cell::Cell;\n LL | | use std::rc::Rc;\n@@ -70,15 +70,15 @@ LL | | }\n    | |_^\n \n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:17:5\n+  --> $DIR/auto-trait-leak.rs:15:5\n    |\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n    |\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`\n note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:6:1\n+  --> $DIR/auto-trait-leak.rs:4:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "19899ff83f7c30310592c2d4103490ed55b06ca3", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,29 +1,29 @@\n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:15:5\n+  --> $DIR/auto-trait-leak2.rs:13:5\n    |\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:9:5: 9:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:12:1\n+  --> $DIR/auto-trait-leak2.rs:10:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:18:5\n+  --> $DIR/auto-trait-leak2.rs:16:5\n    |\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:26:5: 26:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n+   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:12:1\n+  --> $DIR/auto-trait-leak2.rs:10:1\n    |\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "afb3376638a96f9373570e19af0718c7bc82ebd4", "filename": "src/test/ui/impl-trait/method-suggestion-no-duplication.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmethod-suggestion-no-duplication.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `is_empty` found for type `Foo` in the current scope\n-  --> $DIR/method-suggestion-no-duplication.rs:9:15\n+  --> $DIR/method-suggestion-no-duplication.rs:7:15\n    |\n LL | struct Foo;\n    | ----------- method `is_empty` not found for this"}, {"sha": "7655e0811e066b4f0cd5b7b11d8e0fc06d33e783", "filename": "src/test/ui/issues/issue-21950.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21950.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,13 +1,13 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-21950.rs:7:14\n+  --> $DIR/issue-21950.rs:5:14\n    |\n LL |             &Add;\n    |              ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-21950.rs:7:14\n+  --> $DIR/issue-21950.rs:5:14\n    |\n LL |             &Add;\n    |              ^^^ associated type `Output` must be specified"}, {"sha": "f21551a55bc9a0732d6681fe28e141cfcf9d8f71", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0393]: the type parameter `T` must be explicitly specified\n-  --> $DIR/issue-22370.rs:5:10\n+  --> $DIR/issue-22370.rs:3:10\n    |\n LL | fn f(a: &A) {}\n    |          ^ missing reference to `T`"}, {"sha": "5a056dff590feebdbed4e16e51bdeafbbd6f4def", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,27 +1,27 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:5:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n LL | type Test = Add +\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:8:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n LL |             Sub;\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/issue-22560.rs:8:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n LL |             Sub;\n    |             ^^^ non-auto additional trait\n \n error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n-  --> $DIR/issue-22560.rs:5:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n LL |   type Test = Add +\n    |  _____________^"}, {"sha": "319aa2a5cce9eb50ce24795ab30b3fca2a0c9c23", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,4 +1,4 @@\n-//~^^ ERROR\n+//~ ERROR\n \n #![feature(optin_builtin_traits)]\n "}, {"sha": "1103de0d91043802d61b4674962c2b7eb135d342", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:7:1\n+  --> $DIR/issue-23080-2.rs:5:1\n    |\n LL | / unsafe auto trait Trait {\n LL | |"}, {"sha": "91c27217324269672ab0f74ff7ff419ec69e0b5b", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:5:1\n+  --> $DIR/issue-23080.rs:3:1\n    |\n LL | / unsafe auto trait Trait {\n LL | |"}, {"sha": "e540d4e8192428ad76842dba27b045a4539898ca", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-23281.rs:6:5\n+  --> $DIR/issue-23281.rs:4:5\n    |\n LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "e0cb1f7b96df8c3b84a01dc20aa9b522cf118b4e", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:16:9\n+  --> $DIR/issue-59488.rs:14:9\n    |\n LL |     foo > 12;\n    |     --- ^ -- {integer}\n@@ -8,7 +8,7 @@ LL |     foo > 12;\n    |     help: you might have forgotten to call this function: `foo()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:16:11\n+  --> $DIR/issue-59488.rs:14:11\n    |\n LL |     foo > 12;\n    |           ^^ expected fn item, found integer\n@@ -17,7 +17,7 @@ LL |     foo > 12;\n               found type `i32`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn(i64) -> i64 {bar}`\n-  --> $DIR/issue-59488.rs:20:9\n+  --> $DIR/issue-59488.rs:18:9\n    |\n LL |     bar > 13;\n    |     --- ^ -- {integer}\n@@ -26,7 +26,7 @@ LL |     bar > 13;\n    |     help: you might have forgotten to call this function: `bar( /* arguments */ )`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:20:11\n+  --> $DIR/issue-59488.rs:18:11\n    |\n LL |     bar > 13;\n    |           ^^ expected fn item, found integer\n@@ -35,7 +35,7 @@ LL |     bar > 13;\n               found type `i64`\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:24:9\n+  --> $DIR/issue-59488.rs:22:9\n    |\n LL |     foo > foo;\n    |     --- ^ --- fn() -> i32 {foo}\n@@ -51,7 +51,7 @@ LL |     foo > foo();\n    |           ^^^^^\n \n error[E0369]: binary operation `>` cannot be applied to type `fn() -> i32 {foo}`\n-  --> $DIR/issue-59488.rs:27:9\n+  --> $DIR/issue-59488.rs:25:9\n    |\n LL |     foo > bar;\n    |     --- ^ --- fn(i64) -> i64 {bar}\n@@ -61,7 +61,7 @@ LL |     foo > bar;\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() -> i32 {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-59488.rs:27:11\n+  --> $DIR/issue-59488.rs:25:11\n    |\n LL |     foo > bar;\n    |           ^^^ expected fn item, found a different fn item\n@@ -70,7 +70,7 @@ LL |     foo > bar;\n               found type `fn(i64) -> i64 {bar}`\n \n error[E0369]: binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,7 +82,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n@@ -93,7 +93,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n-  --> $DIR/issue-59488.rs:32:5\n+  --> $DIR/issue-59488.rs:30:5\n    |\n LL |     assert_eq!(Foo::Bar, i);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`"}, {"sha": "448cc953d40adac7d35c97d8e185f2862a3c9ee8", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:7:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n@@ -12,7 +12,7 @@ LL | impl Foo for dyn Send + Send {}\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:13:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n@@ -24,7 +24,7 @@ LL | impl Foo for dyn Sync + Send {}\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/lint-incoherent-auto-trait-objects.rs:17:1\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n    |\n LL | impl Foo for dyn Sync + Send {}\n    | ---------------------------- first implementation here"}, {"sha": "e28b22035f5d4c67e0dfc1291c4d58be1952e472", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of borrowed content\n-  --> $DIR/moves-based-on-type-block-bad.rs:24:19\n+  --> $DIR/moves-based-on-type-block-bad.rs:22:19\n    |\n LL |             match hellothere.x {\n    |                   ^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            - data moved here\n    |\n note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-  --> $DIR/moves-based-on-type-block-bad.rs:27:28\n+  --> $DIR/moves-based-on-type-block-bad.rs:25:28\n    |\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            ^"}, {"sha": "25a65460071da4efd600e61b5fecf57ab59d7843", "filename": "src/test/ui/on-unimplemented/slice-index.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fslice-index.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the type `[i32]` cannot be indexed by `i32`\n-  --> $DIR/slice-index.rs:11:5\n+  --> $DIR/slice-index.rs:8:5\n    |\n LL |     x[1i32];\n    |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n@@ -8,7 +8,7 @@ LL |     x[1i32];\n    = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `[i32]`\n \n error[E0277]: the type `[i32]` cannot be indexed by `std::ops::RangeTo<i32>`\n-  --> $DIR/slice-index.rs:12:5\n+  --> $DIR/slice-index.rs:9:5\n    |\n LL |     x[..1i32];\n    |     ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`"}, {"sha": "b049d8a4ab3c31b1dc67e7ea4cc3ce04a39e6e84", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,13 +1,13 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:10:5\n+  --> $DIR/dont-infer-static.rs:8:5\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound `U: 'static`...\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^\n    |\n note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/dont-infer-static.rs:10:5\n+  --> $DIR/dont-infer-static.rs:8:5\n    |\n LL |     bar: Bar<U>\n    |     ^^^^^^^^^^^"}, {"sha": "dd56c1f79c71230e5cfdb5f9729ec483c9e6398d", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/enum.rs:9:1\n+  --> $DIR/enum.rs:7:1\n    |\n LL | / enum Foo<'a, T> {\n LL | |     One(Bar<'a, T>)\n@@ -9,7 +9,7 @@ LL | | }\n    = note: T : 'a\n \n error: rustc_outlives\n-  --> $DIR/enum.rs:15:1\n+  --> $DIR/enum.rs:13:1\n    |\n LL | / struct Bar<'b, U> {\n LL | |     field2: &'b U\n@@ -19,7 +19,7 @@ LL | | }\n    = note: U : 'b\n \n error: rustc_outlives\n-  --> $DIR/enum.rs:21:1\n+  --> $DIR/enum.rs:19:1\n    |\n LL | / enum Ying<'c, K> {\n LL | |     One(&'c Yang<K>)"}, {"sha": "4827e9ddd50fd4eeb1ceb2427307a1ec90a6c2ac", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0046]: not all trait items implemented, missing: `Target`\n-  --> $DIR/issue-24356.rs:20:9\n+  --> $DIR/issue-24356.rs:18:9\n    |\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation"}, {"sha": "614638752f166590a16fc5ac86ae991cfa268cb3", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,24 +1,24 @@\n error[E0599]: no method named `f9` found for type `usize` in the current scope\n-  --> $DIR/issue-7575.rs:64:18\n+  --> $DIR/issue-7575.rs:62:18\n    |\n LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |                  ^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: candidate #1 is defined in the trait `CtxtFn`\n-  --> $DIR/issue-7575.rs:6:5\n+  --> $DIR/issue-7575.rs:4:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `CtxtFn::f9(u, 342)` instead\n note: candidate #2 is defined in the trait `OtherTrait`\n-  --> $DIR/issue-7575.rs:10:5\n+  --> $DIR/issue-7575.rs:8:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `OtherTrait::f9(u, 342)` instead\n note: candidate #3 is defined in the trait `UnusedTrait`\n-  --> $DIR/issue-7575.rs:19:5\n+  --> $DIR/issue-7575.rs:17:5\n    |\n LL |     fn f9(_: usize) -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ LL |     fn f9(_: usize) -> usize;\n            candidate #3: `UnusedTrait`\n \n error[E0599]: no method named `fff` found for type `Myisize` in the current scope\n-  --> $DIR/issue-7575.rs:64:30\n+  --> $DIR/issue-7575.rs:62:30\n    |\n LL | struct Myisize(isize);\n    | ---------------------- method `fff` not found for this\n@@ -43,20 +43,20 @@ LL |     u.f8(42) + u.f9(342) + m.fff(42)\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in an impl for the type `Myisize`\n-  --> $DIR/issue-7575.rs:41:5\n+  --> $DIR/issue-7575.rs:39:5\n    |\n LL |     fn fff(i: isize) -> isize {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0599]: no method named `is_str` found for type `T` in the current scope\n-  --> $DIR/issue-7575.rs:72:7\n+  --> $DIR/issue-7575.rs:70:7\n    |\n LL |     t.is_str()\n    |       ^^^^^^ this is an associated function, not a method\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `ManyImplTrait`\n-  --> $DIR/issue-7575.rs:47:5\n+  --> $DIR/issue-7575.rs:45:5\n    |\n LL |     fn is_str() -> bool {\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "7e6fbe1600d1ed2e74066bc17189ec9f3bbb2bbc", "filename": "src/test/ui/stability-attribute/stability-attribute-issue.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-issue.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'unstable_test_feature'\n-  --> $DIR/stability-attribute-issue.rs:10:5\n+  --> $DIR/stability-attribute-issue.rs:8:5\n    |\n LL |     unstable();\n    |     ^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     unstable();\n    = help: add #![feature(unstable_test_feature)] to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_test_feature': message\n-  --> $DIR/stability-attribute-issue.rs:12:5\n+  --> $DIR/stability-attribute-issue.rs:10:5\n    |\n LL |     unstable_msg();\n    |     ^^^^^^^^^^^^"}, {"sha": "4d435bf4e8b249c9b23bc5e18eb7c46db4e7a55b", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/497dcfa221b8bccf712b6f20a0ef038afbca3e4c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=497dcfa221b8bccf712b6f20a0ef038afbca3e4c", "patch": "@@ -1,40 +1,40 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:35:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:5\n    |\n LL |     is_sync::<MyNotSync>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `MyNotSync`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:38:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<u8>`\n    = note: required because it appears within the type `MyTypeWUnsafe`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Managed` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:41:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `std::marker::Sync` is not implemented for `Managed`\n    = note: required because it appears within the type `MyTypeManaged`\n note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:31:1\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n    |\n LL | fn is_sync<T: Sync>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}