{"sha": "e93635325b52eb79b5c279d2fad4b325dd44876a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MzYzNTMyNWI1MmViNzliNWMyNzlkMmZhZDRiMzI1ZGQ0NDg3NmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-20T13:59:00Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-20T14:18:22Z"}, "message": "Properly scope label resolution", "tree": {"sha": "17cf05fff36d5c666e5a8dfbed0327f3636d7adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17cf05fff36d5c666e5a8dfbed0327f3636d7adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e93635325b52eb79b5c279d2fad4b325dd44876a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e93635325b52eb79b5c279d2fad4b325dd44876a", "html_url": "https://github.com/rust-lang/rust/commit/e93635325b52eb79b5c279d2fad4b325dd44876a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e93635325b52eb79b5c279d2fad4b325dd44876a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e832b83feebeeec5465504ba048f72b5e84253d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e832b83feebeeec5465504ba048f72b5e84253d", "html_url": "https://github.com/rust-lang/rust/commit/3e832b83feebeeec5465504ba048f72b5e84253d"}], "stats": {"total": 151, "additions": 115, "deletions": 36}, "files": [{"sha": "313f4af762f4ac376b19ada848521e6b8a771ba5", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e93635325b52eb79b5c279d2fad4b325dd44876a", "patch": "@@ -103,7 +103,6 @@ pub struct LoweringContext<'a> {\n     loop_scopes: Vec<NodeId>,\n     is_in_loop_condition: bool,\n     is_in_trait_impl: bool,\n-    is_in_anon_const: bool,\n \n     /// What to do when we encounter either an \"anonymous lifetime\n     /// reference\". The term \"anonymous\" is meant to encompass both\n@@ -231,7 +230,6 @@ pub fn lower_crate(\n         node_id_to_hir_id: IndexVec::new(),\n         is_generator: false,\n         is_in_trait_impl: false,\n-        is_in_anon_const: false,\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n@@ -970,26 +968,22 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n-        let target_id = if self.is_in_anon_const {\n-            Err(hir::LoopIdError::OutsideLoopScope)\n-        } else {\n-            match destination {\n-                Some((id, _)) => {\n-                    if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                        Ok(self.lower_node_id(loop_id).node_id)\n-                    } else {\n-                        Err(hir::LoopIdError::UnresolvedLabel)\n-                    }\n-                }\n-                None => {\n-                    self.loop_scopes\n-                        .last()\n-                        .map(|innermost_loop_id| *innermost_loop_id)\n-                        .map(|id| Ok(self.lower_node_id(id).node_id))\n-                        .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                        .into()\n+        let target_id = match destination {\n+            Some((id, _)) => {\n+                if let Def::Label(loop_id) = self.expect_full_def(id) {\n+                    Ok(self.lower_node_id(loop_id).node_id)\n+                } else {\n+                    Err(hir::LoopIdError::UnresolvedLabel)\n                 }\n             }\n+            None => {\n+                self.loop_scopes\n+                    .last()\n+                    .map(|innermost_loop_id| *innermost_loop_id)\n+                    .map(|id| Ok(self.lower_node_id(id).node_id))\n+                    .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n+                    .into()\n+            }\n         };\n         hir::Destination {\n             label: self.lower_label(destination.map(|(_, label)| label)),\n@@ -3448,22 +3442,14 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n-        let was_in_loop_condition = self.is_in_loop_condition;\n-        self.is_in_loop_condition = false;\n-        let was_in_anon_const = self.is_in_anon_const;\n-        self.is_in_anon_const = true;\n-\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(c.id);\n-        let anon_const = hir::AnonConst {\n-            id: node_id,\n-            hir_id,\n-            body: self.lower_body(None, |this| this.lower_expr(&c.value)),\n-        };\n-\n-        self.is_in_anon_const = was_in_anon_const;\n-        self.is_in_loop_condition = was_in_loop_condition;\n-\n-        anon_const\n+        self.with_new_scopes(|this| {\n+            let LoweredNodeId { node_id, hir_id } = this.lower_node_id(c.id);\n+            hir::AnonConst {\n+                id: node_id,\n+                hir_id,\n+                body: this.lower_body(None, |this| this.lower_expr(&c.value)),\n+            }\n+        })\n     }\n \n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {"}, {"sha": "f3e8a04e2ee354bbe5e6025df6e7461f52e5a2a8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e93635325b52eb79b5c279d2fad4b325dd44876a", "patch": "@@ -2358,7 +2358,9 @@ impl<'a> Resolver<'a> {\n         where F: FnOnce(&mut Resolver)\n     {\n         self.ribs[ValueNS].push(Rib::new(ConstantItemRibKind));\n+        self.label_ribs.push(Rib::new(ConstantItemRibKind));\n         f(self);\n+        self.label_ribs.pop();\n         self.ribs[ValueNS].pop();\n     }\n "}, {"sha": "755dc153d405201c301cf6307e29c8d7171c1d48", "filename": "src/test/ui/const-eval/issue-52442.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.rs?ref=e93635325b52eb79b5c279d2fad4b325dd44876a", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n+}"}, {"sha": "586c9fa22cecdf279bda354dcd8d973a1d3639a4", "filename": "src/test/ui/const-eval/issue-52442.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52442.stderr?ref=e93635325b52eb79b5c279d2fad4b325dd44876a", "patch": "@@ -0,0 +1,9 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52442.rs:12:14\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n+   |              ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "2ae94f6d6420a95564709045d149ba457f9bac93", "filename": "src/test/ui/const-eval/issue-52443.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.rs?ref=e93635325b52eb79b5c279d2fad4b325dd44876a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+    [(); loop { break }]; //~ ERROR mismatched types\n+    [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n+    [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+    //~^ ERROR constant contains unimplemented expression type\n+    //~| ERROR could not evaluate repeat length\n+}"}, {"sha": "3a145ba78d9b1b082e9ef3b564a9daa23a0b4da2", "filename": "src/test/ui/const-eval/issue-52443.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e93635325b52eb79b5c279d2fad4b325dd44876a/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-52443.stderr?ref=e93635325b52eb79b5c279d2fad4b325dd44876a", "patch": "@@ -0,0 +1,51 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:12:10\n+   |\n+LL |     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected usize, found reference\n+   |          help: consider removing the borrow: `{ loop { continue } }`\n+   |\n+   = note: expected type `usize`\n+              found type `&_`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:13:17\n+   |\n+LL |     [(); loop { break }]; //~ ERROR mismatched types\n+   |                 ^^^^^ expected (), found usize\n+   |\n+   = note: expected type `()`\n+              found type `usize`\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52443.rs:14:11\n+   |\n+LL |     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n+   |           ^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^\n+\n+error[E0080]: could not evaluate repeat length\n+  --> $DIR/issue-52443.rs:15:10\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |          ^^^^^^^^^^^--------^^^^^^^\n+   |                     |\n+   |                     calling non-const fn `<I as std::iter::IntoIterator><std::ops::RangeFrom<usize>>::into_iter`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0015, E0019, E0080, E0308.\n+For more information about an error, try `rustc --explain E0015`."}]}