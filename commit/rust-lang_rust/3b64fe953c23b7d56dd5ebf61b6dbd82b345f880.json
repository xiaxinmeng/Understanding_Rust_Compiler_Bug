{"sha": "3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "node_id": "C_kwDOAAsO6NoAKDNiNjRmZTk1M2MyM2I3ZDU2ZGQ1ZWJmNjFiNmRiZDgyYjM0NWY4ODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T04:21:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T04:21:38Z"}, "message": "Auto merge of #96923 - eholk:fix-fake-read, r=nikomatsakis\n\nDrop Tracking: Implement `fake_read` callback\n\nThis PR updates drop tracking's use of `ExprUseVisitor` so that we treat `fake_read` events as borrows. Without doing this, we were not handling match expressions correctly, which showed up as a breakage in the `addassign-yield.rs` test. We did not previously notice this because we still had rather large temporary scopes that we held borrows for, which changed in #94309.\n\nThis PR also includes a variant of the `addassign-yield.rs` test case to make sure we continue to have correct behavior here with drop tracking.\n\nr? `@nikomatsakis`", "tree": {"sha": "41d4748d3e4d3c55a7e599be6f665b7bb63988a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41d4748d3e4d3c55a7e599be6f665b7bb63988a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "html_url": "https://github.com/rust-lang/rust/commit/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a86c7907b1e34d14d742fa4c4202626bb77eddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a86c7907b1e34d14d742fa4c4202626bb77eddc", "html_url": "https://github.com/rust-lang/rust/commit/4a86c7907b1e34d14d742fa4c4202626bb77eddc"}, {"sha": "bf21a81b1541a420566fc81f8a1dde5486008387", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf21a81b1541a420566fc81f8a1dde5486008387", "html_url": "https://github.com/rust-lang/rust/commit/bf21a81b1541a420566fc81f8a1dde5486008387"}], "stats": {"total": 162, "additions": 115, "deletions": 47}, "files": [{"sha": "b22b791f629d7485a685f589911feef4ff79ff07", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 47, "deletions": 34, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -77,38 +77,8 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n         }\n         self.places.consumed.get_mut(&consumer).map(|places| places.insert(target));\n     }\n-}\n-\n-impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n-    fn consume(\n-        &mut self,\n-        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        diag_expr_id: HirId,\n-    ) {\n-        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n-            Some(parent) => parent,\n-            None => place_with_id.hir_id,\n-        };\n-        debug!(\n-            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n-            place_with_id, diag_expr_id, parent\n-        );\n-        place_with_id\n-            .try_into()\n-            .map_or((), |tracked_value| self.mark_consumed(parent, tracked_value));\n-    }\n-\n-    fn borrow(\n-        &mut self,\n-        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n-        diag_expr_id: HirId,\n-        bk: rustc_middle::ty::BorrowKind,\n-    ) {\n-        debug!(\n-            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n-            borrow_kind={bk:?}\"\n-        );\n \n+    fn borrow_place(&mut self, place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>) {\n         self.places\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n@@ -158,6 +128,40 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n             self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n         }\n     }\n+}\n+\n+impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n+    fn consume(\n+        &mut self,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n+    ) {\n+        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n+            Some(parent) => parent,\n+            None => place_with_id.hir_id,\n+        };\n+        debug!(\n+            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n+            place_with_id, diag_expr_id, parent\n+        );\n+        place_with_id\n+            .try_into()\n+            .map_or((), |tracked_value| self.mark_consumed(parent, tracked_value));\n+    }\n+\n+    fn borrow(\n+        &mut self,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n+        bk: rustc_middle::ty::BorrowKind,\n+    ) {\n+        debug!(\n+            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n+            borrow_kind={bk:?}\"\n+        );\n+\n+        self.borrow_place(place_with_id);\n+    }\n \n     fn copy(\n         &mut self,\n@@ -208,9 +212,18 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n \n     fn fake_read(\n         &mut self,\n-        _place: expr_use_visitor::Place<'tcx>,\n-        _cause: rustc_middle::mir::FakeReadCause,\n-        _diag_expr_id: HirId,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        cause: rustc_middle::mir::FakeReadCause,\n+        diag_expr_id: HirId,\n     ) {\n+        debug!(\n+            \"fake_read place_with_id={place_with_id:?}; cause={cause:?}; diag_expr_id={diag_expr_id:?}\"\n+        );\n+\n+        // fake reads happen in places like the scrutinee of a match expression.\n+        // we treat those as a borrow, much like a copy: the idea is that we are\n+        // transiently creating a `&T` ref that we can read from to observe the current\n+        // value (this `&T` is immediately dropped afterwards).\n+        self.borrow_place(place_with_id);\n     }\n }"}, {"sha": "f57d57610518599e69220a04bb5b255c63086273", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -1755,14 +1755,19 @@ struct InferBorrowKind<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n-    fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId) {\n-        let PlaceBase::Upvar(_) = place.base else { return };\n+    fn fake_read(\n+        &mut self,\n+        place: &PlaceWithHirId<'tcx>,\n+        cause: FakeReadCause,\n+        diag_expr_id: hir::HirId,\n+    ) {\n+        let PlaceBase::Upvar(_) = place.place.base else { return };\n \n         // We need to restrict Fake Read precision to avoid fake reading unsafe code,\n         // such as deref of a raw pointer.\n         let dummy_capture_kind = ty::UpvarCapture::ByRef(ty::BorrowKind::ImmBorrow);\n \n-        let (place, _) = restrict_capture_precision(place, dummy_capture_kind);\n+        let (place, _) = restrict_capture_precision(place.place.clone(), dummy_capture_kind);\n \n         let (place, _) = restrict_repr_packed_field_ref_capture(\n             self.fcx.tcx,"}, {"sha": "3ebb1dd83e127a11f7978afa0958b80dbdecb787", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -70,7 +70,12 @@ pub trait Delegate<'tcx> {\n     }\n \n     /// The `place` should be a fake read because of specified `cause`.\n-    fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId);\n+    fn fake_read(\n+        &mut self,\n+        place_with_id: &PlaceWithHirId<'tcx>,\n+        cause: FakeReadCause,\n+        diag_expr_id: hir::HirId,\n+    );\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -328,7 +333,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     };\n \n                     self.delegate.fake_read(\n-                        discr_place.place.clone(),\n+                        &discr_place,\n                         FakeReadCause::ForMatchedPlace(closure_def_id),\n                         discr_place.hir_id,\n                     );\n@@ -618,7 +623,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         };\n \n         self.delegate.fake_read(\n-            discr_place.place.clone(),\n+            discr_place,\n             FakeReadCause::ForMatchedPlace(closure_def_id),\n             discr_place.hir_id,\n         );\n@@ -642,7 +647,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         };\n \n         self.delegate.fake_read(\n-            discr_place.place.clone(),\n+            discr_place,\n             FakeReadCause::ForLet(closure_def_id),\n             discr_place.hir_id,\n         );\n@@ -777,7 +782,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         );\n                     }\n                 };\n-                self.delegate.fake_read(fake_read.clone(), *cause, *hir_id);\n+                self.delegate.fake_read(\n+                    &PlaceWithHirId { place: fake_read.clone(), hir_id: *hir_id },\n+                    *cause,\n+                    *hir_id,\n+                );\n             }\n         }\n "}, {"sha": "71cfb170bf6aa37adcf426d280deec067e6ba0c3", "filename": "src/test/ui/generator/drop-track-addassign-yield.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftest%2Fui%2Fgenerator%2Fdrop-track-addassign-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftest%2Fui%2Fgenerator%2Fdrop-track-addassign-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-track-addassign-yield.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+// compile-flags: -Zdrop-tracking\n+\n+// Based on addassign-yield.rs, but with drop tracking enabled. Originally we did not implement\n+// the fake_read callback on ExprUseVisitor which caused this case to break.\n+\n+#![feature(generators)]\n+\n+fn foo() {\n+    let _y = static || {\n+        let x = &mut 0;\n+        *{\n+            yield;\n+            x\n+        } += match String::new() {\n+            _ => 0,\n+        };\n+    };\n+\n+    // Please don't ever actually write something like this\n+    let _z = static || {\n+        let x = &mut 0;\n+        *{\n+            let inner = &mut 1;\n+            *{\n+                yield ();\n+                inner\n+            } += match String::new() {\n+                _ => 1,\n+            };\n+            yield;\n+            x\n+        } += match String::new() {\n+            _ => 2,\n+        };\n+    };\n+}\n+\n+fn main() {\n+    foo()\n+}"}, {"sha": "807ecd2ddd16e0d2d9d8cdb6e838146c9cfe290f", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "d20df83045589e024e3e2905344fb287c2fb82d0", "filename": "src/tools/clippy/clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "303ce7a5075aa530348be1258ecc991ba566181f", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -343,5 +343,5 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }"}, {"sha": "db5299c2c05f4fa3f91a4fa1439a894d4e92154d", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -1033,7 +1033,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n \n     fn mutate(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n #[cfg(test)]"}, {"sha": "b7b9d54d0b2c1a7efb09207694fac8f8cf051754", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b64fe953c23b7d56dd5ebf61b6dbd82b345f880/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=3b64fe953c23b7d56dd5ebf61b6dbd82b345f880", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n         self.update(cmt);\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(&mut self, _: &rustc_typeck::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n pub struct ParamBindingIdCollector {"}]}