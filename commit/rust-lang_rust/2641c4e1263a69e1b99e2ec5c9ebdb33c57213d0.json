{"sha": "2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDFjNGUxMjYzYTY5ZTFiOTllMmVjNWM5ZWJkYjMzYzU3MjEzZDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-15T23:11:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-15T23:11:23Z"}, "message": "Merge pull request #670 from Manishearth/better-ice-fix\n\nMake derive lint handle generics correctly", "tree": {"sha": "caf423bbc42e95263b4ae0a6f68777da798cf192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf423bbc42e95263b4ae0a6f68777da798cf192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "html_url": "https://github.com/rust-lang/rust/commit/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd35b9e38d3520b59eb5ef219cec0f17f7d12f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd35b9e38d3520b59eb5ef219cec0f17f7d12f91", "html_url": "https://github.com/rust-lang/rust/commit/cd35b9e38d3520b59eb5ef219cec0f17f7d12f91"}, {"sha": "570b9635354c8d41711f464bcaeb6a7128d1cc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/570b9635354c8d41711f464bcaeb6a7128d1cc2a", "html_url": "https://github.com/rust-lang/rust/commit/570b9635354c8d41711f464bcaeb6a7128d1cc2a"}], "stats": {"total": 70, "additions": 27, "deletions": 43}, "files": [{"sha": "e88167312198099d7123229c89c911baa9116dbc", "filename": "src/derive.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "patch": "@@ -1,4 +1,5 @@\n use rustc::lint::*;\n+use rustc::middle::subst::Subst;\n use rustc::middle::ty::TypeVariants;\n use rustc::middle::ty::fast_reject::simplify_type;\n use rustc::middle::ty;\n@@ -70,16 +71,14 @@ impl LintPass for Derive {\n \n impl LateLintPass for Derive {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n-        let ast_ty_to_ty_cache = cx.tcx.ast_ty_to_ty_cache.borrow();\n-\n         if_let_chain! {[\n-            let ItemImpl(_, _, ref ast_generics, Some(ref trait_ref), ref ast_ty, _) = item.node,\n-            let Some(&ty) = ast_ty_to_ty_cache.get(&ast_ty.id)\n+            let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node\n         ], {\n+            let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n             if item.attrs.iter().any(is_automatically_derived) {\n                 check_hash_peq(cx, item.span, trait_ref, ty);\n             }\n-            else if !ast_generics.is_lt_parameterized() {\n+            else {\n                 check_copy_clone(cx, item, trait_ref, ty);\n             }\n         }}\n@@ -132,8 +131,9 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>,\n                               trait_ref: &TraitRef, ty: ty::Ty<'tcx>) {\n     if match_path(&trait_ref.path, &CLONE_TRAIT_PATH) {\n         let parameter_environment = ty::ParameterEnvironment::for_item(cx.tcx, item.id);\n+        let subst_ty = ty.subst(cx.tcx, &parameter_environment.free_substs);\n \n-        if ty.moves_by_default(&parameter_environment, item.span) {\n+        if subst_ty.moves_by_default(&parameter_environment, item.span) {\n             return; // ty is not Copy\n         }\n "}, {"sha": "b71d2ffd7a22104d0aedc9c85b58785a55a17217", "filename": "src/methods.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "patch": "@@ -366,7 +366,7 @@ impl LateLintPass for MethodsPass {\n             return;\n         }\n \n-        if let ItemImpl(_, _, _, None, ref ty, ref items) = item.node {\n+        if let ItemImpl(_, _, _, None, _, ref items) = item.node {\n             for implitem in items {\n                 let name = implitem.name;\n                 if let ImplItemKind::Method(ref sig, _) = implitem.node {\n@@ -387,6 +387,7 @@ impl LateLintPass for MethodsPass {\n                     }\n \n                     // check conventions w.r.t. conversion method names and predicates\n+                    let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n                     let is_copy = is_copy(cx, &ty, &item);\n                     for &(ref conv, self_kinds) in &CONVENTIONS {\n                         if conv.check(&name.as_str()) &&\n@@ -412,12 +413,13 @@ impl LateLintPass for MethodsPass {\n                     if &name.as_str() == &\"new\" {\n                         let returns_self = if let FunctionRetTy::Return(ref ret_ty) = sig.decl.output {\n                             let ast_ty_to_ty_cache = cx.tcx.ast_ty_to_ty_cache.borrow();\n-                            let ty = ast_ty_to_ty_cache.get(&ty.id);\n                             let ret_ty = ast_ty_to_ty_cache.get(&ret_ty.id);\n \n-                            match (ty, ret_ty) {\n-                                (Some(&ty), Some(&ret_ty)) => ret_ty.walk().any(|t| t == ty),\n-                                _ => false,\n+                            if let Some(&ret_ty) = ret_ty {\n+                                ret_ty.walk().any(|t| t == ty)\n+                            }\n+                            else {\n+                                false\n                             }\n                         }\n                         else {\n@@ -983,12 +985,7 @@ fn is_bool(ty: &Ty) -> bool {\n     false\n }\n \n-fn is_copy(cx: &LateContext, ast_ty: &Ty, item: &Item) -> bool {\n-    match cx.tcx.ast_ty_to_ty_cache.borrow().get(&ast_ty.id) {\n-        None => false,\n-        Some(ty) => {\n-            let env = ty::ParameterEnvironment::for_item(cx.tcx, item.id);\n-            !ty.subst(cx.tcx, &env.free_substs).moves_by_default(&env, ast_ty.span)\n-        }\n-    }\n+fn is_copy<'a, 'ctx>(cx: &LateContext<'a, 'ctx>, ty: ty::Ty<'ctx>, item: &Item) -> bool {\n+    let env = ty::ParameterEnvironment::for_item(cx.tcx, item.id);\n+    !ty.subst(cx.tcx, &env.free_substs).moves_by_default(&env, item.span)\n }"}, {"sha": "14b1106add525153685e7f3521848824eccff460", "filename": "tests/compile-fail/derive.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/tests%2Fcompile-fail%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0/tests%2Fcompile-fail%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderive.rs?ref=2641c4e1263a69e1b99e2ec5c9ebdb33c57213d0", "patch": "@@ -35,6 +35,17 @@ impl Clone for Qux {\n     fn clone(&self) -> Self { Qux }\n }\n \n+// See #666\n+#[derive(Copy)]\n+struct Lt<'a> {\n+    a: &'a u8,\n+}\n+\n+impl<'a> Clone for Lt<'a> {\n+//~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+    fn clone(&self) -> Self { unimplemented!() }\n+}\n+\n // Ok, `Clone` cannot be derived because of the big array\n #[derive(Copy)]\n struct BigArray {"}, {"sha": "b681f4b2c5875a1012a754cdb25374fdd1ff925b", "filename": "tests/ice-666.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd35b9e38d3520b59eb5ef219cec0f17f7d12f91/tests%2Fice-666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd35b9e38d3520b59eb5ef219cec0f17f7d12f91/tests%2Fice-666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fice-666.rs?ref=cd35b9e38d3520b59eb5ef219cec0f17f7d12f91", "patch": "@@ -1,24 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-pub struct Lt<'a> {\n-    _foo: &'a u8,\n-}\n-\n-impl<'a> Copy for Lt<'a> {}\n-impl<'a> Clone for Lt<'a> {\n-    fn clone(&self) -> Lt<'a> {\n-        unimplemented!();\n-    }\n-}\n-\n-pub struct Ty<A> {\n-    _foo: A,\n-}\n-\n-impl<A: Copy> Copy for Ty<A> {}\n-impl<A> Clone for Ty<A> {\n-    fn clone(&self) -> Ty<A> {\n-        unimplemented!();\n-    }\n-}"}]}