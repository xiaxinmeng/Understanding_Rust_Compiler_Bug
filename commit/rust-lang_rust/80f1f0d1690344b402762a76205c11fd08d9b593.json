{"sha": "80f1f0d1690344b402762a76205c11fd08d9b593", "node_id": "C_kwDOAAsO6NoAKDgwZjFmMGQxNjkwMzQ0YjQwMjc2MmE3NjIwNWMxMWZkMDhkOWI1OTM", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-05T19:52:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T19:52:45Z"}, "message": "Rollup merge of #89442 - GuillaumeGomez:duplicated-doc-alias, r=estebank\n\nAdd check for duplicated doc aliases\n\nr? ``@estebank``", "tree": {"sha": "506a9f4fbfba5f806a4978a5e798a61dac32bf0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506a9f4fbfba5f806a4978a5e798a61dac32bf0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80f1f0d1690344b402762a76205c11fd08d9b593", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXK0OCRBK7hj4Ov3rIwAACUAIADPjx6W8yt526T8TDgivsp5G\nQCi2B6FD/GRweL8pP+G/tVV2cKZKEF2MbEC+09uSxKlNAweA+IahAf2PyqLv2Q53\n2beS4pIY226RPMsRFWsNYHBmCSjZMtfrWiWzPs/JROeweGJWcfCJcfy3YliEcgOv\npF4ox2AHPjRpD2GCb+WH8Zb29oLnN1uJvb6Q/4GFzTTZ2lwq59wpwcBRbb+hw2ED\nwuh15kTow9kQ6mWz2YxtgbIB/WAvPknY6Qj3eYg2wHuZA6hToNbTitz8U9qdv2CA\n0Ck4MhHNQtKumMTY3AhSc8Z26YOEqfjbNMnynwST+tD7goABRJ8QkEBkyypL0oQ=\n=8VVC\n-----END PGP SIGNATURE-----\n", "payload": "tree 506a9f4fbfba5f806a4978a5e798a61dac32bf0f\nparent e745e098c45771c5d411f55b72efa96cbeb9aca6\nparent 013aa378f301af73116088bec86128ac7cbd8ab8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633463565 -0700\ncommitter GitHub <noreply@github.com> 1633463565 -0700\n\nRollup merge of #89442 - GuillaumeGomez:duplicated-doc-alias, r=estebank\n\nAdd check for duplicated doc aliases\n\nr? ``@estebank``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80f1f0d1690344b402762a76205c11fd08d9b593", "html_url": "https://github.com/rust-lang/rust/commit/80f1f0d1690344b402762a76205c11fd08d9b593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80f1f0d1690344b402762a76205c11fd08d9b593/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e745e098c45771c5d411f55b72efa96cbeb9aca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e745e098c45771c5d411f55b72efa96cbeb9aca6", "html_url": "https://github.com/rust-lang/rust/commit/e745e098c45771c5d411f55b72efa96cbeb9aca6"}, {"sha": "013aa378f301af73116088bec86128ac7cbd8ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/013aa378f301af73116088bec86128ac7cbd8ab8", "html_url": "https://github.com/rust-lang/rust/commit/013aa378f301af73116088bec86128ac7cbd8ab8"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "e7b2a018680ad4f39969e4cbf8a6eb989b3d6a0f", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/80f1f0d1690344b402762a76205c11fd08d9b593/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1f0d1690344b402762a76205c11fd08d9b593/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=80f1f0d1690344b402762a76205c11fd08d9b593", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n \n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, NestedMetaItem};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_feature::{AttributeType, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n@@ -66,6 +66,7 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) {\n+        let mut doc_aliases = FxHashMap::default();\n         let mut is_valid = true;\n         let mut specified_inline = None;\n         let mut seen = FxHashSet::default();\n@@ -79,7 +80,13 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::track_caller => {\n                     self.check_track_caller(hir_id, &attr.span, attrs, span, target)\n                 }\n-                sym::doc => self.check_doc_attrs(attr, hir_id, target, &mut specified_inline),\n+                sym::doc => self.check_doc_attrs(\n+                    attr,\n+                    hir_id,\n+                    target,\n+                    &mut specified_inline,\n+                    &mut doc_aliases,\n+                ),\n                 sym::no_link => self.check_no_link(hir_id, &attr, span, target),\n                 sym::export_name => self.check_export_name(hir_id, &attr, span, target),\n                 sym::rustc_layout_scalar_valid_range_start\n@@ -512,6 +519,7 @@ impl CheckAttrVisitor<'tcx> {\n         hir_id: HirId,\n         target: Target,\n         is_list: bool,\n+        aliases: &mut FxHashMap<String, Span>,\n     ) -> bool {\n         let tcx = self.tcx;\n         let err_fn = move |span: Span, msg: &str| {\n@@ -582,17 +590,38 @@ impl CheckAttrVisitor<'tcx> {\n         if &*item_name.as_str() == doc_alias {\n             return err_fn(meta.span(), \"is the same as the item's name\");\n         }\n+        let span = meta.span();\n+        if let Err(entry) = aliases.try_insert(doc_alias.to_owned(), span) {\n+            self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, span, |lint| {\n+                lint.build(\"doc alias is duplicated\")\n+                    .span_label(*entry.entry.get(), \"first defined here\")\n+                    .emit();\n+            });\n+        }\n         true\n     }\n \n-    fn check_doc_alias(&self, meta: &NestedMetaItem, hir_id: HirId, target: Target) -> bool {\n+    fn check_doc_alias(\n+        &self,\n+        meta: &NestedMetaItem,\n+        hir_id: HirId,\n+        target: Target,\n+        aliases: &mut FxHashMap<String, Span>,\n+    ) -> bool {\n         if let Some(values) = meta.meta_item_list() {\n             let mut errors = 0;\n             for v in values {\n                 match v.literal() {\n                     Some(l) => match l.kind {\n                         LitKind::Str(s, _) => {\n-                            if !self.check_doc_alias_value(v, &s.as_str(), hir_id, target, true) {\n+                            if !self.check_doc_alias_value(\n+                                v,\n+                                &s.as_str(),\n+                                hir_id,\n+                                target,\n+                                true,\n+                                aliases,\n+                            ) {\n                                 errors += 1;\n                             }\n                         }\n@@ -621,7 +650,7 @@ impl CheckAttrVisitor<'tcx> {\n             }\n             errors == 0\n         } else if let Some(doc_alias) = meta.value_str().map(|s| s.to_string()) {\n-            self.check_doc_alias_value(meta, &doc_alias, hir_id, target, false)\n+            self.check_doc_alias_value(meta, &doc_alias, hir_id, target, false, aliases)\n         } else {\n             self.tcx\n                 .sess\n@@ -858,6 +887,7 @@ impl CheckAttrVisitor<'tcx> {\n         hir_id: HirId,\n         target: Target,\n         specified_inline: &mut Option<(bool, Span)>,\n+        aliases: &mut FxHashMap<String, Span>,\n     ) -> bool {\n         let mut is_valid = true;\n \n@@ -867,7 +897,7 @@ impl CheckAttrVisitor<'tcx> {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n                             if !self.check_attr_not_crate_level(&meta, hir_id, \"alias\")\n-                                || !self.check_doc_alias(&meta, hir_id, target) =>\n+                                || !self.check_doc_alias(&meta, hir_id, target, aliases) =>\n                         {\n                             is_valid = false\n                         }"}, {"sha": "4adec3c4f608d78e93c412ccb6a5476a370fad7d", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80f1f0d1690344b402762a76205c11fd08d9b593/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1f0d1690344b402762a76205c11fd08d9b593/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=80f1f0d1690344b402762a76205c11fd08d9b593", "patch": "@@ -9,8 +9,9 @@\n #![feature(in_band_lifetimes)]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n-#![feature(nll)]\n+#![feature(map_try_insert)]\n #![feature(min_specialization)]\n+#![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "a564ab64532b70e18e83cba1cd61e701409bcb21", "filename": "src/test/ui/duplicate_doc_alias.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80f1f0d1690344b402762a76205c11fd08d9b593/src%2Ftest%2Fui%2Fduplicate_doc_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f1f0d1690344b402762a76205c11fd08d9b593/src%2Ftest%2Fui%2Fduplicate_doc_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_doc_alias.rs?ref=80f1f0d1690344b402762a76205c11fd08d9b593", "patch": "@@ -0,0 +1,9 @@\n+#![deny(unused_attributes)]\n+\n+#[doc(alias = \"A\")]\n+#[doc(alias = \"A\")] //~ ERROR\n+#[doc(alias = \"B\")]\n+#[doc(alias(\"B\"))] //~ ERROR\n+pub struct Foo;\n+\n+fn main() {}"}, {"sha": "4b2dd1f8eb68e1b66a7b3814e9716af51afaa3de", "filename": "src/test/ui/duplicate_doc_alias.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80f1f0d1690344b402762a76205c11fd08d9b593/src%2Ftest%2Fui%2Fduplicate_doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80f1f0d1690344b402762a76205c11fd08d9b593/src%2Ftest%2Fui%2Fduplicate_doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_doc_alias.stderr?ref=80f1f0d1690344b402762a76205c11fd08d9b593", "patch": "@@ -0,0 +1,24 @@\n+error: doc alias is duplicated\n+  --> $DIR/duplicate_doc_alias.rs:4:7\n+   |\n+LL | #[doc(alias = \"A\")]\n+   |       ----------- first defined here\n+LL | #[doc(alias = \"A\")]\n+   |       ^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/duplicate_doc_alias.rs:1:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: doc alias is duplicated\n+  --> $DIR/duplicate_doc_alias.rs:6:13\n+   |\n+LL | #[doc(alias = \"B\")]\n+   |       ----------- first defined here\n+LL | #[doc(alias(\"B\"))]\n+   |             ^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}