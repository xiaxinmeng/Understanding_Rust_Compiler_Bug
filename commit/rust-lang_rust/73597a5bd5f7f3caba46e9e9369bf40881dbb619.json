{"sha": "73597a5bd5f7f3caba46e9e9369bf40881dbb619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNTk3YTViZDVmN2YzY2FiYTQ2ZTllOTM2OWJmNDA4ODFkYmI2MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T18:40:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T18:40:41Z"}, "message": "auto merge of #6657 : sanxiyn/rust/allocation, r=thestinger", "tree": {"sha": "9f0aa158b80236e7353b5d06908e56e610a8ae72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f0aa158b80236e7353b5d06908e56e610a8ae72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73597a5bd5f7f3caba46e9e9369bf40881dbb619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73597a5bd5f7f3caba46e9e9369bf40881dbb619", "html_url": "https://github.com/rust-lang/rust/commit/73597a5bd5f7f3caba46e9e9369bf40881dbb619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73597a5bd5f7f3caba46e9e9369bf40881dbb619/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64963d6cbaea86e0d2a58f507e57a76da7512e3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64963d6cbaea86e0d2a58f507e57a76da7512e3e", "html_url": "https://github.com/rust-lang/rust/commit/64963d6cbaea86e0d2a58f507e57a76da7512e3e"}, {"sha": "70222b7e86da5a813f9bcf60d884389fc8b04ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/70222b7e86da5a813f9bcf60d884389fc8b04ef7", "html_url": "https://github.com/rust-lang/rust/commit/70222b7e86da5a813f9bcf60d884389fc8b04ef7"}], "stats": {"total": 176, "additions": 88, "deletions": 88}, "files": [{"sha": "468f50a0cc1ff0f96042682608ae14c4cdc2847d", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -38,7 +38,7 @@ pub enum test_mode { tm_converge, tm_run, }\n pub struct Context { mode: test_mode } // + rng\n \n pub fn write_file(filename: &Path, content: &str) {\n-    result::get(&io::file_writer(filename, ~[io::Create, io::Truncate]))\n+    result::get(&io::file_writer(filename, [io::Create, io::Truncate]))\n                     .write_str(content);\n }\n \n@@ -47,12 +47,12 @@ pub fn contains(haystack: &str, needle: &str) -> bool {\n }\n \n pub fn find_rust_files(files: &mut ~[Path], path: &Path) {\n-    if path.filetype() == Some(~\".rs\") && !contains(path.to_str(), ~\"utf8\") {\n+    if path.filetype() == Some(~\".rs\") && !contains(path.to_str(), \"utf8\") {\n         // ignoring \"utf8\" tests because something is broken\n         files.push(path.clone());\n     } else if os::path_is_dir(path)\n-        && !contains(path.to_str(), ~\"compile-fail\")\n-        && !contains(path.to_str(), ~\"build\") {\n+        && !contains(path.to_str(), \"compile-fail\")\n+        && !contains(path.to_str(), \"build\") {\n         for os::list_dir_path(path).each |p| {\n             find_rust_files(&mut *files, *p);\n         }\n@@ -406,34 +406,34 @@ pub fn check_whole_compiler(code: &str,\n \n pub fn removeIfExists(filename: &Path) {\n     // So sketchy!\n-    assert!(!contains(filename.to_str(), ~\" \"));\n-    run::program_output(~\"bash\", ~[~\"-c\", ~\"rm \" + filename.to_str()]);\n+    assert!(!contains(filename.to_str(), \" \"));\n+    run::program_output(\"bash\", [~\"-c\", ~\"rm \" + filename.to_str()]);\n }\n \n pub fn removeDirIfExists(filename: &Path) {\n     // So sketchy!\n-    assert!(!contains(filename.to_str(), ~\" \"));\n-    run::program_output(~\"bash\", ~[~\"-c\", ~\"rm -r \" + filename.to_str()]);\n+    assert!(!contains(filename.to_str(), \" \"));\n+    run::program_output(\"bash\", [~\"-c\", ~\"rm -r \" + filename.to_str()]);\n }\n \n pub fn check_running(exe_filename: &Path) -> happiness {\n     let p = run::program_output(\n-        ~\"/Users/jruderman/scripts/timed_run_rust_program.py\",\n-        ~[exe_filename.to_str()]);\n+        \"/Users/jruderman/scripts/timed_run_rust_program.py\",\n+        [exe_filename.to_str()]);\n     let comb = p.out + ~\"\\n\" + p.err;\n     if str::len(comb) > 1u {\n         error!(\"comb comb comb: %?\", comb);\n     }\n \n-    if contains(comb, ~\"Assertion failed:\") {\n+    if contains(comb, \"Assertion failed:\") {\n         failed(~\"C++ assertion failure\")\n-    } else if contains(comb, ~\"leaked memory in rust main loop\") {\n+    } else if contains(comb, \"leaked memory in rust main loop\") {\n         // might also use exit code 134\n         //failed(\"Leaked\")\n         known_bug(~\"https://github.com/mozilla/rust/issues/910\")\n-    } else if contains(comb, ~\"src/rt/\") {\n+    } else if contains(comb, \"src/rt/\") {\n         failed(~\"Mentioned src/rt/\")\n-    } else if contains(comb, ~\"malloc\") {\n+    } else if contains(comb, \"malloc\") {\n         failed(~\"Mentioned malloc\")\n     } else {\n         match p.status {\n@@ -457,26 +457,26 @@ pub fn check_running(exe_filename: &Path) -> happiness {\n \n pub fn check_compiling(filename: &Path) -> happiness {\n     let p = run::program_output(\n-        ~\"/Users/jruderman/code/rust/build/x86_64-apple-darwin/\\\n+        \"/Users/jruderman/code/rust/build/x86_64-apple-darwin/\\\n          stage1/bin/rustc\",\n-        ~[filename.to_str()]);\n+        [filename.to_str()]);\n \n     //error!(\"Status: %d\", p.status);\n     if p.status == 0 {\n         passed\n     } else if p.err != ~\"\" {\n-        if contains(p.err, ~\"error:\") {\n+        if contains(p.err, \"error:\") {\n             cleanly_rejected(~\"rejected with span_error\")\n         } else {\n             error!(\"Stderr: %?\", p.err);\n             failed(~\"Unfamiliar error message\")\n         }\n-    } else if contains(p.out, ~\"Assertion\") && contains(p.out, ~\"failed\") {\n+    } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n         error!(\"Stdout: %?\", p.out);\n         failed(~\"Looks like an llvm assertion failure\")\n-    } else if contains(p.out, ~\"internal compiler error unimplemented\") {\n+    } else if contains(p.out, \"internal compiler error unimplemented\") {\n         known_bug(~\"Something unimplemented\")\n-    } else if contains(p.out, ~\"internal compiler error\") {\n+    } else if contains(p.out, \"internal compiler error\") {\n         error!(\"Stdout: %?\", p.out);\n         failed(~\"internal compiler error\")\n \n@@ -603,8 +603,8 @@ pub fn check_roundtrip_convergence(code: @~str, maxIters: uint) {\n         error!(\"Did not converge after %u iterations!\", i);\n         write_file(&Path(\"round-trip-a.rs\"), *oldv);\n         write_file(&Path(\"round-trip-b.rs\"), *newv);\n-        run::run_program(~\"diff\",\n-                         ~[~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n+        run::run_program(\"diff\",\n+                         [~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n                           ~\"round-trip-b.rs\"]);\n         fail!(\"Mismatch\");\n     }\n@@ -635,7 +635,7 @@ pub fn check_variants(files: &[Path], cx: Context) {\n         }\n \n         let s = @result::get(&io::read_whole_file_str(file));\n-        if contains(*s, ~\"#\") {\n+        if contains(*s, \"#\") {\n             loop; // Macros are confusing\n         }\n         if cx.mode == tm_converge && content_might_not_converge(*s) {"}, {"sha": "ec31795337bb54a77521fadce50a82ed90fcddc6", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -26,7 +26,7 @@ fn doc_metas(\n     attrs: ~[ast::attribute]\n ) -> ~[@ast::meta_item] {\n \n-    let doc_attrs = attr::find_attrs_by_name(attrs, ~\"doc\");\n+    let doc_attrs = attr::find_attrs_by_name(attrs, \"doc\");\n     let doc_metas = do doc_attrs.map |attr| {\n         attr::attr_meta(attr::desugar_doc_attr(attr))\n     };\n@@ -36,7 +36,7 @@ fn doc_metas(\n \n pub fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n     let link_metas = attr::find_linkage_metas(attrs);\n-    let name = attr::last_meta_item_value_str_by_name(link_metas, ~\"name\");\n+    let name = attr::last_meta_item_value_str_by_name(link_metas, \"name\");\n \n     CrateAttrs {\n         name: name.map(|s| copy **s)\n@@ -58,7 +58,7 @@ pub fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n     do doc_metas(attrs).find |meta| {\n         match attr::get_meta_item_list(*meta) {\n             Some(metas) => {\n-                let hiddens = attr::find_meta_items_by_name(metas, ~\"hidden\");\n+                let hiddens = attr::find_meta_items_by_name(metas, \"hidden\");\n                 !hiddens.is_empty()\n             }\n             None => false"}, {"sha": "7464b708045af135d4eec092d4c7c2917d8631c0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -70,12 +70,12 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n pub fn usage() {\n     use core::io::println;\n \n-    println(~\"Usage: rustdoc [options] <cratefile>\\n\");\n-    println(~\"Options:\\n\");\n+    println(\"Usage: rustdoc [options] <cratefile>\\n\");\n+    println(\"Options:\\n\");\n     for opts().each |opt| {\n         println(fmt!(\"    %s\", opt.second()));\n     }\n-    println(~\"\");\n+    println(\"\");\n }\n \n pub fn default_config(input_crate: &Path) -> Config {\n@@ -227,7 +227,7 @@ pub fn maybe_find_pandoc(\n     };\n \n     let pandoc = do vec::find(possible_pandocs) |pandoc| {\n-        let output = program_output(*pandoc, ~[~\"--version\"]);\n+        let output = program_output(*pandoc, [~\"--version\"]);\n         debug!(\"testing pandoc cmd %s: %?\", *pandoc, output);\n         output.status == 0\n     };"}, {"sha": "c61b38743fd1fbf851e8228fdf4ae3f2d813cdf0", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -104,7 +104,7 @@ fn first_sentence(s: ~str) -> Option<~str> {\n     let paras = paragraphs(s);\n     if !paras.is_empty() {\n         let first_para = paras.head();\n-        Some(str::replace(first_sentence_(*first_para), ~\"\\n\", ~\" \"))\n+        Some(str::replace(first_sentence_(*first_para), \"\\n\", \" \"))\n     } else {\n         None\n     }\n@@ -132,7 +132,7 @@ fn first_sentence_(s: &str) -> ~str {\n             str::to_owned(str::slice(s, 0, idx - 1))\n         }\n         _ => {\n-            if str::ends_with(s, ~\".\") {\n+            if str::ends_with(s, \".\") {\n                 str::to_owned(s)\n             } else {\n                 str::to_owned(s)"}, {"sha": "045e916b11006798fee4108330adcb7593667445", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -20,7 +20,7 @@ pub fn mk_pass() -> Pass {\n }\n \n fn escape(s: &str) -> ~str {\n-    str::replace(s, ~\"\\\\\", ~\"\\\\\\\\\")\n+    str::replace(s, \"\\\\\", \"\\\\\\\\\")\n }\n \n #[test]"}, {"sha": "c7329c4a54b5e2900e262e3960891c68c03300f0", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -124,33 +124,33 @@ pub fn pandoc_header_id(header: &str) -> ~str {\n     return header;\n \n     fn remove_formatting(s: &str) -> ~str {\n-        str::replace(s, ~\"`\", ~\"\")\n+        str::replace(s, \"`\", \"\")\n     }\n     fn remove_punctuation(s: &str) -> ~str {\n-        let s = str::replace(s, ~\"<\", ~\"\");\n-        let s = str::replace(s, ~\">\", ~\"\");\n-        let s = str::replace(s, ~\"[\", ~\"\");\n-        let s = str::replace(s, ~\"]\", ~\"\");\n-        let s = str::replace(s, ~\"(\", ~\"\");\n-        let s = str::replace(s, ~\")\", ~\"\");\n-        let s = str::replace(s, ~\"@~\", ~\"\");\n-        let s = str::replace(s, ~\"~\", ~\"\");\n-        let s = str::replace(s, ~\"/\", ~\"\");\n-        let s = str::replace(s, ~\":\", ~\"\");\n-        let s = str::replace(s, ~\"&\", ~\"\");\n-        let s = str::replace(s, ~\"^\", ~\"\");\n-        let s = str::replace(s, ~\",\", ~\"\");\n-        let s = str::replace(s, ~\"'\", ~\"\");\n-        let s = str::replace(s, ~\"+\", ~\"\");\n+        let s = str::replace(s, \"<\", \"\");\n+        let s = str::replace(s, \">\", \"\");\n+        let s = str::replace(s, \"[\", \"\");\n+        let s = str::replace(s, \"]\", \"\");\n+        let s = str::replace(s, \"(\", \"\");\n+        let s = str::replace(s, \")\", \"\");\n+        let s = str::replace(s, \"@~\", \"\");\n+        let s = str::replace(s, \"~\", \"\");\n+        let s = str::replace(s, \"/\", \"\");\n+        let s = str::replace(s, \":\", \"\");\n+        let s = str::replace(s, \"&\", \"\");\n+        let s = str::replace(s, \"^\", \"\");\n+        let s = str::replace(s, \",\", \"\");\n+        let s = str::replace(s, \"'\", \"\");\n+        let s = str::replace(s, \"+\", \"\");\n         return s;\n     }\n     fn replace_with_hyphens(s: &str) -> ~str {\n         // Collapse sequences of whitespace to a single dash\n         // XXX: Hacky implementation here that only covers\n         // one or two spaces.\n         let s = str::trim(s);\n-        let s = str::replace(s, ~\"  \", ~\"-\");\n-        let s = str::replace(s, ~\" \", ~\"-\");\n+        let s = str::replace(s, \"  \", \"-\");\n+        let s = str::replace(s, \" \", \"-\");\n         return s;\n     }\n     // FIXME: #4318 Instead of to_ascii and to_str_ascii, could use"}, {"sha": "4f4bb4194a897769dd3140d69b6559e81e7b632f", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -110,7 +110,7 @@ fn make_title(page: doc::Page) -> ~str {\n         }\n     };\n     let title = markdown_pass::header_text(item);\n-    let title = str::replace(title, ~\"`\", ~\"\");\n+    let title = str::replace(title, \"`\", \"\");\n     return title;\n }\n \n@@ -169,7 +169,7 @@ pub fn header_kind(doc: doc::ItemTag) -> ~str {\n }\n \n pub fn header_name(doc: doc::ItemTag) -> ~str {\n-    let fullpath = str::connect(doc.path() + ~[doc.name()], ~\"::\");\n+    let fullpath = str::connect(doc.path() + ~[doc.name()], \"::\");\n     match &doc {\n         &doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n             fullpath\n@@ -471,7 +471,7 @@ fn write_methods(ctxt: &Ctxt, docs: &[doc::MethodDoc]) {\n }\n \n fn write_method(ctxt: &Ctxt, doc: doc::MethodDoc) {\n-    write_header_(ctxt, H3, header_text_(~\"Method\", doc.name));\n+    write_header_(ctxt, H3, header_text_(\"Method\", doc.name));\n     write_fnlike(\n         ctxt,\n         copy doc.sig,"}, {"sha": "671364f4dbb346f578d1aaef20b8446d27ddea88", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -101,7 +101,7 @@ fn pandoc_writer(\n         use core::io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n-        debug!(\"pandoc args: %s\", str::connect(pandoc_args, ~\" \"));\n+        debug!(\"pandoc args: %s\", str::connect(pandoc_args, \" \"));\n \n         let pipe_in = os::pipe();\n         let pipe_out = os::pipe();\n@@ -198,7 +198,7 @@ pub fn make_filename(\n             }\n           }\n           doc::ItemPage(doc) => {\n-            str::connect(doc.path() + ~[doc.name()], ~\"_\")\n+            str::connect(doc.path() + ~[doc.name()], \"_\")\n           }\n         }\n     };\n@@ -213,7 +213,7 @@ pub fn make_filename(\n fn write_file(path: &Path, s: ~str) {\n     use core::io::WriterUtil;\n \n-    match io::file_writer(path, ~[io::Create, io::Truncate]) {\n+    match io::file_writer(path, [io::Create, io::Truncate]) {\n       result::Ok(writer) => {\n         writer.write_str(s);\n       }"}, {"sha": "afd29ab72486759b8f4aa96a1f786697a8679156", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -149,7 +149,7 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n }\n \n fn parse_header(line: ~str) -> Option<~str> {\n-    if str::starts_with(line, ~\"# \") {\n+    if str::starts_with(line, \"# \") {\n         Some(str::slice(line, 2u, str::len(line)).to_owned())\n     } else {\n         None"}, {"sha": "1e3e4acce050c883e237e3e60be1835c7b07c581", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -82,7 +82,7 @@ fn unindent(s: &str) -> ~str {\n                 str::slice(*line, min_indent, str::len(*line)).to_owned()\n             }\n         };\n-        str::connect(unindented, ~\"\\n\")\n+        str::connect(unindented, \"\\n\")\n     } else {\n         s.to_str()\n     }"}, {"sha": "94fdcddfbb5b5277ec580235a20de5c9ae6ec9c4", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -126,14 +126,14 @@ impl<'self> PkgScript<'self> {\n                                                &exe, @copy os::args()[0],\n                                                driver::cu_everything);\n                 debug!(\"Running program: %s %s %s\", exe.to_str(), root.to_str(), what);\n-                let status = run::run_program(exe.to_str(), ~[root.to_str(), what]);\n+                let status = run::run_program(exe.to_str(), [root.to_str(), what]);\n                 if status != 0 {\n                     return (~[], status);\n                 }\n                 else {\n                     debug!(\"Running program (configs): %s %s %s\",\n-                           exe.to_str(), root.to_str(), ~\"configs\");\n-                    let output = run::program_output(exe.to_str(), ~[root.to_str(), ~\"configs\"]);\n+                           exe.to_str(), root.to_str(), \"configs\");\n+                    let output = run::program_output(exe.to_str(), [root.to_str(), ~\"configs\"]);\n                     // Run the configs() function to get the configs\n                     let mut cfgs = ~[];\n                     for str::each_word(output.out) |w| {\n@@ -360,9 +360,9 @@ pub fn main() {\n     io::println(\"WARNING: The Rust package manager is experimental and may be unstable\");\n \n     let args = os::args();\n-    let opts = ~[getopts::optflag(~\"h\"), getopts::optflag(~\"help\"),\n-                 getopts::optflag(~\"j\"), getopts::optflag(~\"json\"),\n-                 getopts::optmulti(~\"c\"), getopts::optmulti(~\"cfg\")];\n+    let opts = ~[getopts::optflag(\"h\"), getopts::optflag(\"help\"),\n+                 getopts::optflag(\"j\"), getopts::optflag(\"json\"),\n+                 getopts::optmulti(\"c\"), getopts::optmulti(\"cfg\")];\n     let matches = &match getopts::getopts(args, opts) {\n         result::Ok(m) => m,\n         result::Err(f) => {\n@@ -371,10 +371,10 @@ pub fn main() {\n             return;\n         }\n     };\n-    let help = getopts::opt_present(matches, ~\"h\") ||\n-               getopts::opt_present(matches, ~\"help\");\n-    let json = getopts::opt_present(matches, ~\"j\") ||\n-               getopts::opt_present(matches, ~\"json\");\n+    let help = getopts::opt_present(matches, \"h\") ||\n+               getopts::opt_present(matches, \"help\");\n+    let json = getopts::opt_present(matches, \"j\") ||\n+               getopts::opt_present(matches, \"json\");\n     let mut args = copy matches.free;\n \n     args.shift();\n@@ -428,7 +428,7 @@ pub impl Crate {\n \n     fn flag(&self, flag: ~str) -> Crate {\n         Crate {\n-            flags: vec::append(copy self.flags, ~[flag]),\n+            flags: vec::append(copy self.flags, [flag]),\n             .. copy *self\n         }\n     }\n@@ -442,7 +442,7 @@ pub impl Crate {\n \n     fn cfg(&self, cfg: ~str) -> Crate {\n         Crate {\n-            cfgs: vec::append(copy self.cfgs, ~[cfg]),\n+            cfgs: vec::append(copy self.cfgs, [cfg]),\n             .. copy *self\n         }\n     }\n@@ -546,7 +546,7 @@ impl PkgSrc {\n         let url = fmt!(\"https://%s\", self.id.remote_path.to_str());\n         util::note(fmt!(\"git clone %s %s\", url, local.to_str()));\n \n-        if run::program_output(~\"git\", ~[~\"clone\", copy url, local.to_str()]).status != 0 {\n+        if run::program_output(\"git\", [~\"clone\", copy url, local.to_str()]).status != 0 {\n             util::note(fmt!(\"fetching %s failed: can't clone repository\", url));\n             return false;\n         }"}, {"sha": "90c87210faaa857875143b1ff80b1ac5847e2fc9", "filename": "src/librustpkg/usage.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustpkg%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustpkg%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fusage.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -11,7 +11,7 @@\n use core::io;\n \n pub fn general() {\n-    io::println(~\"Usage: rustpkg [options] <cmd> [args..]\n+    io::println(\"Usage: rustpkg [options] <cmd> [args..]\n \n Where <cmd> is one of:\n     build, clean, do, info, install, prefer, test, uninstall, unprefer\n@@ -23,7 +23,7 @@ Options:\n }\n \n pub fn build() {\n-    io::println(~\"rustpkg [options..] build\n+    io::println(\"rustpkg [options..] build\n \n Build all targets described in the package script in the current\n directory.\n@@ -33,21 +33,21 @@ Options:\n }\n \n pub fn clean() {\n-    io::println(~\"rustpkg clean\n+    io::println(\"rustpkg clean\n \n Remove all build files in the work cache for the package in the current\n directory.\");\n }\n \n pub fn do_cmd() {\n-    io::println(~\"rustpkg do <cmd>\n+    io::println(\"rustpkg do <cmd>\n \n Runs a command in the package script. You can listen to a command\n by tagging a function with the attribute `#[pkg_do(cmd)]`.\");\n }\n \n pub fn info() {\n-    io::println(~\"rustpkg [options..] info\n+    io::println(\"rustpkg [options..] info\n \n Probe the package script in the current directory for information.\n \n@@ -56,7 +56,7 @@ Options:\n }\n \n pub fn install() {\n-    io::println(~\"rustpkg [options..] install [url] [target]\n+    io::println(\"rustpkg [options..] install [url] [target]\n \n Install a package from a URL by Git or cURL (FTP, HTTP, etc.).\n If target is provided, Git will checkout the branch or tag before\n@@ -76,14 +76,14 @@ Options:\n }\n \n pub fn uninstall() {\n-    io::println(~\"rustpkg uninstall <id|name>[@version]\n+    io::println(\"rustpkg uninstall <id|name>[@version]\n \n Remove a package by id or name and optionally version. If the package(s)\n is/are depended on by another package then they cannot be removed.\");\n }\n \n pub fn prefer() {\n-    io::println(~\"rustpkg [options..] prefer <id|name>[@version]\n+    io::println(\"rustpkg [options..] prefer <id|name>[@version]\n \n By default all binaries are given a unique name so that multiple versions can\n coexist. The prefer command will symlink the uniquely named binary to\n@@ -101,7 +101,7 @@ Example:\n }\n \n pub fn unprefer() {\n-    io::println(~\"rustpkg [options..] unprefer <id|name>[@version]\n+    io::println(\"rustpkg [options..] unprefer <id|name>[@version]\n \n Remove all symlinks from the store to the binary directory for a package\n name and optionally version. If version is not supplied, the latest version\n@@ -110,7 +110,7 @@ information.\");\n }\n \n pub fn test() {\n-    io::println(~\"rustpkg [options..] test\n+    io::println(\"rustpkg [options..] test\n \n Build all targets described in the package script in the current directory\n with the test flag. The test bootstraps will be run afterwards and the output"}, {"sha": "94101c4676f6411e247f4919d8ea5978077fd76e", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73597a5bd5f7f3caba46e9e9369bf40881dbb619/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=73597a5bd5f7f3caba46e9e9369bf40881dbb619", "patch": "@@ -208,7 +208,7 @@ fn fold_item(ctx: @mut ReadyCtx,\n              fold: @fold::ast_fold) -> Option<@ast::item> {\n     ctx.path.push(item.ident);\n \n-    let attrs = attr::find_attrs_by_name(item.attrs, ~\"pkg_do\");\n+    let attrs = attr::find_attrs_by_name(item.attrs, \"pkg_do\");\n \n     if attrs.len() > 0 {\n         let mut cmds = ~[];\n@@ -281,7 +281,7 @@ pub fn note(msg: ~str) {\n \n     if term::color_supported() {\n         term::fg(out, term::color_green);\n-        out.write_str(~\"note: \");\n+        out.write_str(\"note: \");\n         term::reset(out);\n         out.write_line(msg);\n     } else {\n@@ -294,7 +294,7 @@ pub fn warn(msg: ~str) {\n \n     if term::color_supported() {\n         term::fg(out, term::color_yellow);\n-        out.write_str(~\"warning: \");\n+        out.write_str(\"warning: \");\n         term::reset(out);\n         out.write_line(msg);\n     } else {\n@@ -307,7 +307,7 @@ pub fn error(msg: ~str) {\n \n     if term::color_supported() {\n         term::fg(out, term::color_red);\n-        out.write_str(~\"error: \");\n+        out.write_str(\"error: \");\n         term::reset(out);\n         out.write_line(msg);\n     } else {\n@@ -353,8 +353,8 @@ pub fn compile_input(sysroot: Option<@Path>,\n     debug!(\"compiling %s into %s\",\n            in_file.to_str(),\n            out_file.to_str());\n-    debug!(\"flags: %s\", str::connect(flags, ~\" \"));\n-    debug!(\"cfgs: %s\", str::connect(cfgs, ~\" \"));\n+    debug!(\"flags: %s\", str::connect(flags, \" \"));\n+    debug!(\"cfgs: %s\", str::connect(cfgs, \" \"));\n     debug!(\"compile_input's sysroot = %?\", sysroot);\n \n     let crate_type = match what {"}]}