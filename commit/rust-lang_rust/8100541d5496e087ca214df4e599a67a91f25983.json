{"sha": "8100541d5496e087ca214df4e599a67a91f25983", "node_id": "C_kwDOAAsO6NoAKDgxMDA1NDFkNTQ5NmUwODdjYTIxNGRmNGU1OTlhNjdhOTFmMjU5ODM", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-31T07:50:45Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:03Z"}, "message": "macros: rename `#[message]` to `#[primary_span]`\n\nSmall commit renaming `#[message]` to `#[primary_span]` as this more\naccurately reflects what it does now.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "6e1f4d95a72ac54b0c98b32b5d448f2f39cdc3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e1f4d95a72ac54b0c98b32b5d448f2f39cdc3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8100541d5496e087ca214df4e599a67a91f25983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8100541d5496e087ca214df4e599a67a91f25983", "html_url": "https://github.com/rust-lang/rust/commit/8100541d5496e087ca214df4e599a67a91f25983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8100541d5496e087ca214df4e599a67a91f25983/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0fd8d78803eee2c9badde29811ba95b361aff88", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fd8d78803eee2c9badde29811ba95b361aff88", "html_url": "https://github.com/rust-lang/rust/commit/d0fd8d78803eee2c9badde29811ba95b361aff88"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "b571fdb4ae2dae95cb293ebf75a7a897b9bdaa15", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8100541d5496e087ca214df4e599a67a91f25983/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8100541d5496e087ca214df4e599a67a91f25983/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=8100541d5496e087ca214df4e599a67a91f25983", "patch": "@@ -66,11 +66,8 @@ decl_derive!(\n         // struct attributes\n         warning,\n         error,\n-        // nested parts of struct attributes\n-        code,\n-        slug,\n         // field attributes\n-        message,\n+        primary_span,\n         label,\n         suggestion,\n         suggestion_short,"}, {"sha": "73cd840f0eb0bb1f138ae454cbc3c486633404e8", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8100541d5496e087ca214df4e599a67a91f25983/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8100541d5496e087ca214df4e599a67a91f25983/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=8100541d5496e087ca214df4e599a67a91f25983", "patch": "@@ -20,7 +20,7 @@ use std::collections::{BTreeSet, HashMap};\n /// pub struct MoveOutOfBorrowError<'tcx> {\n ///     pub name: Ident,\n ///     pub ty: Ty<'tcx>,\n-///     #[message]\n+///     #[primary_span]\n ///     #[label = \"cannot move out of borrow\"]\n ///     pub span: Span,\n ///     #[label = \"`{ty}` first borrowed here\"]\n@@ -566,15 +566,15 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         let meta = attr.parse_meta()?;\n         match meta {\n             syn::Meta::Path(_) => match name {\n-                \"message\" => {\n+                \"primary_span\" => {\n                     if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n                         return Ok(quote! {\n                             #diag.set_span(*#field_binding);\n                         });\n                     } else {\n                         throw_span_err!(\n                             attr.span().unwrap(),\n-                            \"the `#[message]` attribute can only be applied to fields of type `Span`\"\n+                            \"the `#[primary_span]` attribute can only be applied to fields of type `Span`\"\n                         );\n                     }\n                 }"}, {"sha": "7531a231e3951daaa0970e73f0ef82b5f5e0dad1", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8100541d5496e087ca214df4e599a67a91f25983/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8100541d5496e087ca214df4e599a67a91f25983/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=8100541d5496e087ca214df4e599a67a91f25983", "patch": "@@ -5,7 +5,7 @@ use rustc_span::{symbol::Ident, Span, Symbol};\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0062\", slug = \"typeck-field-multiply-specified-in-initializer\")]\n pub struct FieldMultiplySpecifiedInInitializer {\n-    #[message]\n+    #[primary_span]\n     #[label = \"used more than once\"]\n     pub span: Span,\n     #[label = \"first use of `{ident}`\"]\n@@ -16,7 +16,7 @@ pub struct FieldMultiplySpecifiedInInitializer {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0092\", slug = \"typeck-unrecognized-atomic-operation\")]\n pub struct UnrecognizedAtomicOperation<'a> {\n-    #[message]\n+    #[primary_span]\n     #[label = \"unrecognized atomic operation\"]\n     pub span: Span,\n     pub op: &'a str,\n@@ -25,7 +25,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0094\", slug = \"typeck-wrong-number-of-generic-arguments-to-intrinsic\")]\n pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n-    #[message]\n+    #[primary_span]\n     #[label = \"expected {expected} {descr} parameter{expected_pluralize}\"]\n     pub span: Span,\n     pub found: usize,\n@@ -37,7 +37,7 @@ pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0093\", slug = \"typeck-unrecognized-intrinsic-function\")]\n pub struct UnrecognizedIntrinsicFunction {\n-    #[message]\n+    #[primary_span]\n     #[label = \"unrecognized intrinsic\"]\n     pub span: Span,\n     pub name: Symbol,\n@@ -46,7 +46,7 @@ pub struct UnrecognizedIntrinsicFunction {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0195\", slug = \"typeck-lifetimes-or-bounds-mismatch-on-trait\")]\n pub struct LifetimesOrBoundsMismatchOnTrait {\n-    #[message]\n+    #[primary_span]\n     #[label = \"lifetimes do not match {item_kind} in trait\"]\n     pub span: Span,\n     #[label = \"lifetimes in impl do not match this {item_kind} in trait\"]\n@@ -58,7 +58,7 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0120\", slug = \"typeck-drop-impl-on-wrong-item\")]\n pub struct DropImplOnWrongItem {\n-    #[message]\n+    #[primary_span]\n     #[label = \"must be a struct, enum, or union\"]\n     pub span: Span,\n }\n@@ -67,7 +67,7 @@ pub struct DropImplOnWrongItem {\n #[error(code = \"E0124\", slug = \"typeck-field-already-declared\")]\n pub struct FieldAlreadyDeclared {\n     pub field_name: Ident,\n-    #[message]\n+    #[primary_span]\n     #[label = \"field already declared\"]\n     pub span: Span,\n     #[label = \"`{field_name}` first declared here\"]\n@@ -77,67 +77,67 @@ pub struct FieldAlreadyDeclared {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0184\", slug = \"typeck-copy-impl-on-type-with-dtor\")]\n pub struct CopyImplOnTypeWithDtor {\n-    #[message]\n+    #[primary_span]\n     #[label = \"Copy not allowed on types with destructors\"]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0203\", slug = \"typeck-multiple-relaxed-default-bounds\")]\n pub struct MultipleRelaxedDefaultBounds {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0206\", slug = \"typeck-copy-impl-on-non-adt\")]\n pub struct CopyImplOnNonAdt {\n-    #[message]\n+    #[primary_span]\n     #[label = \"type is not a structure or enumeration\"]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0224\", slug = \"typeck-trait-object-declared-with-no-traits\")]\n pub struct TraitObjectDeclaredWithNoTraits {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0227\", slug = \"typeck-ambiguous-lifetime-bound\")]\n pub struct AmbiguousLifetimeBound {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0229\", slug = \"typeck-assoc-type-binding-not-allowed\")]\n pub struct AssocTypeBindingNotAllowed {\n-    #[message]\n+    #[primary_span]\n     #[label = \"associated type not allowed here\"]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0436\", slug = \"typeck-functional-record-update-on-non-struct\")]\n pub struct FunctionalRecordUpdateOnNonStruct {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0516\", slug = \"typeck-typeof-reserved-keyword-used\")]\n pub struct TypeofReservedKeywordUsed {\n-    #[message]\n+    #[primary_span]\n     #[label = \"reserved keyword\"]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0572\", slug = \"typeck-return-stmt-outside-of-fn-body\")]\n pub struct ReturnStmtOutsideOfFnBody {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n     #[label = \"the return is part of this body...\"]\n     pub encl_body_span: Option<Span>,\n@@ -148,29 +148,29 @@ pub struct ReturnStmtOutsideOfFnBody {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0627\", slug = \"typeck-yield-expr-outside-of-generator\")]\n pub struct YieldExprOutsideOfGenerator {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0639\", slug = \"typeck-struct-expr-non-exhaustive\")]\n pub struct StructExprNonExhaustive {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n     pub what: &'static str,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0699\", slug = \"typeck-method-call-on-unknown-type\")]\n pub struct MethodCallOnUnknownType {\n-    #[message]\n+    #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0719\", slug = \"typeck-value-of-associated-struct-already-specified\")]\n pub struct ValueOfAssociatedStructAlreadySpecified {\n-    #[message]\n+    #[primary_span]\n     #[label = \"re-bound here\"]\n     pub span: Span,\n     #[label = \"`{item_name}` bound here first\"]\n@@ -182,7 +182,7 @@ pub struct ValueOfAssociatedStructAlreadySpecified {\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0745\", slug = \"typeck-address-of-temporary-taken\")]\n pub struct AddressOfTemporaryTaken {\n-    #[message]\n+    #[primary_span]\n     #[label = \"temporary value\"]\n     pub span: Span,\n }"}, {"sha": "422f3894991dc130ef0758500a48f93719d60b8f", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8100541d5496e087ca214df4e599a67a91f25983/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8100541d5496e087ca214df4e599a67a91f25983/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=8100541d5496e087ca214df4e599a67a91f25983", "patch": "@@ -121,8 +121,8 @@ struct CodeNotProvided {}\n #[derive(SessionDiagnostic)]\n #[error(code = \"E0123\", slug = \"foo\")]\n struct MessageWrongType {\n-    #[message]\n-    //~^ ERROR `#[message]` attribute can only be applied to fields of type `Span`\n+    #[primary_span]\n+    //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span`\n     foo: String,\n }\n \n@@ -295,7 +295,7 @@ struct OptionsInErrors {\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n     ty: Ty<'tcx>,\n-    #[message]\n+    #[primary_span]\n     #[label = \"cannot move out of borrow\"]\n     span: Span,\n     #[label = \"`{ty}` first borrowed here\"]"}, {"sha": "78ed255523ffd26d4db6e5a83755a22278b52384", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8100541d5496e087ca214df4e599a67a91f25983/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8100541d5496e087ca214df4e599a67a91f25983/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=8100541d5496e087ca214df4e599a67a91f25983", "patch": "@@ -156,11 +156,11 @@ LL | | struct CodeNotProvided {}\n    |\n    = help: use the `#[error(code = \"...\")]` attribute to set this diagnostic's error code\n \n-error: the `#[message]` attribute can only be applied to fields of type `Span`\n+error: the `#[primary_span]` attribute can only be applied to fields of type `Span`\n   --> $DIR/session-derive-errors.rs:124:5\n    |\n-LL |     #[message]\n-   |     ^^^^^^^^^^\n+LL |     #[primary_span]\n+   |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid `SessionDiagnostic` field attribute\n   --> $DIR/session-derive-errors.rs:132:5"}]}