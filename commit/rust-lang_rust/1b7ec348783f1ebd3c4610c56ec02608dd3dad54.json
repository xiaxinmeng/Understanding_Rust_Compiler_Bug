{"sha": "1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiN2VjMzQ4NzgzZjFlYmQzYzQ2MTBjNTZlYzAyNjA4ZGQzZGFkNTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-31T13:28:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:16Z"}, "message": "Inline PinnedGenerator", "tree": {"sha": "6294d56156b29168f135da5cfb3e024eb95a2868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6294d56156b29168f135da5cfb3e024eb95a2868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "html_url": "https://github.com/rust-lang/rust/commit/1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b7ec348783f1ebd3c4610c56ec02608dd3dad54/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e112d28288566d7b3305e78d010bffd2aec89d", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e112d28288566d7b3305e78d010bffd2aec89d", "html_url": "https://github.com/rust-lang/rust/commit/99e112d28288566d7b3305e78d010bffd2aec89d"}], "stats": {"total": 71, "additions": 29, "deletions": 42}, "files": [{"sha": "e68d601a98d7d2e51d2f28949107660123e45700", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1b7ec348783f1ebd3c4610c56ec02608dd3dad54/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b7ec348783f1ebd3c4610c56ec02608dd3dad54/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=1b7ec348783f1ebd3c4610c56ec02608dd3dad54", "patch": "@@ -104,41 +104,6 @@ pub enum Action {\n     Complete,\n }\n \n-pub struct PinnedGenerator<I, A, R> {\n-    generator: Pin<Box<dyn Generator<Action, Yield = YieldType<I, A>, Return = R>>>,\n-}\n-\n-impl<I, A, R> PinnedGenerator<I, A, R> {\n-    pub fn new<T: Generator<Action, Yield = YieldType<I, A>, Return = R> + 'static>(\n-        generator: T,\n-    ) -> (I, Self) {\n-        let mut result = PinnedGenerator { generator: Box::pin(generator) };\n-\n-        // Run it to the first yield to set it up\n-        let init = match Pin::new(&mut result.generator).resume(Action::Initial) {\n-            GeneratorState::Yielded(YieldType::Initial(y)) => y,\n-            _ => panic!(),\n-        };\n-\n-        (init, result)\n-    }\n-\n-    pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n-        // Call the generator, which in turn will call the closure\n-        if let GeneratorState::Complete(_) =\n-            Pin::new(&mut self.generator).resume(Action::Access(AccessAction(closure)))\n-        {\n-            panic!()\n-        }\n-    }\n-\n-    pub fn complete(&mut self) -> R {\n-        // Tell the generator we want it to complete, consuming it and yielding a result\n-        let result = Pin::new(&mut self.generator).resume(Action::Complete);\n-        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n-    }\n-}\n-\n #[derive(PartialEq)]\n pub struct Marker<T>(PhantomData<T>);\n \n@@ -153,9 +118,17 @@ pub enum YieldType<I, A> {\n     Accessor(Marker<A>),\n }\n \n-pub struct BoxedResolver(\n-    PinnedGenerator<Result<ast::Crate>, fn(&mut Resolver<'_>), ResolverOutputs>,\n-);\n+pub struct BoxedResolver {\n+    generator: Pin<\n+        Box<\n+            dyn Generator<\n+                Action,\n+                Yield = YieldType<Result<ast::Crate>, fn(&mut Resolver<'_>)>,\n+                Return = ResolverOutputs,\n+            >,\n+        >,\n+    >,\n+}\n \n impl BoxedResolver {\n     fn new<T>(generator: T) -> (Result<ast::Crate>, Self)\n@@ -166,8 +139,15 @@ impl BoxedResolver {\n                 Return = ResolverOutputs,\n             > + 'static,\n     {\n-        let (initial, pinned) = PinnedGenerator::new(generator);\n-        (initial, BoxedResolver(pinned))\n+        let mut generator = Box::pin(generator);\n+\n+        // Run it to the first yield to set it up\n+        let init = match Pin::new(&mut generator).resume(Action::Initial) {\n+            GeneratorState::Yielded(YieldType::Initial(y)) => y,\n+            _ => panic!(),\n+        };\n+\n+        (init, BoxedResolver { generator })\n     }\n \n     pub fn access<F: FnOnce(&mut Resolver<'_>) -> R, R>(&mut self, f: F) -> R {\n@@ -183,15 +163,22 @@ impl BoxedResolver {\n \n         // Get the generator to call our closure\n         unsafe {\n-            self.0.access(::std::mem::transmute(mut_f));\n+            // Call the generator, which in turn will call the closure\n+            if let GeneratorState::Complete(_) = Pin::new(&mut self.generator)\n+                .resume(Action::Access(AccessAction(::std::mem::transmute(mut_f))))\n+            {\n+                panic!()\n+            }\n         }\n \n         // Unwrap the result\n         r.unwrap()\n     }\n \n     pub fn complete(mut self) -> ResolverOutputs {\n-        self.0.complete()\n+        // Tell the generator we want it to complete, consuming it and yielding a result\n+        let result = Pin::new(&mut self.generator).resume(Action::Complete);\n+        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n     }\n \n     fn initial_yield("}]}