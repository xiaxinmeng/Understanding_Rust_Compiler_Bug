{"sha": "893c70d7bc670054ef646b71d4d503298cc50d76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5M2M3MGQ3YmM2NzAwNTRlZjY0NmI3MWQ0ZDUwMzI5OGNjNTBkNzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-15T01:27:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-15T02:12:37Z"}, "message": "Add Zero impls for lots of common types", "tree": {"sha": "2903a8e7a012b17c6f8ad9efff4f18e76d12051d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2903a8e7a012b17c6f8ad9efff4f18e76d12051d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/893c70d7bc670054ef646b71d4d503298cc50d76", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/893c70d7bc670054ef646b71d4d503298cc50d76", "html_url": "https://github.com/rust-lang/rust/commit/893c70d7bc670054ef646b71d4d503298cc50d76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/893c70d7bc670054ef646b71d4d503298cc50d76/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f5ab10096718a296825b3b628081559d738810", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f5ab10096718a296825b3b628081559d738810", "html_url": "https://github.com/rust-lang/rust/commit/07f5ab10096718a296825b3b628081559d738810"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "7bfac2927c8dcc3b9856bb29f5b8ca27d3f8b7a4", "filename": "src/libstd/char.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=893c70d7bc670054ef646b71d4d503298cc50d76", "patch": "@@ -17,8 +17,8 @@ use u32;\n use uint;\n use unicode::{derived_property, general_category};\n \n-#[cfg(not(test))]\n-use cmp::{Eq, Ord};\n+#[cfg(not(test))] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use num::Zero;\n \n /*\n     Lu  Uppercase_Letter        an uppercase letter\n@@ -328,6 +328,12 @@ impl Ord for char {\n     fn ge(&self, other: &char) -> bool { *self >= *other }\n }\n \n+#[cfg(not(test))]\n+impl Zero for char {\n+    fn zero() -> char { 0 as char }\n+    fn is_zero(&self) -> bool { *self == 0 as char }\n+}\n+\n #[test]\n fn test_is_lowercase() {\n     assert!('a'.is_lowercase());"}, {"sha": "4681e4f4f53ff2da03bdcb916a5c4f53e6fa7295", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=893c70d7bc670054ef646b71d4d503298cc50d76", "patch": "@@ -418,6 +418,21 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(radix: uint, pow\n     total\n }\n \n+impl<T: Zero> Zero for @mut T {\n+    fn zero() -> @mut T { @mut Zero::zero() }\n+    fn is_zero(&self) -> bool { (**self).is_zero() }\n+}\n+\n+impl<T: Zero> Zero for @T {\n+    fn zero() -> @T { @Zero::zero() }\n+    fn is_zero(&self) -> bool { (**self).is_zero() }\n+}\n+\n+impl<T: Zero> Zero for ~T {\n+    fn zero() -> ~T { ~Zero::zero() }\n+    fn is_zero(&self) -> bool { (**self).is_zero() }\n+}\n+\n /// Helper function for testing numeric operations\n #[cfg(test)]\n pub fn test_num<T:Num + NumCast>(ten: T, two: T) {"}, {"sha": "7627270644594c07fa8ac9db1e84ed1bca7d0668", "filename": "src/libstd/option.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=893c70d7bc670054ef646b71d4d503298cc50d76", "patch": "@@ -350,6 +350,11 @@ impl<T:Copy + Zero> Option<T> {\n     }\n }\n \n+impl<T> Zero for Option<T> {\n+    fn zero() -> Option<T> { None }\n+    fn is_zero(&self) -> bool { self.is_none() }\n+}\n+\n /// Immutable iterator over an `Option<A>`\n pub struct OptionIterator<'self, A> {\n     priv opt: Option<&'self A>"}, {"sha": "78ac0aae2f0b1a6f636dad23e6aad8fc10b697c1", "filename": "src/libstd/str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=893c70d7bc670054ef646b71d4d503298cc50d76", "patch": "@@ -28,6 +28,7 @@ use container::Container;\n use iter::Times;\n use iterator::{Iterator, IteratorUtil, FilterIterator, AdditiveIterator};\n use libc;\n+use num::Zero;\n use option::{None, Option, Some};\n use old_iter::{BaseIter, EqIter};\n use ptr;\n@@ -2250,6 +2251,16 @@ impl<'self> Iterator<u8> for StrBytesRevIterator<'self> {\n     }\n }\n \n+impl Zero for ~str {\n+    fn zero() -> ~str { ~\"\" }\n+    fn is_zero(&self) -> bool { self.len() == 0 }\n+}\n+\n+impl Zero for @str {\n+    fn zero() -> @str { @\"\" }\n+    fn is_zero(&self) -> bool { self.len() == 0 }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use iterator::IteratorUtil;"}, {"sha": "b80f152a5b1da75153696df30a5f5e9572798218", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=893c70d7bc670054ef646b71d4d503298cc50d76", "patch": "@@ -135,6 +135,7 @@ macro_rules! tuple_impls {\n         pub mod inner {\n             use clone::Clone;\n             #[cfg(not(test))] use cmp::*;\n+            #[cfg(not(test))] use num::Zero;\n \n             $(\n                 pub trait $cloneable_trait<$($T),+> {\n@@ -210,6 +211,18 @@ macro_rules! tuple_impls {\n                         lexical_cmp!($(self.$get_ref_fn(), other.$get_ref_fn()),+)\n                     }\n                 }\n+\n+                #[cfg(not(test))]\n+                impl<$($T:Zero),+> Zero for ($($T),+) {\n+                    #[inline]\n+                    fn zero() -> ($($T),+) {\n+                        ($(Zero::zero::<$T>()),+)\n+                    }\n+                    #[inline]\n+                    fn is_zero(&self) -> bool {\n+                        $(self.$get_ref_fn().is_zero())&&+\n+                    }\n+                }\n             )+\n         }\n     }"}, {"sha": "b8f18ba47ca73c834b66c4f769c84b72ac8b7b30", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/893c70d7bc670054ef646b71d4d503298cc50d76/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=893c70d7bc670054ef646b71d4d503298cc50d76", "patch": "@@ -23,6 +23,7 @@ use iterator::{Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n use libc;\n+use num::Zero;\n use old_iter::CopyableIter;\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n@@ -2702,6 +2703,16 @@ impl<A:Clone> Clone for ~[A] {\n     }\n }\n \n+impl<A> Zero for ~[A] {\n+    fn zero() -> ~[A] { ~[] }\n+    fn is_zero(&self) -> bool { self.len() == 0 }\n+}\n+\n+impl<A> Zero for @[A] {\n+    fn zero() -> @[A] { @[] }\n+    fn is_zero(&self) -> bool { self.len() == 0 }\n+}\n+\n macro_rules! iterator {\n     /* FIXME: #4375 Cannot attach documentation/attributes to a macro generated struct.\n     (struct $name:ident -> $ptr:ty, $elem:ty) => {"}]}