{"sha": "c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NDEyYWVlYmM0MzJhYjQ5ZDQ2ZmUxZjQ1YTBmYjUzMjJjODA1ZDE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-14T13:31:04Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-30T22:29:38Z"}, "message": "handle macros returning Strings in single_char_push_str and single_char_insert_str", "tree": {"sha": "73159274516f83f3dd26c304df62fee544652a3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73159274516f83f3dd26c304df62fee544652a3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "html_url": "https://github.com/rust-lang/rust/commit/c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2350ee75b2cc9c3d8cfbbb8d950012678913b92d", "html_url": "https://github.com/rust-lang/rust/commit/2350ee75b2cc9c3d8cfbbb8d950012678913b92d"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "68a152270e05e31cc7e74c61a3c56a7188f2d7ea", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -3243,7 +3243,8 @@ fn lint_single_char_pattern(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &h\n fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[1], &mut applicability) {\n-        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n+        let base_string_snippet =\n+            snippet_with_applicability(cx, args[0].span.source_callsite(), \"..\", &mut applicability);\n         let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n         span_lint_and_sugg(\n             cx,\n@@ -3261,7 +3262,8 @@ fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args\n fn lint_single_char_insert_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[2], &mut applicability) {\n-        let base_string_snippet = snippet_with_applicability(cx, args[0].span, \"_\", &mut applicability);\n+        let base_string_snippet =\n+            snippet_with_applicability(cx, args[0].span.source_callsite(), \"_\", &mut applicability);\n         let pos_arg = snippet(cx, args[1].span, \"..\");\n         let sugg = format!(\"{}.insert({}, {})\", base_string_snippet, pos_arg, extension_string);\n         span_lint_and_sugg("}, {"sha": "fd43f9133300be637d761a6c2baa4167328fe0fa", "filename": "tests/ui/single_char_insert_str.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_insert_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_insert_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.fixed?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![warn(clippy::single_char_push_str)]\n \n+macro_rules! get_string {\n+    () => {\n+        String::from(\"Hello world!\")\n+    };\n+}\n+\n fn main() {\n     let mut string = String::new();\n     string.insert(0, 'R');\n@@ -15,4 +21,6 @@ fn main() {\n     string.insert(x, 'a');\n     const Y: usize = 1;\n     string.insert(Y, 'a');\n+\n+    get_string!().insert(1, '?');\n }"}, {"sha": "4278f7ef9fdfa198bd91023d8c069b35c599b133", "filename": "tests/ui/single_char_insert_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_insert_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_insert_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.rs?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![warn(clippy::single_char_push_str)]\n \n+macro_rules! get_string {\n+    () => {\n+        String::from(\"Hello world!\")\n+    };\n+}\n+\n fn main() {\n     let mut string = String::new();\n     string.insert_str(0, \"R\");\n@@ -15,4 +21,6 @@ fn main() {\n     string.insert_str(x, r##\"a\"##);\n     const Y: usize = 1;\n     string.insert_str(Y, r##\"a\"##);\n+\n+    get_string!().insert_str(1, \"?\");\n }"}, {"sha": "3d00c91a2ac24f82d3d3fdd192922a01b5e57997", "filename": "tests/ui/single_char_insert_str.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_insert_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_insert_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.stderr?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -1,40 +1,46 @@\n error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:6:5\n+  --> $DIR/single_char_insert_str.rs:12:5\n    |\n LL |     string.insert_str(0, \"R\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, 'R')`\n    |\n    = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n \n error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:7:5\n+  --> $DIR/single_char_insert_str.rs:13:5\n    |\n LL |     string.insert_str(1, \"'\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(1, '/'')`\n \n error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:12:5\n+  --> $DIR/single_char_insert_str.rs:18:5\n    |\n LL |     string.insert_str(0, \"/x52\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/x52')`\n \n error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:13:5\n+  --> $DIR/single_char_insert_str.rs:19:5\n    |\n LL |     string.insert_str(0, \"/u{0052}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/u{0052}')`\n \n error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:15:5\n+  --> $DIR/single_char_insert_str.rs:21:5\n    |\n LL |     string.insert_str(x, r##\"a\"##);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(x, 'a')`\n \n error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:17:5\n+  --> $DIR/single_char_insert_str.rs:23:5\n    |\n LL |     string.insert_str(Y, r##\"a\"##);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, 'a')`\n \n-error: aborting due to 6 previous errors\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_insert_str.rs:25:5\n+   |\n+LL |     get_string!().insert_str(1, \"?\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `get_string!().insert(1, '?')`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "da742fe70e23ccb7ee5b27ce249101f5bec8df39", "filename": "tests/ui/single_char_push_str.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_push_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_push_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.fixed?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![warn(clippy::single_char_push_str)]\n \n+macro_rules! get_string {\n+    () => {\n+        String::from(\"Hello world!\")\n+    };\n+}\n+\n fn main() {\n     let mut string = String::new();\n     string.push('R');\n@@ -12,4 +18,6 @@ fn main() {\n     string.push('\\x52');\n     string.push('\\u{0052}');\n     string.push('a');\n+\n+    get_string!().push_str(\"\u00f6\");\n }"}, {"sha": "a8203e6503ef9ebd8610b1796a75d2771f5ebcd7", "filename": "tests/ui/single_char_push_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.rs?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -1,6 +1,12 @@\n // run-rustfix\n #![warn(clippy::single_char_push_str)]\n \n+macro_rules! get_string {\n+    () => {\n+        String::from(\"Hello world!\")\n+    };\n+}\n+\n fn main() {\n     let mut string = String::new();\n     string.push_str(\"R\");\n@@ -12,4 +18,6 @@ fn main() {\n     string.push_str(\"\\x52\");\n     string.push_str(\"\\u{0052}\");\n     string.push_str(r##\"a\"##);\n+\n+    get_string!().push_str(\"\u00f6\");\n }"}, {"sha": "1f53558912121835694fd6145285995c2905d6f0", "filename": "tests/ui/single_char_push_str.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_push_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6412aeebc432ab49d46fe1f45a0fb5322c805d1/tests%2Fui%2Fsingle_char_push_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.stderr?ref=c6412aeebc432ab49d46fe1f45a0fb5322c805d1", "patch": "@@ -1,31 +1,31 @@\n error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:6:5\n+  --> $DIR/single_char_push_str.rs:12:5\n    |\n LL |     string.push_str(\"R\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n    |\n    = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n \n error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:7:5\n+  --> $DIR/single_char_push_str.rs:13:5\n    |\n LL |     string.push_str(\"'\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n \n error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:12:5\n+  --> $DIR/single_char_push_str.rs:18:5\n    |\n LL |     string.push_str(\"/x52\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n \n error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:13:5\n+  --> $DIR/single_char_push_str.rs:19:5\n    |\n LL |     string.push_str(\"/u{0052}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n \n error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:14:5\n+  --> $DIR/single_char_push_str.rs:20:5\n    |\n LL |     string.push_str(r##\"a\"##);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`"}]}