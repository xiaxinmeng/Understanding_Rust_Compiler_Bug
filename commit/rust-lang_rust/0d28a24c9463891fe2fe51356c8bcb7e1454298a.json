{"sha": "0d28a24c9463891fe2fe51356c8bcb7e1454298a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjhhMjRjOTQ2Mzg5MWZlMmZlNTEzNTZjOGJjYjdlMTQ1NDI5OGE=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2019-02-08T08:43:15Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2019-02-08T08:50:54Z"}, "message": "Remove code for updating copyright years in generate-deriving-span-tests\n\nIt's no longer necessary, as there is no license header anymore.", "tree": {"sha": "e4d550cf415a24332481f3b985854b0c219eac54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d550cf415a24332481f3b985854b0c219eac54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d28a24c9463891fe2fe51356c8bcb7e1454298a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d28a24c9463891fe2fe51356c8bcb7e1454298a", "html_url": "https://github.com/rust-lang/rust/commit/0d28a24c9463891fe2fe51356c8bcb7e1454298a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d28a24c9463891fe2fe51356c8bcb7e1454298a/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e04fb5522642b6b5230592934e9ee100f2fd56", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e04fb5522642b6b5230592934e9ee100f2fd56", "html_url": "https://github.com/rust-lang/rust/commit/43e04fb5522642b6b5230592934e9ee100f2fd56"}], "stats": {"total": 28, "additions": 6, "deletions": 22}, "files": [{"sha": "9bd99dc4ceccf34cc00f771536f5f65c4a648e38", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d28a24c9463891fe2fe51356c8bcb7e1454298a/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/0d28a24c9463891fe2fe51356c8bcb7e1454298a/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=0d28a24c9463891fe2fe51356c8bcb7e1454298a", "patch": "@@ -8,13 +8,11 @@\n sample usage: src/etc/generate-deriving-span-tests.py\n \"\"\"\n \n-import os, datetime, stat, re\n+import os, stat\n \n TEST_DIR = os.path.abspath(\n     os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n-YEAR = datetime.datetime.now().year\n-\n TEMPLATE = \"\"\"\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n@@ -63,19 +61,11 @@ def create_test_case(type, trait, super_traits, error_count):\n \n     errors = '\\n'.join('//~%s ERROR' % ('^' * n) for n in range(error_count))\n     code = string.format(traits = all_traits, errors = errors)\n-    return TEMPLATE.format(year = YEAR, error_deriving=error_deriving, code = code)\n+    return TEMPLATE.format(error_deriving=error_deriving, code = code)\n \n def write_file(name, string):\n     test_file = os.path.join(TEST_DIR, 'derives-span-%s.rs' % name)\n \n-    with open(test_file) as f:\n-        old_str = f.read()\n-        old_str_ignoring_date = re.sub(r'^// Copyright \\d+',\n-                                        '// Copyright {year}'.format(year = YEAR), old_str)\n-        if old_str_ignoring_date == string:\n-            # if all we're doing is updating the copyright year, ignore it\n-            return 0\n-\n     # set write permission if file exists, so it can be changed\n     if os.path.exists(test_file):\n         os.chmod(test_file, stat.S_IWUSR)\n@@ -86,8 +76,6 @@ def write_file(name, string):\n     # mark file read-only\n     os.chmod(test_file, stat.S_IRUSR|stat.S_IRGRP|stat.S_IROTH)\n \n-    return 1\n-\n \n ENUM = 1\n STRUCT = 2\n@@ -110,15 +98,11 @@ def write_file(name, string):\n                               ('Hash', [], 1)]:\n     traits[trait] = (ALL, supers, errs)\n \n-files = 0\n-\n for (trait, (types, super_traits, error_count)) in traits.items():\n     mk = lambda ty: create_test_case(ty, trait, super_traits, error_count)\n     if types & ENUM:\n-        files += write_file(trait + '-enum', mk(ENUM_TUPLE))\n-        files += write_file(trait + '-enum-struct-variant', mk(ENUM_STRUCT))\n+        write_file(trait + '-enum', mk(ENUM_TUPLE))\n+        write_file(trait + '-enum-struct-variant', mk(ENUM_STRUCT))\n     if types & STRUCT:\n-        files += write_file(trait + '-struct', mk(STRUCT_FIELDS))\n-        files += write_file(trait + '-tuple-struct', mk(STRUCT_TUPLE))\n-\n-print('Generated {files} deriving span test{}.'.format('s' if files != 1 else '', files = files))\n+        write_file(trait + '-struct', mk(STRUCT_FIELDS))\n+        write_file(trait + '-tuple-struct', mk(STRUCT_TUPLE))"}]}