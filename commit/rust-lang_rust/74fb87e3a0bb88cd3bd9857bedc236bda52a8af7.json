{"sha": "74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZmI4N2UzYTBiYjg4Y2QzYmQ5ODU3YmVkYzIzNmJkYTUyYThhZjc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-16T14:54:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-01T18:13:16Z"}, "message": "Stop sorting bodies by span.\n\nThe definition order is already close to the span order, and only differs\nin corner cases.", "tree": {"sha": "0d0cb93dccd8dabac1ebbc365c6122b99f4332b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d0cb93dccd8dabac1ebbc365c6122b99f4332b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "html_url": "https://github.com/rust-lang/rust/commit/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3407f482d29f26c67700974d86f89b3f2ab993", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3407f482d29f26c67700974d86f89b3f2ab993", "html_url": "https://github.com/rust-lang/rust/commit/ad3407f482d29f26c67700974d86f89b3f2ab993"}], "stats": {"total": 281, "additions": 130, "deletions": 151}, "files": [{"sha": "196d48faf5173c013625fa9e5ee23accc9d8fd55", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -516,7 +516,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.owners.ensure_contains_elem(CRATE_DEF_ID, || None);\n         self.owners[CRATE_DEF_ID] = Some(hir::OwnerNode::Crate(module));\n \n-        let body_ids = body_ids(&self.bodies);\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n@@ -552,7 +551,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let krate = hir::Crate {\n             owners: self.owners,\n             bodies: self.bodies,\n-            body_ids,\n             trait_impls: self.trait_impls,\n             modules: self.modules,\n             proc_macros,\n@@ -2771,14 +2769,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n }\n \n-fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'_>>) -> Vec<hir::BodyId> {\n-    // Sorting by span ensures that we get things in order within a\n-    // file, and also puts the files in a sensible order.\n-    let mut body_ids: Vec<_> = bodies.keys().cloned().collect();\n-    body_ids.sort_by_key(|b| bodies[b].value.span);\n-    body_ids\n-}\n-\n /// Helper struct for delayed construction of GenericArgs.\n struct GenericArgsCtor<'hir> {\n     args: SmallVec<[hir::GenericArg<'hir>; 4]>,"}, {"sha": "d629cb602145631f25acc8197bc2543ef6513aaa", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -674,12 +674,6 @@ pub struct Crate<'hir> {\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n     pub trait_impls: BTreeMap<DefId, Vec<LocalDefId>>,\n \n-    /// A list of the body ids written out in the order in which they\n-    /// appear in the crate. If you're going to process all the bodies\n-    /// in the crate, you should iterate over this list rather than the keys\n-    /// of bodies.\n-    pub body_ids: Vec<BodyId>,\n-\n     /// A list of modules written out in the order in which they\n     /// appear in the crate. This includes the main crate module.\n     pub modules: BTreeMap<LocalDefId, ModuleItems>,"}, {"sha": "cfb49b7d9b8c57681850e9ff83708d18abd9f3bc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1677,16 +1677,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n     pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + Captures<'tcx> + 'tcx {\n-        self.hir()\n-            .krate()\n-            .body_ids\n-            .iter()\n-            .map(move |&body_id| self.hir().body_owner_def_id(body_id))\n+        self.hir().krate().bodies.keys().map(move |&body_id| self.hir().body_owner_def_id(body_id))\n     }\n \n     pub fn par_body_owners<F: Fn(LocalDefId) + sync::Sync + sync::Send>(self, f: F) {\n-        par_iter(&self.hir().krate().body_ids)\n-            .for_each(|&body_id| f(self.hir().body_owner_def_id(body_id)));\n+        par_iter(&self.hir().krate().bodies)\n+            .for_each(|(&body_id, _)| f(self.hir().body_owner_def_id(body_id)));\n     }\n \n     pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {"}, {"sha": "cb127880c62b315c41ee3bb6547ef463cd1358a4", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -9,8 +9,7 @@ use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = FxHashSet::default();\n-    for &body_id in tcx.hir().krate().bodies.keys() {\n-        let item_def_id = tcx.hir().body_owner_def_id(body_id);\n+    for item_def_id in tcx.body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());"}, {"sha": "5edbcf4a2a7c939a327dc66b1a9e8042d31de97a", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -25,6 +25,21 @@ LL |         let x = 0;\n LL |         asm!(\"{}\", const const_bar(x));\n    |                                    ^ non-constant value\n \n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:48:26\n+   |\n+LL |         asm!(\"{}\", const 0f32);\n+   |                          ^^^^ expected integer, found `f32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:50:26\n+   |\n+LL |         asm!(\"{}\", const 0 as *mut u8);\n+   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n+   |\n+   = note:     expected type `{integer}`\n+           found raw pointer `*mut u8`\n+\n error: invalid asm output\n   --> $DIR/type-check-1.rs:10:29\n    |\n@@ -64,21 +79,6 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = help: the trait `Sized` is not implemented for `[u64]`\n    = note: all inline asm arguments must have a statically known size\n \n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:48:26\n-   |\n-LL |         asm!(\"{}\", const 0f32);\n-   |                          ^^^^ expected integer, found `f32`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:50:26\n-   |\n-LL |         asm!(\"{}\", const 0 as *mut u8);\n-   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n-   |\n-   = note:     expected type `{integer}`\n-           found raw pointer `*mut u8`\n-\n error[E0308]: mismatched types\n   --> $DIR/type-check-1.rs:60:25\n    |"}, {"sha": "14e1667038965b772576cbc3106e1b071bcc5d9a", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,9 +1,3 @@\n-error[E0507]: cannot move out of static item `settings_dir`\n-  --> $DIR/issue-64453.rs:14:37\n-   |\n-LL |     let settings_data = from_string(settings_dir);\n-   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `String`, which does not implement the `Copy` trait\n-\n error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n   --> $DIR/issue-64453.rs:4:31\n    |\n@@ -21,6 +15,12 @@ LL | static settings_dir: String = format!(\"\");\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error[E0507]: cannot move out of static item `settings_dir`\n+  --> $DIR/issue-64453.rs:14:37\n+   |\n+LL |     let settings_data = from_string(settings_dir);\n+   |                                     ^^^^^^^^^^^^ move occurs because `settings_dir` has type `String`, which does not implement the `Copy` trait\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0507."}, {"sha": "8d779bee265cf2914c24c6f12b3272bb35578e5c", "filename": "src/test/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -4,12 +4,6 @@ error[E0308]: mismatched types\n LL |     bar::<N>()\n    |           ^ expected `u8`, found `usize`\n \n-error[E0308]: mismatched types\n-  --> $DIR/type_mismatch.rs:5:31\n-   |\n-LL | fn bar<const N: u8>() -> [u8; N] {}\n-   |                               ^ expected `usize`, found `u8`\n-\n error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:5:26\n    |\n@@ -18,6 +12,12 @@ LL | fn bar<const N: u8>() -> [u8; N] {}\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:31\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |                               ^ expected `usize`, found `u8`\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "33014a1500cf7061793586bf57f37ac5db885ea3", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,16 +1,16 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n-LL |     foo();\n-   |     ^^^^^ call to unsafe function\n+LL |     let a: [u8; foo()];\n+   |                 ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n+  --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n-LL |     let a: [u8; foo()];\n-   |                 ^^^^^ call to unsafe function\n+LL |     foo();\n+   |     ^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "3349e9813a809e08a19bdc9e5ec2ca27c49d80db", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,11 +1,3 @@\n-error: argument to `panic!()` in a const context must have type `&str`\n-  --> $DIR/issue-66693.rs:13:5\n-   |\n-LL |     panic!(&1);\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:6:15\n    |\n@@ -22,5 +14,13 @@ LL | static _FOO: () = panic!(true);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:13:5\n+   |\n+LL |     panic!(&1);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "a029948ca3b82bba510816c6dc1d7fdbd3c6dd3c", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,15 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-47486.rs:3:31\n+   |\n+LL |     [0u8; std::mem::size_of::<_>()];\n+   |                               ^ cannot infer type\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-47486.rs:2:10\n    |\n LL |     () < std::mem::size_of::<_>();\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-47486.rs:3:11\n-   |\n-LL |     [0u8; std::mem::size_of::<_>()];\n-   |           ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0282, E0308."}, {"sha": "d9dac5de6226c304f9c044686fb98ccabfddec5c", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,17 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n-   |\n-LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n-   |                                ---      ^^^    - help: consider removing this semicolon\n-   |                                |        |\n-   |                                |        expected `i32`, found `()`\n-   |                                implicitly returns `()` as its body has no tail or `return` expression\n-...\n-LL |     test!();\n-   |     -------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n    |\n@@ -38,6 +24,20 @@ LL | fn baz(x: u64) -> u32 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n+error[E0308]: mismatched types\n+  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n+   |\n+LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n+   |                                ---      ^^^    - help: consider removing this semicolon\n+   |                                |        |\n+   |                                |        expected `i32`, found `()`\n+   |                                implicitly returns `()` as its body has no tail or `return` expression\n+...\n+LL |     test!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "127c49957c1e55b3032a14cc937d70113c57370c", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,3 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/attribute-with-error.rs:25:22\n+   |\n+LL |         let a: i32 = \"foo\";\n+   |                ---   ^^^^^ expected `i32`, found `&str`\n+   |                |\n+   |                expected due to this\n+\n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:10:18\n    |\n@@ -14,14 +22,6 @@ LL |     let b: i32 = \"f'oo\";\n    |            |\n    |            expected due to this\n \n-error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:25:22\n-   |\n-LL |         let a: i32 = \"foo\";\n-   |                ---   ^^^^^ expected `i32`, found `&str`\n-   |                |\n-   |                expected due to this\n-\n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |"}, {"sha": "c85f057203146ffdc52157e9f903a196c862a5f2", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -30,12 +30,6 @@ error[E0308]: mismatched types\n LL |     let e = [0; \"foo\"];\n    |                 ^^^^^ expected `usize`, found `&str`\n \n-error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:31:17\n-   |\n-LL |     let g = [0; G { g: () }];\n-   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n-\n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:19:17\n    |\n@@ -63,6 +57,12 @@ help: change the type of the numeric literal from `u8` to `usize`\n LL |     let f = [0; 4usize];\n    |                 ~~~~~~\n \n+error[E0308]: mismatched types\n+  --> $DIR/repeat_count.rs:31:17\n+   |\n+LL |     let g = [0; G { g: () }];\n+   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n+\n error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0308, E0435."}, {"sha": "bb7919ebb7996338108f03caa21f05031f67647d", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,20 +1,3 @@\n-error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n-  --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n-   |\n-LL |         qux(constraint);\n-   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |\n-   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n-note: required by a bound in `qux`\n-  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n-   |\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n-help: introduce a type parameter with a trait bound instead of using `impl Trait`\n-   |\n-LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n-   |       +++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n-\n error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:14:13\n    |\n@@ -83,6 +66,23 @@ help: introduce a type parameter with a trait bound instead of using `impl Trait\n LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as Iterator>::Item: Debug {\n    |       +++++++++++++++++++++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n \n+error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n+   |\n+LL |         qux(constraint);\n+   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n+   |       +++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n+\n error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:45:13\n    |"}, {"sha": "1f41d2329ee9ef18780f4a6042f288072b37cabb", "filename": "src/test/ui/suggestions/suggest-ref-macro.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,11 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/suggest-ref-macro.rs:8:1\n-   |\n-LL | #[hello]\n-   | ^^^^^^^^ expected `&mut i32`, found integer\n-   |\n-   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:15:11\n    |\n@@ -29,6 +21,14 @@ LL |     bla!(456);\n    |          expected `&mut i32`, found integer\n    |          help: consider mutably borrowing here: `&mut 456`\n \n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:8:1\n+   |\n+LL | #[hello]\n+   | ^^^^^^^^ expected `&mut i32`, found integer\n+   |\n+   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "b52117cd19cca32b262e4228f63bd1f42c56dfa1", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,16 +1,3 @@\n-error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:6:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   |\n-note: required by a bound in `AssertParamIsCopy`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:38:15\n    |\n@@ -30,6 +17,19 @@ LL |     let w = u.clone();\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n \n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   |\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0599."}, {"sha": "b52117cd19cca32b262e4228f63bd1f42c56dfa1", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74fb87e3a0bb88cd3bd9857bedc236bda52a8af7/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=74fb87e3a0bb88cd3bd9857bedc236bda52a8af7", "patch": "@@ -1,16 +1,3 @@\n-error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:6:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   |\n-note: required by a bound in `AssertParamIsCopy`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:38:15\n    |\n@@ -30,6 +17,19 @@ LL |     let w = u.clone();\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n \n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   |\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0599."}]}