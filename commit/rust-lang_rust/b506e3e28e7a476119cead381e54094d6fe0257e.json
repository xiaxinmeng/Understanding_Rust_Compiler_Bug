{"sha": "b506e3e28e7a476119cead381e54094d6fe0257e", "node_id": "C_kwDOAAsO6NoAKGI1MDZlM2UyOGU3YTQ3NjExOWNlYWQzODFlNTQwOTRkNmZlMDI1N2U", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-09-29T20:07:27Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-29T21:11:40Z"}, "message": "Renovate for Edition 2021\n\nIn a still-future edition, `unsafe_op_in_unsafe_fn` may error.\nLet's get ahead of that.", "tree": {"sha": "09d1b9af39806a3c06fdb61d106f97afd5a597e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d1b9af39806a3c06fdb61d106f97afd5a597e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b506e3e28e7a476119cead381e54094d6fe0257e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b506e3e28e7a476119cead381e54094d6fe0257e", "html_url": "https://github.com/rust-lang/rust/commit/b506e3e28e7a476119cead381e54094d6fe0257e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b506e3e28e7a476119cead381e54094d6fe0257e/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd7c5a5eec9d885388044dcbcd5880d20eddfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd7c5a5eec9d885388044dcbcd5880d20eddfcb", "html_url": "https://github.com/rust-lang/rust/commit/afd7c5a5eec9d885388044dcbcd5880d20eddfcb"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "a103ef115a58626aaa3b21e30847995c49de5482", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=b506e3e28e7a476119cead381e54094d6fe0257e", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"core_simd\"\n version = \"0.1.0\"\n-edition = \"2018\"\n+edition = \"2021\"\n homepage = \"https://github.com/rust-lang/portable-simd\"\n repository = \"https://github.com/rust-lang/portable-simd\"\n keywords = [\"core\", \"simd\", \"intrinsics\"]"}, {"sha": "2d5949f8e7911980c319582427328fb28b093614", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=b506e3e28e7a476119cead381e54094d6fe0257e", "patch": "@@ -11,6 +11,7 @@\n )]\n #![cfg_attr(feature = \"generic_const_exprs\", feature(generic_const_exprs))]\n #![warn(missing_docs)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![unstable(feature = \"portable_simd\", issue = \"86656\")]\n //! Portable SIMD module.\n "}, {"sha": "1b1677330fb66d66806360a3311cf18505a1c17b", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=b506e3e28e7a476119cead381e54094d6fe0257e", "patch": "@@ -118,7 +118,7 @@ where\n     /// All lanes must be either 0 or -1.\n     #[inline]\n     pub unsafe fn from_int_unchecked(value: Simd<T, LANES>) -> Self {\n-        Self(mask_impl::Mask::from_int_unchecked(value))\n+        unsafe { Self(mask_impl::Mask::from_int_unchecked(value)) }\n     }\n \n     /// Converts a vector of integers to a mask, where 0 represents `false` and -1\n@@ -145,7 +145,7 @@ where\n     /// `lane` must be less than `LANES`.\n     #[inline]\n     pub unsafe fn test_unchecked(&self, lane: usize) -> bool {\n-        self.0.test_unchecked(lane)\n+        unsafe { self.0.test_unchecked(lane) }\n     }\n \n     /// Tests the value of the specified lane.\n@@ -164,7 +164,9 @@ where\n     /// `lane` must be less than `LANES`.\n     #[inline]\n     pub unsafe fn set_unchecked(&mut self, lane: usize, value: bool) {\n-        self.0.set_unchecked(lane, value);\n+        unsafe {\n+            self.0.set_unchecked(lane, value);\n+        }\n     }\n \n     /// Sets the value of the specified lane."}, {"sha": "2689e1a88a8c4b4256d0262244c0b6170489778b", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=b506e3e28e7a476119cead381e54094d6fe0257e", "patch": "@@ -93,7 +93,9 @@ where\n \n     #[inline]\n     pub unsafe fn set_unchecked(&mut self, lane: usize, value: bool) {\n-        self.0.as_mut()[lane / 8] ^= ((value ^ self.test_unchecked(lane)) as u8) << (lane % 8)\n+        unsafe {\n+            self.0.as_mut()[lane / 8] ^= ((value ^ self.test_unchecked(lane)) as u8) << (lane % 8)\n+        }\n     }\n \n     #[inline]\n@@ -112,9 +114,11 @@ where\n             core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::BitMask>(),\n             core::mem::size_of::<<LaneCount::<LANES> as SupportedLaneCount>::IntBitMask>(),\n         );\n-        let mask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n-            intrinsics::simd_bitmask(value);\n-        Self(core::mem::transmute_copy(&mask), PhantomData)\n+        unsafe {\n+            let mask: <LaneCount<LANES> as SupportedLaneCount>::IntBitMask =\n+                intrinsics::simd_bitmask(value);\n+            Self(core::mem::transmute_copy(&mask), PhantomData)\n+        }\n     }\n \n     #[cfg(feature = \"generic_const_exprs\")]"}, {"sha": "09789e1149206f9e648d0a03fa3568b9cad9ad57", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=b506e3e28e7a476119cead381e54094d6fe0257e", "patch": "@@ -61,7 +61,7 @@ macro_rules! implement {\n             /// * Be representable in the return type, after truncating off its fractional part\n             #[inline]\n             pub unsafe fn to_int_unchecked(self) -> Simd<$int_type, LANES> {\n-                intrinsics::simd_cast(self)\n+                unsafe { intrinsics::simd_cast(self) }\n             }\n \n             /// Creates a floating-point vector from an integer vector.  Rounds values that are"}, {"sha": "a04b0961d7f701adb9c5857ecdff01cdc61c7670", "filename": "crates/test_helpers/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Ftest_helpers%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b506e3e28e7a476119cead381e54094d6fe0257e/crates%2Ftest_helpers%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2FCargo.toml?ref=b506e3e28e7a476119cead381e54094d6fe0257e", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"test_helpers\"\n version = \"0.1.0\"\n-edition = \"2018\"\n+edition = \"2021\"\n publish = false\n \n [dependencies.proptest]"}]}