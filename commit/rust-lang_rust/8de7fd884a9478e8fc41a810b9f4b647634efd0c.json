{"sha": "8de7fd884a9478e8fc41a810b9f4b647634efd0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZTdmZDg4NGE5NDc4ZThmYzQxYTgxMGI5ZjRiNjQ3NjM0ZWZkMGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-19T01:48:46Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-12T12:32:51Z"}, "message": "Keep allocated vectors during dropck\n\nPreviously we'd frequently throw away vectors which is bad for\nperformance", "tree": {"sha": "ee23f15d3301d00effe94d6c50e8e24c467a1e4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee23f15d3301d00effe94d6c50e8e24c467a1e4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de7fd884a9478e8fc41a810b9f4b647634efd0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de7fd884a9478e8fc41a810b9f4b647634efd0c", "html_url": "https://github.com/rust-lang/rust/commit/8de7fd884a9478e8fc41a810b9f4b647634efd0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de7fd884a9478e8fc41a810b9f4b647634efd0c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fba55670f3f54356cd757ac6d221be42745fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/62fba55670f3f54356cd757ac6d221be42745fad", "html_url": "https://github.com/rust-lang/rust/commit/62fba55670f3f54356cd757ac6d221be42745fad"}], "stats": {"total": 111, "additions": 50, "deletions": 61}, "files": [{"sha": "c1316f415a559182709fc15dd9b75e809046224f", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 50, "deletions": 61, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/8de7fd884a9478e8fc41a810b9f4b647634efd0c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de7fd884a9478e8fc41a810b9f4b647634efd0c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=8de7fd884a9478e8fc41a810b9f4b647634efd0c", "patch": "@@ -80,22 +80,30 @@ fn dropck_outlives<'tcx>(\n             let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n \n             let cause = ObligationCause::dummy();\n+            let mut constraints = DtorckConstraint::empty();\n             while let Some((ty, depth)) = ty_stack.pop() {\n-                let DtorckConstraint {\n-                    dtorck_types,\n-                    outlives,\n-                    overflows,\n-                } = dtorck_constraint_for_ty(tcx, DUMMY_SP, for_ty, depth, ty)?;\n+                info!(\"{} kinds, {} overflows, {} ty_stack\",\n+                    result.kinds.len(), result.overflows.len(), ty_stack.len());\n+                dtorck_constraint_for_ty(tcx, DUMMY_SP, for_ty, depth, ty, &mut constraints)?;\n \n                 // \"outlives\" represent types/regions that may be touched\n                 // by a destructor.\n-                result.kinds.extend(outlives);\n-                result.overflows.extend(overflows);\n+                result.kinds.extend(constraints.outlives.drain(..));\n+                result.overflows.extend(constraints.overflows.drain(..));\n+\n+                // If we have even one overflow, we should stop trying to evaluate further --\n+                // chances are, the subsequent overflows for this evaluation won't provide useful\n+                // information and will just decrease the speed at which we can emit these errors\n+                // (since we'll be printing for just that much longer for the often enormous types\n+                // that result here).\n+                if result.overflows.len() >= 1 {\n+                    break;\n+                }\n \n                 // dtorck types are \"types that will get dropped but which\n                 // do not themselves define a destructor\", more or less. We have\n                 // to push them onto the stack to be expanded.\n-                for ty in dtorck_types {\n+                for ty in constraints.dtorck_types.drain(..) {\n                     match infcx.at(&cause, param_env).normalize(&ty) {\n                         Ok(Normalized {\n                             value: ty,\n@@ -152,25 +160,23 @@ fn dtorck_constraint_for_ty<'tcx>(\n     for_ty: Ty<'tcx>,\n     depth: usize,\n     ty: Ty<'tcx>,\n-) -> Result<DtorckConstraint<'tcx>, NoSolution> {\n+    constraints: &mut DtorckConstraint<'tcx>,\n+) -> Result<(), NoSolution> {\n     debug!(\n         \"dtorck_constraint_for_ty({:?}, {:?}, {:?}, {:?})\",\n         span, for_ty, depth, ty\n     );\n \n     if depth >= *tcx.sess.recursion_limit.get() {\n-        return Ok(DtorckConstraint {\n-            outlives: vec![],\n-            dtorck_types: vec![],\n-            overflows: vec![ty],\n-        });\n+        constraints.overflows.push(ty);\n+        return Ok(());\n     }\n \n     if tcx.trivial_dropck_outlives(ty) {\n-        return Ok(DtorckConstraint::empty());\n+        return Ok(());\n     }\n \n-    let result = match ty.kind {\n+    match ty.kind {\n         ty::Bool\n         | ty::Char\n         | ty::Int(_)\n@@ -185,22 +191,20 @@ fn dtorck_constraint_for_ty<'tcx>(\n         | ty::FnPtr(_)\n         | ty::GeneratorWitness(..) => {\n             // these types never have a destructor\n-            Ok(DtorckConstraint::empty())\n         }\n \n         ty::Array(ety, _) | ty::Slice(ety) => {\n             // single-element containers, behave like their element\n-            dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ety)\n+            dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ety, constraints)?;\n         }\n \n-        ty::Tuple(tys) => tys.iter()\n-            .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty.expect_ty()))\n-            .collect(),\n+        ty::Tuple(tys) => for ty in tys.iter() {\n+            dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty.expect_ty(), constraints)?;\n+        },\n \n-        ty::Closure(def_id, substs) => substs.as_closure()\n-            .upvar_tys(def_id, tcx)\n-            .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n-            .collect(),\n+        ty::Closure(def_id, substs) => for ty in substs.as_closure().upvar_tys(def_id, tcx) {\n+            dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty, constraints)?;\n+        }\n \n         ty::Generator(def_id, substs, _movability) => {\n             // rust-lang/rust#49918: types can be constructed, stored\n@@ -226,17 +230,8 @@ fn dtorck_constraint_for_ty<'tcx>(\n             // derived from lifetimes attached to the upvars, and we\n             // *do* incorporate the upvars here.\n \n-            let constraint = DtorckConstraint {\n-                outlives: substs.as_generator().upvar_tys(def_id, tcx).map(|t| t.into()).collect(),\n-                dtorck_types: vec![],\n-                overflows: vec![],\n-            };\n-            debug!(\n-                \"dtorck_constraint: generator {:?} => {:?}\",\n-                def_id, constraint\n-            );\n-\n-            Ok(constraint)\n+            constraints.outlives.extend(substs.as_generator().upvar_tys(def_id, tcx)\n+                .map(|t| -> ty::subst::GenericArg<'tcx> { t.into() }));\n         }\n \n         ty::Adt(def, substs) => {\n@@ -245,41 +240,34 @@ fn dtorck_constraint_for_ty<'tcx>(\n                 outlives,\n                 overflows,\n             } = tcx.at(span).adt_dtorck_constraint(def.did)?;\n-            Ok(DtorckConstraint {\n-                // FIXME: we can try to recursively `dtorck_constraint_on_ty`\n-                // there, but that needs some way to handle cycles.\n-                dtorck_types: dtorck_types.subst(tcx, substs),\n-                outlives: outlives.subst(tcx, substs),\n-                overflows: overflows.subst(tcx, substs),\n-            })\n+            // FIXME: we can try to recursively `dtorck_constraint_on_ty`\n+            // there, but that needs some way to handle cycles.\n+            constraints.dtorck_types.extend(dtorck_types.subst(tcx, substs));\n+            constraints.outlives.extend(outlives.subst(tcx, substs));\n+            constraints.overflows.extend(overflows.subst(tcx, substs));\n         }\n \n         // Objects must be alive in order for their destructor\n         // to be called.\n-        ty::Dynamic(..) => Ok(DtorckConstraint {\n-            outlives: vec![ty.into()],\n-            dtorck_types: vec![],\n-            overflows: vec![],\n-        }),\n+        ty::Dynamic(..) => {\n+            constraints.outlives.push(ty.into());\n+        },\n \n         // Types that can't be resolved. Pass them forward.\n-        ty::Projection(..) | ty::Opaque(..) | ty::Param(..) => Ok(DtorckConstraint {\n-            outlives: vec![],\n-            dtorck_types: vec![ty],\n-            overflows: vec![],\n-        }),\n+        ty::Projection(..) | ty::Opaque(..) | ty::Param(..) => {\n+            constraints.dtorck_types.push(ty);\n+        },\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n \n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved.\n-            Err(NoSolution)\n+            return Err(NoSolution)\n         }\n-    };\n+    }\n \n-    debug!(\"dtorck_constraint_for_ty({:?}) = {:?}\", ty, result);\n-    result\n+    Ok(())\n }\n \n /// Calculates the dtorck constraint for a type.\n@@ -305,10 +293,11 @@ crate fn adt_dtorck_constraint(\n         return Ok(result);\n     }\n \n-    let mut result = def.all_fields()\n-        .map(|field| tcx.type_of(field.did))\n-        .map(|fty| dtorck_constraint_for_ty(tcx, span, fty, 0, fty))\n-        .collect::<Result<DtorckConstraint<'_>, NoSolution>>()?;\n+    let mut result = DtorckConstraint::empty();\n+    for field in def.all_fields() {\n+        let fty = tcx.type_of(field.did);\n+        dtorck_constraint_for_ty(tcx, span, fty, 0, fty, &mut result)?;\n+    }\n     result.outlives.extend(tcx.destructor_constraints(def));\n     dedup_dtorck_constraint(&mut result);\n "}]}