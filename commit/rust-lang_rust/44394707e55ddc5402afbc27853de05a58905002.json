{"sha": "44394707e55ddc5402afbc27853de05a58905002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Mzk0NzA3ZTU1ZGRjNTQwMmFmYmMyNzg1M2RlMDVhNTg5MDUwMDI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-05T22:33:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-11T21:34:01Z"}, "message": "review comments", "tree": {"sha": "1e3b4566c5c42bc3e49afd5ac4f3fe20d360131f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e3b4566c5c42bc3e49afd5ac4f3fe20d360131f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44394707e55ddc5402afbc27853de05a58905002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44394707e55ddc5402afbc27853de05a58905002", "html_url": "https://github.com/rust-lang/rust/commit/44394707e55ddc5402afbc27853de05a58905002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44394707e55ddc5402afbc27853de05a58905002/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c", "html_url": "https://github.com/rust-lang/rust/commit/1e3bdc08c955a55f69a4c2df4a829a52f5b0c21c"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "b719d576d6f67b632da1992055960183d1aa2883", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44394707e55ddc5402afbc27853de05a58905002/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44394707e55ddc5402afbc27853de05a58905002/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=44394707e55ddc5402afbc27853de05a58905002", "patch": "@@ -437,32 +437,6 @@ impl GenericParam<'hir> {\n     }\n }\n \n-pub trait NextTypeParamName {\n-    fn next_type_param_name(&self, name: Option<&str>) -> String;\n-}\n-\n-impl NextTypeParamName for &[GenericParam<'_>] {\n-    fn next_type_param_name(&self, name: Option<&str>) -> String {\n-        // This is the whitelist of possible parameter names that we might suggest.\n-        let name = name.and_then(|n| n.chars().next()).map(|c| c.to_string().to_uppercase());\n-        let name = name.as_ref().map(|s| s.as_str());\n-        let possible_names = [name.unwrap_or(\"T\"), \"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\"];\n-        let used_names = self\n-            .iter()\n-            .filter_map(|p| match p.name {\n-                ParamName::Plain(ident) => Some(ident.name),\n-                _ => None,\n-            })\n-            .collect::<Vec<_>>();\n-\n-        possible_names\n-            .iter()\n-            .find(|n| !used_names.contains(&Symbol::intern(n)))\n-            .unwrap_or(&\"ParamName\")\n-            .to_string()\n-    }\n-}\n-\n #[derive(Default)]\n pub struct GenericParamCount {\n     pub lifetimes: usize,"}, {"sha": "6d627bd286585ad9d1e204343b7f094f394df374", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/44394707e55ddc5402afbc27853de05a58905002/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44394707e55ddc5402afbc27853de05a58905002/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=44394707e55ddc5402afbc27853de05a58905002", "patch": "@@ -10,12 +10,12 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::{NextTypeParamName, Node};\n+use rustc_hir::Node;\n use rustc_middle::ty::TypeckTables;\n use rustc_middle::ty::{\n     self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use std::fmt;\n \n@@ -249,6 +249,8 @@ fn suggest_restriction(\n         sugg.extend(ty_spans.into_iter().map(|s| (s, type_param_name.to_string())));\n \n         // Suggest `fn foo<T: Trait>(t: T) where <T as Trait>::A: Bound`.\n+        // FIXME: once `#![feature(associated_type_bounds)]` is stabilized, we should suggest\n+        // `fn foo(t: impl Trait<A: Bound>)` instead.\n         err.multipart_suggestion(\n             \"introduce a type parameter with a trait bound instead of using `impl Trait`\",\n             sugg,\n@@ -1702,3 +1704,29 @@ impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n         hir::intravisit::walk_body(self, body);\n     }\n }\n+\n+pub trait NextTypeParamName {\n+    fn next_type_param_name(&self, name: Option<&str>) -> String;\n+}\n+\n+impl NextTypeParamName for &[hir::GenericParam<'_>] {\n+    fn next_type_param_name(&self, name: Option<&str>) -> String {\n+        // This is the whitelist of possible parameter names that we might suggest.\n+        let name = name.and_then(|n| n.chars().next()).map(|c| c.to_string().to_uppercase());\n+        let name = name.as_ref().map(|s| s.as_str());\n+        let possible_names = [name.unwrap_or(\"T\"), \"T\", \"U\", \"V\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\"];\n+        let used_names = self\n+            .iter()\n+            .filter_map(|p| match p.name {\n+                hir::ParamName::Plain(ident) => Some(ident.name),\n+                _ => None,\n+            })\n+            .collect::<Vec<_>>();\n+\n+        possible_names\n+            .iter()\n+            .find(|n| !used_names.contains(&Symbol::intern(n)))\n+            .unwrap_or(&\"ParamName\")\n+            .to_string()\n+    }\n+}"}, {"sha": "8ae779a4783bb7783096d1c9cb0e3ff011219872", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44394707e55ddc5402afbc27853de05a58905002/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44394707e55ddc5402afbc27853de05a58905002/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=44394707e55ddc5402afbc27853de05a58905002", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, NextTypeParamName, Node, Unsafety};\n+use rustc_hir::{GenericParamKind, Node, Unsafety};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -45,6 +45,7 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n+use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n \n mod type_of;\n "}]}