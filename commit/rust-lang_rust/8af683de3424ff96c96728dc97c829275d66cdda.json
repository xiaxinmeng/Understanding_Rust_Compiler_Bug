{"sha": "8af683de3424ff96c96728dc97c829275d66cdda", "node_id": "C_kwDOAAsO6NoAKDhhZjY4M2RlMzQyNGZmOTZjOTY3MjhkYzk3YzgyOTI3NWQ2NmNkZGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-04T04:39:50Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-04T04:39:50Z"}, "message": "delay bug instead of skipping check_expr", "tree": {"sha": "db65cb2d61cc5c89403e14a0f2cee1d33aeaf7fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db65cb2d61cc5c89403e14a0f2cee1d33aeaf7fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af683de3424ff96c96728dc97c829275d66cdda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af683de3424ff96c96728dc97c829275d66cdda", "html_url": "https://github.com/rust-lang/rust/commit/8af683de3424ff96c96728dc97c829275d66cdda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af683de3424ff96c96728dc97c829275d66cdda/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7684101a51f1c375ec84aef5d2fbdeb214bbc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7684101a51f1c375ec84aef5d2fbdeb214bbc2", "html_url": "https://github.com/rust-lang/rust/commit/6d7684101a51f1c375ec84aef5d2fbdeb214bbc2"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "e46eccd61b14c40d4b009e7a86c851448bb9093e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8af683de3424ff96c96728dc97c829275d66cdda/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af683de3424ff96c96728dc97c829275d66cdda/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=8af683de3424ff96c96728dc97c829275d66cdda", "patch": "@@ -315,11 +315,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n-                    _ => bug!(\n-                        \"while adjusting {:?}, can't compose {:?} and {:?}\",\n-                        expr,\n-                        entry.get(),\n-                        adj\n+                    _ => self.tcx.sess.delay_span_bug(\n+                        expr.span,\n+                        &format!(\n+                            \"while adjusting {:?}, can't compose {:?} and {:?}\",\n+                            expr,\n+                            entry.get(),\n+                            adj\n+                        ),\n                     ),\n                 };\n                 *entry.get_mut() = adj;"}, {"sha": "3f6247facd1a2b2d13e3d3d0468eb13b9430ce27", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8af683de3424ff96c96728dc97c829275d66cdda/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af683de3424ff96c96728dc97c829275d66cdda/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=8af683de3424ff96c96728dc97c829275d66cdda", "patch": "@@ -234,11 +234,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is more complicated than just checking type equality, as arguments could be coerced\n         // This version writes those types back so further type checking uses the narrowed types\n         let demand_compatible = |idx, final_arg_types: &mut Vec<Option<(Ty<'tcx>, Ty<'tcx>)>>| {\n-            // Do not check argument compatibility if the number of args do not match\n-            if arg_count_error.is_some() {\n-                return;\n-            }\n-\n             let formal_input_ty: Ty<'tcx> = formal_input_tys[idx];\n             let expected_input_ty: Ty<'tcx> = expected_input_tys[idx];\n             let provided_arg = &provided_args[idx];"}, {"sha": "d62625faaaa083b1bf6a907ecfb645c72768c263", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=8af683de3424ff96c96728dc97c829275d66cdda", "patch": "@@ -30,4 +30,5 @@ fn main() {\n     //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n     //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~| ERROR mismatched types\n }"}, {"sha": "9ae9c474162d94c4c221b4b312260253a781af40", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=8af683de3424ff96c96728dc97c829275d66cdda", "patch": "@@ -18,6 +18,12 @@ note: associated function defined here\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n \n+error[E0308]: mismatched types\n+  --> $DIR/overloaded-calls-bad.rs:31:17\n+   |\n+LL |     let ans = s(\"burma\", \"shave\");\n+   |                 ^^^^^^^ expected `isize`, found `&str`\n+\n error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n    |\n@@ -32,7 +38,7 @@ note: associated function defined here\n LL |     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n    |                           ^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0057, E0308.\n For more information about an error, try `rustc --explain E0057`."}, {"sha": "951687c37596ac77578f1aa5c24eb21a91b51d3c", "filename": "src/test/ui/tuple/wrong_argument_ice-3.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs?ref=8af683de3424ff96c96728dc97c829275d66cdda", "patch": "@@ -0,0 +1,17 @@\n+struct Process;\n+\n+pub type Group = (Vec<String>, Vec<Process>);\n+\n+fn test(process: &Process, groups: Vec<Group>) -> Vec<Group> {\n+    let new_group = vec![String::new()];\n+\n+    if groups.capacity() == 0 {\n+        groups.push(new_group, vec![process]);\n+        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        return groups;\n+    }\n+\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "f0d64d2a4e18db63f927ed26293637e408c4534e", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8af683de3424ff96c96728dc97c829275d66cdda/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=8af683de3424ff96c96728dc97c829275d66cdda", "patch": "@@ -0,0 +1,17 @@\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+  --> $DIR/wrong_argument_ice-3.rs:9:16\n+   |\n+LL |         groups.push(new_group, vec![process]);\n+   |                ^^^^ ---------  ------------- supplied 2 arguments\n+   |                |\n+   |                expected 1 argument\n+   |\n+note: associated function defined here\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL |     pub fn push(&mut self, value: T) {\n+   |            ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}]}