{"sha": "5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjMwMGQ2OTVjNGFjNmU0YmRhYjhmZTVjNDhkZTZiMDViMmNkOTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-21T12:53:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:29Z"}, "message": "Remove warnings/errors from compiler when using typeck_body in rustdoc span map builder", "tree": {"sha": "8feb20307f70d640afd84d5b54f0200f74cf0a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8feb20307f70d640afd84d5b54f0200f74cf0a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "html_url": "https://github.com/rust-lang/rust/commit/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0799528db785e49ad13044aac193b8be2153e202", "url": "https://api.github.com/repos/rust-lang/rust/commits/0799528db785e49ad13044aac193b8be2153e202", "html_url": "https://github.com/rust-lang/rust/commit/0799528db785e49ad13044aac193b8be2153e202"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "fc0924ac5f920540e5e596e619362d347530f058", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "patch": "@@ -342,6 +342,9 @@ struct HandlerInner {\n     deduplicated_warn_count: usize,\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n+\n+    /// If set to `true`, no warning or error will be emitted.\n+    quiet: bool,\n }\n \n /// A key denoting where from a diagnostic was stashed.\n@@ -456,10 +459,19 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n+                quiet: false,\n             }),\n         }\n     }\n \n+    pub fn with_disabled_diagnostic<T, F: FnOnce() -> T>(&self, f: F) -> T {\n+        let prev = self.inner.borrow_mut().quiet;\n+        self.inner.borrow_mut().quiet = true;\n+        let ret = f();\n+        self.inner.borrow_mut().quiet = prev;\n+        ret\n+    }\n+\n     // This is here to not allow mutation of flags;\n     // as of this writing it's only used in tests in librustc_middle.\n     pub fn can_emit_warnings(&self) -> bool {\n@@ -818,7 +830,7 @@ impl HandlerInner {\n     }\n \n     fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) {\n-        if diagnostic.cancelled() {\n+        if diagnostic.cancelled() || self.quiet {\n             return;\n         }\n \n@@ -1035,6 +1047,9 @@ impl HandlerInner {\n     }\n \n     fn delay_as_bug(&mut self, diagnostic: Diagnostic) {\n+        if self.quiet {\n+            return;\n+        }\n         if self.flags.report_delayed_bugs {\n             self.emit_diagnostic(&diagnostic);\n         }"}, {"sha": "fe87867d2996cdf210798ee0624baf24b513c87c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "patch": "@@ -500,6 +500,10 @@ impl Session {\n         &self.parse_sess.span_diagnostic\n     }\n \n+    pub fn with_disabled_diagnostic<T, F: FnOnce() -> T>(&self, f: F) -> T {\n+        self.parse_sess.span_diagnostic.with_disabled_diagnostic(f)\n+    }\n+\n     /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n     /// deduplicates on lint ID, span (if any), and message for this `Session`\n     fn diag_once<'a, 'b>("}, {"sha": "429673c96e787dbafdee88f130dfc066b0800713", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=5cf300d695c4ac6e4bdab8fe5c48de6b05b2cd96", "patch": "@@ -181,11 +181,11 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n                 if let Some(hir_id) = segment.hir_id {\n                     let hir = self.tcx.hir();\n                     let body_id = hir.enclosing_body_owner(hir_id);\n-                    // FIXME: this is showing error messages for parts of the code that are not\n-                    // compiled (because of cfg)!\n-                    let typeck_results = self.tcx.typeck_body(\n-                        hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n-                    );\n+                    let typeck_results = self.tcx.sess.with_disabled_diagnostic(|| {\n+                        self.tcx.typeck_body(\n+                            hir.maybe_body_owned_by(body_id).expect(\"a body which isn't a body\"),\n+                        )\n+                    });\n                     if let Some(def_id) = typeck_results.type_dependent_def_id(expr.hir_id) {\n                         self.matches.insert(\n                             LightSpan::new_from_span(method_span),"}]}