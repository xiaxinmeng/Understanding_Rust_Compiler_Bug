{"sha": "72dc52ec2c32581507752319576231f11ac0e048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZGM1MmVjMmMzMjU4MTUwNzc1MjMxOTU3NjIzMWYxMWFjMGUwNDg=", "commit": {"author": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-28T09:02:59Z"}, "committer": {"name": "David Alber", "email": "alber.david@gmail.com", "date": "2017-12-28T18:29:48Z"}, "message": "Testing that config option tests use the expected config option", "tree": {"sha": "1d61aa523d6f21746d735402a4424694f820f4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d61aa523d6f21746d735402a4424694f820f4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72dc52ec2c32581507752319576231f11ac0e048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72dc52ec2c32581507752319576231f11ac0e048", "html_url": "https://github.com/rust-lang/rust/commit/72dc52ec2c32581507752319576231f11ac0e048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72dc52ec2c32581507752319576231f11ac0e048/comments", "author": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidalber", "id": 933552, "node_id": "MDQ6VXNlcjkzMzU1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/933552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidalber", "html_url": "https://github.com/davidalber", "followers_url": "https://api.github.com/users/davidalber/followers", "following_url": "https://api.github.com/users/davidalber/following{/other_user}", "gists_url": "https://api.github.com/users/davidalber/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidalber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidalber/subscriptions", "organizations_url": "https://api.github.com/users/davidalber/orgs", "repos_url": "https://api.github.com/users/davidalber/repos", "events_url": "https://api.github.com/users/davidalber/events{/privacy}", "received_events_url": "https://api.github.com/users/davidalber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6939e21f43a1fe77b6e0c39e791291eeac87ce6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6939e21f43a1fe77b6e0c39e791291eeac87ce6b", "html_url": "https://github.com/rust-lang/rust/commit/6939e21f43a1fe77b6e0c39e791291eeac87ce6b"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "c5ae416cdc5a5ff2f89e7323537401af766cafdd", "filename": "tests/system.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/72dc52ec2c32581507752319576231f11ac0e048/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72dc52ec2c32581507752319576231f11ac0e048/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=72dc52ec2c32581507752319576231f11ac0e048", "patch": "@@ -52,6 +52,52 @@ fn get_test_files(path: &Path, recursive: bool) -> Vec<PathBuf> {\n     files\n }\n \n+fn verify_config_used(path: &Path, config_name: &str) {\n+    for entry in fs::read_dir(path).expect(&format!(\n+        \"Couldn't read {} directory\",\n+        path.to_str().unwrap()\n+    )) {\n+        let entry = entry.expect(\"Couldn't get directory entry\");\n+        let path = entry.path();\n+        if path.extension().map_or(false, |f| f == \"rs\") {\n+            // check if \"// rustfmt-<config_name>:\" appears in the file.\n+            let filebuf = BufReader::new(\n+                fs::File::open(&path).expect(&format!(\"Couldn't read file {}\", path.display())),\n+            );\n+            assert!(\n+                filebuf\n+                    .lines()\n+                    .map(|l| l.unwrap())\n+                    .take_while(|l| l.starts_with(\"//\"))\n+                    .any(|l| l.starts_with(&format!(\"// rustfmt-{}\", config_name))),\n+                format!(\n+                    \"config option file {} does not contain expected config name\",\n+                    path.display()\n+                )\n+            );\n+        }\n+    }\n+}\n+\n+#[test]\n+fn verify_config_test_names() {\n+    for path in &[\n+        Path::new(\"tests/source/configs\"),\n+        Path::new(\"tests/target/configs\"),\n+    ] {\n+        for entry in fs::read_dir(path).expect(\"Couldn't read configs directory\") {\n+            let entry = entry.expect(\"Couldn't get DirEntry\");\n+            let path = entry.path();\n+            if path.is_dir() {\n+                let config_name = path.file_name().unwrap().to_str().unwrap();\n+\n+                // Make sure that config name is used in the files in the directory.\n+                verify_config_used(&path, &config_name);\n+            }\n+        }\n+    }\n+}\n+\n // Integration tests. The files in the tests/source are formatted and compared\n // to their equivalent in tests/target. The target file and config can be\n // overridden by annotations in the source file. The input and output must match"}]}