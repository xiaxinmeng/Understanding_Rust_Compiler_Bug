{"sha": "8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNjY3YmIzMmVkODQ2MDk4OGJmOWZlMzUxNWE2ZjgzMThhZGI4YjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-25T12:25:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T12:25:46Z"}, "message": "Merge #3692\n\n3692: Introduce `MacroDefKind::CustomDerive` r=matklad a=edwin0cheng\n\nThis PR introduce a new `MacroDefKind` `CustomDerive`. And use a new `ProcMacroExpander` for its expanding. And the expander is a dummy for now. \r\n\r\nRelated: #3654 \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "5d41d254dc94ff7d8d20063a08df2b9b133d34d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d41d254dc94ff7d8d20063a08df2b9b133d34d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJee03KCRBK7hj4Ov3rIwAAdHIIABu+my+VFulXSRTDKlmpS2CW\nTS0mr8Qzock8Luic271denExNWmHX8wAm1Dqj3OLmR2otFZyPWT1ppqdZwmBwhKb\ncONwSQrRjcPBBqojlmNAXrMEfxM6ZsNVJusdfbXTDsNbIA2JJPgAvLXiZt/4ZIlq\nT/nRIsE0R7S2ePftgNgcvkBnwQE5xwKtlECwKDACStkMSD5BKZCiVWaIgoTzRQxb\nCAGXtioTmBXdL5n5cqjHdU/C7h0GNRSeIPr/LZfeKRYIU79OdXEROwCloXFHjoxE\nlMmt4OCBf7IO8EW63NRlNGQjo8qzzHyAedgCDymjqcQH0aiqxQNb/dzThyU2Ntc=\n=miai\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d41d254dc94ff7d8d20063a08df2b9b133d34d9\nparent e2dd17f75b1bb5e1185acff66211e74430177592\nparent 2adc9a8d5f8f7686a125a478330c67a2d46fba98\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585139146 +0000\ncommitter GitHub <noreply@github.com> 1585139146 +0000\n\nMerge #3692\n\n3692: Introduce `MacroDefKind::CustomDerive` r=matklad a=edwin0cheng\n\nThis PR introduce a new `MacroDefKind` `CustomDerive`. And use a new `ProcMacroExpander` for its expanding. And the expander is a dummy for now. \r\n\r\nRelated: #3654 \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "html_url": "https://github.com/rust-lang/rust/commit/8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2dd17f75b1bb5e1185acff66211e74430177592", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2dd17f75b1bb5e1185acff66211e74430177592", "html_url": "https://github.com/rust-lang/rust/commit/e2dd17f75b1bb5e1185acff66211e74430177592"}, {"sha": "2adc9a8d5f8f7686a125a478330c67a2d46fba98", "url": "https://api.github.com/repos/rust-lang/rust/commits/2adc9a8d5f8f7686a125a478330c67a2d46fba98", "html_url": "https://github.com/rust-lang/rust/commit/2adc9a8d5f8f7686a125a478330c67a2d46fba98"}], "stats": {"total": 172, "additions": 144, "deletions": 28}, "files": [{"sha": "bd32ac20aac6959eadc724759d61230fd23a4d7e", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -475,6 +475,12 @@ impl AsMacroCall for AstIdWithPath<ast::ModuleItem> {\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n-        Some(def.as_lazy_macro(db.upcast(), MacroCallKind::Attr(self.ast_id)).into())\n+        Some(\n+            def.as_lazy_macro(\n+                db.upcast(),\n+                MacroCallKind::Attr(self.ast_id, self.path.segments.last()?.to_string()),\n+            )\n+            .into(),\n+        )\n     }\n }"}, {"sha": "9c125f32f34f715a3c5e91f11dfb0fabaee973dd", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -7,6 +7,7 @@ use hir_expand::{\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n     name::{name, AsName, Name},\n+    proc_macro::ProcMacroExpander,\n     HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n };\n use ra_cfg::CfgOptions;\n@@ -64,6 +65,9 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> Cr\n         unexpanded_attribute_macros: Vec::new(),\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n+\n+        // FIXME: pass proc-macro from crate-graph\n+        proc_macros: Default::default(),\n     };\n     collector.collect();\n     collector.finish()\n@@ -122,6 +126,7 @@ struct DefCollector<'a> {\n     unexpanded_attribute_macros: Vec<DeriveDirective>,\n     mod_dirs: FxHashMap<LocalModuleId, ModDir>,\n     cfg_options: &'a CfgOptions,\n+    proc_macros: Vec<(Name, ProcMacroExpander)>,\n }\n \n impl DefCollector<'_> {\n@@ -177,6 +182,24 @@ impl DefCollector<'_> {\n         for directive in unresolved_imports {\n             self.record_resolved_import(&directive)\n         }\n+\n+        // Record proc-macros\n+        self.collect_proc_macro();\n+    }\n+\n+    fn collect_proc_macro(&mut self) {\n+        let proc_macros = std::mem::take(&mut self.proc_macros);\n+        for (name, expander) in proc_macros {\n+            let krate = self.def_map.krate;\n+\n+            let macro_id = MacroDefId {\n+                ast_id: None,\n+                krate: Some(krate),\n+                kind: MacroDefKind::CustomDerive(expander),\n+            };\n+\n+            self.define_proc_macro(name.clone(), macro_id);\n+        }\n     }\n \n     /// Define a macro with `macro_rules`.\n@@ -238,6 +261,18 @@ impl DefCollector<'_> {\n         self.def_map.modules[module_id].scope.define_legacy_macro(name, mac);\n     }\n \n+    /// Define a proc macro\n+    ///\n+    /// A proc macro is similar to normal macro scope, but it would not visiable in legacy textual scoped.\n+    /// And unconditionally exported.\n+    fn define_proc_macro(&mut self, name: Name, macro_: MacroDefId) {\n+        self.update(\n+            self.def_map.root,\n+            &[(name, PerNs::macros(macro_, Visibility::Public))],\n+            Visibility::Public,\n+        );\n+    }\n+\n     /// Import macros from `#[macro_use] extern crate`.\n     fn import_macros_from_extern_crate(\n         &mut self,\n@@ -537,8 +572,9 @@ impl DefCollector<'_> {\n             true\n         });\n         attribute_macros.retain(|directive| {\n-            if let Some(call_id) =\n-                directive.ast_id.as_call_id(self.db, |path| self.resolve_attribute_macro(&path))\n+            if let Some(call_id) = directive\n+                .ast_id\n+                .as_call_id(self.db, |path| self.resolve_attribute_macro(&directive, &path))\n             {\n                 resolved.push((directive.module_id, call_id, 0));\n                 res = ReachedFixedPoint::No;\n@@ -562,9 +598,11 @@ impl DefCollector<'_> {\n         res\n     }\n \n-    fn resolve_attribute_macro(&self, path: &ModPath) -> Option<MacroDefId> {\n-        // FIXME this is currently super hacky, just enough to support the\n-        // built-in derives\n+    fn resolve_attribute_macro(\n+        &self,\n+        directive: &DeriveDirective,\n+        path: &ModPath,\n+    ) -> Option<MacroDefId> {\n         if let Some(name) = path.as_ident() {\n             // FIXME this should actually be handled with the normal name\n             // resolution; the std lib defines built-in stubs for the derives,\n@@ -573,7 +611,15 @@ impl DefCollector<'_> {\n                 return Some(def_id);\n             }\n         }\n-        None\n+        let resolved_res = self.def_map.resolve_path_fp_with_macro(\n+            self.db,\n+            ResolveMode::Other,\n+            directive.module_id,\n+            &path,\n+            BuiltinShadowMode::Module,\n+        );\n+\n+        resolved_res.resolved_def.take_macros()\n     }\n \n     fn collect_macro_expansion(\n@@ -776,7 +822,6 @@ impl ModCollector<'_, '_> {\n         // FIXME: check attrs to see if this is an attribute macro invocation;\n         // in which case we don't add the invocation, just a single attribute\n         // macro invocation\n-\n         self.collect_derives(attrs, def);\n \n         let name = def.name.clone();\n@@ -955,6 +1000,7 @@ mod tests {\n             unexpanded_attribute_macros: Vec::new(),\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n+            proc_macros: Default::default(),\n         };\n         collector.collect();\n         collector.def_map"}, {"sha": "79aea5806c92fdb965f81fb38d69efddfe9a6ed9", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -229,24 +229,22 @@ fn partial_ord_expand(\n mod tests {\n     use super::*;\n     use crate::{test_db::TestDB, AstId, MacroCallId, MacroCallKind, MacroCallLoc};\n+    use name::{known, Name};\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n \n-    fn expand_builtin_derive(s: &str, expander: BuiltinDeriveExpander) -> String {\n+    fn expand_builtin_derive(s: &str, name: Name) -> String {\n+        let def = find_builtin_derive(&name).unwrap();\n+\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let items: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::ModuleItem::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n \n-        // the first one should be a macro_rules\n-        let def =\n-            MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(expander) };\n+        let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n-        let loc = MacroCallLoc {\n-            def,\n-            kind: MacroCallKind::Attr(AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]))),\n-        };\n+        let loc = MacroCallLoc { def, kind: MacroCallKind::Attr(attr_id, name.to_string()) };\n \n         let id: MacroCallId = db.intern_macro(loc).into();\n         let parsed = db.parse_or_expand(id.as_file()).unwrap();\n@@ -263,7 +261,7 @@ mod tests {\n         #[derive(Copy)]\n         struct Foo;\n \"#,\n-            BuiltinDeriveExpander::Copy,\n+            known::Copy,\n         );\n \n         assert_eq!(expanded, \"impl< >std::marker::CopyforFoo< >{}\");\n@@ -276,7 +274,7 @@ mod tests {\n         #[derive(Copy)]\n         struct Foo<A, B>;\n \"#,\n-            BuiltinDeriveExpander::Copy,\n+            known::Copy,\n         );\n \n         assert_eq!(\n@@ -292,7 +290,7 @@ mod tests {\n         #[derive(Copy)]\n         struct Foo<A, B, 'a, 'b>;\n \"#,\n-            BuiltinDeriveExpander::Copy,\n+            known::Copy,\n         );\n \n         // We currently just ignore lifetimes\n@@ -310,7 +308,7 @@ mod tests {\n         #[derive(Clone)]\n         struct Foo<A, B>;\n \"#,\n-            BuiltinDeriveExpander::Clone,\n+            known::Clone,\n         );\n \n         assert_eq!("}, {"sha": "0474523063cb7b958362edef73afb9c85a7eccab", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -11,14 +11,15 @@ use ra_syntax::{algo::diff, AstNode, Parse, SyntaxKind::*, SyntaxNode};\n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, EagerCallLoc, EagerMacroId,\n     HirFileId, HirFileIdRepr, LazyMacroId, MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind,\n-    MacroFile,\n+    MacroFile, ProcMacroExpander,\n };\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n     MacroRules(mbe::MacroRules),\n     Builtin(BuiltinFnLikeExpander),\n     BuiltinDerive(BuiltinDeriveExpander),\n+    ProcMacro(ProcMacroExpander),\n }\n \n impl TokenExpander {\n@@ -33,6 +34,7 @@ impl TokenExpander {\n             // FIXME switch these to ExpandResult as well\n             TokenExpander::Builtin(it) => it.expand(db, id, tt).into(),\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::ProcMacro(it) => it.expand(db, id, tt).into(),\n         }\n     }\n \n@@ -41,6 +43,7 @@ impl TokenExpander {\n             TokenExpander::MacroRules(it) => it.map_id_down(id),\n             TokenExpander::Builtin(..) => id,\n             TokenExpander::BuiltinDerive(..) => id,\n+            TokenExpander::ProcMacro(..) => id,\n         }\n     }\n \n@@ -49,6 +52,7 @@ impl TokenExpander {\n             TokenExpander::MacroRules(it) => it.map_id_up(id),\n             TokenExpander::Builtin(..) => (id, mbe::Origin::Call),\n             TokenExpander::BuiltinDerive(..) => (id, mbe::Origin::Call),\n+            TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n         }\n     }\n }\n@@ -130,7 +134,10 @@ pub(crate) fn macro_def(\n         MacroDefKind::BuiltInDerive(expander) => {\n             Some(Arc::new((TokenExpander::BuiltinDerive(expander), mbe::TokenMap::default())))\n         }\n-        MacroDefKind::BuiltInEager(_expander) => None,\n+        MacroDefKind::BuiltInEager(_) => None,\n+        MacroDefKind::CustomDerive(expander) => {\n+            Some(Arc::new((TokenExpander::ProcMacro(expander), mbe::TokenMap::default())))\n+        }\n     }\n }\n "}, {"sha": "932f47c309898f18d34d5136ae3da4727cdbcdd9", "filename": "crates/ra_hir_expand/src/eager.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feager.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -112,7 +112,8 @@ fn eager_macro_recur(\n             }\n             MacroDefKind::Declarative\n             | MacroDefKind::BuiltIn(_)\n-            | MacroDefKind::BuiltInDerive(_) => {\n+            | MacroDefKind::BuiltInDerive(_)\n+            | MacroDefKind::CustomDerive(_) => {\n                 let expanded = lazy_expand(db, &def, curr.with_value(child.clone()))?;\n                 // replace macro inside\n                 eager_macro_recur(db, expanded, macro_resolver)?"}, {"sha": "0b41d0e95810bc1718baa49d3b3c238fd579c0b9", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -30,6 +30,7 @@ impl Hygiene {\n                         MacroDefKind::BuiltIn(_) => None,\n                         MacroDefKind::BuiltInDerive(_) => None,\n                         MacroDefKind::BuiltInEager(_) => None,\n+                        MacroDefKind::CustomDerive(_) => None,\n                     }\n                 }\n                 MacroCallId::EagerMacro(_id) => None,"}, {"sha": "86299459fa13c08246f0963182444c2b700d61c6", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -11,6 +11,7 @@ pub mod hygiene;\n pub mod diagnostics;\n pub mod builtin_derive;\n pub mod builtin_macro;\n+pub mod proc_macro;\n pub mod quote;\n pub mod eager;\n \n@@ -27,6 +28,7 @@ use ra_syntax::{\n use crate::ast_id_map::FileAstId;\n use crate::builtin_derive::BuiltinDeriveExpander;\n use crate::builtin_macro::{BuiltinFnLikeExpander, EagerExpander};\n+use crate::proc_macro::ProcMacroExpander;\n \n #[cfg(test)]\n mod test_db;\n@@ -217,6 +219,7 @@ pub enum MacroDefKind {\n     // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n     BuiltInDerive(BuiltinDeriveExpander),\n     BuiltInEager(EagerExpander),\n+    CustomDerive(ProcMacroExpander),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -228,21 +231,23 @@ pub struct MacroCallLoc {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum MacroCallKind {\n     FnLike(AstId<ast::MacroCall>),\n-    Attr(AstId<ast::ModuleItem>),\n+    Attr(AstId<ast::ModuleItem>, String),\n }\n \n impl MacroCallKind {\n     pub fn file_id(&self) -> HirFileId {\n         match self {\n             MacroCallKind::FnLike(ast_id) => ast_id.file_id,\n-            MacroCallKind::Attr(ast_id) => ast_id.file_id,\n+            MacroCallKind::Attr(ast_id, _) => ast_id.file_id,\n         }\n     }\n \n     pub fn node(&self, db: &dyn db::AstDatabase) -> InFile<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n-            MacroCallKind::Attr(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr(ast_id, _) => {\n+                ast_id.with_value(ast_id.to_node(db).syntax().clone())\n+            }\n         }\n     }\n \n@@ -251,7 +256,7 @@ impl MacroCallKind {\n             MacroCallKind::FnLike(ast_id) => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n             }\n-            MacroCallKind::Attr(ast_id) => Some(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr(ast_id, _) => Some(ast_id.to_node(db).syntax().clone()),\n         }\n     }\n }"}, {"sha": "a8dee20526074a6e99df660cecb9642efbf2011d", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -0,0 +1,33 @@\n+//! Proc Macro Expander stub\n+\n+use crate::{db::AstDatabase, LazyMacroId, MacroCallKind, MacroCallLoc};\n+use ra_db::CrateId;\n+\n+#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n+pub struct ProcMacroExpander {\n+    krate: CrateId,\n+}\n+\n+impl ProcMacroExpander {\n+    pub fn new(krate: CrateId) -> ProcMacroExpander {\n+        ProcMacroExpander { krate }\n+    }\n+\n+    pub fn expand(\n+        &self,\n+        db: &dyn AstDatabase,\n+        id: LazyMacroId,\n+        _tt: &tt::Subtree,\n+    ) -> Result<tt::Subtree, mbe::ExpandError> {\n+        let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+        let name = match loc.kind {\n+            MacroCallKind::FnLike(_) => return Err(mbe::ExpandError::ConversionError),\n+            MacroCallKind::Attr(_, name) => name,\n+        };\n+\n+        log::debug!(\"Proc-macro-expanding name = {}\", name);\n+\n+        // Return nothing for now\n+        return Ok(tt::Subtree::default());\n+    }\n+}"}, {"sha": "eb97288f1892c630fcb59e89edc020d1b5975901", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -639,3 +639,22 @@ mod clone {\n     );\n     assert_eq!(\"(Wrapper<S>, {unknown})\", type_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn infer_custom_derive_simple() {\n+    // FIXME: this test current now do nothing\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main\n+use foo::Foo;\n+\n+#[derive(Foo)]\n+struct S{}\n+\n+fn test() {\n+    S{}<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(\"S\", type_at_pos(&db, pos));\n+}"}, {"sha": "8e8ae2b294e65dff06dd9fba21c4ba9c57a45b42", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d667bb32ed8460988bf9fe3515a6f8318adb8b0/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=8d667bb32ed8460988bf9fe3515a6f8318adb8b0", "patch": "@@ -33,7 +33,7 @@ impl TokenTextRange {\n }\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n-#[derive(Debug, PartialEq, Eq, Default)]\n+#[derive(Debug, PartialEq, Eq, Clone, Default)]\n pub struct TokenMap {\n     /// Maps `tt::TokenId` to the *relative* source range.\n     entries: Vec<(tt::TokenId, TokenTextRange)>,"}]}