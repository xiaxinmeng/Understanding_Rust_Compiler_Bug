{"sha": "52b19c39e8bdbc0a0ed650aa03358768c6803818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYjE5YzM5ZThiZGJjMGEwZWQ2NTBhYTAzMzU4NzY4YzY4MDM4MTg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-17T14:06:42Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-19T17:55:16Z"}, "message": "Create xtask module to generate diagnostics docs", "tree": {"sha": "295e9b17874cfc6117dbb852c41ab61bec73e242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/295e9b17874cfc6117dbb852c41ab61bec73e242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52b19c39e8bdbc0a0ed650aa03358768c6803818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52b19c39e8bdbc0a0ed650aa03358768c6803818", "html_url": "https://github.com/rust-lang/rust/commit/52b19c39e8bdbc0a0ed650aa03358768c6803818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52b19c39e8bdbc0a0ed650aa03358768c6803818/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378dd90bab65fa6df078444c3932118105a460b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/378dd90bab65fa6df078444c3932118105a460b8", "html_url": "https://github.com/rust-lang/rust/commit/378dd90bab65fa6df078444c3932118105a460b8"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "b205bf3fb680a2b41ed22a017fe2b7f96fddd355", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52b19c39e8bdbc0a0ed650aa03358768c6803818/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/52b19c39e8bdbc0a0ed650aa03358768c6803818/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=52b19c39e8bdbc0a0ed650aa03358768c6803818", "patch": "@@ -9,3 +9,4 @@ crates/*/target\n .vscode/settings.json\n generated_assists.adoc\n generated_features.adoc\n+generated_diagnostic.adoc"}, {"sha": "afa70347191868497236faf451e21cba1b15d773", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52b19c39e8bdbc0a0ed650aa03358768c6803818/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b19c39e8bdbc0a0ed650aa03358768c6803818/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=52b19c39e8bdbc0a0ed650aa03358768c6803818", "patch": "@@ -10,6 +10,7 @@ mod gen_parser_tests;\n mod gen_assists_docs;\n mod gen_feature_docs;\n mod gen_features;\n+mod gen_diagnostic_docs;\n \n use std::{\n     fmt, mem,\n@@ -21,6 +22,7 @@ use crate::{ensure_rustfmt, project_root, Result};\n \n pub use self::{\n     gen_assists_docs::{generate_assists_docs, generate_assists_tests},\n+    gen_diagnostic_docs::generate_diagnostic_docs,\n     gen_feature_docs::generate_feature_docs,\n     gen_features::generate_features,\n     gen_parser_tests::generate_parser_tests,\n@@ -47,6 +49,7 @@ impl CodegenCmd {\n         generate_assists_tests(Mode::Overwrite)?;\n         generate_assists_docs(Mode::Overwrite)?;\n         generate_feature_docs(Mode::Overwrite)?;\n+        generate_diagnostic_docs(Mode::Overwrite)?;\n         Ok(())\n     }\n }"}, {"sha": "4d630ce8c398300829729f83e3a5063dbbcd7f15", "filename": "xtask/src/codegen/gen_diagnostic_docs.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/52b19c39e8bdbc0a0ed650aa03358768c6803818/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52b19c39e8bdbc0a0ed650aa03358768c6803818/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_diagnostic_docs.rs?ref=52b19c39e8bdbc0a0ed650aa03358768c6803818", "patch": "@@ -0,0 +1,73 @@\n+//! Generates `assists.md` documentation.\n+\n+use std::{fmt, fs, path::PathBuf};\n+\n+use crate::{\n+    codegen::{self, extract_comment_blocks_with_empty_lines, Location, Mode, PREAMBLE},\n+    project_root, rust_files, Result,\n+};\n+\n+pub fn generate_diagnostic_docs(mode: Mode) -> Result<()> {\n+    let features = Diagnostic::collect()?;\n+    let contents = features.into_iter().map(|it| it.to_string()).collect::<Vec<_>>().join(\"\\n\\n\");\n+    let contents = format!(\"//{}\\n{}\\n\", PREAMBLE, contents.trim());\n+    let dst = project_root().join(\"docs/user/generated_diagnostic.adoc\");\n+    codegen::update(&dst, &contents, mode)?;\n+    Ok(())\n+}\n+\n+#[derive(Debug)]\n+struct Diagnostic {\n+    id: String,\n+    location: Location,\n+    doc: String,\n+}\n+\n+impl Diagnostic {\n+    fn collect() -> Result<Vec<Diagnostic>> {\n+        let mut res = Vec::new();\n+        for path in rust_files(&project_root()) {\n+            collect_file(&mut res, path)?;\n+        }\n+        res.sort_by(|lhs, rhs| lhs.id.cmp(&rhs.id));\n+        return Ok(res);\n+\n+        fn collect_file(acc: &mut Vec<Diagnostic>, path: PathBuf) -> Result<()> {\n+            let text = fs::read_to_string(&path)?;\n+            let comment_blocks = extract_comment_blocks_with_empty_lines(\"Diagnostic\", &text);\n+\n+            for block in comment_blocks {\n+                let id = block.id;\n+                if let Err(msg) = is_valid_diagnostic_name(&id) {\n+                    panic!(\"invalid diagnostic name: {:?}:\\n  {}\", id, msg)\n+                }\n+                let doc = block.contents.join(\"\\n\");\n+                let location = Location::new(path.clone(), block.line);\n+                acc.push(Diagnostic { id, location, doc })\n+            }\n+\n+            Ok(())\n+        }\n+    }\n+}\n+\n+fn is_valid_diagnostic_name(diagnostic: &str) -> Result<(), String> {\n+    let diagnostic = diagnostic.trim();\n+    if diagnostic.find(char::is_whitespace).is_some() {\n+        return Err(\"Diagnostic names can't contain whitespace symbols\".into());\n+    }\n+    if diagnostic.chars().any(|c| c.is_ascii_uppercase()) {\n+        return Err(\"Diagnostic names can't contain uppercase symbols\".into());\n+    }\n+    if diagnostic.chars().any(|c| !c.is_ascii()) {\n+        return Err(\"Diagnostic can't contain non-ASCII symbols\".into());\n+    }\n+\n+    Ok(())\n+}\n+\n+impl fmt::Display for Diagnostic {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        writeln!(f, \"=== {}\\n**Source:** {}\\n{}\", self.id, self.location, self.doc)\n+    }\n+}"}]}