{"sha": "9ba86178efc8c5b733202995427c6345ee80ba1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYTg2MTc4ZWZjOGM1YjczMzIwMjk5NTQyN2M2MzQ1ZWU4MGJhMWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-28T00:14:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-28T01:12:03Z"}, "message": "rt: Store the task in TLS", "tree": {"sha": "f6ee08f6bab6c555ad2090d2a976b8fc412eb3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ee08f6bab6c555ad2090d2a976b8fc412eb3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ba86178efc8c5b733202995427c6345ee80ba1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba86178efc8c5b733202995427c6345ee80ba1c", "html_url": "https://github.com/rust-lang/rust/commit/9ba86178efc8c5b733202995427c6345ee80ba1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ba86178efc8c5b733202995427c6345ee80ba1c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888e22aacc5a1a666c46c6d69e40e8673bb16c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/888e22aacc5a1a666c46c6d69e40e8673bb16c87", "html_url": "https://github.com/rust-lang/rust/commit/888e22aacc5a1a666c46c6d69e40e8673bb16c87"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "8c898e2ac8541a0f28017c9aebb7d1cbdf4e42d1", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9ba86178efc8c5b733202995427c6345ee80ba1c/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9ba86178efc8c5b733202995427c6345ee80ba1c/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=9ba86178efc8c5b733202995427c6345ee80ba1c", "patch": "@@ -1,8 +1,17 @@\n \n #include <stdarg.h>\n+#include <cassert>\n #include \"rust_internal.h\"\n #include \"globals.h\"\n \n+#ifndef _WIN32\n+pthread_key_t rust_scheduler::task_key;\n+#else\n+DWORD rust_scheduler::task_key;\n+#endif\n+\n+bool rust_scheduler::tls_initialized = false;\n+\n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n                                rust_srv *srv,\n                                int id) :\n@@ -30,6 +39,9 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     pthread_attr_setstacksize(&attr, 1024 * 1024);\n     pthread_attr_setdetachstate(&attr, true);\n #endif\n+\n+    if (!tls_initialized)\n+        init_tls();\n }\n \n rust_scheduler::~rust_scheduler() {\n@@ -275,6 +287,8 @@ rust_scheduler::start_main_loop() {\n              scheduled_task->user.rust_sp,\n              scheduled_task->state->name);\n \n+        place_task_in_tls(scheduled_task);\n+\n         interrupt_flag = 0;\n \n         DLOG(this, task,\n@@ -347,6 +361,49 @@ void rust_scheduler::run() {\n     this->start_main_loop();\n }\n \n+#ifndef _WIN32\n+void\n+rust_scheduler::init_tls() {\n+    int result = pthread_key_create(&task_key, NULL);\n+    assert(!result && \"Couldn't create the TLS key!\");\n+    tls_initialized = true;\n+}\n+\n+void\n+rust_scheduler::place_task_in_tls(rust_task *task) {\n+    int result = pthread_setspecific(task_key, task);\n+    assert(!result && \"Couldn't place the task in TLS!\");\n+}\n+\n+rust_task *\n+rust_scheduler::get_task() {\n+    rust_task *task = reinterpret_cast<rust_task *>\n+        (pthread_getspecific(task_key));\n+    assert(task && \"Couldn't get the task from TLS!\");\n+    return task;\n+}\n+#else\n+void\n+rust_scheduler::init_tls() {\n+    task_key = TlsAlloc();\n+    assert(task_key != TLS_OUT_OF_INDEXES && \"Couldn't create the TLS key!\");\n+    tls_initialized = true;\n+}\n+\n+void\n+rust_scheduler::place_task_in_tls(rust_task *task) {\n+    BOOL result = TlsSetValue(task_key, task);\n+    assert(result && \"Couldn't place the task in TLS!\");\n+}\n+\n+rust_task *\n+rust_scheduler::get_task() {\n+    rust_task *task = reinterpret_cast<rust_task *>(TlsGetValue(task_key));\n+    assert(task && \"Couldn't get the task from TLS!\");\n+    return task;\n+}\n+#endif\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "fe8e000ad391699904a2eaf32d22a3910fec4175", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ba86178efc8c5b733202995427c6345ee80ba1c/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/9ba86178efc8c5b733202995427c6345ee80ba1c/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=9ba86178efc8c5b733202995427c6345ee80ba1c", "patch": "@@ -1,6 +1,12 @@\n #ifndef RUST_SCHEDULER_H\n #define RUST_SCHEDULER_H\n \n+#ifndef _WIN32\n+#include <pthread.h>\n+#else\n+#include <windows.h>\n+#endif\n+\n struct rust_scheduler;\n \n class rust_crate_cache {\n@@ -58,8 +64,13 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n \n #ifndef __WIN32__\n     pthread_attr_t attr;\n+    static pthread_key_t task_key;\n+#else\n+    static DWORD task_key;\n #endif\n \n+    static bool tls_initialized;\n+\n     rust_env *env;\n \n     // Only a pointer to 'name' is kept, so it must live as long as this\n@@ -92,6 +103,11 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n         kernel->win32_require(fn, ok);\n     }\n #endif\n+\n+    void init_tls();\n+    void place_task_in_tls(rust_task *task);\n+\n+    static rust_task *get_task();\n };\n \n inline rust_log &"}, {"sha": "60802be4ac055c74e39a18980d691064d271a6b4", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ba86178efc8c5b733202995427c6345ee80ba1c/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9ba86178efc8c5b733202995427c6345ee80ba1c/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=9ba86178efc8c5b733202995427c6345ee80ba1c", "patch": "@@ -1,6 +1,7 @@\n #include \"rust_cc.h\"\n #include \"rust_gc.h\"\n #include \"rust_internal.h\"\n+#include \"rust_scheduler.h\"\n #include \"rust_unwind.h\"\n #include \"rust_upcall.h\"\n #include <stdint.h>\n@@ -54,7 +55,8 @@ upcall_fail(rust_task *task,\n }\n \n extern \"C\" CDECL uintptr_t\n-upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n+upcall_malloc(rust_task *unused_task, size_t nbytes, type_desc *td) {\n+    rust_task *task = rust_scheduler::get_task();\n     LOG_UPCALL_ENTRY(task);\n \n     LOG(task, mem,"}]}