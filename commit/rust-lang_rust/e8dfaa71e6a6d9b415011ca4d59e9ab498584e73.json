{"sha": "e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGZhYTcxZTZhNmQ5YjQxNTAxMWNhNGQ1OWU5YWI0OTg1ODRlNzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-21T17:11:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:20Z"}, "message": "Correections due to refactoring .", "tree": {"sha": "8d52b08e65cfe00142760691d38f5d6a4ce75a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d52b08e65cfe00142760691d38f5d6a4ce75a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "html_url": "https://github.com/rust-lang/rust/commit/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a681162400b913eaa75eb8de5868db587f4fa35", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a681162400b913eaa75eb8de5868db587f4fa35", "html_url": "https://github.com/rust-lang/rust/commit/5a681162400b913eaa75eb8de5868db587f4fa35"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "a4eeee44fb718a5a242fbae72531d8494aedcd58", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "patch": "@@ -810,7 +810,7 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &TyCtxt<'tcx>, id: DefIndex)\n     let mut parent_path = item_path(item_doc);\n     parent_path.pop();\n     let mut parent_def_path = def_path(cdata, id);\n-    parent_def_path.pop();\n+    parent_def_path.data.pop();\n     if let Some(ast_doc) = reader::maybe_get_doc(item_doc, tag_ast as usize) {\n         let ii = decode_inlined_item(cdata,\n                                      tcx,\n@@ -830,7 +830,7 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &TyCtxt<'tcx>, id: DefIndex)\n         let mut grandparent_path = parent_path;\n         grandparent_path.pop();\n         let mut grandparent_def_path = parent_def_path;\n-        grandparent_def_path.pop();\n+        grandparent_def_path.data.pop();\n         let parent_doc = cdata.lookup_item(parent_did.index);\n         if let Some(ast_doc) = reader::maybe_get_doc(parent_doc, tag_ast as usize) {\n             let ii = decode_inlined_item(cdata,"}, {"sha": "453afa827e8f12218d2892076ab5b052c0140404", "filename": "src/librustc_trans/trans/link_guard.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Flink_guard.rs?ref=e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "patch": "@@ -49,12 +49,11 @@ pub fn get_or_insert_link_guard<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>)\n     }\n \n     let llfty = Type::func(&[], &Type::void(ccx));\n-    let guard_function = declare::define_cfn(ccx,\n-                                             &guard_name[..],\n-                                             llfty,\n-                                             ccx.tcx().mk_nil()).unwrap_or_else(|| {\n-        ccx.sess().bug(\"Link guard already defined.\");\n-    });\n+    if declare::get_defined_value(ccx, &guard_name[..]).is_some() {\n+        ccx.sess().bug(\n+            &format!(\"Link guard already defined\"));\n+    }\n+    let guard_function = declare::declare_cfn(ccx, &guard_name[..], llfty);\n \n     attributes::emit_uwtable(guard_function, true);\n     attributes::unwind(guard_function, false);\n@@ -76,10 +75,12 @@ pub fn get_or_insert_link_guard<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>)\n \n             let dependency_guard_name = link_guard_name(&crate_name[..], &svh);\n \n-            let decl = declare::declare_cfn(ccx,\n-                                            &dependency_guard_name[..],\n-                                            llfty,\n-                                            ccx.tcx().mk_nil());\n+            if declare::get_defined_value(ccx, &dependency_guard_name[..]).is_some() {\n+                ccx.sess().bug(\n+                    &format!(\"Link guard already defined for dependency `{}`\",\n+                             crate_name));\n+            }\n+            let decl = declare::declare_cfn(ccx, &dependency_guard_name[..], llfty);\n             attributes::unwind(decl, false);\n \n             llvm::LLVMPositionBuilderAtEnd(bld, llbb);"}, {"sha": "63abbfd53b6fa9e31c8ad9e5e2c8441d05625494", "filename": "src/librustc_trans/trans/symbol_names_test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/src%2Flibrustc_trans%2Ftrans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8dfaa71e6a6d9b415011ca4d59e9ab498584e73/src%2Flibrustc_trans%2Ftrans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fsymbol_names_test.rs?ref=e8dfaa71e6a6d9b415011ca4d59e9ab498584e73", "patch": "@@ -21,6 +21,7 @@ use rustc_front::intravisit::{self, Visitor};\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use trans::common::CrateContext;\n+use trans::monomorphize::Instance;\n \n const SYMBOL_NAME: &'static str = \"rustc_symbol_name\";\n const ITEM_PATH: &'static str = \"rustc_item_path\";\n@@ -50,8 +51,9 @@ impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n         let def_id = self.tcx.map.local_def_id(node_id);\n         for attr in self.tcx.get_attrs(def_id).iter() {\n             if attr.check_name(SYMBOL_NAME) {\n-                // for now, just monomorphic names\n-                let name = symbol_names::exported_name(self.ccx, def_id, &[]);\n+                // for now, can only use on monomorphic names\n+                let instance = Instance::mono(self.tcx, def_id);\n+                let name = symbol_names::exported_name(self.ccx, &instance);\n                 self.tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", name));\n             } else if attr.check_name(ITEM_PATH) {\n                 let path = self.tcx.item_path_str(def_id);"}]}