{"sha": "70ba23b109f84e2f88ac5057297c527146a4a303", "node_id": "C_kwDOAAsO6NoAKDcwYmEyM2IxMDlmODRlMmY4OGFjNTA1NzI5N2M1MjcxNDZhNGEzMDM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-29T11:20:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-29T11:20:09Z"}, "message": "Merge pull request #1300 from bjorn3/rename_build_to_dist\n\nRename the build/ directory to dist/", "tree": {"sha": "f9120d47002282b36db7ee6860217eb5af18151f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9120d47002282b36db7ee6860217eb5af18151f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ba23b109f84e2f88ac5057297c527146a4a303", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjherpCRBK7hj4Ov3rIwAAaHQIADPwP/HhdDQJ506+uA+O8R0n\nqW0aF8k1mKYQN18wInWPKyXSI4UOR0pGIFQmwQAC2y2U2RDq+O/XIYHQ1TiCbIp8\njHIiFA1MkVJ+NMAV86lM5A7vu3TtW0HlongMD56N2LUR7OclQUbrmGoAxu0zvmrz\naWDvBCW3YoiDjNrF4tQuHrWbLfyhzltWjZC7D5XFWEky+CIraKCiN/Ow13rWUlRg\n6gYnEyyNBuN1/pVueVMUC6vs5g90poJ/a05nzufNeamrRbeDcYxsPwoxfaRa/N5a\nR8WtA8VD8+u74maS1uc4rugj07MyRfUTe0MY7cG57CBKa8je3/OWz5by51AIvFg=\n=V92D\n-----END PGP SIGNATURE-----\n", "payload": "tree f9120d47002282b36db7ee6860217eb5af18151f\nparent a00c7a01dab2834eb16142e8cc7e984bf58508d2\nparent 9c21990283e55c9de4ad90d6923f64a45bff2b27\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1669720809 +0100\ncommitter GitHub <noreply@github.com> 1669720809 +0100\n\nMerge pull request #1300 from bjorn3/rename_build_to_dist\n\nRename the build/ directory to dist/"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ba23b109f84e2f88ac5057297c527146a4a303", "html_url": "https://github.com/rust-lang/rust/commit/70ba23b109f84e2f88ac5057297c527146a4a303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ba23b109f84e2f88ac5057297c527146a4a303/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a00c7a01dab2834eb16142e8cc7e984bf58508d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00c7a01dab2834eb16142e8cc7e984bf58508d2", "html_url": "https://github.com/rust-lang/rust/commit/a00c7a01dab2834eb16142e8cc7e984bf58508d2"}, {"sha": "9c21990283e55c9de4ad90d6923f64a45bff2b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c21990283e55c9de4ad90d6923f64a45bff2b27", "html_url": "https://github.com/rust-lang/rust/commit/9c21990283e55c9de4ad90d6923f64a45bff2b27"}], "stats": {"total": 97, "additions": 51, "deletions": 46}, "files": [{"sha": "de3c89f3383dac0a12a0e67b89ea47ddb3ddc08e", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -111,7 +111,7 @@ jobs:\n         ./y.rs test\n \n     - name: Package prebuilt cg_clif\n-      run: tar cvfJ cg_clif.tar.xz build\n+      run: tar cvfJ cg_clif.tar.xz dist\n \n     - name: Upload prebuilt cg_clif\n       if: matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n@@ -213,7 +213,7 @@ jobs:\n \n     - name: Package prebuilt cg_clif\n       # don't use compression as xzip isn't supported by tar on windows and bzip2 hangs\n-      run: tar cvf cg_clif.tar build\n+      run: tar cvf cg_clif.tar dist\n \n     - name: Upload prebuilt cg_clif\n       uses: actions/upload-artifact@v3"}, {"sha": "b443fd58a1b98344bec2720e26139b6467907d89", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -14,5 +14,6 @@ perf.data.old\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins\n /build_sysroot/rustc_version\n+/dist\n /rust\n /download"}, {"sha": "0e9c77244d4cc85d765371e97370db5c0adebf11", "filename": "Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -37,7 +37,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo-clif build\n+$ $cg_clif_dir/dist/cargo-clif build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend."}, {"sha": "bff5b8f41020a200ce1efb2846868f87568ce93b", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -14,7 +14,7 @@ static ABI_CAFE: CargoProject = CargoProject::git(&ABI_CAFE_REPO, \".\");\n pub(crate) fn run(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    target_dir: &Path,\n+    dist_dir: &Path,\n     cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n@@ -33,7 +33,7 @@ pub(crate) fn run(\n     build_sysroot::build_sysroot(\n         channel,\n         sysroot_kind,\n-        target_dir,\n+        dist_dir,\n         cg_clif_dylib,\n         host_triple,\n         target_triple,"}, {"sha": "4b21df85f5fbf1baafe5a91eb5c980eba576319f", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -9,21 +9,21 @@ use super::SysrootKind;\n pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    target_dir: &Path,\n+    dist_dir: &Path,\n     cg_clif_dylib_src: &Path,\n     host_triple: &str,\n     target_triple: &str,\n ) {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n \n-    if target_dir.exists() {\n-        fs::remove_dir_all(target_dir).unwrap();\n+    if dist_dir.exists() {\n+        fs::remove_dir_all(dist_dir).unwrap();\n     }\n-    fs::create_dir_all(target_dir.join(\"bin\")).unwrap();\n-    fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n+    fs::create_dir_all(dist_dir.join(\"bin\")).unwrap();\n+    fs::create_dir_all(dist_dir.join(\"lib\")).unwrap();\n \n     // Copy the backend\n-    let cg_clif_dylib_path = target_dir\n+    let cg_clif_dylib_path = dist_dir\n         .join(if cfg!(windows) {\n             // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n             // binaries.\n@@ -42,14 +42,14 @@ pub(crate) fn build_sysroot(\n         build_cargo_wrapper_cmd\n             .arg(PathBuf::from(\"scripts\").join(format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n-            .arg(target_dir.join(wrapper_name))\n+            .arg(dist_dir.join(wrapper_name))\n             .arg(\"-g\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n     let default_sysroot = super::rustc_info::get_default_sysroot();\n \n-    let rustlib = target_dir.join(\"lib\").join(\"rustlib\");\n+    let rustlib = dist_dir.join(\"lib\").join(\"rustlib\");\n     let host_rustlib_lib = rustlib.join(host_triple).join(\"lib\");\n     let target_rustlib_lib = rustlib.join(target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n@@ -114,7 +114,7 @@ pub(crate) fn build_sysroot(\n         SysrootKind::Clif => {\n             build_clif_sysroot_for_triple(\n                 channel,\n-                target_dir,\n+                dist_dir,\n                 host_triple,\n                 &cg_clif_dylib_path,\n                 None,\n@@ -129,7 +129,7 @@ pub(crate) fn build_sysroot(\n                 };\n                 build_clif_sysroot_for_triple(\n                     channel,\n-                    target_dir,\n+                    dist_dir,\n                     target_triple,\n                     &cg_clif_dylib_path,\n                     linker,\n@@ -142,7 +142,7 @@ pub(crate) fn build_sysroot(\n                 let file = file.unwrap().path();\n                 let filename = file.file_name().unwrap().to_str().unwrap();\n                 if filename.contains(\"std-\") && !filename.contains(\".rlib\") {\n-                    try_hard_link(&file, target_dir.join(\"lib\").join(file.file_name().unwrap()));\n+                    try_hard_link(&file, dist_dir.join(\"lib\").join(file.file_name().unwrap()));\n                 }\n             }\n         }\n@@ -153,7 +153,7 @@ static STANDARD_LIBRARY: CargoProject = CargoProject::local(\"build_sysroot\");\n \n fn build_clif_sysroot_for_triple(\n     channel: &str,\n-    target_dir: &Path,\n+    dist_dir: &Path,\n     triple: &str,\n     cg_clif_dylib_path: &Path,\n     linker: Option<&str>,\n@@ -189,7 +189,7 @@ fn build_clif_sysroot_for_triple(\n     // Build sysroot\n     let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n-    rustflags.push_str(&format!(\" --sysroot={}\", target_dir.to_str().unwrap()));\n+    rustflags.push_str(&format!(\" --sysroot={}\", dist_dir.to_str().unwrap()));\n     if channel == \"release\" {\n         rustflags.push_str(\" -Zmir-opt-level=3\");\n     }\n@@ -221,7 +221,7 @@ fn build_clif_sysroot_for_triple(\n         };\n         try_hard_link(\n             entry.path(),\n-            target_dir.join(\"lib\").join(\"rustlib\").join(triple).join(\"lib\").join(entry.file_name()),\n+            dist_dir.join(\"lib\").join(\"rustlib\").join(triple).join(\"lib\").join(entry.file_name()),\n         );\n     }\n }"}, {"sha": "531f42cf873007145aeca8d3f69a50936680cd92", "filename": "build_system/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -17,10 +17,10 @@ fn usage() {\n     eprintln!(\"Usage:\");\n     eprintln!(\"  ./y.rs prepare\");\n     eprintln!(\n-        \"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--no-unstable-features]\"\n+        \"  ./y.rs build [--debug] [--sysroot none|clif|llvm] [--dist-dir DIR] [--no-unstable-features]\"\n     );\n     eprintln!(\n-        \"  ./y.rs test [--debug] [--sysroot none|clif|llvm] [--target-dir DIR] [--no-unstable-features]\"\n+        \"  ./y.rs test [--debug] [--sysroot none|clif|llvm] [--dist-dir DIR] [--no-unstable-features]\"\n     );\n }\n \n@@ -75,15 +75,15 @@ pub fn main() {\n         }\n     };\n \n-    let mut target_dir = PathBuf::from(\"build\");\n+    let mut dist_dir = PathBuf::from(\"dist\");\n     let mut channel = \"release\";\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n-            \"--target-dir\" => {\n-                target_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n-                    arg_error!(\"--target-dir requires argument\");\n+            \"--dist-dir\" => {\n+                dist_dir = PathBuf::from(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--dist-dir requires argument\");\n                 }))\n             }\n             \"--debug\" => channel = \"debug\",\n@@ -101,7 +101,7 @@ pub fn main() {\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n-    target_dir = std::env::current_dir().unwrap().join(target_dir);\n+    dist_dir = std::env::current_dir().unwrap().join(dist_dir);\n \n     let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n         host_triple\n@@ -128,7 +128,7 @@ pub fn main() {\n             tests::run_tests(\n                 channel,\n                 sysroot_kind,\n-                &target_dir,\n+                &dist_dir,\n                 &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,\n@@ -137,7 +137,7 @@ pub fn main() {\n             abi_cafe::run(\n                 channel,\n                 sysroot_kind,\n-                &target_dir,\n+                &dist_dir,\n                 &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,\n@@ -147,7 +147,7 @@ pub fn main() {\n             build_sysroot::build_sysroot(\n                 channel,\n                 sysroot_kind,\n-                &target_dir,\n+                &dist_dir,\n                 &cg_clif_dylib,\n                 &host_triple,\n                 &target_triple,"}, {"sha": "aa46cd0a250e762a9d293f920a67ddf70f42fb74", "filename": "build_system/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -274,7 +274,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n             let cargo_clif = env::current_dir()\n                 .unwrap()\n-                .join(\"build\")\n+                .join(\"dist\")\n                 .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n             let source_dir = SIMPLE_RAYTRACER.source_dir();\n             let manifest_path = SIMPLE_RAYTRACER.manifest_path();\n@@ -432,7 +432,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n-    target_dir: &Path,\n+    dist_dir: &Path,\n     cg_clif_dylib: &Path,\n     host_triple: &str,\n     target_triple: &str,\n@@ -443,7 +443,7 @@ pub(crate) fn run_tests(\n         build_sysroot::build_sysroot(\n             channel,\n             SysrootKind::None,\n-            &target_dir,\n+            &dist_dir,\n             cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n@@ -462,7 +462,7 @@ pub(crate) fn run_tests(\n         build_sysroot::build_sysroot(\n             channel,\n             sysroot_kind,\n-            &target_dir,\n+            &dist_dir,\n             cg_clif_dylib,\n             &host_triple,\n             &target_triple,\n@@ -503,11 +503,11 @@ impl TestRunner {\n             target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n \n         let mut rustc_clif = root_dir.clone();\n-        rustc_clif.push(\"build\");\n+        rustc_clif.push(\"dist\");\n         rustc_clif.push(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n \n         let mut rustdoc_clif = root_dir.clone();\n-        rustdoc_clif.push(\"build\");\n+        rustdoc_clif.push(\"dist\");\n         rustdoc_clif.push(get_wrapper_file_name(\"rustdoc-clif\", \"bin\"));\n \n         let mut rustflags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());"}, {"sha": "cd20f3ea3f1e76df75d5ac0de70d64d8e92d6b61", "filename": "clean_all.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -2,9 +2,9 @@\n set -e\n \n rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}\n-rm -rf target/ build/ perf.data{,.old} y.bin\n+rm -rf target/ dist/ perf.data{,.old} y.bin\n rm -rf download/\n \n # Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n # FIXME remove at some point in the future\n-rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/\n+rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/ build/"}, {"sha": "4c2b0fa170498812b976b67041cc62ab73ff3f81", "filename": "docs/usage.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/docs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/docs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fusage.md?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -9,7 +9,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo-clif build\n+$ $cg_clif_dir/dist/cargo-clif build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n@@ -19,7 +19,7 @@ This will build your project with rustc_codegen_cranelift instead of the usual L\n > You should prefer using the Cargo method.\n \n ```bash\n-$ $cg_clif_dir/build/rustc-clif my_crate.rs\n+$ $cg_clif_dir/dist/rustc-clif my_crate.rs\n ```\n \n ## Jit mode\n@@ -32,20 +32,20 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/build/cargo-clif jit\n+$ $cg_clif_dir/dist/cargo-clif jit\n ```\n \n or\n \n ```bash\n-$ $cg_clif_dir/build/rustc-clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n+$ $cg_clif_dir/dist/rustc-clif -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n ```\n \n There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n first called.\n \n ```bash\n-$ $cg_clif_dir/build/cargo-clif lazy-jit\n+$ $cg_clif_dir/dist/cargo-clif lazy-jit\n ```\n \n ## Shell\n@@ -54,7 +54,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/rustc-clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic\n+    echo \"$@\" | $cg_clif_dir/dist/rustc-clif - -Zunstable-features -Cllvm-args=mode=jit -Cprefer-dynamic\n }\n \n function jit() {"}, {"sha": "f782671fe36f9b45fab05a5c6f335d9880211c23", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -2,7 +2,7 @@\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../\n-RUSTC=\"$(pwd)/build/rustc-clif\"\n+RUSTC=\"$(pwd)/dist/rustc-clif\"\n popd\n PROFILE=$1 OUTPUT=$2 exec $RUSTC -Zunstable-options -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/"}, {"sha": "6c64b7de7daa10d863a903a186e0ee9c4846aeed", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -36,7 +36,7 @@ changelog-seen = 2\n ninja = false\n \n [build]\n-rustc = \"$(pwd)/../build/rustc-clif\"\n+rustc = \"$(pwd)/../dist/rustc-clif\"\n cargo = \"$(rustup which cargo)\"\n full-bootstrap = true\n local-rebuild = true"}, {"sha": "d2656f783ad86c20c5385730600068095befc3ed", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -89,7 +89,7 @@ rm src/test/ui/consts/issue-33537.rs # same\n # doesn't work due to the way the rustc test suite is invoked.\n # should work when using ./x.py test the way it is intended\n # ============================================================\n-rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in build/bin/\n+rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in dist/bin/\n rm -r src/test/run-make/unstable-flag-required # same\n rm -r src/test/run-make/rustdoc-* # same\n rm -r src/test/run-make/issue-88756-default-output # same"}, {"sha": "b431158d2690f02d5f3077820ec7c1f36070f7bf", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ba23b109f84e2f88ac5057297c527146a4a303/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba23b109f84e2f88ac5057297c527146a4a303/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=70ba23b109f84e2f88ac5057297c527146a4a303", "patch": "@@ -16,6 +16,10 @@ pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n     // llvm.aarch64.neon.sqshl.v*i*\n \n     match intrinsic {\n+        \"llvm.aarch64.isb\" => {\n+            fx.bcx.ins().fence();\n+        }\n+\n         _ if intrinsic.starts_with(\"llvm.aarch64.neon.abs.v\") => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n "}]}