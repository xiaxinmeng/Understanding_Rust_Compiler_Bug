{"sha": "86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZmJkYmZiY2Q0YzAxOWZkYTI2ZmY3M2I5ZTFlMzBlZDdhOGIxNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-23T12:02:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-23T12:02:27Z"}, "message": "Auto merge of #21453 - Stebalien:exactsize, r=alexcrichton\n\nSpecifically:\r\n * Peekable\r\n * ByRef\r\n * Skip\r\n * Take\r\n * Fuse\r\n\r\nFixes  #20547", "tree": {"sha": "28041b766151dbaee456ced9bbf4466397a64c00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28041b766151dbaee456ced9bbf4466397a64c00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "html_url": "https://github.com/rust-lang/rust/commit/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedcbb9d82ccd7ead4b075ff55a99e363be94174", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedcbb9d82ccd7ead4b075ff55a99e363be94174", "html_url": "https://github.com/rust-lang/rust/commit/aedcbb9d82ccd7ead4b075ff55a99e363be94174"}, {"sha": "1479de86885c5c2b35556cc89196a6d2385341c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1479de86885c5c2b35556cc89196a6d2385341c8", "html_url": "https://github.com/rust-lang/rust/commit/1479de86885c5c2b35556cc89196a6d2385341c8"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "2673cf1af78ddde89cb6324878a4938eef8d90d1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "patch": "@@ -1128,6 +1128,9 @@ impl<'a, I> DoubleEndedIterator for ByRef<'a, I> where I: 'a + DoubleEndedIterat\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next_back() }\n }\n \n+#[stable]\n+impl<'a, I> ExactSizeIterator for ByRef<'a, I> where I: 'a + ExactSizeIterator {}\n+\n /// A trait for iterators over elements which can be added together\n #[unstable = \"needs to be re-evaluated as part of numerics reform\"]\n pub trait AdditiveIterator<A> {\n@@ -1831,6 +1834,9 @@ impl<T, I> Iterator for Peekable<T, I> where I: Iterator<Item=T> {\n     }\n }\n \n+#[stable]\n+impl<T, I> ExactSizeIterator for Peekable<T, I> where I: ExactSizeIterator<Item = T> {}\n+\n #[stable]\n impl<T, I> Peekable<T, I> where I: Iterator<Item=T> {\n     /// Return a reference to the next element of the iterator with out advancing it,\n@@ -2023,6 +2029,9 @@ impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n     }\n }\n \n+#[stable]\n+impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {}\n+\n /// An iterator that only iterates over the first `n` iterations of `iter`.\n #[derive(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -2078,6 +2087,9 @@ impl<I> RandomAccessIterator for Take<I> where I: RandomAccessIterator{\n     }\n }\n \n+#[stable]\n+impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n+\n \n /// An iterator to maintain state while iterating another iterator\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n@@ -2287,6 +2299,9 @@ impl<I> RandomAccessIterator for Fuse<I> where I: RandomAccessIterator {\n     }\n }\n \n+#[stable]\n+impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {}\n+\n impl<I> Fuse<I> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will\n     /// call the underlying iterator again even if it previously returned None."}, {"sha": "9481245f1206ee29fac5082d5f086f785c463c51", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=86fbdbfbcd4c019fda26ff73b9e1e30ed7a8b174", "patch": "@@ -120,18 +120,32 @@ fn test_iterator_enumerate() {\n fn test_iterator_peekable() {\n     let xs = vec![0u, 1, 2, 3, 4, 5];\n     let mut it = xs.iter().map(|&x|x).peekable();\n+\n+    assert_eq!(it.len(), 6);\n     assert_eq!(it.peek().unwrap(), &0);\n+    assert_eq!(it.len(), 6);\n     assert_eq!(it.next().unwrap(), 0);\n+    assert_eq!(it.len(), 5);\n     assert_eq!(it.next().unwrap(), 1);\n+    assert_eq!(it.len(), 4);\n     assert_eq!(it.next().unwrap(), 2);\n+    assert_eq!(it.len(), 3);\n     assert_eq!(it.peek().unwrap(), &3);\n+    assert_eq!(it.len(), 3);\n     assert_eq!(it.peek().unwrap(), &3);\n+    assert_eq!(it.len(), 3);\n     assert_eq!(it.next().unwrap(), 3);\n+    assert_eq!(it.len(), 2);\n     assert_eq!(it.next().unwrap(), 4);\n+    assert_eq!(it.len(), 1);\n     assert_eq!(it.peek().unwrap(), &5);\n+    assert_eq!(it.len(), 1);\n     assert_eq!(it.next().unwrap(), 5);\n+    assert_eq!(it.len(), 0);\n     assert!(it.peek().is_none());\n+    assert_eq!(it.len(), 0);\n     assert!(it.next().is_none());\n+    assert_eq!(it.len(), 0);\n }\n \n #[test]\n@@ -166,24 +180,45 @@ fn test_iterator_skip() {\n     let ys = [13, 15, 16, 17, 19, 20, 30];\n     let mut it = xs.iter().skip(5);\n     let mut i = 0;\n-    for &x in it {\n+    while let Some(&x) = it.next() {\n         assert_eq!(x, ys[i]);\n         i += 1;\n+        assert_eq!(it.len(), xs.len()-5-i);\n     }\n     assert_eq!(i, ys.len());\n+    assert_eq!(it.len(), 0);\n }\n \n #[test]\n fn test_iterator_take() {\n-    let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n-    let ys = [0u, 1, 2, 3, 5];\n+    let xs = [0us, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+    let ys = [0us, 1, 2, 3, 5];\n     let mut it = xs.iter().take(5);\n     let mut i = 0;\n-    for &x in it {\n+    assert_eq!(it.len(), 5);\n+    while let Some(&x) = it.next() {\n+        assert_eq!(x, ys[i]);\n+        i += 1;\n+        assert_eq!(it.len(), 5-i);\n+    }\n+    assert_eq!(i, ys.len());\n+    assert_eq!(it.len(), 0);\n+}\n+\n+#[test]\n+fn test_iterator_take_short() {\n+    let xs = [0us, 1, 2, 3];\n+    let ys = [0us, 1, 2, 3];\n+    let mut it = xs.iter().take(5);\n+    let mut i = 0;\n+    assert_eq!(it.len(), 4);\n+    while let Some(&x) = it.next() {\n         assert_eq!(x, ys[i]);\n         i += 1;\n+        assert_eq!(it.len(), 4-i);\n     }\n     assert_eq!(i, ys.len());\n+    assert_eq!(it.len(), 0);\n }\n \n #[test]\n@@ -828,6 +863,24 @@ fn test_repeat() {\n     assert_eq!(it.next(), Some(42u));\n }\n \n+#[test]\n+fn test_fuse() {\n+    let mut it = 0us..3;\n+    assert_eq!(it.len(), 3);\n+    assert_eq!(it.next(), Some(0us));\n+    assert_eq!(it.len(), 2);\n+    assert_eq!(it.next(), Some(1us));\n+    assert_eq!(it.len(), 1);\n+    assert_eq!(it.next(), Some(2us));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(it.len(), 0);\n+}\n+\n #[bench]\n fn bench_rposition(b: &mut Bencher) {\n     let it: Vec<uint> = range(0u, 300).collect();"}]}