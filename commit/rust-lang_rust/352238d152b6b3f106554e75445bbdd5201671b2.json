{"sha": "352238d152b6b3f106554e75445bbdd5201671b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MjIzOGQxNTJiNmIzZjEwNjU1NGU3NTQ0NWJiZGQ1MjAxNjcxYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-22T06:47:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-22T06:47:59Z"}, "message": "Auto merge of #79979 - GuillaumeGomez:rustdoc-gui-tests, r=Mark-Simulacrum\n\nRustdoc gui tests\n\nThis is a reopening of #70533.\n\nFor this first version, there will be no screenshot comparison. Also, a big change compared to the previous version: the tests are now hosted in the rust repository directly. Since there is no image, it's pretty lightweight to say the least.\n\nSo now, only remains the nodejs script to run the tests and the tests themselves. Just one thing is missing: where should I put the documentation for these tests? I'm not sure where would be the best place for that. The doc will contain important information like the documentation of the framework used and how to install it (`npm install browser-ui-test`, but still needs to be put somewhere so no one is lost).\n\nWe'd also need to install the package when running the CI too. For now, it runs as long as we have nodejs installed, but I think we don't it to run in all nodejs targets?\n\ncc `@jyn514`\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "146cb88c6a6c29e8f94b7aa17a07874d5b6bc230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/146cb88c6a6c29e8f94b7aa17a07874d5b6bc230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352238d152b6b3f106554e75445bbdd5201671b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352238d152b6b3f106554e75445bbdd5201671b2", "html_url": "https://github.com/rust-lang/rust/commit/352238d152b6b3f106554e75445bbdd5201671b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352238d152b6b3f106554e75445bbdd5201671b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e952db8fd02090a10024ae63ba9d34e3b9cef898", "url": "https://api.github.com/repos/rust-lang/rust/commits/e952db8fd02090a10024ae63ba9d34e3b9cef898", "html_url": "https://github.com/rust-lang/rust/commit/e952db8fd02090a10024ae63ba9d34e3b9cef898"}, {"sha": "20f2497efd5e74bdbf775f8de144ed5c3e3394e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f2497efd5e74bdbf775f8de144ed5c3e3394e8", "html_url": "https://github.com/rust-lang/rust/commit/20f2497efd5e74bdbf775f8de144ed5c3e3394e8"}], "stats": {"total": 315, "additions": 312, "deletions": 3}, "files": [{"sha": "3b2e8bd86a11c85967cddee3f61e30e46c7a0b3e", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -50,4 +50,6 @@ Session.vim\n .cargo\n !/src/test/run-make/thumb-none-qemu/example/.cargo\n no_llvm_build\n+**node_modules\n+**package-lock.json\n # Before adding new lines, see the comment at the top."}, {"sha": "08f10fbd794aa3c3fe79325cdff3762073840a6b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -440,6 +440,7 @@ impl<'a> Builder<'a> {\n                 test::CompiletestTest,\n                 test::RustdocJSStd,\n                 test::RustdocJSNotStd,\n+                test::RustdocGUI,\n                 test::RustdocTheme,\n                 test::RustdocUi,\n                 test::RustdocJson,"}, {"sha": "d50d605d5c695cd24e6bcb5e1277bbc982123029", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -174,6 +174,7 @@ pub struct Config {\n     pub mandir: Option<PathBuf>,\n     pub codegen_tests: bool,\n     pub nodejs: Option<PathBuf>,\n+    pub npm: Option<PathBuf>,\n     pub gdb: Option<PathBuf>,\n     pub python: Option<PathBuf>,\n     pub cargo_native_static: bool,\n@@ -364,6 +365,7 @@ struct Build {\n     fast_submodules: Option<bool>,\n     gdb: Option<String>,\n     nodejs: Option<String>,\n+    npm: Option<String>,\n     python: Option<String>,\n     locked_deps: Option<bool>,\n     vendor: Option<bool>,\n@@ -654,6 +656,7 @@ impl Config {\n         };\n \n         config.nodejs = build.nodejs.map(PathBuf::from);\n+        config.npm = build.npm.map(PathBuf::from);\n         config.gdb = build.gdb.map(PathBuf::from);\n         config.python = build.python.map(PathBuf::from);\n         set(&mut config.low_priority, build.low_priority);"}, {"sha": "5d708d3b25c12f3e7db7402be58e5b05997554fa", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -637,6 +637,10 @@ impl Build {\n         self.out.join(&*target.triple).join(\"doc\")\n     }\n \n+    fn test_out(&self, target: TargetSelection) -> PathBuf {\n+        self.out.join(&*target.triple).join(\"test\")\n+    }\n+\n     /// Output directory for all documentation for a target\n     fn compiler_doc_out(&self, target: TargetSelection) -> PathBuf {\n         self.out.join(&*target.triple).join(\"compiler-doc\")"}, {"sha": "47cf1172d3659e17030a28942f3a465751e4fa26", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -45,6 +45,10 @@ check-aux:\n \t\tsrc/tools/cargo \\\n \t\tsrc/tools/cargotest \\\n \t\t$(BOOTSTRAP_ARGS)\n+check-aux-and-gui: check-aux\n+\t$(Q)$(BOOTSTRAP) test --stage 2 \\\n+\t\tsrc/test/rustdoc-gui \\\n+\t\t$(BOOTSTRAP_ARGS)\n check-bootstrap:\n \t$(Q)$(CFG_PYTHON) $(CFG_SRC_DIR)src/bootstrap/bootstrap_test.py\n dist:"}, {"sha": "ed0cbdf97b0910d716ac83c2d91a0c7ea466dd6f", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -113,6 +113,13 @@ pub fn check(build: &mut Build) {\n         .or_else(|| cmd_finder.maybe_have(\"node\"))\n         .or_else(|| cmd_finder.maybe_have(\"nodejs\"));\n \n+    build.config.npm = build\n+        .config\n+        .npm\n+        .take()\n+        .map(|p| cmd_finder.must_have(p))\n+        .or_else(|| cmd_finder.maybe_have(\"npm\"));\n+\n     build.config.gdb = build\n         .config\n         .gdb"}, {"sha": "49d56f4cbdfe3ea4f5c046c16dd197b4195ce5e1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -688,6 +688,78 @@ impl Step for RustdocJSNotStd {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocGUI {\n+    pub target: TargetSelection,\n+    pub compiler: Compiler,\n+}\n+\n+impl Step for RustdocGUI {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/test/rustdoc-gui\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(RustdocGUI { target: run.target, compiler });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        if let (Some(nodejs), Some(npm)) = (&builder.config.nodejs, &builder.config.npm) {\n+            builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n+\n+            // The goal here is to check if the necessary packages are installed, and if not, we\n+            // display a warning and move on.\n+            let mut command = Command::new(&npm);\n+            command.arg(\"list\").arg(\"--depth=0\");\n+            let lines = command\n+                .output()\n+                .map(|output| String::from_utf8_lossy(&output.stdout).to_string())\n+                .unwrap_or(String::new());\n+            if !lines.contains(&\" browser-ui-test@\") {\n+                println!(\n+                    \"warning: rustdoc-gui test suite cannot be run because npm `browser-ui-test` \\\n+                     dependency is missing\",\n+                );\n+                println!(\n+                    \"If you want to install the `{0}` dependency, run `npm install {0}`\",\n+                    \"browser-ui-test\",\n+                );\n+                return;\n+            }\n+\n+            let out_dir = builder.test_out(self.target).join(\"rustdoc-gui\");\n+            let mut command = builder.rustdoc_cmd(self.compiler);\n+            command.arg(\"src/test/rustdoc-gui/lib.rs\").arg(\"-o\").arg(&out_dir);\n+            builder.run(&mut command);\n+\n+            for file in fs::read_dir(\"src/test/rustdoc-gui\").unwrap() {\n+                let file = file.unwrap();\n+                let file_path = file.path();\n+                let file_name = file.file_name();\n+\n+                if !file_name.to_str().unwrap().ends_with(\".goml\") {\n+                    continue;\n+                }\n+                let mut command = Command::new(&nodejs);\n+                command\n+                    .arg(\"src/tools/rustdoc-gui/tester.js\")\n+                    .arg(\"--doc-folder\")\n+                    .arg(out_dir.join(\"test_docs\"))\n+                    .arg(\"--test-file\")\n+                    .arg(file_path);\n+                builder.run(&mut command);\n+            }\n+        } else {\n+            builder.info(\"No nodejs found, skipping \\\"src/test/rustdoc-gui\\\" tests\");\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy;\n \n@@ -1048,6 +1120,9 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n+        if let Some(ref npm) = builder.config.npm {\n+            cmd.arg(\"--npm\").arg(npm);\n+        }\n \n         let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n         if !is_rustdoc {"}, {"sha": "a5bedadc05b6170e3ef540b8a1ce99fbf777d983", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-aux%2FDockerfile?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -17,10 +17,30 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libgl1-mesa-dev \\\n   llvm-dev \\\n   libfreetype6-dev \\\n-  libexpat1-dev\n+  libexpat1-dev \\\n+  libexpat1-dev \\\n+  gnupg \\\n+  apt-utils \\\n+  wget \\\n+  fonts-ipafont-gothic \\\n+  fonts-wqy-zenhei \\\n+  fonts-thai-tlwg \\\n+  fonts-kacst \\\n+  fonts-freefont-ttf \\\n+  libxss1 \\\n+  libxtst6\n+\n+RUN curl -sL https://nodejs.org/dist/v14.4.0/node-v14.4.0-linux-x64.tar.xz | tar -xJ\n+ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n+\n+# Install required dependencies from browser-UI-test framework\n+# For now, we need to use `--unsafe-perm=true` to go around an issue when npm tries\n+# to create a new folder. For reference:\n+# https://github.com/puppeteer/puppeteer/issues/375\n+RUN npm install browser-ui-test -g --unsafe-perm=true\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n-ENV RUST_CHECK_TARGET check-aux\n+ENV RUST_CHECK_TARGET check-aux-and-gui"}, {"sha": "8da465662547a6afcb532f44a4ebcf472158571a", "filename": "src/test/rustdoc-gui/basic-code.goml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic-code.goml?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,3 @@\n+goto: file://|DOC_PATH|/index.html\n+click: \".srclink\"\n+assert: (\".line-numbers\", 1)"}, {"sha": "ed23300860b706ccf235e281913fc7bd32fdc27d", "filename": "src/test/rustdoc-gui/basic.goml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic.goml?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,4 @@\n+goto: file://|DOC_PATH|/index.html\n+assert: (\"#functions\")\n+goto: ./struct.Foo.html\n+assert: (\"div.type-decl\")"}, {"sha": "69fc860244b7b113f24bb9f6031dbbf579a7ef5f", "filename": "src/test/rustdoc-gui/code-sidebar-toggle.goml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,6 @@\n+goto: file://|DOC_PATH|/index.html\n+click: \".srclink\"\n+click: \"#sidebar-toggle\"\n+wait-for: 500\n+fail: true\n+assert: (\"#source-sidebar\", { \"left\": \"-300px\" })"}, {"sha": "3c996f5b65c92d54c12dbceee12ed4158feb248e", "filename": "src/test/rustdoc-gui/lib.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flib.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,67 @@\n+//! The point of this crate is to be able to have enough different \"kinds\" of\n+//! documentation generated so we can test each different features.\n+\n+#![crate_name = \"test_docs\"]\n+\n+use std::fmt;\n+\n+/// Basic function with some code examples:\n+///\n+/// ```\n+/// println!(\"nothing fancy\");\n+/// ```\n+///\n+/// A failing to compile one:\n+///\n+/// ```compile_fail\n+/// println!(\"where did my argument {} go? :'(\");\n+/// ```\n+///\n+/// An ignored one:\n+///\n+/// ```ignore (it's a test)\n+/// Let's say I'm just some text will ya?\n+/// ```\n+pub fn foo() {}\n+\n+/// Just a normal struct.\n+pub struct Foo;\n+\n+/// Just a normal enum.\n+pub enum WhoLetTheDogOut {\n+    /// Woof!\n+    Woof,\n+    /// Meoooooooow...\n+    Meow,\n+}\n+\n+/// Who doesn't love to wrap a `format!` call?\n+pub fn some_more_function<T: fmt::Debug>(t: &T) -> String {\n+    format!(\"{:?}\", t)\n+}\n+\n+/// Woohoo! A trait!\n+pub trait AnotherOne {\n+    /// Some func 1.\n+    fn func1();\n+\n+    /// Some func 2.\n+    fn func2();\n+\n+    /// Some func 3.\n+    fn func3();\n+}\n+\n+/// Check for \"i\" signs in lists!\n+///\n+/// 1. elem 1\n+/// 2.test 1\n+///   ```compile_fail\n+///   fn foo() {}\n+///   ```\n+/// 3. elem 3\n+/// 4. ```ignore (it's a test)\n+///    fn foo() {}\n+///    ```\n+/// 5. elem 5\n+pub fn check_list_code_block() {}"}, {"sha": "6f2465a5587f2a6674a82e9aebeb2ec8a3fa26e7", "filename": "src/test/rustdoc-gui/list_code_block.goml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flist_code_block.goml?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,3 @@\n+goto: file://|DOC_PATH|/index.html\n+goto: ./fn.check_list_code_block.html\n+assert: (\"pre.rust.fn\")"}, {"sha": "5bd65f61f49050fa302935a8b96af317662b2b65", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,10 @@\n+goto: file://|DOC_PATH|/index.html\n+click: \"#theme-picker\"\n+click: \"#theme-choices > button:first-child\"\n+wait-for: 500\n+// should be the ayu theme so let's check the color\n+assert: (\"body\", { \"background-color\": \"rgb(15, 20, 25)\" })\n+click: \"#theme-choices > button:last-child\"\n+wait-for: 500\n+// should be the light theme so let's check the color\n+assert: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })"}, {"sha": "1ded33f659d3c6fb1e5de86eddc5f48cb0e11115", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,7 @@\n+goto: file://|DOC_PATH|/index.html\n+click: \"#toggle-all-docs\"\n+wait-for: 5000\n+assert: (\"#main > div.docblock.hidden-by-usual-hider\")\n+click: \"#toggle-all-docs\"\n+wait-for: 5000\n+assert: (\"#main > div.docblock.hidden-by-usual-hider\", 0)"}, {"sha": "99cbcf316a25c95542a9b696d29776922766edd5", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -344,6 +344,8 @@ pub struct Config {\n \n     /// Path to a NodeJS executable. Used for JS doctests, emscripten and WASM tests\n     pub nodejs: Option<String>,\n+    /// Path to a npm executable. Used for rustdoc GUI tests\n+    pub npm: Option<String>,\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "5f263ea87db1804796faf0fb9986f4a372d0fade", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -126,6 +126,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n         .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n         .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n+        .optopt(\"\", \"npm\", \"the name of npm\", \"PATH\")\n         .optopt(\"\", \"remote-test-client\", \"path to the remote test client\", \"PATH\")\n         .optopt(\n             \"\",\n@@ -264,6 +265,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         linker: matches.opt_str(\"linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n         nodejs: matches.opt_str(\"nodejs\"),\n+        npm: matches.opt_str(\"npm\"),\n     }\n }\n "}, {"sha": "61b21bce10be245b300553c93324d51117bd6c7d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -1585,7 +1585,7 @@ impl<'test> TestCx<'test> {\n \n         let aux_dir = self.aux_output_dir_name();\n \n-        let rustdoc_path = self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path passed\");\n+        let rustdoc_path = self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path not passed\");\n         let mut rustdoc = Command::new(rustdoc_path);\n \n         rustdoc"}, {"sha": "a67e2455478f88a14a7fb6c794c83f4cb74030c1", "filename": "src/tools/rustdoc-gui/tester.js", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/352238d152b6b3f106554e75445bbdd5201671b2/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=352238d152b6b3f106554e75445bbdd5201671b2", "patch": "@@ -0,0 +1,89 @@\n+// This package needs to be install:\n+//\n+// ```\n+// npm install browser-ui-test\n+// ```\n+const path = require('path');\n+const {Options, runTest} = require('browser-ui-test');\n+\n+function showHelp() {\n+    console.log(\"rustdoc-js options:\");\n+    console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n+    console.log(\"  --help                     : show this message then quit\");\n+    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+}\n+\n+function parseOptions(args) {\n+    var opts = {\n+        \"doc_folder\": \"\",\n+        \"test_file\": \"\",\n+    };\n+    var correspondances = {\n+        \"--doc-folder\": \"doc_folder\",\n+        \"--test-file\": \"test_file\",\n+    };\n+\n+    for (var i = 0; i < args.length; ++i) {\n+        if (args[i] === \"--doc-folder\"\n+            || args[i] === \"--test-file\") {\n+            i += 1;\n+            if (i >= args.length) {\n+                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                return null;\n+            }\n+            opts[correspondances[args[i - 1]]] = args[i];\n+        } else if (args[i] === \"--help\") {\n+            showHelp();\n+            process.exit(0);\n+        } else {\n+            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Use `--help` to see the list of options\");\n+            return null;\n+        }\n+    }\n+    if (opts[\"test_file\"].length < 1) {\n+        console.log(\"Missing `--test-file` option.\");\n+    } else if (opts[\"doc_folder\"].length < 1) {\n+        console.log(\"Missing `--doc-folder` option.\");\n+    } else {\n+        return opts;\n+    }\n+    return null;\n+}\n+\n+function checkFile(test_file, opts, loaded, index) {\n+    const test_name = path.basename(test_file, \".js\");\n+\n+    process.stdout.write('Checking \"' + test_name + '\" ... ');\n+    return runChecks(test_file, loaded, index);\n+}\n+\n+function main(argv) {\n+    var opts = parseOptions(argv.slice(2));\n+    if (opts === null) {\n+        process.exit(1);\n+    }\n+\n+    const options = new Options();\n+    try {\n+        // This is more convenient that setting fields one by one.\n+        options.parseArguments([\n+            '--no-screenshot',\n+            \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n+        ]);\n+    } catch (error) {\n+        console.error(`invalid argument: ${error}`);\n+        process.exit(1);\n+    }\n+\n+    runTest(opts[\"test_file\"], options).then(out => {\n+        const [output, nb_failures] = out;\n+        console.log(output);\n+        process.exit(nb_failures);\n+    }).catch(err => {\n+        console.error(err);\n+        process.exit(1);\n+    });\n+}\n+\n+main(process.argv);"}]}