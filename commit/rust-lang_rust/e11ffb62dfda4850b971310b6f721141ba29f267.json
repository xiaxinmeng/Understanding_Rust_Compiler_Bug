{"sha": "e11ffb62dfda4850b971310b6f721141ba29f267", "node_id": "C_kwDOAAsO6NoAKGUxMWZmYjYyZGZkYTQ4NTBiOTcxMzEwYjZmNzIxMTQxYmEyOWYyNjc", "commit": {"author": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-05-30T09:57:37Z"}, "committer": {"name": "\u8bb8\u6770\u53cb Jieyou Xu (Joe)", "email": "jieyouxu@outlook.com", "date": "2023-05-30T09:57:37Z"}, "message": "Don't typecheck suggested method call\n\nOnly make the use-dot-operator-to-call-method suggestion, but do not\ndouble down and use the recovered type to perform method call\ntypechecking as it will produce confusing diagnostics on the \"fixed\"\ncode.", "tree": {"sha": "8a8d3a5a6895179e83789ce30355610e8a581ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a8d3a5a6895179e83789ce30355610e8a581ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11ffb62dfda4850b971310b6f721141ba29f267", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEze4qXcfh0ileWqZTxf1dMgFP20cFAmR1yTgACgkQxf1dMgFP\n20d4Sw/+Pg3EmtyxiEcN3pHY7Flkp7fVJLZ/wGFMt2shwOntLSKc6MKu/mLaaWuL\nd99aPOGDPE1leRAeYN18I5EzeUD78nSzolhyzqTd8mDB6H7/SPAIuUkV6N2xYpMr\nYk44vuk1060R7eiu28B5FXsSkL9/kMEKPXu9Gu2tA7rch8XhRRKAmQLKEWJ/Tv/g\ngEdZChnsjBzJkqBJRd7ReRrYfNpGf5mRUhNYDHzGHtTrxVnPmh8j+8+A3Gsc6xQ7\nqyaRj+ZT3Ug9NBhg19cKWXz2xDPV8PPaV/yn/lc9kUeOf9vCu//oyAKm/TwQwn0B\n5PbtrCIPc0VJ18K4ttIVsYDVBXh5NormEZdFIKQJvq5Qgt48r37hJsMRuCwi2DEn\nlpafUUOznWN5qGKlqZKFlYBQFFOS3cGTHnJjxj//oSQX70p2rxLqFTplHQiMclTV\nDdm2ISzUeMht1KKwADfpJE3ApQE3K67PKG+VTgCucSS4L5cJ6GJm5v4nDfR51kxT\n90DpN37iWRDButCLt4wMsmKr3iSOH6mxQd1iexBh8NYjv32vi3hNCvEQInkFBFhe\nvw4rRIeDUgeVz2mWqDr1cohH4RK6sOBksz7Gzp9TQHlyCFANpARh0LR958TGeWTq\nK9dG6ai8PoorMQnEDhgZrJ2Hc2NKgFazvmX/6299CG/JJ7U260U=\n=e49E\n-----END PGP SIGNATURE-----", "payload": "tree 8a8d3a5a6895179e83789ce30355610e8a581ef4\nparent 45eec0fe931e02932b43b79c51f90050c973c690\nauthor \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1685440657 +0800\ncommitter \u8bb8\u6770\u53cb Jieyou Xu (Joe) <jieyouxu@outlook.com> 1685440657 +0800\n\nDon't typecheck suggested method call\n\nOnly make the use-dot-operator-to-call-method suggestion, but do not\ndouble down and use the recovered type to perform method call\ntypechecking as it will produce confusing diagnostics on the \"fixed\"\ncode.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11ffb62dfda4850b971310b6f721141ba29f267", "html_url": "https://github.com/rust-lang/rust/commit/e11ffb62dfda4850b971310b6f721141ba29f267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11ffb62dfda4850b971310b6f721141ba29f267/comments", "author": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jieyouxu", "id": 39484203, "node_id": "MDQ6VXNlcjM5NDg0MjAz", "avatar_url": "https://avatars.githubusercontent.com/u/39484203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jieyouxu", "html_url": "https://github.com/jieyouxu", "followers_url": "https://api.github.com/users/jieyouxu/followers", "following_url": "https://api.github.com/users/jieyouxu/following{/other_user}", "gists_url": "https://api.github.com/users/jieyouxu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jieyouxu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jieyouxu/subscriptions", "organizations_url": "https://api.github.com/users/jieyouxu/orgs", "repos_url": "https://api.github.com/users/jieyouxu/repos", "events_url": "https://api.github.com/users/jieyouxu/events{/privacy}", "received_events_url": "https://api.github.com/users/jieyouxu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45eec0fe931e02932b43b79c51f90050c973c690", "url": "https://api.github.com/repos/rust-lang/rust/commits/45eec0fe931e02932b43b79c51f90050c973c690", "html_url": "https://github.com/rust-lang/rust/commit/45eec0fe931e02932b43b79c51f90050c973c690"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "4389ad6ef2678ebe83e5b8c3b1499b8f4aa592fe", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e11ffb62dfda4850b971310b6f721141ba29f267/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11ffb62dfda4850b971310b6f721141ba29f267/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=e11ffb62dfda4850b971310b6f721141ba29f267", "patch": "@@ -420,20 +420,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .steal_diagnostic(segment.ident.span, StashKey::CallIntoMethod)\n                 {\n                     // Try suggesting `foo(a)` -> `a.foo()` if possible.\n-                    if let Some(ty) =\n-                        self.suggest_call_as_method(\n-                            &mut diag,\n-                            segment,\n-                            arg_exprs,\n-                            call_expr,\n-                            expected\n-                        )\n-                    {\n-                        diag.emit();\n-                        return ty;\n-                    } else {\n-                        diag.emit();\n-                    }\n+                    self.suggest_call_as_method(\n+                        &mut diag,\n+                        segment,\n+                        arg_exprs,\n+                        call_expr,\n+                        expected\n+                    );\n+                    diag.emit();\n                 }\n \n                 let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n@@ -496,9 +490,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         call_expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n-    ) -> Option<Ty<'tcx>> {\n+    ) {\n         if let [callee_expr, rest @ ..] = arg_exprs {\n-            let callee_ty = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr)?;\n+            let Some(callee_ty) = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr) else {\n+                return;\n+            };\n \n             // First, do a probe with `IsSuggestion(true)` to avoid emitting\n             // any strange errors. If it's successful, then we'll do a true\n@@ -513,7 +509,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ProbeScope::AllTraits,\n                 expected.only_has_type(self),\n             ) else {\n-                return None;\n+                return;\n             };\n \n             let pick = self.confirm_method(\n@@ -525,7 +521,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 segment,\n             );\n             if pick.illegal_sized_bound.is_some() {\n-                return None;\n+                return;\n             }\n \n             let up_to_rcvr_span = segment.ident.span.until(callee_expr.span);\n@@ -567,22 +563,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg,\n                     Applicability::MaybeIncorrect,\n                 );\n-\n-                // Let's check the method fully now\n-                let return_ty = self.check_method_argument_types(\n-                    segment.ident.span,\n-                    call_expr,\n-                    Ok(pick.callee),\n-                    rest,\n-                    TupleArgumentsFlag::DontTupleArguments,\n-                    expected,\n-                );\n-\n-                return Some(return_ty);\n             }\n         }\n-\n-        None\n     }\n \n     fn report_invalid_callee("}, {"sha": "91342229ae1a53f4eed5ba5d31ef80d82457a8cf", "filename": "tests/ui/typeck/issue-106929.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e11ffb62dfda4850b971310b6f721141ba29f267/tests%2Fui%2Ftypeck%2Fissue-106929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11ffb62dfda4850b971310b6f721141ba29f267/tests%2Fui%2Ftypeck%2Fissue-106929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-106929.rs?ref=e11ffb62dfda4850b971310b6f721141ba29f267", "patch": "@@ -0,0 +1,13 @@\n+struct Client;\n+\n+impl Client {\n+    fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n+}\n+\n+fn f() {\n+    let c = Client;\n+    post(c, ());\n+    //~^ ERROR cannot find function `post` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "f744e5a41f0cd29239dbb22cec586573b30bed19", "filename": "tests/ui/typeck/issue-106929.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e11ffb62dfda4850b971310b6f721141ba29f267/tests%2Fui%2Ftypeck%2Fissue-106929.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e11ffb62dfda4850b971310b6f721141ba29f267/tests%2Fui%2Ftypeck%2Fissue-106929.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-106929.stderr?ref=e11ffb62dfda4850b971310b6f721141ba29f267", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find function `post` in this scope\n+  --> $DIR/issue-106929.rs:9:5\n+   |\n+LL |     post(c, ());\n+   |     ^^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `post` on `&Client`\n+   |\n+LL -     post(c, ());\n+LL +     c.post(());\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}