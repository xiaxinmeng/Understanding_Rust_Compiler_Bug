{"sha": "d335d1a1699ed66d44d3efa03a46762c0473f316", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMzVkMWExNjk5ZWQ2NmQ0NGQzZWZhMDNhNDY3NjJjMDQ3M2YzMTY=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-11-16T01:10:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-16T02:02:45Z"}, "message": "Replaced constant functions with actual constants in std and updated tests\n\nFixes issue #1165", "tree": {"sha": "4edd59f6890d7941a1b3a9996f1caf3f8bc04804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4edd59f6890d7941a1b3a9996f1caf3f8bc04804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d335d1a1699ed66d44d3efa03a46762c0473f316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d335d1a1699ed66d44d3efa03a46762c0473f316", "html_url": "https://github.com/rust-lang/rust/commit/d335d1a1699ed66d44d3efa03a46762c0473f316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d335d1a1699ed66d44d3efa03a46762c0473f316/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7188a6577518475cbeafffb5551b2835f2ec91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7188a6577518475cbeafffb5551b2835f2ec91d", "html_url": "https://github.com/rust-lang/rust/commit/a7188a6577518475cbeafffb5551b2835f2ec91d"}], "stats": {"total": 263, "additions": 122, "deletions": 141}, "files": [{"sha": "0f39a345b39468dda5b38bbaead5d818723598b3", "filename": "src/lib/bitv.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fbitv.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -36,8 +36,7 @@ The bitvector type.\n type t = @{storage: [mutable uint], nbits: uint};\n \n \n-// FIXME: this should be a constant once they work\n-fn uint_bits() -> uint { ret 32u + (1u << 32u >> 27u); }\n+const uint_bits: uint = 32u + (1u << 32u >> 27u);\n \n /*\n Function: create\n@@ -50,7 +49,7 @@ init - If true then the bits are initialized to 1, otherwise 0\n */\n fn create(nbits: uint, init: bool) -> t {\n     let elt = if init { !0u } else { 0u };\n-    let storage = vec::init_elt_mut::<uint>(elt, nbits / uint_bits() + 1u);\n+    let storage = vec::init_elt_mut::<uint>(elt, nbits / uint_bits + 1u);\n     ret @{storage: storage, nbits: nbits};\n }\n \n@@ -118,7 +117,7 @@ Function: clone\n Makes a copy of a bitvector\n */\n fn clone(v: t) -> t {\n-    let storage = vec::init_elt_mut::<uint>(0u, v.nbits / uint_bits() + 1u);\n+    let storage = vec::init_elt_mut::<uint>(0u, v.nbits / uint_bits + 1u);\n     let len = vec::len(v.storage);\n     uint::range(0u, len) {|i| storage[i] = v.storage[i]; };\n     ret @{storage: storage, nbits: v.nbits};\n@@ -131,7 +130,7 @@ Retreive the value at index `i`\n */\n fn get(v: t, i: uint) -> bool {\n     assert (i < v.nbits);\n-    let bits = uint_bits();\n+    let bits = uint_bits;\n     let w = i / bits;\n     let b = i % bits;\n     let x = 1u & v.storage[w] >> b;\n@@ -229,7 +228,7 @@ Preconditions:\n */\n fn set(v: t, i: uint, x: bool) {\n     assert (i < v.nbits);\n-    let bits = uint_bits();\n+    let bits = uint_bits;\n     let w = i / bits;\n     let b = i % bits;\n     let flag = 1u << b;"}, {"sha": "30781592b71536d766124f80c285635a4b427d96", "filename": "src/lib/float.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffloat.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -107,7 +107,7 @@ fn from_str(num: str) -> float {\n    //The string must start with one of the following characters.\n    alt str::char_at(num, 0u) {\n       '-' | '+' | '0' to '9' | '.' {}\n-      _ { ret NaN(); }\n+      _ { ret NaN; }\n    }\n \n    //Determine if first char is '-'/'+'. Set [pos] and [neg] accordingly.\n@@ -137,7 +137,7 @@ fn from_str(num: str) -> float {\n            break;\n          }\n          _ {\n-           ret NaN();\n+           ret NaN;\n          }\n        }\n    }\n@@ -157,7 +157,7 @@ fn from_str(num: str) -> float {\n                  break;\n              }\n              _ {\n-                 ret NaN();\n+                 ret NaN;\n              }\n          }\n       }\n@@ -202,12 +202,12 @@ fn from_str(num: str) -> float {\n              total = total * multiplier;\n           }\n       } else {\n-         ret NaN();\n+         ret NaN;\n       }\n    }\n \n    if(pos < len) {\n-     ret NaN();\n+     ret NaN;\n    } else {\n      if(neg) {\n         total *= -1f;\n@@ -235,7 +235,7 @@ Returns:\n fn pow_uint_to_uint_as_float(x: uint, pow: uint) -> float {\n    if x == 0u {\n       if pow == 0u {\n-        ret NaN();\n+        ret NaN;\n       }\n        ret 0.;\n    }\n@@ -260,23 +260,17 @@ fn pow_uint_to_uint_as_float(x: uint, pow: uint) -> float {\n //TODO: Once this is possible, replace the body of these functions\n //by an actual constant.\n \n-/* Function: NaN */\n-fn NaN() -> float {\n-   ret 0./0.;\n-}\n+/* Const: NaN */\n+const NaN: float = 0./0.;\n \n /* Predicate: isNaN */\n pure fn isNaN(f: float) -> bool { f != f }\n \n-/* Function: infinity */\n-pure fn infinity() -> float {\n-   ret 1./0.;\n-}\n+/* Const: infinity */\n+const infinity: float = 1./0.;\n \n-/* Function: neg_infinity */\n-pure fn neg_infinity() -> float {\n-   ret -1./0.;\n-}\n+/* Const: neg_infinity */\n+const neg_infinity: float = -1./0.;\n \n /* Function: add */\n pure fn add(x: float, y: float) -> float { ret x + y; }\n@@ -316,14 +310,14 @@ Predicate: positive\n \n Returns true if `x` is a positive number, including +0.0 and +Infinity.\n  */\n-pure fn positive(x: float) -> bool { ret x > 0. || (1./x) == infinity(); }\n+pure fn positive(x: float) -> bool { ret x > 0. || (1./x) == infinity; }\n \n /*\n Predicate: negative\n \n Returns true if `x` is a negative number, including -0.0 and -Infinity.\n  */\n-pure fn negative(x: float) -> bool { ret x < 0. || (1./x) == neg_infinity(); }\n+pure fn negative(x: float) -> bool { ret x < 0. || (1./x) == neg_infinity; }\n \n /*\n Predicate: nonpositive\n@@ -332,7 +326,7 @@ Returns true if `x` is a negative number, including -0.0 and -Infinity.\n (This is the same as `float::negative`.)\n */\n pure fn nonpositive(x: float) -> bool {\n-  ret x < 0. || (1./x) == neg_infinity();\n+  ret x < 0. || (1./x) == neg_infinity;\n }\n \n /*\n@@ -342,7 +336,7 @@ Returns true if `x` is a positive number, including +0.0 and +Infinity.\n (This is the same as `float::positive`.)\n */\n pure fn nonnegative(x: float) -> bool {\n-  ret x > 0. || (1./x) == infinity();\n+  ret x > 0. || (1./x) == infinity;\n }\n \n //"}, {"sha": "621477ebca72da7c94d05bb6299dbd6e22f67e63", "filename": "src/lib/int.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fint.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -3,22 +3,27 @@ Module: int\n */\n \n /*\n-Function: max_value\n+Const: max_value\n \n The maximum value of an integer\n */\n-fn max_value() -> int {\n-  ret min_value() - 1;\n-}\n+// FIXME: Find another way to access the machine word size in a const expr\n+#[cfg(target_arch=\"x86\")]\n+const max_value: int = (-1 << 31)-1;\n+\n+#[cfg(target_arch=\"x86_64\")]\n+const max_value: int = (-1 << 63)-1;\n \n /*\n-Function: min_value\n+Const: min_value\n \n The minumum value of an integer\n */\n-fn min_value() -> int {\n-  ret (-1 << (sys::size_of::<int>()  * 8u as int - 1)) as int;\n-}\n+#[cfg(target_arch=\"x86\")]\n+const min_value: int = -1 << 31;\n+\n+#[cfg(target_arch=\"x86_64\")]\n+const min_value: int = -1 << 63;\n \n /* Function: add */\n pure fn add(x: int, y: int) -> int { ret x + y; }"}, {"sha": "afba61423775b51b4d63e659d95308f02d354d95", "filename": "src/lib/io.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -282,21 +282,21 @@ obj fd_buf_writer(fd: int, res: option::t<@fd_res>) {\n fn file_buf_writer(path: str,\n                    flags: [fileflag]) -> result::t<buf_writer, str> {\n     let fflags: int =\n-        os::libc_constants::O_WRONLY() | os::libc_constants::O_BINARY();\n+        os::libc_constants::O_WRONLY | os::libc_constants::O_BINARY;\n     for f: fileflag in flags {\n         alt f {\n-          append. { fflags |= os::libc_constants::O_APPEND(); }\n-          create. { fflags |= os::libc_constants::O_CREAT(); }\n-          truncate. { fflags |= os::libc_constants::O_TRUNC(); }\n+          append. { fflags |= os::libc_constants::O_APPEND; }\n+          create. { fflags |= os::libc_constants::O_CREAT; }\n+          truncate. { fflags |= os::libc_constants::O_TRUNC; }\n           none. { }\n         }\n     }\n     let fd =\n         str::as_buf(path,\n                     {|pathbuf|\n                         os::libc::open(pathbuf, fflags,\n-                                       os::libc_constants::S_IRUSR() |\n-                                           os::libc_constants::S_IWUSR())\n+                                       os::libc_constants::S_IRUSR |\n+                                           os::libc_constants::S_IWUSR)\n                     });\n     ret if fd < 0 {\n         log_err sys::last_os_error();\n@@ -384,6 +384,7 @@ fn buffered_file_buf_writer(path: str) -> result::t<buf_writer, str> {\n \n \n // FIXME it would be great if this could be a const\n+// Problem seems to be that new_writer is not pure\n fn stdout() -> writer { ret new_writer(fd_buf_writer(1, option::none)); }\n fn stderr() -> writer { ret new_writer(fd_buf_writer(2, option::none)); }\n "}, {"sha": "7a0e097696072f12cd36ec4320b656569f876c3c", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -37,27 +37,22 @@ native \"cdecl\" mod libc = \"\" {\n }\n \n mod libc_constants {\n-    fn O_RDONLY() -> int { ret 0; }\n-    fn O_WRONLY() -> int { ret 1; }\n-    fn O_RDWR() -> int { ret 2; }\n-    fn O_APPEND() -> int { ret 1024; }\n-    fn O_CREAT() -> int { ret 64; }\n-    fn O_EXCL() -> int { ret 128; }\n-    fn O_TRUNC() -> int { ret 512; }\n-    fn O_TEXT() -> int {\n-        ret 0; // nonexistent in linux libc\n-\n-    }\n-    fn O_BINARY() -> int {\n-        ret 0; // nonexistent in linux libc\n-\n-    }\n-    fn S_IRUSR() -> uint { ret 256u; }\n-    fn S_IWUSR() -> uint { ret 128u; }\n+    const O_RDONLY: int = 0;\n+    const O_WRONLY: int = 1;\n+    const O_RDWR: int   = 2;\n+    const O_APPEND: int = 1024;\n+    const O_CREAT: int  = 64;\n+    const O_EXCL: int   = 128;\n+    const O_TRUNC: int  = 512;\n+    const O_TEXT: int   = 0;     // nonexistent in linux libc\n+    const O_BINARY: int = 0;     // nonexistent in linux libc\n+\n+    const S_IRUSR: uint = 256u;\n+    const S_IWUSR: uint = 128u;\n }\n \n+// FIXME turn into constants\n fn exec_suffix() -> str { ret \"\"; }\n-\n fn target_os() -> str { ret \"linux\"; }\n \n fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }"}, {"sha": "b5accbfa1e63de842898ffe84af956d1c588df46", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -30,27 +30,22 @@ native \"cdecl\" mod libc = \"\" {\n }\n \n mod libc_constants {\n-    fn O_RDONLY() -> int { ret 0; }\n-    fn O_WRONLY() -> int { ret 1; }\n-    fn O_RDWR() -> int { ret 2; }\n-    fn O_APPEND() -> int { ret 8; }\n-    fn O_CREAT() -> int { ret 512; }\n-    fn O_EXCL() -> int { ret 2048; }\n-    fn O_TRUNC() -> int { ret 1024; }\n-    fn O_TEXT() -> int {\n-        ret 0; // nonexistent in darwin libc\n-\n-    }\n-    fn O_BINARY() -> int {\n-        ret 0; // nonexistent in darwin libc\n-\n-    }\n-    fn S_IRUSR() -> uint { ret 1024u; }\n-    fn S_IWUSR() -> uint { ret 512u; }\n+    const O_RDONLY: int   = 0;\n+    const O_WRONLY: int   = 1;\n+    const O_RDWR: int     = 2;\n+    const O_APPEND: int   = 8;\n+    const O_CREAT: int    = 512;\n+    const O_EXCL: int     = 248;\n+    const O_TRUNC: int    = 1024;\n+    const O_TEXT: int     = 0;    // nonexistent in darwin libc\n+    const O_BINARY: int   = 0;    // nonexistent in darwin libc\n+\n+    const S_IRUSR: uint   = 1024u;\n+    const S_IWUSR: uint   = 512u;\n }\n \n+// FIXME turn into constants\n fn exec_suffix() -> str { ret \"\"; }\n-\n fn target_os() -> str { ret \"macos\"; }\n \n fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".dylib\"; }"}, {"sha": "777fdb027bfa4b0793e18226b1710c1f0183cdfd", "filename": "src/lib/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frand.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -49,7 +49,7 @@ fn mk_rng() -> rng {\n           let u1 = rustrt::rand_next(**c) as float;\n           let u2 = rustrt::rand_next(**c) as float;\n           let u3 = rustrt::rand_next(**c) as float;\n-          let scale = u32::max_value() as float;\n+          let scale = u32::max_value as float;\n           ret ((u1 / scale + u2) / scale + u3) / scale;\n         }\n     }"}, {"sha": "69811dc7a9f1a63094e41d928eb70524312daba7", "filename": "src/lib/u32.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu32.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -3,18 +3,18 @@ Module: u32\n */\n \n /*\n-Function: min_value\n+Const: min_value\n \n Return the minimal value for a u32\n */\n-pure fn min_value() -> u32 { ret 0u32; }\n+const min_value: u32 = 0u32;\n \n /*\n-Function: max_value\n+Const: max_value\n \n Return the maximal value for a u32\n */\n-pure fn max_value() -> u32 { ret 4294967296u32; }\n+const max_value: u32 = 4294967296u32;\n \n //\n // Local Variables:"}, {"sha": "aacc35a827d974add99f8dfd3d05bb958d191897", "filename": "src/lib/u64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu64.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -3,18 +3,18 @@ Module: u64\n */\n \n /*\n-Function: min_value\n+Const: min_value\n \n Return the minimal value for a u64\n */\n-pure fn min_value() -> u64 { ret 0u64; }\n+const min_value: u64 = 0u64;\n \n /*\n-Function: max_value\n+Const: max_value\n \n Return the maximal value for a u64\n */\n-pure fn max_value() -> u64 { ret 18446744073709551615u64; }\n+const max_value: u64 = 18446744073709551615u64;\n \n /*\n Function: to_str"}, {"sha": "76e2272b433207fdc757d6b0a193327fb9aa81bf", "filename": "src/lib/u8.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fu8.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -3,18 +3,18 @@ Module: u8\n */\n \n /*\n-Function: max_value\n+Const: max_value\n \n The maximum value of a u8.\n */\n-pure fn max_value() -> u8 { ret 255u8; }\n+const max_value: u8 = 255u8;\n \n /*\n-Function: min_value\n+Const: min_value\n \n The minumum value of a u8.\n */\n-pure fn min_value() -> u8 { ret 0u8; }\n+const min_value: u8 = 0u8;\n \n /* Function: add */\n pure fn add(x: u8, y: u8) -> u8 { ret x + y; }"}, {"sha": "897c59e4273e9886c04c2cb7d288a6c33a901936", "filename": "src/lib/uint.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuint.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -3,24 +3,22 @@ Module: uint\n */\n \n /*\n-Function: min_value\n+Const: min_value\n \n Return the minimal value for an uint.\n \n This is always 0\n */\n-pure fn min_value() -> uint { ret 0u; }\n+const min_value: uint = 0u;\n \n /*\n-Function: max_value\n+Const: max_value\n \n Return the maximal value for an uint.\n \n This is 2^wordsize - 1\n */\n-pure fn max_value() -> uint {\n-     ret 0u - 1u;\n-}\n+const max_value: uint = 0u - 1u;\n \n /* Function: add */\n pure fn add(x: uint, y: uint) -> uint { ret x + y; }"}, {"sha": "c870938d4d5cb30f6808d5e3fb1922b3190ae1f3", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -19,24 +19,18 @@ native \"cdecl\" mod libc = \"\" {\n }\n \n mod libc_constants {\n-    fn O_RDONLY() -> int { ret 0; }\n-    fn O_WRONLY() -> int { ret 1; }\n-    fn O_RDWR() -> int { ret 2; }\n-    fn O_APPEND() -> int { ret 8; }\n-    fn O_CREAT() -> int { ret 256; }\n-    fn O_EXCL() -> int { ret 1024; }\n-    fn O_TRUNC() -> int { ret 512; }\n-    fn O_TEXT() -> int { ret 16384; }\n-    fn O_BINARY() -> int { ret 32768; }\n-    fn O_NOINHERIT() -> int { ret 128; }\n-    fn S_IRUSR() -> uint {\n-        ret 256u; // really _S_IREAD  in win32\n-\n-    }\n-    fn S_IWUSR() -> uint {\n-        ret 128u; // really _S_IWRITE in win32\n-\n-    }\n+    const O_RDONLY: int    = 0;\n+    const O_WRONLY: int    = 1;\n+    const O_RDWR: int      = 2;\n+    const O_APPEND: int    = 8;\n+    const O_CREAT: int     = 256;\n+    const O_EXCL: int      = 1024;\n+    const O_TRUNC: int     = 512;\n+    const O_TEXT: int      = 16384;\n+    const O_BINARY: int    = 32768;\n+    const O_NOINHERIT: int = 128;\n+    const S_IRUSR: uint    = 256u; // really _S_IREAD  in win32\n+    const S_IWUSR: uint    = 128u; // really _S_IWRITE in win32\n }\n \n type DWORD = u32;\n@@ -52,8 +46,8 @@ native \"stdcall\" mod kernel32 {\n                           nSize: DWORD) -> DWORD;\n }\n \n+// FIXME turn into constants\n fn exec_suffix() -> str { ret \".exe\"; }\n-\n fn target_os() -> str { ret \"win32\"; }\n \n fn dylib_filename(base: str) -> str { ret base + \".dll\"; }"}, {"sha": "c27b97d81da3eeee2a9b0990b705324108ad0261", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -2,11 +2,11 @@ use std;\n import std::float;\n \n fn main() {\n-  let nan = float::NaN();\n+  let nan = float::NaN;\n   assert(float::isNaN(nan));\n \n-  let inf = float::infinity();\n-  assert(-inf == float::neg_infinity());\n+  let inf = float::infinity;\n+  assert(-inf == float::neg_infinity);\n \n   assert( nan !=  nan);\n   assert( nan != -nan);"}, {"sha": "8720e455586f33d63ba0a2e942722774a7b435ad", "filename": "src/test/stdtest/float.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Fstdtest%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Fstdtest%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffloat.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -40,44 +40,44 @@ fn test_from_str() {\n \n #[test]\n fn test_positive() {\n-  assert(float::positive(float::infinity()));\n+  assert(float::positive(float::infinity));\n   assert(float::positive(1.));\n   assert(float::positive(0.));\n   assert(!float::positive(-1.));\n-  assert(!float::positive(float::neg_infinity()));\n-  assert(!float::positive(1./float::neg_infinity()));\n-  assert(!float::positive(float::NaN()));\n+  assert(!float::positive(float::neg_infinity));\n+  assert(!float::positive(1./float::neg_infinity));\n+  assert(!float::positive(float::NaN));\n }\n \n #[test]\n fn test_negative() {\n-  assert(!float::negative(float::infinity()));\n+  assert(!float::negative(float::infinity));\n   assert(!float::negative(1.));\n   assert(!float::negative(0.));\n   assert(float::negative(-1.));\n-  assert(float::negative(float::neg_infinity()));\n-  assert(float::negative(1./float::neg_infinity()));\n-  assert(!float::negative(float::NaN()));\n+  assert(float::negative(float::neg_infinity));\n+  assert(float::negative(1./float::neg_infinity));\n+  assert(!float::negative(float::NaN));\n }\n \n #[test]\n fn test_nonpositive() {\n-  assert(!float::nonpositive(float::infinity()));\n+  assert(!float::nonpositive(float::infinity));\n   assert(!float::nonpositive(1.));\n   assert(!float::nonpositive(0.));\n   assert(float::nonpositive(-1.));\n-  assert(float::nonpositive(float::neg_infinity()));\n-  assert(float::nonpositive(1./float::neg_infinity()));\n-  assert(!float::nonpositive(float::NaN()));\n+  assert(float::nonpositive(float::neg_infinity));\n+  assert(float::nonpositive(1./float::neg_infinity));\n+  assert(!float::nonpositive(float::NaN));\n }\n \n #[test]\n fn test_nonnegative() {\n-  assert(float::nonnegative(float::infinity()));\n+  assert(float::nonnegative(float::infinity));\n   assert(float::nonnegative(1.));\n   assert(float::nonnegative(0.));\n   assert(!float::nonnegative(-1.));\n-  assert(!float::nonnegative(float::neg_infinity()));\n-  assert(!float::nonnegative(1./float::neg_infinity()));\n-  assert(!float::nonnegative(float::NaN()));\n+  assert(!float::nonnegative(float::neg_infinity));\n+  assert(!float::nonnegative(1./float::neg_infinity));\n+  assert(!float::nonnegative(float::NaN));\n }"}, {"sha": "43bdf39ee004d6fe13e9bd2d87f31ea2527e2fc5", "filename": "src/test/stdtest/int.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Fstdtest%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Fstdtest%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fint.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -91,7 +91,7 @@ fn test_pow() {\n \n #[test]\n fn test_overflows() {\n-   assert (int::max_value() > 0);\n-   assert (int::min_value() <= 0);\n-   assert (int::min_value() + int::max_value() + 1 == 0);\n+   assert (int::max_value > 0);\n+   assert (int::min_value <= 0);\n+   assert (int::min_value + int::max_value + 1 == 0);\n }"}, {"sha": "adb1cde32a93b7bb1b9c93843e926071cdecf59b", "filename": "src/test/stdtest/uint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Fstdtest%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d335d1a1699ed66d44d3efa03a46762c0473f316/src%2Ftest%2Fstdtest%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fuint.rs?ref=d335d1a1699ed66d44d3efa03a46762c0473f316", "patch": "@@ -98,9 +98,9 @@ fn test_next_power_of_two() {\n \n #[test]\n fn test_overflows() {\n-   assert (uint::max_value() > 0u);\n-   assert (uint::min_value() <= 0u);\n-   assert (uint::min_value() + uint::max_value() + 1u == 0u);\n+   assert (uint::max_value > 0u);\n+   assert (uint::min_value <= 0u);\n+   assert (uint::min_value + uint::max_value + 1u == 0u);\n }\n \n #[test]"}]}