{"sha": "43c88c60c152f55fb1ada9438ed2378c358b329a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYzg4YzYwYzE1MmY1NWZiMWFkYTk0MzhlZDIzNzhjMzU4YjMyOWE=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:28:56Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:28:56Z"}, "message": "Move char_lit_as_u8 to its own module", "tree": {"sha": "10e73ba1511c9ceebfae785e98fd16ad981e0e37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e73ba1511c9ceebfae785e98fd16ad981e0e37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43c88c60c152f55fb1ada9438ed2378c358b329a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43c88c60c152f55fb1ada9438ed2378c358b329a", "html_url": "https://github.com/rust-lang/rust/commit/43c88c60c152f55fb1ada9438ed2378c358b329a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43c88c60c152f55fb1ada9438ed2378c358b329a/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "html_url": "https://github.com/rust-lang/rust/commit/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d"}], "stats": {"total": 145, "additions": 75, "deletions": 70}, "files": [{"sha": "ccaad1b8f2ac7eae4b2b6fad0a613cfe38bf1588", "filename": "clippy_lints/src/casts/char_lit_as_u8.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/43c88c60c152f55fb1ada9438ed2378c358b329a/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c88c60c152f55fb1ada9438ed2378c358b329a/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs?ref=43c88c60c152f55fb1ada9438ed2378c358b329a", "patch": "@@ -0,0 +1,42 @@\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, UintTy};\n+\n+use if_chain::if_chain;\n+\n+use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+\n+use super::CHAR_LIT_AS_U8;\n+\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Cast(e, _) = &expr.kind;\n+        if let ExprKind::Lit(l) = &e.kind;\n+        if let LitKind::Char(c) = l.node;\n+        if ty::Uint(UintTy::U8) == *cx.typeck_results().expr_ty(expr).kind();\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let snippet = snippet_with_applicability(cx, e.span, \"'x'\", &mut applicability);\n+\n+            span_lint_and_then(\n+                cx,\n+                CHAR_LIT_AS_U8,\n+                expr.span,\n+                \"casting a character literal to `u8` truncates\",\n+                |diag| {\n+                    diag.note(\"`char` is four bytes wide, but `u8` is a single byte\");\n+\n+                    if c.is_ascii() {\n+                        diag.span_suggestion(\n+                            expr.span,\n+                            \"use a byte literal instead\",\n+                            format!(\"b{}\", snippet),\n+                            applicability,\n+                        );\n+                    }\n+            });\n+        }\n+    }\n+}"}, {"sha": "6d49af21a5f085df5f9b188c72d6a0112a6328d1", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 33, "deletions": 69, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/43c88c60c152f55fb1ada9438ed2378c358b329a/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c88c60c152f55fb1ada9438ed2378c358b329a/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=43c88c60c152f55fb1ada9438ed2378c358b329a", "patch": "@@ -5,6 +5,7 @@ mod cast_precision_loss;\n mod cast_ptr_alignment;\n mod cast_ref_to_mut;\n mod cast_sign_loss;\n+mod char_lit_as_u8;\n mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_with_truncation;\n mod unnecessary_cast;\n@@ -13,19 +14,16 @@ mod utils;\n use std::borrow::Cow;\n \n use if_chain::if_chain;\n-use rustc_ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, TypeAndMut, UintTy};\n+use rustc_middle::ty::{self, TypeAndMut};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    is_hir_ty_cfg_dependant, meets_msrv, snippet_with_applicability, span_lint_and_sugg, span_lint_and_then,\n-};\n+use crate::utils::{is_hir_ty_cfg_dependant, meets_msrv, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for casts from any numerical to a float type where\n@@ -290,17 +288,45 @@ declare_clippy_lint! {\n     \"a cast of reference to a mutable pointer\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for expressions where a character literal is cast\n+    /// to `u8` and suggests using a byte literal instead.\n+    ///\n+    /// **Why is this bad?** In general, casting values to smaller types is\n+    /// error-prone and should be avoided where possible. In the particular case of\n+    /// converting a character literal to u8, it is easy to avoid by just using a\n+    /// byte literal instead. As an added bonus, `b'a'` is even slightly shorter\n+    /// than `'a' as u8`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// 'x' as u8\n+    /// ```\n+    ///\n+    /// A better version, using the byte literal:\n+    ///\n+    /// ```rust,ignore\n+    /// b'x'\n+    /// ```\n+    pub CHAR_LIT_AS_U8,\n+    complexity,\n+    \"casting a character literal to `u8` truncates\"\n+}\n+\n declare_lint_pass!(Casts => [\n     CAST_PRECISION_LOSS,\n     CAST_SIGN_LOSS,\n     CAST_POSSIBLE_TRUNCATION,\n     CAST_POSSIBLE_WRAP,\n     CAST_LOSSLESS,\n     CAST_REF_TO_MUT,\n-    UNNECESSARY_CAST,\n     CAST_PTR_ALIGNMENT,\n+    UNNECESSARY_CAST,\n     FN_TO_NUMERIC_CAST,\n     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n+    CHAR_LIT_AS_U8,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -335,74 +361,12 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         }\n \n         cast_ptr_alignment::check(cx, expr);\n+        char_lit_as_u8::check(cx, expr);\n     }\n }\n \n const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions where a character literal is cast\n-    /// to `u8` and suggests using a byte literal instead.\n-    ///\n-    /// **Why is this bad?** In general, casting values to smaller types is\n-    /// error-prone and should be avoided where possible. In the particular case of\n-    /// converting a character literal to u8, it is easy to avoid by just using a\n-    /// byte literal instead. As an added bonus, `b'a'` is even slightly shorter\n-    /// than `'a' as u8`.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// 'x' as u8\n-    /// ```\n-    ///\n-    /// A better version, using the byte literal:\n-    ///\n-    /// ```rust,ignore\n-    /// b'x'\n-    /// ```\n-    pub CHAR_LIT_AS_U8,\n-    complexity,\n-    \"casting a character literal to `u8` truncates\"\n-}\n-\n-declare_lint_pass!(CharLitAsU8 => [CHAR_LIT_AS_U8]);\n-\n-impl<'tcx> LateLintPass<'tcx> for CharLitAsU8 {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if !expr.span.from_expansion();\n-            if let ExprKind::Cast(e, _) = &expr.kind;\n-            if let ExprKind::Lit(l) = &e.kind;\n-            if let LitKind::Char(c) = l.node;\n-            if ty::Uint(UintTy::U8) == *cx.typeck_results().expr_ty(expr).kind();\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let snippet = snippet_with_applicability(cx, e.span, \"'x'\", &mut applicability);\n-\n-                span_lint_and_then(\n-                    cx,\n-                    CHAR_LIT_AS_U8,\n-                    expr.span,\n-                    \"casting a character literal to `u8` truncates\",\n-                    |diag| {\n-                        diag.note(\"`char` is four bytes wide, but `u8` is a single byte\");\n-\n-                        if c.is_ascii() {\n-                            diag.span_suggestion(\n-                                expr.span,\n-                                \"use a byte literal instead\",\n-                                format!(\"b{}\", snippet),\n-                                applicability,\n-                            );\n-                        }\n-                });\n-            }\n-        }\n-    }\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Checks for `as` casts between raw pointers without changing its mutability,"}, {"sha": "67c481145c3421eb84ecd3a4195270699f47f9f8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43c88c60c152f55fb1ada9438ed2378c358b329a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43c88c60c152f55fb1ada9438ed2378c358b329a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=43c88c60c152f55fb1ada9438ed2378c358b329a", "patch": "@@ -1108,7 +1108,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n     store.register_late_pass(|| box derive::Derive);\n-    store.register_late_pass(|| box casts::CharLitAsU8);\n     store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n     store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n     store.register_late_pass(|| box empty_enum::EmptyEnum);"}]}