{"sha": "ef6d4277ed319de88d078e09a1d449eebc409327", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNmQ0Mjc3ZWQzMTlkZTg4ZDA3OGUwOWExZDQ0OWVlYmM0MDkzMjc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-17T17:32:07Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T17:05:58Z"}, "message": "Bless tests", "tree": {"sha": "ff6af6fee01d6ee291e1fe1fada6816a3845258a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6af6fee01d6ee291e1fe1fada6816a3845258a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6d4277ed319de88d078e09a1d449eebc409327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6d4277ed319de88d078e09a1d449eebc409327", "html_url": "https://github.com/rust-lang/rust/commit/ef6d4277ed319de88d078e09a1d449eebc409327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6d4277ed319de88d078e09a1d449eebc409327/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3569bb63231979c89b71736cd8b9399aad249784", "url": "https://api.github.com/repos/rust-lang/rust/commits/3569bb63231979c89b71736cd8b9399aad249784", "html_url": "https://github.com/rust-lang/rust/commit/3569bb63231979c89b71736cd8b9399aad249784"}], "stats": {"total": 359, "additions": 200, "deletions": 159}, "files": [{"sha": "e18e0a83573eed5fe892254eb05af93a0ce1ba44", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -7,7 +7,7 @@ extern \"C\" {\n const extern fn bar() {\n     unsafe {\n         regular_in_block();\n-        //~^ ERROR: can only call other `const fn` within a `const fn`\n+        //~^ ERROR: calls in constant functions\n     }\n }\n \n@@ -16,7 +16,7 @@ extern fn regular() {}\n const extern fn foo() {\n     unsafe {\n         regular();\n-        //~^ ERROR: can only call other `const fn` within a `const fn`\n+        //~^ ERROR: calls in constant functions\n     }\n }\n "}, {"sha": "348387ff5f827521fe56fe87f9e740467e4e3140", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,21 +1,15 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `regular_in_block` is not stable as `const fn`\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/const-extern-fn-call-extern-fn.rs:9:9\n    |\n LL |         regular_in_block();\n    |         ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `regular` is not stable as `const fn`\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/const-extern-fn-call-extern-fn.rs:18:9\n    |\n LL |         regular();\n    |         ^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "e0b9e5f33759e661b37d0ac9130dec6f746943a7", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -6,7 +6,7 @@ const unsafe extern \"C\" fn closure() -> fn() { || {} }\n const unsafe extern fn use_float() { 1.0 + 1.0; }\n //~^ ERROR only int, `bool` and `char` operations are stable in const fn\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n-//~^ ERROR casting pointers to ints is unstable in const fn\n+//~^ ERROR casting pointers to integers\n \n \n fn main() {}"}, {"sha": "5ca44b3fa7e654b13ee1796d88770887e0a36ca4", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -16,15 +16,16 @@ LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn\n+error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/const-extern-fn-min-const-fn.rs:8:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n    |                                                ^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+Some errors have detailed explanations: E0658, E0723.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "0446ece421eff33e1838e76c25f611ad4bb40f19", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,6 +1,6 @@\n // Test that we can't call random fns in a const fn or do other bad things.\n \n-#![feature(const_fn, const_transmute)]\n+#![feature(const_fn, const_fn_transmute)]\n \n use std::mem::transmute;\n "}, {"sha": "f31543af590d66c05e02788aba08d349687af5b6", "filename": "src/test/ui/consts/const-mut-refs/feature-gate-const_mut_refs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     foo(&mut 5);\n }\n \n-const fn foo(x: &mut i32) -> i32 { //~ ERROR mutable references in const fn are unstable\n+const fn foo(x: &mut i32) -> i32 { //~ ERROR mutable references in const fn\n     *x + 1\n+\n }"}, {"sha": "9d5ccb880aa1b6d71924f3a7b811bd058cf8e15d", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -6,8 +6,8 @@ struct S {\n \n impl S {\n     const fn foo(&mut self, x: u32) {\n+        //~^ ERROR mutable references\n         self.state = x;\n-        //~^ contains unimplemented expression\n     }\n }\n "}, {"sha": "785d9c8c2a5fb7fbf263474c32b5b3dac3f0043f", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,10 +1,11 @@\n-error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const_let_assign3.rs:9:9\n+error[E0723]: mutable references in const fn are unstable\n+  --> $DIR/const_let_assign3.rs:8:18\n    |\n-LL |         self.state = x;\n-   |         ^^^^^^^^^^^^^^\n+LL |     const fn foo(&mut self, x: u32) {\n+   |                  ^^^^^^^^^\n    |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0764]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:16:5\n@@ -28,5 +29,5 @@ LL |     *y = 42;\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0019, E0764.\n+Some errors have detailed explanations: E0019, E0723, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "589085871fba967c9958dd19b2c5d5d01b23f2bd", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,5 +1,8 @@\n const fn foo(a: i32) -> Vec<i32> {\n-    vec![1, 2, 3] //~ ERROR heap allocations are not allowed in const fn\n+    vec![1, 2, 3]\n+    //~^ ERROR allocations are not allowed\n+    //~| ERROR unimplemented expression type\n+    //~| ERROR calls in constant functions\n }\n \n fn main() {}"}, {"sha": "0f16890141f6bf5fa1b2afc8a17fbb29d4203f9d", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,13 +1,29 @@\n-error[E0723]: heap allocations are not allowed in const fn\n+error[E0010]: allocations are not allowed in constant functions\n+  --> $DIR/bad_const_fn_body_ice.rs:2:5\n+   |\n+LL |     vec![1, 2, 3]\n+   |     ^^^^^^^^^^^^^ allocation not allowed in constant functions\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0019]: constant function contains unimplemented expression type\n+  --> $DIR/bad_const_fn_body_ice.rs:2:5\n+   |\n+LL |     vec![1, 2, 3]\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/bad_const_fn_body_ice.rs:2:5\n    |\n LL |     vec![1, 2, 3]\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+Some errors have detailed explanations: E0010, E0015, E0019.\n+For more information about an error, try `rustc --explain E0010`."}, {"sha": "5dd70acb6ff1c6cec1e013dbd5d32da6cc93fc61", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -78,25 +78,25 @@ const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n const fn foo11_2<T: Send>(t: T) -> T { t }\n //~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n const fn foo19(f: f32) -> f32 { f * 2.0 }\n-//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+//~^ ERROR int, `bool` and `char` operations\n const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+//~^ ERROR int, `bool` and `char` operations\n const fn foo19_3(f: f32) -> f32 { -f }\n-//~^ ERROR only int and `bool` operations are stable in const fn\n+//~^ ERROR int, `bool` and `char` operations\n const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+//~^ ERROR int, `bool` and `char` operations\n \n static BAR: u32 = 42;\n-const fn foo25() -> u32 { BAR } //~ ERROR cannot access `static` items in const fn\n-const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot access `static` items\n+const fn foo25() -> u32 { BAR } //~ ERROR cannot refer to statics\n+const fn foo26() -> &'static u32 { &BAR } //~ ERROR cannot refer to statics\n const fn foo30(x: *const u32) -> usize { x as usize }\n-//~^ ERROR casting pointers to ints is unstable\n+//~^ ERROR casting pointers to integers\n const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n-//~^ ERROR casting pointers to ints is unstable\n+//~^ ERROR casting pointers to integers\n const fn foo30_2(x: *mut u32) -> usize { x as usize }\n-//~^ ERROR casting pointers to ints is unstable\n+//~^ ERROR casting pointers to integers\n const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n-//~^ ERROR casting pointers to ints is unstable\n+//~^ ERROR casting pointers to integers\n const fn foo30_6() -> bool { let x = true; x }\n const fn inc(x: &mut i32) { *x += 1 }\n //~^ ERROR mutable references in const fn are unstable"}, {"sha": "d4498f061c64bf71ca1ff6c9bef611fbf40bd826", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -94,7 +94,7 @@ LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: only int and `bool` operations are stable in const fn\n+error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:84:35\n    |\n LL | const fn foo19_3(f: f32) -> f32 { -f }\n@@ -112,59 +112,57 @@ LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: cannot access `static` items in const fn\n+error[E0013]: constant functions cannot refer to statics\n   --> $DIR/min_const_fn.rs:90:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0723]: cannot access `static` items in const fn\n+error[E0013]: constant functions cannot refer to statics\n   --> $DIR/min_const_fn.rs:91:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n-error[E0723]: casting pointers to ints is unstable in const fn\n+error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn\n+error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn\n+error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0723]: casting pointers to ints is unstable in const fn\n+error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:101:14\n@@ -267,5 +265,5 @@ LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n \n error: aborting due to 30 previous errors\n \n-Some errors have detailed explanations: E0493, E0723.\n-For more information about an error, try `rustc --explain E0493`.\n+Some errors have detailed explanations: E0013, E0493, E0658, E0723.\n+For more information about an error, try `rustc --explain E0013`."}, {"sha": "b83fdf7c656cdfefc518038eaa88f52c11776d78", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -13,20 +13,21 @@ const fn foo() -> u32 { 42 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const fn bar() -> u32 { foo() } //~ ERROR can only call other `const fn`\n+const fn bar() -> u32 { foo() } //~ ERROR not yet stable as a const fn\n \n #[unstable(feature = \"rust1\", issue = \"none\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn`\n+const fn bar2() -> u32 { foo2() } //~ ERROR not yet stable as a const fn\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // conformity is required, even with `const_fn` feature gate\n-const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` operations\n+const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn)]`\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]\n@@ -35,6 +36,6 @@ const fn foo2_gated() -> u32 { 42 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `const fn`\n+const fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR not yet stable as a const fn\n \n fn main() {}"}, {"sha": "a1f1f6f52ab2ac2031c3582a110a6b7009740eb9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,39 +1,38 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo` is not stable as `const fn`\n+error: `foo` is not yet stable as a const fn\n   --> $DIR/min_const_fn_libstd_stability.rs:16:25\n    |\n LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo2` is not stable as `const fn`\n+error: `foo2` is not yet stable as a const fn\n   --> $DIR/min_const_fn_libstd_stability.rs:24:26\n    |\n LL | const fn bar2() -> u32 { foo2() }\n    |                          ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+error: const-stable function cannot use `#[feature(const_fn)]`\n   --> $DIR/min_const_fn_libstd_stability.rs:29:26\n    |\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                          ^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: if it is not part of the public API, make this function unstably const\n+   |\n+LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+   |\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo2_gated` is not stable as `const fn`\n-  --> $DIR/min_const_fn_libstd_stability.rs:38:32\n+error: `foo2_gated` is not yet stable as a const fn\n+  --> $DIR/min_const_fn_libstd_stability.rs:39:32\n    |\n LL | const fn bar2_gated() -> u32 { foo2_gated() }\n    |                                ^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0723`."}, {"sha": "0c8af5a199aa0179c395ad3e0a46fae5ad0cb8be", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -12,5 +12,5 @@ fn main() {}\n const unsafe fn no_union() {\n     union Foo { x: (), y: () }\n     Foo { x: () }.y\n-    //~^ accessing union fields is unstable\n+    //~^ unions in const fn\n }"}, {"sha": "322052c28fab13b1ef95e2f1d045e58ebd332e9c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -25,16 +25,15 @@ LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static u\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error[E0723]: accessing union fields is unstable\n+error[E0658]: unions in const fn are unstable\n   --> $DIR/min_const_fn_unsafe_bad.rs:14:5\n    |\n LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #51909 <https://github.com/rust-lang/rust/issues/51909> for more information\n+   = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0658, E0723.\n-For more information about an error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "902ed435e31bc05c252ede664c0d3bc0e09ec137", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -13,20 +13,21 @@ const unsafe fn foo() -> u32 { 42 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR can only call other `const fn`\n+const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR not yet stable as a const fn\n \n #[unstable(feature = \"rust1\", issue = \"none\")]\n const unsafe fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR can only call other `const fn`\n+const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR not yet stable as a const fn\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // conformity is required, even with `const_fn` feature gate\n-const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` op\n+const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn)]`\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]\n@@ -36,6 +37,6 @@ const unsafe fn foo2_gated() -> u32 { 42 }\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n-//~^ ERROR can only call other `const fn`\n+//~^ ERROR not yet stable as a const fn\n \n fn main() {}"}, {"sha": "2741a86440487c9849b372f298287e245bc5c6eb", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,39 +1,38 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo` is not stable as `const fn`\n+error: `foo` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:16:41\n    |\n LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    |                                         ^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo2` is not stable as `const fn`\n+error: `foo2` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:24:42\n    |\n LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |                                          ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+error: const-stable function cannot use `#[feature(const_fn)]`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:29:33\n    |\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                                 ^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: if it is not part of the public API, make this function unstably const\n+   |\n+LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+   |\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo2_gated` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:38:48\n+error: `foo2_gated` is not yet stable as a const fn\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:39:48\n    |\n LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n    |                                                ^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0723`."}, {"sha": "d17dcb281153c41fffcef1fa2269edca036632ca", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -13,15 +13,15 @@ const fn foo() -> u32 { 42 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const unsafe fn bar() -> u32 { foo() } //~ ERROR can only call other `const fn`\n+const unsafe fn bar() -> u32 { foo() } //~ ERROR not yet stable as a const fn\n \n #[unstable(feature = \"rust1\", issue = \"none\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn`\n+const unsafe fn bar2() -> u32 { foo2() } //~ ERROR not yet stable as a const fn\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]\n@@ -30,6 +30,6 @@ const fn foo2_gated() -> u32 { 42 }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n-const unsafe fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `const fn`\n+const unsafe fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR not yet stable as a const fn\n \n fn main() {}"}, {"sha": "891c34a888a700b95f6133670a9dd06c01746c9d", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,30 +1,26 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo` is not stable as `const fn`\n+error: `foo` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:16:32\n    |\n LL | const unsafe fn bar() -> u32 { foo() }\n    |                                ^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo2` is not stable as `const fn`\n+error: `foo2` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:24:33\n    |\n LL | const unsafe fn bar2() -> u32 { foo2() }\n    |                                 ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `foo2_gated` is not stable as `const fn`\n+error: `foo2_gated` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:33:39\n    |\n LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() }\n    |                                       ^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0723`."}, {"sha": "93b67fd7b1428a710bfe9dd6efd678107fae0c0a", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -12,6 +12,16 @@ LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"\n \n warning: skipping const checks\n    |\n+help: skipping check for `const_fn` feature\n+  --> $DIR/abi-mismatch.rs:9:23\n+   |\n+LL | const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n+   |                       ^^^^^\n+help: skipping check for `const_fn` feature\n+  --> $DIR/abi-mismatch.rs:10:5\n+   |\n+LL |     my_fn();\n+   |     ^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/abi-mismatch.rs:10:5\n    |"}, {"sha": "af6bc2d85fdd68770ecec1fd5167087415837af3", "filename": "src/test/ui/consts/unsizing-cast-non-null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -4,7 +4,7 @@ use std::ptr::NonNull;\n \n pub const fn dangling_slice<T>() -> NonNull<[T]> {\n     NonNull::<[T; 0]>::dangling()\n-    //~^ ERROR: unsizing casts are only allowed for references right now\n+    //~^ ERROR: unsizing casts to types besides slices\n }\n \n fn main() {}"}, {"sha": "dc08ccd02b646533d17ebdda9e86b4761b64cb9d", "filename": "src/test/ui/consts/unsizing-cast-non-null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,4 +1,4 @@\n-error[E0723]: unsizing casts are only allowed for references right now\n+error[E0723]: unsizing casts to types besides slices are not allowed in const fn\n   --> $DIR/unsizing-cast-non-null.rs:6:5\n    |\n LL |     NonNull::<[T; 0]>::dangling()"}, {"sha": "43951c6854b1aa820cd0f2f857b693eb6d318edc", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -6,6 +6,7 @@\n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![feature(rustc_const_unstable)]\n #![feature(staged_api)]\n+#![feature(const_fn)]\n \n enum Opt<T> {\n     Some(T),"}, {"sha": "928605356a16e3d94f07d1215c509599b1ece247", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,11 +1,11 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/unstable-const-fn-in-libcore.rs:23:26\n+  --> $DIR/unstable-const-fn-in-libcore.rs:24:26\n    |\n LL |             Opt::None => f(),\n    |                          ^^^\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:18:53\n+  --> $DIR/unstable-const-fn-in-libcore.rs:19:53\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                                     ^ constant functions cannot evaluate destructors\n@@ -14,7 +14,7 @@ LL |     }\n    |     - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:18:47\n+  --> $DIR/unstable-const-fn-in-libcore.rs:19:47\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                               ^^^^ constant functions cannot evaluate destructors"}, {"sha": "6d3fc3ce2f171440d156456ece8ece25b85f6a68", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     extern \"C\" fn ff4() {} // OK.\n     const async unsafe extern \"C\" fn ff5() {} // OK.\n     //~^ ERROR functions cannot be both `const` and `async`\n+    //~| ERROR `from_generator` is not yet stable as a const fn\n \n     trait X {\n         async fn ft1(); //~ ERROR functions in traits cannot be declared `async`\n@@ -34,6 +35,7 @@ fn main() {\n         const async unsafe extern \"C\" fn ft5() {}\n         //~^ ERROR functions in traits cannot be declared `async`\n         //~| ERROR functions in traits cannot be declared const\n+        //~| ERROR `from_generator` is not yet stable as a const fn\n         //~| ERROR method `ft5` has an incompatible type for trait\n         //~| ERROR functions cannot be both `const` and `async`\n     }\n@@ -45,6 +47,7 @@ fn main() {\n         extern \"C\" fn fi4() {} // OK.\n         const async unsafe extern \"C\" fn fi5() {}\n         //~^ ERROR functions cannot be both `const` and `async`\n+        //~| ERROR `from_generator` is not yet stable as a const fn\n     }\n \n     extern {"}, {"sha": "f1e21884040f0e568fe6b9c54b2867838a6ef729", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -8,7 +8,7 @@ LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n    |     `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:17:9\n+  --> $DIR/fn-header-semantic-fail.rs:18:9\n    |\n LL |         async fn ft1();\n    |         -----^^^^^^^^^^\n@@ -19,19 +19,19 @@ LL |         async fn ft1();\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:19:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const fn ft3();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:22:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:22:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:22:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -51,7 +51,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    |         `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:29:9\n+  --> $DIR/fn-header-semantic-fail.rs:30:9\n    |\n LL |         async fn ft1() {}\n    |         -----^^^^^^^^^^^^\n@@ -62,19 +62,19 @@ LL |         async fn ft1() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:32:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:35:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:35:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -85,7 +85,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:35:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -94,7 +94,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:46:9\n+  --> $DIR/fn-header-semantic-fail.rs:48:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -103,7 +103,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:51:18\n+  --> $DIR/fn-header-semantic-fail.rs:54:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -113,7 +113,7 @@ LL |         async fn fe1();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:52:19\n+  --> $DIR/fn-header-semantic-fail.rs:55:19\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -124,7 +124,7 @@ LL |         unsafe fn fe2();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:18\n+  --> $DIR/fn-header-semantic-fail.rs:56:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -135,7 +135,7 @@ LL |         const fn fe3();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:23\n+  --> $DIR/fn-header-semantic-fail.rs:57:23\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -146,7 +146,7 @@ LL |         extern \"C\" fn fe4();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:42\n+  --> $DIR/fn-header-semantic-fail.rs:58:42\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -157,16 +157,24 @@ LL |         const async unsafe extern \"C\" fn fe5();\n    |         help: remove the qualifiers: `fn`\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:55:9\n+  --> $DIR/fn-header-semantic-fail.rs:58:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n \n+error: `from_generator` is not yet stable as a const fn\n+  --> $DIR/fn-header-semantic-fail.rs:13:44\n+   |\n+LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n+   |                                            ^^\n+   |\n+   = help: add `#![feature(gen_future)]` to the crate attributes to enable\n+\n error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:29:24\n+  --> $DIR/fn-header-semantic-fail.rs:30:24\n    |\n LL |         async fn ft1();\n    |                       - type in trait\n@@ -181,7 +189,7 @@ LL |         async fn ft1() {}\n               found fn pointer `fn() -> impl Future`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:34:48\n+  --> $DIR/fn-header-semantic-fail.rs:35:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |                                               - type in trait\n@@ -195,7 +203,23 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n               found fn pointer `unsafe extern \"C\" fn() -> impl Future`\n \n-error: aborting due to 20 previous errors\n+error: `from_generator` is not yet stable as a const fn\n+  --> $DIR/fn-header-semantic-fail.rs:35:48\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |                                                ^^\n+   |\n+   = help: add `#![feature(gen_future)]` to the crate attributes to enable\n+\n+error: `from_generator` is not yet stable as a const fn\n+  --> $DIR/fn-header-semantic-fail.rs:48:48\n+   |\n+LL |         const async unsafe extern \"C\" fn fi5() {}\n+   |                                                ^^\n+   |\n+   = help: add `#![feature(gen_future)]` to the crate attributes to enable\n+\n+error: aborting due to 23 previous errors\n \n Some errors have detailed explanations: E0053, E0379, E0706.\n For more information about an error, try `rustc --explain E0053`."}, {"sha": "fc85e98ef532689d924d1ec0741c7458935cde7e", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -10,7 +10,7 @@ fn non_const() {}\n \n impl const T for S {\n     fn foo() { non_const() }\n-    //~^ ERROR can only call other `const fn`\n+    //~^ ERROR calls in constant functions\n }\n \n fn main() {}"}, {"sha": "c6c78c7d1e89564873908c5bb6cff24f0334bd01", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-check-fns-in-const-impl.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-check-fns-in-const-impl.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,12 +1,9 @@\n-error[E0723]: can only call other `const fn` within a `const fn`, but `non_const` is not stable as `const fn`\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/const-check-fns-in-const-impl.rs:12:16\n    |\n LL |     fn foo() { non_const() }\n    |                ^^^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "58041454d5901058fa3cc093586d8b9f48cc852d", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.gated.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,5 +1,5 @@\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/feature-gate.rs:16:1\n+  --> $DIR/feature-gate.rs:17:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^"}, {"sha": "3506237d1f1d58b8f5450a062cbc650b7eb0a01a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -4,6 +4,7 @@\n #![cfg_attr(gated, feature(const_trait_bound_opt_out))]\n #![allow(incomplete_features)]\n #![feature(rustc_attrs)]\n+#![feature(const_fn)]\n \n trait T {\n     const CONST: i32;"}, {"sha": "8ae8b8868ddedaccb09b96b8af1d45e9cf28bf5b", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-trait-bound-opt-out/feature-gate.stock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-trait-bound-opt-out%2Ffeature-gate.stock.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: `?const` on trait bounds is experimental\n-  --> $DIR/feature-gate.rs:12:29\n+  --> $DIR/feature-gate.rs:13:29\n    |\n LL | const fn get_assoc_const<S: ?const T>() -> i32 { <S as T>::CONST }\n    |                             ^^^^^^"}, {"sha": "454fde34a2cdca25aee5f58945b45ba4c88d204a", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -30,7 +30,7 @@ impl const std::ops::Add for Int {\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn foo() -> Int {\n     Int(1i32) + Int(2i32)\n-    //~^ ERROR can only call other `const fn` within a `const fn`\n+    //~^ ERROR not yet stable as a const fn\n }\n \n // ok"}, {"sha": "54d7cfd5d797390023baa754edbe2faea4f13298", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -6,18 +6,14 @@ LL | |\n LL | |         Int(self.0 - rhs.0)\n LL | |     }\n    | |_____^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: can only call other `const fn` within a `const fn`, but `<Int as Add>::add` is not stable as `const fn`\n+error: `<Int as Add>::add` is not yet stable as a const fn\n   --> $DIR/stability.rs:32:5\n    |\n LL |     Int(1i32) + Int(2i32)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = help: Const-stable functions can only call other const-stable functions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "65e0d79308ca3e04eb0295b4956bee0f7760c2fe", "filename": "src/test/ui/unsafe/ranged_ints2_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6d4277ed319de88d078e09a1d449eebc409327/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.rs?ref=ef6d4277ed319de88d078e09a1d449eebc409327", "patch": "@@ -8,13 +8,13 @@ fn main() {\n \n const fn foo() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    let y = &mut x.0; //~ ERROR references in const fn are unstable\n+    let y = &mut x.0; //~ ERROR mutable references\n     //~^ ERROR mutation of layout constrained field is unsafe\n     unsafe { NonZero(1) }\n }\n \n const fn bar() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    let y = unsafe { &mut x.0 }; //~ ERROR mutable references in const fn are unstable\n+    let y = unsafe { &mut x.0 }; //~ ERROR mutable references\n     unsafe { NonZero(1) }\n }"}]}