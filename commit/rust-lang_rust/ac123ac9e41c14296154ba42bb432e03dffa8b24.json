{"sha": "ac123ac9e41c14296154ba42bb432e03dffa8b24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTIzYWM5ZTQxYzE0Mjk2MTU0YmE0MmJiNDMyZTAzZGZmYThiMjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-04T11:14:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-04T11:14:40Z"}, "message": "Merge #6587\n\n6587: SSR: Support statement matching and replacing r=davidlattimore a=MarijnS95\n\n\r\nFor #3186\r\n\r\nHi!\r\n\r\nThis is a smaller initial patchset that came up while working on support for statement lists (and my first time working on RA :grin:). It has me stuck on trailing semicolons for which I hope to receive some feedback. Matching (and replacing) `let` bindings with a trailing semicolon works fine, but trying to omit these (to make patterns more ergonomic) turns out more complex than expected.\r\n\r\nThe \"optional trailing semicolon solution\" implemented in this PR is ugly because `Matcher::attempt_match_token` should only consume a trailing `;` when parsing `let` bindings to prevent other code from breaking. That at the same time has a nasty side-effect of `;` ending up in the matched code: any replacements on that should include the trailing semicolon as well even if it was not in the pattern. A better example is in the tests:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/3ae1649c24a689473b874c331f5f176e5839978e/crates/ssr/src/tests.rs#L178-L184\r\n\r\nThe end result to achieve is (I guess) allowing replacement of let bindings without trailing semicolon like `let x = $a ==>> let x = 1` (but including them on both sides is still fine), and should make replacement in a macro call (where `foo!(let a = 2;)` for a `$x:stmt` is invalid syntax) possible as well. That should allow to enable/fix these tests:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/3ae1649c24a689473b874c331f5f176e5839978e/crates/ssr/src/tests.rs#L201-L214\r\n\r\nA possible MVP of this PR might be to drop this optional `;' handling entirely and only allow an SSR pattern/template with semicolons on either side.\n\nCo-authored-by: Marijn Suijten <marijn@traverseresearch.nl>", "tree": {"sha": "8d6138e0af5f7349a7f00c8cce4a89196b64cd95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d6138e0af5f7349a7f00c8cce4a89196b64cd95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac123ac9e41c14296154ba42bb432e03dffa8b24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8vigCRBK7hj4Ov3rIwAAdHIIAAPkxlXa9mPzPVuDeO0nu2oM\nwWIQx3YY6Ajtvc3eESbiLAPlEP2jVIoIGU0DnaDOauYXbZ0vNFtTxoNgUjD5weOF\nVG3CwNGBQUPw28McoVGyovvC/3SvzfspGEuxtQ3+RA1qoykM5aKPNgiNzFLxipYL\nG96FEisxc2HXym5CeSdT2YEuuN8BF6xOFK0AKDQPS9/Na2gc6sM/PPs2RQJHRB3j\nVWnVvP3OVzWkE0JleEOH7n9tDk3kmKRXp+37Gke7nQLT1EaMwKzth3D+0E5hHnfu\nfY+tMwrROeextfAVcebem33/G4hQvUDqJmy66zdAjCZjpdJKoi70A1EX9sDOpVE=\n=wOHG\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d6138e0af5f7349a7f00c8cce4a89196b64cd95\nparent 5b86ff3e91838e58397ec39502d85056e46fcfcb\nparent b87699d97ac34f95dc09d166d07fc1220b460821\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609758880 +0000\ncommitter GitHub <noreply@github.com> 1609758880 +0000\n\nMerge #6587\n\n6587: SSR: Support statement matching and replacing r=davidlattimore a=MarijnS95\n\n\r\nFor #3186\r\n\r\nHi!\r\n\r\nThis is a smaller initial patchset that came up while working on support for statement lists (and my first time working on RA :grin:). It has me stuck on trailing semicolons for which I hope to receive some feedback. Matching (and replacing) `let` bindings with a trailing semicolon works fine, but trying to omit these (to make patterns more ergonomic) turns out more complex than expected.\r\n\r\nThe \"optional trailing semicolon solution\" implemented in this PR is ugly because `Matcher::attempt_match_token` should only consume a trailing `;` when parsing `let` bindings to prevent other code from breaking. That at the same time has a nasty side-effect of `;` ending up in the matched code: any replacements on that should include the trailing semicolon as well even if it was not in the pattern. A better example is in the tests:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/3ae1649c24a689473b874c331f5f176e5839978e/crates/ssr/src/tests.rs#L178-L184\r\n\r\nThe end result to achieve is (I guess) allowing replacement of let bindings without trailing semicolon like `let x = $a ==>> let x = 1` (but including them on both sides is still fine), and should make replacement in a macro call (where `foo!(let a = 2;)` for a `$x:stmt` is invalid syntax) possible as well. That should allow to enable/fix these tests:\r\n\r\nhttps://github.com/rust-analyzer/rust-analyzer/blob/3ae1649c24a689473b874c331f5f176e5839978e/crates/ssr/src/tests.rs#L201-L214\r\n\r\nA possible MVP of this PR might be to drop this optional `;' handling entirely and only allow an SSR pattern/template with semicolons on either side.\n\nCo-authored-by: Marijn Suijten <marijn@traverseresearch.nl>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac123ac9e41c14296154ba42bb432e03dffa8b24", "html_url": "https://github.com/rust-lang/rust/commit/ac123ac9e41c14296154ba42bb432e03dffa8b24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac123ac9e41c14296154ba42bb432e03dffa8b24/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b86ff3e91838e58397ec39502d85056e46fcfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b86ff3e91838e58397ec39502d85056e46fcfcb", "html_url": "https://github.com/rust-lang/rust/commit/5b86ff3e91838e58397ec39502d85056e46fcfcb"}, {"sha": "b87699d97ac34f95dc09d166d07fc1220b460821", "url": "https://api.github.com/repos/rust-lang/rust/commits/b87699d97ac34f95dc09d166d07fc1220b460821", "html_url": "https://github.com/rust-lang/rust/commit/b87699d97ac34f95dc09d166d07fc1220b460821"}], "stats": {"total": 278, "additions": 278, "deletions": 0}, "files": [{"sha": "bb9ffea8be59ec88ad5935977bffbfc506f822c9", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -66,6 +66,10 @@ pub(crate) mod fragments {\n         expressions::stmt(p, expressions::StmtWithSemi::No)\n     }\n \n+    pub(crate) fn stmt_optional_semi(p: &mut Parser) {\n+        expressions::stmt(p, expressions::StmtWithSemi::Optional)\n+    }\n+\n     pub(crate) fn opt_visibility(p: &mut Parser) {\n         let _ = super::opt_visibility(p);\n     }"}, {"sha": "9dfe63028c3dc78bb4c2c9045b8b1f3a0b429d5e", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -88,6 +88,7 @@ pub enum FragmentKind {\n     Path,\n     Expr,\n     Statement,\n+    StatementOptionalSemi,\n     Type,\n     Pattern,\n     Item,\n@@ -118,6 +119,7 @@ pub fn parse_fragment(\n         FragmentKind::Visibility => grammar::fragments::opt_visibility,\n         FragmentKind::MetaItem => grammar::fragments::meta_item,\n         FragmentKind::Statement => grammar::fragments::stmt,\n+        FragmentKind::StatementOptionalSemi => grammar::fragments::stmt_optional_semi,\n         FragmentKind::Items => grammar::fragments::macro_items,\n         FragmentKind::Statements => grammar::fragments::macro_stmts,\n         FragmentKind::Attr => grammar::fragments::attr,"}, {"sha": "289affe906f0b57b323f11b13275c44ef27e8b9e", "filename": "crates/ssr/src/parsing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fparsing.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -78,6 +78,7 @@ impl ParsedRule {\n         builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n+        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template.map(ast::Stmt::parse));\n         builder.build()\n     }\n }"}, {"sha": "c4149a849b01d1c945dff3300bcef6edd58b19a7", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -159,6 +159,50 @@ fn assert_match_failure_reason(pattern: &str, code: &str, snippet: &str, expecte\n     assert_eq!(reasons, vec![expected_reason]);\n }\n \n+#[test]\n+fn ssr_let_stmt_in_macro_match() {\n+    assert_matches(\n+        \"let a = 0\",\n+        r#\"\n+            macro_rules! m1 { ($a:stmt) => {$a}; }\n+            fn f() {m1!{ let a = 0 };}\"#,\n+        // FIXME: Whitespace is not part of the matched block\n+        &[\"leta=0\"],\n+    );\n+}\n+\n+#[test]\n+fn ssr_let_stmt_in_fn_match() {\n+    assert_matches(\"let $a = 10;\", \"fn main() { let x = 10; x }\", &[\"let x = 10;\"]);\n+    assert_matches(\"let $a = $b;\", \"fn main() { let x = 10; x }\", &[\"let x = 10;\"]);\n+}\n+\n+#[test]\n+fn ssr_block_expr_match() {\n+    assert_matches(\"{ let $a = $b; }\", \"fn main() { let x = 10; }\", &[\"{ let x = 10; }\"]);\n+    assert_matches(\"{ let $a = $b; $c }\", \"fn main() { let x = 10; x }\", &[\"{ let x = 10; x }\"]);\n+}\n+\n+#[test]\n+fn ssr_let_stmt_replace() {\n+    // Pattern and template with trailing semicolon\n+    assert_ssr_transform(\n+        \"let $a = $b; ==>> let $a = 11;\",\n+        \"fn main() { let x = 10; x }\",\n+        expect![[\"fn main() { let x = 11; x }\"]],\n+    );\n+}\n+\n+#[test]\n+fn ssr_let_stmt_replace_expr() {\n+    // Trailing semicolon should be dropped from the new expression\n+    assert_ssr_transform(\n+        \"let $a = $b; ==>> $b\",\n+        \"fn main() { let x = 10; }\",\n+        expect![[\"fn main() { 10 }\"]],\n+    );\n+}\n+\n #[test]\n fn ssr_function_to_method() {\n     assert_ssr_transform("}, {"sha": "da151e32895fd6f23a3b2826d63feedcab2ab86f", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -212,6 +212,13 @@ impl ast::Attr {\n     }\n }\n \n+impl ast::Stmt {\n+    /// Returns `text`, parsed as statement, but only if it has no errors.\n+    pub fn parse(text: &str) -> Result<Self, ()> {\n+        parsing::parse_text_fragment(text, parser::FragmentKind::StatementOptionalSemi)\n+    }\n+}\n+\n /// Matches a `SyntaxNode` against an `ast` type.\n ///\n /// # Example:"}, {"sha": "9d3433c9db23ef6c0161f4f61ba0db978427f61d", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -102,6 +102,15 @@ fn type_parser_tests() {\n     );\n }\n \n+#[test]\n+fn stmt_parser_tests() {\n+    fragment_parser_dir_test(\n+        &[\"parser/fragments/stmt/ok\"],\n+        &[\"parser/fragments/stmt/err\"],\n+        crate::ast::Stmt::parse,\n+    );\n+}\n+\n #[test]\n fn parser_fuzz_tests() {\n     for (_, text) in collect_rust_files(&test_data_dir(), &[\"parser/fuzz-failures\"]) {"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_attr.rast", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+ERROR"}, {"sha": "988df07059795429d6c02945609e67e1ba1ec404", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_attr.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_attr.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+#[foo]"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_multiple_stmts.rast", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+ERROR"}, {"sha": "7e3b2fd493671acd381325b4def6fce39734f482", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_multiple_stmts.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_multiple_stmts.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+a(); b(); c()"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_open_parenthesis.rast", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+ERROR"}, {"sha": "2d06f376636f6c39f974e77031dfd8c4f890fa2f", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_open_parenthesis.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_open_parenthesis.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+("}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_semicolon.rast", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+ERROR"}, {"sha": "092bc2b04126100878530888e6b1b30602dce213", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_semicolon.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_semicolon.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+;"}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_unterminated_expr.rast", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+ERROR"}, {"sha": "ca49acb079e2e0a90ef5cecad257a0e27b7f7ef1", "filename": "crates/syntax/test_data/parser/fragments/stmt/err/0000_unterminated_expr.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Ferr%2F0000_unterminated_expr.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+1 +"}, {"sha": "274fdf16deb90f2df1cfb79a12d462884d1b523e", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr.rast", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,9 @@\n+EXPR_STMT@0..5\n+  BIN_EXPR@0..5\n+    LITERAL@0..1\n+      INT_NUMBER@0..1 \"1\"\n+    WHITESPACE@1..2 \" \"\n+    PLUS@2..3 \"+\"\n+    WHITESPACE@3..4 \" \"\n+    LITERAL@4..5\n+      INT_NUMBER@4..5 \"1\""}, {"sha": "8d2f0971e2ce6dbec02115565c6f0e9c10ee9a02", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+1 + 1"}, {"sha": "6c946091f386c2200c633541883da2adc86a65cd", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr_block.rast", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,69 @@\n+EXPR_STMT@0..55\n+  BLOCK_EXPR@0..55\n+    L_CURLY@0..1 \"{\"\n+    WHITESPACE@1..6 \"\\n    \"\n+    LET_STMT@6..20\n+      LET_KW@6..9 \"let\"\n+      WHITESPACE@9..10 \" \"\n+      IDENT_PAT@10..11\n+        NAME@10..11\n+          IDENT@10..11 \"x\"\n+      WHITESPACE@11..12 \" \"\n+      EQ@12..13 \"=\"\n+      WHITESPACE@13..14 \" \"\n+      CALL_EXPR@14..19\n+        PATH_EXPR@14..17\n+          PATH@14..17\n+            PATH_SEGMENT@14..17\n+              NAME_REF@14..17\n+                IDENT@14..17 \"foo\"\n+        ARG_LIST@17..19\n+          L_PAREN@17..18 \"(\"\n+          R_PAREN@18..19 \")\"\n+      SEMICOLON@19..20 \";\"\n+    WHITESPACE@20..25 \"\\n    \"\n+    LET_STMT@25..39\n+      LET_KW@25..28 \"let\"\n+      WHITESPACE@28..29 \" \"\n+      IDENT_PAT@29..30\n+        NAME@29..30\n+          IDENT@29..30 \"y\"\n+      WHITESPACE@30..31 \" \"\n+      EQ@31..32 \"=\"\n+      WHITESPACE@32..33 \" \"\n+      CALL_EXPR@33..38\n+        PATH_EXPR@33..36\n+          PATH@33..36\n+            PATH_SEGMENT@33..36\n+              NAME_REF@33..36\n+                IDENT@33..36 \"bar\"\n+        ARG_LIST@36..38\n+          L_PAREN@36..37 \"(\"\n+          R_PAREN@37..38 \")\"\n+      SEMICOLON@38..39 \";\"\n+    WHITESPACE@39..44 \"\\n    \"\n+    CALL_EXPR@44..53\n+      PATH_EXPR@44..46\n+        PATH@44..46\n+          PATH_SEGMENT@44..46\n+            NAME_REF@44..46\n+              IDENT@44..46 \"Ok\"\n+      ARG_LIST@46..53\n+        L_PAREN@46..47 \"(\"\n+        BIN_EXPR@47..52\n+          PATH_EXPR@47..48\n+            PATH@47..48\n+              PATH_SEGMENT@47..48\n+                NAME_REF@47..48\n+                  IDENT@47..48 \"x\"\n+          WHITESPACE@48..49 \" \"\n+          PLUS@49..50 \"+\"\n+          WHITESPACE@50..51 \" \"\n+          PATH_EXPR@51..52\n+            PATH@51..52\n+              PATH_SEGMENT@51..52\n+                NAME_REF@51..52\n+                  IDENT@51..52 \"y\"\n+        R_PAREN@52..53 \")\"\n+    WHITESPACE@53..54 \"\\n\"\n+    R_CURLY@54..55 \"}\""}, {"sha": "ffa5c1e66ef678251f2bba0f6f241b23ca41a66c", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_expr_block.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_expr_block.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,5 @@\n+{\n+    let x = foo();\n+    let y = bar();\n+    Ok(x + y)\n+}"}, {"sha": "8c186da93eed7fd500de0571f9c70ffd26f2a529", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_fn_call.rast", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,11 @@\n+EXPR_STMT@0..6\n+  CALL_EXPR@0..5\n+    PATH_EXPR@0..3\n+      PATH@0..3\n+        PATH_SEGMENT@0..3\n+          NAME_REF@0..3\n+            IDENT@0..3 \"foo\"\n+    ARG_LIST@3..5\n+      L_PAREN@3..4 \"(\"\n+      R_PAREN@4..5 \")\"\n+  SEMICOLON@5..6 \";\""}, {"sha": "a280f9a5cce661edc17cdec211f76bd35ae48268", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_fn_call.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_fn_call.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+foo();"}, {"sha": "8ab38da21cb55bab5d2bdf4c4b937d0dd0856022", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_let_stmt.rast", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,12 @@\n+LET_STMT@0..11\n+  LET_KW@0..3 \"let\"\n+  WHITESPACE@3..4 \" \"\n+  IDENT_PAT@4..5\n+    NAME@4..5\n+      IDENT@4..5 \"x\"\n+  WHITESPACE@5..6 \" \"\n+  EQ@6..7 \"=\"\n+  WHITESPACE@7..8 \" \"\n+  LITERAL@8..10\n+    INT_NUMBER@8..10 \"10\"\n+  SEMICOLON@10..11 \";\""}, {"sha": "de8a7f1fc6c40dd376e1b73d4d661518ba084c52", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_let_stmt.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_let_stmt.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+let x = 10;"}, {"sha": "81d6df29a5fb8ff8bcd2ecf4d53c5dd5c85f5fbe", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_let_stmt.rast", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,21 @@\n+EXPR_STMT@0..18\n+  MACRO_CALL@0..17\n+    PATH@0..2\n+      PATH_SEGMENT@0..2\n+        NAME_REF@0..2\n+          IDENT@0..2 \"m1\"\n+    BANG@2..3 \"!\"\n+    TOKEN_TREE@3..17\n+      L_CURLY@3..4 \"{\"\n+      WHITESPACE@4..5 \" \"\n+      LET_KW@5..8 \"let\"\n+      WHITESPACE@8..9 \" \"\n+      IDENT@9..10 \"a\"\n+      WHITESPACE@10..11 \" \"\n+      EQ@11..12 \"=\"\n+      WHITESPACE@12..13 \" \"\n+      INT_NUMBER@13..14 \"0\"\n+      SEMICOLON@14..15 \";\"\n+      WHITESPACE@15..16 \" \"\n+      R_CURLY@16..17 \"}\"\n+  SEMICOLON@17..18 \";\""}, {"sha": "075f30159b246eafafb6ca48f431099b3bf0450a", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_let_stmt.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_let_stmt.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+m1!{ let a = 0; };"}, {"sha": "81d6df29a5fb8ff8bcd2ecf4d53c5dd5c85f5fbe", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_unterminated_let_stmt.rast", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,21 @@\n+EXPR_STMT@0..18\n+  MACRO_CALL@0..17\n+    PATH@0..2\n+      PATH_SEGMENT@0..2\n+        NAME_REF@0..2\n+          IDENT@0..2 \"m1\"\n+    BANG@2..3 \"!\"\n+    TOKEN_TREE@3..17\n+      L_CURLY@3..4 \"{\"\n+      WHITESPACE@4..5 \" \"\n+      LET_KW@5..8 \"let\"\n+      WHITESPACE@8..9 \" \"\n+      IDENT@9..10 \"a\"\n+      WHITESPACE@10..11 \" \"\n+      EQ@11..12 \"=\"\n+      WHITESPACE@12..13 \" \"\n+      INT_NUMBER@13..14 \"0\"\n+      SEMICOLON@14..15 \";\"\n+      WHITESPACE@15..16 \" \"\n+      R_CURLY@16..17 \"}\"\n+  SEMICOLON@17..18 \";\""}, {"sha": "075f30159b246eafafb6ca48f431099b3bf0450a", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_macro_unterminated_let_stmt.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_macro_unterminated_let_stmt.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+m1!{ let a = 0; };"}, {"sha": "64c5d296911e3c633a427575ac523308fa0dc14f", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_struct_item.rast", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,22 @@\n+STRUCT@0..28\n+  STRUCT_KW@0..6 \"struct\"\n+  WHITESPACE@6..7 \" \"\n+  NAME@7..10\n+    IDENT@7..10 \"Foo\"\n+  WHITESPACE@10..11 \" \"\n+  RECORD_FIELD_LIST@11..28\n+    L_CURLY@11..12 \"{\"\n+    WHITESPACE@12..17 \"\\n    \"\n+    RECORD_FIELD@17..25\n+      NAME@17..20\n+        IDENT@17..20 \"bar\"\n+      COLON@20..21 \":\"\n+      WHITESPACE@21..22 \" \"\n+      PATH_TYPE@22..25\n+        PATH@22..25\n+          PATH_SEGMENT@22..25\n+            NAME_REF@22..25\n+              IDENT@22..25 \"u32\"\n+    COMMA@25..26 \",\"\n+    WHITESPACE@26..27 \"\\n\"\n+    R_CURLY@27..28 \"}\""}, {"sha": "e5473e3ac8d7781ac44a0e2ee3081fc0654308fc", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_struct_item.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_struct_item.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,3 @@\n+struct Foo {\n+    bar: u32,\n+}"}, {"sha": "9089906bcea1b605eedfdd6aff817405c374bb1e", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_fn_call.rast", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,10 @@\n+EXPR_STMT@0..5\n+  CALL_EXPR@0..5\n+    PATH_EXPR@0..3\n+      PATH@0..3\n+        PATH_SEGMENT@0..3\n+          NAME_REF@0..3\n+            IDENT@0..3 \"foo\"\n+    ARG_LIST@3..5\n+      L_PAREN@3..4 \"(\"\n+      R_PAREN@4..5 \")\""}, {"sha": "eb28ef4401b2e7fcd41a13bb52794a2881a313d2", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_fn_call.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_fn_call.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+foo()"}, {"sha": "37663671fafb07f77e46b1f2edca7e64765720e5", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_let_stmt.rast", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rast?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1,11 @@\n+LET_STMT@0..10\n+  LET_KW@0..3 \"let\"\n+  WHITESPACE@3..4 \" \"\n+  IDENT_PAT@4..5\n+    NAME@4..5\n+      IDENT@4..5 \"x\"\n+  WHITESPACE@5..6 \" \"\n+  EQ@6..7 \"=\"\n+  WHITESPACE@7..8 \" \"\n+  LITERAL@8..10\n+    INT_NUMBER@8..10 \"10\""}, {"sha": "78364b2a96e47fddb1d5fe7fa80eeec784e9f981", "filename": "crates/syntax/test_data/parser/fragments/stmt/ok/0000_unterminated_let_stmt.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac123ac9e41c14296154ba42bb432e03dffa8b24/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Fstmt%2Fok%2F0000_unterminated_let_stmt.rs?ref=ac123ac9e41c14296154ba42bb432e03dffa8b24", "patch": "@@ -0,0 +1 @@\n+let x = 10"}]}