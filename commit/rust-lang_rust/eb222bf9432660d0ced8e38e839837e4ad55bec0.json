{"sha": "eb222bf9432660d0ced8e38e839837e4ad55bec0", "node_id": "C_kwDOAAsO6NoAKGViMjIyYmY5NDMyNjYwZDBjZWQ4ZTM4ZTgzOTgzN2U0YWQ1NWJlYzA", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T18:14:28Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:26Z"}, "message": "Use revisions for NLL in associated-types", "tree": {"sha": "3757ddd6b193aa3e143e42857f0d523cda0d983c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3757ddd6b193aa3e143e42857f0d523cda0d983c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb222bf9432660d0ced8e38e839837e4ad55bec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb222bf9432660d0ced8e38e839837e4ad55bec0", "html_url": "https://github.com/rust-lang/rust/commit/eb222bf9432660d0ced8e38e839837e4ad55bec0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb222bf9432660d0ced8e38e839837e4ad55bec0/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc97875d26c21230a75f9537e379501a2145911d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc97875d26c21230a75f9537e379501a2145911d", "html_url": "https://github.com/rust-lang/rust/commit/cc97875d26c21230a75f9537e379501a2145911d"}], "stats": {"total": 410, "additions": 280, "deletions": 130}, "files": [{"sha": "4313078064cc54e29f4c1bc6ecc95d211f3142b2", "filename": "src/test/ui/associated-types/associated-types-eq-hr.base.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.base.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,18 +1,18 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n note: expected this to be `&isize`\n-  --> $DIR/associated-types-eq-hr.rs:26:14\n+  --> $DIR/associated-types-eq-hr.rs:30:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n-  --> $DIR/associated-types-eq-hr.rs:45:36\n+  --> $DIR/associated-types-eq-hr.rs:49:36\n    |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n@@ -21,20 +21,20 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:95:5\n    |\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n note: expected this to be `&usize`\n-  --> $DIR/associated-types-eq-hr.rs:14:14\n+  --> $DIR/associated-types-eq-hr.rs:18:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`\n-  --> $DIR/associated-types-eq-hr.rs:52:36\n+  --> $DIR/associated-types-eq-hr.rs:56:36\n    |\n LL | fn bar<T>()\n    |    --- required by a bound in this\n@@ -43,7 +43,7 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `bar`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:96:5\n+  --> $DIR/associated-types-eq-hr.rs:100:5\n    |\n LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -52,7 +52,7 @@ LL |     tuple_one::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:96:5\n+  --> $DIR/associated-types-eq-hr.rs:100:5\n    |\n LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -61,7 +61,7 @@ LL |     tuple_one::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:102:5\n+  --> $DIR/associated-types-eq-hr.rs:106:5\n    |\n LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -70,7 +70,7 @@ LL |     tuple_two::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:102:5\n+  --> $DIR/associated-types-eq-hr.rs:106:5\n    |\n LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough\n@@ -79,7 +79,7 @@ LL |     tuple_two::<Tuple>();\n    = note: ...but it actually implements `TheTrait<(&'2 isize, &'2 isize)>`, for some specific lifetime `'2`\n \n error: implementation of `TheTrait` is not general enough\n-  --> $DIR/associated-types-eq-hr.rs:112:5\n+  --> $DIR/associated-types-eq-hr.rs:116:5\n    |\n LL |     tuple_four::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^^ implementation of `TheTrait` is not general enough", "previous_filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr"}, {"sha": "8d128821656f92063b8b520b46092d582ae5e074", "filename": "src/test/ui/associated-types/associated-types-eq-hr.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,18 +1,18 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n-  --> $DIR/associated-types-eq-hr.rs:87:5\n+  --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n    |\n note: expected this to be `&isize`\n-  --> $DIR/associated-types-eq-hr.rs:26:14\n+  --> $DIR/associated-types-eq-hr.rs:30:14\n    |\n LL |     type A = &'a usize;\n    |              ^^^^^^^^^\n    = note: expected reference `&isize`\n               found reference `&usize`\n note: required by a bound in `foo`\n-  --> $DIR/associated-types-eq-hr.rs:45:36\n+  --> $DIR/associated-types-eq-hr.rs:49:36\n    |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n@@ -21,20 +21,20 @@ LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:95:5\n    |\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n    |\n note: expected this to be `&usize`\n-  --> $DIR/associated-types-eq-hr.rs:14:14\n+  --> $DIR/associated-types-eq-hr.rs:18:14\n    |\n LL |     type A = &'a isize;\n    |              ^^^^^^^^^\n    = note: expected reference `&usize`\n               found reference `&isize`\n note: required by a bound in `bar`\n-  --> $DIR/associated-types-eq-hr.rs:52:36\n+  --> $DIR/associated-types-eq-hr.rs:56:36\n    |\n LL | fn bar<T>()\n    |    --- required by a bound in this"}, {"sha": "deb3fd059f80105ebc355a72e1161610214753ef", "filename": "src/test/ui/associated-types/associated-types-eq-hr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n // Check testing of equality constraints in a higher-ranked context.\n \n pub trait TheTrait<T> {\n@@ -94,14 +98,14 @@ pub fn call_bar() {\n \n pub fn call_tuple_one() {\n     tuple_one::<Tuple>();\n-    //~^ ERROR implementation of `TheTrait` is not general enough\n-    //~| ERROR implementation of `TheTrait` is not general enough\n+    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n+    //[base]~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_two() {\n     tuple_two::<Tuple>();\n-    //~^ ERROR implementation of `TheTrait` is not general enough\n-    //~| ERROR implementation of `TheTrait` is not general enough\n+    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n+    //[base]~| ERROR implementation of `TheTrait` is not general enough\n }\n \n pub fn call_tuple_three() {\n@@ -110,7 +114,7 @@ pub fn call_tuple_three() {\n \n pub fn call_tuple_four() {\n     tuple_four::<Tuple>();\n-    //~^ ERROR implementation of `TheTrait` is not general enough\n+    //[base]~^ ERROR implementation of `TheTrait` is not general enough\n }\n \n fn main() {}"}, {"sha": "fe238344263c30f2a741e259183dfe2ea5386930", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.base.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:40\n    |\n LL |     x: <I as Foo<&'a isize>>::A,\n    |                  --------- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.stderr"}, {"sha": "ae6ccb8af5521c4125893684b846c7ed290ab0e9", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:29\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:29\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let z: I::A = if cond { x } else { y };\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n+  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:26:40\n    |\n LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n    |        --  -- lifetime `'b` defined here"}, {"sha": "7ad12f2a1f361cad49c8f1d60c910ab641780b35", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Check projection of an associated type out of a higher-ranked\n // trait-bound in the context of a function body.\n \n@@ -20,7 +24,9 @@ fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n {\n     // x and y here have two distinct lifetimes:\n     let z: I::A = if cond { x } else { y };\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR lifetime may not live long enough\n }\n \n pub fn main() {}"}, {"sha": "35b3a83ee43026287db247a33521591487ecaa19", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.base.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:26:38\n+  --> $DIR/associated-types-subtyping-1.rs:31:38\n    |\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _c: <T as Trait<'b>>::Type = a;\n    |                                      ^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:35:38\n+  --> $DIR/associated-types-subtyping-1.rs:41:38\n    |\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...", "previous_filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr"}, {"sha": "44f918e12ba154882aff394c8e9f7bfb89e3b951", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/associated-types-subtyping-1.rs:24:12\n+  --> $DIR/associated-types-subtyping-1.rs:28:12\n    |\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |            -- -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let a: <T as Trait<'a>>::Type = make_any();\n    = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/associated-types-subtyping-1.rs:35:13\n+  --> $DIR/associated-types-subtyping-1.rs:41:13\n    |\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |            -- -- lifetime `'b` defined here"}, {"sha": "5b75e023b85ceec4381e9d7c10f6d230fd15bb6d", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![allow(unused_variables)]\n \n fn make_any<T>() -> T {  loop {} }\n@@ -22,8 +26,10 @@ fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n {\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = make_any();\n+    //[nll]~^ ERROR lifetime may not live long enough\n     let b: <T as Trait<'b>>::Type = make_any();\n-    let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+    let _c: <T as Trait<'b>>::Type = a;\n+    //[base]~^ ERROR E0623\n }\n \n fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n@@ -32,7 +38,9 @@ fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n     // Note that &'static T <: &'a T.\n     let a: <T as Trait<'a>>::Type = make_any();\n     let b: <T as Trait<'b>>::Type = make_any();\n-    let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n+    let _c: <T as Trait<'a>>::Type = b;\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn method4<'a,'b,T>(x: &'a T, y: &'b T)"}, {"sha": "ed5518b628f6a42c1e4c9a1c59d905bdcb5d8f0f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.krisskross.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.krisskross.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -0,0 +1,25 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-contravariant-nll.rs:51:5\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |                        -------                 ------------------\n+   |                        |\n+   |                        this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b)\n+   |     ^ ...but data from `y` is returned here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/project-fn-ret-contravariant-nll.rs:51:8\n+   |\n+LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   |                                    -------     ------------------\n+   |                                    |\n+   |                                    this parameter and the return type are declared with different lifetimes...\n+...\n+LL |    (a, b)\n+   |        ^ ...but data from `x` is returned here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "c3ac9949c214b285c7594f18e94f110327d48405", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -0,0 +1,55 @@\n+#![feature(unboxed_closures)]\n+\n+// Test for projection cache. We should be able to project distinct\n+// lifetimes from `foo` as we reinstantiate it multiple times, but not\n+// if we do it just once. In this variant, the region `'a` is used in\n+// an contravariant position, which affects the results.\n+\n+// revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+//[oneuse] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should replace `project-fn-ret-contravariant.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n+#![allow(dead_code, unused_variables)]\n+\n+fn foo<'a>() -> &'a u32 { loop { } }\n+\n+fn bar<T>(t: T, x: T::Output) -> T::Output\n+    where T: FnOnce<()>\n+{\n+    t()\n+}\n+\n+#[cfg(ok)] // two instantiations: OK\n+fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    let a = bar(foo, x);\n+    let b = bar(foo, y);\n+    (a, b)\n+}\n+\n+#[cfg(oneuse)] // one instantiation: OK (surprisingly)\n+fn baz<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+    let f /* : fn() -> &'static u32 */ = foo; // <-- inferred type annotated\n+    let a = bar(f, x); // this is considered ok because fn args are contravariant...\n+    let b = bar(f, y); // ...and hence we infer T to distinct values in each call.\n+    (a, b)\n+}\n+\n+#[cfg(transmute)] // one instantiations: BAD\n+fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   bar(foo, x) //[transmute]~ ERROR E0759\n+}\n+\n+#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n+fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n+   let a = bar(foo, y);\n+   let b = bar(foo, x);\n+   (a, b) //[krisskross]~ ERROR lifetime mismatch [E0623]\n+   //[krisskross]~^ ERROR lifetime mismatch [E0623]\n+}\n+\n+fn main() { }"}, {"sha": "ca57142ecee09fd7094db32207241d291aaaf197", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant-nll.transmute.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant-nll.transmute.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -0,0 +1,11 @@\n+error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/project-fn-ret-contravariant-nll.rs:44:8\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |                  ------- this data with lifetime `'a`...\n+LL |    bar(foo, x)\n+   |        ^^^  - ...is used and required to live as long as `'static` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "a5b6d6403914757359c3b3c270be747f07e0e38f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,30 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-contravariant.rs:45:4\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b)\n-   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-   |\n-   = help: consider adding the following bound: `'a: 'b`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-contravariant.rs:45:4\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b)\n-   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n-\n-help: `'a` and `'b` must be the same: replace one with the other\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "52824b3922e6942ded7ec1a785edf05542978306", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant.rs:45:5\n+  --> $DIR/project-fn-ret-contravariant.rs:52:5\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |                        -------                 ------------------\n@@ -10,7 +10,7 @@ LL |    (a, b)\n    |     ^ ...but data from `y` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-contravariant.rs:45:8\n+  --> $DIR/project-fn-ret-contravariant.rs:52:8\n    |\n LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |                                    -------     ------------------"}, {"sha": "ed900079cfc223970ce1e4f502b5b363cc05d45e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.ok.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.ok.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-contravariant.rs:50:1\n-   |\n-LL | fn main() { }\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "ed900079cfc223970ce1e4f502b5b363cc05d45e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.oneuse.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.oneuse.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-contravariant.rs:50:1\n-   |\n-LL | fn main() { }\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7bd245d1c340ab4a63680a7fd322516839b5f1ba", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,12 +1,19 @@\n #![feature(unboxed_closures)]\n-#![feature(rustc_attrs)]\n \n // Test for projection cache. We should be able to project distinct\n // lifetimes from `foo` as we reinstantiate it multiple times, but not\n // if we do it just once. In this variant, the region `'a` is used in\n // an contravariant position, which affects the results.\n \n // revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+//[oneuse] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replaced with\n+// `project-fn-ret-contravariant-nll.rs` The two would normally be just\n+// revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n \n #![allow(dead_code, unused_variables)]\n \n@@ -46,5 +53,4 @@ fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    //[krisskross]~^ ERROR lifetime mismatch [E0623]\n }\n \n-#[rustc_error]\n-fn main() { } //[ok,oneuse]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() { }"}, {"sha": "f532c96ed2cc73ed21a190765b33a79a82eb24d5", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,10 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-contravariant.rs:38:4\n-   |\n-LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n-LL |    bar(foo, x)\n-   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3d7f36ca32ba9c6c15f3f15cbf18abae6967019d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-contravariant.rs:38:8\n+  --> $DIR/project-fn-ret-contravariant.rs:45:8\n    |\n LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |                  ------- this data with lifetime `'a`..."}, {"sha": "231e98cf841f2eb609cf93193c3c695ef3c1c449", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.krisskross.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.krisskross.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:56:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:63:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              --  -- lifetime `'b` defined here\n@@ -15,7 +15,7 @@ LL |     (a, b)\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:56:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:63:5\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |              --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr"}, {"sha": "1dbfff6a8cdeb0ad809e911ac20375aed8f2a329", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.oneuse.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.oneuse.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:39:13\n+  --> $DIR/project-fn-ret-invariant-nll.rs:46:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here\n@@ -15,7 +15,7 @@ LL |     let a = bar(f, x);\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:40:13\n+  --> $DIR/project-fn-ret-invariant-nll.rs:47:13\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |        --  -- lifetime `'b` defined here", "previous_filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr"}, {"sha": "6cd5c6417a914502969496d104591671ee537856", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -0,0 +1,68 @@\n+#![feature(unboxed_closures)]\n+// Test for projection cache. We should be able to project distinct\n+// lifetimes from `foo` as we reinstantiate it multiple times, but not\n+// if we do it just once. In this variant, the region `'a` is used in\n+// an invariant position, which affects the results.\n+\n+// revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+\n+// compile-flags: -Z borrowck=mir\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should replace with `project-fn-ret-invariant.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n+#![allow(dead_code, unused_variables)]\n+\n+use std::marker::PhantomData;\n+\n+struct Type<'a> {\n+    // Invariant\n+    data: PhantomData<fn(&'a u32) -> &'a u32>,\n+}\n+\n+fn foo<'a>() -> Type<'a> {\n+    loop {}\n+}\n+\n+fn bar<T>(t: T, x: T::Output) -> T::Output\n+where\n+    T: FnOnce<()>,\n+{\n+    t()\n+}\n+\n+#[cfg(ok)] // two instantiations: OK\n+fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let a = bar(foo, x);\n+    let b = bar(foo, y);\n+    (a, b)\n+}\n+\n+#[cfg(oneuse)] // one instantiation: BAD\n+fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let f = foo; // <-- No consistent type can be inferred for `f` here.\n+    let a = bar(f, x); //[oneuse]~ ERROR lifetime may not live long enough\n+    let b = bar(f, y); //[oneuse]~ ERROR lifetime may not live long enough\n+    (a, b)\n+}\n+\n+#[cfg(transmute)] // one instantiations: BAD\n+fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n+    // Cannot instantiate `foo` with any lifetime other than `'a`,\n+    // since it is provided as input.\n+\n+    bar(foo, x) //[transmute]~ ERROR lifetime may not live long enough\n+}\n+\n+#[cfg(krisskross)] // two instantiations, mixing and matching: BAD\n+fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n+    let a = bar(foo, y);\n+    let b = bar(foo, x);\n+    (a, b)\n+    //[krisskross]~^ ERROR lifetime may not live long enough\n+    //[krisskross]~| ERROR lifetime may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "352914f020c2cdd03f5886d7a9010554db49febb", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant-nll.transmute.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant-nll.transmute.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/project-fn-ret-invariant.rs:49:5\n+  --> $DIR/project-fn-ret-invariant-nll.rs:56:5\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |        -- lifetime `'a` defined here", "previous_filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr"}, {"sha": "fd1152dd80cc1fc72b0f884e849dfd8ae41fe35d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:54:22\n+  --> $DIR/project-fn-ret-invariant.rs:60:22\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                      --------     --------------------\n@@ -9,7 +9,7 @@ LL |     let a = bar(foo, y);\n    |                      ^ ...but data from `x` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:56:9\n+  --> $DIR/project-fn-ret-invariant.rs:62:9\n    |\n LL | fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                      --------     --------------------"}, {"sha": "c340850094857f62b2aed2e42d2fa07b5dfa31f0", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.ok.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.ok.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/project-fn-ret-invariant.rs:60:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "1b10c6b990a6d202bf5fed1551d644554fa0927e", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/project-fn-ret-invariant.rs:40:20\n+  --> $DIR/project-fn-ret-invariant.rs:46:20\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n    |                                --------     --------------------"}, {"sha": "d42d99d778376f7fbb0e755f74208fa6245f0aab", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,11 +1,17 @@\n #![feature(unboxed_closures)]\n-#![feature(rustc_attrs)]\n // Test for projection cache. We should be able to project distinct\n // lifetimes from `foo` as we reinstantiate it multiple times, but not\n // if we do it just once. In this variant, the region `'a` is used in\n // an invariant position, which affects the results.\n \n // revisions: ok oneuse transmute krisskross\n+//[ok] check-pass\n+\n+// ignore-compare-mode-nll\n+// FIXME(nll): When stabilizing, this test should be replaced with `project-fn-ret-invariant-nll.rs`\n+// The two would normally be just revisions, but this test uses revisions heavily, so splitting into\n+// a separate test is just easier.\n+\n #![allow(dead_code, unused_variables)]\n \n use std::marker::PhantomData;\n@@ -56,6 +62,4 @@ fn transmute<'a, 'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n     (a, b) //[krisskross]~ ERROR E0623\n }\n \n-#[rustc_error]\n fn main() {}\n-//[ok]~^ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "8c1d9d1e28409336277c8a085763ff73fb94cefb", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/project-fn-ret-invariant.rs:49:9\n+  --> $DIR/project-fn-ret-invariant.rs:55:9\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                   -------- this data with lifetime `'a`...\n@@ -8,7 +8,7 @@ LL |     bar(foo, x)\n    |         ^^^  - ...is used and required to live as long as `'static` here\n    |\n note: `'static` lifetime requirement introduced by the return type\n-  --> $DIR/project-fn-ret-invariant.rs:45:37\n+  --> $DIR/project-fn-ret-invariant.rs:51:37\n    |\n LL | fn baz<'a, 'b>(x: Type<'a>) -> Type<'static> {\n    |                                     ^^^^^^^ `'static` requirement introduced here"}, {"sha": "732f5d9584bc85d2c13d472f962bc77cba4c0f19", "filename": "src/test/ui/associated-types/higher-ranked-projection.badbase.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badbase.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/higher-ranked-projection.rs:25:5\n+   |\n+LL |     foo(());\n+   |     ^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&'a ()`\n+              found reference `&()`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/higher-ranked-projection.rs:16:33\n+   |\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8b2b87223a58a2d5d473d8bb0d3afeedde9a5857", "filename": "src/test/ui/associated-types/higher-ranked-projection.badnll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.badnll.stderr?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/higher-ranked-projection.rs:25:5\n+   |\n+LL |     foo(());\n+   |     ^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected reference `&'a ()`\n+              found reference `&()`\n+note: the lifetime requirement is introduced here\n+  --> $DIR/higher-ranked-projection.rs:16:33\n+   |\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1dc41a2165fff9ce5a8d317bbcf2de779e1d721d", "filename": "src/test/ui/associated-types/higher-ranked-projection.good.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc97875d26c21230a75f9537e379501a2145911d/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.good.stderr?ref=cc97875d26c21230a75f9537e379501a2145911d", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/higher-ranked-projection.rs:24:1\n-   |\n-LL | fn main() {\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "8b1046b6bbc9ddfb90a0e4c7306bd9239a69b1d0", "filename": "src/test/ui/associated-types/higher-ranked-projection.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb222bf9432660d0ced8e38e839837e4ad55bec0/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.rs?ref=eb222bf9432660d0ced8e38e839837e4ad55bec0", "patch": "@@ -1,6 +1,7 @@\n-#![feature(rustc_attrs)]\n-\n-// revisions: good bad\n+// ignore-compare-mode-nll\n+// revisions: good badbase badnll\n+//[good] check-pass\n+// [badnll]compile-flags: -Zborrowck=mir\n \n trait Mirror {\n     type Image;\n@@ -10,7 +11,7 @@ impl<T> Mirror for T {\n     type Image = T;\n }\n \n-#[cfg(bad)]\n+#[cfg(any(badbase, badnll))]\n fn foo<U, T>(_t: T)\n     where for<'a> &'a T: Mirror<Image=U>\n {}\n@@ -20,8 +21,8 @@ fn foo<U, T>(_t: T)\n     where for<'a> &'a T: Mirror<Image=&'a U>\n {}\n \n-#[rustc_error]\n-fn main() { //[good]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() {\n     foo(());\n-    //[bad]~^ ERROR mismatched types\n+    //[badbase]~^ ERROR mismatched types\n+    //[badnll]~^^ ERROR mismatched types\n }"}]}