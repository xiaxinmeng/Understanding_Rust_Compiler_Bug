{"sha": "8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODBiNjVmMTAyMTNjNmU1ZjRjNmQ4MTEzZThmOGM5NDc3YWY1Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-24T05:21:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-24T05:21:52Z"}, "message": "Auto merge of #4123 - Centril:rustup-let-chains-ast, r=Manishearth\n\nFix fallout from rust-lang/rust PR 60861\n\nFixes incoming breakage for unlanded https://github.com/rust-lang/rust/pull/60861.\n\nTests are passing locally; the Rust PR now needs to land first.\n\n@Manishearth also says we'll want to split out to a `collapsible_if_let` once we have let-chains working in Rust nightly or something.", "tree": {"sha": "9bc03c6d06b06df5e11a1dcea6f453babd003cac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bc03c6d06b06df5e11a1dcea6f453babd003cac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "html_url": "https://github.com/rust-lang/rust/commit/8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "html_url": "https://github.com/rust-lang/rust/commit/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f"}, {"sha": "46a0e5436155ee8d48c1d9d73b2bb7c7ed60e33c", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a0e5436155ee8d48c1d9d73b2bb7c7ed60e33c", "html_url": "https://github.com/rust-lang/rust/commit/46a0e5436155ee8d48c1d9d73b2bb7c7ed60e33c"}], "stats": {"total": 113, "additions": 73, "deletions": 40}, "files": [{"sha": "12c83873641cad31149a67146b8a6e4bebd5a15c", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -84,18 +84,14 @@ impl EarlyLintPass for CollapsibleIf {\n }\n \n fn check_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-    match expr.node {\n-        ast::ExprKind::If(ref check, ref then, ref else_) => {\n-            if let Some(ref else_) = *else_ {\n-                check_collapsible_maybe_if_let(cx, else_);\n-            } else {\n-                check_collapsible_no_if_let(cx, expr, check, then);\n-            }\n-        },\n-        ast::ExprKind::IfLet(_, _, _, Some(ref else_)) => {\n+    if let ast::ExprKind::If(check, then, else_) = &expr.node {\n+        if let Some(else_) = else_ {\n             check_collapsible_maybe_if_let(cx, else_);\n-        },\n-        _ => (),\n+        } else if let ast::ExprKind::Let(..) = check.node {\n+            // Prevent triggering on `if let a = b { if c { .. } }`.\n+        } else {\n+            check_collapsible_no_if_let(cx, expr, check, then);\n+        }\n     }\n }\n \n@@ -113,22 +109,18 @@ fn check_collapsible_maybe_if_let(cx: &EarlyContext<'_>, else_: &ast::Expr) {\n         if !block_starts_with_comment(cx, block);\n         if let Some(else_) = expr_block(block);\n         if !in_macro_or_desugar(else_.span);\n+        if let ast::ExprKind::If(..) = else_.node;\n         then {\n-            match else_.node {\n-                ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => {\n-                    let mut applicability = Applicability::MachineApplicable;\n-                    span_lint_and_sugg(\n-                        cx,\n-                        COLLAPSIBLE_IF,\n-                        block.span,\n-                        \"this `else { if .. }` block can be collapsed\",\n-                        \"try\",\n-                        snippet_block_with_applicability(cx, else_.span, \"..\", &mut applicability).into_owned(),\n-                        applicability,\n-                    );\n-                }\n-                _ => (),\n-            }\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                COLLAPSIBLE_IF,\n+                block.span,\n+                \"this `else { if .. }` block can be collapsed\",\n+                \"try\",\n+                snippet_block_with_applicability(cx, else_.span, \"..\", &mut applicability).into_owned(),\n+                applicability,\n+            );\n         }\n     }\n }\n@@ -139,6 +131,11 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n         if let Some(inner) = expr_block(then);\n         if let ast::ExprKind::If(ref check_inner, ref content, None) = inner.node;\n         then {\n+            if let ast::ExprKind::Let(..) = check_inner.node {\n+                // Prevent triggering on `if c { if let a = b { .. } }`.\n+                return;\n+            }\n+\n             if expr.span.ctxt() != inner.span.ctxt() {\n                 return;\n             }"}, {"sha": "1d2e50a7806ba70a474cc8450ff2915d173c2bcd", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -248,9 +248,7 @@ fn is_block(expr: &ast::Expr) -> bool {\n /// Match `if` or `if let` expressions and return the `then` and `else` block.\n fn unsugar_if(expr: &ast::Expr) -> Option<(&P<ast::Block>, &Option<P<ast::Expr>>)> {\n     match expr.node {\n-        ast::ExprKind::If(_, ref then, ref else_) | ast::ExprKind::IfLet(_, _, ref then, ref else_) => {\n-            Some((then, else_))\n-        },\n+        ast::ExprKind::If(_, ref then, ref else_) => Some((then, else_)),\n         _ => None,\n     }\n }"}, {"sha": "baf7791b79210d30dc246044709d64a08addc3c8", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -50,8 +50,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n                 };\n                 if let ExprKind::Call(_, ref args) = e.node {\n                     self.try_desugar_arm.push(args[0].hir_id);\n-                } else {\n-                    return;\n                 }\n             },\n "}, {"sha": "97175f869b699a6131d5c3c67b1f9a84939e1c68", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -209,12 +209,11 @@ fn with_loop_block<F>(expr: &ast::Expr, mut func: F)\n where\n     F: FnMut(&ast::Block, Option<&ast::Label>),\n {\n-    match expr.node {\n-        ast::ExprKind::While(_, ref loop_block, ref label)\n-        | ast::ExprKind::WhileLet(_, _, ref loop_block, ref label)\n-        | ast::ExprKind::ForLoop(_, _, ref loop_block, ref label)\n-        | ast::ExprKind::Loop(ref loop_block, ref label) => func(loop_block, label.as_ref()),\n-        _ => {},\n+    if let ast::ExprKind::While(_, loop_block, label)\n+    | ast::ExprKind::ForLoop(_, _, loop_block, label)\n+    | ast::ExprKind::Loop(loop_block, label) = &expr.node\n+    {\n+        func(loop_block, label.as_ref());\n     }\n }\n "}, {"sha": "a9643a74085ec519830fd91dad5a63b46bc79e4c", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -135,7 +135,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Box(..)\n             | ast::ExprKind::Closure(..)\n             | ast::ExprKind::If(..)\n-            | ast::ExprKind::IfLet(..)\n+            | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n             | ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n             ast::ExprKind::Async(..)\n@@ -162,7 +162,6 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Tup(..)\n             | ast::ExprKind::Array(..)\n             | ast::ExprKind::While(..)\n-            | ast::ExprKind::WhileLet(..)\n             | ast::ExprKind::Await(..)\n             | ast::ExprKind::Err => Sugg::NonParen(snippet),\n             ast::ExprKind::Range(.., RangeLimits::HalfOpen) => Sugg::BinOp(AssocOp::DotDot, snippet),"}, {"sha": "3427d88ff03259e266a4655009f089f1f98cd27e", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -37,7 +37,7 @@ pub fn is_potentially_mutated<'a, 'tcx>(variable: &'tcx Path, expr: &'tcx Expr,\n     if let Res::Local(id) = variable.res {\n         mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))\n     } else {\n-        return true;\n+        true\n     }\n }\n "}, {"sha": "810fd2e69ea28328384476f75e10555b872a33bc", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -172,4 +172,25 @@ else {\n             println!(\"Hello world!\");\n         }\n     }\n+\n+    // Test behavior wrt. `let_chains`.\n+    // None of the cases below should be collapsed.\n+    fn truth() -> bool { true }\n+\n+    // Prefix:\n+    if let 0 = 1 {\n+        if truth() {}\n+    }\n+\n+    // Suffix:\n+    if truth() {\n+        if let 0 = 1 {}\n+    }\n+\n+    // Midfix:\n+    if truth() {\n+        if let 0 = 1 {\n+            if truth() {}\n+        }\n+    }\n }"}, {"sha": "7b322acae263d75eed3482dd120150677faf7b47", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c80b65f10213c6e5f4c6d8113e8f8c9477af568/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "patch": "@@ -200,4 +200,25 @@ fn main() {\n             println!(\"Hello world!\");\n         }\n     }\n+\n+    // Test behavior wrt. `let_chains`.\n+    // None of the cases below should be collapsed.\n+    fn truth() -> bool { true }\n+\n+    // Prefix:\n+    if let 0 = 1 {\n+        if truth() {}\n+    }\n+\n+    // Suffix:\n+    if truth() {\n+        if let 0 = 1 {}\n+    }\n+\n+    // Midfix:\n+    if truth() {\n+        if let 0 = 1 {\n+            if truth() {}\n+        }\n+    }\n }"}]}