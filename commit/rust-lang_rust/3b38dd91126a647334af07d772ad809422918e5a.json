{"sha": "3b38dd91126a647334af07d772ad809422918e5a", "node_id": "C_kwDOAAsO6NoAKDNiMzhkZDkxMTI2YTY0NzMzNGFmMDdkNzcyYWQ4MDk0MjI5MThlNWE", "commit": {"author": {"name": "Maciej Wasilewski", "email": "52935969+MaciejWas@users.noreply.github.com", "date": "2023-03-30T08:35:06Z"}, "committer": {"name": "Maciej Wasilewski", "email": "52935969+MaciejWas@users.noreply.github.com", "date": "2023-03-30T08:38:04Z"}, "message": "better diagnostics for pattern matching tuple structs\n\nBetter diagnostic message when trying to pattern match a tuple struct with a struct pattern.", "tree": {"sha": "ab33d6cb823aacd10dc02e45536aa65f2bf1e195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab33d6cb823aacd10dc02e45536aa65f2bf1e195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b38dd91126a647334af07d772ad809422918e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b38dd91126a647334af07d772ad809422918e5a", "html_url": "https://github.com/rust-lang/rust/commit/3b38dd91126a647334af07d772ad809422918e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b38dd91126a647334af07d772ad809422918e5a/comments", "author": {"login": "MaciejWas", "id": 52935969, "node_id": "MDQ6VXNlcjUyOTM1OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/52935969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaciejWas", "html_url": "https://github.com/MaciejWas", "followers_url": "https://api.github.com/users/MaciejWas/followers", "following_url": "https://api.github.com/users/MaciejWas/following{/other_user}", "gists_url": "https://api.github.com/users/MaciejWas/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaciejWas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaciejWas/subscriptions", "organizations_url": "https://api.github.com/users/MaciejWas/orgs", "repos_url": "https://api.github.com/users/MaciejWas/repos", "events_url": "https://api.github.com/users/MaciejWas/events{/privacy}", "received_events_url": "https://api.github.com/users/MaciejWas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaciejWas", "id": 52935969, "node_id": "MDQ6VXNlcjUyOTM1OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/52935969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaciejWas", "html_url": "https://github.com/MaciejWas", "followers_url": "https://api.github.com/users/MaciejWas/followers", "following_url": "https://api.github.com/users/MaciejWas/following{/other_user}", "gists_url": "https://api.github.com/users/MaciejWas/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaciejWas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaciejWas/subscriptions", "organizations_url": "https://api.github.com/users/MaciejWas/orgs", "repos_url": "https://api.github.com/users/MaciejWas/repos", "events_url": "https://api.github.com/users/MaciejWas/events{/privacy}", "received_events_url": "https://api.github.com/users/MaciejWas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "html_url": "https://github.com/rust-lang/rust/commit/82bfda848e28d7616c7045d7ced8cee88d2d1a8f"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "0160bce86042cbcf6f24585635f3351d6331fec3", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b38dd91126a647334af07d772ad809422918e5a/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b38dd91126a647334af07d772ad809422918e5a/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=3b38dd91126a647334af07d772ad809422918e5a", "patch": "@@ -36,6 +36,10 @@ pointers. If you encounter this error you should try to avoid dereferencing the\n You can read more about trait objects in the Trait Objects section of the Reference: \\\n https://doc.rust-lang.org/reference/types.html#trait-objects\";\n \n+fn is_number(text: &str) -> bool {\n+    text.chars().all(|c: char| c.is_digit(10))\n+}\n+\n /// Information about the expected type at the top level of type checking a pattern.\n ///\n /// **NOTE:** This is only for use by diagnostics. Do NOT use for type checking logic!\n@@ -1671,7 +1675,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &'tcx [hir::PatField<'tcx>],\n         variant: &ty::VariantDef,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n-        if let (Some(CtorKind::Fn), PatKind::Struct(qpath, ..)) = (variant.ctor_kind(), &pat.kind) {\n+        if let (Some(CtorKind::Fn), PatKind::Struct(qpath, pattern_fields, ..)) =\n+            (variant.ctor_kind(), &pat.kind)\n+        {\n+            let is_tuple_struct_match = !pattern_fields.is_empty()\n+                && pattern_fields.iter().map(|field| field.ident.name.as_str()).all(is_number);\n+            if is_tuple_struct_match {\n+                return None;\n+            }\n+\n             let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n                 s.print_qpath(qpath, false)\n             });\n@@ -1893,7 +1905,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 prefix,\n                 unmentioned_fields\n                     .iter()\n-                    .map(|(_, name)| name.to_string())\n+                    .map(|(_, name)| {\n+                        let field_name = name.to_string();\n+                        if is_number(&field_name) {\n+                            format!(\"{}: _\", field_name)\n+                        } else {\n+                            field_name\n+                        }\n+                    })\n                     .collect::<Vec<_>>()\n                     .join(\", \"),\n                 if have_inaccessible_fields { \", ..\" } else { \"\" },"}, {"sha": "33f264aa25091739096eaddeafd24349cacf58c9", "filename": "tests/ui/structs/struct-tuple-field-names.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b38dd91126a647334af07d772ad809422918e5a/tests%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b38dd91126a647334af07d772ad809422918e5a/tests%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-tuple-field-names.rs?ref=3b38dd91126a647334af07d772ad809422918e5a", "patch": "@@ -12,4 +12,7 @@ fn main() {\n     match y {\n         S { } => {} //~ ERROR: tuple variant `S` written as struct variant [E0769]\n     }\n+\n+    if let E::S { 0: a } = x { //~ ERROR: pattern does not mention field `1`\n+    }\n }"}, {"sha": "0b837a47a82542d278e640b61333c6fa71c51500", "filename": "tests/ui/structs/struct-tuple-field-names.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b38dd91126a647334af07d772ad809422918e5a/tests%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b38dd91126a647334af07d772ad809422918e5a/tests%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-tuple-field-names.stderr?ref=3b38dd91126a647334af07d772ad809422918e5a", "patch": "@@ -20,6 +20,22 @@ help: use the tuple variant pattern syntax instead\n LL |         S(_, _) => {}\n    |          ~~~~~~\n \n-error: aborting due to 2 previous errors\n+error[E0027]: pattern does not mention field `1`\n+  --> $DIR/struct-tuple-field-names.rs:16:12\n+   |\n+LL |     if let E::S { 0: a } = x {\n+   |            ^^^^^^^^^^^^^ missing field `1`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     if let E::S { 0: a, 1: _ } = x {\n+   |                       ~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     if let E::S { 0: a, .. } = x {\n+   |                       ~~~~~~\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0769`.\n+Some errors have detailed explanations: E0027, E0769.\n+For more information about an error, try `rustc --explain E0027`."}]}