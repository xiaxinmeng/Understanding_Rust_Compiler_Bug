{"sha": "ee0177b9082ffc2521141c615d332a994708c8a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDE3N2I5MDgyZmZjMjUyMTE0MWM2MTVkMzMyYTk5NDcwOGM4YTI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-06T18:35:46Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-06T20:37:56Z"}, "message": "Move string append to libraries. Closes #2710.", "tree": {"sha": "154199bcd36208b4a39bdf40dd543e2bc75dc1d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/154199bcd36208b4a39bdf40dd543e2bc75dc1d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0177b9082ffc2521141c615d332a994708c8a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0177b9082ffc2521141c615d332a994708c8a2", "html_url": "https://github.com/rust-lang/rust/commit/ee0177b9082ffc2521141c615d332a994708c8a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0177b9082ffc2521141c615d332a994708c8a2/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c64a98d657b27a6b324547eca78c032d191e33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c64a98d657b27a6b324547eca78c032d191e33e", "html_url": "https://github.com/rust-lang/rust/commit/8c64a98d657b27a6b324547eca78c032d191e33e"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "d68800a96fc788c6e5f360db725959a42c4b4916", "filename": "src/libcore/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -139,9 +139,9 @@ fn escape_unicode(c: char) -> str {\n                     else { ('U', 8u) });\n     assert str::len(s) <= pad;\n     let mut out = \"\\\\\";\n-    out += str::from_char(c);\n-    for uint::range(str::len(s), pad) |_i| { out += \"0\"; }\n-    out += s;\n+    str::push_str(out, str::from_char(c));\n+    for uint::range(str::len(s), pad) |_i| { str::push_str(out, \"0\"); }\n+    str::push_str(out, s);\n     ret out;\n }\n "}, {"sha": "ce4a29f376ae554301206247dc2c9f8c1b83107a", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -144,9 +144,9 @@ impl extensions for rng {\n      * Return a random string of the specified length composed of A-Z,a-z,0-9\n      */\n     fn gen_str(len: uint) -> str {\n-        let charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n-                      \"abcdefghijklmnopqrstuvwxyz\" +\n-                      \"0123456789\";\n+        let charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n+                       abcdefghijklmnopqrstuvwxyz\\\n+                       0123456789\";\n         let mut s = \"\";\n         let mut i = 0u;\n         while (i < len) {"}, {"sha": "2d9d97979097e852a4a42551f0c305aa8e8934dc", "filename": "src/libcore/str.rs", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -15,6 +15,7 @@ export\n    from_byte,\n    from_char,\n    from_chars,\n+   append,\n    concat,\n    connect,\n \n@@ -25,6 +26,7 @@ export\n    unpack_slice,\n \n    // Adding things to and removing things from a string\n+   push_str,\n    push_char,\n    pop_char,\n    shift_char,\n@@ -233,19 +235,47 @@ pure fn from_chars(chs: &[const char]) -> str {\n     ret buf;\n }\n \n+/// Appends a string slice to the back of a string\n+#[inline(always)]\n+fn push_str(&lhs: str, rhs: str/&) {\n+    unsafe {\n+        let llen = lhs.len();\n+        let rlen = rhs.len();\n+        reserve(lhs, llen + rlen);\n+        do as_buf(lhs) |lbuf| {\n+            do unpack_slice(rhs) |rbuf, _rlen| {\n+                let dst = ptr::offset(lbuf, llen);\n+                ptr::memcpy(dst, rbuf, rlen);\n+            }\n+        }\n+        unsafe::set_len(lhs, llen + rlen);\n+    }\n+}\n+\n+/// Concatenate two strings together\n+#[inline(always)]\n+pure fn append(+lhs: str, rhs: str/&) -> str {\n+    let mut v <- lhs;\n+    unchecked {\n+        push_str(v, rhs);\n+    }\n+    ret v;\n+}\n+\n+\n /// Concatenate a vector of strings\n pure fn concat(v: &[const str]) -> str {\n     let mut s: str = \"\";\n-    for vec::each(v) |ss| { s += ss; }\n+    for vec::each(v) |ss| { unchecked { push_str(s, ss) }; }\n     ret s;\n }\n \n /// Concatenate a vector of strings, placing a given separator between each\n pure fn connect(v: &[const str], sep: str) -> str {\n     let mut s = \"\", first = true;\n     for vec::each(v) |ss| {\n-        if first { first = false; } else { s += sep; }\n-        s += ss;\n+        if first { first = false; } else { unchecked { push_str(s, sep); } }\n+        unchecked { push_str(s, ss) };\n     }\n     ret s;\n }\n@@ -576,8 +606,8 @@ pure fn to_upper(s: str/&) -> str {\n pure fn replace(s: str, from: str, to: str) -> str {\n     let mut result = \"\", first = true;\n     do iter_between_matches(s, from) |start, end| {\n-        if first { first = false; } else { result += to; }\n-        unsafe { result += unsafe::slice_bytes(s, start, end); }\n+        if first { first = false; } else { unchecked {push_str(result, to); }}\n+        unsafe { push_str(result, unsafe::slice_bytes(s, start, end)); }\n     }\n     result\n }\n@@ -1694,7 +1724,7 @@ pure fn escape_default(s: str/&) -> str {\n     let mut out: str = \"\";\n     unchecked {\n         reserve_at_least(out, str::len(s));\n-        chars_iter(s, |c| out += char::escape_default(c));\n+        chars_iter(s, |c| push_str(out, char::escape_default(c)));\n     }\n     ret out;\n }\n@@ -1704,7 +1734,7 @@ pure fn escape_unicode(s: str/&) -> str {\n     let mut out: str = \"\";\n     unchecked {\n         reserve_at_least(out, str::len(s));\n-        chars_iter(s, |c| out += char::escape_unicode(c));\n+        chars_iter(s, |c| push_str(out, char::escape_unicode(c)));\n     }\n     ret out;\n }\n@@ -1863,6 +1893,12 @@ impl extensions for str {\n     /// Returns a string with trailing whitespace removed\n     #[inline]\n     fn trim_right() -> str { trim_right(self) }\n+\n+    /// Concatenate two strings: operator version\n+    #[inline(always)]\n+    pure fn +(rhs: str/&) -> str {\n+        append(self, rhs)\n+    }\n }\n \n /// Extension methods for strings\n@@ -2311,13 +2347,13 @@ mod tests {\n             fn a_million_letter_a() -> str {\n                 let mut i = 0;\n                 let mut rs = \"\";\n-                while i < 100000 { rs += \"aaaaaaaaaa\"; i += 1; }\n+                while i < 100000 { push_str(rs, \"aaaaaaaaaa\"); i += 1; }\n                 ret rs;\n             }\n             fn half_a_million_letter_a() -> str {\n                 let mut i = 0;\n                 let mut rs = \"\";\n-                while i < 100000 { rs += \"aaaaa\"; i += 1; }\n+                while i < 100000 { push_str(rs, \"aaaaa\"); i += 1; }\n                 ret rs;\n             }\n             assert eq(half_a_million_letter_a(),\n@@ -2422,13 +2458,13 @@ mod tests {\n         fn a_million_letter_X() -> str {\n             let mut i = 0;\n             let mut rs = \"\";\n-            while i < 100000 { rs += \"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\"; i += 1; }\n+            while i < 100000 { push_str(rs, \"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\"); i += 1; }\n             ret rs;\n         }\n         fn half_a_million_letter_X() -> str {\n             let mut i = 0;\n             let mut rs = \"\";\n-            while i < 100000 { rs += \"\u534e\u534e\u534e\u534e\u534e\"; i += 1; }\n+            while i < 100000 { push_str(rs, \"\u534e\u534e\u534e\u534e\u534e\"); i += 1; }\n             ret rs;\n         }\n         assert eq(half_a_million_letter_X(),"}, {"sha": "c54a8887f84651d6c31ba18f74a6f9d734b323aa", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -61,10 +61,10 @@ impl <A: to_str> of to_str for ~[A] {\n         let mut acc = \"[\", first = true;\n         for vec::each(self) |elt| {\n             if first { first = false; }\n-            else { acc += \", \"; }\n-            acc += elt.to_str();\n+            else { str::push_str(acc, \", \"); }\n+            str::push_str(acc, elt.to_str());\n         }\n-        acc += \"]\";\n+        str::push_char(acc, ']');\n         acc\n     }\n }"}, {"sha": "fba8d54cfba01736810f4ce3c398d25690838ec5", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -2963,8 +2963,8 @@ fn is_binopable(_cx: ctxt, ty: t, op: ast::binop) -> bool {\n     /*bool*/    ~[f, f, f, f, t, t, t, t],\n     /*int*/     ~[t, t, t, t, t, t, t, f],\n     /*float*/   ~[t, t, t, f, t, t, f, f],\n-    /*str*/     ~[t, f, f, f, t, t, f, f],\n-    /*vec*/     ~[t, f, f, f, t, t, f, f],\n+    /*str*/     ~[f, f, f, f, t, t, f, f],\n+    /*vec*/     ~[f, f, f, f, t, t, f, f],\n     /*bot*/     ~[f, f, f, f, t, t, f, f],\n     /*struct*/  ~[t, t, t, t, t, t, t, t]];\n "}, {"sha": "781e3a279b194871eca4ae4debbe9423656546a9", "filename": "src/test/run-pass/module-polymorphism.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -42,4 +42,4 @@ mod f32 {\n     #[path = \"template.rs\"]\n     mod template;\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "bbca74cd397ccba9ed6703a51ef17445b7105141", "filename": "src/test/run-pass/module-polymorphism4.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ee0177b9082ffc2521141c615d332a994708c8a2/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc?ref=ee0177b9082ffc2521141c615d332a994708c8a2", "patch": "@@ -1,5 +1,3 @@\n-#[no_core];\n-\n \n #[path = \"module-polymorphism4-files\"]\n mod cat {"}]}