{"sha": "da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMmNhMDFlYmFhYWFhNDdhYTA5YzU4NDhjNTNiMTQ1YTY4YWY4ZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T07:30:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T07:30:30Z"}, "message": "Handle macro-generated expressions slightly less wrong", "tree": {"sha": "bed1d8bfef7cd3c42917d30fae2d8002dd00c38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed1d8bfef7cd3c42917d30fae2d8002dd00c38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "html_url": "https://github.com/rust-lang/rust/commit/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a73b7bb3f6af134c781cba1126350749c5a91144", "url": "https://api.github.com/repos/rust-lang/rust/commits/a73b7bb3f6af134c781cba1126350749c5a91144", "html_url": "https://github.com/rust-lang/rust/commit/a73b7bb3f6af134c781cba1126350749c5a91144"}], "stats": {"total": 110, "additions": 62, "deletions": 48}, "files": [{"sha": "afba66069869cae546fe146eab863d4fcc3c81cc", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "patch": "@@ -166,6 +166,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n \n #[cfg(test)]\n mod tests {\n+    use hir_expand::Source;\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, extract_offset};\n@@ -189,7 +190,10 @@ mod tests {\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n \n         let scopes = analyzer.scopes();\n-        let expr_id = analyzer.body_source_map().node_expr(&marker.into()).unwrap();\n+        let expr_id = analyzer\n+            .body_source_map()\n+            .node_expr(Source { file_id: file_id.into(), ast: &marker.into() })\n+            .unwrap();\n         let scope = scopes.scope_for(expr_id);\n \n         let actual = scopes"}, {"sha": "4b561c63dea7774aaa18fffeabe2189d3907142b", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "patch": "@@ -145,7 +145,8 @@ impl Local {\n             Some(res)\n         })?;\n         let (_body, source_map) = db.body_with_source_map(parent);\n-        let pat_id = source_map.node_pat(&src.ast.into())?;\n+        let src = src.map(ast::Pat::from);\n+        let pat_id = source_map.node_pat(src.as_ref())?;\n         Some(Local { parent, pat_id })\n     }\n }"}, {"sha": "88eed1137f7db98d07cad5c90d6b8174229246d5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "patch": "@@ -7,8 +7,11 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use hir_def::path::known;\n-use hir_expand::name::AsName;\n+use hir_def::{\n+    expr::{ExprId, PatId},\n+    path::known,\n+};\n+use hir_expand::{name::AsName, Source};\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -93,6 +96,8 @@ fn def_with_body_from_child_node(\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n+    // FIXME: this doesn't handle macros at all\n+    file_id: FileId,\n     resolver: Resolver,\n     body_owner: Option<DefWithBody>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n@@ -147,7 +152,7 @@ impl SourceAnalyzer {\n             let source_map = def.body_source_map(db);\n             let scopes = db.expr_scopes(def);\n             let scope = match offset {\n-                None => scope_for(&scopes, &source_map, &node),\n+                None => scope_for(&scopes, &source_map, file_id.into(), &node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, file_id.into(), offset),\n             };\n             let resolver = expr::resolver_for_scope(db, def, scope);\n@@ -157,6 +162,7 @@ impl SourceAnalyzer {\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n+                file_id,\n             }\n         } else {\n             SourceAnalyzer {\n@@ -168,17 +174,28 @@ impl SourceAnalyzer {\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n+                file_id,\n             }\n         }\n     }\n \n+    fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n+        let src = Source { file_id: self.file_id.into(), ast: expr };\n+        self.body_source_map.as_ref()?.node_expr(src)\n+    }\n+\n+    fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n+        let src = Source { file_id: self.file_id.into(), ast: pat };\n+        self.body_source_map.as_ref()?.node_pat(src)\n+    }\n+\n     pub fn type_of(&self, _db: &impl HirDatabase, expr: &ast::Expr) -> Option<crate::Ty> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(expr)?;\n+        let expr_id = self.expr_id(expr)?;\n         Some(self.infer.as_ref()?[expr_id].clone())\n     }\n \n     pub fn type_of_pat(&self, _db: &impl HirDatabase, pat: &ast::Pat) -> Option<crate::Ty> {\n-        let pat_id = self.body_source_map.as_ref()?.node_pat(pat)?;\n+        let pat_id = self.pat_id(pat)?;\n         Some(self.infer.as_ref()?[pat_id].clone())\n     }\n \n@@ -191,22 +208,22 @@ impl SourceAnalyzer {\n     }\n \n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&call.clone().into())?;\n+        let expr_id = self.expr_id(&call.clone().into())?;\n         self.infer.as_ref()?.method_resolution(expr_id)\n     }\n \n     pub fn resolve_field(&self, field: &ast::FieldExpr) -> Option<crate::StructField> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&field.clone().into())?;\n+        let expr_id = self.expr_id(&field.clone().into())?;\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n     pub fn resolve_record_literal(&self, record_lit: &ast::RecordLit) -> Option<crate::VariantDef> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&record_lit.clone().into())?;\n+        let expr_id = self.expr_id(&record_lit.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n     }\n \n     pub fn resolve_record_pattern(&self, record_pat: &ast::RecordPat) -> Option<crate::VariantDef> {\n-        let pat_id = self.body_source_map.as_ref()?.node_pat(&record_pat.clone().into())?;\n+        let pat_id = self.pat_id(&record_pat.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n     }\n \n@@ -264,13 +281,13 @@ impl SourceAnalyzer {\n \n     pub fn resolve_path(&self, db: &impl HirDatabase, path: &ast::Path) -> Option<PathResolution> {\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n-            let expr_id = self.body_source_map.as_ref()?.node_expr(&path_expr.into())?;\n+            let expr_id = self.expr_id(&path_expr.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n                 return Some(PathResolution::AssocItem(assoc));\n             }\n         }\n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n-            let pat_id = self.body_source_map.as_ref()?.node_pat(&path_pat.into())?;\n+            let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc));\n             }\n@@ -285,7 +302,7 @@ impl SourceAnalyzer {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, name_ref.syntax());\n+        let scope = scope_for(scopes, source_map, self.file_id.into(), name_ref.syntax());\n         let ret = scopes\n             .scope_chain(scope)\n             .flat_map(|scope| scopes.entries(scope).iter())\n@@ -418,11 +435,12 @@ impl SourceAnalyzer {\n fn scope_for(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n+    file_id: HirFileId,\n     node: &SyntaxNode,\n ) -> Option<ScopeId> {\n     node.ancestors()\n         .filter_map(ast::Expr::cast)\n-        .filter_map(|it| source_map.node_expr(&it))\n+        .filter_map(|it| source_map.node_expr(Source { file_id, ast: &it }))\n         .find_map(|it| scopes.scope_for(it))\n }\n "}, {"sha": "75bba31c2192e63ea6f9d48bd2680bd0424fb160", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "patch": "@@ -21,7 +21,6 @@ use crate::{\n \n pub struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n-    original_file_id: HirFileId,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n     module: ModuleId,\n@@ -31,13 +30,7 @@ impl Expander {\n     pub fn new(db: &impl DefDatabase2, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n-        Expander {\n-            crate_def_map,\n-            original_file_id: current_file_id,\n-            current_file_id,\n-            hygiene,\n-            module,\n-        }\n+        Expander { crate_def_map, current_file_id, hygiene, module }\n     }\n \n     fn expand(\n@@ -82,11 +75,6 @@ impl Expander {\n         std::mem::forget(mark);\n     }\n \n-    // FIXME: remove this.\n-    fn is_in_expansion(&self) -> bool {\n-        self.original_file_id != self.current_file_id\n-    }\n-\n     fn to_source<T>(&self, ast: T) -> Source<T> {\n         Source { file_id: self.current_file_id, ast }\n     }\n@@ -147,9 +135,9 @@ pub type PatSource = Source<PatPtr>;\n /// this properly for macros.\n #[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n-    expr_map: FxHashMap<ExprPtr, ExprId>,\n+    expr_map: FxHashMap<ExprSource, ExprId>,\n     expr_map_back: ArenaMap<ExprId, ExprSource>,\n-    pat_map: FxHashMap<PatPtr, PatId>,\n+    pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, PatSource>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n }\n@@ -202,16 +190,18 @@ impl BodySourceMap {\n         self.expr_map_back.get(expr).copied()\n     }\n \n-    pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n-        self.expr_map.get(&Either::A(AstPtr::new(node))).cloned()\n+    pub fn node_expr(&self, node: Source<&ast::Expr>) -> Option<ExprId> {\n+        let src = node.map(|it| Either::A(AstPtr::new(it)));\n+        self.expr_map.get(&src).cloned()\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Option<PatSource> {\n         self.pat_map_back.get(pat).copied()\n     }\n \n-    pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n-        self.pat_map.get(&Either::A(AstPtr::new(node))).cloned()\n+    pub fn node_pat(&self, node: Source<&ast::Pat>) -> Option<PatId> {\n+        let src = node.map(|it| Either::A(AstPtr::new(it)));\n+        self.pat_map.get(&src).cloned()\n     }\n \n     pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {"}, {"sha": "f6d79ddf0587591290c81f883f0b85acc7ecf473", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "patch": "@@ -94,10 +94,9 @@ where\n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::A(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if !self.expander.is_in_expansion() {\n-            self.source_map.expr_map.insert(ptr, id);\n-        }\n-        self.source_map.expr_map_back.insert(id, self.expander.to_source(ptr));\n+        let src = self.expander.to_source(ptr);\n+        self.source_map.expr_map.insert(src, id);\n+        self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n@@ -108,18 +107,16 @@ where\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::B(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if !self.expander.is_in_expansion() {\n-            self.source_map.expr_map.insert(ptr, id);\n-        }\n-        self.source_map.expr_map_back.insert(id, self.expander.to_source(ptr));\n+        let src = self.expander.to_source(ptr);\n+        self.source_map.expr_map.insert(src, id);\n+        self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let id = self.body.pats.alloc(pat);\n-        if !self.expander.is_in_expansion() {\n-            self.source_map.pat_map.insert(ptr, id);\n-        }\n-        self.source_map.pat_map_back.insert(id, self.expander.to_source(ptr));\n+        let src = self.expander.to_source(ptr);\n+        self.source_map.pat_map.insert(src, id);\n+        self.source_map.pat_map_back.insert(id, src);\n         id\n     }\n \n@@ -277,7 +274,8 @@ where\n             ast::Expr::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                self.source_map.expr_map.insert(Either::A(syntax_ptr), inner);\n+                let src = self.expander.to_source(Either::A(syntax_ptr));\n+                self.source_map.expr_map.insert(src, inner);\n                 inner\n             }\n             ast::Expr::ReturnExpr(e) => {"}, {"sha": "930789b0fe2a5bc6ab42b9978c332dffbceecbc9", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "patch": "@@ -223,7 +223,7 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub struct Source<T> {\n     pub file_id: HirFileId,\n     pub ast: T,\n@@ -233,6 +233,9 @@ impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }\n+    pub fn as_ref(&self) -> Source<&T> {\n+        Source { file_id: self.file_id, ast: &self.ast }\n+    }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n     }"}]}