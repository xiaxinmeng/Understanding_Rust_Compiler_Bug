{"sha": "7bc29c62d033c529ca8ec47fcd25842223a9bbad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzI5YzYyZDAzM2M1MjljYThlYzQ3ZmNkMjU4NDIyMjNhOWJiYWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-21T20:25:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-27T03:35:52Z"}, "message": "libcore: Add explicit self to all overloaded operators but Add and Index. r=brson", "tree": {"sha": "e055f2ad72c2d081a64a1eeb4fd1463cab2003b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e055f2ad72c2d081a64a1eeb4fd1463cab2003b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc29c62d033c529ca8ec47fcd25842223a9bbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc29c62d033c529ca8ec47fcd25842223a9bbad", "html_url": "https://github.com/rust-lang/rust/commit/7bc29c62d033c529ca8ec47fcd25842223a9bbad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc29c62d033c529ca8ec47fcd25842223a9bbad/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0268b693ad1ff0f319d189b081c26576b7d535", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0268b693ad1ff0f319d189b081c26576b7d535", "html_url": "https://github.com/rust-lang/rust/commit/de0268b693ad1ff0f319d189b081c26576b7d535"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "87c165266f82daaac8c3a3d8b218eecaef09bee2", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=7bc29c62d033c529ca8ec47fcd25842223a9bbad", "patch": "@@ -35,52 +35,52 @@ pub trait Add<RHS,Result> {\n \n #[lang=\"sub\"]\n pub trait Sub<RHS,Result> {\n-    pure fn sub(rhs: &RHS) -> Result;\n+    pure fn sub(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"mul\"]\n pub trait Mul<RHS,Result> {\n-    pure fn mul(rhs: &RHS) -> Result;\n+    pure fn mul(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"div\"]\n pub trait Div<RHS,Result> {\n-    pure fn div(rhs: &RHS) -> Result;\n+    pure fn div(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"modulo\"]\n pub trait Modulo<RHS,Result> {\n-    pure fn modulo(rhs: &RHS) -> Result;\n+    pure fn modulo(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"neg\"]\n pub trait Neg<Result> {\n-    pure fn neg() -> Result;\n+    pure fn neg(&self) -> Result;\n }\n \n #[lang=\"bitand\"]\n pub trait BitAnd<RHS,Result> {\n-    pure fn bitand(rhs: &RHS) -> Result;\n+    pure fn bitand(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"bitor\"]\n pub trait BitOr<RHS,Result> {\n-    pure fn bitor(rhs: &RHS) -> Result;\n+    pure fn bitor(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"bitxor\"]\n pub trait BitXor<RHS,Result> {\n-    pure fn bitxor(rhs: &RHS) -> Result;\n+    pure fn bitxor(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"shl\"]\n pub trait Shl<RHS,Result> {\n-    pure fn shl(rhs: &RHS) -> Result;\n+    pure fn shl(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"shr\"]\n pub trait Shr<RHS,Result> {\n-    pure fn shr(rhs: &RHS) -> Result;\n+    pure fn shr(&self, rhs: &RHS) -> Result;\n }\n \n #[lang=\"index\"]"}, {"sha": "5f27e8665dd4044dd0ae79050f1e859a70fa2dfd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7bc29c62d033c529ca8ec47fcd25842223a9bbad", "patch": "@@ -2041,25 +2041,25 @@ fn remove_copyable(k: Kind) -> Kind {\n }\n \n impl Kind : ops::BitAnd<Kind,Kind> {\n-    pure fn bitand(other: &Kind) -> Kind {\n+    pure fn bitand(&self, other: &Kind) -> Kind {\n         unsafe {\n-            lower_kind(self, (*other))\n+            lower_kind(*self, *other)\n         }\n     }\n }\n \n impl Kind : ops::BitOr<Kind,Kind> {\n-    pure fn bitor(other: &Kind) -> Kind {\n+    pure fn bitor(&self, other: &Kind) -> Kind {\n         unsafe {\n-            raise_kind(self, (*other))\n+            raise_kind(*self, *other)\n         }\n     }\n }\n \n impl Kind : ops::Sub<Kind,Kind> {\n-    pure fn sub(other: &Kind) -> Kind {\n+    pure fn sub(&self, other: &Kind) -> Kind {\n         unsafe {\n-            kind_(*self & !*(*other))\n+            kind_(**self & !**other)\n         }\n     }\n }\n@@ -2309,7 +2309,7 @@ fn type_kind(cx: ctxt, ty: t) -> Kind {\n     // arbitrary threshold to prevent by-value copying of big records\n     if kind_is_safe_for_default_mode(result) {\n         if type_size(cx, ty) > 4 {\n-            result -= kind_(KIND_MASK_DEFAULT_MODE);\n+            result = result - kind_(KIND_MASK_DEFAULT_MODE);\n         }\n     }\n "}, {"sha": "235a174c838f0b1d3f67444b807f82b7e3e0be5d", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=7bc29c62d033c529ca8ec47fcd25842223a9bbad", "patch": "@@ -3,7 +3,7 @@ pub trait MyNum : Add<self,self>, Sub<self,self>, Mul<self,self> {\n \n pub impl int : MyNum {\n     pure fn add(other: &int) -> int { self + *other }\n-    pure fn sub(other: &int) -> int { self - *other }\n-    pure fn mul(other: &int) -> int { self * *other }\n+    pure fn sub(&self, other: &int) -> int { *self - *other }\n+    pure fn mul(&self, other: &int) -> int { *self * *other }\n }\n "}, {"sha": "67054d3b04383afa1dfd2e6d91ba58bdb7c31671", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=7bc29c62d033c529ca8ec47fcd25842223a9bbad", "patch": "@@ -24,7 +24,7 @@ struct cmplx {\n }\n \n impl cmplx : ops::Mul<cmplx,cmplx> {\n-    pure fn mul(x: &cmplx) -> cmplx {\n+    pure fn mul(&self, x: &cmplx) -> cmplx {\n         cmplx {\n             re: self.re*(*x).re - self.im*(*x).im,\n             im: self.re*(*x).im + self.im*(*x).re"}, {"sha": "91d4a13a82981f9a44bf92dcebf719c2174ef745", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=7bc29c62d033c529ca8ec47fcd25842223a9bbad", "patch": "@@ -13,13 +13,13 @@ impl Point : ops::Add<Point,Point> {\n }\n \n impl Point : ops::Sub<Point,Point> {\n-    pure fn sub(other: &Point) -> Point {\n+    pure fn sub(&self, other: &Point) -> Point {\n         Point {x: self.x - (*other).x, y: self.y - (*other).y}\n     }\n }\n \n impl Point : ops::Neg<Point> {\n-    pure fn neg() -> Point {\n+    pure fn neg(&self) -> Point {\n         Point {x: -self.x, y: -self.y}\n     }\n }\n@@ -40,7 +40,7 @@ impl Point : cmp::Eq {\n fn main() {\n     let mut p = Point {x: 10, y: 20};\n     p += Point {x: 101, y: 102};\n-    p -= Point {x: 100, y: 100};\n+    p = p - Point {x: 100, y: 100};\n     assert p + Point {x: 5, y: 5} == Point {x: 16, y: 27};\n     assert -p == Point {x: -11, y: -22};\n     assert p[true] == 11;"}, {"sha": "f8bf9faa186f616c4b400952a570894dd5846ee8", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc29c62d033c529ca8ec47fcd25842223a9bbad/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=7bc29c62d033c529ca8ec47fcd25842223a9bbad", "patch": "@@ -3,8 +3,8 @@ trait MyNum : Add<self,self>, Sub<self,self>, Mul<self,self> {\n \n impl int : MyNum {\n     pure fn add(other: &int) -> int { self + *other }\n-    pure fn sub(other: &int) -> int { self - *other }\n-    pure fn mul(other: &int) -> int { self * *other }\n+    pure fn sub(&self, other: &int) -> int { *self - *other }\n+    pure fn mul(&self, other: &int) -> int { *self * *other }\n }\n \n fn f<T:Copy MyNum>(x: T, y: T) -> (T, T, T) {"}]}