{"sha": "66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YTliN2Q1YmQ3MjU5NjBiNjdkZWIzZTM3OTNlMTlhMGFkM2NlYTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-16T21:54:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-17T21:57:56Z"}, "message": "libsyntax: Remove some multi-gigabyte clones that were preventing bootstrapping on Windows.", "tree": {"sha": "04469ea1f2345b7cb9d2e0399bd7cf68c48cf4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04469ea1f2345b7cb9d2e0399bd7cf68c48cf4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "html_url": "https://github.com/rust-lang/rust/commit/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4bf173f824da0fc8c6813191e3b61e871117ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4bf173f824da0fc8c6813191e3b61e871117ba", "html_url": "https://github.com/rust-lang/rust/commit/dc4bf173f824da0fc8c6813191e3b61e871117ba"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "62c1f6631d2dc47e2a15fae7bec1889266f36e85", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -429,6 +429,18 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n     }\n }\n \n+impl<S:Encoder,T:Encodable<S>> Encodable<S> for @mut T {\n+    fn encode(&self, s: &mut S) {\n+        (**self).encode(s)\n+    }\n+}\n+\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for @mut T {\n+    fn decode(d: &mut D) -> @mut T {\n+        @mut Decodable::decode(d)\n+    }\n+}\n+\n impl<'self, S:Encoder,T:Encodable<S>> Encodable<S> for &'self [T] {\n     fn encode(&self, s: &mut S) {\n         do s.emit_seq(self.len()) |s| {\n@@ -650,18 +662,6 @@ impl<\n     }\n }\n \n-impl<S: Encoder, T: Encodable<S>> Encodable<S> for @mut DList<T> {\n-    fn encode(&self, s: &mut S) {\n-        do s.emit_seq(self.len()) |s| {\n-            let mut i = 0;\n-            for self.iter().advance |e| {\n-                s.emit_seq_elt(i, |s| e.encode(s));\n-                i += 1;\n-            }\n-        }\n-    }\n-}\n-\n impl<D:Decoder,T:Decodable<D>> Decodable<D> for DList<T> {\n     fn decode(d: &mut D) -> DList<T> {\n         let mut list = DList::new();"}, {"sha": "60df31fd4ca8c3318f735379964bc08c4cd71c51", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -319,6 +319,13 @@ impl<A:IterBytes> IterBytes for @A {\n     }\n }\n \n+impl<A:IterBytes> IterBytes for @mut A {\n+    #[inline]\n+    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n+        (**self).iter_bytes(lsb0, f)\n+    }\n+}\n+\n impl<A:IterBytes> IterBytes for ~A {\n     #[inline]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {"}, {"sha": "7fa2c2700c9388fcd047be650bf5f9db07d7117e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -505,13 +505,13 @@ pub enum token_tree {\n     tt_tok(span, ::parse::token::Token),\n     // a delimited sequence (the delimiters appear as the first\n     // and last elements of the vector)\n-    tt_delim(~[token_tree]),\n+    tt_delim(@mut ~[token_tree]),\n     // These only make sense for right-hand-sides of MBE macros:\n \n     // a kleene-style repetition sequence with a span, a tt_forest,\n     // an optional separator (?), and a boolean where true indicates\n     // zero or more (*), and false indicates one or more (+).\n-    tt_seq(span, ~[token_tree], Option<::parse::token::Token>, bool),\n+    tt_seq(span, @mut ~[token_tree], Option<::parse::token::Token>, bool),\n \n     // a syntactic variable that will be filled in by macro expansion.\n     tt_nonterminal(span, ident)"}, {"sha": "f489583dc6f4edd2d16dc57793fbcc166ebb380a", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -25,7 +25,7 @@ pub fn expand_syntax_ext(cx: @ExtCtxt,\n     cx.print_backtrace();\n     io::stdout().write_line(\n         print::pprust::tt_to_str(\n-            &ast::tt_delim(tt.to_owned()),\n+            &ast::tt_delim(@mut tt.to_owned()),\n             get_ident_interner()));\n \n     //trivial expression"}, {"sha": "d8ac2ede29e25bf9532d67baf82ec2b6304a6629", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -605,7 +605,7 @@ fn mk_tt(cx: @ExtCtxt, sp: span, tt: &ast::token_tree)\n             ~[cx.stmt_expr(e_push)]\n         }\n \n-        ast::tt_delim(ref tts) => mk_tts(cx, sp, *tts),\n+        ast::tt_delim(ref tts) => mk_tts(cx, sp, **tts),\n         ast::tt_seq(*) => fail!(\"tt_seq in quote!\"),\n \n         ast::tt_nonterminal(sp, ident) => {"}, {"sha": "c20e35c299afd59cffdc947e33f30d80bdc02d41", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -85,7 +85,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n             io::println(fmt!(\"%s! { %s }\",\n                              cx.str_of(name),\n                              print::pprust::tt_to_str(\n-                                 &ast::tt_delim(arg.to_owned()),\n+                                 &ast::tt_delim(@mut arg.to_owned()),\n                                  get_ident_interner())));\n         }\n "}, {"sha": "16019b2144833fc3221280bd8d1a31afa99bcfe0", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -219,7 +219,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n         match r.stack.forest[r.stack.idx].clone() {\n           tt_delim(tts) => {\n             r.stack = @mut TtFrame {\n-                forest: @mut tts,\n+                forest: tts,\n                 idx: 0u,\n                 dotdotdoted: false,\n                 sep: None,\n@@ -235,7 +235,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n           }\n           tt_seq(sp, tts, sep, zerok) => {\n             // XXX(pcwalton): Bad copy.\n-            let t = tt_seq(sp, tts.clone(), sep.clone(), zerok);\n+            let t = tt_seq(sp, tts, sep.clone(), zerok);\n             match lockstep_iter_size(&t, r) {\n               lis_unconstrained => {\n                 r.sp_diag.span_fatal(\n@@ -263,7 +263,7 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                     r.repeat_len.push(len);\n                     r.repeat_idx.push(0u);\n                     r.stack = @mut TtFrame {\n-                        forest: @mut tts,\n+                        forest: tts,\n                         idx: 0u,\n                         dotdotdoted: true,\n                         sep: sep,"}, {"sha": "cfd858eed4716ad986169dcead0ae727cfe017fe", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -131,10 +131,10 @@ fn fold_tts(tts : &[token_tree], fld: @ast_fold) -> ~[token_tree] {\n             tt_tok(span, ref tok) =>\n             tt_tok(span,maybe_fold_ident(tok,fld)),\n             tt_delim(ref tts) =>\n-            tt_delim(fold_tts(*tts,fld)),\n+            tt_delim(@mut fold_tts(**tts, fld)),\n             tt_seq(span, ref pattern, ref sep, is_optional) =>\n             tt_seq(span,\n-                   fold_tts(*pattern,fld),\n+                   @mut fold_tts(**pattern, fld),\n                    sep.map(|tok|maybe_fold_ident(tok,fld)),\n                    is_optional),\n             tt_nonterminal(sp,ref ident) =>"}, {"sha": "42951543cd25ca4fd69986064a1e9391e2819bc3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a9b7d5bd725960b67deb3e3793e19a0ad3cea5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=66a9b7d5bd725960b67deb3e3793e19a0ad3cea5", "patch": "@@ -1925,7 +1925,7 @@ impl Parser {\n                     };\n                     tt_seq(\n                         mk_sp(sp.lo, p.span.hi),\n-                        seq,\n+                        @mut seq,\n                         s,\n                         z\n                     )\n@@ -1950,21 +1950,20 @@ impl Parser {\n             }\n             token::LPAREN | token::LBRACE | token::LBRACKET => {\n                 let close_delim = token::flip_delimiter(&*self.token);\n-                tt_delim(\n-                    vec::append(\n-                        // the open delimiter:\n-                        ~[parse_any_tt_tok(self)],\n-                        vec::append(\n-                            self.parse_seq_to_before_end(\n-                                &close_delim,\n-                                seq_sep_none(),\n-                                |p| p.parse_token_tree()\n-                            ),\n-                            // the close delimiter:\n-                            [parse_any_tt_tok(self)]\n-                        )\n-                    )\n-                )\n+\n+                // Parse the open delimiter.\n+                let mut result = ~[parse_any_tt_tok(self)];\n+\n+                let trees =\n+                    self.parse_seq_to_before_end(&close_delim,\n+                                                 seq_sep_none(),\n+                                                 |p| p.parse_token_tree());\n+                result.push_all_move(trees);\n+\n+                // Parse the close delimiter.\n+                result.push(parse_any_tt_tok(self));\n+\n+                tt_delim(@mut result)\n             }\n             _ => parse_non_delim_tt_tok(self)\n         }"}]}