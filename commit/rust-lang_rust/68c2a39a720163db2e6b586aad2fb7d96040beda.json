{"sha": "68c2a39a720163db2e6b586aad2fb7d96040beda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YzJhMzlhNzIwMTYzZGIyZTZiNTg2YWFkMmZiN2Q5NjA0MGJlZGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-26T12:07:22Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-31T00:31:41Z"}, "message": "free RegionBoundPairs earlier and avoid normalizing twice\n\nNormalization results are memoized, so this may not be worth it, but it\nseems easy enough to do.", "tree": {"sha": "6d9c98b4a2970651c23796498ad8420fa65ffcaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9c98b4a2970651c23796498ad8420fa65ffcaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68c2a39a720163db2e6b586aad2fb7d96040beda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68c2a39a720163db2e6b586aad2fb7d96040beda", "html_url": "https://github.com/rust-lang/rust/commit/68c2a39a720163db2e6b586aad2fb7d96040beda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68c2a39a720163db2e6b586aad2fb7d96040beda/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490928f7099b8b5523eb8708919798e82006b054", "url": "https://api.github.com/repos/rust-lang/rust/commits/490928f7099b8b5523eb8708919798e82006b054", "html_url": "https://github.com/rust-lang/rust/commit/490928f7099b8b5523eb8708919798e82006b054"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "e4b1aacd34f71fad8306bf6e1efa98696d147a66", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/68c2a39a720163db2e6b586aad2fb7d96040beda/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68c2a39a720163db2e6b586aad2fb7d96040beda/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=68c2a39a720163db2e6b586aad2fb7d96040beda", "patch": "@@ -53,6 +53,18 @@ crate struct UniversalRegionRelations<'tcx> {\n /// our special inference variable there, we would mess that up.\n type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n \n+/// As part of computing the free region relations, we also have to\n+/// normalize the input-output types, which we then need later. So we\n+/// return those.  This vector consists of first the input types and\n+/// then the output type as the last element.\n+type NormalizedInputsAndOutput<'tcx> = Vec<Ty<'tcx>>;\n+\n+crate struct CreateResult<'tcx> {\n+    crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n+    crate region_bound_pairs: RegionBoundPairs<'tcx>,\n+    crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n+}\n+\n crate fn create(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     mir_def_id: DefId,\n@@ -62,7 +74,7 @@ crate fn create(\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n-) -> (Rc<UniversalRegionRelations<'tcx>>, RegionBoundPairs<'tcx>) {\n+) -> CreateResult<'tcx> {\n     let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id).unwrap();\n     UniversalRegionRelationsBuilder {\n         infcx,\n@@ -215,7 +227,7 @@ struct UniversalRegionRelationsBuilder<'this, 'gcx: 'tcx, 'tcx: 'this> {\n }\n \n impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n-    crate fn create(mut self) -> (Rc<UniversalRegionRelations<'tcx>>, RegionBoundPairs<'tcx>) {\n+    crate fn create(mut self) -> CreateResult<'tcx> {\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -231,6 +243,8 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n         //   the `region_bound_pairs` and so forth.\n         // - After this is done, we'll process the constraints, once\n         //   the `relations` is built.\n+        let mut normalized_inputs_and_output =\n+            Vec::with_capacity(self.universal_regions.unnormalized_input_tys.len() + 1);\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n             .flat_map(|ty| {\n                 debug!(\"build: input_or_output={:?}\", ty);\n@@ -240,6 +254,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n                     .fully_perform(self.infcx)\n                     .unwrap_or_else(|_| bug!(\"failed to normalize {:?}\", ty));\n                 self.add_implied_bounds(ty);\n+                normalized_inputs_and_output.push(ty);\n                 constraints\n             })\n             .collect();\n@@ -280,7 +295,11 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n             ).convert_all(&data);\n         }\n \n-        (Rc::new(self.relations), self.region_bound_pairs)\n+        CreateResult {\n+            universal_region_relations: Rc::new(self.relations),\n+            region_bound_pairs: self.region_bound_pairs,\n+            normalized_inputs_and_output,\n+        }\n     }\n \n     /// Update the type of a single local, which should represent"}, {"sha": "af42667016780618e7d0854706ba51f9ea09546e", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/68c2a39a720163db2e6b586aad2fb7d96040beda/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68c2a39a720163db2e6b586aad2fb7d96040beda/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=68c2a39a720163db2e6b586aad2fb7d96040beda", "patch": "@@ -39,22 +39,24 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         mir_def_id: DefId,\n         universal_regions: &UniversalRegions<'tcx>,\n         universal_region_relations: &UniversalRegionRelations<'tcx>,\n+        normalized_inputs_and_output: &[Ty<'tcx>],\n     ) {\n         let tcx = self.infcx.tcx;\n \n-        let &UniversalRegions {\n-            unnormalized_output_ty,\n-            unnormalized_input_tys,\n-            ..\n-        } = universal_regions;\n+        let (&normalized_output_ty, normalized_input_tys) =\n+            normalized_inputs_and_output.split_last().unwrap();\n         let infcx = self.infcx;\n \n         // Equate expected input tys with those in the MIR.\n         let argument_locals = (1..).map(Local::new);\n-        for (&unnormalized_input_ty, local) in unnormalized_input_tys.iter().zip(argument_locals) {\n-            let input_ty = self.normalize(unnormalized_input_ty, Locations::All);\n+        for (&normalized_input_ty, local) in normalized_input_tys.iter().zip(argument_locals) {\n+            debug!(\n+                \"equate_inputs_and_outputs: normalized_input_ty = {:?}\",\n+                normalized_input_ty\n+            );\n+\n             let mir_input_ty = mir.local_decls[local].ty;\n-            self.equate_normalized_input_or_output(input_ty, mir_input_ty);\n+            self.equate_normalized_input_or_output(normalized_input_ty, mir_input_ty);\n         }\n \n         assert!(\n@@ -68,15 +70,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         // Return types are a bit more complex. They may contain existential `impl Trait`\n         // types.\n-        debug!(\n-            \"equate_inputs_and_outputs: unnormalized_output_ty={:?}\",\n-            unnormalized_output_ty\n-        );\n-        let output_ty = self.normalize(unnormalized_output_ty, Locations::All);\n-        debug!(\n-            \"equate_inputs_and_outputs: normalized output_ty={:?}\",\n-            output_ty\n-        );\n         let param_env = self.param_env;\n         let mir_output_ty = mir.local_decls[RETURN_PLACE].ty;\n         let anon_type_map =\n@@ -92,7 +85,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                 mir_def_id,\n                                 dummy_body_id,\n                                 param_env,\n-                                &output_ty,\n+                                &normalized_output_ty,\n                             ));\n                         debug!(\n                             \"equate_inputs_and_outputs: instantiated output_ty={:?}\",\n@@ -146,7 +139,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     self,\n                     Location::START,\n                     \"equate_inputs_and_outputs: `{:?}=={:?}` failed with `{:?}`\",\n-                    output_ty,\n+                    normalized_output_ty,\n                     mir_output_ty,\n                     terr\n                 );"}, {"sha": "a18e2368bf724d55b81f5f5afba76711e8d149d3", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68c2a39a720163db2e6b586aad2fb7d96040beda/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68c2a39a720163db2e6b586aad2fb7d96040beda/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=68c2a39a720163db2e6b586aad2fb7d96040beda", "patch": "@@ -17,7 +17,7 @@ use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::values::{RegionValueElements, LivenessValues};\n use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n-use borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n+use borrow_check::nll::type_check::free_region_relations::{CreateResult, UniversalRegionRelations};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::LocalWithRegion;\n use borrow_check::nll::ToRegionVid;\n@@ -132,7 +132,11 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         type_tests: Vec::default(),\n     };\n \n-    let (universal_region_relations, region_bound_pairs) = free_region_relations::create(\n+    let CreateResult {\n+        universal_region_relations,\n+        region_bound_pairs,\n+        normalized_inputs_and_output,\n+    } = free_region_relations::create(\n         infcx,\n         mir_def_id,\n         param_env,\n@@ -168,6 +172,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n                     mir_def_id,\n                     universal_regions,\n                     &universal_region_relations,\n+                    &normalized_inputs_and_output,\n                 );\n             },\n         );"}]}