{"sha": "68993b1f6cf94701ff420e51aa927c568ae7eef2", "node_id": "C_kwDOAAsO6NoAKDY4OTkzYjFmNmNmOTQ3MDFmZjQyMGU1MWFhOTI3YzU2OGFlN2VlZjI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-06T14:42:10Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-06T14:42:10Z"}, "message": "Small `transmute_float_to_int` cleanup", "tree": {"sha": "323cc28a0cd3b13b6657ff0b92ff6a3d73e3571b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/323cc28a0cd3b13b6657ff0b92ff6a3d73e3571b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68993b1f6cf94701ff420e51aa927c568ae7eef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68993b1f6cf94701ff420e51aa927c568ae7eef2", "html_url": "https://github.com/rust-lang/rust/commit/68993b1f6cf94701ff420e51aa927c568ae7eef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68993b1f6cf94701ff420e51aa927c568ae7eef2/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3403b3e7175936f694403767b93803df3e606fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3403b3e7175936f694403767b93803df3e606fc0", "html_url": "https://github.com/rust-lang/rust/commit/3403b3e7175936f694403767b93803df3e606fc0"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "d5ef86dc4e572703af49941486832c5c9bea462e", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/68993b1f6cf94701ff420e51aa927c568ae7eef2/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68993b1f6cf94701ff420e51aa927c568ae7eef2/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=68993b1f6cf94701ff420e51aa927c568ae7eef2", "patch": "@@ -15,7 +15,7 @@ pub(super) fn check<'tcx>(\n     e: &'tcx Expr<'_>,\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n-    arg: &'tcx Expr<'_>,\n+    mut arg: &'tcx Expr<'_>,\n     const_context: bool,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n@@ -26,37 +26,36 @@ pub(super) fn check<'tcx>(\n                 e.span,\n                 &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n                 |diag| {\n-                    let mut expr = arg;\n-                    let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n+                    let mut sugg = sugg::Sugg::hir(cx, arg, \"..\");\n \n-                    if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n-                        expr = inner_expr;\n+                    if let ExprKind::Unary(UnOp::Neg, inner_expr) = &arg.kind {\n+                        arg = inner_expr;\n                     }\n \n                     if_chain! {\n                         // if the expression is a float literal and it is unsuffixed then\n                         // add a suffix so the suggestion is valid and unambiguous\n-                        if let ExprKind::Lit(lit) = &expr.kind;\n+                        if let ExprKind::Lit(lit) = &arg.kind;\n                         if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n                         then {\n-                            let op = format!(\"{}{}\", arg, float_ty.name_str()).into();\n-                            match arg {\n-                                sugg::Sugg::MaybeParen(_) => arg = sugg::Sugg::MaybeParen(op),\n-                                _ => arg = sugg::Sugg::NonParen(op)\n+                            let op = format!(\"{}{}\", sugg, float_ty.name_str()).into();\n+                            match sugg {\n+                                sugg::Sugg::MaybeParen(_) => sugg = sugg::Sugg::MaybeParen(op),\n+                                _ => sugg = sugg::Sugg::NonParen(op)\n                             }\n                         }\n                     }\n \n-                    arg = sugg::Sugg::NonParen(format!(\"{}.to_bits()\", arg.maybe_par()).into());\n+                    sugg = sugg::Sugg::NonParen(format!(\"{}.to_bits()\", sugg.maybe_par()).into());\n \n                     // cast the result of `to_bits` if `to_ty` is signed\n-                    arg = if let ty::Int(int_ty) = to_ty.kind() {\n-                        arg.as_ty(int_ty.name_str().to_string())\n+                    sugg = if let ty::Int(int_ty) = to_ty.kind() {\n+                        sugg.as_ty(int_ty.name_str().to_string())\n                     } else {\n-                        arg\n+                        sugg\n                     };\n \n-                    diag.span_suggestion(e.span, \"consider using\", arg.to_string(), Applicability::Unspecified);\n+                    diag.span_suggestion(e.span, \"consider using\", sugg.to_string(), Applicability::Unspecified);\n                 },\n             );\n             true"}]}