{"sha": "74e35d270067afff72034312065c48e6d8cfba67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZTM1ZDI3MDA2N2FmZmY3MjAzNDMxMjA2NWM0OGU2ZDhjZmJhNjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T15:30:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-19T15:30:38Z"}, "message": "Auto merge of #57896 - oli-obk:permissive_existence, r=cramertj\n\n Be more permissive with required bounds on existential types\n\nfixes  #54184\n\nr? @pnkfelix", "tree": {"sha": "d8cfa59f6355765e2e618419aa62a4230d05e29b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8cfa59f6355765e2e618419aa62a4230d05e29b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74e35d270067afff72034312065c48e6d8cfba67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74e35d270067afff72034312065c48e6d8cfba67", "html_url": "https://github.com/rust-lang/rust/commit/74e35d270067afff72034312065c48e6d8cfba67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74e35d270067afff72034312065c48e6d8cfba67/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d66b7b76df04c29422ae3385920abb5cb947cff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d66b7b76df04c29422ae3385920abb5cb947cff", "html_url": "https://github.com/rust-lang/rust/commit/4d66b7b76df04c29422ae3385920abb5cb947cff"}, {"sha": "eb98d318b28cc177f608d57fb5b9b017235b515d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb98d318b28cc177f608d57fb5b9b017235b515d", "html_url": "https://github.com/rust-lang/rust/commit/eb98d318b28cc177f608d57fb5b9b017235b515d"}], "stats": {"total": 627, "additions": 548, "deletions": 79}, "files": [{"sha": "53ed0bfb12ee98095baa674868dc3c65e3f3d446", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -237,6 +237,11 @@ impl_stable_hash_for!(struct ty::FnSig<'tcx> {\n     abi\n });\n \n+impl_stable_hash_for!(struct ty::ResolvedOpaqueTy<'tcx> {\n+    concrete_type,\n+    substs\n+});\n+\n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n     where T: HashStable<StableHashingContext<'a>>\n {"}, {"sha": "e75446b01c11e5c90155800caa6583fad01de07b", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -26,7 +26,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n     ///\n     /// winds up desugared to:\n     ///\n-    ///     abstract type Foo<'x, T>: Trait<'x>\n+    ///     abstract type Foo<'x, X>: Trait<'x>\n     ///     fn foo<'a, 'b, T>() -> Foo<'a, T>\n     ///\n     /// then `substs` would be `['a, T]`."}, {"sha": "6bb322251256554030bc2b7ac601b159f4172891", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -317,6 +317,17 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n     }\n }\n \n+/// All information necessary to validate and reveal an `impl Trait` or `existential Type`\n+#[derive(RustcEncodable, RustcDecodable, Debug)]\n+pub struct ResolvedOpaqueTy<'tcx> {\n+    /// The revealed type as seen by this function.\n+    pub concrete_type: Ty<'tcx>,\n+    /// Generic parameters on the opaque type as passed by this function.\n+    /// For `existential type Foo<A, B>; fn foo<T, U>() -> Foo<T, U> { .. }` this is `[T, U]`, not\n+    /// `[A, B]`\n+    pub substs: &'tcx Substs<'tcx>,\n+}\n+\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to.\n@@ -419,7 +430,7 @@ pub struct TypeckTables<'tcx> {\n \n     /// All the existential types that are restricted to concrete types\n     /// by this function\n-    pub concrete_existential_types: FxHashMap<DefId, Ty<'tcx>>,\n+    pub concrete_existential_types: FxHashMap<DefId, ResolvedOpaqueTy<'tcx>>,\n \n     /// Given the closure ID this map provides the list of UpvarIDs used by it.\n     /// The upvarID contains the HIR node ID and it also contains the full path"}, {"sha": "02e4fb12af5c9b21ab202e36c0bd9767a285198d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -74,7 +74,7 @@ pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, ke\n pub use self::context::{Lift, TypeckTables, CtxtInterners};\n pub use self::context::{\n     UserTypeAnnotationIndex, UserType, CanonicalUserType,\n-    CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n+    CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, ResolvedOpaqueTy,\n };\n \n pub use self::instance::{Instance, InstanceDef};"}, {"sha": "10f234fd3ca6a5f6c18af71191d8d5a32e024112", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1386,10 +1386,7 @@ pub fn check_item_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Ite\n         }\n         hir::ItemKind::Existential(..) => {\n             let def_id = tcx.hir().local_def_id(it.id);\n-            let pty_ty = tcx.type_of(def_id);\n-            let generics = tcx.generics_of(def_id);\n \n-            check_bounds_are_used(tcx, &generics, pty_ty);\n             let substs = Substs::identity_for_item(tcx, def_id);\n             check_opaque(tcx, def_id, substs, it.span);\n         }"}, {"sha": "e4c0e3bd54d5dd861db6f2bca04f71d2b32bc0ec", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -560,21 +560,29 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 if def_id == defin_ty_def_id {\n                     // Concrete type resolved to the existential type itself\n                     // Force a cycle error\n+                    // FIXME(oli-obk): we could just not insert it into `concrete_existential_types`\n+                    // which simply would make this use not a defining use.\n                     self.tcx().at(span).type_of(defin_ty_def_id);\n                 }\n             }\n \n+            let new = ty::ResolvedOpaqueTy {\n+                concrete_type: definition_ty,\n+                substs: self.tcx().lift_to_global(&opaque_defn.substs).unwrap(),\n+            };\n+\n             let old = self.tables\n                 .concrete_existential_types\n-                .insert(def_id, definition_ty);\n+                .insert(def_id, new);\n             if let Some(old) = old {\n-                if old != definition_ty {\n+                if old.concrete_type != definition_ty || old.substs != opaque_defn.substs {\n                     span_bug!(\n                         span,\n                         \"visit_opaque_types tried to write \\\n-                        different types for the same existential type: {:?}, {:?}, {:?}\",\n+                        different types for the same existential type: {:?}, {:?}, {:?}, {:?}\",\n                         def_id,\n                         definition_ty,\n+                        opaque_defn,\n                         old,\n                     );\n                 }"}, {"sha": "ec1d9d24730edd59b82c7825739381a0455b1fec", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 101, "deletions": 11, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -23,9 +23,10 @@ use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n+use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n@@ -1211,7 +1212,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n                     tcx.typeck_tables_of(owner)\n                         .concrete_existential_types\n                         .get(&def_id)\n-                        .cloned()\n+                        .map(|opaque| opaque.concrete_type)\n                         .unwrap_or_else(|| {\n                             // This can occur if some error in the\n                             // owner fn prevented us from populating\n@@ -1343,7 +1344,13 @@ fn find_existential_constraints<'a, 'tcx>(\n     struct ConstraintLocator<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n-        found: Option<(Span, ty::Ty<'tcx>)>,\n+        // First found type span, actual type, mapping from the existential type's generic\n+        // parameters to the concrete type's generic parameters\n+        //\n+        // The mapping is an index for each use site of a generic parameter in the concrete type\n+        //\n+        // The indices index into the generic parameters on the existential type.\n+        found: Option<(Span, ty::Ty<'tcx>, Vec<usize>)>,\n     }\n \n     impl<'a, 'tcx> ConstraintLocator<'a, 'tcx> {\n@@ -1358,23 +1365,106 @@ fn find_existential_constraints<'a, 'tcx>(\n                 .tcx\n                 .typeck_tables_of(def_id)\n                 .concrete_existential_types\n-                .get(&self.def_id)\n-                .cloned();\n-            if let Some(ty) = ty {\n+                .get(&self.def_id);\n+            if let Some(ty::ResolvedOpaqueTy { concrete_type, substs }) = ty {\n                 // FIXME(oli-obk): trace the actual span from inference to improve errors\n                 let span = self.tcx.def_span(def_id);\n-                if let Some((prev_span, prev_ty)) = self.found {\n-                    if ty != prev_ty {\n+                // used to quickly look up the position of a generic parameter\n+                let mut index_map: FxHashMap<ty::ParamTy, usize> = FxHashMap::default();\n+                // skip binder is ok, since we only use this to find generic parameters and their\n+                // positions.\n+                for (idx, subst) in substs.iter().enumerate() {\n+                    if let UnpackedKind::Type(ty) = subst.unpack() {\n+                        if let ty::Param(p) = ty.sty {\n+                            if index_map.insert(p, idx).is_some() {\n+                                // there was already an entry for `p`, meaning a generic parameter\n+                                // was used twice\n+                                self.tcx.sess.span_err(\n+                                    span,\n+                                    &format!(\"defining existential type use restricts existential \\\n+                                    type by using the generic parameter `{}` twice\", p.name),\n+                                );\n+                                return;\n+                            }\n+                        } else {\n+                            self.tcx.sess.delay_span_bug(\n+                                span,\n+                                &format!(\n+                                    \"non-defining exist ty use in defining scope: {:?}, {:?}\",\n+                                    concrete_type, substs,\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n+                // compute the index within the existential type for each generic parameter used in\n+                // the concrete type\n+                let indices = concrete_type\n+                    .subst(self.tcx, substs)\n+                    .walk()\n+                    .filter_map(|t| match &t.sty {\n+                        ty::Param(p) => Some(*index_map.get(p).unwrap()),\n+                        _ => None,\n+                    }).collect();\n+                let is_param = |ty: ty::Ty| match ty.sty {\n+                    ty::Param(_) => true,\n+                    _ => false,\n+                };\n+                if !substs.types().all(is_param) {\n+                    self.tcx.sess.span_err(\n+                        span,\n+                        \"defining existential type use does not fully define existential type\",\n+                    );\n+                } else if let Some((prev_span, prev_ty, ref prev_indices)) = self.found {\n+                    let mut ty = concrete_type.walk().fuse();\n+                    let mut p_ty = prev_ty.walk().fuse();\n+                    let iter_eq = (&mut ty).zip(&mut p_ty).all(|(t, p)| match (&t.sty, &p.sty) {\n+                        // type parameters are equal to any other type parameter for the purpose of\n+                        // concrete type equality, as it is possible to obtain the same type just\n+                        // by passing matching parameters to a function.\n+                        (ty::Param(_), ty::Param(_)) => true,\n+                        _ => t == p,\n+                    });\n+                    if !iter_eq || ty.next().is_some() || p_ty.next().is_some() {\n                         // found different concrete types for the existential type\n                         let mut err = self.tcx.sess.struct_span_err(\n                             span,\n-                            \"defining existential type use differs from previous\",\n+                            \"concrete type differs from previous defining existential type use\",\n+                        );\n+                        err.span_label(\n+                            span,\n+                            format!(\"expected `{}`, got `{}`\", prev_ty, concrete_type),\n+                        );\n+                        err.span_note(prev_span, \"previous use here\");\n+                        err.emit();\n+                    } else if indices != *prev_indices {\n+                        // found \"same\" concrete types, but the generic parameter order differs\n+                        let mut err = self.tcx.sess.struct_span_err(\n+                            span,\n+                            \"concrete type's generic parameters differ from previous defining use\",\n                         );\n+                        use std::fmt::Write;\n+                        let mut s = String::new();\n+                        write!(s, \"expected [\").unwrap();\n+                        let list = |s: &mut String, indices: &Vec<usize>| {\n+                            let mut indices = indices.iter().cloned();\n+                            if let Some(first) = indices.next() {\n+                                write!(s, \"`{}`\", substs[first]).unwrap();\n+                                for i in indices {\n+                                    write!(s, \", `{}`\", substs[i]).unwrap();\n+                                }\n+                            }\n+                        };\n+                        list(&mut s, prev_indices);\n+                        write!(s, \"], got [\").unwrap();\n+                        list(&mut s, &indices);\n+                        write!(s, \"]\").unwrap();\n+                        err.span_label(span, s);\n                         err.span_note(prev_span, \"previous use here\");\n                         err.emit();\n                     }\n                 } else {\n-                    self.found = Some((span, ty));\n+                    self.found = Some((span, concrete_type, indices));\n                 }\n             }\n         }\n@@ -1433,7 +1523,7 @@ fn find_existential_constraints<'a, 'tcx>(\n     }\n \n     match locator.found {\n-        Some((_, ty)) => ty,\n+        Some((_, ty, _)) => ty,\n         None => {\n             let span = tcx.def_span(def_id);\n             tcx.sess.span_err(span, \"could not find defining uses\");"}, {"sha": "542e076d88d64c6d242e8fdfe4dba806c863b187", "filename": "src/test/ui/existential_types/bound_reduction2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -8,11 +8,12 @@ trait TraitWithAssoc {\n }\n \n existential type Foo<V>: Trait<V>;\n+//~^ ERROR could not find defining uses\n \n trait Trait<U> {}\n \n impl<W> Trait<W> for () {}\n \n-fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR non-defining\n+fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR does not fully define\n     ()\n }"}, {"sha": "f51f1c9a4e563a2cd7c574d01ffbc88bb748bad1", "filename": "src/test/ui/existential_types/bound_reduction2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,16 +1,16 @@\n-error: non-defining existential type use in defining scope\n-  --> $DIR/bound_reduction2.rs:16:1\n+error: defining existential type use does not fully define existential type\n+  --> $DIR/bound_reduction2.rs:17:1\n    |\n-LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR non-defining\n+LL | / fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> { //~ ERROR does not fully define\n LL | |     ()\n LL | | }\n    | |_^\n-   |\n-note: used non-generic type <T as TraitWithAssoc>::Assoc for generic parameter\n-  --> $DIR/bound_reduction2.rs:10:22\n+\n+error: could not find defining uses\n+  --> $DIR/bound_reduction2.rs:10:1\n    |\n LL | existential type Foo<V>: Trait<V>;\n-   |                      ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "a8670cc07f2e1370494dd82736fa27b7091e7b5d", "filename": "src/test/ui/existential_types/different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -9,6 +9,6 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+fn bar() -> Foo { //~ ERROR concrete type differs from previous\n     42i32\n }"}, {"sha": "3f9ed96400b54ac4e29d670dc5dc4190d9ab3c95", "filename": "src/test/ui/existential_types/different_defining_uses.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,10 +1,10 @@\n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/different_defining_uses.rs:12:1\n    |\n-LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | / fn bar() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     42i32\n LL | | }\n-   | |_^\n+   | |_^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses.rs:8:1"}, {"sha": "13ada63e4bc45fa256ee6f9286feb19f419be862", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -9,10 +9,10 @@ fn foo() -> Foo {\n     \"\"\n }\n \n-fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+fn bar() -> Foo { //~ ERROR concrete type differs from previous\n     panic!()\n }\n \n-fn boo() -> Foo { //~ ERROR defining existential type use differs from previous\n+fn boo() -> Foo { //~ ERROR concrete type differs from previous\n     loop {}\n }"}, {"sha": "e29256a5014f9fede3c8eecc84b6a96c14288712", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,10 +1,10 @@\n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/different_defining_uses_never_type.rs:12:1\n    |\n-LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | / fn bar() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     panic!()\n LL | | }\n-   | |_^\n+   | |_^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1\n@@ -14,13 +14,13 @@ LL | |     \"\"\n LL | | }\n    | |_^\n \n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/different_defining_uses_never_type.rs:16:1\n    |\n-LL | / fn boo() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | / fn boo() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     loop {}\n LL | | }\n-   | |_^\n+   | |_^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1"}, {"sha": "ce3ab88a1c0bbe8cb3113075863571659568bff4", "filename": "src/test/ui/existential_types/generic_different_defining_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -8,6 +8,6 @@ fn my_iter<T>(t: T) -> MyIter<T> {\n     std::iter::once(t)\n }\n \n-fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n     Some(t).into_iter()\n }"}, {"sha": "3f129658b8fd0d119e865201c98db329e6d927e2", "filename": "src/test/ui/existential_types/generic_different_defining_uses.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,10 +1,10 @@\n-error: defining existential type use differs from previous\n+error: concrete type differs from previous defining existential type use\n   --> $DIR/generic_different_defining_uses.rs:11:1\n    |\n-LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n LL | |     Some(t).into_iter()\n LL | | }\n-   | |_^\n+   | |_^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n   --> $DIR/generic_different_defining_uses.rs:7:1"}, {"sha": "3f8753333aa7a2b77fd3000ece68ff39f3e8efd0", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,9 +1,14 @@\n #![feature(existential_type)]\n \n+use std::fmt::Debug;\n+\n fn main() {}\n \n-existential type Two<T, U>: 'static; //~ ERROR type parameter `U` is unused\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+//~^ could not find defining uses\n \n-fn one<T: 'static>(t: T) -> Two<T, T> {\n+fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ ERROR defining existential type use restricts existential type\n     t\n }"}, {"sha": "d4deda999da16b4f29925f3b6c5c7bcffe4c828d", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,9 +1,17 @@\n-error[E0091]: type parameter `U` is unused\n-  --> $DIR/generic_duplicate_param_use.rs:5:25\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use.rs:11:1\n    |\n-LL | existential type Two<T, U>: 'static; //~ ERROR type parameter `U` is unused\n-   |                         ^ unused type parameter\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ ERROR defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n \n-error: aborting due to previous error\n+error: could not find defining uses\n+  --> $DIR/generic_duplicate_param_use.rs:8:1\n+   |\n+LL | existential type Two<T, U>: Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0091`."}, {"sha": "10f2c630582fca1f431a4bed078a43a88ac0d19b", "filename": "src/test/ui/existential_types/generic_duplicate_param_use10.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+    (t, 4u32)\n+}"}, {"sha": "3842292decd57e4badb7074a659cce91169a0e87", "filename": "src/test/ui/existential_types/generic_duplicate_param_use2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,17 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ defining existential type use restricts existential type\n+    t\n+}\n+\n+fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+    t\n+}"}, {"sha": "0a8be3218c759a70f9db8817b544fe52c9f7a4e5", "filename": "src/test/ui/existential_types/generic_duplicate_param_use2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,11 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use2.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "05c77c8947333c241832c32915f7c17721177227", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,22 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ defining existential type use restricts existential type\n+    t\n+}\n+\n+fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+    t\n+}\n+\n+fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n+//~^ concrete type's generic parameters differ from previous defining use\n+    u\n+}"}, {"sha": "1c96c15a76919696af6185af61c4755b03ebf14c", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,28 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use3.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: concrete type's generic parameters differ from previous defining use\n+  --> $DIR/generic_duplicate_param_use3.rs:19:1\n+   |\n+LL | / fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type's generic parameters differ from previous defining use\n+LL | |     u\n+LL | | }\n+   | |_^ expected [`T`], got [`U`]\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use3.rs:15:1\n+   |\n+LL | / fn two<T: Debug, U>(t: T, _: U) -> Two<T, U> {\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "609dbe06cd7335c39f485e13e62ea84b65612625", "filename": "src/test/ui/existential_types/generic_duplicate_param_use4.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,17 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn one<T: Debug>(t: T) -> Two<T, T> {\n+//~^ ERROR defining existential type use restricts existential type\n+    t\n+}\n+\n+fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n+    u\n+}"}, {"sha": "24b1caf7c1bfe749730fcc46ff5b0b0d32f54652", "filename": "src/test/ui/existential_types/generic_duplicate_param_use4.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,11 @@\n+error: defining existential type use restricts existential type by using the generic parameter `T` twice\n+  --> $DIR/generic_duplicate_param_use4.rs:10:1\n+   |\n+LL | / fn one<T: Debug>(t: T) -> Two<T, T> {\n+LL | | //~^ ERROR defining existential type use restricts existential type\n+LL | |     t\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3f4a23b8b41faa0a7fae91497f9a76bdef806ace", "filename": "src/test/ui/existential_types/generic_duplicate_param_use5.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,17 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, u)\n+}\n+\n+fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+//~^ concrete type differs from previous\n+    (u, t)\n+}"}, {"sha": "166623801c246496ab8e935d2691bd625eef63b3", "filename": "src/test/ui/existential_types/generic_duplicate_param_use5.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,19 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use5.rs:14:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type differs from previous\n+LL | |     (u, t)\n+LL | | }\n+   | |_^ expected `(T, U)`, got `(U, T)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use5.rs:10:1\n+   |\n+LL | / fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, u)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b8c56352bda46ceceb521ee02f52074b95a8a1b", "filename": "src/test/ui/existential_types/generic_duplicate_param_use6.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,17 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+// test that unused generic parameters are ok\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, t)\n+}\n+\n+fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+//~^ concrete type differs from previous\n+    (u, t)\n+}"}, {"sha": "da49a83be1f70801d279543cde3addc284607a75", "filename": "src/test/ui/existential_types/generic_duplicate_param_use6.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,19 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use6.rs:14:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type differs from previous\n+LL | |     (u, t)\n+LL | | }\n+   | |_^ expected `(T, T)`, got `(U, T)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use6.rs:10:1\n+   |\n+LL | / fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, t)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2bcac315f5a96058613fd50ef96fcb5ec8e21402", "filename": "src/test/ui/existential_types/generic_duplicate_param_use7.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,25 @@\n+// compile-pass\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<A, B>: Debug;\n+\n+fn two<T: Debug + Copy, U>(t: T, u: U) -> Two<T, U> {\n+    (t, t)\n+}\n+\n+fn three<T: Debug, U>(t: T, t2: T, u: U) -> Two<T, U> {\n+    (t, t2)\n+}\n+\n+fn four<T: Debug, U, V>(t: T, t2: T, u: U, v: V) -> Two<T, U> {\n+    (t, t2)\n+}\n+\n+fn five<X, Y: Debug>(x: X, y: Y, y2: Y) -> Two<Y, X> {\n+    (y, y2)\n+}\n+"}, {"sha": "83501ad8c41a790eb211faa1a1fafbaa85415b9a", "filename": "src/test/ui/existential_types/generic_duplicate_param_use8.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,16 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+    (t, 4u32)\n+}\n+\n+fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n+//~^ concrete type differs from previous\n+    (u, 4u32)\n+}"}, {"sha": "80c7441c857d14f07a2c4e2714a6c3ea993f3c5d", "filename": "src/test/ui/existential_types/generic_duplicate_param_use8.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,19 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use8.rs:13:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(_: T, u: U) -> Two<T, U> {\n+LL | | //~^ concrete type differs from previous\n+LL | |     (u, 4u32)\n+LL | | }\n+   | |_^ expected `(T, u32)`, got `(U, u32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use8.rs:9:1\n+   |\n+LL | / fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n+LL | |     (t, 4u32)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4c6897298c44fe034e6ec1dee2d7cabfdff9d1b1", "filename": "src/test/ui/existential_types/generic_duplicate_param_use9.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,20 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<A, B>: Debug;\n+\n+trait Foo {\n+    type Bar: Debug;\n+    const BAR: Self::Bar;\n+}\n+\n+fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, u, T::BAR)\n+}\n+\n+fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+    (t, u, 42) //~^ ERROR concrete type differs from previous\n+}"}, {"sha": "a3ce480d66dcdf0e16e83ef2a2e7f1dc0e164621", "filename": "src/test/ui/existential_types/generic_duplicate_param_use9.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,18 @@\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/generic_duplicate_param_use9.rs:18:1\n+   |\n+LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, u, 42) //~^ ERROR concrete type differs from previous\n+LL | | }\n+   | |_^ expected `(A, B, <A as Foo>::Bar)`, got `(A, B, i32)`\n+   |\n+note: previous use here\n+  --> $DIR/generic_duplicate_param_use9.rs:14:1\n+   |\n+LL | / fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n+LL | |     (t, u, T::BAR)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "75af5d9570ff2ca7a4a3676719e5f710aec82c6d", "filename": "src/test/ui/existential_types/generic_nondefining_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -3,8 +3,9 @@\n fn main() {}\n \n existential type Cmp<T>: 'static;\n+//~^ ERROR could not find defining uses\n \n // not a defining use, because it doesn't define *all* possible generics\n-fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n+fn cmp() -> Cmp<u32> { //~ ERROR defining existential type use does not fully define\n     5u32\n }"}, {"sha": "8dd88006be9c63f84eeefcbc75d8ce1d9ac15b8b", "filename": "src/test/ui/existential_types/generic_nondefining_use.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,16 +1,16 @@\n-error: non-defining existential type use in defining scope\n-  --> $DIR/generic_nondefining_use.rs:8:1\n+error: defining existential type use does not fully define existential type\n+  --> $DIR/generic_nondefining_use.rs:9:1\n    |\n-LL | / fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n+LL | / fn cmp() -> Cmp<u32> { //~ ERROR defining existential type use does not fully define\n LL | |     5u32\n LL | | }\n    | |_^\n-   |\n-note: used non-generic type u32 for generic parameter\n-  --> $DIR/generic_nondefining_use.rs:5:22\n+\n+error: could not find defining uses\n+  --> $DIR/generic_nondefining_use.rs:5:1\n    |\n LL | existential type Cmp<T>: 'static;\n-   |                      ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "3f81f5177d0a4f5ef6473cf8882cde7beca9adc2", "filename": "src/test/ui/existential_types/not_a_defining_use.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,40 @@\n+#![feature(existential_type)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+existential type Two<T, U>: Debug;\n+\n+fn two<T: Debug>(t: T) -> Two<T, u32> {\n+    //~^ ERROR defining existential type use does not fully define existential type\n+    (t, 4i8)\n+}\n+\n+fn three<T: Debug, U>(t: T) -> Two<T, U> {\n+    (t, 5i8)\n+}\n+\n+trait Bar {\n+    type Blub: Debug;\n+    const FOO: Self::Blub;\n+}\n+\n+impl Bar for u32 {\n+    type Blub = i32;\n+    const FOO: i32 = 42;\n+}\n+\n+// this should work! But it requires `two` and `three` not to be defining uses,\n+// just restricting uses\n+fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> { //~ concrete type differs from previous\n+    (t, <U as Bar>::FOO)\n+}\n+\n+fn is_sync<T: Sync>() {}\n+\n+fn asdfl() {\n+    //FIXME(oli-obk): these currently cause cycle errors\n+    //is_sync::<Two<i32, u32>>();\n+    //is_sync::<Two<i32, *const i32>>();\n+}"}, {"sha": "288a32fc14edd68c56f14d74704f607070abb8b3", "filename": "src/test/ui/existential_types/not_a_defining_use.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.stderr?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -0,0 +1,27 @@\n+error: defining existential type use does not fully define existential type\n+  --> $DIR/not_a_defining_use.rs:9:1\n+   |\n+LL | / fn two<T: Debug>(t: T) -> Two<T, u32> {\n+LL | |     //~^ ERROR defining existential type use does not fully define existential type\n+LL | |     (t, 4i8)\n+LL | | }\n+   | |_^\n+\n+error: concrete type differs from previous defining existential type use\n+  --> $DIR/not_a_defining_use.rs:30:1\n+   |\n+LL | / fn four<T: Debug, U: Bar>(t: T) -> Two<T, U> { //~ concrete type differs from previous\n+LL | |     (t, <U as Bar>::FOO)\n+LL | | }\n+   | |_^ expected `(T, i8)`, got `(T, <U as Bar>::Blub)`\n+   |\n+note: previous use here\n+  --> $DIR/not_a_defining_use.rs:14:1\n+   |\n+LL | / fn three<T: Debug, U>(t: T) -> Two<T, U> {\n+LL | |     (t, 5i8)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7af6508788129e868c5c8d6c2370762e252c53da", "filename": "src/test/ui/existential_types/unused_generic_param.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e35d270067afff72034312065c48e6d8cfba67/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs?ref=74e35d270067afff72034312065c48e6d8cfba67", "patch": "@@ -1,15 +1,18 @@\n+// compile-pass\n #![feature(existential_type)]\n \n fn main() {\n }\n \n-existential type PartiallyDefined<T>: 'static; //~ `T` is unused\n+// test that unused generic parameters are ok\n+existential type PartiallyDefined<T>: 'static;\n \n fn partially_defined<T: std::fmt::Debug>(_: T) -> PartiallyDefined<T> {\n     4u32\n }\n \n-existential type PartiallyDefined2<T>: 'static; //~ `T` is unused\n+// test that unused generic parameters are ok\n+existential type PartiallyDefined2<T>: 'static;\n \n fn partially_defined2<T: std::fmt::Debug>(_: T) -> PartiallyDefined2<T> {\n     4u32"}, {"sha": "348aed3c43914e30dc9e2742eeb1ee9cf1711ef6", "filename": "src/test/ui/existential_types/unused_generic_param.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d66b7b76df04c29422ae3385920abb5cb947cff/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d66b7b76df04c29422ae3385920abb5cb947cff/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr?ref=4d66b7b76df04c29422ae3385920abb5cb947cff", "patch": "@@ -1,15 +0,0 @@\n-error[E0091]: type parameter `T` is unused\n-  --> $DIR/unused_generic_param.rs:6:35\n-   |\n-LL | existential type PartiallyDefined<T>: 'static; //~ `T` is unused\n-   |                                   ^ unused type parameter\n-\n-error[E0091]: type parameter `T` is unused\n-  --> $DIR/unused_generic_param.rs:12:36\n-   |\n-LL | existential type PartiallyDefined2<T>: 'static; //~ `T` is unused\n-   |                                    ^ unused type parameter\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0091`."}]}