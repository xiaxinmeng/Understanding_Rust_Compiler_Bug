{"sha": "28d18fabe37252127ffeef3ad54590f47fd9c081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZDE4ZmFiZTM3MjUyMTI3ZmZlZWYzYWQ1NDU5MGY0N2ZkOWMwODE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-10T12:33:24Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-03T12:03:16Z"}, "message": "Unit test for the new implicit borrow and deref within the\nguard expressions of matches (activated only when using\nnew NLL mode).\n\nReview feedback: removed 27282 from filename. (The test still\nreferences it in a relevant comment in the file itself so that seemed\nlike a reasonable compromise.)", "tree": {"sha": "d9357f961e66e642c08c65e47b83e90fdbcc2ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9357f961e66e642c08c65e47b83e90fdbcc2ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d18fabe37252127ffeef3ad54590f47fd9c081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d18fabe37252127ffeef3ad54590f47fd9c081", "html_url": "https://github.com/rust-lang/rust/commit/28d18fabe37252127ffeef3ad54590f47fd9c081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d18fabe37252127ffeef3ad54590f47fd9c081/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a72790d879a6266b4dc75ab3014c00735cf67610", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72790d879a6266b4dc75ab3014c00735cf67610", "html_url": "https://github.com/rust-lang/rust/commit/a72790d879a6266b4dc75ab3014c00735cf67610"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "985531446270e4dc252fe2be70de698be7d0fcc7", "filename": "src/test/compile-fail/nll/match-guards-always-borrow.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/28d18fabe37252127ffeef3ad54590f47fd9c081/src%2Ftest%2Fcompile-fail%2Fnll%2Fmatch-guards-always-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d18fabe37252127ffeef3ad54590f47fd9c081/src%2Ftest%2Fcompile-fail%2Fnll%2Fmatch-guards-always-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fmatch-guards-always-borrow.rs?ref=28d18fabe37252127ffeef3ad54590f47fd9c081", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//revisions: ast mir\n+//[mir] compile-flags: -Z borrowck=mir\n+\n+#![feature(rustc_attrs)]\n+\n+// Here is arielb1's basic example from rust-lang/rust#27282\n+// that AST borrowck is flummoxed by:\n+\n+fn should_reject_destructive_mutate_in_guard() {\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo if {\n+            (|| { let bar = foo; bar.take() })();\n+            //[mir]~^ ERROR cannot move out of borrowed content [E0507]\n+            false } => { },\n+        Some(s) => std::process::exit(*s),\n+    }\n+}\n+\n+// Here below is a case that needs to keep working: we only use the\n+// binding via immutable-borrow in the guard, and we mutate in the arm\n+// body.\n+fn allow_mutate_in_arm_body() {\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo if foo.is_some() && false => { foo.take(); () }\n+        Some(s) => std::process::exit(*s),\n+    }\n+}\n+\n+// Here below is a case that needs to keep working: we only use the\n+// binding via immutable-borrow in the guard, and we move into the arm\n+// body.\n+fn allow_move_into_arm_body() {\n+    match Some(&4) {\n+        None => {},\n+        mut foo if foo.is_some() && false => { foo.take(); () }\n+        Some(s) => std::process::exit(*s),\n+    }\n+}\n+\n+// Since this is a compile-fail test that is explicitly encoding the\n+// different behavior of AST- vs MIR-borrowck where AST-borrowck does\n+// not error, we need to use rustc_error to placate the test harness\n+// that wants *some* error to occur.\n+#[rustc_error]\n+fn main() { //[ast]~ ERROR compilation successful\n+    should_reject_destructive_mutate_in_guard();\n+    allow_mutate_in_arm_body();\n+    allow_move_into_arm_body();\n+}"}]}