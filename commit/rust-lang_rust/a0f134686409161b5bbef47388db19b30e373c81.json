{"sha": "a0f134686409161b5bbef47388db19b30e373c81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjEzNDY4NjQwOTE2MWI1YmJlZjQ3Mzg4ZGIxOWIzMGUzNzNjODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-26T14:34:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T14:34:00Z"}, "message": "Merge #6333\n\n6333: Don't interpret type path as part of visibility. r=matklad a=ArifRoktim\n\nThis closes #5902.\r\nI only check that the next token isn't equal to `T![:]`, instead of the next two not being equal to `T![::]`. Is that ok?\n\nCo-authored-by: Arif Roktim <arifrroktim@gmail.com>", "tree": {"sha": "fd7a367110ac2e4a212d605fea65db782dc03142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd7a367110ac2e4a212d605fea65db782dc03142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f134686409161b5bbef47388db19b30e373c81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflt5YCRBK7hj4Ov3rIwAAdHIIAIz1yilpw+/7jxSDD4BlTnmK\n/KHjhgUkvfDA3ggTwxQycg+8spfHrzlUkEjdyQIPm4sxJRMJD3Zk1AJ/ZKeOO/pU\n5RMEN1I8szB3wynBZvpMPKzdYcQw5bJnV9hFInehzQ0hEHs/QLw+c9zX9HkiFjzi\nfV6z2kkBC/sEIx+NjqFvG88SF6zU7bVKzoeeZK7t/KkHt7UAsfq/XCm6NpYhtVYf\nZ96GurJ6ERjrlIgXwWkl5Xp6dCkHbMCyK7MK3o2HO0Uq7T3AnWuWp5MuCyih/oMf\nLuxVneO+XymLKznEHecqVD+A7Ub0S6Bn+iVieQsT5Bw52X6OnlWppnDFE0y2g70=\n=kjTp\n-----END PGP SIGNATURE-----\n", "payload": "tree fd7a367110ac2e4a212d605fea65db782dc03142\nparent 1a84cadc88e23fead7435384bfd986dc08081509\nparent 66a1de7d2084a54c5c4b67eac9b94909e700f136\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603722840 +0000\ncommitter GitHub <noreply@github.com> 1603722840 +0000\n\nMerge #6333\n\n6333: Don't interpret type path as part of visibility. r=matklad a=ArifRoktim\n\nThis closes #5902.\r\nI only check that the next token isn't equal to `T![:]`, instead of the next two not being equal to `T![::]`. Is that ok?\n\nCo-authored-by: Arif Roktim <arifrroktim@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f134686409161b5bbef47388db19b30e373c81", "html_url": "https://github.com/rust-lang/rust/commit/a0f134686409161b5bbef47388db19b30e373c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f134686409161b5bbef47388db19b30e373c81/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a84cadc88e23fead7435384bfd986dc08081509", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a84cadc88e23fead7435384bfd986dc08081509", "html_url": "https://github.com/rust-lang/rust/commit/1a84cadc88e23fead7435384bfd986dc08081509"}, {"sha": "66a1de7d2084a54c5c4b67eac9b94909e700f136", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a1de7d2084a54c5c4b67eac9b94909e700f136", "html_url": "https://github.com/rust-lang/rust/commit/66a1de7d2084a54c5c4b67eac9b94909e700f136"}], "stats": {"total": 149, "additions": 141, "deletions": 8}, "files": [{"sha": "e1855b63d41a4bcccaba6a766fe59c2c10ddacba", "filename": "crates/assists/src/handlers/move_guard.rs", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=a0f134686409161b5bbef47388db19b30e373c81", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{edit::AstNodeEdit, make, AstNode, IfExpr, MatchArm},\n+    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, Expr, IfExpr, MatchArm},\n     SyntaxKind::WHITESPACE,\n };\n \n@@ -92,9 +92,20 @@ pub(crate) fn move_guard_to_arm_body(acc: &mut Assists, ctx: &AssistContext) ->\n pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n     let match_pat = match_arm.pat()?;\n-\n     let arm_body = match_arm.expr()?;\n-    let if_expr: IfExpr = IfExpr::cast(arm_body.syntax().clone())?;\n+\n+    let mut replace_node = None;\n+    let if_expr: IfExpr = IfExpr::cast(arm_body.syntax().clone()).or_else(|| {\n+        let block_expr = BlockExpr::cast(arm_body.syntax().clone())?;\n+        if let Expr::IfExpr(e) = block_expr.expr()? {\n+            replace_node = Some(block_expr.syntax().clone());\n+            Some(e)\n+        } else {\n+            None\n+        }\n+    })?;\n+    let replace_node = replace_node.unwrap_or_else(|| if_expr.syntax().clone());\n+\n     let cond = if_expr.condition()?;\n     let then_block = if_expr.then_branch()?;\n \n@@ -109,19 +120,23 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n \n     let buf = format!(\" if {}\", cond.syntax().text());\n \n-    let target = if_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"move_arm_cond_to_match_guard\", AssistKind::RefactorRewrite),\n         \"Move condition to match guard\",\n-        target,\n+        replace_node.text_range(),\n         |edit| {\n             let then_only_expr = then_block.statements().next().is_none();\n \n             match &then_block.expr() {\n                 Some(then_expr) if then_only_expr => {\n-                    edit.replace(if_expr.syntax().text_range(), then_expr.syntax().text())\n+                    edit.replace(replace_node.text_range(), then_expr.syntax().text())\n                 }\n-                _ => edit.replace(if_expr.syntax().text_range(), then_block.syntax().text()),\n+                _ if replace_node != *if_expr.syntax() => {\n+                    // Dedent because if_expr is in a BlockExpr\n+                    let replace_with = then_block.dedent(1.into()).syntax().text();\n+                    edit.replace(replace_node.text_range(), replace_with)\n+                }\n+                _ => edit.replace(replace_node.text_range(), then_block.syntax().text()),\n             }\n \n             edit.insert(match_pat.syntax().text_range().end(), buf);\n@@ -224,6 +239,33 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn move_arm_cond_in_block_to_match_guard_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            <|>if x > 10 {\n+                false\n+            }\n+        },\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        _ => true\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn move_arm_cond_to_match_guard_if_let_not_works() {\n         check_assist_not_applicable(\n@@ -290,4 +332,35 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn move_arm_cond_in_block_to_match_guard_if_multiline_body_works() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            if x > 10 {\n+                92;<|>\n+                false\n+            }\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => {\n+            92;\n+            false\n+        }\n+        _ => true\n+    }\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "4ab206a838e5c8dc46ec9441ff177ec611a09e9c", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=a0f134686409161b5bbef47388db19b30e373c81", "patch": "@@ -184,7 +184,11 @@ fn opt_visibility(p: &mut Parser) -> bool {\n                     // pub(self) struct S;\n                     // pub(self) struct S;\n                     // pub(self) struct S;\n-                    T![crate] | T![self] | T![super] => {\n+\n+                    // test pub_parens_typepath\n+                    // struct B(pub (super::A));\n+                    // struct B(pub (crate::A,));\n+                    T![crate] | T![self] | T![super] if p.nth(2) != T![:] => {\n                         p.bump_any();\n                         p.bump_any();\n                         p.expect(T![')']);"}, {"sha": "c204f0e2d94421a6c233f3c0aafbe74e615ac5d7", "filename": "crates/syntax/test_data/parser/inline/ok/0153_pub_parens_typepath.rast", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rast?ref=a0f134686409161b5bbef47388db19b30e373c81", "patch": "@@ -0,0 +1,54 @@\n+SOURCE_FILE@0..53\n+  STRUCT@0..25\n+    STRUCT_KW@0..6 \"struct\"\n+    WHITESPACE@6..7 \" \"\n+    NAME@7..8\n+      IDENT@7..8 \"B\"\n+    TUPLE_FIELD_LIST@8..24\n+      L_PAREN@8..9 \"(\"\n+      TUPLE_FIELD@9..23\n+        VISIBILITY@9..12\n+          PUB_KW@9..12 \"pub\"\n+        WHITESPACE@12..13 \" \"\n+        PAREN_TYPE@13..23\n+          L_PAREN@13..14 \"(\"\n+          PATH_TYPE@14..22\n+            PATH@14..22\n+              PATH@14..19\n+                PATH_SEGMENT@14..19\n+                  SUPER_KW@14..19 \"super\"\n+              COLON2@19..21 \"::\"\n+              PATH_SEGMENT@21..22\n+                NAME_REF@21..22\n+                  IDENT@21..22 \"A\"\n+          R_PAREN@22..23 \")\"\n+      R_PAREN@23..24 \")\"\n+    SEMICOLON@24..25 \";\"\n+  WHITESPACE@25..26 \"\\n\"\n+  STRUCT@26..52\n+    STRUCT_KW@26..32 \"struct\"\n+    WHITESPACE@32..33 \" \"\n+    NAME@33..34\n+      IDENT@33..34 \"B\"\n+    TUPLE_FIELD_LIST@34..51\n+      L_PAREN@34..35 \"(\"\n+      TUPLE_FIELD@35..50\n+        VISIBILITY@35..38\n+          PUB_KW@35..38 \"pub\"\n+        WHITESPACE@38..39 \" \"\n+        TUPLE_TYPE@39..50\n+          L_PAREN@39..40 \"(\"\n+          PATH_TYPE@40..48\n+            PATH@40..48\n+              PATH@40..45\n+                PATH_SEGMENT@40..45\n+                  CRATE_KW@40..45 \"crate\"\n+              COLON2@45..47 \"::\"\n+              PATH_SEGMENT@47..48\n+                NAME_REF@47..48\n+                  IDENT@47..48 \"A\"\n+          COMMA@48..49 \",\"\n+          R_PAREN@49..50 \")\"\n+      R_PAREN@50..51 \")\"\n+    SEMICOLON@51..52 \";\"\n+  WHITESPACE@52..53 \"\\n\""}, {"sha": "d4c1638226ea2377604b968d428302bee9356e5a", "filename": "crates/syntax/test_data/parser/inline/ok/0153_pub_parens_typepath.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f134686409161b5bbef47388db19b30e373c81/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0153_pub_parens_typepath.rs?ref=a0f134686409161b5bbef47388db19b30e373c81", "patch": "@@ -0,0 +1,2 @@\n+struct B(pub (super::A));\n+struct B(pub (crate::A,));"}]}