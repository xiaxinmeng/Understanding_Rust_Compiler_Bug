{"sha": "44780aca5d9a92251df6b027747790bdcbb29c06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NzgwYWNhNWQ5YTkyMjUxZGY2YjAyNzc0Nzc5MGJkY2JiMjljMDY=", "commit": {"author": {"name": "Jonathan Goodman", "email": "goodmanjonathan@sbcglobal.net", "date": "2018-02-08T19:26:50Z"}, "committer": {"name": "Jonathan Goodman", "email": "goodmanjonathan@sbcglobal.net", "date": "2018-02-08T19:26:50Z"}, "message": "make the copies.rs test actually test the correct lints", "tree": {"sha": "4c4fd7ee5ac4df7c418197d6254842235486fa99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c4fd7ee5ac4df7c418197d6254842235486fa99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44780aca5d9a92251df6b027747790bdcbb29c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44780aca5d9a92251df6b027747790bdcbb29c06", "html_url": "https://github.com/rust-lang/rust/commit/44780aca5d9a92251df6b027747790bdcbb29c06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44780aca5d9a92251df6b027747790bdcbb29c06/comments", "author": {"login": "goodmanjonathan", "id": 3458868, "node_id": "MDQ6VXNlcjM0NTg4Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/3458868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodmanjonathan", "html_url": "https://github.com/goodmanjonathan", "followers_url": "https://api.github.com/users/goodmanjonathan/followers", "following_url": "https://api.github.com/users/goodmanjonathan/following{/other_user}", "gists_url": "https://api.github.com/users/goodmanjonathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodmanjonathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodmanjonathan/subscriptions", "organizations_url": "https://api.github.com/users/goodmanjonathan/orgs", "repos_url": "https://api.github.com/users/goodmanjonathan/repos", "events_url": "https://api.github.com/users/goodmanjonathan/events{/privacy}", "received_events_url": "https://api.github.com/users/goodmanjonathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "goodmanjonathan", "id": 3458868, "node_id": "MDQ6VXNlcjM0NTg4Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/3458868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodmanjonathan", "html_url": "https://github.com/goodmanjonathan", "followers_url": "https://api.github.com/users/goodmanjonathan/followers", "following_url": "https://api.github.com/users/goodmanjonathan/following{/other_user}", "gists_url": "https://api.github.com/users/goodmanjonathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodmanjonathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodmanjonathan/subscriptions", "organizations_url": "https://api.github.com/users/goodmanjonathan/orgs", "repos_url": "https://api.github.com/users/goodmanjonathan/repos", "events_url": "https://api.github.com/users/goodmanjonathan/events{/privacy}", "received_events_url": "https://api.github.com/users/goodmanjonathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f48e37d22b880389e5efe2e525650ff4da91681", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f48e37d22b880389e5efe2e525650ff4da91681", "html_url": "https://github.com/rust-lang/rust/commit/6f48e37d22b880389e5efe2e525650ff4da91681"}], "stats": {"total": 521, "additions": 454, "deletions": 67}, "files": [{"sha": "e5f5810795d2ff0d09186768fa204e56d1cae4e0", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/44780aca5d9a92251df6b027747790bdcbb29c06/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44780aca5d9a92251df6b027747790bdcbb29c06/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=44780aca5d9a92251df6b027747790bdcbb29c06", "patch": "@@ -1,14 +1,7 @@\n #![feature(dotdoteq_in_patterns, inclusive_range_syntax)]\n \n-#![allow(dead_code, no_effect, unnecessary_operation)]\n-#![allow(let_and_return)]\n-#![allow(needless_return)]\n-#![allow(unused_variables)]\n-#![allow(cyclomatic_complexity)]\n-#![allow(blacklisted_name)]\n-#![allow(collapsible_if)]\n-#![allow(zero_divided_by_zero, eq_op)]\n-#![allow(path_statements)]\n+#![allow(blacklisted_name, collapsible_if, cyclomatic_complexity, eq_op, needless_continue,\n+         needless_return, never_loop, no_effect, zero_divided_by_zero)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }\n@@ -35,7 +28,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         0..=10;\n         foo();\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         Foo { bar: 42 };\n         0..10;\n         ..;\n@@ -84,7 +77,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n             a = -31-a;\n             a\n         }\n-        _ => {\n+        _ => { //~ ERROR match arms have same body\n             foo();\n             let mut a = 42 + [23].len() as i32;\n             if true {\n@@ -98,7 +91,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     let _ = match Abc::A {\n         Abc::A => 0,\n         Abc::B => 1,\n-        _ => 0,\n+        _ => 0, //~ ERROR match arms have same body\n     };\n \n     if true {\n@@ -108,7 +101,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     let _ = if true {\n         42\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         42\n     };\n \n@@ -122,7 +115,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n             }\n         }\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         for _ in &[42] {\n             let foo: &Option<_> = &Some::<u8>(42);\n             if true {\n@@ -144,7 +137,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         while foo() { break; }\n         bar + 1;\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         let bar = if true {\n             42\n         }\n@@ -167,7 +160,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     else if false {\n         foo();\n     }\n-    else if foo() {\n+    else if foo() { //~ ERROR same body as `if` block\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -179,14 +172,14 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         if let Some(a) = Some(42) {}\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         if let Some(a) = Some(42) {}\n     }\n \n     if true {\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         if let (1, .., 3) = (1, 2, 3) {}\n     }\n \n@@ -241,13 +234,13 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match 42 {\n         42 => foo(),\n-        51 => foo(),\n+        51 => foo(), //~ ERROR match arms have same body\n         _ => true,\n     };\n \n     let _ = match Some(42) {\n         Some(_) => 24,\n-        None => 24,\n+        None => 24, //~ ERROR match arms have same body\n     };\n \n     let _ = match Some(42) {\n@@ -269,31 +262,31 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     match (Some(42), Some(42)) {\n         (Some(a), None) => bar(a),\n-        (None, Some(a)) => bar(a),\n+        (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n         _ => (),\n     }\n \n     match (Some(42), Some(42)) {\n         (Some(a), ..) => bar(a),\n-        (.., Some(a)) => bar(a),\n+        (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n         _ => (),\n     }\n \n     match (1, 2, 3) {\n         (1, .., 3) => 42,\n-        (.., 3) => 42,\n+        (.., 3) => 42, //~ ERROR match arms have same body\n         _ => 0,\n     };\n \n     let _ = if true {\n         0.0\n-    } else {\n+    } else { //~ ERROR same body as `if` block\n         0.0\n     };\n \n     let _ = if true {\n         -0.0\n-    } else {\n+    } else { //~ ERROR same body as `if` block\n         -0.0\n     };\n \n@@ -313,7 +306,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     // Same NaNs\n     let _ = if true {\n         std::f32::NAN\n-    } else {\n+    } else { //~ ERROR same body as `if` block\n         std::f32::NAN\n     };\n \n@@ -331,7 +324,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         try!(Ok(\"foo\"));\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         try!(Ok(\"foo\"));\n     }\n \n@@ -343,7 +336,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         let foo = \"bar\";\n         return Ok(&foo[0..]);\n     }\n-    else {\n+    else { //~ ERROR same body as `if` block\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }\n@@ -357,19 +350,19 @@ fn ifs_same_cond() {\n \n     if b {\n     }\n-    else if b {\n+    else if b { //~ ERROR ifs same condition\n     }\n \n     if a == 1 {\n     }\n-    else if a == 1 {\n+    else if a == 1 { //~ ERROR ifs same condition\n     }\n \n     if 2*a == 1 {\n     }\n     else if 2*a == 2 {\n     }\n-    else if 2*a == 1 {\n+    else if 2*a == 1 { //~ ERROR ifs same condition\n     }\n     else if a == 1 {\n     }"}, {"sha": "c6034a1990654e8d4895a206bfc79d3a3599421d", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 430, "deletions": 36, "changes": 466, "blob_url": "https://github.com/rust-lang/rust/blob/44780aca5d9a92251df6b027747790bdcbb29c06/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44780aca5d9a92251df6b027747790bdcbb29c06/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=44780aca5d9a92251df6b027747790bdcbb29c06", "patch": "@@ -1,37 +1,431 @@\n-error: This else block is redundant.\n-\n-   --> $DIR/copies.rs:120:20\n-    |\n-120 |               } else {\n-    |  ____________________^\n-121 | |                 continue;\n-122 | |             }\n-    | |_____________^\n-    |\n-    = note: `-D needless-continue` implied by `-D warnings`\n-    = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n-            if true {\n-            break;\n-            // Merged code follows...\n-            }\n-            \n-\n-error: This else block is redundant.\n-\n-   --> $DIR/copies.rs:130:20\n-    |\n-130 |               } else {\n-    |  ____________________^\n-131 | |                 continue;\n-132 | |             }\n-    | |_____________^\n-    |\n-    = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n-            if true {\n-            break;\n-            // Merged code follows...\n-            }\n-            \n-\n-error: aborting due to 2 previous errors\n+error: this `if` has identical blocks\n+  --> $DIR/copies.rs:31:10\n+   |\n+31 |       else { //~ ERROR same body as `if` block\n+   |  __________^\n+32 | |         Foo { bar: 42 };\n+33 | |         0..10;\n+34 | |         ..;\n+...  |\n+38 | |         foo();\n+39 | |     }\n+   | |_____^\n+   |\n+   = note: `-D if-same-then-else` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/copies.rs:22:13\n+   |\n+22 |       if true {\n+   |  _____________^\n+23 | |         Foo { bar: 42 };\n+24 | |         0..10;\n+25 | |         ..;\n+...  |\n+29 | |         foo();\n+30 | |     }\n+   | |_____^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/copies.rs:80:14\n+   |\n+80 |           _ => { //~ ERROR match arms have same body\n+   |  ______________^\n+81 | |             foo();\n+82 | |             let mut a = 42 + [23].len() as i32;\n+83 | |             if true {\n+...  |\n+87 | |             a\n+88 | |         }\n+   | |_________^\n+   |\n+   = note: `-D match-same-arms` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/copies.rs:71:15\n+   |\n+71 |           42 => {\n+   |  _______________^\n+72 | |             foo();\n+73 | |             let mut a = 42 + [23].len() as i32;\n+74 | |             if true {\n+...  |\n+78 | |             a\n+79 | |         }\n+   | |_________^\n+note: `42` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/copies.rs:71:15\n+   |\n+71 |           42 => {\n+   |  _______________^\n+72 | |             foo();\n+73 | |             let mut a = 42 + [23].len() as i32;\n+74 | |             if true {\n+...  |\n+78 | |             a\n+79 | |         }\n+   | |_________^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/copies.rs:94:14\n+   |\n+94 |         _ => 0, //~ ERROR match arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/copies.rs:92:19\n+   |\n+92 |         Abc::A => 0,\n+   |                   ^\n+note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/copies.rs:92:19\n+   |\n+92 |         Abc::A => 0,\n+   |                   ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:104:10\n+    |\n+104 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+105 | |         42\n+106 | |     };\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:101:21\n+    |\n+101 |       let _ = if true {\n+    |  _____________________^\n+102 | |         42\n+103 | |     }\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:118:10\n+    |\n+118 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+119 | |         for _ in &[42] {\n+120 | |             let foo: &Option<_> = &Some::<u8>(42);\n+121 | |             if true {\n+...   |\n+126 | |         }\n+127 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:108:13\n+    |\n+108 |       if true {\n+    |  _____________^\n+109 | |         for _ in &[42] {\n+110 | |             let foo: &Option<_> = &Some::<u8>(42);\n+111 | |             if true {\n+...   |\n+116 | |         }\n+117 | |     }\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:140:10\n+    |\n+140 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+141 | |         let bar = if true {\n+142 | |             42\n+143 | |         }\n+...   |\n+149 | |         bar + 1;\n+150 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:129:13\n+    |\n+129 |       if true {\n+    |  _____________^\n+130 | |         let bar = if true {\n+131 | |             42\n+132 | |         }\n+...   |\n+138 | |         bar + 1;\n+139 | |     }\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:163:19\n+    |\n+163 |       else if foo() { //~ ERROR same body as `if` block\n+    |  ___________________^\n+164 | |         let _ = match 42 {\n+165 | |             42 => 1,\n+166 | |             a if a > 0 => 2,\n+...   |\n+169 | |         };\n+170 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:152:13\n+    |\n+152 |       if true {\n+    |  _____________^\n+153 | |         let _ = match 42 {\n+154 | |             42 => 1,\n+155 | |             a if a > 0 => 2,\n+...   |\n+158 | |         };\n+159 | |     }\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:175:10\n+    |\n+175 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+176 | |         if let Some(a) = Some(42) {}\n+177 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:172:13\n+    |\n+172 |       if true {\n+    |  _____________^\n+173 | |         if let Some(a) = Some(42) {}\n+174 | |     }\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:182:10\n+    |\n+182 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+183 | |         if let (1, .., 3) = (1, 2, 3) {}\n+184 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:179:13\n+    |\n+179 |       if true {\n+    |  _____________^\n+180 | |         if let (1, .., 3) = (1, 2, 3) {}\n+181 | |     }\n+    | |_____^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:237:15\n+    |\n+237 |         51 => foo(), //~ ERROR match arms have same body\n+    |               ^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:236:15\n+    |\n+236 |         42 => foo(),\n+    |               ^^^^^\n+note: consider refactoring into `42 | 51`\n+   --> $DIR/copies.rs:236:15\n+    |\n+236 |         42 => foo(),\n+    |               ^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:243:17\n+    |\n+243 |         None => 24, //~ ERROR match arms have same body\n+    |                 ^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:242:20\n+    |\n+242 |         Some(_) => 24,\n+    |                    ^^\n+note: consider refactoring into `Some(_) | None`\n+   --> $DIR/copies.rs:242:20\n+    |\n+242 |         Some(_) => 24,\n+    |                    ^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:265:28\n+    |\n+265 |         (None, Some(a)) => bar(a), //~ ERROR match arms have same body\n+    |                            ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:264:28\n+    |\n+264 |         (Some(a), None) => bar(a),\n+    |                            ^^^^^^\n+note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+   --> $DIR/copies.rs:264:28\n+    |\n+264 |         (Some(a), None) => bar(a),\n+    |                            ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:271:26\n+    |\n+271 |         (.., Some(a)) => bar(a), //~ ERROR match arms have same body\n+    |                          ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:270:26\n+    |\n+270 |         (Some(a), ..) => bar(a),\n+    |                          ^^^^^^\n+note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+   --> $DIR/copies.rs:270:26\n+    |\n+270 |         (Some(a), ..) => bar(a),\n+    |                          ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:277:20\n+    |\n+277 |         (.., 3) => 42, //~ ERROR match arms have same body\n+    |                    ^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:276:23\n+    |\n+276 |         (1, .., 3) => 42,\n+    |                       ^^\n+note: consider refactoring into `(1, .., 3) | (.., 3)`\n+   --> $DIR/copies.rs:276:23\n+    |\n+276 |         (1, .., 3) => 42,\n+    |                       ^^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:283:12\n+    |\n+283 |       } else { //~ ERROR same body as `if` block\n+    |  ____________^\n+284 | |         0.0\n+285 | |     };\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:281:21\n+    |\n+281 |       let _ = if true {\n+    |  _____________________^\n+282 | |         0.0\n+283 | |     } else { //~ ERROR same body as `if` block\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:289:12\n+    |\n+289 |       } else { //~ ERROR same body as `if` block\n+    |  ____________^\n+290 | |         -0.0\n+291 | |     };\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:287:21\n+    |\n+287 |       let _ = if true {\n+    |  _____________________^\n+288 | |         -0.0\n+289 | |     } else { //~ ERROR same body as `if` block\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:309:12\n+    |\n+309 |       } else { //~ ERROR same body as `if` block\n+    |  ____________^\n+310 | |         std::f32::NAN\n+311 | |     };\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:307:21\n+    |\n+307 |       let _ = if true {\n+    |  _____________________^\n+308 | |         std::f32::NAN\n+309 | |     } else { //~ ERROR same body as `if` block\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:327:10\n+    |\n+327 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+328 | |         try!(Ok(\"foo\"));\n+329 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:324:13\n+    |\n+324 |       if true {\n+    |  _____________^\n+325 | |         try!(Ok(\"foo\"));\n+326 | |     }\n+    | |_____^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:339:10\n+    |\n+339 |       else { //~ ERROR same body as `if` block\n+    |  __________^\n+340 | |         let foo = \"\";\n+341 | |         return Ok(&foo[0..]);\n+342 | |     }\n+    | |_____^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:331:13\n+    |\n+331 |       if true {\n+    |  _____________^\n+332 | |         let foo = \"\";\n+333 | |         return Ok(&foo[0..]);\n+334 | |     }\n+    | |_____^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:353:13\n+    |\n+353 |     else if b { //~ ERROR ifs same condition\n+    |             ^\n+    |\n+    = note: `-D ifs-same-cond` implied by `-D warnings`\n+note: same as this\n+   --> $DIR/copies.rs:351:8\n+    |\n+351 |     if b {\n+    |        ^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:358:13\n+    |\n+358 |     else if a == 1 { //~ ERROR ifs same condition\n+    |             ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:356:8\n+    |\n+356 |     if a == 1 {\n+    |        ^^^^^^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:365:13\n+    |\n+365 |     else if 2*a == 1 { //~ ERROR ifs same condition\n+    |             ^^^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:361:8\n+    |\n+361 |     if 2*a == 1 {\n+    |        ^^^^^^^^\n+\n+error: aborting due to 22 previous errors\n "}]}