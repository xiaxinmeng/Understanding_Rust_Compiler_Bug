{"sha": "71393422495b8d3c7a6e4ded3e64adaec45dca6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMzkzNDIyNDk1YjhkM2M3YTZlNGRlZDNlNjRhZGFlYzQ1ZGNhNmQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-06-03T19:15:53Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-06-03T19:27:51Z"}, "message": "Bump to 1.46", "tree": {"sha": "570760bdbfd5143a9cdb6f2735c984dddaf9c4d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/570760bdbfd5143a9cdb6f2735c984dddaf9c4d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71393422495b8d3c7a6e4ded3e64adaec45dca6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71393422495b8d3c7a6e4ded3e64adaec45dca6d", "html_url": "https://github.com/rust-lang/rust/commit/71393422495b8d3c7a6e4ded3e64adaec45dca6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71393422495b8d3c7a6e4ded3e64adaec45dca6d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4888845674837fd4b55adb66d9322e1973d7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f4888845674837fd4b55adb66d9322e1973d7db", "html_url": "https://github.com/rust-lang/rust/commit/6f4888845674837fd4b55adb66d9322e1973d7db"}], "stats": {"total": 130, "additions": 25, "deletions": 105}, "files": [{"sha": "a4115904ac76f16500d5c6fd6eb834a683041ec9", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -13,7 +13,7 @@ use build_helper::output;\n use crate::Build;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.45.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.46.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "925bc7d3c024e065b8993107d48839259817d5a5", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -2035,11 +2035,7 @@ trait RcBoxPtr<T: ?Sized> {\n         // nevertheless, we insert an abort here to hint LLVM at\n         // an otherwise missed optimization.\n         if strong == 0 || strong == usize::max_value() {\n-            // remove `unsafe` on bootstrap bump\n-            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-            unsafe {\n-                abort();\n-            }\n+            abort();\n         }\n         self.inner().strong.set(strong + 1);\n     }\n@@ -2063,11 +2059,7 @@ trait RcBoxPtr<T: ?Sized> {\n         // nevertheless, we insert an abort here to hint LLVM at\n         // an otherwise missed optimization.\n         if weak == 0 || weak == usize::max_value() {\n-            // remove `unsafe` on bootstrap bump\n-            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-            unsafe {\n-                abort();\n-            }\n+            abort();\n         }\n         self.inner().weak.set(weak + 1);\n     }"}, {"sha": "cd4172d6a2d249eed56a0c461f266d5c4f9cd76b", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -1093,11 +1093,7 @@ impl<T: ?Sized> Clone for Arc<T> {\n         // We abort because such a program is incredibly degenerate, and we\n         // don't care to support it.\n         if old_size > MAX_REFCOUNT {\n-            // remove `unsafe` on bootstrap bump\n-            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-            unsafe {\n-                abort();\n-            }\n+            abort();\n         }\n \n         Self::from_inner(self.ptr)\n@@ -1616,11 +1612,7 @@ impl<T: ?Sized> Weak<T> {\n \n             // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n             if n > MAX_REFCOUNT {\n-                // remove `unsafe` on bootstrap bump\n-                #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-                unsafe {\n-                    abort();\n-                }\n+                abort();\n             }\n \n             // Relaxed is valid for the same reason it is on Arc's Clone impl\n@@ -1767,10 +1759,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n \n         // See comments in Arc::clone() for why we do this (for mem::forget).\n         if old_size > MAX_REFCOUNT {\n-            #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-            unsafe {\n-                abort();\n-            }\n+            abort();\n         }\n \n         Weak { ptr: self.ptr }"}, {"sha": "85076a573b5282b5f5e5c021fd825cf40414ef71", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -54,7 +54,6 @@\n )]\n #![allow(missing_docs)]\n \n-#[cfg(not(bootstrap))]\n use crate::marker::DiscriminantKind;\n use crate::mem;\n \n@@ -1916,11 +1915,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::discriminant`](../../std/mem/fn.discriminant.html)\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n-    #[cfg(not(bootstrap))]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n-    #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n-    #[cfg(bootstrap)]\n-    pub fn discriminant_value<T>(v: &T) -> u64;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `try_fn`\n     /// with the data pointer `data`."}, {"sha": "6040dd31847a9f26f3999525d8e13ab90c5ed683", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -692,25 +692,13 @@ mod impls {\n     issue = \"none\",\n     reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n )]\n-#[cfg_attr(not(bootstrap), lang = \"discriminant_kind\")]\n+#[lang = \"discriminant_kind\"]\n pub trait DiscriminantKind {\n     /// The type of the dicriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n     type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n }\n \n-// Manually implement `DiscriminantKind` for all types during bootstrap\n-// to reduce the required amount of conditional compilation.\n-#[unstable(\n-    feature = \"discriminant_kind\",\n-    issue = \"none\",\n-    reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n-)]\n-#[cfg(bootstrap)]\n-impl<T: ?Sized> DiscriminantKind for T {\n-    type Discriminant = u64;\n-}\n-\n /// Compiler-internal trait used to determine whether a type contains\n /// any `UnsafeCell` internally, but not through an indirection.\n /// This affects, for example, whether a `static` of that type is"}, {"sha": "9bc35ae1f5c280bf59aabcabb6525943f2a663cb", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -25,7 +25,7 @@\n     )\n )]\n #[doc(alias = \"?\")]\n-#[cfg_attr(not(bootstrap), lang = \"try\")]\n+#[lang = \"try\"]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "3ed5e65e11c628684c1ea073b539305ee8a37ee6", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -39,12 +39,7 @@ use crate::panic::{Location, PanicInfo};\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub fn panic(expr: &str) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        // remove `unsafe` (and safety comment) on bootstrap bump\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-        // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe {\n-            super::intrinsics::abort()\n-        }\n+        super::intrinsics::abort()\n     }\n \n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n@@ -62,12 +57,7 @@ pub fn panic(expr: &str) -> ! {\n #[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n fn panic_bounds_check(index: usize, len: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        // remove `unsafe` (and safety comment) on bootstrap bump\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-        // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe {\n-            super::intrinsics::abort()\n-        }\n+        super::intrinsics::abort()\n     }\n \n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n@@ -80,12 +70,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[track_caller]\n pub fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        // remove `unsafe` (and safety comment) on bootstrap bump\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-        // SAFETY: the `abort` intrinsic has no requirements to be called.\n-        unsafe {\n-            super::intrinsics::abort()\n-        }\n+        super::intrinsics::abort()\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call"}, {"sha": "1f812f8df6122092ceeb2026bb1ed045ac1889a6", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -327,8 +327,5 @@ pub unsafe fn cleanup(payload: *mut u8) -> Box<dyn Any + Send> {\n #[lang = \"eh_personality\"]\n #[cfg(not(test))]\n fn rust_eh_personality() {\n-    #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-    unsafe {\n-        core::intrinsics::abort()\n-    }\n+    core::intrinsics::abort()\n }"}, {"sha": "6a120f930ab153542448615d1e8d902a4afa8ba0", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -332,10 +332,7 @@ pub fn panicking() -> bool {\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-        unsafe {\n-            intrinsics::abort()\n-        }\n+        intrinsics::abort()\n     }\n \n     let info = PanicInfo::internal_constructor(Some(msg), Location::caller());\n@@ -401,10 +398,7 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n #[track_caller]\n pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-        unsafe {\n-            intrinsics::abort()\n-        }\n+        intrinsics::abort()\n     }\n \n     rust_panic_with_hook(&mut PanicPayload::new(msg), None, Location::caller());\n@@ -464,10 +458,7 @@ fn rust_panic_with_hook(\n             \"thread panicked while processing \\\n                                        panic. aborting.\\n\"\n         ));\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-        unsafe {\n-            intrinsics::abort()\n-        }\n+        intrinsics::abort()\n     }\n \n     unsafe {\n@@ -502,10 +493,7 @@ fn rust_panic_with_hook(\n             \"thread panicked while panicking. \\\n                                        aborting.\\n\"\n         ));\n-        #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-        unsafe {\n-            intrinsics::abort()\n-        }\n+        intrinsics::abort()\n     }\n \n     rust_panic(payload)"}, {"sha": "898654f21f2ea11e5a90ac3ec453454644beabbd", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -354,11 +354,7 @@ impl<T> Packet<T> {\n \n         // See comments on Arc::clone() on why we do this (for `mem::forget`).\n         if old_count > MAX_REFCOUNT {\n-            // remove `unsafe` on bootstrap bump\n-            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-            unsafe {\n-                abort();\n-            }\n+            abort();\n         }\n     }\n "}, {"sha": "733761671a041e75bffa361e8cc906a26559b4fb", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -358,11 +358,7 @@ impl<T> Packet<T> {\n \n         // See comments on Arc::clone() on why we do this (for `mem::forget`).\n         if old_count > MAX_REFCOUNT {\n-            // remove `unsafe` on bootstrap bump\n-            #[cfg_attr(not(bootstrap), allow(unused_unsafe))]\n-            unsafe {\n-                abort();\n-            }\n+            abort();\n         }\n     }\n "}, {"sha": "8dbc31472d637247ba7409efcbf5f8eba3a10140", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -52,10 +52,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n }\n \n pub fn abort_internal() -> ! {\n-    #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-    unsafe {\n-        core::intrinsics::abort();\n-    }\n+    core::intrinsics::abort();\n }\n \n pub use libc::strlen;"}, {"sha": "69877e68ba8fef998b3e03d28863c0e226a69837", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -314,8 +314,5 @@ pub fn abort_internal() -> ! {\n         llvm_asm!(\"int $$0x29\" :: \"{ecx}\"(7) ::: volatile); // 7 is FAST_FAIL_FATAL_APP_EXIT\n         crate::intrinsics::unreachable();\n     }\n-    #[cfg_attr(not(bootstrap), allow(unused_unsafe))] // remove `unsafe` on bootstrap bump\n-    unsafe {\n-        crate::intrinsics::abort();\n-    }\n+    crate::intrinsics::abort();\n }"}, {"sha": "5e840b9db199497f6c88d9b418579a87afe4b34b", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.(x+1).0` for Cargo where they were released on `date`.\n \n-date: 2020-04-22\n+date: 2020-06-03\n rustc: beta\n cargo: beta\n "}, {"sha": "37fbc2bad468f5f9a258f8c7dc792b778868a1a7", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71393422495b8d3c7a6e4ded3e64adaec45dca6d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=71393422495b8d3c7a6e4ded3e64adaec45dca6d", "patch": "@@ -279,13 +279,13 @@ impl EarlyLintPass for Write {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n-                    let suggestion = expr.map_or_else(\n-                        move || {\n+                    let suggestion = match expr {\n+                        Some(expr) => snippet_with_applicability(cx, expr.span, \"v\", &mut applicability),\n+                        None => {\n                             applicability = Applicability::HasPlaceholders;\n                             Cow::Borrowed(\"v\")\n                         },\n-                        move |expr| snippet_with_applicability(cx, expr.span, \"v\", &mut applicability),\n-                    );\n+                    };\n \n                     span_lint_and_sugg(\n                         cx,"}]}