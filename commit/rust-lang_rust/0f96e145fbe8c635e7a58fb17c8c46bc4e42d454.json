{"sha": "0f96e145fbe8c635e7a58fb17c8c46bc4e42d454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTZlMTQ1ZmJlOGM2MzVlN2E1OGZiMTdjOGM0NmJjNGU0MmQ0NTQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-14T20:32:25Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-14T20:32:25Z"}, "message": "talk about doc(cfg)", "tree": {"sha": "be7083be3013690a24cf164b63b3a9db52ad4d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be7083be3013690a24cf164b63b3a9db52ad4d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f96e145fbe8c635e7a58fb17c8c46bc4e42d454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f96e145fbe8c635e7a58fb17c8c46bc4e42d454", "html_url": "https://github.com/rust-lang/rust/commit/0f96e145fbe8c635e7a58fb17c8c46bc4e42d454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f96e145fbe8c635e7a58fb17c8c46bc4e42d454/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30adb53f46628fa37042543359a269221350b6d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/30adb53f46628fa37042543359a269221350b6d7", "html_url": "https://github.com/rust-lang/rust/commit/30adb53f46628fa37042543359a269221350b6d7"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "245d53e8b796451686360c83566adb0df8b74a04", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0f96e145fbe8c635e7a58fb17c8c46bc4e42d454/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f96e145fbe8c635e7a58fb17c8c46bc4e42d454/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=0f96e145fbe8c635e7a58fb17c8c46bc4e42d454", "patch": "@@ -76,3 +76,55 @@ For more details, check out [the RFC][RFC 1946], and see [the tracking issue][43\n information about what parts of the feature are available.\n \n [43466]: https://github.com/rust-lang/rust/issues/43466\n+\n+## Documenting platform-/feature-specific information\n+\n+Because of the way Rustdoc documents a crate, the documentation it creates is specific to the target\n+rustc compiles for. Anything that's specific to any other target is dropped via `#[cfg]` attribute\n+processing early in the compilation process. However, Rustdoc has a trick up its sleeve to handle\n+platform-specific code if it *does* receive it.\n+\n+Because Rustdoc doesn't need to fully compile a crate to binary, it replaces function bodies with\n+`loop {}` to prevent having to process more than necessary. This means that any code within a\n+function that requires platform-specific pieces is ignored. Combined with a special attribute,\n+`#[doc(cfg(...))]`, you can tell Rustdoc exactly which platform something is supposed to run on,\n+ensuring that doctests are only run on the appropriate platforms.\n+\n+The `#[doc(cfg(...))]` attribute has another effect: When Rustdoc renders documentation for that\n+item, it will be accompanied by a banner explaining that the item is only available on certain\n+platforms.\n+\n+As mentioned earlier, getting the items to Rustdoc requires some extra preparation. The standard\n+library adds a `--cfg dox` flag to every Rustdoc command, but the same thing can be accomplished by\n+adding a feature to your Cargo.toml and adding `--feature dox` (or whatever you choose to name the\n+feature) to your `cargo doc` calls.\n+\n+Either way, once you create an environment for the documentation, you can start to augment your\n+`#[cfg]` attributes to allow both the target platform *and* the documentation configuration to leave\n+the item in. For example, `#[cfg(any(windows, feature = \"dox\"))]` will preserve the item either on\n+Windows or during the documentation process. Then, adding a new attribute `#[doc(cfg(windows))]`\n+will tell Rustdoc that the item is supposed to be used on Windows. For example:\n+\n+```rust\n+#![feature(doc_cfg)]\n+\n+/// Token struct that can only be used on Windows.\n+#[cfg(any(windows, feature = \"dox\"))]\n+#[doc(cfg(windows))]\n+pub struct WindowsToken;\n+\n+/// Token struct that can only be used on Unix.\n+#[cfg(any(unix, feature = \"dox\"))]\n+#[doc(cfg(unix))]\n+pub struct UnixToken;\n+```\n+\n+In this sample, the tokens will only appear on their respective platforms, but they will both appear\n+in documentation.\n+\n+`#[doc(cfg(...))]` was introduced to be used by the standard library and is currently controlled by\n+a feature gate. For more information, see [its chapter in the Unstable Book][unstable-doc-cfg] and\n+[its tracking issue][issue-doc-cfg].\n+\n+[unstable-doc-cfg]: ../unstable-book/language-features/doc-cfg.html\n+[issue-doc-cfg]: https://github.com/rust-lang/rust/issues/43781"}]}