{"sha": "d9484853711132c56528afb91221fe04af529e35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDg0ODUzNzExMTMyYzU2NTI4YWZiOTEyMjFmZTA0YWY1MjllMzU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-16T03:37:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-16T03:37:58Z"}, "message": "Allow empty blocks on one line in more places\n\nIn particular if they contain only a single-line comment.\n\nFixes #493", "tree": {"sha": "c582a7c1c90e21ac75b6f9fc57c9e9982ec6686d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c582a7c1c90e21ac75b6f9fc57c9e9982ec6686d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9484853711132c56528afb91221fe04af529e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9484853711132c56528afb91221fe04af529e35", "html_url": "https://github.com/rust-lang/rust/commit/d9484853711132c56528afb91221fe04af529e35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9484853711132c56528afb91221fe04af529e35/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846d7ad387f6866571da305c84d31bc5c0bf4818", "url": "https://api.github.com/repos/rust-lang/rust/commits/846d7ad387f6866571da305c84d31bc5c0bf4818", "html_url": "https://github.com/rust-lang/rust/commit/846d7ad387f6866571da305c84d31bc5c0bf4818"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "9794ff78093af4f2131a6900c03e2bbf70ac3839", "filename": "src/expr.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cmp::Ordering;\n+use std::cmp::{Ordering, min};\n use std::borrow::Borrow;\n use std::mem::swap;\n use std::ops::Deref;\n@@ -595,9 +595,19 @@ impl Rewrite for ast::Block {\n         // width is used only for the single line case: either the empty block `{}`,\n         // or an unsafe expression `unsafe { e }`.\n \n+        if self.stmts.is_empty() && !block_contains_comment(self, context.codemap) && width >= 2 {\n+            return Some(\"{}\".to_owned());\n+        }\n+\n+        // If a block contains only a single-line comment, then leave it on one line.\n         let user_str = context.snippet(self.span);\n-        if user_str == \"{}\" && width >= 2 {\n-            return Some(user_str);\n+        let user_str = user_str.trim();\n+        if user_str.starts_with('{') && user_str.ends_with('}') {\n+            let comment_str = user_str[1..user_str.len() - 1].trim();\n+            if self.stmts.is_empty() && !comment_str.contains('\\n') &&\n+               !comment_str.starts_with(\"//\") && comment_str.len() + 4 <= width {\n+                return Some(format!(\"{{ {} }}\", comment_str));\n+            }\n         }\n \n         let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n@@ -870,11 +880,17 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             }\n         }\n \n-        // This is used only for the empty block case: `{}`.\n+        // This is used only for the empty block case: `{}`. So, we use 1 if we know\n+        // we should avoid the single line case.\n         // 2 = spaces after keyword and condition.\n         let block_width = try_opt!(width.checked_sub(label_string.len() + self.keyword.len() +\n                                                      extra_offset(&pat_expr_string, inner_offset) +\n                                                      2));\n+        let block_width = if self.else_block.is_some() || self.nested_if {\n+            min(1, block_width)\n+        } else {\n+            block_width\n+        };\n \n         let block_str = try_opt!(self.block.rewrite(context, block_width, offset));\n \n@@ -949,7 +965,9 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                 }\n                 _ => {\n                     last_in_chain = true;\n-                    else_block.rewrite(context, width, offset)\n+                    // When rewriting a block, the width is only used for single line\n+                    // blocks, passing 1 lets us avoid that.\n+                    else_block.rewrite(context, min(1, width), offset)\n                 }\n             };\n \n@@ -1021,8 +1039,8 @@ fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n // FIXME: incorrectly returns false when comment is contained completely within\n // the expression.\n pub fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    block.stmts.len() == 1 && stmt_is_expr(&block.stmts[0]) &&\n-    !block_contains_comment(block, codemap)\n+    (block.stmts.len() == 1 && stmt_is_expr(&block.stmts[0]) &&\n+     !block_contains_comment(block, codemap))\n }\n \n /// Checks whether a block contains at most one statement or expression, and no comments."}, {"sha": "ea7eeb605244a57e4c4c14c789b7c68653e05477", "filename": "tests/source/chains-visual.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Fsource%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Fsource%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains-visual.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -95,11 +95,11 @@ fn floaters() {\n         .bar()\n         .baz();\n \n-    Foo { x: val } .baz(|| { /*force multiline    */    }) .quux(); \n+    Foo { x: val } .baz(|| { force(); multiline();    }) .quux(); \n \n     Foo { y: i_am_multi_line, z: ok }\n         .baz(|| {\n-            // force multiline\n+            force(); multiline();\n         })\n         .quux(); \n "}, {"sha": "7fcda72d83d19034f3f3f4dcd3a71e3306483e00", "filename": "tests/source/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -93,11 +93,11 @@ fn floaters() {\n         .bar()\n         .baz();\n \n-    Foo { x: val } .baz(|| { /*force multiline    */    }) .quux(); \n+    Foo { x: val } .baz(|| { force(); multiline();    }) .quux(); \n \n     Foo { y: i_am_multi_line, z: ok }\n         .baz(|| {\n-            // force multiline\n+            force(); multiline();\n         })\n         .quux(); \n "}, {"sha": "aff6f17052992eda4e1f2c2ba9361f8e4e35f456", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -105,7 +105,8 @@ fn floaters() {\n \n     Foo { x: val }\n         .baz(|| {\n-            // force multiline\n+            force();\n+            multiline();\n         })\n         .quux();\n \n@@ -114,7 +115,8 @@ fn floaters() {\n         z: ok,\n     }\n     .baz(|| {\n-        // force multiline\n+        force();\n+        multiline();\n     })\n     .quux();\n "}, {"sha": "d9e7d3a58fea10f1a02554b6d484eaf797e89640", "filename": "tests/target/chains.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -102,7 +102,8 @@ fn floaters() {\n \n     Foo { x: val }\n         .baz(|| {\n-            // force multiline\n+            force();\n+            multiline();\n         })\n         .quux();\n \n@@ -111,7 +112,8 @@ fn floaters() {\n             z: ok,\n         }\n         .baz(|| {\n-            // force multiline\n+            force();\n+            multiline();\n         })\n         .quux();\n "}, {"sha": "6b1ae7ec55594e342fef71113ae21ef80b00a346", "filename": "tests/target/expr.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -60,8 +60,7 @@ fn foo() -> bool {\n         1111 + 2222 {}\n \n     if let (some_very_large,\n-            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n-    }\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {}\n \n     let test = if true { 5 } else { 3 };\n \n@@ -136,12 +135,8 @@ fn baz() {\n fn qux() {\n     {}\n     // FIXME this one could be done better.\n-    {\n-        // a block with a comment\n-    }\n-    {\n-\n-    }\n+    { /* a block with a comment */ }\n+    {}\n     {\n         // A block with a comment.\n     }\n@@ -293,12 +288,10 @@ fn complex_if_else() {\n fn issue1106() {\n     {\n         if let hir::ItemEnum(ref enum_def, ref generics) =\n-            self.ast_map.expect_item(enum_node_id).node {\n-        }\n+            self.ast_map.expect_item(enum_node_id).node {}\n     }\n \n     for entry in WalkDir::new(path)\n         .into_iter()\n-        .filter_entry(|entry| exclusions.filter_entry(entry)) {\n-    }\n+        .filter_entry(|entry| exclusions.filter_entry(entry)) {}\n }"}, {"sha": "43b00774a22fff05306621dd44091114001405d6", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -31,8 +31,7 @@ fn main() {\n \tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n \n \tif let (some_very_large,\n-\t        tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n-\t}\n+\t        tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {}\n \n \tif cond() {\n \t\tsomething();"}, {"sha": "d41cdb65cd0a94dc8b4a955a2da5cb72a45882d0", "filename": "tests/target/issue-447.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fissue-447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fissue-447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-447.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -36,6 +36,5 @@ fn main() {\n     let Some(x) = y\n     // shouldn't be dropped\n     // shouldn't be dropped\n-    {\n-    }\n+    {}\n }"}, {"sha": "7ebffdc2889bec2a998576619e0ba883b2a812f4", "filename": "tests/target/match.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9484853711132c56528afb91221fe04af529e35/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=d9484853711132c56528afb91221fe04af529e35", "patch": "@@ -78,9 +78,7 @@ fn main() {\n     };\n \n     match x {\n-        y => {\n-            // Block with comment. Preserve me.\n-        }\n+        y => { /*Block with comment. Preserve me.*/ }\n         z => {\n             stmt();\n         }"}]}