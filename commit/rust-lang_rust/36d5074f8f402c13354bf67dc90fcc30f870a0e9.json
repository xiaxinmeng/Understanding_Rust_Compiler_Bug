{"sha": "36d5074f8f402c13354bf67dc90fcc30f870a0e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDUwNzRmOGY0MDJjMTMzNTRiZjY3ZGM5MGZjYzMwZjg3MGEwZTk=", "commit": {"author": {"name": "Ted Horst", "email": "ted.horst@earthlink.net", "date": "2012-02-08T13:31:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-11T03:42:32Z"}, "message": "log to stderr instead of stdout\n\nincludes rustc diagnostics\nruntest updated to check stderr for errors", "tree": {"sha": "fd12cb1d535b67963c98bbd6e1b46bad0f1fdcc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd12cb1d535b67963c98bbd6e1b46bad0f1fdcc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d5074f8f402c13354bf67dc90fcc30f870a0e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d5074f8f402c13354bf67dc90fcc30f870a0e9", "html_url": "https://github.com/rust-lang/rust/commit/36d5074f8f402c13354bf67dc90fcc30f870a0e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d5074f8f402c13354bf67dc90fcc30f870a0e9/comments", "author": {"login": "tedhorst", "id": 113629, "node_id": "MDQ6VXNlcjExMzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/113629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedhorst", "html_url": "https://github.com/tedhorst", "followers_url": "https://api.github.com/users/tedhorst/followers", "following_url": "https://api.github.com/users/tedhorst/following{/other_user}", "gists_url": "https://api.github.com/users/tedhorst/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedhorst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedhorst/subscriptions", "organizations_url": "https://api.github.com/users/tedhorst/orgs", "repos_url": "https://api.github.com/users/tedhorst/repos", "events_url": "https://api.github.com/users/tedhorst/events{/privacy}", "received_events_url": "https://api.github.com/users/tedhorst/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17110fb28bf7e73fbefc05a1d112e2203bd5e7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/17110fb28bf7e73fbefc05a1d112e2203bd5e7de", "html_url": "https://github.com/rust-lang/rust/commit/17110fb28bf7e73fbefc05a1d112e2203bd5e7de"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "427bac77197d5b298ac41f08c0438fbf98461ea5", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36d5074f8f402c13354bf67dc90fcc30f870a0e9/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d5074f8f402c13354bf67dc90fcc30f870a0e9/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=36d5074f8f402c13354bf67dc90fcc30f870a0e9", "patch": "@@ -159,16 +159,16 @@ fn diagnosticcolor(lvl: level) -> u8 {\n \n fn print_diagnostic(topic: str, lvl: level, msg: str) {\n     if str::is_not_empty(topic) {\n-        io::stdout().write_str(#fmt[\"%s \", topic]);\n+        io::stderr().write_str(#fmt[\"%s \", topic]);\n     }\n     if term::color_supported() {\n-        term::fg(io::stdout(), diagnosticcolor(lvl));\n+        term::fg(io::stderr(), diagnosticcolor(lvl));\n     }\n-    io::stdout().write_str(#fmt[\"%s:\", diagnosticstr(lvl)]);\n+    io::stderr().write_str(#fmt[\"%s:\", diagnosticstr(lvl)]);\n     if term::color_supported() {\n-        term::reset(io::stdout());\n+        term::reset(io::stderr());\n     }\n-    io::stdout().write_str(#fmt[\" %s\\n\", msg]);\n+    io::stderr().write_str(#fmt[\" %s\\n\", msg]);\n }\n \n fn emit(cmsp: option<(codemap::codemap, span)>,\n@@ -202,10 +202,10 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n     }\n     // Print the offending lines\n     for line: uint in display_lines {\n-        io::stdout().write_str(#fmt[\"%s:%u \", fm.name, line + 1u]);\n+        io::stderr().write_str(#fmt[\"%s:%u \", fm.name, line + 1u]);\n         let s = codemap::get_line(fm, line as int);\n         if !str::ends_with(s, \"\\n\") { s += \"\\n\"; }\n-        io::stdout().write_str(s);\n+        io::stderr().write_str(s);\n     }\n     if elided {\n         let last_line = display_lines[vec::len(display_lines) - 1u];\n@@ -214,7 +214,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n         let out = \"\";\n         while indent > 0u { out += \" \"; indent -= 1u; }\n         out += \"...\\n\";\n-        io::stdout().write_str(out);\n+        io::stderr().write_str(out);\n     }\n \n \n@@ -239,7 +239,7 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n             let width = hi.col - lo.col - 1u;\n             while width > 0u { str::push_char(s, '~'); width -= 1u; }\n         }\n-        io::stdout().write_str(s + \"\\n\");\n+        io::stderr().write_str(s + \"\\n\");\n     }\n }\n "}, {"sha": "cf5a57c60defd136406b8b46abe29cb63674198a", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36d5074f8f402c13354bf67dc90fcc30f870a0e9/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d5074f8f402c13354bf67dc90fcc30f870a0e9/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=36d5074f8f402c13354bf67dc90fcc30f870a0e9", "patch": "@@ -198,7 +198,7 @@ fn check_error_patterns(props: test_props,\n \n     let next_err_idx = 0u;\n     let next_err_pat = props.error_patterns[next_err_idx];\n-    for line: str in str::split_byte(procres.stdout, '\\n' as u8) {\n+    for line: str in str::split_byte(procres.stderr, '\\n' as u8) {\n         if str::find(line, next_err_pat) > 0 {\n             #debug(\"found error pattern %s\", next_err_pat);\n             next_err_idx += 1u;\n@@ -245,7 +245,7 @@ fn check_expected_errors(expected_errors: [errors::expected_error],\n     //    filename:line1:col1: line2:col2: *warning:* msg\n     // where line1:col1: is the starting point, line2:col2:\n     // is the ending point, and * represents ANSI color codes.\n-    for line: str in str::split_byte(procres.stdout, '\\n' as u8) {\n+    for line: str in str::split_byte(procres.stderr, '\\n' as u8) {\n         let was_expected = false;\n         vec::iteri(expected_errors) {|i, ee|\n             if !found_flags[i] {"}, {"sha": "9192af511d95383add00facabf3264ea4a10bc1f", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36d5074f8f402c13354bf67dc90fcc30f870a0e9/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/36d5074f8f402c13354bf67dc90fcc30f870a0e9/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=36d5074f8f402c13354bf67dc90fcc30f870a0e9", "patch": "@@ -25,11 +25,7 @@ rust_srv::realloc(void *p, size_t bytes) {\n \n void\n rust_srv::log(char const *msg) {\n-    printf(\"rust: %s\\n\", msg);\n-    // FIXME: flushing each time is expensive, but at the moment\n-    // necessary to get output through before a rust_task::fail\n-    // call. This should be changed.\n-    fflush(stdout);\n+    fprintf(stderr, \"rust: %s\\n\", msg);\n }\n \n void"}]}