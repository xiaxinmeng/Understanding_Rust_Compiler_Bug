{"sha": "a00e24d76a9ac03b146d3bf89e2161b2466c6551", "node_id": "C_kwDOAAsO6NoAKGEwMGUyNGQ3NmE5YWMwM2IxNDZkM2JmODllMjE2MWIyNDY2YzY1NTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T10:35:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-08T10:35:46Z"}, "message": "Auto merge of #107529 - Zoxc:inline-tweak-profile, r=cjgillot\n\nOptimize query_cache_hit to reduce code size of the query hot path.\n\nA small tweak which improves performance on check builds by 0.33% and reduces `rustc_driver` size by 1%.\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check</td><td align=\"right\">1.7978s</td><td align=\"right\">1.7980s</td><td align=\"right\"> 0.01%</td><td align=\"right\">1.7930s</td><td align=\"right\"> -0.27%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check</td><td align=\"right\">0.2594s</td><td align=\"right\">0.2591s</td><td align=\"right\"> -0.12%</td><td align=\"right\">0.2592s</td><td align=\"right\"> -0.09%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check</td><td align=\"right\">6.2522s</td><td align=\"right\">6.2540s</td><td align=\"right\"> 0.03%</td><td align=\"right\">6.2358s</td><td align=\"right\"> -0.26%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check</td><td align=\"right\">1.5889s</td><td align=\"right\">1.5880s</td><td align=\"right\"> -0.05%</td><td align=\"right\">1.5799s</td><td align=\"right\"> -0.57%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check</td><td align=\"right\">0.9941s</td><td align=\"right\">0.9939s</td><td align=\"right\"> -0.02%</td><td align=\"right\">0.9893s</td><td align=\"right\"> -0.49%</td></tr><tr><td>Total</td><td align=\"right\">10.8925s</td><td align=\"right\">10.8930s</td><td align=\"right\"> 0.01%</td><td align=\"right\">10.8572s</td><td align=\"right\"> -0.32%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9997s</td><td align=\"right\"> -0.03%</td><td align=\"right\">0.9967s</td><td align=\"right\"> -0.33%</td></tr></table>\n\nr? `@cjgillot`", "tree": {"sha": "de7ae791088760076d7ab4de19980dedf4c70dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7ae791088760076d7ab4de19980dedf4c70dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00e24d76a9ac03b146d3bf89e2161b2466c6551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e24d76a9ac03b146d3bf89e2161b2466c6551", "html_url": "https://github.com/rust-lang/rust/commit/a00e24d76a9ac03b146d3bf89e2161b2466c6551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00e24d76a9ac03b146d3bf89e2161b2466c6551/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "html_url": "https://github.com/rust-lang/rust/commit/6eb9f2dd6752f591906281d8aa5e16a8c51a8801"}, {"sha": "9539737008852fffc3067dbfaa96a0ca0603b1b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9539737008852fffc3067dbfaa96a0ca0603b1b3", "html_url": "https://github.com/rust-lang/rust/commit/9539737008852fffc3067dbfaa96a0ca0603b1b3"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "7fab8954cb19f1911ff8654061770315bbf0e0a7", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=a00e24d76a9ac03b146d3bf89e2161b2466c6551", "patch": "@@ -11,6 +11,7 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(cell_leak)]\n+#![feature(core_intrinsics)]\n #![feature(extend_one)]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]"}, {"sha": "3aca03f6e5c63cbae99bda4e58c09b05cddcf065", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=a00e24d76a9ac03b146d3bf89e2161b2466c6551", "patch": "@@ -88,6 +88,7 @@ use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::error::Error;\n use std::fs;\n+use std::intrinsics::unlikely;\n use std::path::Path;\n use std::process;\n use std::sync::Arc;\n@@ -395,11 +396,18 @@ impl SelfProfilerRef {\n     /// Record a query in-memory cache hit.\n     #[inline(always)]\n     pub fn query_cache_hit(&self, query_invocation_id: QueryInvocationId) {\n-        self.instant_query_event(\n-            |profiler| profiler.query_cache_hit_event_kind,\n-            query_invocation_id,\n-            EventFilter::QUERY_CACHE_HITS,\n-        );\n+        #[inline(never)]\n+        #[cold]\n+        fn cold_call(profiler_ref: &SelfProfilerRef, query_invocation_id: QueryInvocationId) {\n+            profiler_ref.instant_query_event(\n+                |profiler| profiler.query_cache_hit_event_kind,\n+                query_invocation_id,\n+            );\n+        }\n+\n+        if unlikely(self.event_filter_mask.contains(EventFilter::QUERY_CACHE_HITS)) {\n+            cold_call(self, query_invocation_id);\n+        }\n     }\n \n     /// Start profiling a query being blocked on a concurrent execution.\n@@ -444,20 +452,15 @@ impl SelfProfilerRef {\n         &self,\n         event_kind: fn(&SelfProfiler) -> StringId,\n         query_invocation_id: QueryInvocationId,\n-        event_filter: EventFilter,\n     ) {\n-        drop(self.exec(event_filter, |profiler| {\n-            let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = get_thread_id();\n-\n-            profiler.profiler.record_instant_event(\n-                event_kind(profiler),\n-                EventId::from_virtual(event_id),\n-                thread_id,\n-            );\n-\n-            TimingGuard::none()\n-        }));\n+        let event_id = StringId::new_virtual(query_invocation_id.0);\n+        let thread_id = get_thread_id();\n+        let profiler = self.profiler.as_ref().unwrap();\n+        profiler.profiler.record_instant_event(\n+            event_kind(profiler),\n+            EventId::from_virtual(event_id),\n+            thread_id,\n+        );\n     }\n \n     pub fn with_profiler(&self, f: impl FnOnce(&SelfProfiler)) {"}, {"sha": "9443ded704d63059c8ae48cdd7acc859876ecc74", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=a00e24d76a9ac03b146d3bf89e2161b2466c6551", "patch": "@@ -47,7 +47,7 @@ impl DepNodeIndex {\n }\n \n impl From<DepNodeIndex> for QueryInvocationId {\n-    #[inline]\n+    #[inline(always)]\n     fn from(dep_node_index: DepNodeIndex) -> Self {\n         QueryInvocationId(dep_node_index.as_u32())\n     }"}, {"sha": "f59d71124ecbf4452d6ada8139d557ac3cfd2c10", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e24d76a9ac03b146d3bf89e2161b2466c6551/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=a00e24d76a9ac03b146d3bf89e2161b2466c6551", "patch": "@@ -346,9 +346,7 @@ where\n {\n     match cache.lookup(&key) {\n         Some((value, index)) => {\n-            if std::intrinsics::unlikely(tcx.profiler().enabled()) {\n-                tcx.profiler().query_cache_hit(index.into());\n-            }\n+            tcx.profiler().query_cache_hit(index.into());\n             tcx.dep_graph().read_index(index);\n             Some(value)\n         }\n@@ -408,9 +406,7 @@ where\n                 panic!(\"value must be in cache after waiting\")\n             };\n \n-            if std::intrinsics::unlikely(qcx.dep_context().profiler().enabled()) {\n-                qcx.dep_context().profiler().query_cache_hit(index.into());\n-            }\n+            qcx.dep_context().profiler().query_cache_hit(index.into());\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n \n             (v, Some(index))\n@@ -776,9 +772,7 @@ where\n     // Ensure that only one of them runs the query.\n     let cache = Q::query_cache(qcx);\n     if let Some((_, index)) = cache.lookup(&key) {\n-        if std::intrinsics::unlikely(qcx.dep_context().profiler().enabled()) {\n-            qcx.dep_context().profiler().query_cache_hit(index.into());\n-        }\n+        qcx.dep_context().profiler().query_cache_hit(index.into());\n         return;\n     }\n "}]}