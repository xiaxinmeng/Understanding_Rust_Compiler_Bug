{"sha": "cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYmY0N2IwMDIzNTg1YTMwZDgyNWI1YzVkYThlMmZiOWQ2ZmMzMzc=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-23T19:43:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:37Z"}, "message": "review fixes", "tree": {"sha": "bf4aa2ccbdb1bb45555f52856b7279442fccba46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4aa2ccbdb1bb45555f52856b7279442fccba46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "html_url": "https://github.com/rust-lang/rust/commit/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a34f9399015bbd351113675928295f42f74369", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a34f9399015bbd351113675928295f42f74369", "html_url": "https://github.com/rust-lang/rust/commit/34a34f9399015bbd351113675928295f42f74369"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "83a021c2fafadb5e412f61bbdabd55f138713292", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "patch": "@@ -50,7 +50,6 @@ pub enum TaskResult {\n     AddRoot(AddRootResult),\n     HandleChange(WatcherChange),\n     LoadChange(WatcherChangeData),\n-    NoOp,\n }\n \n impl fmt::Debug for TaskResult {\n@@ -59,7 +58,6 @@ impl fmt::Debug for TaskResult {\n             TaskResult::AddRoot(..) => f.write_str(\"TaskResult::AddRoot(..)\"),\n             TaskResult::HandleChange(c) => write!(f, \"TaskResult::HandleChange({:?})\", c),\n             TaskResult::LoadChange(c) => write!(f, \"TaskResult::LoadChange({:?})\", c),\n-            TaskResult::NoOp => f.write_str(\"TaskResult::NoOp\"),\n         }\n     }\n }\n@@ -78,7 +76,7 @@ impl Worker {\n             thread_worker::spawn(\"vfs\", 128, move |input_receiver, output_sender| {\n                 input_receiver\n                     .into_iter()\n-                    .map(|t| handle_task(t, &watcher_clone))\n+                    .filter_map(|t| handle_task(t, &watcher_clone))\n                     .try_for_each(|it| output_sender.send(it))\n                     .unwrap()\n             });\n@@ -118,18 +116,12 @@ fn watch(\n     filter_entry: &RootFilter,\n     emit_for_existing: bool,\n ) {\n-    let mut watcher = watcher.lock();\n-    let watcher = match *watcher {\n-        Some(ref mut w) => w,\n-        None => {\n-            // watcher dropped or couldn't start\n-            return;\n-        }\n-    };\n-    watcher.watch_recursive(dir, filter_entry, emit_for_existing)\n+    if let Some(watcher) = watcher.lock().as_mut() {\n+        watcher.watch_recursive(dir, filter_entry, emit_for_existing)\n+    }\n }\n \n-fn handle_task(task: Task, watcher: &Arc<Mutex<Option<Watcher>>>) -> TaskResult {\n+fn handle_task(task: Task, watcher: &Arc<Mutex<Option<Watcher>>>) -> Option<TaskResult> {\n     match task {\n         Task::AddRoot {\n             root,\n@@ -145,22 +137,19 @@ fn handle_task(task: Task, watcher: &Arc<Mutex<Option<Watcher>>>) -> TaskResult\n                 nested_roots.as_slice(),\n             );\n             log::debug!(\"... loaded {}\", path.as_path().display());\n-            TaskResult::AddRoot(AddRootResult { root, files })\n+            Some(TaskResult::AddRoot(AddRootResult { root, files }))\n         }\n         Task::HandleChange(change) => {\n             // forward as is because Vfs has to decide if we should load it\n-            TaskResult::HandleChange(change)\n+            Some(TaskResult::HandleChange(change))\n         }\n         Task::LoadChange(change) => {\n             log::debug!(\"loading {:?} ...\", change);\n-            match load_change(change) {\n-                Some(data) => TaskResult::LoadChange(data),\n-                None => TaskResult::NoOp,\n-            }\n+            load_change(change).map(TaskResult::LoadChange)\n         }\n         Task::Watch { dir, root_filter } => {\n             watch(watcher, &dir, root_filter.as_ref(), true);\n-            TaskResult::NoOp\n+            None\n         }\n     }\n }"}, {"sha": "f6b45c18a7f2d63322b6133fe7eca2abe364a78c", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "patch": "@@ -259,7 +259,6 @@ impl Vfs {\n                     }\n                 }\n             },\n-            TaskResult::NoOp => {}\n         }\n     }\n "}, {"sha": "bf44e97c579dd10831d2d121d495fce949dee6b1", "filename": "crates/ra_vfs/tests/vfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfbf47b0023585a30d825b5c5da8e2fb9d6fc337/crates%2Fra_vfs%2Ftests%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Ftests%2Fvfs.rs?ref=cfbf47b0023585a30d825b5c5da8e2fb9d6fc337", "patch": "@@ -117,7 +117,7 @@ fn test_vfs_works() -> std::io::Result<()> {\n \n     fs::create_dir_all(dir.path().join(\"a/sub1/sub2\")).unwrap();\n     fs::write(dir.path().join(\"a/sub1/sub2/new.rs\"), \"new hello\").unwrap();\n-    process_tasks(&mut vfs, 4);\n+    process_tasks(&mut vfs, 3);\n     assert_match!(\n         vfs.commit_changes().as_slice(),\n         [VfsChange::AddFile { text, path, .. }],"}]}