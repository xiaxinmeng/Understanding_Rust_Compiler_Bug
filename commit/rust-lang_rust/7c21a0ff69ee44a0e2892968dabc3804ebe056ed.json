{"sha": "7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMjFhMGZmNjllZTQ0YTBlMjg5Mjk2OGRhYmMzODA0ZWJlMDU2ZWQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-26T06:52:57Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:25Z"}, "message": "Update rustc_driver tests.", "tree": {"sha": "f38c0984d9e80da988f42efb2df033d9646c5551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f38c0984d9e80da988f42efb2df033d9646c5551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "html_url": "https://github.com/rust-lang/rust/commit/7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c21a0ff69ee44a0e2892968dabc3804ebe056ed/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d442f7756161eb36531772ed905680385f87f1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d442f7756161eb36531772ed905680385f87f1a4", "html_url": "https://github.com/rust-lang/rust/commit/d442f7756161eb36531772ed905680385f87f1a4"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "8cb578ad2580aa587d7ae128b6d56983b93b1e29", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c21a0ff69ee44a0e2892968dabc3804ebe056ed/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c21a0ff69ee44a0e2892968dabc3804ebe056ed/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=7c21a0ff69ee44a0e2892968dabc3804ebe056ed", "patch": "@@ -295,58 +295,62 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         })\n     }\n \n-    pub fn t_param(&self, space: subst::ParamSpace, index: uint) -> Ty<'tcx> {\n+    pub fn t_param(&self, space: subst::ParamSpace, index: u32) -> Ty<'tcx> {\n         ty::mk_param(self.infcx.tcx, space, index, ast_util::local_def(ast::DUMMY_NODE_ID))\n     }\n \n     pub fn re_early_bound(&self,\n                           space: subst::ParamSpace,\n-                          index: uint,\n+                          index: u32,\n                           name: &'static str)\n                           -> ty::Region\n     {\n         let name = token::intern(name);\n         ty::ReEarlyBound(ast::DUMMY_NODE_ID, space, index, name)\n     }\n \n-    pub fn re_late_bound_with_debruijn(&self, id: uint, debruijn: ty::DebruijnIndex) -> ty::Region {\n+    pub fn re_late_bound_with_debruijn(&self, id: u32, debruijn: ty::DebruijnIndex) -> ty::Region {\n         ty::ReLateBound(debruijn, ty::BrAnon(id))\n     }\n \n     pub fn t_rptr(&self, r: ty::Region) -> Ty<'tcx> {\n-        ty::mk_imm_rptr(self.infcx.tcx, r, ty::mk_int())\n+        ty::mk_imm_rptr(self.infcx.tcx, self.infcx.tcx.mk_region(r), ty::mk_int())\n     }\n \n-    pub fn t_rptr_late_bound(&self, id: uint) -> Ty<'tcx> {\n+    pub fn t_rptr_late_bound(&self, id: u32) -> Ty<'tcx> {\n+        let r = self.re_late_bound_with_debruijn(id, ty::DebruijnIndex::new(1));\n         ty::mk_imm_rptr(self.infcx.tcx,\n-                        self.re_late_bound_with_debruijn(id, ty::DebruijnIndex::new(1)),\n+                        self.infcx.tcx.mk_region(r),\n                         ty::mk_int())\n     }\n \n     pub fn t_rptr_late_bound_with_debruijn(&self,\n-                                           id: uint,\n+                                           id: u32,\n                                            debruijn: ty::DebruijnIndex)\n                                            -> Ty<'tcx> {\n+        let r = self.re_late_bound_with_debruijn(id, debruijn);\n         ty::mk_imm_rptr(self.infcx.tcx,\n-                        self.re_late_bound_with_debruijn(id, debruijn),\n+                        self.infcx.tcx.mk_region(r),\n                         ty::mk_int())\n     }\n \n     pub fn t_rptr_scope(&self, id: ast::NodeId) -> Ty<'tcx> {\n-        ty::mk_imm_rptr(self.infcx.tcx, ty::ReScope(CodeExtent::from_node_id(id)), ty::mk_int())\n+        let r = ty::ReScope(CodeExtent::from_node_id(id));\n+        ty::mk_imm_rptr(self.infcx.tcx, self.infcx.tcx.mk_region(r), ty::mk_int())\n     }\n \n-    pub fn re_free(&self, nid: ast::NodeId, id: uint) -> ty::Region {\n+    pub fn re_free(&self, nid: ast::NodeId, id: u32) -> ty::Region {\n         ty::ReFree(ty::FreeRegion { scope: CodeExtent::from_node_id(nid),\n                                     bound_region: ty::BrAnon(id)})\n     }\n \n-    pub fn t_rptr_free(&self, nid: ast::NodeId, id: uint) -> Ty<'tcx> {\n-        ty::mk_imm_rptr(self.infcx.tcx, self.re_free(nid, id), ty::mk_int())\n+    pub fn t_rptr_free(&self, nid: ast::NodeId, id: u32) -> Ty<'tcx> {\n+        let r = self.re_free(nid, id);\n+        ty::mk_imm_rptr(self.infcx.tcx, self.infcx.tcx.mk_region(r), ty::mk_int())\n     }\n \n     pub fn t_rptr_static(&self) -> Ty<'tcx> {\n-        ty::mk_imm_rptr(self.infcx.tcx, ty::ReStatic, ty::mk_int())\n+        ty::mk_imm_rptr(self.infcx.tcx, self.infcx.tcx.mk_region(ty::ReStatic), ty::mk_int())\n     }\n \n     pub fn dummy_type_trace(&self) -> infer::TypeTrace<'tcx> {"}]}