{"sha": "83bb430663b35989cfc968550196c64a7b173cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYmI0MzA2NjNiMzU5ODljZmM5Njg1NTAxOTZjNjRhN2IxNzNjZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-13T16:07:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-10-13T18:35:19Z"}, "message": "Revert \"rustc_resolve: move extern_prelude from Resolver to Session.\"\n\nThis reverts commit e90985acdec9928da9f6d157cfeb64f0ee98bffe.", "tree": {"sha": "f783bb5d8a2e4c372b9051f4c191b3f803464c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f783bb5d8a2e4c372b9051f4c191b3f803464c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83bb430663b35989cfc968550196c64a7b173cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83bb430663b35989cfc968550196c64a7b173cf4", "html_url": "https://github.com/rust-lang/rust/commit/83bb430663b35989cfc968550196c64a7b173cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83bb430663b35989cfc968550196c64a7b173cf4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51752774bbbe48d2aabe53c86e9e91ed3a73a5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51752774bbbe48d2aabe53c86e9e91ed3a73a5d", "html_url": "https://github.com/rust-lang/rust/commit/f51752774bbbe48d2aabe53c86e9e91ed3a73a5d"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "8e06191f3dd7feee920c7bd4a449ba0623793361", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=83bb430663b35989cfc968550196c64a7b173cf4", "patch": "@@ -35,7 +35,6 @@ use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n-use syntax::symbol::Symbol;\n use syntax::parse::{self, ParseSess};\n use syntax_pos::{MultiSpan, Span};\n use util::profiling::SelfProfiler;\n@@ -166,10 +165,6 @@ pub struct Session {\n \n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n-\n-    /// All the crate names specified with `--extern`, and the builtin ones.\n-    /// Starting with the Rust 2018 edition, absolute paths resolve in this set.\n-    pub extern_prelude: FxHashSet<Symbol>,\n }\n \n pub struct PerfStats {\n@@ -1149,18 +1144,6 @@ pub fn build_session_(\n         CguReuseTracker::new_disabled()\n     };\n \n-\n-    let mut extern_prelude: FxHashSet<Symbol> =\n-        sopts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n-\n-    // HACK(eddyb) this ignores the `no_{core,std}` attributes.\n-    // FIXME(eddyb) warn (somewhere) if core/std is used with `no_{core,std}`.\n-    // if !attr::contains_name(&krate.attrs, \"no_core\") {\n-    // if !attr::contains_name(&krate.attrs, \"no_std\") {\n-    extern_prelude.insert(Symbol::intern(\"core\"));\n-    extern_prelude.insert(Symbol::intern(\"std\"));\n-    extern_prelude.insert(Symbol::intern(\"meta\"));\n-\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1236,7 +1219,6 @@ pub fn build_session_(\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n         driver_lint_caps: FxHashMap(),\n-        extern_prelude,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "74d1ae96e794f6c486a4485028ed5c49ca157322", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=83bb430663b35989cfc968550196c64a7b173cf4", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         // Need to clone else we can't call `resolve_path` without a borrow error. We also store\n         // into a `BTreeMap` so we can get consistent ordering (and therefore the same diagnostic)\n         // each time.\n-        let external_crate_names: BTreeSet<Symbol> = self.resolver.session.extern_prelude\n+        let external_crate_names: BTreeSet<Symbol> = self.resolver.extern_prelude\n             .clone().drain().collect();\n \n         // Insert a new path segment that we can replace."}, {"sha": "1ad41fa058244df0776ca7628f5d47f9906be0e8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=83bb430663b35989cfc968550196c64a7b173cf4", "patch": "@@ -1360,6 +1360,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n+    extern_prelude: FxHashSet<Name>,\n \n     /// n.b. This is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -1676,6 +1677,17 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         DefCollector::new(&mut definitions, Mark::root())\n             .collect_root(crate_name, session.local_crate_disambiguator());\n \n+        let mut extern_prelude: FxHashSet<Name> =\n+            session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect();\n+\n+        // HACK(eddyb) this ignore the `no_{core,std}` attributes.\n+        // FIXME(eddyb) warn (elsewhere) if core/std is used with `no_{core,std}`.\n+        // if !attr::contains_name(&krate.attrs, \"no_core\") {\n+        // if !attr::contains_name(&krate.attrs, \"no_std\") {\n+        extern_prelude.insert(Symbol::intern(\"core\"));\n+        extern_prelude.insert(Symbol::intern(\"std\"));\n+        extern_prelude.insert(Symbol::intern(\"meta\"));\n+\n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),\n                            arenas.alloc_invocation_data(InvocationData::root(graph_root)));\n@@ -1694,6 +1706,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             // AST.\n             graph_root,\n             prelude: None,\n+            extern_prelude,\n \n             has_self: FxHashSet(),\n             field_names: FxHashMap(),\n@@ -1966,7 +1979,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n \n         if !module.no_implicit_prelude {\n             // `record_used` means that we don't try to load crates during speculative resolution\n-            if record_used && ns == TypeNS && self.session.extern_prelude.contains(&ident.name) {\n+            if record_used && ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n                 let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(&crate_root);\n@@ -4018,7 +4031,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.session.extern_prelude.iter().cloned());\n+                            names.extend(self.extern_prelude.iter().cloned());\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n@@ -4464,7 +4477,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         );\n \n         if self.session.rust_2018() {\n-            for &name in &self.session.extern_prelude {\n+            let extern_prelude_names = self.extern_prelude.clone();\n+            for &name in extern_prelude_names.iter() {\n                 let ident = Ident::with_empty_ctxt(name);\n                 match self.crate_loader.maybe_process_path_extern(name, ident.span) {\n                     Some(crate_id) => {"}, {"sha": "6c57e6c88abebd014fae159b31b32e645b6c8291", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=83bb430663b35989cfc968550196c64a7b173cf4", "patch": "@@ -692,7 +692,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::ExternPrelude => {\n-                    if use_prelude && self.session.extern_prelude.contains(&ident.name) {\n+                    if use_prelude && self.extern_prelude.contains(&ident.name) {\n                         let crate_id =\n                             self.crate_loader.process_path_extern(ident.name, ident.span);\n                         let crate_root ="}, {"sha": "48f312ce9f27d46763e307a3babc0d10bf4e5d5f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83bb430663b35989cfc968550196c64a7b173cf4/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=83bb430663b35989cfc968550196c64a7b173cf4", "patch": "@@ -199,7 +199,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                     if !(\n                         ns == TypeNS &&\n                         !ident.is_path_segment_keyword() &&\n-                        self.session.extern_prelude.contains(&ident.name)\n+                        self.extern_prelude.contains(&ident.name)\n                     ) {\n                         // ... unless the crate name is not in the `extern_prelude`.\n                         return binding;\n@@ -218,7 +218,7 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n                 } else if\n                     ns == TypeNS &&\n                     !ident.is_path_segment_keyword() &&\n-                    self.session.extern_prelude.contains(&ident.name)\n+                    self.extern_prelude.contains(&ident.name)\n                 {\n                     let crate_id =\n                         self.crate_loader.process_path_extern(ident.name, ident.span);\n@@ -736,7 +736,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         let uniform_paths_feature = self.session.features_untracked().uniform_paths;\n         for ((span, _, ns), results) in uniform_paths_canaries {\n             let name = results.name;\n-            let external_crate = if ns == TypeNS && self.session.extern_prelude.contains(&name) {\n+            let external_crate = if ns == TypeNS && self.extern_prelude.contains(&name) {\n                 let crate_id =\n                     self.crate_loader.process_path_extern(name, span);\n                 Some(Def::Mod(DefId { krate: crate_id, index: CRATE_DEF_INDEX }))"}]}