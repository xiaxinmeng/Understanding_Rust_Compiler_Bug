{"sha": "907b87fafa249943db8af820d763d0255487264a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2I4N2ZhZmEyNDk5NDNkYjhhZjgyMGQ3NjNkMDI1NTQ4NzI2NGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-07T22:38:11Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-07T22:38:11Z"}, "message": "rustc_resolve: Use `#![feature(format_args_capture)]`", "tree": {"sha": "fa95d6024c10a9b3a9bebb6a3214dd97b09736c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa95d6024c10a9b3a9bebb6a3214dd97b09736c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907b87fafa249943db8af820d763d0255487264a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907b87fafa249943db8af820d763d0255487264a", "html_url": "https://github.com/rust-lang/rust/commit/907b87fafa249943db8af820d763d0255487264a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907b87fafa249943db8af820d763d0255487264a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d115f6db5172c961dfeb50de15f35784dbc7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d115f6db5172c961dfeb50de15f35784dbc7c9", "html_url": "https://github.com/rust-lang/rust/commit/b2d115f6db5172c961dfeb50de15f35784dbc7c9"}], "stats": {"total": 51, "additions": 13, "deletions": 38}, "files": [{"sha": "5c7a7c1d0ae3156f4171811ffd9e4e9be3fddd07", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/907b87fafa249943db8af820d763d0255487264a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907b87fafa249943db8af820d763d0255487264a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=907b87fafa249943db8af820d763d0255487264a", "patch": "@@ -1021,17 +1021,11 @@ impl<'a> Resolver<'a> {\n                 (\"\", \"\")\n             };\n \n-            let article = if built_in.is_empty() { res.article() } else { \"a\" };\n-            format!(\n-                \"{a}{built_in} {thing}{from}\",\n-                a = article,\n-                thing = res.descr(),\n-                built_in = built_in,\n-                from = from\n-            )\n+            let a = if built_in.is_empty() { res.article() } else { \"a\" };\n+            format!(\"{a}{built_in} {thing}{from}\", thing = res.descr())\n         } else {\n             let introduced = if b.is_import() { \"imported\" } else { \"defined\" };\n-            format!(\"the {thing} {introduced} here\", thing = res.descr(), introduced = introduced)\n+            format!(\"the {thing} {introduced} here\", thing = res.descr())\n         }\n     }\n \n@@ -1049,19 +1043,13 @@ impl<'a> Resolver<'a> {\n             ident.span,\n             E0659,\n             \"`{ident}` is ambiguous ({why})\",\n-            ident = ident,\n             why = kind.descr()\n         );\n         err.span_label(ident.span, \"ambiguous name\");\n \n         let mut could_refer_to = |b: &NameBinding<'_>, misc: AmbiguityErrorMisc, also: &str| {\n             let what = self.binding_description(b, ident, misc == AmbiguityErrorMisc::FromPrelude);\n-            let note_msg = format!(\n-                \"`{ident}` could{also} refer to {what}\",\n-                ident = ident,\n-                also = also,\n-                what = what\n-            );\n+            let note_msg = format!(\"`{ident}` could{also} refer to {what}\");\n \n             let thing = b.res().descr();\n             let mut help_msgs = Vec::new();\n@@ -1071,30 +1059,18 @@ impl<'a> Resolver<'a> {\n                     || kind == AmbiguityKind::GlobVsOuter && swapped != also.is_empty())\n             {\n                 help_msgs.push(format!(\n-                    \"consider adding an explicit import of \\\n-                     `{ident}` to disambiguate\",\n-                    ident = ident\n+                    \"consider adding an explicit import of `{ident}` to disambiguate\"\n                 ))\n             }\n             if b.is_extern_crate() && ident.span.rust_2018() {\n-                help_msgs.push(format!(\n-                    \"use `::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident,\n-                    thing = thing,\n-                ))\n+                help_msgs.push(format!(\"use `::{ident}` to refer to this {thing} unambiguously\"))\n             }\n             if misc == AmbiguityErrorMisc::SuggestCrate {\n-                help_msgs.push(format!(\n-                    \"use `crate::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident,\n-                    thing = thing,\n-                ))\n+                help_msgs\n+                    .push(format!(\"use `crate::{ident}` to refer to this {thing} unambiguously\"))\n             } else if misc == AmbiguityErrorMisc::SuggestSelf {\n-                help_msgs.push(format!(\n-                    \"use `self::{ident}` to refer to this {thing} unambiguously\",\n-                    ident = ident,\n-                    thing = thing,\n-                ))\n+                help_msgs\n+                    .push(format!(\"use `self::{ident}` to refer to this {thing} unambiguously\"))\n             }\n \n             err.span_note(b.span, &note_msg);\n@@ -1167,12 +1143,10 @@ impl<'a> Resolver<'a> {\n             };\n \n             let first = ptr::eq(binding, first_binding);\n-            let descr = get_descr(binding);\n             let msg = format!(\n                 \"{and_refers_to}the {item} `{name}`{which} is defined here{dots}\",\n                 and_refers_to = if first { \"\" } else { \"...and refers to \" },\n-                item = descr,\n-                name = name,\n+                item = get_descr(binding),\n                 which = if first { \"\" } else { \" which\" },\n                 dots = if next_binding.is_some() { \"...\" } else { \"\" },\n             );"}, {"sha": "00e6d5ca381893252511a77370313bb1c22eb9db", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/907b87fafa249943db8af820d763d0255487264a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907b87fafa249943db8af820d763d0255487264a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=907b87fafa249943db8af820d763d0255487264a", "patch": "@@ -865,7 +865,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     err.span_suggestion(\n                         span,\n                         &format!(\"use struct {} syntax instead\", descr),\n-                        format!(\"{} {{{pad}{}{pad}}}\", path_str, fields, pad = pad),\n+                        format!(\"{path_str} {{{pad}{fields}{pad}}}\"),\n                         applicability,\n                     );\n                 }"}, {"sha": "f1e30470f8ea078dd6f0719163eba77ce8ac1224", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/907b87fafa249943db8af820d763d0255487264a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907b87fafa249943db8af820d763d0255487264a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=907b87fafa249943db8af820d763d0255487264a", "patch": "@@ -11,6 +11,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(format_args_capture)]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]"}]}