{"sha": "50d4aebc7a85c3e0285bcdd622ccdbef33929638", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDRhZWJjN2E4NWMzZTAyODViY2RkNjIyY2NkYmVmMzM5Mjk2Mzg=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:57Z"}, "message": "Rollup merge of #76914 - lcnr:path-no-more, r=ecstatic-morse\n\nextend `Ty` and `TyCtxt` lints to self types\n\nblocked on #76891\n\nr? @ecstatic-morse cc @Aaron1011", "tree": {"sha": "771a848c5e03a76d7c20741abefc1ba7eeec5a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/771a848c5e03a76d7c20741abefc1ba7eeec5a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d4aebc7a85c3e0285bcdd622ccdbef33929638", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXJJCRBK7hj4Ov3rIwAAdHIIAEnpkstO8RuSENJDOBtavQYk\nk7dBspJka9C48X8eCkjeoRtkRchAasJBFHXcReTJYpaJHp7XkxnEs5T3gQ+o6+r1\n05wJCIzwZmQB0ABNTJYtMCdPEy6UqeywsIKW8OQUI2H3Ax0TtSoLMWi7F1HyZNTt\nXaVlCQvm53fHJKhpXXiWWNb0c+ou+WmRlQFh0xLqnO7Q8tD+CLsXJfvIfdcJifKJ\nOsjcPhBQJ1lpYiupseX8rwiQKYGYvk1Kd1dcheAXsxbsIvyA0QcAL7PILo6xx+cs\n8bkU8Kjp4dPzEdCv9dPQHrThJTRV0jLhRi6qIPYQYAKGHtJAveZkvh+feqvK8Rk=\n=eLjX\n-----END PGP SIGNATURE-----\n", "payload": "tree 771a848c5e03a76d7c20741abefc1ba7eeec5a67\nparent dcf4d1f2beefa7bebdbfb31e4774cefa901928b7\nparent 8fc782afc204adf1d2d6c1e0f13b1242aef396d4\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746057 -0700\ncommitter GitHub <noreply@github.com> 1600746057 -0700\n\nRollup merge of #76914 - lcnr:path-no-more, r=ecstatic-morse\n\nextend `Ty` and `TyCtxt` lints to self types\n\nblocked on #76891\n\nr? @ecstatic-morse cc @Aaron1011\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d4aebc7a85c3e0285bcdd622ccdbef33929638", "html_url": "https://github.com/rust-lang/rust/commit/50d4aebc7a85c3e0285bcdd622ccdbef33929638", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d4aebc7a85c3e0285bcdd622ccdbef33929638/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf4d1f2beefa7bebdbfb31e4774cefa901928b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf4d1f2beefa7bebdbfb31e4774cefa901928b7", "html_url": "https://github.com/rust-lang/rust/commit/dcf4d1f2beefa7bebdbfb31e4774cefa901928b7"}, {"sha": "8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc782afc204adf1d2d6c1e0f13b1242aef396d4", "html_url": "https://github.com/rust-lang/rust/commit/8fc782afc204adf1d2d6c1e0f13b1242aef396d4"}], "stats": {"total": 91, "additions": 83, "deletions": 8}, "files": [{"sha": "c2d98b8e4ad378fa5bc308a30cd39dd18bbc0d27", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/50d4aebc7a85c3e0285bcdd622ccdbef33929638/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d4aebc7a85c3e0285bcdd622ccdbef33929638/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=50d4aebc7a85c3e0285bcdd622ccdbef33929638", "patch": "@@ -5,7 +5,9 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast::{Item, ItemKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -177,11 +179,31 @@ fn lint_ty_kind_usage(cx: &LateContext<'_>, segment: &PathSegment<'_>) -> bool {\n fn is_ty_or_ty_ctxt(cx: &LateContext<'_>, ty: &Ty<'_>) -> Option<String> {\n     if let TyKind::Path(qpath) = &ty.kind {\n         if let QPath::Resolved(_, path) = qpath {\n-            let did = path.res.opt_def_id()?;\n-            if cx.tcx.is_diagnostic_item(sym::Ty, did) {\n-                return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n-            } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, did) {\n-                return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n+            match path.res {\n+                Res::Def(_, did) => {\n+                    if cx.tcx.is_diagnostic_item(sym::Ty, did) {\n+                        return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n+                    } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, did) {\n+                        return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n+                    }\n+                }\n+                // Only lint on `&Ty` and `&TyCtxt` if it is used outside of a trait.\n+                Res::SelfTy(None, Some((did, _))) => {\n+                    if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+                        if cx.tcx.is_diagnostic_item(sym::Ty, adt.did) {\n+                            // NOTE: This path is currently unreachable as `Ty<'tcx>` is\n+                            // defined as a type alias meaning that `impl<'tcx> Ty<'tcx>`\n+                            // is not actually allowed.\n+                            //\n+                            // I(@lcnr) still kept this branch in so we don't miss this\n+                            // if we ever change it in the future.\n+                            return Some(format!(\"Ty<{}>\", substs[0]));\n+                        } else if cx.tcx.is_diagnostic_item(sym::TyCtxt, adt.did) {\n+                            return Some(format!(\"TyCtxt<{}>\", substs[0]));\n+                        }\n+                    }\n+                }\n+                _ => (),\n             }\n         }\n     }"}, {"sha": "ccc8ffd9a9c6e553eaa20f01312f08127a712448", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d4aebc7a85c3e0285bcdd622ccdbef33929638/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d4aebc7a85c3e0285bcdd622ccdbef33929638/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=50d4aebc7a85c3e0285bcdd622ccdbef33929638", "patch": "@@ -1179,7 +1179,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n \n-    pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {\n+    pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n         let cname = self.crate_name(LOCAL_CRATE).as_str();\n         self.sess.consider_optimizing(&cname, msg)\n     }"}, {"sha": "342a37cadbac4375385e5c481850c694b3e3ef8c", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50d4aebc7a85c3e0285bcdd622ccdbef33929638/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d4aebc7a85c3e0285bcdd622ccdbef33929638/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=50d4aebc7a85c3e0285bcdd622ccdbef33929638", "patch": "@@ -850,7 +850,7 @@ fn foo(&self) -> Self::T { String::new() }\n     /// Given a slice of `hir::GenericBound`s, if any of them corresponds to the `trait_ref`\n     /// requirement, provide a strucuted suggestion to constrain it to a given type `ty`.\n     fn constrain_generic_bound_associated_type_structured_suggestion(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         trait_ref: &ty::TraitRef<'tcx>,\n         bounds: hir::GenericBounds<'_>,\n@@ -874,7 +874,7 @@ fn foo(&self) -> Self::T { String::new() }\n     /// Given a span corresponding to a bound, provide a structured suggestion to set an\n     /// associated type to a given type `ty`.\n     fn constrain_associated_type_structured_suggestion(\n-        &self,\n+        self,\n         db: &mut DiagnosticBuilder<'_>,\n         span: Span,\n         assoc: &ty::AssocItem,"}, {"sha": "f58446d55922239f1f5285ed5bda281f60237554", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/50d4aebc7a85c3e0285bcdd622ccdbef33929638/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d4aebc7a85c3e0285bcdd622ccdbef33929638/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs?ref=50d4aebc7a85c3e0285bcdd622ccdbef33929638", "patch": "@@ -0,0 +1,33 @@\n+// NOTE: This test doesn't actually require `fulldeps`\n+// so we could instead use it as an `ui` test.\n+//\n+// Considering that all other `internal-lints` are tested here\n+// this seems like the cleaner solution though.\n+#![feature(rustc_attrs)]\n+#![deny(rustc::ty_pass_by_reference)]\n+#![allow(unused)]\n+\n+#[rustc_diagnostic_item = \"TyCtxt\"]\n+struct TyCtxt<'tcx> {\n+    inner: &'tcx (),\n+}\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    fn by_value(self) {} // OK\n+    fn by_ref(&self) {} //~ ERROR passing `TyCtxt<'tcx>` by reference\n+}\n+\n+\n+struct TyS<'tcx> {\n+    inner: &'tcx (),\n+}\n+\n+#[rustc_diagnostic_item = \"Ty\"]\n+type Ty<'tcx> = &'tcx TyS<'tcx>;\n+\n+impl<'tcx> TyS<'tcx> {\n+    fn by_value(self: Ty<'tcx>) {}\n+    fn by_ref(self: &Ty<'tcx>) {} //~ ERROR passing `Ty<'tcx>` by reference\n+}\n+\n+fn main() {}"}, {"sha": "b846b30f4ed3794b039570814fe29fc70ba56240", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50d4aebc7a85c3e0285bcdd622ccdbef33929638/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50d4aebc7a85c3e0285bcdd622ccdbef33929638/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr?ref=50d4aebc7a85c3e0285bcdd622ccdbef33929638", "patch": "@@ -0,0 +1,20 @@\n+error: passing `TyCtxt<'tcx>` by reference\n+  --> $DIR/pass_ty_by_ref_self.rs:17:15\n+   |\n+LL |     fn by_ref(&self) {}\n+   |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/pass_ty_by_ref_self.rs:7:9\n+   |\n+LL | #![deny(rustc::ty_pass_by_reference)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `Ty<'tcx>` by reference\n+  --> $DIR/pass_ty_by_ref_self.rs:30:21\n+   |\n+LL |     fn by_ref(self: &Ty<'tcx>) {}\n+   |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n+\n+error: aborting due to 2 previous errors\n+"}]}