{"sha": "2a83645e1bb01578c4bbe5f71418d354108dfd77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODM2NDVlMWJiMDE1NzhjNGJiZTVmNzE0MThkMzU0MTA4ZGZkNzc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:49:27Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-05T19:58:03Z"}, "message": "Get rid of Substitution::suffix", "tree": {"sha": "89d0dcb3b3b3eb511fe717c2d0aeb268095b5221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d0dcb3b3b3eb511fe717c2d0aeb268095b5221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a83645e1bb01578c4bbe5f71418d354108dfd77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a83645e1bb01578c4bbe5f71418d354108dfd77", "html_url": "https://github.com/rust-lang/rust/commit/2a83645e1bb01578c4bbe5f71418d354108dfd77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a83645e1bb01578c4bbe5f71418d354108dfd77/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b443e5304ec43ae2049c72b694ff62baf4314cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b443e5304ec43ae2049c72b694ff62baf4314cbb", "html_url": "https://github.com/rust-lang/rust/commit/b443e5304ec43ae2049c72b694ff62baf4314cbb"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "abdcf8829dc70a34fc562e2b50444f5f371ec37f", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a83645e1bb01578c4bbe5f71418d354108dfd77/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a83645e1bb01578c4bbe5f71418d354108dfd77/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=2a83645e1bb01578c4bbe5f71418d354108dfd77", "patch": "@@ -79,12 +79,6 @@ impl Substitution {\n     pub fn prefix(&self, n: usize) -> Substitution {\n         Substitution::intern(self.interned()[..std::cmp::min(self.len(&Interner), n)].into())\n     }\n-\n-    pub fn suffix(&self, n: usize) -> Substitution {\n-        Substitution::intern(\n-            self.interned()[self.len(&Interner) - std::cmp::min(self.len(&Interner), n)..].into(),\n-        )\n-    }\n }\n \n /// Return an index of a parameter in the generic type parameter list by it's id."}, {"sha": "d6de844a89404b18fb924688a7af94acdd680405", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a83645e1bb01578c4bbe5f71418d354108dfd77/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a83645e1bb01578c4bbe5f71418d354108dfd77/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=2a83645e1bb01578c4bbe5f71418d354108dfd77", "patch": "@@ -709,8 +709,9 @@ pub(crate) fn inherent_impl_substs(\n ) -> Option<Substitution> {\n     // we create a var for each type parameter of the impl; we need to keep in\n     // mind here that `self_ty` might have vars of its own\n+    let self_ty_vars = self_ty.binders.len(&Interner);\n     let vars = TyBuilder::subst_for_def(db, impl_id)\n-        .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty.binders.len(&Interner))\n+        .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty_vars)\n         .build();\n     let self_ty_with_vars = db.impl_self_ty(impl_id).substitute(&Interner, &vars);\n     let mut kinds = self_ty.binders.interned().to_vec();\n@@ -725,14 +726,15 @@ pub(crate) fn inherent_impl_substs(\n         binders: CanonicalVarKinds::from_iter(&Interner, kinds),\n         value: (self_ty_with_vars, self_ty.value.clone()),\n     };\n-    let substs = super::infer::unify(&tys);\n+    let substs = super::infer::unify(&tys)?;\n     // We only want the substs for the vars we added, not the ones from self_ty.\n     // Also, if any of the vars we added are still in there, we replace them by\n     // Unknown. I think this can only really happen if self_ty contained\n     // Unknown, and in that case we want the result to contain Unknown in those\n     // places again.\n-    substs\n-        .map(|s| fallback_bound_vars(s.suffix(vars.len(&Interner)), self_ty.binders.len(&Interner)))\n+    let suffix =\n+        Substitution::from_iter(&Interner, substs.iter(&Interner).cloned().skip(self_ty_vars));\n+    Some(fallback_bound_vars(suffix, self_ty_vars))\n }\n \n /// This replaces any 'free' Bound vars in `s` (i.e. those with indices past"}]}