{"sha": "23f0494114a39e503a369a345847b8bc9577c216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjA0OTQxMTRhMzllNTAzYTM2OWEzNDU4NDdiOGJjOTU3N2MyMTY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-10T21:04:43Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-12T03:46:31Z"}, "message": "test: add more extensive tests for impl Trait.", "tree": {"sha": "fb523138e6d03509078a5777e86c878dfb61eaf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb523138e6d03509078a5777e86c878dfb61eaf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f0494114a39e503a369a345847b8bc9577c216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f0494114a39e503a369a345847b8bc9577c216", "html_url": "https://github.com/rust-lang/rust/commit/23f0494114a39e503a369a345847b8bc9577c216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f0494114a39e503a369a345847b8bc9577c216/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08bf9f69b9cd96cf2871af1c2ec4dad0258728f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/08bf9f69b9cd96cf2871af1c2ec4dad0258728f2", "html_url": "https://github.com/rust-lang/rust/commit/08bf9f69b9cd96cf2871af1c2ec4dad0258728f2"}], "stats": {"total": 291, "additions": 291, "deletions": 0}, "files": [{"sha": "46b3106ab8d6e19de3a220f426acd0889c109294", "filename": "src/test/compile-fail/impl-trait/disallowed-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed-2.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+fn main() {\n+    let _: impl Fn() = || {};\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    let _ = || -> impl Fn() { || {} };\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}"}, {"sha": "09aba5d8c9168db1d16dfaf88b16688b0438049f", "filename": "src/test/compile-fail/impl-trait/disallowed.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fdisallowed.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+fn arguments(_: impl Fn(),\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+             _: Vec<impl Clone>) {}\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+type Factory<R> = impl Fn() -> R;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+type GlobalFactory<R> = fn() -> impl FnOnce() -> R;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+trait LazyToString {\n+    fn lazy_to_string<'a>(&'a self) -> impl Fn() -> String;\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+}\n+\n+// Note that the following impl doesn't error, because the trait is invalid.\n+impl LazyToString for String {\n+    fn lazy_to_string<'a>(&'a self) -> impl Fn() -> String {\n+        || self.clone()\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Lazy<T>(T);\n+\n+impl std::ops::Add<Lazy<i32>> for Lazy<i32> {\n+    type Output = impl Fn() -> Lazy<i32>;\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+    fn add(self, other: Lazy<i32>) -> Self::Output {\n+        move || Lazy(self.0 + other.0)\n+    }\n+}\n+\n+impl<F> std::ops::Add<F>\n+for impl Fn() -> Lazy<i32>\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+where F: Fn() -> impl FnOnce() -> i32\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+{\n+    type Output = Self;\n+\n+    fn add(self, other: F) -> Self::Output {\n+        move || Lazy(self().0 + other()())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "59ad1132b3501bdfae21910a24a0b6ba831c4bb9", "filename": "src/test/compile-fail/impl-trait/equality.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fequality.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,89 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait, specialization)]\n+\n+trait Foo: Copy + ToString {}\n+\n+impl<T: Copy + ToString> Foo for T {}\n+\n+fn hide<T: Foo>(x: T) -> impl Foo {\n+    x\n+}\n+\n+fn two(x: bool) -> impl Foo {\n+    if x {\n+        return 1_i32;\n+    }\n+    0_u32\n+    //~^ ERROR mismatched types\n+    //~| expected i32, found u32\n+}\n+\n+fn sum_to(n: u32) -> impl Foo {\n+    if n == 0 {\n+        0\n+    } else {\n+        n + sum_to(n - 1)\n+        //~^ ERROR the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+    }\n+}\n+\n+trait Leak: Sized {\n+    type T;\n+    fn leak(self) -> Self::T;\n+}\n+impl<T> Leak for T {\n+    default type T = ();\n+    default fn leak(self) -> Self::T { panic!() }\n+}\n+impl Leak for i32 {\n+    type T = i32;\n+    fn leak(self) -> i32 { self }\n+}\n+\n+trait CheckIfSend: Sized {\n+    type T: Default;\n+    fn check(self) -> Self::T { Default::default() }\n+}\n+impl<T> CheckIfSend for T {\n+    default type T = ();\n+}\n+impl<T: Send> CheckIfSend for T {\n+    type T = bool;\n+}\n+\n+fn main() {\n+    let _: u32 = hide(0_u32);\n+    //~^ ERROR mismatched types\n+    //~| expected type `u32`\n+    //~| found type `impl Foo`\n+    //~| expected u32, found anonymized type\n+\n+    let _: i32 = Leak::leak(hide(0_i32));\n+    //~^ ERROR mismatched types\n+    //~| expected type `i32`\n+    //~| found type `<impl Foo as Leak>::T`\n+    //~| expected i32, found associated type\n+\n+    let _: bool = CheckIfSend::check(hide(0_i32));\n+    //~^ ERROR mismatched types\n+    //~| expected type `bool`\n+    //~| found type `<impl Foo as CheckIfSend>::T`\n+    //~| expected bool, found associated type\n+\n+    let mut x = (hide(0_u32), hide(0_i32));\n+    x = (x.1,\n+    //~^ ERROR mismatched types\n+    //~| expected u32, found i32\n+         x.0);\n+    //~^ ERROR mismatched types\n+    //~| expected i32, found u32\n+}"}, {"sha": "8239b06f2b4a358ec39dde33169720ddf4d24014", "filename": "src/test/compile-fail/impl-trait/feature-gate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Ffeature-gate.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() -> impl Fn() { || {} }\n+//~^ ERROR `impl Trait` is experimental\n+\n+fn main() {}"}, {"sha": "9d9f6bf72974abf815e3b259df0a17f81d69b104", "filename": "src/test/compile-fail/impl-trait/lifetimes.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Flifetimes.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+// Helper creating a fake borrow, captured by the impl Trait.\n+fn borrow<'a, T>(_: &'a mut T) -> impl Copy { () }\n+\n+fn stack() -> impl Copy {\n+    //~^ ERROR only named lifetimes are allowed in `impl Trait`\n+    let x = 0;\n+    &x\n+}\n+\n+fn late_bound(x: &i32) -> impl Copy {\n+    //~^ ERROR only named lifetimes are allowed in `impl Trait`\n+    x\n+}\n+\n+// FIXME(#34511) Should work but doesn't at the moment,\n+// region-checking needs an overhault to support this.\n+fn early_bound<'a>(x: &'a i32) -> impl Copy {\n+    //~^ ERROR only named lifetimes are allowed in `impl Trait`\n+    x\n+}\n+\n+fn ambiguous<'a, 'b>(x: &'a [u32], y: &'b [u32]) -> impl Iterator<Item=u32> {\n+    //~^ ERROR only named lifetimes are allowed in `impl Trait`\n+    if x.len() < y.len() {\n+        x.iter().cloned()\n+    } else {\n+        y.iter().cloned()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ceaa8f4eed72348dfa1e34e2db89c42b261c22eb", "filename": "src/test/compile-fail/impl-trait/loan-extend.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Floan-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Floan-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Floan-extend.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+// Helper creating a fake borrow, captured by the impl Trait.\n+fn borrow<'a, T>(_: &'a mut T) -> impl Copy { () }\n+\n+fn main() {\n+    //~^ NOTE reference must be valid for the block\n+    let long;\n+    let mut short = 0;\n+    //~^ NOTE but borrowed value is only valid for the block suffix following statement 1\n+    long = borrow(&mut short);\n+    //~^ ERROR `short` does not live long enough\n+}"}, {"sha": "72b0e588ff483b3c8a292325074147bb5b404184", "filename": "src/test/run-pass/impl-trait/equality.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0494114a39e503a369a345847b8bc9577c216/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fequality.rs?ref=23f0494114a39e503a369a345847b8bc9577c216", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait, specialization)]\n+\n+trait Foo: std::fmt::Debug + Eq {}\n+\n+impl<T: std::fmt::Debug + Eq> Foo for T {}\n+\n+fn hide<T: Foo>(x: T) -> impl Foo {\n+    x\n+}\n+\n+trait Leak<T>: Sized {\n+    fn leak(self) -> T;\n+}\n+impl<T, U> Leak<T> for U {\n+    default fn leak(self) -> T { panic!(\"type mismatch\") }\n+}\n+impl<T> Leak<T> for T {\n+    fn leak(self) -> T { self }\n+}\n+\n+fn lucky_seven() -> impl Fn(usize) -> u8 {\n+    let a = [1, 2, 3, 4, 5, 6, 7];\n+    move |i| a[i]\n+}\n+\n+fn main() {\n+    assert_eq!(hide(42), hide(42));\n+\n+    assert_eq!(std::mem::size_of_val(&hide([0_u8; 5])), 5);\n+    assert_eq!(std::mem::size_of_val(&lucky_seven()), 7);\n+\n+    assert_eq!(Leak::<i32>::leak(hide(5_i32)), 5_i32);\n+}"}]}