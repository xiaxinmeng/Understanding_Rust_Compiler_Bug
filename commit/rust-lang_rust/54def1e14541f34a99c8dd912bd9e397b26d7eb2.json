{"sha": "54def1e14541f34a99c8dd912bd9e397b26d7eb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZGVmMWUxNDU0MWYzNGE5OWM4ZGQ5MTJiZDllMzk3YjI2ZDdlYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-05T17:30:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-05T17:30:43Z"}, "message": "Auto merge of #6852 - camsteffen:avoid-mir, r=Manishearth\n\nRemove a couple MIR usages\n\nchangelog: none\n\nWe use MIR to get the return type of a closure/function in a couple places. But typeck seems like a better approach.\n\nThis is the easy part of #6080.\n\nAlso did a tiny cleanup with `typeck` -> `typeck_body`.", "tree": {"sha": "1c637891ac376bf861e0086df5eacb7fe32d6fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c637891ac376bf861e0086df5eacb7fe32d6fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54def1e14541f34a99c8dd912bd9e397b26d7eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54def1e14541f34a99c8dd912bd9e397b26d7eb2", "html_url": "https://github.com/rust-lang/rust/commit/54def1e14541f34a99c8dd912bd9e397b26d7eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54def1e14541f34a99c8dd912bd9e397b26d7eb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e5453835572784dcdcdf63a4723254507282dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5453835572784dcdcdf63a4723254507282dc7", "html_url": "https://github.com/rust-lang/rust/commit/9e5453835572784dcdcdf63a4723254507282dc7"}, {"sha": "5abd8c599505e637c3ea43605abfbb55da6e6849", "url": "https://api.github.com/repos/rust-lang/rust/commits/5abd8c599505e637c3ea43605abfbb55da6e6849", "html_url": "https://github.com/rust-lang/rust/commit/5abd8c599505e637c3ea43605abfbb55da6e6849"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "869a5c28d051126d10b4abcc84da3382f90447cc", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=54def1e14541f34a99c8dd912bd9e397b26d7eb2", "patch": "@@ -50,8 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for AsyncYieldsAsync {\n                 let body_id = BodyId {\n                     hir_id: body.value.hir_id,\n                 };\n-                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-                let typeck_results = cx.tcx.typeck(def_id);\n+                let typeck_results = cx.tcx.typeck_body(body_id);\n                 let expr_ty = typeck_results.expr_ty(&body.value);\n \n                 if implements_trait(cx, expr_ty, future_trait_def_id, &[]) {"}, {"sha": "14b6a156c621e9963dc24a5abfe8d2a5237d06e1", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=54def1e14541f34a99c8dd912bd9e397b26d7eb2", "patch": "@@ -97,8 +97,7 @@ impl LateLintPass<'_> for AwaitHolding {\n             let body_id = BodyId {\n                 hir_id: body.value.hir_id,\n             };\n-            let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-            let typeck_results = cx.tcx.typeck(def_id);\n+            let typeck_results = cx.tcx.typeck_body(body_id);\n             check_interior_types(\n                 cx,\n                 &typeck_results.generator_interior_types.as_ref().skip_binder(),"}, {"sha": "99c084af1b0d023dc58d8cba565462c66b6316bc", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=54def1e14541f34a99c8dd912bd9e397b26d7eb2", "patch": "@@ -325,9 +325,9 @@ fn lint_for_missing_headers<'tcx>(\n             if_chain! {\n                 if let Some(body_id) = body_id;\n                 if let Some(future) = cx.tcx.lang_items().future_trait();\n-                let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-                let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n-                let ret_ty = mir.return_ty();\n+                let typeck = cx.tcx.typeck_body(body_id);\n+                let body = cx.tcx.hir().body(body_id);\n+                let ret_ty = typeck.expr_ty(&body.value);\n                 if implements_trait(cx, ret_ty, future, &[]);\n                 if let ty::Opaque(_, subs) = ret_ty.kind();\n                 if let Some(gen) = subs.types().next();"}, {"sha": "b4f814e1dcccfb1894c73f14abf0ad2d268d0dcd", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54def1e14541f34a99c8dd912bd9e397b26d7eb2/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=54def1e14541f34a99c8dd912bd9e397b26d7eb2", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{fn_has_unsatisfiable_preds, match_panic_def_id, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_panic_def_id, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -133,19 +133,13 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitReturn {\n         span: Span,\n         _: HirId,\n     ) {\n-        let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n-\n-        // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n-        if fn_has_unsatisfiable_preds(cx, def_id.to_def_id()) {\n+        if span.from_expansion() {\n             return;\n         }\n-\n-        let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n-\n-        // checking return type through MIR, HIR is not able to determine inferred closure return types\n-        // make sure it's not a macro\n-        if !mir.return_ty().is_unit() && !span.from_expansion() {\n-            expr_match(cx, &body.value);\n+        let body = cx.tcx.hir().body(body.id());\n+        if cx.typeck_results().expr_ty(&body.value).is_unit() {\n+            return;\n         }\n+        expr_match(cx, &body.value);\n     }\n }"}]}