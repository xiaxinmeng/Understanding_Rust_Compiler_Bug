{"sha": "13db8440bbbe42870bc828d4ec3e965b38670277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZGI4NDQwYmJiZTQyODcwYmM4MjhkNGVjM2U5NjViMzg2NzAyNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-06T13:20:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-06T13:20:16Z"}, "message": "Auto merge of #88686 - rylev:rollup-m1tf9ir, r=m-ou-se\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #88602 (Add tests for some const generics issues)\n - #88647 (Document when to use Windows' `symlink_dir` vs. `symlink_file`)\n - #88659 (Remove SmallVector mention)\n - #88661 (Correct typo)\n - #88673 (Fix typo: needede -> needed)\n - #88685 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "05ccb7752b2066eeb6068119b347ce2aa3bb08e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ccb7752b2066eeb6068119b347ce2aa3bb08e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13db8440bbbe42870bc828d4ec3e965b38670277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13db8440bbbe42870bc828d4ec3e965b38670277", "html_url": "https://github.com/rust-lang/rust/commit/13db8440bbbe42870bc828d4ec3e965b38670277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13db8440bbbe42870bc828d4ec3e965b38670277/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c858ba5bf7bd06c1a970efbf77053c8380b3151", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c858ba5bf7bd06c1a970efbf77053c8380b3151", "html_url": "https://github.com/rust-lang/rust/commit/1c858ba5bf7bd06c1a970efbf77053c8380b3151"}, {"sha": "3c4b461583f1666b29e7d574f04e8997789df78b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4b461583f1666b29e7d574f04e8997789df78b", "html_url": "https://github.com/rust-lang/rust/commit/3c4b461583f1666b29e7d574f04e8997789df78b"}], "stats": {"total": 233, "additions": 227, "deletions": 6}, "files": [{"sha": "b5d2d24736cdc4b89d30e9dc4a84e83a84abebc2", "filename": "compiler/rustc_data_structures/src/thin_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -2,7 +2,7 @@ use crate::stable_hasher::{HashStable, StableHasher};\n \n use std::iter::FromIterator;\n \n-/// A vector type optimized for cases where this size is usually 0 (cf. `SmallVector`).\n+/// A vector type optimized for cases where this size is usually 0 (cf. `SmallVec`).\n /// The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`,\n /// which uses only a single (null) pointer.\n #[derive(Clone, Encodable, Decodable, Debug)]"}, {"sha": "a73f00a083af333b80e395e992c4bb3c9e2d9f51", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -1663,7 +1663,7 @@ pub mod marker {\n         const PERMITS_TRAVERSAL: bool = true;\n     }\n     impl BorrowType for Owned {\n-        // Traversal isn't needede, it happens using the result of `borrow_mut`.\n+        // Traversal isn't needed, it happens using the result of `borrow_mut`.\n         // By disabling traversal, and only creating new references to roots,\n         // we know that every reference of the `Owned` type is to a root node.\n         const PERMITS_TRAVERSAL: bool = false;"}, {"sha": "71563a02dcbb931290b75a22c20ed4cc6bc1be80", "filename": "library/std/src/os/windows/fs.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -517,11 +517,20 @@ impl FileTypeExt for fs::FileType {\n     }\n }\n \n-/// Creates a new file symbolic link on the filesystem.\n+/// Creates a new symlink to a non-directory file on the filesystem.\n ///\n /// The `link` path will be a file symbolic link pointing to the `original`\n /// path.\n ///\n+/// The `original` path should not be a directory or a symlink to a directory,\n+/// otherwise the symlink will be broken. Use [`symlink_dir`] for directories.\n+///\n+/// This function currently corresponds to [`CreateSymbolicLinkW`][CreateSymbolicLinkW].\n+/// Note that this [may change in the future][changes].\n+///\n+/// [CreateSymbolicLinkW]: https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinkw\n+/// [changes]: io#platform-specific-behavior\n+///\n /// # Examples\n ///\n /// ```no_run\n@@ -537,11 +546,20 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io:\n     sys::fs::symlink_inner(original.as_ref(), link.as_ref(), false)\n }\n \n-/// Creates a new directory symlink on the filesystem.\n+/// Creates a new symlink to a directory on the filesystem.\n ///\n /// The `link` path will be a directory symbolic link pointing to the `original`\n /// path.\n ///\n+/// The `original` path must be a directory or a symlink to a directory,\n+/// otherwise the symlink will be broken. Use [`symlink_file`] for other files.\n+///\n+/// This function currently corresponds to [`CreateSymbolicLinkW`][CreateSymbolicLinkW].\n+/// Note that this [may change in the future][changes].\n+///\n+/// [CreateSymbolicLinkW]: https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createsymboliclinkw\n+/// [changes]: io#platform-specific-behavior\n+///\n /// # Examples\n ///\n /// ```no_run"}, {"sha": "a3a0d8d06e87cb5de00620a2dd22d490769b1ba5", "filename": "src/test/ui/const-generics/issues/issue-82956.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,33 @@\n+#![feature(generic_const_exprs, array_map)]\n+#![allow(incomplete_features)]\n+\n+pub struct ConstCheck<const CHECK: bool>;\n+\n+pub trait True {}\n+impl True for ConstCheck<true> {}\n+\n+pub trait OrdesDec {\n+    type Newlen;\n+    type Output;\n+\n+    fn pop(self) -> (Self::Newlen, Self::Output);\n+}\n+\n+impl<T, const N: usize> OrdesDec for [T; N]\n+where\n+    ConstCheck<{N > 1}>: True,\n+    [T; N - 1]: Sized,\n+{\n+    type Newlen = [T; N - 1];\n+    type Output = T;\n+\n+    fn pop(self) -> (Self::Newlen, Self::Output) {\n+        let mut iter = IntoIter::new(self);\n+        //~^ ERROR: failed to resolve: use of undeclared type `IntoIter`\n+        let end = iter.next_back().unwrap();\n+        let new = [(); N - 1].map(move |()| iter.next().unwrap());\n+        (new, end)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c8b999da9810437f0c033db1a8f536a7bffb60ee", "filename": "src/test/ui/const-generics/issues/issue-82956.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,21 @@\n+error[E0433]: failed to resolve: use of undeclared type `IntoIter`\n+  --> $DIR/issue-82956.rs:25:24\n+   |\n+LL |         let mut iter = IntoIter::new(self);\n+   |                        ^^^^^^^^ not found in this scope\n+   |\n+help: consider importing one of these items\n+   |\n+LL | use std::array::IntoIter;\n+   |\n+LL | use std::collections::binary_heap::IntoIter;\n+   |\n+LL | use std::collections::btree_map::IntoIter;\n+   |\n+LL | use std::collections::btree_set::IntoIter;\n+   |\n+     and 8 other candidates\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "440ca740af2b05dee11fab5be35e4770bba37d3c", "filename": "src/test/ui/const-generics/issues/issue-84659.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Bar<const N: usize> {}\n+\n+trait Foo<'a> {\n+    const N: usize;\n+    type Baz: Bar<{ Self::N }>;\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn main() {}"}, {"sha": "2dfc48a34e4b19d4a06e9bb9f63e94fafdf988b8", "filename": "src/test/ui/const-generics/issues/issue-84659.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.stderr?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/issue-84659.rs:8:15\n+   |\n+LL |     type Baz: Bar<{ Self::N }>;\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { Self::N }]:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b024decd4e11c47febab19e1329e0d033d41e05a", "filename": "src/test/ui/const-generics/issues/issue-86530.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,20 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait X {\n+    const Y: usize;\n+}\n+\n+fn z<T>(t: T)\n+where\n+    T: X,\n+    [(); T::Y]: ,\n+{\n+}\n+\n+fn unit_literals() {\n+    z(\" \");\n+    //~^ ERROR: the trait bound `&str: X` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "7cdfc9dfcdf5a2404ff2b095e37a9f1ed8acb9e1", "filename": "src/test/ui/const-generics/issues/issue-86530.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `&str: X` is not satisfied\n+  --> $DIR/issue-86530.rs:16:7\n+   |\n+LL |     z(\" \");\n+   |       ^^^ the trait `X` is not implemented for `&str`\n+   |\n+note: required by a bound in `z`\n+  --> $DIR/issue-86530.rs:10:8\n+   |\n+LL | fn z<T>(t: T)\n+   |    - required by a bound in this\n+LL | where\n+LL |     T: X,\n+   |        ^ required by this bound in `z`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0b535fd66498d697bc7389ebd6d3dd236d1b159f", "filename": "src/test/ui/const-generics/issues/issue-86535-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535-2.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(adt_const_params, generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {\n+    const ASSOC_C: usize;\n+    fn foo() where [(); Self::ASSOC_C]:;\n+}\n+\n+struct Bar<const N: &'static ()>;\n+impl<const N: &'static ()> Foo for Bar<N> {\n+    const ASSOC_C: usize = 3;\n+\n+    fn foo() where [u8; Self::ASSOC_C]: {\n+        let _: [u8; Self::ASSOC_C] = loop {};\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5289c4e99dd6fb062cc122eb282cebd7175803d4", "filename": "src/test/ui/const-generics/issues/issue-86535.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(adt_const_params, generic_const_exprs)]\n+#![allow(incomplete_features, unused_variables)]\n+\n+struct F<const S: &'static str>;\n+impl<const S: &'static str> X for F<{ S }> {\n+    const W: usize = 3;\n+\n+    fn d(r: &[u8; Self::W]) -> F<{ S }> {\n+        let x: [u8; Self::W] = [0; Self::W];\n+        F\n+    }\n+}\n+\n+pub trait X {\n+    const W: usize;\n+    fn d(r: &[u8; Self::W]) -> Self;\n+}\n+\n+fn main() {}"}, {"sha": "b147c246bdac8546c963e37d116253884607b445", "filename": "src/test/ui/const-generics/sneaky-array-repeat-expr.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,32 @@\n+trait Trait<const N: usize> {\n+    const Assoc: usize;\n+}\n+\n+impl<const N: usize> Trait<N> for () {\n+    const Assoc: usize = 1;\n+}\n+\n+\n+pub const fn foo<const N: usize>() where (): Trait<N> {\n+    let bar = [(); <()>::Assoc];\n+    //~^ error: constant expression depends on a generic parameter\n+}\n+\n+trait Trait2<const N: usize> {\n+    const Assoc2: usize;\n+}\n+\n+impl<const N: usize> Trait2<N> for () {\n+    const Assoc2: usize = N - 1;\n+}\n+\n+\n+pub const fn foo2<const N: usize>() where (): Trait2<N> {\n+    let bar2 = [(); <()>::Assoc2];\n+    //~^ error: constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    foo::<0>();\n+    foo2::<0>();\n+}"}, {"sha": "5c77375d39934a1d532f6f2b7dd979c29039db83", "filename": "src/test/ui/const-generics/sneaky-array-repeat-expr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:11:20\n+   |\n+LL |     let bar = [(); <()>::Assoc];\n+   |                    ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:25:21\n+   |\n+LL |     let bar2 = [(); <()>::Assoc2];\n+   |                     ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "da436b89f538e511d0a6339f33594c201e6ce21e", "filename": "src/test/ui/moves/move-guard-same-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db8440bbbe42870bc828d4ec3e965b38670277/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.rs?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -2,7 +2,7 @@\n // arms whose patterns were composed solely of constants to not have\n // them linked in the cfg.\n //\n-// THis was broken for various reasons. In particular, that hack was\n+// This was broken for various reasons. In particular, that hack was\n // originally authored under the assunption that other checks\n // elsewhere would ensure that the two patterns did not overlap.  But\n // that assumption did not hold, at least not in the long run (namely,"}, {"sha": "b73b321478d3b2a98d380eb79de717e01620c4e9", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=13db8440bbbe42870bc828d4ec3e965b38670277", "patch": "@@ -1 +1 @@\n-Subproject commit 996300f4a061e895a339a909fddce94f68ce7d19\n+Subproject commit b73b321478d3b2a98d380eb79de717e01620c4e9"}]}