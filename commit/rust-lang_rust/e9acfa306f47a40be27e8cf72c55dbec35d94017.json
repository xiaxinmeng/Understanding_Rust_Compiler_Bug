{"sha": "e9acfa306f47a40be27e8cf72c55dbec35d94017", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWNmYTMwNmY0N2E0MGJlMjdlOGNmNzJjNTVkYmVjMzVkOTQwMTc=", "commit": {"author": {"name": "Xiang Fan", "email": "sfanxiang@gmail.com", "date": "2019-09-27T23:14:21Z"}, "committer": {"name": "Xiang Fan", "email": "sfanxiang@gmail.com", "date": "2019-09-27T23:14:21Z"}, "message": "Generate llvm.sideeffect at function entry instead of call", "tree": {"sha": "9faab9272dc41d949e6f5beb7a6ad1db76cf7cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9faab9272dc41d949e6f5beb7a6ad1db76cf7cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9acfa306f47a40be27e8cf72c55dbec35d94017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9acfa306f47a40be27e8cf72c55dbec35d94017", "html_url": "https://github.com/rust-lang/rust/commit/e9acfa306f47a40be27e8cf72c55dbec35d94017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9acfa306f47a40be27e8cf72c55dbec35d94017/comments", "author": {"login": "sfanxiang", "id": 5893440, "node_id": "MDQ6VXNlcjU4OTM0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5893440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfanxiang", "html_url": "https://github.com/sfanxiang", "followers_url": "https://api.github.com/users/sfanxiang/followers", "following_url": "https://api.github.com/users/sfanxiang/following{/other_user}", "gists_url": "https://api.github.com/users/sfanxiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfanxiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfanxiang/subscriptions", "organizations_url": "https://api.github.com/users/sfanxiang/orgs", "repos_url": "https://api.github.com/users/sfanxiang/repos", "events_url": "https://api.github.com/users/sfanxiang/events{/privacy}", "received_events_url": "https://api.github.com/users/sfanxiang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfanxiang", "id": 5893440, "node_id": "MDQ6VXNlcjU4OTM0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5893440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfanxiang", "html_url": "https://github.com/sfanxiang", "followers_url": "https://api.github.com/users/sfanxiang/followers", "following_url": "https://api.github.com/users/sfanxiang/following{/other_user}", "gists_url": "https://api.github.com/users/sfanxiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfanxiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfanxiang/subscriptions", "organizations_url": "https://api.github.com/users/sfanxiang/orgs", "repos_url": "https://api.github.com/users/sfanxiang/repos", "events_url": "https://api.github.com/users/sfanxiang/events{/privacy}", "received_events_url": "https://api.github.com/users/sfanxiang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c668190cb419b539a36214237382c6689f7daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c668190cb419b539a36214237382c6689f7daf", "html_url": "https://github.com/rust-lang/rust/commit/10c668190cb419b539a36214237382c6689f7daf"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "68d9af09c42b1f2f194f1c6168d98d696e195224", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=e9acfa306f47a40be27e8cf72c55dbec35d94017", "patch": "@@ -124,7 +124,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 self.call(expect, &[args[0].immediate(), self.const_bool(false)], None)\n             }\n             \"try\" => {\n-                self.sideeffect();\n                 try_intrinsic(self,\n                               args[0].immediate(),\n                               args[1].immediate(),\n@@ -818,6 +817,7 @@ fn codegen_msvc_try(\n ) {\n     let llfn = get_rust_try_fn(bx, &mut |mut bx| {\n         bx.set_personality_fn(bx.eh_personality());\n+        bx.sideeffect();\n \n         let mut normal = bx.build_sibling_block(\"normal\");\n         let mut catchswitch = bx.build_sibling_block(\"catchswitch\");\n@@ -941,6 +941,8 @@ fn codegen_gnu_try(\n         // expected to be `*mut *mut u8` for this to actually work, but that's\n         // managed by the standard library.\n \n+        bx.sideeffect();\n+\n         let mut then = bx.build_sibling_block(\"then\");\n         let mut catch = bx.build_sibling_block(\"catch\");\n "}, {"sha": "d95c0b2d87b4bda6a2c3d6bcf9673f91544f13c5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=e9acfa306f47a40be27e8cf72c55dbec35d94017", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                  FnType::of_instance(&bx, drop_fn))\n             }\n         };\n-        bx.sideeffect();\n+        helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n         helper.do_call(self, &mut bx, fn_ty, drop_fn, args,\n                        Some((ReturnDest::Nothing, target)),\n                        unwind);\n@@ -464,7 +464,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let fn_ty = FnType::of_instance(&bx, instance);\n         let llfn = bx.get_fn(instance);\n \n-        bx.sideeffect();\n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_ty, llfn, &args, None, cleanup);\n     }\n@@ -584,7 +583,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let fn_ty = FnType::of_instance(&bx, instance);\n                 let llfn = bx.get_fn(instance);\n \n-                bx.sideeffect();\n+                if let Some((_, target)) = destination.as_ref() {\n+                    helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n+                }\n                 // Codegen the actual panic invoke/call.\n                 helper.do_call(\n                     self,\n@@ -820,7 +821,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             _ => span_bug!(span, \"no llfn for call\"),\n         };\n \n-        bx.sideeffect();\n+        if let Some((_, target)) = destination.as_ref() {\n+            helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n+        }\n         helper.do_call(self, &mut bx, fn_ty, fn_ptr, &llargs,\n                        destination.as_ref().map(|&(_, target)| (ret_dest, target)),\n                        cleanup);"}, {"sha": "e4fdf0a09bbfcf038695f09df05151a0f13894da", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=e9acfa306f47a40be27e8cf72c55dbec35d94017", "patch": "@@ -204,6 +204,8 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         bx.set_personality_fn(cx.eh_personality());\n     }\n \n+    bx.sideeffect();\n+\n     let cleanup_kinds = analyze::cleanup_kinds(&mir);\n     // Allocate a `Block` for every basic block, except\n     // the start block, if nothing loops back to it."}, {"sha": "9b69383b455cf28c71e8bcf6bc2524ea602b5f7e", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9acfa306f47a40be27e8cf72c55dbec35d94017/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=e9acfa306f47a40be27e8cf72c55dbec35d94017", "patch": "@@ -486,7 +486,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 };\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n                 let r = bx.cx().get_fn(instance);\n-                bx.sideeffect();\n                 let call = bx.call(r, &[llsize, llalign], None);\n                 let val = bx.pointercast(call, llty_ptr);\n "}]}