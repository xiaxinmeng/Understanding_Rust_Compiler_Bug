{"sha": "413ada30402f823a86a75578afc63d07179f6a23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxM2FkYTMwNDAyZjgyM2E4NmE3NTU3OGFmYzYzZDA3MTc5ZjZhMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-19T01:44:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-19T01:44:54Z"}, "message": "Auto merge of #35719 - Amanieu:atomic_access, r=alexcrichton\n\nImplement RFC 1649\n\ncc #35603 rust-lang/rfcs#1649\n\nr? @alexcrichton", "tree": {"sha": "edbf1fb6b30ee913687a3db0dfc6232a76c459ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edbf1fb6b30ee913687a3db0dfc6232a76c459ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/413ada30402f823a86a75578afc63d07179f6a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/413ada30402f823a86a75578afc63d07179f6a23", "html_url": "https://github.com/rust-lang/rust/commit/413ada30402f823a86a75578afc63d07179f6a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/413ada30402f823a86a75578afc63d07179f6a23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "499484f56d336f4628a6fa016626beb3ef21ba81", "url": "https://api.github.com/repos/rust-lang/rust/commits/499484f56d336f4628a6fa016626beb3ef21ba81", "html_url": "https://github.com/rust-lang/rust/commit/499484f56d336f4628a6fa016626beb3ef21ba81"}, {"sha": "ee1fc38c2a41c96ab3b8d058b7fa1328e93391ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1fc38c2a41c96ab3b8d058b7fa1328e93391ef", "html_url": "https://github.com/rust-lang/rust/commit/ee1fc38c2a41c96ab3b8d058b7fa1328e93391ef"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "bd62879c1a57229b3ee85a10b6a805892b6e3a73", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/413ada30402f823a86a75578afc63d07179f6a23/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413ada30402f823a86a75578afc63d07179f6a23/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=413ada30402f823a86a75578afc63d07179f6a23", "patch": "@@ -90,6 +90,8 @@ use default::Default;\n use fmt;\n \n /// A boolean type which can be safely shared between threads.\n+///\n+/// This type has the same in-memory representation as a `bool`.\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicBool {\n@@ -110,6 +112,8 @@ impl Default for AtomicBool {\n unsafe impl Sync for AtomicBool {}\n \n /// A raw pointer type which can be safely shared between threads.\n+///\n+/// This type has the same in-memory representation as a `*mut T`.\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicPtr<T> {\n@@ -191,6 +195,48 @@ impl AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n+    /// Returns a mutable reference to the underlying `bool`.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_access)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bool = AtomicBool::new(true);\n+    /// assert_eq!(*some_bool.get_mut(), true);\n+    /// *some_bool.get_mut() = false;\n+    /// assert_eq!(some_bool.load(Ordering::SeqCst), false);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    pub fn get_mut(&mut self) -> &mut bool {\n+        unsafe { &mut *(self.v.get() as *mut bool) }\n+    }\n+\n+    /// Consumes the atomic and returns the contained value.\n+    ///\n+    /// This is safe because passing `self` by value guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_access)]\n+    /// use std::sync::atomic::AtomicBool;\n+    ///\n+    /// let some_bool = AtomicBool::new(true);\n+    /// assert_eq!(some_bool.into_inner(), true);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    pub fn into_inner(self) -> bool {\n+        unsafe { self.v.into_inner() != 0 }\n+    }\n+\n     /// Loads a value from the bool.\n     ///\n     /// `load` takes an `Ordering` argument which describes the memory ordering of this operation.\n@@ -528,6 +574,47 @@ impl<T> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n \n+    /// Returns a mutable reference to the underlying pointer.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_access)]\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut atomic_ptr = AtomicPtr::new(&mut 10);\n+    /// *atomic_ptr.get_mut() = &mut 5;\n+    /// assert_eq!(unsafe { *atomic_ptr.load(Ordering::SeqCst) }, 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    pub fn get_mut(&mut self) -> &mut *mut T {\n+        unsafe { &mut *self.p.get() }\n+    }\n+\n+    /// Consumes the atomic and returns the contained value.\n+    ///\n+    /// This is safe because passing `self` by value guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_access)]\n+    /// use std::sync::atomic::AtomicPtr;\n+    ///\n+    /// let atomic_ptr = AtomicPtr::new(&mut 5);\n+    /// assert_eq!(unsafe { *atomic_ptr.into_inner() }, 5);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_access\", issue = \"35603\")]\n+    pub fn into_inner(self) -> *mut T {\n+        unsafe { self.p.into_inner() }\n+    }\n+\n     /// Loads a value from the pointer.\n     ///\n     /// `load` takes an `Ordering` argument which describes the memory ordering of this operation.\n@@ -730,8 +817,11 @@ macro_rules! atomic_int {\n     ($stable:meta,\n      $stable_cxchg:meta,\n      $stable_debug:meta,\n+     $stable_access:meta,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n+        ///\n+        /// This type has the same in-memory representation as the underlying integer type.\n         #[$stable]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n@@ -777,6 +867,48 @@ macro_rules! atomic_int {\n                 $atomic_type {v: UnsafeCell::new(v)}\n             }\n \n+            /// Returns a mutable reference to the underlying integer.\n+            ///\n+            /// This is safe because the mutable reference guarantees that no other threads are\n+            /// concurrently accessing the atomic data.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_access)]\n+            /// use std::sync::atomic::{AtomicIsize, Ordering};\n+            ///\n+            /// let mut some_isize = AtomicIsize::new(10);\n+            /// assert_eq!(*some_isize.get_mut(), 10);\n+            /// *some_isize.get_mut() = 5;\n+            /// assert_eq!(some_isize.load(Ordering::SeqCst), 5);\n+            /// ```\n+            #[inline]\n+            #[$stable_access]\n+            pub fn get_mut(&mut self) -> &mut $int_type {\n+                unsafe { &mut *self.v.get() }\n+            }\n+\n+            /// Consumes the atomic and returns the contained value.\n+            ///\n+            /// This is safe because passing `self` by value guarantees that no other threads are\n+            /// concurrently accessing the atomic data.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_access)]\n+            /// use std::sync::atomic::AtomicIsize;\n+            ///\n+            /// let some_isize = AtomicIsize::new(5);\n+            /// assert_eq!(some_isize.into_inner(), 5);\n+            /// ```\n+            #[inline]\n+            #[$stable_access]\n+            pub fn into_inner(self) -> $int_type {\n+                unsafe { self.v.into_inner() }\n+            }\n+\n             /// Loads a value from the atomic integer.\n             ///\n             /// `load` takes an `Ordering` argument which describes the memory ordering of this\n@@ -1057,69 +1189,79 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n #[cfg(target_has_atomic = \"8\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n+    unstable(feature = \"atomic_access\", issue = \"35603\"),\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n+    unstable(feature = \"atomic_access\", issue = \"35603\"),\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n "}, {"sha": "286c92ce50ee30a58b0e86b694f83a1f05eb7776", "filename": "src/test/run-pass/atomic-access-bool.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/413ada30402f823a86a75578afc63d07179f6a23/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413ada30402f823a86a75578afc63d07179f6a23/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs?ref=413ada30402f823a86a75578afc63d07179f6a23", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(atomic_access)]\n+use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT};\n+use std::sync::atomic::Ordering::*;\n+\n+static mut ATOMIC: AtomicBool = ATOMIC_BOOL_INIT;\n+\n+fn main() {\n+    unsafe {\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.store(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_or(false, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_and(false, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.fetch_nand(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_xor(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+    }\n+}"}]}