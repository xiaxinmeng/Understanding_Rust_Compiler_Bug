{"sha": "4ddff03917daea2ff42a5b5a42d38bbeaa051680", "node_id": "C_kwDOAAsO6NoAKDRkZGZmMDM5MTdkYWVhMmZmNDJhNWI1YTQyZDM4YmJlYWEwNTE2ODA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-22T11:55:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-22T12:00:24Z"}, "message": "resolve: Set effective visibilities for imports more precisely\n\nInstead of setting them for all primary and additional IDs of the import, only set them for the binding's true ID.", "tree": {"sha": "ef13764cd6040935a1a8c126555f1ef7741fca33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef13764cd6040935a1a8c126555f1ef7741fca33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ddff03917daea2ff42a5b5a42d38bbeaa051680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ddff03917daea2ff42a5b5a42d38bbeaa051680", "html_url": "https://github.com/rust-lang/rust/commit/4ddff03917daea2ff42a5b5a42d38bbeaa051680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ddff03917daea2ff42a5b5a42d38bbeaa051680/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be901abb74c456e13386ad3086e3f60e609e3ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be901abb74c456e13386ad3086e3f60e609e3ae", "html_url": "https://github.com/rust-lang/rust/commit/5be901abb74c456e13386ad3086e3f60e609e3ae"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "d806441716fdabd860a841e2b02d6962301320d5", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ddff03917daea2ff42a5b5a42d38bbeaa051680/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ddff03917daea2ff42a5b5a42d38bbeaa051680/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=4ddff03917daea2ff42a5b5a42d38bbeaa051680", "patch": "@@ -1,4 +1,3 @@\n-use crate::imports::ImportKind;\n use crate::NameBinding;\n use crate::NameBindingKind;\n use crate::Resolver;\n@@ -54,15 +53,11 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         // sets the rest of the `use` chain to `AccessLevel::Exported` until\n         // we hit the actual exported item.\n         let set_import_binding_access_level =\n-            |this: &mut Self, mut binding: &NameBinding<'a>, mut access_level| {\n+            |this: &mut Self, mut binding: &NameBinding<'a>, mut access_level, ns| {\n                 while let NameBindingKind::Import { binding: nested_binding, import, .. } =\n                     binding.kind\n                 {\n-                    this.set_access_level(import.id, access_level);\n-                    if let ImportKind::Single { additional_ids, .. } = import.kind {\n-                        this.set_access_level(additional_ids.0, access_level);\n-                        this.set_access_level(additional_ids.1, access_level);\n-                    }\n+                    this.set_access_level(this.r.import_id_for_ns(import, ns), access_level);\n \n                     access_level = Some(AccessLevel::Exported);\n                     binding = nested_binding;\n@@ -72,11 +67,11 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         let module = self.r.get_module(module_id.to_def_id()).unwrap();\n         let resolutions = self.r.resolutions(module);\n \n-        for (.., name_resolution) in resolutions.borrow().iter() {\n+        for (key, name_resolution) in resolutions.borrow().iter() {\n             if let Some(binding) = name_resolution.borrow().binding() && binding.vis.is_public() && !binding.is_ambiguity() {\n                 let access_level = match binding.is_import() {\n                     true => {\n-                        set_import_binding_access_level(self, binding, module_level);\n+                        set_import_binding_access_level(self, binding, module_level, key.ns);\n                         Some(AccessLevel::Exported)\n                     },\n                     false => module_level,"}, {"sha": "5bdb4274781994f3228b26e73262e6b00d259950", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ddff03917daea2ff42a5b5a42d38bbeaa051680/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ddff03917daea2ff42a5b5a42d38bbeaa051680/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=4ddff03917daea2ff42a5b5a42d38bbeaa051680", "patch": "@@ -2,7 +2,7 @@\n \n use crate::diagnostics::Suggestion;\n use crate::Determinacy::{self, *};\n-use crate::Namespace::{MacroNS, TypeNS};\n+use crate::Namespace::{self, *};\n use crate::{module_to_string, names_to_string};\n use crate::{AmbiguityKind, BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{Finalize, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet};\n@@ -371,6 +371,31 @@ impl<'a> Resolver<'a> {\n             self.used_imports.insert(import.id);\n         }\n     }\n+\n+    /// Take primary and additional node IDs from an import and select one that corresponds to the\n+    /// given namespace. The logic must match the corresponding logic from `fn lower_use_tree` that\n+    /// assigns resolutons to IDs.\n+    pub(crate) fn import_id_for_ns(&self, import: &Import<'_>, ns: Namespace) -> NodeId {\n+        if let ImportKind::Single { additional_ids: (id1, id2), .. } = import.kind {\n+            if let Some(resolutions) = self.import_res_map.get(&import.id) {\n+                assert!(resolutions[ns].is_some(), \"incorrectly finalized import\");\n+                return match ns {\n+                    TypeNS => import.id,\n+                    ValueNS => match resolutions.type_ns {\n+                        Some(_) => id1,\n+                        None => import.id,\n+                    },\n+                    MacroNS => match (resolutions.type_ns, resolutions.value_ns) {\n+                        (Some(_), Some(_)) => id2,\n+                        (Some(_), None) | (None, Some(_)) => id1,\n+                        (None, None) => import.id,\n+                    },\n+                };\n+            }\n+        }\n+\n+        import.id\n+    }\n }\n \n /// An error that may be transformed into a diagnostic later. Used to combine multiple unresolved"}, {"sha": "bf94d980678f506c74d004ae62b77a2ac69bbc09", "filename": "src/test/ui/privacy/access_levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ddff03917daea2ff42a5b5a42d38bbeaa051680/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ddff03917daea2ff42a5b5a42d38bbeaa051680/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=4ddff03917daea2ff42a5b5a42d38bbeaa051680", "patch": "@@ -70,6 +70,6 @@ mod half_public_import {\n \n #[rustc_effective_visibility]\n pub use half_public_import::HalfPublicImport; //~ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n-                                              //~^ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+                                              //~^ ERROR Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n \n fn main() {}"}, {"sha": "81514d1fbab45a04ad2c7406cf2fd44395d36c35", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ddff03917daea2ff42a5b5a42d38bbeaa051680/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ddff03917daea2ff42a5b5a42d38bbeaa051680/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=4ddff03917daea2ff42a5b5a42d38bbeaa051680", "patch": "@@ -112,7 +112,7 @@ error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n LL | pub use half_public_import::HalfPublicImport;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+error: Public: pub(self), Exported: pub(self), Reachable: pub(self), ReachableFromImplTrait: pub(self)\n   --> $DIR/access_levels.rs:72:9\n    |\n LL | pub use half_public_import::HalfPublicImport;"}]}