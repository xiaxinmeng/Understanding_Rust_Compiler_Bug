{"sha": "b81aa05fa19a748e04808145cd8b7241f785693c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MWFhMDVmYTE5YTc0OGUwNDgwODE0NWNkOGI3MjQxZjc4NTY5M2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-12T01:58:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-12T01:58:03Z"}, "message": "Recursively genericize types and spread across glue. Saves 1mb size, 8s compile time on rustc.", "tree": {"sha": "de30d119697c7aee29b423c179c3646e3dc569bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de30d119697c7aee29b423c179c3646e3dc569bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81aa05fa19a748e04808145cd8b7241f785693c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81aa05fa19a748e04808145cd8b7241f785693c", "html_url": "https://github.com/rust-lang/rust/commit/b81aa05fa19a748e04808145cd8b7241f785693c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81aa05fa19a748e04808145cd8b7241f785693c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5bf8d074b46ee9142f7db671a4d46581fff6b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bf8d074b46ee9142f7db671a4d46581fff6b2e", "html_url": "https://github.com/rust-lang/rust/commit/f5bf8d074b46ee9142f7db671a4d46581fff6b2e"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "3ce5eba28720a9dba6798d12cfa8f8ca4f1aa375", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b81aa05fa19a748e04808145cd8b7241f785693c/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b81aa05fa19a748e04808145cd8b7241f785693c/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=b81aa05fa19a748e04808145cd8b7241f785693c", "patch": "@@ -1146,6 +1146,37 @@ let get_nth_tag_tup\n ;;\n \n \n+let generic_obj_ty =\n+  Ast.TY_obj (Ast.LAYER_value, Hashtbl.create 0)\n+;;\n+\n+let generic_fn_ty =\n+  Ast.TY_fn ({ Ast.sig_input_slots = [| |];\n+               Ast.sig_input_constrs = [| |];\n+               Ast.sig_output_slot =\n+                 { Ast.slot_mode = Ast.MODE_local;\n+                   Ast.slot_ty = Some Ast.TY_nil }; },\n+             { Ast.fn_is_iter = false;\n+               Ast.fn_effect = Ast.EFF_pure })\n+;;\n+\n+let rec get_genericized_ty ty =\n+  (* Using a full-and-honest fold here is too slow, sadly. *)\n+  let sub = get_genericized_ty in\n+    match ty with\n+        Ast.TY_obj _ -> generic_obj_ty\n+      | Ast.TY_fn _ -> generic_fn_ty\n+      | Ast.TY_vec t -> Ast.TY_vec (sub t)\n+      | Ast.TY_tup tys -> Ast.TY_tup (Array.map sub tys)\n+      | Ast.TY_rec elts ->\n+          Ast.TY_rec (Array.map (fun (id, t) -> (id, sub t)) elts)\n+      | Ast.TY_box t ->\n+          Ast.TY_box (sub t)\n+      | Ast.TY_mutable t ->\n+          Ast.TY_mutable (sub t)\n+      | _ -> ty\n+;;\n+\n \n let associative_binary_op_ty_fold\n     (default:'a)"}, {"sha": "5d5cb75bc41298dfc02894d8d07ce138be06b477", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b81aa05fa19a748e04808145cd8b7241f785693c/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b81aa05fa19a748e04808145cd8b7241f785693c/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=b81aa05fa19a748e04808145cd8b7241f785693c", "patch": "@@ -1926,22 +1926,7 @@ let trans_visitor\n   and get_drop_glue\n       (ty:Ast.ty)\n       : fixup =\n-\n-    (* obj and fn glue delegates to the body, so is always 'generic'. *)\n-    let ty =\n-      match ty with\n-          Ast.TY_obj _ -> Ast.TY_obj (Ast.LAYER_value, Hashtbl.create 0)\n-        | Ast.TY_fn _ ->\n-            Ast.TY_fn ({ Ast.sig_input_slots = [| |];\n-                         Ast.sig_input_constrs = [| |];\n-                         Ast.sig_output_slot =\n-                           { Ast.slot_mode = Ast.MODE_local;\n-                             Ast.slot_ty = Some Ast.TY_nil }; },\n-                       { Ast.fn_is_iter = false;\n-                         Ast.fn_effect = Ast.EFF_pure })\n-        | _ -> ty\n-    in\n-\n+    let ty = get_genericized_ty ty in\n     let g = GLUE_drop ty in\n     let inner _ (args:Il.cell) =\n       let ty_params = deref (get_element_ptr args 0) in\n@@ -1960,6 +1945,7 @@ let trans_visitor\n       (ty:Ast.ty)\n       (is_gc:bool)\n       : fixup =\n+    let ty = get_genericized_ty ty in\n     let g = GLUE_free ty in\n     let inner _ (args:Il.cell) =\n       (* Free-glue assumes it's called with a pointer to a box allocation with\n@@ -1978,6 +1964,7 @@ let trans_visitor\n   and get_sever_glue\n       (ty:Ast.ty)\n       : fixup =\n+    let ty = get_genericized_ty ty in\n     let g = GLUE_sever ty in\n     let inner _ (args:Il.cell) =\n       let ty_params = deref (get_element_ptr args 0) in\n@@ -1994,6 +1981,7 @@ let trans_visitor\n   and get_mark_glue\n       (ty:Ast.ty)\n       : fixup =\n+    let ty = get_genericized_ty ty in\n     let g = GLUE_mark ty in\n     let inner _ (args:Il.cell) =\n       let ty_params = deref (get_element_ptr args 0) in\n@@ -2010,6 +1998,7 @@ let trans_visitor\n   and get_clone_glue\n       (ty:Ast.ty)\n       : fixup =\n+    let ty = get_genericized_ty ty in\n     let g = GLUE_clone ty in\n     let inner (out_ptr:Il.cell) (args:Il.cell) =\n       let dst = deref out_ptr in\n@@ -2034,6 +2023,7 @@ let trans_visitor\n   and get_copy_glue\n       (ty:Ast.ty)\n       : fixup =\n+    let ty = get_genericized_ty ty in\n     let arg_ty_params_alias = 0 in\n     let arg_src_alias = 1 in\n     let arg_initflag = 2 in\n@@ -2068,6 +2058,7 @@ let trans_visitor\n       get_typed_mem_glue g fty inner\n \n   and get_cmp_glue ty =\n+    let ty = get_genericized_ty ty in\n     let arg_ty_params_alias = 0 in\n     let arg_lhs_alias = 1 in\n     let arg_rhs_alias = 2 in"}]}