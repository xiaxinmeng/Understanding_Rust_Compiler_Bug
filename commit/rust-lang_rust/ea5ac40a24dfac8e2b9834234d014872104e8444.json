{"sha": "ea5ac40a24dfac8e2b9834234d014872104e8444", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNWFjNDBhMjRkZmFjOGUyYjk4MzQyMzRkMDE0ODcyMTA0ZTg0NDQ=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T13:19:09Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T13:43:39Z"}, "message": "Remove use of `TyKind`.", "tree": {"sha": "9c4f8be25f6c1f8b381532caf63756e7defc77c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4f8be25f6c1f8b381532caf63756e7defc77c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5ac40a24dfac8e2b9834234d014872104e8444", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAl5KmIsACgkQQ9YqPqOI\n5G/Isw//QIbnuw1DrhlRHuwacFtLIB2d8dRFx9zfa2lBFtJwrouA+lMVvOgEc6ye\n65XOueakxzXeiXMX7EuAUsOKvBjsuRC7I/yYdjl9UoXCwzwryNvgc0eGz4WlazdU\njxALp/B2zWWJgwRtxZUlOkS+62Leas2GPFxfgiS/+U9RK8TcI4Ji8GNbMj9MOkYX\nUKKYFjckQkJalK2nQheHjXyfF2oIZQxl+I4ZXGgIz2lXILhTG3Wu7qP/rCRKX68+\niDDCVP4iY6LUPcEBmfjp2z4bDSv+9cbstE0wv+qkxzJf8G/MjssnhFytqAK/uBZc\nfkwDVw3qqeOoUINR5C7R7AjEbkJC2BfYnLvCSDlEQPX91kThiKItLHcujx3VCZFu\nB/iVWO23nfd0GPqYD27y9pA04XQ60ut5cp0fNVT6eWtNr1kjF5y+r96wEEO3yjH5\nnSXCfX8ZVNXBzeRAAzXtgNTLhjfiQcqy8Mt56g12Z89D1EPvWInSMw/lgGs4hhG5\npk3NO4kTHm/cRdPuh0g/XyOffYt8OSpLLg6qSatpXFGs18HOOUsDoJiW450gQT+W\nPDuPZcLbussa3QMXJOifuSBGglxnB/7GIYenKzlCYbC9jVY/4vSHpiZHaTp+gt0A\nM44bvvIoj0dZp4tcu4aVixTWkbpHDHeX9F0dV2WcVeZ1CV/XS3Y=\n=9Ilv\n-----END PGP SIGNATURE-----", "payload": "tree 9c4f8be25f6c1f8b381532caf63756e7defc77c8\nparent 8e2dab3b3c37b50d4148a72e09e5713412570cf8\nauthor daxpedda <daxpedda@gmail.com> 1581945549 +0100\ncommitter daxpedda <daxpedda@gmail.com> 1581947019 +0100\n\nRemove use of `TyKind`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5ac40a24dfac8e2b9834234d014872104e8444", "html_url": "https://github.com/rust-lang/rust/commit/ea5ac40a24dfac8e2b9834234d014872104e8444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5ac40a24dfac8e2b9834234d014872104e8444/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2dab3b3c37b50d4148a72e09e5713412570cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2dab3b3c37b50d4148a72e09e5713412570cf8", "html_url": "https://github.com/rust-lang/rust/commit/8e2dab3b3c37b50d4148a72e09e5713412570cf8"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "4a7d2a8b640e08ef172edefda68b1e290121a6d2", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea5ac40a24dfac8e2b9834234d014872104e8444/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5ac40a24dfac8e2b9834234d014872104e8444/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=ea5ac40a24dfac8e2b9834234d014872104e8444", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{get_trait_def_id, implements_trait, is_entrypoint_fn, match_t\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc::lint::in_external_macro;\n-use rustc::ty::TyKind;\n+use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -225,17 +225,16 @@ fn lint_for_missing_headers<'a, 'tcx>(\n                 \"docs for function returning `Result` missing `# Errors` section\",\n             );\n         } else {\n-            use TyKind::*;\n             if_chain! {\n                 if let Some(body_id) = body_id;\n                 if let Some(future) = get_trait_def_id(cx, &paths::FUTURE);\n                 let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n                 let mir = cx.tcx.optimized_mir(def_id);\n                 let ret_ty = mir.return_ty();\n                 if implements_trait(cx, ret_ty, future, &[]);\n-                if let Opaque(_, subs) = ret_ty.kind;\n-                if let Some(ty) = subs.types().next();\n-                if let Generator(_, subs, _) = ty.kind;\n+                if let ty::Opaque(_, subs) = ret_ty.kind;\n+                if let Some(gen) = subs.types().next();\n+                if let ty::Generator(_, subs, _) = gen.kind;\n                 if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT);\n                 then {\n                     span_lint("}]}