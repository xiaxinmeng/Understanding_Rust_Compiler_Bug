{"sha": "9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODJlN2Q0MDcxYzM5NjRlODIxMmUzYzU0N2E3YWFhNGUxMmYwMWU=", "commit": {"author": {"name": "Ho\u00e0ng \u0110\u1ee9c Hi\u1ebfu", "email": "hdhoang@hdhoang.space", "date": "2018-05-10T05:42:03Z"}, "committer": {"name": "Ho\u00e0ng \u0110\u1ee9c Hi\u1ebfu", "email": "code@hdhoang.space", "date": "2019-04-16T01:12:14Z"}, "message": "lint: convert incoherent_fundamental_impls into hard error\n\nAlso remove it from lint listings.", "tree": {"sha": "346ad52b6ca5203d2658091cdd94fc31ca11d5c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/346ad52b6ca5203d2658091cdd94fc31ca11d5c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "html_url": "https://github.com/rust-lang/rust/commit/9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/comments", "author": {"login": "hdhoang", "id": 12537, "node_id": "MDQ6VXNlcjEyNTM3", "avatar_url": "https://avatars.githubusercontent.com/u/12537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdhoang", "html_url": "https://github.com/hdhoang", "followers_url": "https://api.github.com/users/hdhoang/followers", "following_url": "https://api.github.com/users/hdhoang/following{/other_user}", "gists_url": "https://api.github.com/users/hdhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdhoang/subscriptions", "organizations_url": "https://api.github.com/users/hdhoang/orgs", "repos_url": "https://api.github.com/users/hdhoang/repos", "events_url": "https://api.github.com/users/hdhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/hdhoang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hdhoang", "id": 12537, "node_id": "MDQ6VXNlcjEyNTM3", "avatar_url": "https://avatars.githubusercontent.com/u/12537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hdhoang", "html_url": "https://github.com/hdhoang", "followers_url": "https://api.github.com/users/hdhoang/followers", "following_url": "https://api.github.com/users/hdhoang/following{/other_user}", "gists_url": "https://api.github.com/users/hdhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/hdhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hdhoang/subscriptions", "organizations_url": "https://api.github.com/users/hdhoang/orgs", "repos_url": "https://api.github.com/users/hdhoang/repos", "events_url": "https://api.github.com/users/hdhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/hdhoang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2975a3c4befa8ad610da2e3c5f5de351d6d70a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2975a3c4befa8ad610da2e3c5f5de351d6d70a2b", "html_url": "https://github.com/rust-lang/rust/commit/2975a3c4befa8ad610da2e3c5f5de351d6d70a2b"}], "stats": {"total": 147, "additions": 34, "deletions": 113}, "files": [{"sha": "049e59b651722ab029e25365d6fc93e2c665cf57", "filename": "src/doc/rustc/src/lints/groups.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Fgroups.md?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -21,9 +21,9 @@ Here's a list of each lint group, and the lints that they are made up of:\n | edition-2018        | Lints that will be turned into errors in Rust 2018            | tyvar-behind-raw-pointer                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n | rust-2018-idioms    | Lints to nudge you toward idiomatic features of Rust 2018     | bare-trait-object, unreachable-pub                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n | unused              | These lints detect things being declared but not used         | unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comment, unused-extern-crates, unused-features, unused-parens                                                                                                                                                                                    |\n-| future-incompatible | Lints that detect code that has future-compatibility problems | private-in-public, pub-use-of-private-extern-crate, patterns-in-fns-without-body, safe-extern-statics, invalid-type-param-default, legacy-directory-ownership, legacy-imports, legacy-constructor-visibility, missing-fragment-specifier, illegal-floating-point-literal-pattern, anonymous-parameters, parenthesized-params-in-types-and-modules, late-bound-lifetime-arguments, safe-packed-borrows, incoherent-fundamental-impls, tyvar-behind-raw-pointer, unstable-name-collision |\n+| future-incompatible | Lints that detect code that has future-compatibility problems | private-in-public, pub-use-of-private-extern-crate, patterns-in-fns-without-body, safe-extern-statics, invalid-type-param-default, legacy-directory-ownership, legacy-imports, legacy-constructor-visibility, missing-fragment-specifier, illegal-floating-point-literal-pattern, anonymous-parameters, parenthesized-params-in-types-and-modules, late-bound-lifetime-arguments, safe-packed-borrows, tyvar-behind-raw-pointer, unstable-name-collision |\n \n Additionally, there's a `bad-style` lint group that's a deprecated alias for `nonstandard-style`.\n \n Finally, you can also see the table above by invoking `rustc -W help`. This will give you the exact values for the specific\n-compiler you have installed.\n\\ No newline at end of file\n+compiler you have installed."}, {"sha": "c1740f272ed26d7c5dd2b1f103655d57617539ea", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -222,44 +222,3 @@ error: invalid `crate_type` value\n   | ^^^^^^^^^^^^^^^^^^^^\n   |\n ```\n-\n-## incoherent-fundamental-impls\n-\n-This lint detects potentially-conflicting impls that were erroneously allowed. Some\n-example code that triggers this lint:\n-\n-```rust,ignore\n-pub trait Trait1<X> {\n-    type Output;\n-}\n-\n-pub trait Trait2<X> {}\n-\n-pub struct A;\n-\n-impl<X, T> Trait1<X> for T where T: Trait2<X> {\n-    type Output = ();\n-}\n-\n-impl<X> Trait1<Box<X>> for A {\n-    type Output = i32;\n-}\n-```\n-\n-This will produce:\n-\n-```text\n-error: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`: (E0119)\n-  --> src/main.rs:13:1\n-   |\n-9  | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n-   | --------------------------------------------- first implementation here\n-...\n-13 | impl<X> Trait1<Box<X>> for A {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`\n-   |\n-   = note: #[deny(incoherent_fundamental_impls)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #46205 <https://github.com/rust-lang/rust/issues/46205>\n-   = note: downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n-```"}, {"sha": "550114a5fb17bc59c00a934d3910030557f424f4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -198,12 +198,6 @@ declare_lint! {\n     \"detects generic lifetime arguments in path segments with late bound lifetime parameters\"\n }\n \n-declare_lint! {\n-    pub INCOHERENT_FUNDAMENTAL_IMPLS,\n-    Deny,\n-    \"potentially-conflicting impls were erroneously allowed\"\n-}\n-\n declare_lint! {\n     pub ORDER_DEPENDENT_TRAIT_OBJECTS,\n     Deny,\n@@ -428,7 +422,6 @@ declare_lint_pass! {\n         MISSING_FRAGMENT_SPECIFIER,\n         PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n         LATE_BOUND_LIFETIME_ARGUMENTS,\n-        INCOHERENT_FUNDAMENTAL_IMPLS,\n         ORDER_DEPENDENT_TRAIT_OBJECTS,\n         DEPRECATED,\n         UNUSED_UNSAFE,"}, {"sha": "c55f3c51f5a3680d4945c80c8ce2c97f60f4b19e", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -321,29 +321,34 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n                         String::new(), |ty| {\n                             format!(\" for type `{}`\", ty)\n                         }),\n-                    if used_to_be_allowed.is_some() { \" (E0119)\" } else { \"\" }\n+                    match used_to_be_allowed {\n+                        Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n+                        _ => \"\",\n+                    }\n                 );\n                 let impl_span = tcx.sess.source_map().def_span(\n                     tcx.span_of_impl(impl_def_id).unwrap()\n                 );\n-                let mut err = if let Some(kind) = used_to_be_allowed {\n-                    let lint = match kind {\n-                        FutureCompatOverlapErrorKind::Issue43355 =>\n-                            lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n-                        FutureCompatOverlapErrorKind::Issue33140 =>\n-                            lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS,\n-                    };\n-                    tcx.struct_span_lint_hir(\n-                        lint,\n-                        tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n-                        impl_span,\n-                        &msg)\n-                } else {\n-                    struct_span_err!(tcx.sess,\n-                                     impl_span,\n-                                     E0119,\n-                                     \"{}\",\n-                                     msg)\n+                let mut err = match used_to_be_allowed {\n+                    Some(FutureCompatOverlapErrorKind::Issue43355) | None =>\n+                        struct_span_err!(tcx.sess,\n+                                         impl_span,\n+                                         E0119,\n+                                         \"{}\",\n+                                         msg),\n+                    Some(kind) => {\n+                        let lint = match kind {\n+                            FutureCompatOverlapErrorKind::Issue43355 =>\n+                                unreachable!(\"converted to hard error above\"),\n+                            FutureCompatOverlapErrorKind::Issue33140 =>\n+                                lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS,\n+                        };\n+                        tcx.struct_span_lint_hir(\n+                            lint,\n+                            tcx.hir().as_local_hir_id(impl_def_id).unwrap(),\n+                            impl_span,\n+                            &msg)\n+                    }\n                 };\n \n                 match tcx.span_of_impl(overlap.with_impl) {"}, {"sha": "f2cf48793162fd084a3bc5f5c85f3b3a323a8b41", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -371,11 +371,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #46043 <https://github.com/rust-lang/rust/issues/46043>\",\n             edition: None,\n         },\n-        FutureIncompatibleInfo {\n-            id: LintId::of(INCOHERENT_FUNDAMENTAL_IMPLS),\n-            reference: \"issue #46205 <https://github.com/rust-lang/rust/issues/46205>\",\n-            edition: None,\n-        },\n         FutureIncompatibleInfo {\n             id: LintId::of(ORDER_DEPENDENT_TRAIT_OBJECTS),\n             reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n@@ -491,6 +486,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"replaced with a generic attribute input check\");\n     store.register_removed(\"duplicate_matcher_binding_name\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/57742\");\n+    store.register_removed(\"incoherent_fundamental_impls\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n }\n \n pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {"}, {"sha": "a9951c7fe447952616e1854e649f4f9ae2f92685", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -5,8 +5,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-use crate::lint;\n-\n pub fn crate_inherent_impls_overlap_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                     crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n@@ -20,8 +18,7 @@ struct InherentOverlapChecker<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n     fn check_for_common_items_in_impls(&self, impl1: DefId, impl2: DefId,\n-                                       overlap: traits::OverlapResult<'_>,\n-                                       used_to_be_allowed: bool) {\n+                                       overlap: traits::OverlapResult<'_>) {\n \n         let name_and_namespace = |def_id| {\n             let item = self.tcx.associated_item(def_id);\n@@ -36,22 +33,12 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n \n             for &item2 in &impl_items2[..] {\n                 if (name, namespace) == name_and_namespace(item2) {\n-                    let hir_id = self.tcx.hir().as_local_hir_id(impl1);\n-                    let mut err = if used_to_be_allowed && hir_id.is_some() {\n-                        self.tcx.struct_span_lint_hir(\n-                            lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n-                            hir_id.unwrap(),\n-                            self.tcx.span_of_impl(item1).unwrap(),\n-                            &format!(\"duplicate definitions with name `{}` (E0592)\", name)\n-                        )\n-                    } else {\n+                    let mut err =\n                         struct_span_err!(self.tcx.sess,\n                                          self.tcx.span_of_impl(item1).unwrap(),\n                                          E0592,\n                                          \"duplicate definitions with name `{}`\",\n-                                         name)\n-                    };\n-\n+                                         name);\n                     err.span_label(self.tcx.span_of_impl(item1).unwrap(),\n                                    format!(\"duplicate definitions for `{}`\", name));\n                     err.span_label(self.tcx.span_of_impl(item2).unwrap(),\n@@ -76,7 +63,7 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n \n         for (i, &impl1_def_id) in impls.iter().enumerate() {\n             for &impl2_def_id in &impls[(i + 1)..] {\n-                let used_to_be_allowed = traits::overlapping_impls(\n+                traits::overlapping_impls(\n                     self.tcx,\n                     impl1_def_id,\n                     impl2_def_id,\n@@ -86,28 +73,11 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n                             impl1_def_id,\n                             impl2_def_id,\n                             overlap,\n-                            false,\n                         );\n                         false\n                     },\n                     || true,\n                 );\n-\n-                if used_to_be_allowed {\n-                    traits::overlapping_impls(\n-                        self.tcx,\n-                        impl1_def_id,\n-                        impl2_def_id,\n-                        IntercrateMode::Fixed,\n-                        |overlap| self.check_for_common_items_in_impls(\n-                            impl1_def_id,\n-                            impl2_def_id,\n-                            overlap,\n-                            true,\n-                        ),\n-                        || (),\n-                    );\n-                }\n             }\n         }\n     }"}, {"sha": "bf819af79625f0070cd57174584e11e96504a8d7", "filename": "src/test/ui/issues/issue-43355.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Ftest%2Fui%2Fissues%2Fissue-43355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Ftest%2Fui%2Fissues%2Fissue-43355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43355.rs?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -12,7 +12,6 @@ impl<X, T> Trait1<X> for T where T: Trait2<X> {\n \n impl<X> Trait1<Box<X>> for A {\n //~^ ERROR conflicting implementations of trait\n-//~| hard error\n //~| downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n     type Output = i32;\n }"}, {"sha": "75c69e5b3e3f506866f7f4a0cd8f127af8401f1d", "filename": "src/test/ui/issues/issue-43355.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9982e7d4071c3964e8212e3c547a7aaa4e12f01e/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43355.stderr?ref=9982e7d4071c3964e8212e3c547a7aaa4e12f01e", "patch": "@@ -1,4 +1,4 @@\n-error: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`: (E0119)\n+error[E0119]: conflicting implementations of trait `Trait1<std::boxed::Box<_>>` for type `A`:\n   --> $DIR/issue-43355.rs:13:1\n    |\n LL | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n@@ -7,10 +7,8 @@ LL | impl<X, T> Trait1<X> for T where T: Trait2<X> {\n LL | impl<X> Trait1<Box<X>> for A {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `A`\n    |\n-   = note: #[deny(incoherent_fundamental_impls)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #46205 <https://github.com/rust-lang/rust/issues/46205>\n    = note: downstream crates may implement trait `Trait2<std::boxed::Box<_>>` for type `A`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0119`."}]}