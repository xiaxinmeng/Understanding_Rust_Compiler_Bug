{"sha": "d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNGMzMWY3NGNhOWY3YzUxNTc2Y2U3MTUxYzk5ZGUwZTJmZmNiMGE=", "commit": {"author": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-12T05:32:08Z"}, "committer": {"name": "Connor Brewster", "email": "brewsterc@my.caspercollege.edu", "date": "2016-03-12T05:32:08Z"}, "message": "Added support for associated type rewriting", "tree": {"sha": "a6b3b6409b5750703c91e7c441b7585ad3d80af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b3b6409b5750703c91e7c441b7585ad3d80af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a", "html_url": "https://github.com/rust-lang/rust/commit/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a/comments", "author": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbrewster", "id": 9086315, "node_id": "MDQ6VXNlcjkwODYzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9086315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbrewster", "html_url": "https://github.com/cbrewster", "followers_url": "https://api.github.com/users/cbrewster/followers", "following_url": "https://api.github.com/users/cbrewster/following{/other_user}", "gists_url": "https://api.github.com/users/cbrewster/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbrewster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbrewster/subscriptions", "organizations_url": "https://api.github.com/users/cbrewster/orgs", "repos_url": "https://api.github.com/users/cbrewster/repos", "events_url": "https://api.github.com/users/cbrewster/events{/privacy}", "received_events_url": "https://api.github.com/users/cbrewster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e583ce7a7bda498ed256216a040b8c660eb15b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e583ce7a7bda498ed256216a040b8c660eb15b4", "html_url": "https://github.com/rust-lang/rust/commit/9e583ce7a7bda498ed256216a040b8c660eb15b4"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "38ae285197e5f9c475611847666f12f25b8f3b8b", "filename": "src/items.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a", "patch": "@@ -22,7 +22,7 @@ use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, BlockIndentStyle, Density, ReturnIndent, BraceStyle, StructLitStyle};\n \n-use syntax::{ast, abi, ptr};\n+use syntax::{ast, abi};\n use syntax::codemap::{Span, BytePos, mk_sp};\n use syntax::parse::token;\n \n@@ -600,8 +600,14 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let trait_bound_str = try_opt!(rewrite_trait_bounds(context,\n                                                             type_param_bounds,\n                                                             offset,\n-                                                            0));\n+                                                            context.config.max_width));\n \n+        if offset.width() + result.len() + trait_bound_str.len() > context.config.max_width {\n+            result.push('\\n');\n+            let width = context.block_indent.width() + context.config.tab_spaces - 1;\n+            let trait_indent = Indent::new(0, width);\n+            result.push_str(&trait_indent.to_string(context.config));\n+        }\n         result.push_str(&trait_bound_str);\n \n         let where_budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));\n@@ -623,12 +629,48 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         }\n         result.push_str(&where_clause_str);\n \n-        if trait_items.len() > 0 {\n-            result.push_str(\" {\");\n-        } else {\n-            result.push_str(\" {}\");\n+        match context.config.item_brace_style {\n+            BraceStyle::AlwaysNextLine => {\n+                result.push('\\n');\n+                result.push_str(&offset.to_string(context.config));\n+            },\n+            BraceStyle::PreferSameLine => result.push(' '),\n+            BraceStyle::SameLineWhere => {\n+                if !where_clause_str.is_empty() {\n+                    result.push('\\n');\n+                    result.push_str(&offset.to_string(context.config));\n+                } else {\n+                    result.push(' ');\n+                }\n+            }\n+        }\n+        result.push('{');\n+\n+        let snippet = context.snippet(item.span);\n+        let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n+\n+        if !trait_items.is_empty() || contains_comment(&snippet[open_pos..]) {\n+            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n+            visitor.block_indent = context.block_indent.block_indent(context.config);\n+            visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n+\n+            for item in trait_items {\n+                visitor.visit_trait_item(&item);\n+            }\n+\n+            visitor.format_missing(item.span.hi - BytePos(1));\n+\n+            let inner_indent_str = visitor.block_indent.to_string(context.config);\n+            let outer_indent_str = context.block_indent.to_string(context.config);\n+\n+            result.push('\\n');\n+            result.push_str(&inner_indent_str);\n+            result.push_str(&trim_newlines(&visitor.buffer.to_string().trim()));\n+            result.push('\\n');\n+            result.push_str(&outer_indent_str);\n         }\n \n+        result.push('}');\n         Some(result)\n     } else {\n         unreachable!();\n@@ -1501,18 +1543,18 @@ fn rewrite_generics(context: &RewriteContext,\n }\n \n fn rewrite_trait_bounds(context: &RewriteContext,\n-                      param_bounds: &ast::TyParamBounds,\n+                      type_param_bounds: &ast::TyParamBounds,\n                       indent: Indent,\n                       width: usize)\n                       -> Option<String> {\n-    let bounds: &[_] = &param_bounds.as_slice();\n+    let bounds: &[_] = &type_param_bounds.as_slice();\n \n     if bounds.is_empty() {\n         return Some(String::new());\n     }\n \n     let bound_str = bounds.iter()\n-                            .filter_map(|ty_bound| ty_bound.rewrite(&context, 100, indent))\n+                            .filter_map(|ty_bound| ty_bound.rewrite(&context, width, indent))\n                             .collect::<Vec<String>>()\n                             .join(\" + \");\n "}, {"sha": "22f9807b8c55fe694a3724f109f84ff07117792c", "filename": "src/visitor.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=d24c31f74ca9f7c51576ce7151c99de0e2ffcb0a", "patch": "@@ -217,11 +217,11 @@ impl<'a> FmtVisitor<'a> {\n                     self.buffer.push_str(&trait_str);\n                     self.last_pos = item.span.hi;\n                 }\n-                self.block_indent = self.block_indent.block_indent(self.config);\n-                for item in trait_items {\n-                    self.visit_trait_item(&item);\n-                }\n-                self.block_indent = self.block_indent.block_unindent(self.config);\n+                // self.block_indent = self.block_indent.block_indent(self.config);\n+                // for item in trait_items {\n+                //     self.visit_trait_item(&item);\n+                // }\n+                // self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             ast::Item_::ItemExternCrate(_) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -319,7 +319,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n+    pub fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n         if self.visit_attrs(&ti.attrs) {\n             return;\n         }\n@@ -340,8 +340,22 @@ impl<'a> FmtVisitor<'a> {\n                               ti.span,\n                               ti.id);\n             }\n-            ast::TypeTraitItem(..) => {\n-                // FIXME: Implement\n+            ast::TypeTraitItem(ref type_param_bounds, _) => {\n+                let indent = self.block_indent;\n+                let mut result = String::new();\n+                result.push_str(&format!(\"type {}\", ti.ident));\n+\n+                let bounds: &[_] = &type_param_bounds.as_slice();\n+                let bound_str = bounds.iter()\n+                                        .filter_map(|ty_bound| ty_bound.rewrite(&self.get_context(), self.config.max_width, indent))\n+                                        .collect::<Vec<String>>()\n+                                        .join(\" + \");\n+                if bounds.len() > 0 {\n+                    result.push_str(&format!(\": {}\", bound_str));\n+                }\n+\n+                result.push(';');\n+                self.push_rewrite(ti.span, Some(result));\n             }\n         }\n     }"}]}