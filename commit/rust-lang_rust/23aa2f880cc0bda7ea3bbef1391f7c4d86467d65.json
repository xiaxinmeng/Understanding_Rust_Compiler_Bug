{"sha": "23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYWEyZjg4MGNjMGJkYTdlYTNiYmVmMTM5MWY3YzRkODY0NjdkNjU=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-02-19T19:04:37Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-02-22T04:15:28Z"}, "message": "Fix dogfood errors", "tree": {"sha": "6c27536d9a6d1ce0bcf686046addaca3dc5d3f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c27536d9a6d1ce0bcf686046addaca3dc5d3f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmAzL+gACgkQ2lnoZDo37Qbr8QEAlXocbWzWNKu/ykC5DJavM/VO\nqG/16b54mXvZId6TqccBALkmMkd9AMVuFaRTBktvlJSjx5kdNbTbr7FTCPI0S3cC\n=soKa\n-----END PGP SIGNATURE-----", "payload": "tree 6c27536d9a6d1ce0bcf686046addaca3dc5d3f97\nparent efe33f9fe4bf6b644f26f51500d557614a5f2c93\nauthor Jason Newcomb <jsnewcomb@pm.me> 1613761477 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1613967328 -0500\n\nFix dogfood errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "html_url": "https://github.com/rust-lang/rust/commit/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe33f9fe4bf6b644f26f51500d557614a5f2c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe33f9fe4bf6b644f26f51500d557614a5f2c93", "html_url": "https://github.com/rust-lang/rust/commit/efe33f9fe4bf6b644f26f51500d557614a5f2c93"}], "stats": {"total": 90, "additions": 60, "deletions": 30}, "files": [{"sha": "a50a3943bab7bd360b1b0c8bbf3122a7fb80174c", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "patch": "@@ -1,10 +1,14 @@\n-use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, paths, peel_hir_expr_refs, peel_mid_ty_refs_is_mutable,\n-    snippet_with_applicability, span_lint_and_sugg,\n+use crate::{\n+    map_unit_fn::OPTION_MAP_UNIT_FN,\n+    matches::MATCH_AS_REF,\n+    utils::{\n+        is_allowed, is_type_diagnostic_item, match_def_path, match_var, paths, peel_hir_expr_refs,\n+        peel_mid_ty_refs_is_mutable, snippet_with_applicability, span_lint_and_sugg,\n+    },\n };\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, BindingAnnotation, Block, Expr, ExprKind, Mutability, Pat, PatKind, Path, QPath};\n+use rustc_hir::{Arm, BindingAnnotation, Block, Expr, ExprKind, Mutability, Pat, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -37,6 +41,7 @@ declare_clippy_lint! {\n declare_lint_pass!(ManualMap => [MANUAL_MAP]);\n \n impl LateLintPass<'_> for ManualMap {\n+    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n@@ -88,14 +93,17 @@ impl LateLintPass<'_> for ManualMap {\n                 None => return,\n             };\n \n+            if cx.typeck_results().expr_ty(some_expr) == cx.tcx.types.unit\n+                && !is_allowed(cx, OPTION_MAP_UNIT_FN, expr.hir_id)\n+            {\n+                return;\n+            }\n+\n             // Determine which binding mode to use.\n             let explicit_ref = some_pat.contains_explicit_ref_binding();\n-            let binding_mutability = explicit_ref.or(if ty_ref_count != pat_ref_count {\n-                Some(ty_mutability)\n-            } else {\n-                None\n-            });\n-            let as_ref_str = match binding_mutability {\n+            let binding_ref = explicit_ref.or_else(|| (ty_ref_count != pat_ref_count).then(|| ty_mutability));\n+\n+            let as_ref_str = match binding_ref {\n                 Some(Mutability::Mut) => \".as_mut()\",\n                 Some(Mutability::Not) => \".as_ref()\",\n                 None => \"\",\n@@ -118,6 +126,13 @@ impl LateLintPass<'_> for ManualMap {\n                 if let Some(func) = can_pass_as_func(cx, some_binding, some_expr) {\n                     snippet_with_applicability(cx, func.span, \"..\", &mut app).into_owned()\n                 } else {\n+                    if match_var(some_expr, some_binding.name)\n+                        && !is_allowed(cx, MATCH_AS_REF, expr.hir_id)\n+                        && binding_ref.is_some()\n+                    {\n+                        return;\n+                    }\n+\n                     // `ref` and `ref mut` annotations were handled earlier.\n                     let annotation = if matches!(annotation, BindingAnnotation::Mutable) {\n                         \"mut \"\n@@ -161,10 +176,7 @@ impl LateLintPass<'_> for ManualMap {\n fn can_pass_as_func(cx: &LateContext<'tcx>, binding: Ident, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     match expr.kind {\n         ExprKind::Call(func, [arg])\n-            if matches!(arg.kind,\n-                ExprKind::Path(QPath::Resolved(None, Path { segments: [path], ..}))\n-                if path.ident == binding\n-            ) && cx.typeck_results().expr_adjustments(arg).is_empty() =>\n+            if match_var(arg, binding.name) && cx.typeck_results().expr_adjustments(arg).is_empty() =>\n         {\n             Some(func)\n         },"}, {"sha": "193509067582546244233ce967985a82d9169d0d", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "patch": "@@ -32,9 +32,18 @@ fn main() {\n \n     Some(0).map(|x| x + x);\n \n-    Some(String::new()).as_mut().map(|x| x.push_str(\"\"));\n+    #[warn(clippy::option_map_unit_fn)]\n+    match &mut Some(String::new()) {\n+        Some(x) => Some(x.push_str(\"\")),\n+        None => None,\n+    };\n \n-    Some(String::new()).as_ref().map(|x| &**x);\n+    #[allow(clippy::option_map_unit_fn)]\n+    {\n+        Some(String::new()).as_mut().map(|x| x.push_str(\"\"));\n+    }\n+\n+    Some(String::new()).as_ref().map(|x| x.len());\n \n     Some(String::new()).as_ref().map(|x| x.is_empty());\n "}, {"sha": "8b8187db0a9798217c024cddf2e40f6b93a05112", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "patch": "@@ -66,13 +66,22 @@ fn main() {\n         &&_ => None,\n     };\n \n+    #[warn(clippy::option_map_unit_fn)]\n     match &mut Some(String::new()) {\n         Some(x) => Some(x.push_str(\"\")),\n         None => None,\n     };\n \n+    #[allow(clippy::option_map_unit_fn)]\n+    {\n+        match &mut Some(String::new()) {\n+            Some(x) => Some(x.push_str(\"\")),\n+            None => None,\n+        };\n+    }\n+\n     match &mut Some(String::new()) {\n-        Some(ref x) => Some(&**x),\n+        Some(ref x) => Some(x.len()),\n         None => None,\n     };\n "}, {"sha": "210a30d05d40f30ce4c6480a1a17ccccc81524fc", "filename": "tests/ui/manual_map_option.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/tests%2Fui%2Fmanual_map_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23aa2f880cc0bda7ea3bbef1391f7c4d86467d65/tests%2Fui%2Fmanual_map_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.stderr?ref=23aa2f880cc0bda7ea3bbef1391f7c4d86467d65", "patch": "@@ -101,25 +101,25 @@ LL | |     };\n    | |_____^ help: try this: `Some(0).map(|x| x + x)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:69:5\n+  --> $DIR/manual_map_option.rs:77:9\n    |\n-LL | /     match &mut Some(String::new()) {\n-LL | |         Some(x) => Some(x.push_str(\"\")),\n-LL | |         None => None,\n-LL | |     };\n-   | |_____^ help: try this: `Some(String::new()).as_mut().map(|x| x.push_str(\"\"))`\n+LL | /         match &mut Some(String::new()) {\n+LL | |             Some(x) => Some(x.push_str(\"\")),\n+LL | |             None => None,\n+LL | |         };\n+   | |_________^ help: try this: `Some(String::new()).as_mut().map(|x| x.push_str(\"\"))`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:74:5\n+  --> $DIR/manual_map_option.rs:83:5\n    |\n LL | /     match &mut Some(String::new()) {\n-LL | |         Some(ref x) => Some(&**x),\n+LL | |         Some(ref x) => Some(x.len()),\n LL | |         None => None,\n LL | |     };\n-   | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| &**x)`\n+   | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.len())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:79:5\n+  --> $DIR/manual_map_option.rs:88:5\n    |\n LL | /     match &mut &Some(String::new()) {\n LL | |         Some(x) => Some(x.is_empty()),\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(String::new()).as_ref().map(|x| x.is_empty())`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:84:5\n+  --> $DIR/manual_map_option.rs:93:5\n    |\n LL | /     match Some((0, 1, 2)) {\n LL | |         Some((x, y, z)) => Some(x + y + z),\n@@ -137,7 +137,7 @@ LL | |     };\n    | |_____^ help: try this: `Some((0, 1, 2)).map(|(x, y, z)| x + y + z)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:89:5\n+  --> $DIR/manual_map_option.rs:98:5\n    |\n LL | /     match Some([1, 2, 3]) {\n LL | |         Some([first, ..]) => Some(first),\n@@ -146,7 +146,7 @@ LL | |     };\n    | |_____^ help: try this: `Some([1, 2, 3]).map(|[first, ..]| first)`\n \n error: manual implementation of `Option::map`\n-  --> $DIR/manual_map_option.rs:94:5\n+  --> $DIR/manual_map_option.rs:103:5\n    |\n LL | /     match &Some((String::new(), \"test\")) {\n LL | |         Some((x, y)) => Some((y, x)),"}]}