{"sha": "47b0784ba8e62a2e1b877750baeae10d16555fff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YjA3ODRiYThlNjJhMmUxYjg3Nzc1MGJhZWFlMTBkMTY1NTVmZmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T11:44:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::BlockCheckMode variants", "tree": {"sha": "e92bc429f6fec64ef930c8cf63bf0ec30d41c69e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e92bc429f6fec64ef930c8cf63bf0ec30d41c69e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47b0784ba8e62a2e1b877750baeae10d16555fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47b0784ba8e62a2e1b877750baeae10d16555fff", "html_url": "https://github.com/rust-lang/rust/commit/47b0784ba8e62a2e1b877750baeae10d16555fff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47b0784ba8e62a2e1b877750baeae10d16555fff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b57d40fe5a813ac957667ac04938753e3100f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b57d40fe5a813ac957667ac04938753e3100f55", "html_url": "https://github.com/rust-lang/rust/commit/3b57d40fe5a813ac957667ac04938753e3100f55"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "53438e3fca46a1f1d33e28cebbcc68995380d98c", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -30,7 +30,7 @@ use rustc_borrowck::graphviz as borrowck_dot;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n \n-use syntax::ast;\n+use syntax::ast::{self, BlockCheckMode};\n use syntax::codemap;\n use syntax::fold::{self, Folder};\n use syntax::print::{pp, pprust};\n@@ -651,7 +651,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n \n         if !self.within_static_or_const {\n \n-            let empty_block = expr_to_block(ast::DefaultBlock, None);\n+            let empty_block = expr_to_block(BlockCheckMode::Default, None);\n             let loop_expr = P(ast::Expr {\n                 node: ast::ExprLoop(empty_block, None),\n                 id: ast::DUMMY_NODE_ID,"}, {"sha": "0f6309cfd52a06bd3f592626fd298e1369041d33", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -1571,8 +1571,8 @@ pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibili\n \n pub fn lower_block_check_mode(lctx: &LoweringContext, b: &BlockCheckMode) -> hir::BlockCheckMode {\n     match *b {\n-        DefaultBlock => hir::DefaultBlock,\n-        UnsafeBlock(u) => hir::UnsafeBlock(lower_unsafe_source(lctx, u)),\n+        BlockCheckMode::Default => hir::DefaultBlock,\n+        BlockCheckMode::Unsafe(u) => hir::UnsafeBlock(lower_unsafe_source(lctx, u)),\n     }\n }\n "}, {"sha": "994b85a4458e4f3db8072c0bc6dc78bc50849572", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::BlockCheckMode::*;\n pub use self::CaptureClause::*;\n pub use self::Decl_::*;\n pub use self::ExplicitSelf_::*;\n@@ -870,8 +869,8 @@ pub type SpannedIdent = Spanned<Ident>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BlockCheckMode {\n-    DefaultBlock,\n-    UnsafeBlock(UnsafeSource),\n+    Default,\n+    Unsafe(UnsafeSource),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "48761ce767c4d20b440725209353ce83bb87c565", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n use abi;\n-use ast::{Ident, Generics, Expr};\n-use ast::UnOp;\n-use ast;\n+use ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp};\n use attr;\n use codemap::{Span, respan, Spanned, DUMMY_SP, Pos};\n use ext::base::ExtCtxt;\n@@ -575,7 +573,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                stmts: stmts,\n                expr: expr,\n                id: ast::DUMMY_NODE_ID,\n-               rules: ast::DefaultBlock,\n+               rules: BlockCheckMode::Default,\n                span: span,\n             })\n     }"}, {"sha": "ef50b3adad3ffa0da8376693d73097def0b47d43", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -12,7 +12,7 @@\n \n // Predicates on exprs and stmts that the pretty-printer and parser use\n \n-use ast;\n+use ast::{self, BlockCheckMode};\n \n /// Does this expression require a semicolon to be treated\n /// as a statement? The negation of this: 'can this expression\n@@ -37,7 +37,7 @@ pub fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n \n pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n     match e.node {\n-        ast::ExprBlock(ref block) => block.rules == ast::DefaultBlock,\n+        ast::ExprBlock(ref block) => block.rules == BlockCheckMode::Default,\n         _ => false,\n     }\n }"}, {"sha": "4c2e00341bc1f580e49dbc28db428dd2c9bd17ac", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -988,7 +988,7 @@ mod tests {\n                                             span: sp(17,19)})),\n                                         expr: None,\n                                         id: ast::DUMMY_NODE_ID,\n-                                        rules: ast::DefaultBlock, // no idea\n+                                        rules: ast::BlockCheckMode::Default, // no idea\n                                         span: sp(15,21),\n                                     })),\n                             vis: ast::Inherited,"}, {"sha": "f8c981ce9f654ac9c0fcae523be693afb83088d4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -18,7 +18,7 @@ use ast::{Mod, Arg, Arm, Attribute, BindingMode};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n-use ast::{Decl, DeclItem, DeclLocal, DefaultBlock};\n+use ast::{Decl, DeclItem, DeclLocal};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n@@ -53,7 +53,7 @@ use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBounds, TyParen, TyPath, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec};\n use ast::TypeTraitItem;\n-use ast::{UnnamedField, UnsafeBlock};\n+use ast::UnnamedField;\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n use attr::{ThinAttributes, ThinAttributesExt, AttributesExt};\n@@ -2104,7 +2104,7 @@ impl<'a> Parser<'a> {\n                 }\n             },\n             token::OpenDelim(token::Brace) => {\n-                return self.parse_block_expr(lo, DefaultBlock, attrs);\n+                return self.parse_block_expr(lo, BlockCheckMode::Default, attrs);\n             },\n             token::BinOp(token::Or) |  token::OrOr => {\n                 let lo = self.span.lo;\n@@ -2220,7 +2220,7 @@ impl<'a> Parser<'a> {\n                 if self.eat_keyword(keywords::Unsafe) {\n                     return self.parse_block_expr(\n                         lo,\n-                        UnsafeBlock(ast::UserProvided),\n+                        BlockCheckMode::Unsafe(ast::UserProvided),\n                         attrs);\n                 }\n                 if self.eat_keyword(keywords::Return) {\n@@ -3062,7 +3062,7 @@ impl<'a> Parser<'a> {\n                     stmts: vec![],\n                     span: body_expr.span,\n                     expr: Some(body_expr),\n-                    rules: DefaultBlock,\n+                    rules: BlockCheckMode::Default,\n                 })\n             }\n             _ => {\n@@ -3826,7 +3826,7 @@ impl<'a> Parser<'a> {\n                                  \"place this code inside a block\"));\n         }\n \n-        self.parse_block_tail(lo, DefaultBlock)\n+        self.parse_block_tail(lo, BlockCheckMode::Default)\n     }\n \n     /// Parse a block. Inner attrs are allowed.\n@@ -3836,7 +3836,7 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n         try!(self.expect(&token::OpenDelim(token::Brace)));\n         Ok((try!(self.parse_inner_attributes()),\n-         try!(self.parse_block_tail(lo, DefaultBlock))))\n+         try!(self.parse_block_tail(lo, BlockCheckMode::Default))))\n     }\n \n     /// Parse the rest of a block expression or function body"}, {"sha": "bf35835e3b794253580bd3ada859a78da5ba0a93", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -11,7 +11,7 @@\n pub use self::AnnNode::*;\n \n use abi;\n-use ast::{self, TokenTree};\n+use ast::{self, TokenTree, BlockCheckMode};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;\n use attr::ThinAttributesExt;\n@@ -1684,8 +1684,8 @@ impl<'a> State<'a> {\n                                       attrs: &[ast::Attribute],\n                                       close_box: bool) -> io::Result<()> {\n         match blk.rules {\n-            ast::UnsafeBlock(..) => try!(self.word_space(\"unsafe\")),\n-            ast::DefaultBlock => ()\n+            BlockCheckMode::Unsafe(..) => try!(self.word_space(\"unsafe\")),\n+            BlockCheckMode::Default => ()\n         }\n         try!(self.maybe_print_comment(blk.span.lo));\n         try!(self.ann.pre(self, NodeBlock(blk)));\n@@ -2610,7 +2610,7 @@ impl<'a> State<'a> {\n                 try!(self.print_block_unclosed_indent(&**blk, INDENT_UNIT));\n \n                 // If it is a user-provided unsafe block, print a comma after it\n-                if let ast::UnsafeBlock(ast::UserProvided) = blk.rules {\n+                if let BlockCheckMode::Unsafe(ast::UserProvided) = blk.rules {\n                     try!(word(&mut self.s, \",\"));\n                 }\n             }"}, {"sha": "153e4eedcf2f3b57739f0c11f154fb39e9e5c566", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b0784ba8e62a2e1b877750baeae10d16555fff/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=47b0784ba8e62a2e1b877750baeae10d16555fff", "patch": "@@ -1266,7 +1266,7 @@ impl<'a> MethodDef<'a> {\n                     stmts: vec![],\n                     expr: Some(call),\n                     id: ast::DUMMY_NODE_ID,\n-                    rules: ast::UnsafeBlock(ast::CompilerGenerated),\n+                    rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n                     span: sp }));\n \n                 let target_ty = cx.ty_ident(sp, cx.ident_of(target_type_name));\n@@ -1302,7 +1302,7 @@ impl<'a> MethodDef<'a> {\n                 stmts: vec![],\n                 expr: Some(call),\n                 id: ast::DUMMY_NODE_ID,\n-                rules: ast::UnsafeBlock(ast::CompilerGenerated),\n+                rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n                 span: sp }));\n             match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], unreachable));\n "}]}