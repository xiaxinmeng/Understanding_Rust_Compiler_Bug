{"sha": "c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOWE3NTIwZTdmYjRhNWI0ZDRlY2NmYzU5NGUwNTc5M2VmNjY4OGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-22T04:42:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-22T04:42:11Z"}, "message": "auto merge of #18213 : pcwalton/rust/pcg-default, r=aturon\n\nEnable parallel codegen (2 units) by default when --opt-level is 0 or 1.  This\r\ngives a minor speedup on large crates (~10%), with only a tiny slowdown (~2%)\r\nfor small ones (which usually build in under a second regardless).  The current\r\ndefault (no parallelization) is used when the user requests optimization\r\n(--opt-level 2 or 3), and when the user has enabled LTO (which is incompatible\r\nwith parallel codegen).\r\n\r\nThis commit also changes the rust build system to use parallel codegen\r\nwhen appropriate.  This means codegen-units=4 for stage0 always, and\r\nalso for stage1 and stage2 when configured with --disable-optimize.\r\n(Other settings use codegen-units=1 for stage1 and stage2, to get\r\nmaximum performance for release binaries.)  The build system also sets\r\ncodegen-units=1 for compiletest tests (compiletest does its own\r\nparallelization) and uses the same setting as stage2 for crate tests.\r\n\r\nr? @aturon", "tree": {"sha": "494c36371a1efda91ac5dab213d3cd522636a900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/494c36371a1efda91ac5dab213d3cd522636a900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "html_url": "https://github.com/rust-lang/rust/commit/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2cf60631502567007ea652f8ef299d907ee2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2cf60631502567007ea652f8ef299d907ee2c3", "html_url": "https://github.com/rust-lang/rust/commit/3d2cf60631502567007ea652f8ef299d907ee2c3"}, {"sha": "c245c5bbad10923b47c9f66d5f0da2913ef11a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c245c5bbad10923b47c9f66d5f0da2913ef11a38", "html_url": "https://github.com/rust-lang/rust/commit/c245c5bbad10923b47c9f66d5f0da2913ef11a38"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "c43d17426b259ec6f8b30b48495ec6d33bc38987", "filename": "mk/main.mk", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "patch": "@@ -157,6 +157,13 @@ RUSTFLAGS_STAGE1 += -C prefer-dynamic\n # by not emitting them.\n RUSTFLAGS_STAGE0 += -Z no-landing-pads\n \n+# Go fast for stage0, and also for stage1/stage2 if optimization is off.\n+RUSTFLAGS_STAGE0 += -C codegen-units=4\n+ifdef CFG_DISABLE_OPTIMIZE\n+\tRUSTFLAGS_STAGE1 += -C codegen-units=4\n+\tRUSTFLAGS_STAGE2 += -C codegen-units=4\n+endif\n+\n # platform-specific auto-configuration\n include $(CFG_SRC_DIR)mk/platform.mk\n "}, {"sha": "3db9beb270eef4b41d0a54fc074d49b3ea84bba3", "filename": "mk/tests.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "patch": "@@ -628,6 +628,10 @@ CTEST_RUSTC_FLAGS := $$(subst -O,,$$(CTEST_RUSTC_FLAGS))\n ifndef CFG_DISABLE_OPTIMIZE_TESTS\n CTEST_RUSTC_FLAGS += -O\n endif\n+# Force codegen-units=1 for compiletest tests.  compiletest does its own\n+# parallelization internally, so rustc's default codegen-units=2 will actually\n+# slow things down.\n+CTEST_RUSTC_FLAGS += -C codegen-units=1\n \n CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\"}, {"sha": "d6798d59ecb3d90424016d6d29b4cbf7e10d924a", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29a7520e7fb4a5b4d4eccfc594e05793ef6688d/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=c29a7520e7fb4a5b4d4eccfc594e05793ef6688d", "patch": "@@ -780,7 +780,20 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         early_warn(\"the --crate-file-name argument has been renamed to \\\n                     --print-file-name\");\n     }\n-    let cg = build_codegen_options(matches);\n+\n+    let mut cg = build_codegen_options(matches);\n+\n+    if cg.codegen_units == 0 {\n+        match opt_level {\n+            // `-C lto` doesn't work with multiple codegen units.\n+            _ if cg.lto => cg.codegen_units = 1,\n+\n+            No | Less => cg.codegen_units = 2,\n+            Default | Aggressive => cg.codegen_units = 1,\n+        }\n+    }\n+    let cg = cg;\n+\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n         early_warn(\"-C remark will not show source locations without --debuginfo\");"}]}