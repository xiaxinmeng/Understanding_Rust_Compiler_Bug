{"sha": "9e963b87fced64c0df49f263da2e577153480944", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTYzYjg3ZmNlZDY0YzBkZjQ5ZjI2M2RhMmU1NzcxNTM0ODA5NDQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-05T07:17:04Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-05T07:17:04Z"}, "message": "Add InString field to FullCodeCharKind", "tree": {"sha": "0fc1d2fceeed0678cb2614607820081e50ac190a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc1d2fceeed0678cb2614607820081e50ac190a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e963b87fced64c0df49f263da2e577153480944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e963b87fced64c0df49f263da2e577153480944", "html_url": "https://github.com/rust-lang/rust/commit/9e963b87fced64c0df49f263da2e577153480944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e963b87fced64c0df49f263da2e577153480944/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26fa7515e52d4434cd78d8d745f4de3a076b46fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/26fa7515e52d4434cd78d8d745f4de3a076b46fe", "html_url": "https://github.com/rust-lang/rust/commit/26fa7515e52d4434cd78d8d745f4de3a076b46fe"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "a236c2699a6fcfdf4dd205fd5299c3f2a34bf22b", "filename": "src/comment.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e963b87fced64c0df49f263da2e577153480944/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e963b87fced64c0df49f263da2e577153480944/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=9e963b87fced64c0df49f263da2e577153480944", "patch": "@@ -464,7 +464,7 @@ impl FindUncommented for str {\n                     return Some(i - pat.len());\n                 }\n                 Some(c) => match kind {\n-                    FullCodeCharKind::Normal if b == c => {}\n+                    FullCodeCharKind::Normal | FullCodeCharKind::InString if b == c => {}\n                     _ => {\n                         needle_iter = pat.chars();\n                     }\n@@ -487,7 +487,7 @@ impl FindUncommented for str {\n pub fn find_comment_end(s: &str) -> Option<usize> {\n     let mut iter = CharClasses::new(s.char_indices());\n     for (kind, (i, _c)) in &mut iter {\n-        if kind == FullCodeCharKind::Normal {\n+        if kind == FullCodeCharKind::Normal || kind == FullCodeCharKind::InString {\n             return Some(i);\n         }\n     }\n@@ -568,15 +568,17 @@ enum FullCodeCharKind {\n     InComment,\n     /// Last character of a comment, '\\n' for a line comment, '/' for a block comment.\n     EndComment,\n+    /// Inside a string.\n+    InString,\n }\n \n impl FullCodeCharKind {\n     fn is_comment(&self) -> bool {\n         match *self {\n-            FullCodeCharKind::Normal => false,\n             FullCodeCharKind::StartComment |\n             FullCodeCharKind::InComment |\n             FullCodeCharKind::EndComment => true,\n+            _ => false,\n         }\n     }\n \n@@ -612,21 +614,34 @@ where\n     fn next(&mut self) -> Option<(FullCodeCharKind, T::Item)> {\n         let item = try_opt!(self.base.next());\n         let chr = item.get_char();\n+        let mut char_kind = FullCodeCharKind::Normal;\n         self.status = match self.status {\n             CharClassesStatus::LitString => match chr {\n                 '\"' => CharClassesStatus::Normal,\n-                '\\\\' => CharClassesStatus::LitStringEscape,\n-                _ => CharClassesStatus::LitString,\n+                '\\\\' => {\n+                    char_kind = FullCodeCharKind::InString;\n+                    CharClassesStatus::LitStringEscape\n+                }\n+                _ => {\n+                    char_kind = FullCodeCharKind::InString;\n+                    CharClassesStatus::LitString\n+                }\n             },\n-            CharClassesStatus::LitStringEscape => CharClassesStatus::LitString,\n+            CharClassesStatus::LitStringEscape => {\n+                char_kind = FullCodeCharKind::InString;\n+                CharClassesStatus::LitString\n+            }\n             CharClassesStatus::LitChar => match chr {\n                 '\\\\' => CharClassesStatus::LitCharEscape,\n                 '\\'' => CharClassesStatus::Normal,\n                 _ => CharClassesStatus::LitChar,\n             },\n             CharClassesStatus::LitCharEscape => CharClassesStatus::LitChar,\n             CharClassesStatus::Normal => match chr {\n-                '\"' => CharClassesStatus::LitString,\n+                '\"' => {\n+                    char_kind = FullCodeCharKind::InString;\n+                    CharClassesStatus::LitString\n+                }\n                 '\\'' => CharClassesStatus::LitChar,\n                 '/' => match self.base.peek() {\n                     Some(next) if next.get_char() == '*' => {\n@@ -680,7 +695,7 @@ where\n                 }\n             },\n         };\n-        Some((FullCodeCharKind::Normal, item))\n+        Some((char_kind, item))\n     }\n }\n \n@@ -707,9 +722,12 @@ impl<'a> Iterator for UngroupedCommentCodeSlices<'a> {\n     fn next(&mut self) -> Option<Self::Item> {\n         let (kind, (start_idx, _)) = try_opt!(self.iter.next());\n         match kind {\n-            FullCodeCharKind::Normal => {\n+            FullCodeCharKind::Normal | FullCodeCharKind::InString => {\n                 // Consume all the Normal code\n-                while let Some(&(FullCodeCharKind::Normal, (_, _))) = self.iter.peek() {\n+                while let Some(&(char_kind, _)) = self.iter.peek() {\n+                    if char_kind.is_comment() {\n+                        break;\n+                    }\n                     let _ = self.iter.next();\n                 }\n             }\n@@ -1032,7 +1050,7 @@ mod test {\n     fn uncommented(text: &str) -> String {\n         CharClasses::new(text.chars())\n             .filter_map(|(s, c)| match s {\n-                FullCodeCharKind::Normal => Some(c),\n+                FullCodeCharKind::Normal | FullCodeCharKind::InString => Some(c),\n                 _ => None,\n             })\n             .collect()"}]}