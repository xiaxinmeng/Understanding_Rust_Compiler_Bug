{"sha": "86c183716cc6dfd44da15c86a7726d0a117c214e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YzE4MzcxNmNjNmRmZDQ0ZGExNWM4NmE3NzI2ZDBhMTE3YzIxNGU=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2020-12-09T08:17:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T08:17:28Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: bjorn3 <bjorn3@users.noreply.github.com>", "tree": {"sha": "9f3214d0207261999df1169fc3c7ab7e5d0fc8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f3214d0207261999df1169fc3c7ab7e5d0fc8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c183716cc6dfd44da15c86a7726d0a117c214e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0IgYCRBK7hj4Ov3rIwAAdHIIAERlQKS9UNJ0zKI4fic4Yrqk\nRdEWk/rmvUyvNt+qer/PDIfAGqS1ng2uwEah6ib0PLiW9q6SPVqf7nuTfiub3U/J\nKj2ERGG1qX414qwyzVuVgGd37qTmHBQLUhAvDZqe7eFDxH+pW43wXP8tYnD71RSd\nXdvIFFWW36r3woR/F6mE9qPHBzDvv1VMnoiVUeqTFMRGXoi+m/26n2LZ+/Q+u7T0\nUiD96T0+fd7671WJMMwd6Sea0NRPDyoaQ+o13+OjTa4C+BudrxiiXfqUtwmAxfPf\nLDQ6kP/MhMCxjhiB39Mmu1Z3bXw/fIIfHrBw3ksuUpXbdJlUbNeEq+i3Mm//Lfg=\n=1vt8\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f3214d0207261999df1169fc3c7ab7e5d0fc8ed\nparent 7738467e0a11c9878d9e9486daeb0dc18d93b8e8\nauthor ivan770 <leshenko.ivan770@gmail.com> 1607501848 +0200\ncommitter GitHub <noreply@github.com> 1607501848 +0200\n\nApply suggestions from code review\n\nCo-authored-by: bjorn3 <bjorn3@users.noreply.github.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c183716cc6dfd44da15c86a7726d0a117c214e", "html_url": "https://github.com/rust-lang/rust/commit/86c183716cc6dfd44da15c86a7726d0a117c214e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c183716cc6dfd44da15c86a7726d0a117c214e/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7738467e0a11c9878d9e9486daeb0dc18d93b8e8", "html_url": "https://github.com/rust-lang/rust/commit/7738467e0a11c9878d9e9486daeb0dc18d93b8e8"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "27ffcf291086b80b521bdec12cbd2991009e32b8", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/86c183716cc6dfd44da15c86a7726d0a117c214e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c183716cc6dfd44da15c86a7726d0a117c214e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=86c183716cc6dfd44da15c86a7726d0a117c214e", "patch": "@@ -77,13 +77,11 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             }\n         }\n         let body_expr = &body[body.body_expr];\n-        if let Expr::Block { tail: Some(t), .. } = body_expr {\n-            self.validate_results_in_tail_expr(body.body_expr, *t, db);\n-        } else {\n-            if let Expr::Block { statements, .. } = body_expr {\n-                if let Some(Statement::Expr(id)) = statements.last() {\n-                    self.validate_missing_tail_expr(body.body_expr, *id, db);\n-                }\n+        if let Expr::Block { statements, tail, .. } = body_expr {\n+            if let Some(t) = tail {\n+                self.validate_results_in_tail_expr(body.body_expr, *t, db);\n+            } else if let Some(Statement::Expr(id)) = statements.last() {\n+                self.validate_missing_tail_expr(body.body_expr, *id, db);\n             }\n         }\n     }\n@@ -336,17 +334,22 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             None => return,\n         };\n \n-        if let Some(possible_tail_ty) = self.infer.type_of_expr.get(possible_tail_id) {\n-            if mismatch.actual == Ty::unit() && mismatch.expected == *possible_tail_ty {\n-                let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        let possible_tail_ty = if let Some(possible_tail_ty) = self.infer.type_of_expr.get(possible_tail_id) {\n+            possible_tail_ty\n+        } else {\n+            return;\n+        };\n \n-                if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n-                    self.sink.push(RemoveThisSemicolon {\n-                        file: source_ptr.file_id,\n-                        expr: source_ptr.value,\n-                    });\n-                }\n-            }\n+        if mismatch.actual != Ty::unit() || mismatch.expected != *possible_tail_ty {\n+            return;\n+        }\n+\n+        let (_, source_map) = db.body_with_source_map(self.owner.into());\n+        if let Ok(source_ptr) = source_map.expr_syntax(possible_tail_id) {\n+            self.sink.push(RemoveThisSemicolon {\n+                file: source_ptr.file_id,\n+                expr: source_ptr.value,\n+            });\n         }\n     }\n }"}]}