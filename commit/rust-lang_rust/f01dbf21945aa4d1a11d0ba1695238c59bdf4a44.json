{"sha": "f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMWRiZjIxOTQ1YWE0ZDFhMTFkMGJhMTY5NTIzOGM1OWJkZjRhNDQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-09T19:17:31Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-10T20:28:55Z"}, "message": "More editing work on TRPL\n\nFill out blank section headers. Copy edit the entire first section.", "tree": {"sha": "f32c2ae2c41d79342fb67411ae11d49d98596d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32c2ae2c41d79342fb67411ae11d49d98596d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "html_url": "https://github.com/rust-lang/rust/commit/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7", "html_url": "https://github.com/rust-lang/rust/commit/c897ac04e2ebda378fd9e38f6ec0878ae3a2baf7"}], "stats": {"total": 454, "additions": 282, "deletions": 172}, "files": [{"sha": "582ed3b7e65c56a256c60f8a76e0fc3629328f5d", "filename": "src/doc/trpl/effective-rust.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Feffective-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Feffective-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Feffective-rust.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1 +1,8 @@\n % Effective Rust\n+\n+So you\u2019ve learned how to write some Rust code. But there\u2019s a difference between\n+writing *any* Rust code and writing *good* Rust code.\n+\n+This section consists of relatively independent tutorials which show you how to\n+take your Rust to the next level. Common patterns and standard library features\n+will be introduced. Read these sections in any order of your choosing."}, {"sha": "555d40e65970618b2ed122362da5a15ec8159599", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1 +1,5 @@\n % Getting Started\n+\n+This first section of the book will get you going with Rust and its tooling.\n+First, we\u2019ll install Rust. Then: the classic \u2018Hello World\u2019 program. Finally,\n+we\u2019ll talk about Cargo, Rust\u2019s build system and package manager."}, {"sha": "8d8b17343343e08ed21e7cfbb3d6533650415622", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 79, "deletions": 49, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1,26 +1,27 @@\n % Hello, Cargo!\n \n-[Cargo](http://crates.io) is a tool that Rustaceans use to help manage their\n-Rust projects. Cargo is currently in a pre-1.0 state, just like Rust, and so it\n-is still a work in progress. However, it is already good enough to use for many\n-Rust projects, and so it is assumed that Rust projects will use Cargo from the\n-beginning.\n+[Cargo][cratesio] is a tool that Rustaceans use to help manage their Rust\n+projects. Cargo is currently in a pre-1.0 state, and so it is still a work in\n+progress. However, it is already good enough to use for many Rust projects, and\n+so it is assumed that Rust projects will use Cargo from the beginning.\n+\n+[cratesio]: https://doc.crates.io\n \n Cargo manages three things: building your code, downloading the dependencies\n your code needs, and building those dependencies. At first, your\n-program doesn't have any dependencies, so we'll only be using the first part of\n-its functionality. Eventually, we'll add more. Since we started off by using\n+program doesn\u2019t have any dependencies, so we\u2019ll only be using the first part of\n+its functionality. Eventually, we\u2019ll add more. Since we started off by using\n Cargo, it'll be easy to add later.\n \n-If you installed Rust via the official installers you will also have\n-Cargo. If you installed Rust some other way, you may want to [check\n-the Cargo\n-README](https://github.com/rust-lang/cargo#installing-cargo-from-nightlies)\n-for specific instructions about installing it.\n+If you installed Rust via the official installers you will also have Cargo. If\n+you installed Rust some other way, you may want to [check the Cargo\n+README][cargoreadme] for specific instructions about installing it.\n+\n+[cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies\n \n ## Converting to Cargo\n \n-Let's convert Hello World to Cargo.\n+Let\u2019s convert Hello World to Cargo.\n \n To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n configuration file, and put our source file in the right place. Let's\n@@ -52,14 +53,9 @@ Put this inside:\n name = \"hello_world\"\n version = \"0.0.1\"\n authors = [ \"Your name <you@example.com>\" ]\n-\n-[[bin]]\n-\n-name = \"hello_world\"\n ```\n \n-This file is in the [TOML](https://github.com/toml-lang/toml) format. Let's let\n-it explain itself to you:\n+This file is in the [TOML][toml] format. Let\u2019s let it explain itself to you:\n \n > TOML aims to be a minimal configuration file format that's easy to read due\n > to obvious semantics. TOML is designed to map unambiguously to a hash table.\n@@ -68,10 +64,7 @@ it explain itself to you:\n \n TOML is very similar to INI, but with some extra goodies.\n \n-Anyway, there are two *tables* in this file: `package` and `bin`. The first\n-tells Cargo metadata about your package. The second tells Cargo that we're\n-interested in building a binary, not a library (though we could do both!), as\n-well as what it is named.\n+[toml]: https://github.com/toml-lang/toml\n \n Once you have this file in place, we should be ready to build! Try this:\n \n@@ -83,13 +76,32 @@ Hello, world!\n ```\n \n Bam! We build our project with `cargo build`, and run it with\n-`./target/debug/hello_world`. This hasn't bought us a whole lot over our simple use\n-of `rustc`, but think about the future: when our project has more than one\n-file, we would need to call `rustc` more than once and pass it a bunch of options to\n-tell it to build everything together. With Cargo, as our project grows, we can\n-just `cargo build`, and it'll work the right way. When your project is finally\n-ready for release, you can use `cargo build --release` to compile your crates with\n-optimizations.\n+`./target/debug/hello_world`. We can do both in one step with `cargo run`:\n+\n+```bash\n+$ cargo run\n+     Running `target/debug/hello_world`\n+Hello, world!\n+```\n+\n+Notice that we didn\u2019t re-build the project this time. Cargo figured out that\n+we hadn\u2019t changed the source file, and so it just ran the binary. If we had\n+made a modification, we would have seen it do both:\n+\n+```bash\n+$ cargo build\n+   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)\n+     Running `target/debug/hello_world`\n+Hello, world!\n+```\n+\n+This hasn\u2019t bought us a whole lot over our simple use of `rustc`, but think\n+about the future: when our project gets more complex, we would need to do more\n+things to get all of the parts to properly compile. With Cargo, as our project\n+grows, we can just `cargo build`, and it\u2019ll work the right way.\n+\n+When your project is finally ready for release, you can use\n+`cargo build --release` to compile your project with optimizations.\n \n You'll also notice that Cargo has created a new file: `Cargo.lock`.\n \n@@ -100,27 +112,34 @@ version = \"0.0.1\"\n ```\n \n This file is used by Cargo to keep track of dependencies in your application.\n-Right now, we don't have any, so it's a bit sparse. You won't ever need\n+Right now, we don\u2019t have any, so it\u2019s a bit sparse. You won't ever need\n to touch this file yourself, just let Cargo handle it.\n \n-That's it! We've successfully built `hello_world` with Cargo. Even though our\n-program is simple, it's using much of the real tooling that you'll use for the\n-rest of your Rust career.\n+That\u2019s it! We\u2019ve successfully built `hello_world` with Cargo. Even though our\n+program is simple, it\u2019s using much of the real tooling that you\u2019ll use for the\n+rest of your Rust career. You can expect to do this to get started with\n+virtually all Rust projects:\n+\n+```bash\n+$ git clone someurl.com/foo\n+$ cd foo\n+$ cargo build\n+```\n \n ## A New Project\n \n-You don't have to go through this whole process every time you want to start a new\n-project! Cargo has the ability to make a bare-bones project directory in which you\n-can start developing right away.\n+You don\u2019t have to go through this whole process every time you want to start a\n+new project! Cargo has the ability to make a bare-bones project directory in\n+which you can start developing right away.\n \n To start a new project with Cargo, use `cargo new`:\n \n ```bash\n $ cargo new hello_world --bin\n ```\n \n-We're passing `--bin` because we're making a binary program: if we\n-were making a library, we'd leave it off.\n+We\u2019re passing `--bin` because we're making a binary program: if we were making\n+a library, we'd leave it off.\n \n Let's check out what Cargo has generated for us:\n \n@@ -135,10 +154,10 @@ $ tree .\n 1 directory, 2 files\n ```\n \n-If you don't have the `tree` command, you can probably get it from your distro's package\n-manager. It's not necessary, but it's certainly useful.\n+If you don't have the `tree` command, you can probably get it from your\n+distribution\u2019s package manager. It\u2019s not necessary, but it\u2019s certainly useful.\n \n-This is all we need to get started. First, let's check out `Cargo.toml`:\n+This is all we need to get started. First, let\u2019s check out `Cargo.toml`:\n \n ```toml\n [package]\n@@ -148,21 +167,32 @@ version = \"0.0.1\"\n authors = [\"Your Name <you@example.com>\"]\n ```\n \n-Cargo has populated this file with reasonable defaults based off the arguments you gave\n-it and your `git` global configuration. You may notice that Cargo has also initialized\n-the `hello_world` directory as a `git` repository.\n+Cargo has populated this file with reasonable defaults based off the arguments\n+you gave it and your `git` global configuration. You may notice that Cargo has\n+also initialized the `hello_world` directory as a `git` repository.\n \n-Here's what's in `src/main.rs`:\n+Here\u2019s what\u2019s in `src/main.rs`:\n \n ```rust\n fn main() {\n     println!(\"Hello, world!\");\n }\n ```\n \n-Cargo has generated a \"Hello World!\" for us, and you're ready to start coding! A\n-much more in-depth guide to Cargo can be found [here](http://doc.crates.io/guide.html).\n+Cargo has generated a \"Hello World!\" for us, and you\u2019re ready to start coding! Cargo\n+has its own [guide][guide] which covers Cargo\u2019s features in much more depth.\n \n-Now that you've got the tools down, let's actually learn more about the Rust\n+[guide]: http://doc.crates.io/guide.html\n+\n+Now that you\u2019ve got the tools down, let\u2019s actually learn more about the Rust\n language itself. These are the basics that will serve you well through the rest\n of your time with Rust.\n+\n+You have two options: Dive into a project with \u2018[Learn Rust][learnrust]\u2019, or\n+start from the bottom and work your way up with \u2018[Syntax and\n+Semantics][syntax]\u2019. More experienced systems programmers will probably prefer\n+\u2018Learn Rust\u2019, while those from dynamic backgrounds may enjoy either. Different\n+people learn differently! Choose whatever\u2019s right for you.\n+\n+[learnrust]: learn-rust.html\n+[syntax]: syntax-and-semantics.html"}, {"sha": "6c320d27ba6548f234531dbde47ffb4c7abb6f1b", "filename": "src/doc/trpl/hello-world.md", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fhello-world.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fhello-world.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-world.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1,9 +1,9 @@\n % Hello, world!\n \n-Now that you have Rust installed, let's write your first Rust program. It's\n+Now that you have Rust installed, let\u2019s write your first Rust program. It\u2019s\n traditional to make your first program in any new language one that prints the\n-text \"Hello, world!\" to the screen. The nice thing about starting with such a\n-simple program is that you can verify that your compiler isn't just installed,\n+text \u201cHello, world!\u201d to the screen. The nice thing about starting with such a\n+simple program is that you can verify that your compiler isn\u2019t just installed,\n but also working properly. And printing information to the screen is a pretty\n common thing to do.\n \n@@ -12,152 +12,152 @@ to make a `projects` directory in my home directory, and keep all my projects\n there. Rust does not care where your code lives.\n \n This actually leads to one other concern we should address: this guide will\n-assume that you have basic familiarity with the command line. Rust does not\n-require that you know a whole ton about the command line, but until the\n-language is in a more finished state, IDE support is spotty. Rust makes no\n-specific demands on your editing tooling, or where your code lives.\n+assume that you have basic familiarity with the command line. Rust itself makes\n+no specific demands on your editing tooling, or where your code lives. If you\n+prefer an IDE to the command line, you may want to check out\n+[SolidOak][solidoak], or wherever plugins are for your favorite IDE. There are\n+a number of extensions of varying quality in development by the community. The\n+Rust team also ships [plugins for various editors][plugins]. Configuring your\n+editor or IDE is out of the scope of this tutorial, so check the documentation\n+for your setup, specifically.\n \n-With that said, let's make a directory in our projects directory.\n+[solidoak]: https://github.com/oakes/SolidOak\n+[plugins]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md\n \n-```{bash}\n+With that said, let\u2019s make a directory in our projects directory.\n+\n+```bash\n $ mkdir ~/projects\n $ cd ~/projects\n $ mkdir hello_world\n $ cd hello_world\n ```\n \n-If you're on Windows and not using PowerShell, the `~` may not work. Consult\n+If you\u2019re on Windows and not using PowerShell, the `~` may not work. Consult\n the documentation for your shell for more details.\n \n-Let's make a new source file next. I'm going to use the syntax `editor\n-filename` to represent editing a file in these examples, but you should use\n-whatever method you want. We'll call our file `main.rs`:\n-\n-```{bash}\n-$ editor main.rs\n-```\n+Let\u2019s make a new source file next. We\u2019ll call our file `main.rs`. Rust files\n+always end in a `.rs` extension. If you\u2019re using more than one word in your\n+filename, use an underscore: `hello_world.rs` rather than `helloworld.rs`.\n \n-Rust files always end in a `.rs` extension. If you're using more than one word\n-in your filename, use an underscore. `hello_world.rs` rather than\n-`helloworld.rs`.\n+Now that you\u2019ve got your file open, type this in:\n \n-Now that you've got your file open, type this in:\n-\n-```{rust}\n+```rust\n fn main() {\n     println!(\"Hello, world!\");\n }\n ```\n \n Save the file, and then type this into your terminal window:\n \n-```{bash}\n+```bash\n $ rustc main.rs\n $ ./main # or main.exe on Windows\n Hello, world!\n ```\n \n-You can also run these examples on [play.rust-lang.org](http://play.rust-lang.org/) by clicking on the arrow that appears in the upper right of the example when you mouse over the code.\n-\n-Success! Let's go over what just happened in detail.\n+Success! Let\u2019s go over what just happened in detail.\n \n-```{rust}\n+```rust\n fn main() {\n \n }\n ```\n \n These lines define a *function* in Rust. The `main` function is special:\n-it's the beginning of every Rust program. The first line says \"I'm declaring a\n-function named `main`, which takes no arguments and returns nothing.\" If there\n+it's the beginning of every Rust program. The first line says \"I\u2019m declaring a\n+function named `main` which takes no arguments and returns nothing.\" If there\n were arguments, they would go inside the parentheses (`(` and `)`), and because\n-we aren't returning anything from this function, we can omit the return type\n-entirely. We'll get to it later.\n+we aren\u2019t returning anything from this function, we can omit the return type\n+entirely. We\u2019ll get to it later.\n \n-You'll also note that the function is wrapped in curly braces (`{` and `}`).\n+You\u2019ll also note that the function is wrapped in curly braces (`{` and `}`).\n Rust requires these around all function bodies. It is also considered good\n style to put the opening curly brace on the same line as the function\n declaration, with one space in between.\n \n Next up is this line:\n \n-```{rust}\n+```rust\n     println!(\"Hello, world!\");\n ```\n \n This line does all of the work in our little program. There are a number of\n-details that are important here. The first is that it's indented with four\n+details that are important here. The first is that it\u2019s indented with four\n spaces, not tabs. Please configure your editor of choice to insert four spaces\n with the tab key. We provide some [sample configurations for various\n editors][configs].\n \n [configs]: https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md\n \n-The second point is the `println!()` part. This is calling a Rust *macro*,\n+The second point is the `println!()` part. This is calling a Rust [macro][macro],\n which is how metaprogramming is done in Rust. If it were a function instead, it\n-would look like this: `println()`. For our purposes, we don't need to worry\n-about this difference. Just know that sometimes, you'll see a `!`, and that\n-means that you're calling a macro instead of a normal function. Rust implements\n-`println!` as a macro rather than a function for good reasons, but that's a\n-very advanced topic. You'll learn more when we talk about macros later. One\n-last thing to mention: Rust's macros are significantly different from C macros,\n-if you've used those. Don't be scared of using macros. We'll get to the details\n-eventually, you'll just have to trust us for now.\n-\n-Next, `\"Hello, world!\"` is a *string*. Strings are a surprisingly complicated\n-topic in a systems programming language, and this is a *statically allocated*\n-string. We will talk more about different kinds of allocation later. We pass\n-this string as an argument to `println!`, which prints the string to the\n-screen. Easy enough!\n-\n-Finally, the line ends with a semicolon (`;`). Rust is an *expression\n-oriented* language, which means that most things are expressions. The `;` is\n-used to indicate that this expression is over, and the next one is ready to\n-begin. Most lines of Rust code end with a `;`. We will cover this in-depth\n-later in the guide.\n-\n-Finally, actually *compiling* and *running* our program. We can compile\n-with our compiler, `rustc`, by passing it the name of our source file:\n-\n-```{bash}\n+would look like this: `println()`. For our purposes, we don\u2019t need to worry\n+about this difference. Just know that sometimes, you\u2019ll see a `!`, and that\n+means that you\u2019re calling a macro instead of a normal function. Rust implements\n+`println!` as a macro rather than a function for good reasons, but that's an\n+advanced topic. One last thing to mention: Rust\u2019s macros are significantly\n+different from C macros, if you\u2019ve used those. Don\u2019t be scared of using macros.\n+We\u2019ll get to the details eventually, you\u2019ll just have to trust us for now.\n+\n+[macro]: macros.html\n+\n+Next, `\"Hello, world!\"` is a \u2018string\u2019. Strings are a surprisingly complicated\n+topic in a systems programming language, and this is a \u2018statically allocated\u2019\n+string. If you want to read further about allocation, check out [the stack and\n+the heap], but you don\u2019t need to right now if you don\u2019t want to. We pass this\n+string as an argument to `println!`, which prints the string to the screen.\n+Easy enough!\n+\n+[allocation]: the-stack-and-the-heap.html\n+\n+Finally, the line ends with a semicolon (`;`). Rust is an \u2018expression oriented\u2019\n+language, which means that most things are expressions, rather than statements.\n+The `;` is used to indicate that this expression is over, and the next one is\n+ready to begin. Most lines of Rust code end with a `;`.\n+\n+Finally, actually compiling and running our program. We can compile with our\n+compiler, `rustc`, by passing it the name of our source file:\n+\n+```bash\n $ rustc main.rs\n ```\n \n This is similar to `gcc` or `clang`, if you come from a C or C++ background. Rust\n will output a binary executable. You can see it with `ls`:\n \n-```{bash}\n+```bash\n $ ls\n main  main.rs\n ```\n \n Or on Windows:\n \n-```{bash}\n+```bash\n $ dir\n main.exe  main.rs\n ```\n \n There are now two files: our source code, with the `.rs` extension, and the\n executable (`main.exe` on Windows, `main` everywhere else)\n \n-```{bash}\n+```bash\n $ ./main  # or main.exe on Windows\n ```\n \n This prints out our `Hello, world!` text to our terminal.\n \n If you come from a dynamically typed language like Ruby, Python, or JavaScript,\n you may not be used to these two steps being separate. Rust is an\n-*ahead-of-time compiled language*, which means that you can compile a\n-program, give it to someone else, and they don't need to have Rust installed.\n-If you give someone a `.rb` or `.py` or `.js` file, they need to have a\n+\u2018ahead-of-time compiled language\u2019, which means that you can compile a program,\n+give it to someone else, and they don't need to have Rust installed. If you\n+give someone a `.rb` or `.py` or `.js` file, they need to have a\n Ruby/Python/JavaScript implementation installed, but you just need one command\n-to both compile and run your program. Everything is a tradeoff in language design,\n-and Rust has made its choice.\n+to both compile and run your program. Everything is a tradeoff in language\n+design, and Rust has made its choice.\n \n Congratulations! You have officially written a Rust program. That makes you a\n-Rust programmer! Welcome.\n+Rust programmer! Welcome. \ud83c\udf8a\ud83c\udf89\ud83d\udc4d\n \n Next, I'd like to introduce you to another tool, Cargo, which is used to write\n real-world Rust programs. Just using `rustc` is nice for simple things, but as"}, {"sha": "e4054a097989d203341f3cbe2d25e6d3f3f29f98", "filename": "src/doc/trpl/installing-rust.md", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Finstalling-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finstalling-rust.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1,27 +1,32 @@\n % Installing Rust\n \n The first step to using Rust is to install it! There are a number of ways to\n-install Rust, but the easiest is to use the `rustup` script. If you're on\n-Linux or a Mac, all you need to do is this (note that you don't need to type\n-in the `$`s, they just indicate the start of each command):\n+install Rust, but the easiest is to use the `rustup` script. If you're on Linux\n+or a Mac, all you need to do is this (note that you don't need to type in the\n+`$`s, they just indicate the start of each command):\n \n ```bash\n $ curl -sf -L https://static.rust-lang.org/rustup.sh | sudo sh\n ```\n \n-If you're concerned about the [potential insecurity](http://curlpipesh.tumblr.com/) of using `curl | sudo sh`,\n-please keep reading and see our disclaimer below. And feel free to use a two-step version of the installation and examine our installation script:\n+If you're concerned about the [potential insecurity][insecurity] of using `curl\n+| sudo sh`, please keep reading and see our disclaimer below. And feel free to\n+use a two-step version of the installation and examine our installation script:\n \n ```bash\n $ curl -f -L https://static.rust-lang.org/rustup.sh -O\n $ sudo sh rustup.sh\n ```\n \n-If you're on Windows, please download either the [32-bit\n-installer](https://static.rust-lang.org/dist/rust-1.0.0-beta-i686-pc-windows-gnu.exe)\n-or the [64-bit\n-installer](https://static.rust-lang.org/dist/rust-1.0.0-beta-x86_64-pc-windows-gnu.exe)\n-and run it.\n+[insecurity]: http://curlpipesh.tumblr.com\n+\n+If you're on Windows, please download either the [32-bit installer][win32] or\n+the [64-bit installer][win64] and run it.\n+\n+[win32]: https://static.rust-lang.org/dist/rust-1.0.0-beta-i686-pc-windows-gnu.msi\n+[win64]: https://static.rust-lang.org/dist/rust-1.0.0-beta-x86_64-pc-windows-gnu.msi\n+\n+## Uninstalling\n \n If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n Not every programming language is great for everyone. Just run the uninstall\n@@ -31,22 +36,20 @@ script:\n $ sudo /usr/local/lib/rustlib/uninstall.sh\n ```\n \n-If you used the Windows installer, just re-run the `.exe` and it will give you\n+If you used the Windows installer, just re-run the `.msi` and it will give you\n an uninstall option.\n \n-You can re-run this script any time you want to update Rust. Which, at this\n-point, is often. Rust is still pre-1.0, and so people assume that you're using\n-a very recent Rust.\n+Some people, and somewhat rightfully so, get very upset when we tell you to\n+`curl | sudo sh`. Basically, when you do this, you are trusting that the good\n+people who maintain Rust aren't going to hack your computer and do bad things.\n+That's a good instinct! If you're one of those people, please check out the\n+documentation on [building Rust from Source][from source], or [the official\n+binary downloads][install page]. And we promise that this method will not be\n+the way to install Rust forever: it's just the easiest way to keep people\n+updated while Rust is in its alpha state.\n \n-This brings me to one other point: some people, and somewhat rightfully so, get\n-very upset when we tell you to `curl | sudo sh`. And they should be! Basically,\n-when you do this, you are trusting that the good people who maintain Rust\n-aren't going to hack your computer and do bad things. That's a good instinct!\n-If you're one of those people, please check out the documentation on [building\n-Rust from Source](https://github.com/rust-lang/rust#building-from-source), or\n-[the official binary downloads](http://www.rust-lang.org/install.html). And we\n-promise that this method will not be the way to install Rust forever: it's just\n-the easiest way to keep people updated while Rust is in its alpha state.\n+[from source]: https://github.com/rust-lang/rust#building-from-source\n+[install page]: http://www.rust-lang.org/install.html\n \n Oh, we should also mention the officially supported platforms:\n \n@@ -73,7 +76,7 @@ $ rustc --version\n You should see the version number, commit hash, commit date and build date:\n \n ```bash\n-rustc 1.0.0-nightly (f11f3e7ba 2015-01-04) (built 2015-01-06)\n+rustc 1.0.0-beta (9854143cb 2015-04-02) (built 2015-04-02)\n ```\n \n If you did, Rust has been installed successfully! Congrats!\n@@ -84,10 +87,13 @@ On Windows, it's in a `share/doc` directory, inside wherever you installed Rust\n to.\n \n If not, there are a number of places where you can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org](irc://irc.mozilla.org/#rust), which\n-you can access through\n-[Mibbit](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust). Click\n-that link, and you'll be chatting with other Rustaceans (a silly nickname we\n-call ourselves), and we can help you out. Other great resources include [the\n-/r/rust subreddit](http://www.reddit.com/r/rust), and [Stack\n-Overflow](http://stackoverflow.com/questions/tagged/rust).\n+[the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n+[Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n+(a silly nickname we call ourselves), and we can help you out. Other great\n+resources include [the user\u2019s forum][users], and [Stack Overflow][stack\n+overflow].\n+\n+[irc]: irc://irc.mozilla.org/#rust\n+[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[users]: http://users.rust-lang.org/ \n+[stack overflow]: http://stackoverflow.com/questions/tagged/rust"}, {"sha": "3d8ef8090bfb79808745453b8c3b0ca9953fc24b", "filename": "src/doc/trpl/learn-rust.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Flearn-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Flearn-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flearn-rust.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1 +1,4 @@\n % Learn Rust\n+\n+This section is coming soon! It will eventually have a few tutorials with\n+building real Rust projects, but they are under development."}, {"sha": "da6985da19f48987c6835ebfc9323f26f2de8655", "filename": "src/doc/trpl/nightly-rust.md", "status": "modified", "additions": 73, "deletions": 22, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fnightly-rust.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -2,27 +2,34 @@\n \n Rust provides three distribution channels for Rust: nightly, beta, and stable.\n Unstable features are only available on nightly Rust. For more details on this\n-process, see [this post](http://blog.rust-lang.org/2014/10/30/Stability.html).\n+process, see \u2018[Stability as a deliverable][stability]\u2019.\n+\n+[stability]: http://blog.rust-lang.org/2014/10/30/Stability.html\n \n To install nightly Rust, you can use `rustup.sh`:\n \n ```bash\n $ curl -s https://static.rust-lang.org/rustup.sh | sudo sh -s -- --channel=nightly\n ```\n \n-If you're concerned about the [potential insecurity](http://curlpipesh.tumblr.com/) of using `curl | sudo sh`,\n-please keep reading and see our disclaimer below. And feel free to use a two-step version of the installation and examine our installation script:\n+If you're concerned about the [potential insecurity][insecurity] of using `curl\n+| sudo sh`, please keep reading and see our disclaimer below. And feel free to\n+use a two-step version of the installation and examine our installation script:\n \n ```bash\n $ curl -f -L https://static.rust-lang.org/rustup.sh -O\n-$ sudo sh rustup.sh --channel=nightly\n+$ sudo sh rustup.sh\n ```\n \n-If you're on Windows, please download either the [32-bit\n-installer](https://static.rust-lang.org/dist/rust-nightly-i686-pc-windows-gnu.exe)\n-or the [64-bit\n-installer](https://static.rust-lang.org/dist/rust-nightly-x86_64-pc-windows-gnu.exe)\n-and run it.\n+[insecurity]: http://curlpipesh.tumblr.com\n+\n+If you're on Windows, please download either the [32-bit installer][win32] or\n+the [64-bit installer][win64] and run it.\n+\n+[win32]: https://static.rust-lang.org/dist/rust-1.0.0-beta-i686-pc-windows-gnu.msi\n+[win64]: https://static.rust-lang.org/dist/rust-1.0.0-beta-x86_64-pc-windows-gnu.msi\n+\n+## Uninstalling\n \n If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n Not every programming language is great for everyone. Just run the uninstall\n@@ -32,20 +39,64 @@ script:\n $ sudo /usr/local/lib/rustlib/uninstall.sh\n ```\n \n-If you used the Windows installer, just re-run the `.exe` and it will give you\n+If you used the Windows installer, just re-run the `.msi` and it will give you\n an uninstall option.\n \n-You can re-run this script any time you want to update Rust. Which, at this\n-point, is often. Rust is still pre-1.0, and so people assume that you're using\n-a very recent Rust.\n+Some people, and somewhat rightfully so, get very upset when we tell you to\n+`curl | sudo sh`. Basically, when you do this, you are trusting that the good\n+people who maintain Rust aren't going to hack your computer and do bad things.\n+That's a good instinct! If you're one of those people, please check out the\n+documentation on [building Rust from Source][from source], or [the official\n+binary downloads][install page]. And we promise that this method will not be\n+the way to install Rust forever: it's just the easiest way to keep people\n+updated while Rust is in its alpha state.\n+\n+[from source]: https://github.com/rust-lang/rust#building-from-source\n+[install page]: http://www.rust-lang.org/install.html\n+\n+Oh, we should also mention the officially supported platforms:\n+\n+* Windows (7, 8, Server 2008 R2)\n+* Linux (2.6.18 or later, various distributions), x86 and x86-64\n+* OSX 10.7 (Lion) or greater, x86 and x86-64\n+\n+We extensively test Rust on these platforms, and a few others, too, like\n+Android. But these are the ones most likely to work, as they have the most\n+testing.\n+\n+Finally, a comment about Windows. Rust considers Windows to be a first-class\n+platform upon release, but if we're honest, the Windows experience isn't as\n+integrated as the Linux/OS X experience is. We're working on it! If anything\n+does not work, it is a bug. Please let us know if that happens. Each and every\n+commit is tested against Windows just like any other platform.\n+\n+If you've got Rust installed, you can open up a shell, and type this:\n+\n+```bash\n+$ rustc --version\n+```\n+\n+You should see the version number, commit hash, commit date and build date:\n+\n+```bash\n+rustc 1.0.0-nightly (f11f3e7ba 2015-01-04) (built 2015-01-06)\n+```\n+\n+If you did, Rust has been installed successfully! Congrats!\n+\n+This installer also installs a copy of the documentation locally, so you can\n+read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n+On Windows, it's in a `share/doc` directory, inside wherever you installed Rust\n+to.\n \n-This brings me to one other point: some people, and somewhat rightfully so, get\n-very upset when we tell you to `curl | sudo sh`. And they should be! Basically,\n-when you do this, you are trusting that the good people who maintain Rust\n-aren't going to hack your computer and do bad things. That's a good instinct!\n-If you're one of those people, please check out the documentation on [building\n-Rust from Source](https://github.com/rust-lang/rust#building-from-source), or\n-[the official binary downloads](http://www.rust-lang.org/install.html). And we\n-promise that this method will not be the way to install Rust forever: it's just\n-the easiest way to keep people updated while Rust is in its alpha state.\n+If not, there are a number of places where you can get help. The easiest is\n+[the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n+[Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n+(a silly nickname we call ourselves), and we can help you out. Other great\n+resources include [the user\u2019s forum][users], and [Stack Overflow][stack\n+overflow].\n \n+[irc]: irc://irc.mozilla.org/#rust\n+[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n+[users]: http://users.rust-lang.org/ \n+[stack overflow]: http://stackoverflow.com/questions/tagged/rust"}, {"sha": "cce985c9e484c1436179e5773e396b47a35ecad4", "filename": "src/doc/trpl/syntax-and-semantics.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fsyntax-and-semantics.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01dbf21945aa4d1a11d0ba1695238c59bdf4a44/src%2Fdoc%2Ftrpl%2Fsyntax-and-semantics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fsyntax-and-semantics.md?ref=f01dbf21945aa4d1a11d0ba1695238c59bdf4a44", "patch": "@@ -1 +1,10 @@\n % Syntax and Semantics\n+\n+This section breaks Rust down into small chunks, one for each concept.\n+\n+If you\u2019d like to learn Rust from the bottom up, reading this in order is a\n+great way to do that.\n+\n+These sections also form a reference for each concept, so if you\u2019re reading\n+another tutorial and find something confusing, you can find it explained\n+somewhere in here."}]}