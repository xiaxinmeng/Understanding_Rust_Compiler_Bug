{"sha": "f7093826a4f3bdd69cdec0171baf78a99bc94675", "node_id": "C_kwDOAAsO6NoAKGY3MDkzODI2YTRmM2JkZDY5Y2RlYzAxNzFiYWY3OGE5OWJjOTQ2NzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-13T18:16:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-13T18:16:45Z"}, "message": "Rollup merge of #106813 - oli-obk:sess_cleanup, r=GuillaumeGomez,petrochenkov\n\nRemove redundant session field\n\nThere was already a session available in the resolver, so we access that session.", "tree": {"sha": "0cd26953eeeccf097f1448f09912abe8c6cbeab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cd26953eeeccf097f1448f09912abe8c6cbeab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7093826a4f3bdd69cdec0171baf78a99bc94675", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjwaANCRBK7hj4Ov3rIwAAPeEIAA8ydyywspvRFVpz2NuF2fho\nmM4O4ZdE/uoU7s/XOXK3UOyecVokwSQBci8G9e9s97UqP+7EM5S0N06zPv57ENf6\nOW80YeygVdc2dRuC7rZcx0l79c8oTac7Oa/VdkWYZMymj1sFpvOw1O0lNpWsrnvH\nqZXvyuC6r8xbtXRd1UPmc6lfSPrWrZRAKmMYyOpL42LNnehcny/flebnSuwuVAfa\nGChfIeWewGwePzKPGG5xwN6uumXQMBay/9AEA7Jo2CR8182KQknjp8TTkdexPYkN\n08wCxJcsp2xQX7riblN2AETs/oURiYEJV0T2wDrVUS0MQRiWqmAE2AOuUt31qiY=\n=zC1T\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cd26953eeeccf097f1448f09912abe8c6cbeab2\nparent 278e02a5b614d8a50a6549bbeb5b10ed4a42b6f8\nparent 4aca7beab0fd7e45dc4f901db5aa10c46ba9cf1b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673633805 +0100\ncommitter GitHub <noreply@github.com> 1673633805 +0100\n\nRollup merge of #106813 - oli-obk:sess_cleanup, r=GuillaumeGomez,petrochenkov\n\nRemove redundant session field\n\nThere was already a session available in the resolver, so we access that session.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7093826a4f3bdd69cdec0171baf78a99bc94675", "html_url": "https://github.com/rust-lang/rust/commit/f7093826a4f3bdd69cdec0171baf78a99bc94675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7093826a4f3bdd69cdec0171baf78a99bc94675/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278e02a5b614d8a50a6549bbeb5b10ed4a42b6f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/278e02a5b614d8a50a6549bbeb5b10ed4a42b6f8", "html_url": "https://github.com/rust-lang/rust/commit/278e02a5b614d8a50a6549bbeb5b10ed4a42b6f8"}, {"sha": "4aca7beab0fd7e45dc4f901db5aa10c46ba9cf1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aca7beab0fd7e45dc4f901db5aa10c46ba9cf1b", "html_url": "https://github.com/rust-lang/rust/commit/4aca7beab0fd7e45dc4f901db5aa10c46ba9cf1b"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "f950e4a9bee65282e8ae37a9358f1d408191e00d", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7093826a4f3bdd69cdec0171baf78a99bc94675/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7093826a4f3bdd69cdec0171baf78a99bc94675/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f7093826a4f3bdd69cdec0171baf78a99bc94675", "patch": "@@ -1137,7 +1137,7 @@ impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     }\n }\n \n-impl Resolver<'_> {\n+impl<'a> Resolver<'a> {\n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n         self.node_id_to_def_id.get(&node).copied()\n     }\n@@ -1194,6 +1194,10 @@ impl Resolver<'_> {\n             self.cstore().item_generics_num_lifetimes(def_id, self.session)\n         }\n     }\n+\n+    pub fn sess(&self) -> &'a Session {\n+        self.session\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "86454e1f2eb7316d239d4544c3adeec49e917e89", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7093826a4f3bdd69cdec0171baf78a99bc94675/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7093826a4f3bdd69cdec0171baf78a99bc94675/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f7093826a4f3bdd69cdec0171baf78a99bc94675", "patch": "@@ -772,7 +772,6 @@ fn main_args(at_args: &[String]) -> MainResult {\n     let crate_version = options.crate_version.clone();\n \n     let output_format = options.output_format;\n-    let externs = options.externs.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n     let bin_crate = options.bin_crate;\n \n@@ -805,9 +804,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n                 let resolver_caches = resolver.borrow_mut().access(|resolver| {\n                     collect_intra_doc_links::early_resolve_intra_doc_links(\n                         resolver,\n-                        sess,\n                         krate,\n-                        externs,\n                         render_options.document_private,\n                     )\n                 });"}, {"sha": "42677bd8497483cce642162000a7ffc4848b07e8", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7093826a4f3bdd69cdec0171baf78a99bc94675/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7093826a4f3bdd69cdec0171baf78a99bc94675/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=f7093826a4f3bdd69cdec0171baf78a99bc94675", "patch": "@@ -12,8 +12,6 @@ use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, CRATE_DEF_ID};\n use rustc_hir::TraitCandidate;\n use rustc_middle::ty::{DefIdTree, Visibility};\n use rustc_resolve::{ParentScope, Resolver};\n-use rustc_session::config::Externs;\n-use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{Symbol, SyntaxContext};\n \n@@ -22,16 +20,13 @@ use std::mem;\n \n pub(crate) fn early_resolve_intra_doc_links(\n     resolver: &mut Resolver<'_>,\n-    sess: &Session,\n     krate: &ast::Crate,\n-    externs: Externs,\n     document_private_items: bool,\n ) -> ResolverCaches {\n     let parent_scope =\n         ParentScope::module(resolver.expect_module(CRATE_DEF_ID.to_def_id()), resolver);\n     let mut link_resolver = EarlyDocLinkResolver {\n         resolver,\n-        sess,\n         parent_scope,\n         visited_mods: Default::default(),\n         markdown_links: Default::default(),\n@@ -52,7 +47,9 @@ pub(crate) fn early_resolve_intra_doc_links(\n     // the known necessary crates. Load them all unconditionally until we find a way to fix this.\n     // DO NOT REMOVE THIS without first testing on the reproducer in\n     // https://github.com/jyn514/objr/commit/edcee7b8124abf0e4c63873e8422ff81beb11ebb\n-    for (extern_name, _) in externs.iter().filter(|(_, entry)| entry.add_prelude) {\n+    for (extern_name, _) in\n+        link_resolver.resolver.sess().opts.externs.iter().filter(|(_, entry)| entry.add_prelude)\n+    {\n         link_resolver.resolver.resolve_rustdoc_path(extern_name, TypeNS, parent_scope);\n     }\n \n@@ -73,7 +70,6 @@ fn doc_attrs<'a>(attrs: impl Iterator<Item = &'a ast::Attribute>) -> Attributes\n \n struct EarlyDocLinkResolver<'r, 'ra> {\n     resolver: &'r mut Resolver<'ra>,\n-    sess: &'r Session,\n     parent_scope: ParentScope<'ra>,\n     visited_mods: DefIdSet,\n     markdown_links: FxHashMap<String, Vec<PreprocessedMarkdownLink>>,\n@@ -166,7 +162,7 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n     fn resolve_doc_links_extern_impl(&mut self, def_id: DefId, is_inherent: bool) {\n         self.resolve_doc_links_extern_outer_fixme(def_id, def_id);\n         let assoc_item_def_ids = Vec::from_iter(\n-            self.resolver.cstore().associated_item_def_ids_untracked(def_id, self.sess),\n+            self.resolver.cstore().associated_item_def_ids_untracked(def_id, self.resolver.sess()),\n         );\n         for assoc_def_id in assoc_item_def_ids {\n             if !is_inherent || self.resolver.cstore().visibility_untracked(assoc_def_id).is_public()\n@@ -191,7 +187,9 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n         if !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n             return;\n         }\n-        let attrs = Vec::from_iter(self.resolver.cstore().item_attrs_untracked(def_id, self.sess));\n+        let attrs = Vec::from_iter(\n+            self.resolver.cstore().item_attrs_untracked(def_id, self.resolver.sess()),\n+        );\n         let parent_scope = ParentScope::module(\n             self.resolver.get_nearest_non_block_module(\n                 self.resolver.opt_parent(scope_id).unwrap_or(scope_id),\n@@ -205,7 +203,9 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n         if !self.resolver.cstore().may_have_doc_links_untracked(def_id) {\n             return;\n         }\n-        let attrs = Vec::from_iter(self.resolver.cstore().item_attrs_untracked(def_id, self.sess));\n+        let attrs = Vec::from_iter(\n+            self.resolver.cstore().item_attrs_untracked(def_id, self.resolver.sess()),\n+        );\n         let parent_scope = ParentScope::module(self.resolver.expect_module(def_id), self.resolver);\n         self.resolve_doc_links(doc_attrs(attrs.iter()), parent_scope);\n     }\n@@ -321,7 +321,7 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n                         let field_def_ids = Vec::from_iter(\n                             self.resolver\n                                 .cstore()\n-                                .associated_item_def_ids_untracked(def_id, self.sess),\n+                                .associated_item_def_ids_untracked(def_id, self.resolver.sess()),\n                         );\n                         for field_def_id in field_def_ids {\n                             self.resolve_doc_links_extern_outer(field_def_id, scope_id);"}]}