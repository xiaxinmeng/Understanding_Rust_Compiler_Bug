{"sha": "4dc5557625a5ed247daa90a64e85a2d5303dad5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzU1NTc2MjVhNWVkMjQ3ZGFhOTBhNjRlODVhMmQ1MzAzZGFkNWY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-08T00:05:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-08T00:05:36Z"}, "message": "Merge pull request #3070 from topecongiro/issue-3030\n\nFormat a paren expr with double slash comment", "tree": {"sha": "9e3066c713ec4174ed4461df6c5a3c578e4f8b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3066c713ec4174ed4461df6c5a3c578e4f8b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc5557625a5ed247daa90a64e85a2d5303dad5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbup9QCRBK7hj4Ov3rIwAAdHIIACQv3S6psg7ra2rJJuECTI80\nKBClRY+VJf2gycKBtln963uWPy6Z+kkumN2F6UPyr3SUnF8P3WmhpHsNHyg4CgnQ\n/3ifAXo0AA263gXv8f2imGrudlTOAMk3ecm859rcnklNLkz2uIppK2aSxNrgXRps\n+/fEQqBpYMgnke3AoWPS69wQPvNmBwoMY9oJGza9iwd4rkwbLgHUIFNyoaiBZQLT\nEgV+r+2COWpVqrO0LERtpfdxzkTJWlR0BmJFfLdPYHI6RwynBwAfooqp762ulgz6\nQSFI9qEEbJZy750qJybS0pYoSG/NqgY0f4LvOBRIZEUJ1oBzuWMgeXvK4vYIeaU=\n=uE2y\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e3066c713ec4174ed4461df6c5a3c578e4f8b72\nparent 80d744973f00342b49f506fadcd41798681139f6\nparent 70c8e366a6be95f44c326ccd98564a06a8f45021\nauthor Nick Cameron <nrc@ncameron.org> 1538957136 +1300\ncommitter GitHub <noreply@github.com> 1538957136 +1300\n\nMerge pull request #3070 from topecongiro/issue-3030\n\nFormat a paren expr with double slash comment"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc5557625a5ed247daa90a64e85a2d5303dad5f", "html_url": "https://github.com/rust-lang/rust/commit/4dc5557625a5ed247daa90a64e85a2d5303dad5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc5557625a5ed247daa90a64e85a2d5303dad5f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d744973f00342b49f506fadcd41798681139f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d744973f00342b49f506fadcd41798681139f6", "html_url": "https://github.com/rust-lang/rust/commit/80d744973f00342b49f506fadcd41798681139f6"}, {"sha": "70c8e366a6be95f44c326ccd98564a06a8f45021", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c8e366a6be95f44c326ccd98564a06a8f45021", "html_url": "https://github.com/rust-lang/rust/commit/70c8e366a6be95f44c326ccd98564a06a8f45021"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "cd6205698517f0390d5496e393a0a9d7ec9e6d83", "filename": "src/expr.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4dc5557625a5ed247daa90a64e85a2d5303dad5f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc5557625a5ed247daa90a64e85a2d5303dad5f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4dc5557625a5ed247daa90a64e85a2d5303dad5f", "patch": "@@ -39,9 +39,9 @@ use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{rewrite_path, PathContext};\n use utils::{\n-    colon_spaces, contains_skip, count_newlines, first_line_ends_with, first_line_width,\n-    inner_attributes, last_line_extendable, last_line_width, mk_sp, outer_attributes,\n-    ptr_vec_to_ref_vec, semicolon_for_stmt, wrap_str,\n+    colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n+    last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n+    semicolon_for_stmt, wrap_str,\n };\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -1388,13 +1388,15 @@ fn rewrite_paren(\n     debug!(\"rewrite_paren, shape: {:?}\", shape);\n \n     // Extract comments within parens.\n+    let mut pre_span;\n+    let mut post_span;\n     let mut pre_comment;\n     let mut post_comment;\n     let remove_nested_parens = context.config.remove_nested_parens();\n     loop {\n         // 1 = \"(\" or \")\"\n-        let pre_span = mk_sp(span.lo() + BytePos(1), subexpr.span.lo());\n-        let post_span = mk_sp(subexpr.span.hi(), span.hi() - BytePos(1));\n+        pre_span = mk_sp(span.lo() + BytePos(1), subexpr.span.lo());\n+        post_span = mk_sp(subexpr.span.hi(), span.hi() - BytePos(1));\n         pre_comment = rewrite_missing_comment(pre_span, shape, context)?;\n         post_comment = rewrite_missing_comment(post_span, shape, context)?;\n \n@@ -1410,20 +1412,48 @@ fn rewrite_paren(\n         break;\n     }\n \n-    // 1 `(`\n-    let sub_shape = shape.offset_left(1).and_then(|s| s.sub_width(1))?;\n-\n+    // 1 = `(` and `)`\n+    let sub_shape = shape.offset_left(1)?.sub_width(1)?;\n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n-    debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n-\n-    // 2 = `()`\n-    if subexpr_str.contains('\\n') || first_line_width(&subexpr_str) + 2 <= shape.width {\n+    let fits_single_line = !pre_comment.contains(\"//\") && !post_comment.contains(\"//\");\n+    if fits_single_line {\n         Some(format!(\"({}{}{})\", pre_comment, &subexpr_str, post_comment))\n     } else {\n-        None\n+        rewrite_paren_in_multi_line(context, subexpr, shape, pre_span, post_span)\n     }\n }\n \n+fn rewrite_paren_in_multi_line(\n+    context: &RewriteContext,\n+    subexpr: &ast::Expr,\n+    shape: Shape,\n+    pre_span: Span,\n+    post_span: Span,\n+) -> Option<String> {\n+    let nested_indent = shape.indent.block_indent(context.config);\n+    let nested_shape = Shape::indented(nested_indent, context.config);\n+    let pre_comment = rewrite_missing_comment(pre_span, nested_shape, context)?;\n+    let post_comment = rewrite_missing_comment(post_span, nested_shape, context)?;\n+    let subexpr_str = subexpr.rewrite(context, nested_shape)?;\n+\n+    let mut result = String::with_capacity(subexpr_str.len() * 2);\n+    result.push('(');\n+    if !pre_comment.is_empty() {\n+        result.push_str(&nested_indent.to_string_with_newline(context.config));\n+        result.push_str(&pre_comment);\n+    }\n+    result.push_str(&nested_indent.to_string_with_newline(context.config));\n+    result.push_str(&subexpr_str);\n+    if !post_comment.is_empty() {\n+        result.push_str(&nested_indent.to_string_with_newline(context.config));\n+        result.push_str(&post_comment);\n+    }\n+    result.push_str(&shape.indent.to_string_with_newline(context.config));\n+    result.push(')');\n+\n+    Some(result)\n+}\n+\n fn rewrite_index(\n     expr: &ast::Expr,\n     index: &ast::Expr,"}, {"sha": "1643449773e28b37e5736526a118809f5f41d722", "filename": "tests/source/match.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4dc5557625a5ed247daa90a64e85a2d5303dad5f/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc5557625a5ed247daa90a64e85a2d5303dad5f/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=4dc5557625a5ed247daa90a64e85a2d5303dad5f", "patch": "@@ -521,3 +521,18 @@ fn issue_3040() {\n         }\n     }\n }\n+\n+// #3030\n+fn issue_3030() {\n+    match input.trim().parse::<f64>() {\n+        Ok(val)\n+            if !(\n+    // A valid number is the same as what rust considers to be valid,\n+    // except for +1., NaN, and Infinity.\n+                val.is_infinite() || val\n+                    .is_nan() || input.ends_with(\".\") || input.starts_with(\"+\")\n+            )\n+            => {\n+            }\n+    }\n+}"}, {"sha": "130c9adfb3d553971036099290d6a8427f5973c8", "filename": "tests/target/match.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4dc5557625a5ed247daa90a64e85a2d5303dad5f/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc5557625a5ed247daa90a64e85a2d5303dad5f/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=4dc5557625a5ed247daa90a64e85a2d5303dad5f", "patch": "@@ -552,3 +552,15 @@ fn issue_3040() {\n         }\n     }\n }\n+\n+// #3030\n+fn issue_3030() {\n+    match input.trim().parse::<f64>() {\n+        Ok(val)\n+            if !(\n+                // A valid number is the same as what rust considers to be valid,\n+                // except for +1., NaN, and Infinity.\n+                val.is_infinite() || val.is_nan() || input.ends_with(\".\") || input.starts_with(\"+\")\n+            ) => {}\n+    }\n+}"}]}