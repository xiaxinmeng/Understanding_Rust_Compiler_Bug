{"sha": "4119f60c1f422d84fb53bb7d3e73bfdfc2b09add", "node_id": "C_kwDOAAsO6NoAKDQxMTlmNjBjMWY0MjJkODRmYjUzYmI3ZDNlNzNiZmRmYzJiMDlhZGQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-17T23:41:57Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-01-29T13:52:19Z"}, "message": "Create `core::fmt::ArgumentV1` with generics instead of fn pointer", "tree": {"sha": "c841e73ebcab1ce36318f96e660f0b4e6f1f8bf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c841e73ebcab1ce36318f96e660f0b4e6f1f8bf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4119f60c1f422d84fb53bb7d3e73bfdfc2b09add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4119f60c1f422d84fb53bb7d3e73bfdfc2b09add", "html_url": "https://github.com/rust-lang/rust/commit/4119f60c1f422d84fb53bb7d3e73bfdfc2b09add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4119f60c1f422d84fb53bb7d3e73bfdfc2b09add/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82f613ee3b12a6a90bd9e99fbbab947674d6ec7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f613ee3b12a6a90bd9e99fbbab947674d6ec7a", "html_url": "https://github.com/rust-lang/rust/commit/82f613ee3b12a6a90bd9e99fbbab947674d6ec7a"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "a75f6b86a9bae4de295769ec1a72c5bfcd4db38c", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4119f60c1f422d84fb53bb7d3e73bfdfc2b09add/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4119f60c1f422d84fb53bb7d3e73bfdfc2b09add/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=4119f60c1f422d84fb53bb7d3e73bfdfc2b09add", "patch": "@@ -339,15 +339,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         expr_visitor_no_bodies(|e| {\n             // if we're still inside of the macro definition...\n             if e.span.ctxt() == expr.span.ctxt() {\n-                // ArgumnetV1::new(<value>, <format_trait>::fmt)\n+                // ArgumnetV1::new_<format_trait>(<value>)\n                 if_chain! {\n-                    if let ExprKind::Call(callee, [val, fmt_path]) = e.kind;\n+                    if let ExprKind::Call(callee, [val]) = e.kind;\n                     if let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind;\n-                    if seg.ident.name == sym::new;\n                     if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n                     if path.segments.last().unwrap().ident.name == sym::ArgumentV1;\n-                    if let ExprKind::Path(QPath::Resolved(_, path)) = fmt_path.kind;\n-                    if let [.., fmt_trait, _fmt] = path.segments;\n+                    if seg.ident.name.as_str().starts_with(\"new_\");\n                     then {\n                         let val_idx = if_chain! {\n                             if val.span.ctxt() == expr.span.ctxt();\n@@ -361,7 +359,19 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                                 formatters.len()\n                             }\n                         };\n-                        formatters.push((val_idx, fmt_trait.ident.name));\n+                        let fmt_trait = match seg.ident.name.as_str() {\n+                            \"new_display\" => \"Display\",\n+                            \"new_debug\" => \"Debug\",\n+                            \"new_lower_exp\" => \"LowerExp\",\n+                            \"new_upper_exp\" => \"UpperExp\",\n+                            \"new_octal\" => \"Octal\",\n+                            \"new_pointer\" => \"Pointer\",\n+                            \"new_binary\" => \"Binary\",\n+                            \"new_lower_hex\" => \"LowerHex\",\n+                            \"new_upper_hex\" => \"UpperHex\",\n+                            _ => unreachable!(),\n+                        };\n+                        formatters.push((val_idx, Symbol::intern(fmt_trait)));\n                     }\n                 }\n                 if let ExprKind::Struct(QPath::Resolved(_, path), ..) = e.kind {"}]}