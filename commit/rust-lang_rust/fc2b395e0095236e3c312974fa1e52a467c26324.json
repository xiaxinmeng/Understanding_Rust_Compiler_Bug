{"sha": "fc2b395e0095236e3c312974fa1e52a467c26324", "node_id": "C_kwDOAAsO6NoAKGZjMmIzOTVlMDA5NTIzNmUzYzMxMjk3NGZhMWU1MmE0NjdjMjYzMjQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-28T14:13:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-03T09:41:44Z"}, "message": "Show pattern mismatch diagnostics", "tree": {"sha": "118aeaee96766751fe657ee703573d6c3acf1987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118aeaee96766751fe657ee703573d6c3acf1987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2b395e0095236e3c312974fa1e52a467c26324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2b395e0095236e3c312974fa1e52a467c26324", "html_url": "https://github.com/rust-lang/rust/commit/fc2b395e0095236e3c312974fa1e52a467c26324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2b395e0095236e3c312974fa1e52a467c26324/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b441b9c67531481c7c18cd09b2397c0591ae63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b441b9c67531481c7c18cd09b2397c0591ae63f", "html_url": "https://github.com/rust-lang/rust/commit/9b441b9c67531481c7c18cd09b2397c0591ae63f"}], "stats": {"total": 188, "additions": 117, "deletions": 71}, "files": [{"sha": "e4719237a2aa5a78c23e0a76d3bb866655dae7d6", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -771,6 +771,15 @@ impl<T> InFile<Option<T>> {\n     }\n }\n \n+impl<L, R> InFile<Either<L, R>> {\n+    pub fn transpose(self) -> Either<InFile<L>, InFile<R>> {\n+        match self.value {\n+            Either::Left(l) => Either::Left(InFile::new(self.file_id, l)),\n+            Either::Right(r) => Either::Right(InFile::new(self.file_id, r)),\n+        }\n+    }\n+}\n+\n impl<'a> InFile<&'a SyntaxNode> {\n     pub fn ancestors_with_macros(\n         self,"}, {"sha": "6790be64c5c758771628db4b79bac50eb66c843c", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -389,18 +389,15 @@ impl InferenceResult {\n     pub fn type_mismatch_for_pat(&self, pat: PatId) -> Option<&TypeMismatch> {\n         self.type_mismatches.get(&pat.into())\n     }\n+    pub fn type_mismatches(&self) -> impl Iterator<Item = (ExprOrPatId, &TypeMismatch)> {\n+        self.type_mismatches.iter().map(|(expr_or_pat, mismatch)| (*expr_or_pat, mismatch))\n+    }\n     pub fn expr_type_mismatches(&self) -> impl Iterator<Item = (ExprId, &TypeMismatch)> {\n         self.type_mismatches.iter().filter_map(|(expr_or_pat, mismatch)| match *expr_or_pat {\n             ExprOrPatId::ExprId(expr) => Some((expr, mismatch)),\n             _ => None,\n         })\n     }\n-    pub fn pat_type_mismatches(&self) -> impl Iterator<Item = (PatId, &TypeMismatch)> {\n-        self.type_mismatches.iter().filter_map(|(expr_or_pat, mismatch)| match *expr_or_pat {\n-            ExprOrPatId::PatId(pat) => Some((pat, mismatch)),\n-            _ => None,\n-        })\n-    }\n }\n \n impl Index<ExprId> for InferenceResult {"}, {"sha": "8b381f0d1fce9357473576ff59623b244f918a32", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -196,12 +196,7 @@ impl<'a> InferenceContext<'a> {\n             Pat::Ref { pat, mutability } => {\n                 let mutability = lower_to_chalk_mutability(*mutability);\n                 let expectation = match expected.as_reference() {\n-                    Some((inner_ty, _lifetime, exp_mut)) => {\n-                        if mutability != exp_mut {\n-                            // FIXME: emit type error?\n-                        }\n-                        inner_ty.clone()\n-                    }\n+                    Some((inner_ty, _lifetime, exp_mut)) => inner_ty.clone(),\n                     _ => self.result.standard_types.unknown.clone(),\n                 };\n                 let subty = self.infer_pat(*pat, &expectation, default_bm);"}, {"sha": "ab848a18eb38285b98a7b99e963d2dd3e8292791", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -191,30 +191,11 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             }\n         }\n \n-        for (pat, mismatch) in inference_result.pat_type_mismatches() {\n-            let node = match pat_node(&body_source_map, pat, &db) {\n-                Some(value) => value,\n-                None => continue,\n-            };\n-            let range = node.as_ref().original_file_range(&db);\n-            let actual = format!(\n-                \"expected {}, got {}\",\n-                mismatch.expected.display_test(&db),\n-                mismatch.actual.display_test(&db)\n-            );\n-            match mismatches.remove(&range) {\n-                Some(annotation) => assert_eq!(actual, annotation),\n-                None => format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual),\n-            }\n-        }\n-        for (expr, mismatch) in inference_result.expr_type_mismatches() {\n-            let node = match body_source_map.expr_syntax(expr) {\n-                Ok(sp) => {\n-                    let root = db.parse_or_expand(sp.file_id).unwrap();\n-                    sp.map(|ptr| ptr.to_node(&root).syntax().clone())\n-                }\n-                Err(SyntheticSyntax) => continue,\n-            };\n+        for (expr_or_pat, mismatch) in inference_result.type_mismatches() {\n+            let Some(node) = (match expr_or_pat {\n+                hir_def::expr::ExprOrPatId::ExprId(expr) => expr_node(&body_source_map, expr, &db),\n+                hir_def::expr::ExprOrPatId::PatId(pat) => pat_node(&body_source_map, pat, &db),\n+            }) else { continue; };\n             let range = node.as_ref().original_file_range(&db);\n             let actual = format!(\n                 \"expected {}, got {}\","}, {"sha": "aa1b2a1d9be09266e02dac18f10370b2758e4efe", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -1092,3 +1092,19 @@ fn my_fn(foo: ...) {}\n \"#,\n     );\n }\n+\n+#[test]\n+fn ref_pat_mutability() {\n+    check(\n+        r#\"\n+fn foo() {\n+    let &() = &();\n+    let &mut () = &mut ();\n+    let &mut () = &();\n+      //^^^^^^^ expected &(), got &mut ()\n+    let &() = &mut ();\n+      //^^^ expected &mut (), got &()\n+}\n+\"#,\n+    );\n+}"}, {"sha": "3b2591e8a106d4f8be9df275dc8809e596295d7d", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -178,8 +178,7 @@ pub struct MissingMatchArms {\n \n #[derive(Debug)]\n pub struct TypeMismatch {\n-    // FIXME: add mismatches in patterns as well\n-    pub expr: InFile<AstPtr<ast::Expr>>,\n+    pub expr_or_pat: Either<InFile<AstPtr<ast::Expr>>, InFile<AstPtr<ast::Pat>>>,\n     pub expected: Type,\n     pub actual: Type,\n }"}, {"sha": "c103244b4e6a6bfce425c4722ca6ea048dbde816", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -1413,14 +1413,22 @@ impl DefWithBody {\n                 }\n             }\n         }\n-        for (expr, mismatch) in infer.expr_type_mismatches() {\n-            let expr = match source_map.expr_syntax(expr) {\n-                Ok(expr) => expr,\n-                Err(SyntheticSyntax) => continue,\n+        for (pat_or_expr, mismatch) in infer.type_mismatches() {\n+            let expr_or_pat = match pat_or_expr {\n+                ExprOrPatId::ExprId(expr) => source_map.expr_syntax(expr).map(Either::Left),\n+                ExprOrPatId::PatId(pat) => source_map.pat_syntax(pat).map(Either::Right),\n             };\n+            let expr_or_pat = match expr_or_pat {\n+                Ok(Either::Left(expr)) => Either::Left(expr),\n+                Ok(Either::Right(InFile { file_id, value: Either::Left(pat) })) => {\n+                    Either::Right(InFile { file_id, value: pat })\n+                }\n+                Ok(Either::Right(_)) | Err(SyntheticSyntax) => continue,\n+            };\n+\n             acc.push(\n                 TypeMismatch {\n-                    expr,\n+                    expr_or_pat,\n                     expected: Type::new(db, DefWithBodyId::from(self), mismatch.expected.clone()),\n                     actual: Type::new(db, DefWithBodyId::from(self), mismatch.actual.clone()),\n                 }"}, {"sha": "948ca4f63287a3954e228df808b2e90e49c8d92f", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 69, "deletions": 28, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2b395e0095236e3c312974fa1e52a467c26324/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=fc2b395e0095236e3c312974fa1e52a467c26324", "patch": "@@ -1,28 +1,33 @@\n-use hir::{db::AstDatabase, HirDisplay, Type};\n+use either::Either;\n+use hir::{db::AstDatabase, HirDisplay, InFile, Type};\n use ide_db::{famous_defs::FamousDefs, source_change::SourceChange};\n use syntax::{\n     ast::{self, BlockExpr, ExprStmt},\n-    AstNode,\n+    AstNode, AstPtr,\n };\n use text_edit::TextEdit;\n \n use crate::{adjusted_display_range, fix, Assist, Diagnostic, DiagnosticsContext};\n \n // Diagnostic: type-mismatch\n //\n-// This diagnostic is triggered when the type of an expression does not match\n+// This diagnostic is triggered when the type of an expression or pattern does not match\n // the expected type.\n pub(crate) fn type_mismatch(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Diagnostic {\n-    let display_range = adjusted_display_range::<ast::BlockExpr>(\n-        ctx,\n-        d.expr.clone().map(|it| it.into()),\n-        &|block| {\n-            let r_curly_range = block.stmt_list()?.r_curly_token()?.text_range();\n-            cov_mark::hit!(type_mismatch_on_block);\n-            Some(r_curly_range)\n-        },\n-    );\n-\n+    let display_range = match &d.expr_or_pat {\n+        Either::Left(expr) => adjusted_display_range::<ast::BlockExpr>(\n+            ctx,\n+            expr.clone().map(|it| it.into()),\n+            &|block| {\n+                let r_curly_range = block.stmt_list()?.r_curly_token()?.text_range();\n+                cov_mark::hit!(type_mismatch_on_block);\n+                Some(r_curly_range)\n+            },\n+        ),\n+        Either::Right(pat) => {\n+            ctx.sema.diagnostics_display_range(pat.clone().map(|it| it.into())).range\n+        }\n+    };\n     let mut diag = Diagnostic::new(\n         \"type-mismatch\",\n         format!(\n@@ -42,24 +47,38 @@ pub(crate) fn type_mismatch(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch)\n fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch) -> Option<Vec<Assist>> {\n     let mut fixes = Vec::new();\n \n-    add_reference(ctx, d, &mut fixes);\n-    add_missing_ok_or_some(ctx, d, &mut fixes);\n-    remove_semicolon(ctx, d, &mut fixes);\n-    str_ref_to_owned(ctx, d, &mut fixes);\n+    match &d.expr_or_pat {\n+        Either::Left(expr_ptr) => {\n+            add_reference(ctx, d, expr_ptr, &mut fixes);\n+            add_missing_ok_or_some(ctx, d, expr_ptr, &mut fixes);\n+            remove_semicolon(ctx, d, expr_ptr, &mut fixes);\n+            str_ref_to_owned(ctx, d, expr_ptr, &mut fixes);\n+        }\n+        Either::Right(_pat_ptr) => (),\n+    }\n \n     if fixes.is_empty() {\n         None\n     } else {\n         Some(fixes)\n     }\n }\n+fn add_reference_pat(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::TypeMismatch,\n+    expr_ptr: &InFile<AstPtr<ast::Pat>>,\n+    acc: &mut Vec<Assist>,\n+) -> Option<()> {\n+    None\n+}\n \n fn add_reference(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::TypeMismatch,\n+    expr_ptr: &InFile<AstPtr<ast::Expr>>,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n-    let range = ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range;\n+    let range = ctx.sema.diagnostics_display_range(expr_ptr.clone().map(|it| it.into())).range;\n \n     let (_, mutability) = d.expected.as_reference()?;\n     let actual_with_ref = Type::reference(&d.actual, mutability);\n@@ -71,18 +90,19 @@ fn add_reference(\n \n     let edit = TextEdit::insert(range.start(), ampersands);\n     let source_change =\n-        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+        SourceChange::from_text_edit(expr_ptr.file_id.original_file(ctx.sema.db), edit);\n     acc.push(fix(\"add_reference_here\", \"Add reference here\", source_change, range));\n     Some(())\n }\n \n fn add_missing_ok_or_some(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::TypeMismatch,\n+    expr_ptr: &InFile<AstPtr<ast::Expr>>,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n-    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n-    let expr = d.expr.value.to_node(&root);\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let expr = expr_ptr.value.to_node(&root);\n     let expr_range = expr.syntax().text_range();\n     let scope = ctx.sema.scope(expr.syntax())?;\n \n@@ -109,7 +129,7 @@ fn add_missing_ok_or_some(\n     builder.insert(expr.syntax().text_range().start(), format!(\"{variant_name}(\"));\n     builder.insert(expr.syntax().text_range().end(), \")\".to_string());\n     let source_change =\n-        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), builder.finish());\n+        SourceChange::from_text_edit(expr_ptr.file_id.original_file(ctx.sema.db), builder.finish());\n     let name = format!(\"Wrap in {variant_name}\");\n     acc.push(fix(\"wrap_in_constructor\", &name, source_change, expr_range));\n     Some(())\n@@ -118,10 +138,11 @@ fn add_missing_ok_or_some(\n fn remove_semicolon(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::TypeMismatch,\n+    expr_ptr: &InFile<AstPtr<ast::Expr>>,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n-    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n-    let expr = d.expr.value.to_node(&root);\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let expr = expr_ptr.value.to_node(&root);\n     if !d.actual.is_unit() {\n         return None;\n     }\n@@ -136,7 +157,7 @@ fn remove_semicolon(\n \n     let edit = TextEdit::delete(semicolon_range);\n     let source_change =\n-        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+        SourceChange::from_text_edit(expr_ptr.file_id.original_file(ctx.sema.db), edit);\n \n     acc.push(fix(\"remove_semicolon\", \"Remove this semicolon\", source_change, semicolon_range));\n     Some(())\n@@ -145,24 +166,26 @@ fn remove_semicolon(\n fn str_ref_to_owned(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::TypeMismatch,\n+    expr_ptr: &InFile<AstPtr<ast::Expr>>,\n     acc: &mut Vec<Assist>,\n ) -> Option<()> {\n     let expected = d.expected.display(ctx.sema.db);\n     let actual = d.actual.display(ctx.sema.db);\n \n+    // FIXME do this properly\n     if expected.to_string() != \"String\" || actual.to_string() != \"&str\" {\n         return None;\n     }\n \n-    let root = ctx.sema.db.parse_or_expand(d.expr.file_id)?;\n-    let expr = d.expr.value.to_node(&root);\n+    let root = ctx.sema.db.parse_or_expand(expr_ptr.file_id)?;\n+    let expr = expr_ptr.value.to_node(&root);\n     let expr_range = expr.syntax().text_range();\n \n     let to_owned = format!(\".to_owned()\");\n \n     let edit = TextEdit::insert(expr.syntax().text_range().end(), to_owned);\n     let source_change =\n-        SourceChange::from_text_edit(d.expr.file_id.original_file(ctx.sema.db), edit);\n+        SourceChange::from_text_edit(expr_ptr.file_id.original_file(ctx.sema.db), edit);\n     acc.push(fix(\"str_ref_to_owned\", \"Add .to_owned() here\", source_change, expr_range));\n \n     Some(())\n@@ -592,6 +615,24 @@ fn f() -> i32 {\n     let _ = x + y;\n   }\n //^ error: expected i32, found ()\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn type_mismatch_pat_smoke_test() {\n+        check_diagnostics(\n+            r#\"\n+fn f() {\n+    let &() = &mut ();\n+      //^^^ error: expected &mut (), found &()\n+    match &() {\n+        &9 => ()\n+      //^^ error: expected &(), found &i32\n+       //^ error: expected (), found i32\n+       //^ error: expected (), found i32\n+    }\n+}\n \"#,\n         );\n     }"}]}