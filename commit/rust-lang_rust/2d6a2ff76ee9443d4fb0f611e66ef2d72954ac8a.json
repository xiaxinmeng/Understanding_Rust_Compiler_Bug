{"sha": "2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "node_id": "C_kwDOAAsO6NoAKDJkNmEyZmY3NmVlOTQ0M2Q0ZmIwZjYxMWU2NmVmMmQ3Mjk1NGFjOGE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-26T00:51:11Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-26T00:51:11Z"}, "message": "Create new inference context", "tree": {"sha": "6c6badc3b85d964e4e03d601f8c4c382fc646872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c6badc3b85d964e4e03d601f8c4c382fc646872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "html_url": "https://github.com/rust-lang/rust/commit/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7de0d48530b34cf7f8ae18435e68463e57c6b7", "html_url": "https://github.com/rust-lang/rust/commit/ea7de0d48530b34cf7f8ae18435e68463e57c6b7"}], "stats": {"total": 124, "additions": 94, "deletions": 30}, "files": [{"sha": "6b5c1d1a20fbcf2acd403fa62751c7ced8e11513", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{LateBoundRegionConversionTime, TyCtxtInferExt};\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n     AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n@@ -18,7 +18,10 @@ use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n-use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::{\n+    type_known_to_meet_bound_modulo_regions, Obligation, ObligationCause,\n+};\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n@@ -1131,13 +1134,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 place_name, partially_str, loop_message\n                             ),\n                         );\n-                        let ty = tcx.erase_regions(moved_place.ty(self.body, self.infcx.tcx).ty);\n+                        let infcx = tcx.infer_ctxt().build();\n+                        let ty = infcx.freshen(moved_place.ty(self.body, tcx).ty);\n                         if let ty::Adt(def, substs) = ty.kind()\n-                            && Some(def.did()) == self.infcx.tcx.lang_items().pin_type()\n+                            && Some(def.did()) == tcx.lang_items().pin_type()\n                             && let ty::Ref(_, _, hir::Mutability::Mut) = substs.type_at(0).kind()\n-                            // FIXME: this is a hack because we can't call `can_eq`\n-                            && ty.to_string() ==\n-                                tcx.fn_sig(method_did).input(0).skip_binder().to_string()\n+                            && let self_ty = infcx.freshen(\n+                                infcx.replace_bound_vars_with_fresh_vars(\n+                                    fn_call_span,\n+                                    LateBoundRegionConversionTime::FnCall,\n+                                    tcx.fn_sig(method_did).input(0),\n+                                )\n+                            )\n+                            && infcx.can_eq(self.param_env, ty, self_ty).is_ok()\n                         {\n                             err.span_suggestion_verbose(\n                                 fn_call_span.shrink_to_lo(),\n@@ -1146,28 +1155,23 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n-                        if let Some(clone_trait) = tcx.lang_items().clone_trait() {\n-                            // We can't use `predicate_may_hold` or `can_eq` without ICEs in\n-                            // borrowck because of the inference context, so we do a poor-man's\n-                            // version here.\n-                            for impl_def_id in tcx.all_impls(clone_trait) {\n-                                if let Some(def_id) = impl_def_id.as_local()\n-                                    && let hir_id = tcx.hir().local_def_id_to_hir_id(def_id)\n-                                    && let hir::Node::Item(hir::Item {\n-                                        kind: hir::ItemKind::Impl(_),\n-                                        ..\n-                                    }) = tcx.hir().get(hir_id)\n-                                    && tcx.type_of(impl_def_id) == ty\n-                                {\n-                                    err.span_suggestion_verbose(\n-                                        fn_call_span.shrink_to_lo(),\n-                                        \"you can `clone` the value and consume it, but this might \\\n-                                         not be your desired behavior\",\n-                                        \"clone().\".to_string(),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                }\n-                            }\n+                        if let Some(clone_trait) = tcx.lang_items().clone_trait()\n+                            && let trait_ref = tcx.mk_trait_ref(clone_trait, [ty])\n+                            && let o = Obligation::new(\n+                                tcx,\n+                                ObligationCause::dummy(),\n+                                self.param_env,\n+                                ty::Binder::dummy(trait_ref),\n+                            )\n+                            && infcx.predicate_must_hold_modulo_regions(&o)\n+                        {\n+                            err.span_suggestion_verbose(\n+                                fn_call_span.shrink_to_lo(),\n+                                \"you can `clone` the value and consume it, but this might not be \\\n+                                 your desired behavior\",\n+                                \"clone().\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                         }\n                     }\n                     // Avoid pointing to the same function in multiple different"}, {"sha": "87135f0bb438fee1a9997c45c7c3179b0a8a8c68", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -9,6 +9,10 @@ LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves value\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     let _x = Rc::new(vec![1, 2]).clone().into_iter();\n+   |                                  ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "b0c5376105b2890cf6acb39cd050af8f62c59896", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.fixed?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+// Test that a by-ref `FnMut` closure gets an error when it tries to\n+// consume a value.\n+\n+fn call<F>(f: F) where F : Fn() {\n+    f();\n+}\n+\n+fn main() {\n+    let y = vec![format!(\"World\")];\n+    call(|| {\n+        y.clone().into_iter();\n+        //~^ ERROR cannot move out of `y`, a captured variable in an `Fn` closure\n+    });\n+}"}, {"sha": "4666b8a3373531f1f4794a9165970d895d204186", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Test that a by-ref `FnMut` closure gets an error when it tries to\n // consume a value.\n "}, {"sha": "f033d53bf8e482a99eff20d9af2dcd2bc07c2ade", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `y`, a captured variable in an `Fn` closure\n-  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:11:9\n+  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:12:9\n    |\n LL |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n@@ -12,6 +12,10 @@ LL |         y.into_iter();\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `y`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |         y.clone().into_iter();\n+   |           ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "6f87a2a367e45191cf5607b13660a7575052b007", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -16,6 +16,10 @@ help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     some_vec.clone().into_iter();\n    |             ++++++++\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     some_vec.clone().into_iter();\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "106fd31a088c048d344aad726ccbe2d12075b8f7", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -9,6 +9,10 @@ LL |     val.0;\n note: `into_iter` takes ownership of the receiver `self`, which moves `val.0`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: move occurs because `val.0` has type `Vec<bool>`, which does not implement the `Copy` trait\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     val.0.clone().into_iter().next();\n+   |           ++++++++\n \n error[E0382]: use of moved value: `foo`\n   --> $DIR/move-fn-self-receiver.rs:34:5\n@@ -97,6 +101,10 @@ help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     rc_foo.clone().use_rc_self();\n    |           ++++++++\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     rc_foo.clone().use_rc_self();\n+   |            ++++++++\n \n error[E0382]: use of moved value: `foo_add`\n   --> $DIR/move-fn-self-receiver.rs:59:5\n@@ -140,6 +148,10 @@ help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     for _val in explicit_into_iter.clone().into_iter() {}\n    |                                   ++++++++\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     for _val in explicit_into_iter.clone().into_iter() {}\n+   |                                    ++++++++\n \n error[E0382]: use of moved value: `container`\n   --> $DIR/move-fn-self-receiver.rs:71:5"}, {"sha": "b51ba16cca19152950fe23d4ccade569e53b9265", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -14,6 +14,10 @@ help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     consume(x.clone().into_iter().next().unwrap());\n    |              ++++++++\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     consume(x.clone().into_iter().next().unwrap());\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "8458d9cad5fbd1b73a961f021d13502b457825c8", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -166,6 +166,10 @@ help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     let _y = x.clone().into_iter().next().unwrap();\n    |               ++++++++\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     let _y = x.clone().into_iter().next().unwrap();\n+   |                ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:83:11\n@@ -183,6 +187,10 @@ help: consider cloning the value if the performance cost is acceptable\n    |\n LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];\n    |                ++++++++\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];\n+   |                 ++++++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "474a72093c631eee83a3b62f36fdeedd09b62b02", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "patch": "@@ -9,6 +9,10 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |\n note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |                 if selection.1.clone().unwrap().contains(selection.0) {\n+   |                                ++++++++\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:27:20\n@@ -21,6 +25,10 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |\n note: `Result::<T, E>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |                 if selection.1.clone().unwrap().contains(selection.0) {\n+   |                                ++++++++\n \n error: aborting due to 2 previous errors\n "}]}