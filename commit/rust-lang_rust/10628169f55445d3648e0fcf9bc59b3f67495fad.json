{"sha": "10628169f55445d3648e0fcf9bc59b3f67495fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjI4MTY5ZjU1NDQ1ZDM2NDhlMGZjZjliYzU5YjNmNjc0OTVmYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T18:19:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T18:19:40Z"}, "message": "Auto merge of #853 - RalfJung:readme, r=RalfJung\n\nreadme: move flags and env vars up above dev", "tree": {"sha": "fe75f348bc100315f3310bc383a5ab373f9eaa82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe75f348bc100315f3310bc383a5ab373f9eaa82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10628169f55445d3648e0fcf9bc59b3f67495fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10628169f55445d3648e0fcf9bc59b3f67495fad", "html_url": "https://github.com/rust-lang/rust/commit/10628169f55445d3648e0fcf9bc59b3f67495fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10628169f55445d3648e0fcf9bc59b3f67495fad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ef40979157b4117faa52bbe79ec144ebd45b0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef40979157b4117faa52bbe79ec144ebd45b0e3", "html_url": "https://github.com/rust-lang/rust/commit/7ef40979157b4117faa52bbe79ec144ebd45b0e3"}, {"sha": "59fa7c2cf5ed072e7d9f8bc1ae2307b67dacfbdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fa7c2cf5ed072e7d9f8bc1ae2307b67dacfbdb", "html_url": "https://github.com/rust-lang/rust/commit/59fa7c2cf5ed072e7d9f8bc1ae2307b67dacfbdb"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "6b6a274f3fba63733609de3bfb85abb4956a39c8", "filename": "README.md", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/10628169f55445d3648e0fcf9bc59b3f67495fad/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/10628169f55445d3648e0fcf9bc59b3f67495fad/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=10628169f55445d3648e0fcf9bc59b3f67495fad", "patch": "@@ -136,6 +136,43 @@ should never happen when you use `cargo miri` because that takes care of setting\n up the sysroot.  If you are using `miri` (the Miri driver) directly, see\n [below][testing-miri] for how to set up the sysroot.\n \n+\n+## Miri `-Z` flags and environment variables\n+[miri-flags]: #miri--z-flags-and-environment-variables\n+\n+Several `-Z` flags are relevant for Miri:\n+\n+* `-Zmiri-seed=<hex>` is a custom `-Z` flag added by Miri.  It configures the\n+  seed of the RNG that Miri uses to resolve non-determinism.  This RNG is used\n+  to pick base addresses for allocations, and when the interpreted program\n+  requests system entropy.  The default seed is 0.\n+  **NOTE**: This entropy is not good enough for cryptographic use!  Do not\n+  generate secret keys in Miri or perform other kinds of cryptographic\n+  operations that rely on proper random numbers.\n+* `-Zmiri-disable-validation` disables enforcing the validity invariant, which\n+  is enforced by default.  This is mostly useful for debugging; it means Miri\n+  will miss bugs in your program.  However, this can also help to make Miri run\n+  faster.\n+* `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n+  overrides the default to be `0`; be advised that using any higher level can\n+  make Miri miss bugs in your program because they got optimized away.\n+* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n+  functions.  This is needed so that Miri can execute such functions, so Miri\n+  sets this flag per default.\n+* `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n+  enables this per default because it is needed for validation.\n+\n+Moreover, Miri recognizes some environment variables:\n+\n+* `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n+  Miri executions, also [see above][testing-miri].\n+* `MIRI_SYSROOT` (recognized by `cargo miri` and the test suite)\n+  indicates the sysroot to use.  To do the same thing with `miri`\n+  directly, use the `--sysroot` flag.\n+* `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n+  architecture to test against.  `miri` and `cargo miri` accept the `--target`\n+  flag for the same purpose.\n+\n ## Development and Debugging\n \n If you want to hack on miri yourself, great!  Here are some resources you might\n@@ -257,42 +294,6 @@ rustup override set custom\n With this, you should now have a working development setup!  See\n [above][testing-miri] for how to proceed working with the Miri driver.\n \n-### Miri `-Z` flags and environment variables\n-[miri-flags]: #miri--z-flags-and-environment-variables\n-\n-Several `-Z` flags are relevant for Miri:\n-\n-* `-Zmiri-seed=<hex>` is a custom `-Z` flag added by Miri.  It configures the\n-  seed of the RNG that Miri uses to resolve non-determinism.  This RNG is used\n-  to pick base addresses for allocations, and when the interpreted program\n-  requests system entropy.  The default seed is 0.\n-  **NOTE**: This entropy is not good enough for cryptographic use!  Do not\n-  generate secret keys in Miri or perform other kinds of cryptographic\n-  operations that rely on proper random numbers.\n-* `-Zmiri-disable-validation` disables enforcing the validity invariant, which\n-  is enforced by default.  This is mostly useful for debugging; it means Miri\n-  will miss bugs in your program.  However, this can also help to make Miri run\n-  faster.\n-* `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n-  overrides the default to be `0`; be advised that using any higher level can\n-  make Miri miss bugs in your program because they got optimized away.\n-* `-Zalways-encode-mir` makes rustc dump MIR even for completely monomorphic\n-  functions.  This is needed so that Miri can execute such functions, so Miri\n-  sets this flag per default.\n-* `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n-  enables this per default because it is needed for validation.\n-\n-Moreover, Miri recognizes some environment variables:\n-\n-* `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n-  Miri executions, also [see above][testing-miri].\n-* `MIRI_SYSROOT` (recognized by `cargo miri` and the test suite)\n-  indicates the sysroot to use.  To do the same thing with `miri`\n-  directly, use the `--sysroot` flag.\n-* `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n-  architecture to test against.  `miri` and `cargo miri` accept the `--target`\n-  flag for the same purpose.\n-\n ## Contributing and getting help\n \n Check out the issues on this GitHub repository for some ideas. There's lots that"}]}