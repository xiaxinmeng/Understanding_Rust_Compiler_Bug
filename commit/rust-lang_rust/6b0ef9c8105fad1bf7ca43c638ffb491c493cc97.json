{"sha": "6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "node_id": "C_kwDOAAsO6NoAKDZiMGVmOWM4MTA1ZmFkMWJmN2NhNDNjNjM4ZmZiNDkxYzQ5M2NjOTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T17:10:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T17:11:40Z"}, "message": "Deny const variables as well", "tree": {"sha": "2d38d944c2273fa0af2d405ccedaa19391705a7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d38d944c2273fa0af2d405ccedaa19391705a7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "html_url": "https://github.com/rust-lang/rust/commit/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e", "html_url": "https://github.com/rust-lang/rust/commit/1e2eb97c6e4aaf53dfff018cf82fe4d033fe6b3e"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "03866d5e054fdd7a1b03bc073c87cb0ae77e90e5", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "patch": "@@ -5,6 +5,7 @@ use crate::mir::interpret::{AllocId, ConstValue, Scalar};\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n use crate::ty::ParamEnv;\n use crate::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n@@ -108,14 +109,22 @@ impl<'tcx> ConstKind<'tcx> {\n \n /// An inference variable for a const, for use in const generics.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]\n-#[derive(HashStable)]\n pub enum InferConst<'tcx> {\n     /// Infer the value of the const.\n     Var(ty::ConstVid<'tcx>),\n     /// A fresh const variable. See `infer::freshen` for more details.\n     Fresh(u32),\n }\n \n+impl<CTX> HashStable<CTX> for InferConst<'_> {\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        match self {\n+            InferConst::Var(_) => panic!(\"const variables should not be hashed: {self:?}\"),\n+            InferConst::Fresh(i) => i.hash_stable(hcx, hasher),\n+        }\n+    }\n+}\n+\n enum EvalMode {\n     Typeck,\n     Mir,"}, {"sha": "03bb7e54fd5af27745377be79fb945207d7b040b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "patch": "@@ -200,9 +200,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n \n                     // It's impossible to hash inference variables (and will ICE), so we don't need to try to cache them.\n                     // Without incremental, we rarely stable-hash types, so let's not do it proactively.\n-                    let stable_hash = if flags\n-                        .flags\n-                        .intersects(TypeFlags::HAS_RE_INFER | TypeFlags::HAS_TY_INFER)\n+                    let stable_hash = if flags.flags.intersects(TypeFlags::NEEDS_INFER)\n                         || sess.opts.incremental.is_none()\n                     {\n                         Fingerprint::ZERO"}, {"sha": "7fbe78aa52353b98968ab4541412c77df925f043", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b0ef9c8105fad1bf7ca43c638ffb491c493cc97/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=6b0ef9c8105fad1bf7ca43c638ffb491c493cc97", "patch": "@@ -676,7 +676,7 @@ impl<CTX> HashStable<CTX> for InferTy {\n         discriminant(self).hash_stable(ctx, hasher);\n         match self {\n             TyVar(_) | IntVar(_) | FloatVar(_) => {\n-                panic!(\"inference variables should not be hashed: {self:?}\")\n+                panic!(\"type variables should not be hashed: {self:?}\")\n             }\n             FreshTy(v) | FreshIntTy(v) | FreshFloatTy(v) => v.hash_stable(ctx, hasher),\n         }"}]}