{"sha": "e233978891d5b93641e1365e7448d20cdc8b0a12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMzM5Nzg4OTFkNWI5MzY0MWUxMzY1ZTc0NDhkMjBjZGM4YjBhMTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-03T01:30:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-03T01:30:07Z"}, "message": "rustc: Change fn_names and fn_ids to item_names and item_ids in trans, since we're soon to be storing tags in there too", "tree": {"sha": "1982008d7c5bc71648d1d91e50617f352e1f4200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1982008d7c5bc71648d1d91e50617f352e1f4200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e233978891d5b93641e1365e7448d20cdc8b0a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e233978891d5b93641e1365e7448d20cdc8b0a12", "html_url": "https://github.com/rust-lang/rust/commit/e233978891d5b93641e1365e7448d20cdc8b0a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e233978891d5b93641e1365e7448d20cdc8b0a12/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b3cd700ee6bd4b68346144129886478246311c", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b3cd700ee6bd4b68346144129886478246311c", "html_url": "https://github.com/rust-lang/rust/commit/49b3cd700ee6bd4b68346144129886478246311c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "d0f986753ec58e828114a5efa2ed9b149e974a4c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e233978891d5b93641e1365e7448d20cdc8b0a12/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e233978891d5b93641e1365e7448d20cdc8b0a12/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e233978891d5b93641e1365e7448d20cdc8b0a12", "patch": "@@ -52,8 +52,8 @@ state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n                             hashmap[str, ValueRef] upcalls,\n                             hashmap[str, ValueRef] intrinsics,\n-                            hashmap[str, ValueRef] fn_names,\n-                            hashmap[ast.def_id, ValueRef] fn_ids,\n+                            hashmap[str, ValueRef] item_names,\n+                            hashmap[ast.def_id, ValueRef] item_ids,\n                             hashmap[ast.def_id, @ast.item] items,\n                             hashmap[ast.def_id, @tag_info] tags,\n                             @glue_fns glues,\n@@ -1126,8 +1126,8 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n                             true);\n                 }\n                 case (ast.def_fn(?did)) {\n-                    check (cx.fcx.ccx.fn_ids.contains_key(did));\n-                    ret tup(res(cx, cx.fcx.ccx.fn_ids.get(did)),\n+                    check (cx.fcx.ccx.item_ids.contains_key(did));\n+                    ret tup(res(cx, cx.fcx.ccx.item_ids.get(did)),\n                             false);\n                 }\n                 case (ast.def_variant(?tid, ?vid)) {\n@@ -1610,9 +1610,9 @@ fn new_fn_ctxt(@crate_ctxt cx,\n                &ast._fn f,\n                ast.def_id fid) -> @fn_ctxt {\n \n-    check (cx.fn_ids.contains_key(fid));\n-    let ValueRef llfn = cx.fn_ids.get(fid);\n-    cx.fn_names.insert(cx.path, llfn);\n+    check (cx.item_ids.contains_key(fid));\n+    let ValueRef llfn = cx.item_ids.get(fid);\n+    cx.item_names.insert(cx.path, llfn);\n \n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 0u);\n     let uint arg_n = 1u;\n@@ -1779,7 +1779,7 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             auto llty = node_type(cx, ann);\n             let str s = cx.names.next(\"_rust_fn\") + \".\" + name;\n             let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llty);\n-            cx.fn_ids.insert(fid, llfn);\n+            cx.item_ids.insert(fid, llfn);\n         }\n \n         case (ast.item_mod(?name, ?m, ?mid)) {\n@@ -1899,8 +1899,8 @@ fn trans_main_fn(@crate_ctxt cx, ValueRef llcrate) {\n \n     auto llargc = llvm.LLVMGetParam(llmain, 0u);\n     auto llargv = llvm.LLVMGetParam(llmain, 1u);\n-    check (cx.fn_names.contains_key(\"_rust.main\"));\n-    auto llrust_main = cx.fn_names.get(\"_rust.main\");\n+    check (cx.item_names.contains_key(\"_rust.main\"));\n+    auto llrust_main = cx.item_names.get(\"_rust.main\");\n \n     //\n     // Emit the moral equivalent of:\n@@ -1977,8 +1977,8 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n                    llmod = llmod,\n                    upcalls = new_str_hash[ValueRef](),\n                    intrinsics = intrinsics,\n-                   fn_names = new_str_hash[ValueRef](),\n-                   fn_ids = new_def_hash[ValueRef](),\n+                   item_names = new_str_hash[ValueRef](),\n+                   item_ids = new_def_hash[ValueRef](),\n                    items = new_def_hash[@ast.item](),\n                    tags = new_def_hash[@tag_info](),\n                    glues = glues,"}]}