{"sha": "ad612d660cf782e895a9957cb4d5a2465bec1f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNjEyZDY2MGNmNzgyZTg5NWE5OTU3Y2I0ZDVhMjQ2NWJlYzFmNGM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-06-21T02:51:18Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-06-22T21:23:33Z"}, "message": "Fix erroneous error note when using field after move", "tree": {"sha": "942d3b5ca05e4f9babe307d54c5af1108171c345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/942d3b5ca05e4f9babe307d54c5af1108171c345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad612d660cf782e895a9957cb4d5a2465bec1f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlstaNcACgkQiMlBzaHU\nZDJl3BAAtnvCST6mrTdmOBf8DgXq+Z7yrNAcVYUGrih7tE32wBEDk8ckc/36OpVR\nsGzLFmKYdZvLNHBxja9LlR8+2hnx/fCcY7AaYlADNeUI4bye1R5BtVJrQwlwDFfN\n+gIs1YdOqonfTbxB/1fdT6xNdo4FpyxhxnfBt4nKnOuXVMiyNqjWlKkdEkh+CGH6\nPlHB3ZSEbUQHxYZY/K/PjywzdqwURQ/hVfXwUY9plNIwkDu87S8u34FSraVIxZ9V\nagqWQ/Jfah77eq7AioMEEP9uDLxf6ZlSlVZ4XAH3vWcjGTy1oJRwE/4Ynpz1+zVq\nUqhdMJxUeadEi75c4ekx+z6WZ1dLogpXEoJIhkAF+MRFM6YIylZGUN6ejctKiIfG\nd04acp8Z7AdeD5bTxFfINZAGU8cRjOC+jfm3vb2L56k6RQJ7p2EBINkf6Byjil29\n+Tdw2PwhaLfBYWLZSADarlHWZPmqemz3ucR48A/BRpnZjigSJabe1sz6jwrN9hZ5\nmhPqQ4CTYZ7oB8lIXfTzrix0ETgaGUBq1edtizj6mHJib8GpwjLITdEmQkpJxuYk\nQdtQoo4YLZdtXcVhbiHSeJSt+8NjZBF6PyRyDyFOeRjK9/S6Jqbnqm02WQAKXtFR\nkeQ/kqOvklSr480pllrjgnHWKsDVscgPuP6NNwJuYHGKh1ik+qQ=\n=wfJM\n-----END PGP SIGNATURE-----", "payload": "tree 942d3b5ca05e4f9babe307d54c5af1108171c345\nparent 01dbfdaf4f45b68b49332b8785262a3a780d0a19\nauthor Santiago Pastorino <spastorino@gmail.com> 1529549478 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1529702613 -0300\n\nFix erroneous error note when using field after move\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad612d660cf782e895a9957cb4d5a2465bec1f4c", "html_url": "https://github.com/rust-lang/rust/commit/ad612d660cf782e895a9957cb4d5a2465bec1f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad612d660cf782e895a9957cb4d5a2465bec1f4c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01dbfdaf4f45b68b49332b8785262a3a780d0a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/01dbfdaf4f45b68b49332b8785262a3a780d0a19", "html_url": "https://github.com/rust-lang/rust/commit/01dbfdaf4f45b68b49332b8785262a3a780d0a19"}], "stats": {"total": 119, "additions": 86, "deletions": 33}, "files": [{"sha": "500903c1c3b5ed22831e476e8cc2075ca78b08a5", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -680,7 +680,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let mut err = self.cannot_act_on_moved_value(use_span,\n                                                              verb,\n                                                              msg,\n-                                                             &format!(\"{}\", nl),\n+                                                             Some(format!(\"{}\", nl)),\n                                                              Origin::Ast);\n                 let need_note = match lp.ty.sty {\n                     ty::TypeVariants::TyClosure(id, _) => {"}, {"sha": "bb2a389b6b37ad2e1e13e8eedffced6b3fb6a154", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -52,15 +52,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             self.moved_error_reported.insert(root_place.clone());\n \n-            let item_msg = match self.describe_place(place) {\n+            let item_msg = match self.describe_place_with_options(place, IncludingDowncast(true)) {\n                 Some(name) => format!(\"`{}`\", name),\n                 None => \"value\".to_owned(),\n             };\n             self.tcx\n                 .cannot_act_on_uninitialized_variable(\n                     span,\n                     desired_action.as_noun(),\n-                    &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+                    &self.describe_place_with_options(place, IncludingDowncast(true)).unwrap_or(\"_\".to_owned()),\n                     Origin::Mir,\n                 )\n                 .span_label(span, format!(\"use of possibly uninitialized {}\", item_msg))\n@@ -72,14 +72,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 span,\n                 desired_action.as_noun(),\n                 msg,\n-                &self.describe_place(place).unwrap_or(\"_\".to_owned()),\n+                self.describe_place_with_options(&place, IncludingDowncast(true)),\n                 Origin::Mir,\n             );\n \n             let mut is_loop_move = false;\n-            for moi in mois {\n+            for moi in &mois {\n                 let move_msg = \"\"; //FIXME: add \" (into closure)\"\n-                let move_span = self.mir.source_info(self.move_data.moves[*moi].source).span;\n+                let move_span = self.mir.source_info(self.move_data.moves[**moi].source).span;\n                 if span == move_span {\n                     err.span_label(\n                         span,\n@@ -116,16 +116,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 };\n \n                 if needs_note {\n-                    let note_msg = match self.describe_place(place) {\n-                        Some(name) => format!(\"`{}`\", name),\n-                        None => \"value\".to_owned(),\n-                    };\n+                    let mpi = self.move_data.moves[*mois[0]].path;\n+                    let place = &self.move_data.move_paths[mpi].place;\n+\n+                    if let Some(ty) = self.retrieve_type_for_place(place) {\n+                        let note_msg = match self.describe_place_with_options(place, IncludingDowncast(true)) {\n+                            Some(name) => format!(\"`{}`\", name),\n+                            None => \"value\".to_owned(),\n+                        };\n \n-                    err.note(&format!(\n-                        \"move occurs because {} has type `{}`, \\\n-                         which does not implement the `Copy` trait\",\n-                        note_msg, ty\n-                    ));\n+                        err.note(&format!(\n+                            \"move occurs because {} has type `{}`, \\\n+                             which does not implement the `Copy` trait\",\n+                            note_msg, ty\n+                        ));\n+                    }\n                 }\n             }\n \n@@ -654,12 +659,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n }\n \n+pub(super) struct IncludingDowncast(bool);\n+\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     // End-user visible description of `place` if one can be found. If the\n     // place is a temporary for instance, None will be returned.\n     pub(super) fn describe_place(&self, place: &Place<'tcx>) -> Option<String> {\n+        self.describe_place_with_options(place, IncludingDowncast(false))\n+    }\n+\n+    // End-user visible description of `place` if one can be found. If the\n+    // place is a temporary for instance, None will be returned.\n+    // `IncludingDowncast` parameter makes the function return `Err` if `ProjectionElem` is\n+    // `Downcast` and `IncludingDowncast` is true\n+    pub(super) fn describe_place_with_options(&self, place: &Place<'tcx>, including_downcast: IncludingDowncast) -> Option<String> {\n         let mut buf = String::new();\n-        match self.append_place_to_string(place, &mut buf, false) {\n+        match self.append_place_to_string(place, &mut buf, false, &including_downcast) {\n             Ok(()) => Some(buf),\n             Err(()) => None,\n         }\n@@ -671,6 +686,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         place: &Place<'tcx>,\n         buf: &mut String,\n         mut autoderef: bool,\n+        including_downcast: &IncludingDowncast,\n     ) -> Result<(), ()> {\n         match *place {\n             Place::Local(local) => {\n@@ -692,15 +708,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             }\n                         } else {\n                             if autoderef {\n-                                self.append_place_to_string(&proj.base, buf, autoderef)?;\n+                                self.append_place_to_string(&proj.base, buf, autoderef, &including_downcast)?;\n                             } else {\n                                 buf.push_str(&\"*\");\n-                                self.append_place_to_string(&proj.base, buf, autoderef)?;\n+                                self.append_place_to_string(&proj.base, buf, autoderef, &including_downcast)?;\n                             }\n                         }\n                     }\n                     ProjectionElem::Downcast(..) => {\n-                        self.append_place_to_string(&proj.base, buf, autoderef)?;\n+                        self.append_place_to_string(&proj.base, buf, autoderef, &including_downcast)?;\n+                        if including_downcast.0 {\n+                            return Err(());\n+                        }\n                     }\n                     ProjectionElem::Field(field, _ty) => {\n                         autoderef = true;\n@@ -711,14 +730,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             buf.push_str(&name);\n                         } else {\n                             let field_name = self.describe_field(&proj.base, field);\n-                            self.append_place_to_string(&proj.base, buf, autoderef)?;\n+                            self.append_place_to_string(&proj.base, buf, autoderef, &including_downcast)?;\n                             buf.push_str(&format!(\".{}\", field_name));\n                         }\n                     }\n                     ProjectionElem::Index(index) => {\n                         autoderef = true;\n \n-                        self.append_place_to_string(&proj.base, buf, autoderef)?;\n+                        self.append_place_to_string(&proj.base, buf, autoderef, &including_downcast)?;\n                         buf.push_str(\"[\");\n                         if let Err(_) = self.append_local_to_string(index, buf) {\n                             buf.push_str(\"..\");\n@@ -730,7 +749,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         // Since it isn't possible to borrow an element on a particular index and\n                         // then use another while the borrow is held, don't output indices details\n                         // to avoid confusing the end-user\n-                        self.append_place_to_string(&proj.base, buf, autoderef)?;\n+                        self.append_place_to_string(&proj.base, buf, autoderef, &including_downcast)?;\n                         buf.push_str(&\"[..]\");\n                     }\n                 };"}, {"sha": "a6dd32ce23806bbf0880102897cb2e867b5faf41", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -356,12 +356,14 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n                                  use_span: Span,\n                                  verb: &str,\n                                  optional_adverb_for_moved: &str,\n-                                 moved_path: &str,\n+                                 moved_path: Option<String>,\n                                  o: Origin)\n                                  -> DiagnosticBuilder<'cx>\n     {\n+        let moved_path = moved_path.map(|mp| format!(\": `{}`\", mp)).unwrap_or(\"\".to_owned());\n+\n         let err = struct_span_err!(self, use_span, E0382,\n-                                   \"{} of {}moved value: `{}`{OGN}\",\n+                                   \"{} of {}moved value{}{OGN}\",\n                                    verb, optional_adverb_for_moved, moved_path, OGN=o);\n \n         self.cancel_if_wrong_origin(err, o)"}, {"sha": "601f05b499c75c2a46f7e73083db8cb914338dd8", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.nll.stderr?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -7,7 +7,7 @@ LL |     //~^ value moved here\n LL |     let _y = a.y; //~ ERROR use of moved\n    |              ^^^ value used here after move\n    |\n-   = note: move occurs because `a.y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `a.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a.y`\n   --> $DIR/borrowck-box-insensitivity.rs:108:14\n@@ -18,7 +18,7 @@ LL |     //~^ value moved here\n LL |     let _y = a.y; //~ ERROR use of collaterally moved\n    |              ^^^ value used here after move\n    |\n-   = note: move occurs because `a.y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+   = note: move occurs because `a.x.x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2a94e05016d4edff759287c8ed80717eb095dfed", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -20,7 +20,7 @@ pub fn main(){\n         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n-        //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n+        //~| ERROR use of moved value (Mir) [E0382]\n         //~| ERROR borrow of moved value: `maybe` (Mir) [E0382]\n     }\n }"}, {"sha": "bd5d2a46fd8c751ab127cfa7f19e146033231dfe", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -26,7 +26,7 @@ LL |           if let Some(thing) = maybe {\n LL | |         }\n    | |_________^ value used here after move\n    |\n-   = note: move occurs because `maybe` has type `std::option::Option<std::vec::Vec<bool>>`, which does not implement the `Copy` trait\n+   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `maybe` (Mir)\n   --> $DIR/issue-41962.rs:17:9\n@@ -38,7 +38,7 @@ LL |           if let Some(thing) = maybe {\n LL | |         }\n    | |_________^ value borrowed here after move\n    |\n-   = note: move occurs because `maybe` has type `std::option::Option<std::vec::Vec<bool>>`, which does not implement the `Copy` trait\n+   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `maybe` (Mir)\n   --> $DIR/issue-41962.rs:17:16\n@@ -49,15 +49,15 @@ LL |         if let Some(thing) = maybe {\n    |                |    value moved here\n    |                value used here after move\n    |\n-   = note: move occurs because `maybe` has type `std::option::Option<std::vec::Vec<bool>>`, which does not implement the `Copy` trait\n+   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `maybe.0` (Mir)\n+error[E0382]: use of moved value (Mir)\n   --> $DIR/issue-41962.rs:17:21\n    |\n LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here in previous iteration of loop\n    |\n-   = note: move occurs because `maybe.0` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d5b18a6c9629848f3227acb2fc4a96c607e22f53", "filename": "src/test/ui/moves-based-on-type-match-bindings.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.nll.stderr?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -7,7 +7,7 @@ LL |         Foo {f} => {}\n LL |     touch(&x); //~ ERROR use of partially moved value: `x`\n    |           ^^ value borrowed here after move\n    |\n-   = note: move occurs because `x` has type `Foo<std::string::String>`, which does not implement the `Copy` trait\n+   = note: move occurs because `x.f` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "4543d2ba638c46681019e96efba1fa714c152eec", "filename": "src/test/ui/nll/issue-51512.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.rs?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+#![feature(nll)]\n+\n+fn main() {\n+    let range = 0..1;\n+    let r = range;\n+    let x = range.start;\n+    //~^ ERROR use of moved value: `range.start` [E0382]\n+}"}, {"sha": "102de43e5d710077234b67317d70dc504c29de91", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad612d660cf782e895a9957cb4d5a2465bec1f4c/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=ad612d660cf782e895a9957cb4d5a2465bec1f4c", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value: `range.start`\n+  --> $DIR/issue-51512.rs:17:13\n+   |\n+LL |     let r = range;\n+   |             ----- value moved here\n+LL |     let x = range.start;\n+   |             ^^^^^^^^^^^ value used here after move\n+   |\n+   = note: move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}]}