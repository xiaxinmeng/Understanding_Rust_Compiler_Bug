{"sha": "bf4221c51a54294482e437c803a7b1f9c37dbcd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDIyMWM1MWE1NDI5NDQ4MmU0MzdjODAzYTdiMWY5YzM3ZGJjZDg=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-23T12:30:05Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-23T12:30:05Z"}, "message": "cc: early returns are special", "tree": {"sha": "481ff8fd533a6d6943c7e86c30767137ae7a2173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481ff8fd533a6d6943c7e86c30767137ae7a2173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf4221c51a54294482e437c803a7b1f9c37dbcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf4221c51a54294482e437c803a7b1f9c37dbcd8", "html_url": "https://github.com/rust-lang/rust/commit/bf4221c51a54294482e437c803a7b1f9c37dbcd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf4221c51a54294482e437c803a7b1f9c37dbcd8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f76512710ce37729b88cbeeafc47945c1b7758", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f76512710ce37729b88cbeeafc47945c1b7758", "html_url": "https://github.com/rust-lang/rust/commit/30f76512710ce37729b88cbeeafc47945c1b7758"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "9b20cc4a31258127659d5f03cfefeb43434a3730", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bf4221c51a54294482e437c803a7b1f9c37dbcd8/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4221c51a54294482e437c803a7b1f9c37dbcd8/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=bf4221c51a54294482e437c803a7b1f9c37dbcd8", "patch": "@@ -9,7 +9,7 @@ use syntax::ast::Attribute;\n use syntax::attr;\n use syntax::codemap::Span;\n \n-use utils::{in_macro, LimitStack, span_help_and_lint};\n+use utils::{in_macro, LimitStack, span_help_and_lint, paths, match_type};\n \n /// **What it does:** This lint checks for methods with high cyclomatic complexity\n ///\n@@ -57,15 +57,26 @@ impl CyclomaticComplexity {\n             match_arms: 0,\n             divergence: 0,\n             short_circuits: 0,\n+            returns: 0,\n             tcx: &cx.tcx,\n         };\n         helper.visit_block(block);\n-        let CCHelper { match_arms, divergence, short_circuits, .. } = helper;\n+        let CCHelper { match_arms, divergence, short_circuits, returns, .. } = helper;\n+        let ret_ty = cx.tcx.node_id_to_type(block.id);\n+        let ret_adjust = if match_type(cx, ret_ty, &paths::RESULT) {\n+            returns\n+        } else {\n+            returns / 2\n+        };\n \n-        if cc + divergence < match_arms + short_circuits {\n-            report_cc_bug(cx, cc, match_arms, divergence, short_circuits, span);\n+        if cc + divergence < match_arms + short_circuits  {\n+            report_cc_bug(cx, cc, match_arms, divergence, short_circuits, ret_adjust, span);\n         } else {\n-            let rust_cc = cc + divergence - match_arms - short_circuits;\n+            let mut rust_cc = cc + divergence - match_arms - short_circuits;\n+            // prevent degenerate cases where unreachable code contains `return` statements\n+            if rust_cc >= ret_adjust {\n+                rust_cc -= ret_adjust;\n+            }\n             if rust_cc > self.limit.limit() {\n                 span_help_and_lint(cx,\n                                    CYCLOMATIC_COMPLEXITY,\n@@ -109,6 +120,7 @@ impl LateLintPass for CyclomaticComplexity {\n struct CCHelper<'a, 'tcx: 'a> {\n     match_arms: u64,\n     divergence: u64,\n+    returns: u64,\n     short_circuits: u64, // && and ||\n     tcx: &'a ty::TyCtxt<'tcx>,\n }\n@@ -142,31 +154,34 @@ impl<'a, 'b, 'tcx> Visitor<'a> for CCHelper<'b, 'tcx> {\n                     _ => (),\n                 }\n             }\n+            ExprRet(_) => self.returns += 1,\n             _ => walk_expr(self, e),\n         }\n     }\n }\n \n #[cfg(feature=\"debugging\")]\n-fn report_cc_bug(_: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, span: Span) {\n+fn report_cc_bug(_: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span) {\n     span_bug!(span,\n               \"Clippy encountered a bug calculating cyclomatic complexity: cc = {}, arms = {}, \\\n-               div = {}, shorts = {}. Please file a bug report.\",\n+               div = {}, shorts = {}, returns = {}. Please file a bug report.\",\n               cc,\n               narms,\n               div,\n-              shorts);\n+              shorts,\n+              returns);\n }\n #[cfg(not(feature=\"debugging\"))]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, span: Span) {\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span) {\n     if cx.current_level(CYCLOMATIC_COMPLEXITY) != Level::Allow {\n         cx.sess().span_note_without_error(span,\n                                           &format!(\"Clippy encountered a bug calculating cyclomatic complexity \\\n                                                     (hide this message with `#[allow(cyclomatic_complexity)]`): cc \\\n-                                                    = {}, arms = {}, div = {}, shorts = {}. Please file a bug report.\",\n+                                                    = {}, arms = {}, div = {}, shorts = {}, returns = {}. Please file a bug report.\",\n                                                    cc,\n                                                    narms,\n                                                    div,\n-                                                   shorts));\n+                                                   shorts,\n+                                                   returns));\n     }\n }"}, {"sha": "2160272bf46bfbd3888b5527a9de0c69c6b9b838", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bf4221c51a54294482e437c803a7b1f9c37dbcd8/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf4221c51a54294482e437c803a7b1f9c37dbcd8/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=bf4221c51a54294482e437c803a7b1f9c37dbcd8", "patch": "@@ -315,3 +315,60 @@ fn mcarton_sees_all() {\n     panic!(\"meh\");\n     panic!(\"m\u00f6h\");\n }\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn try() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+    match 5 {\n+        5 => Ok(5),\n+        _ => return Err(\"bla\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn try_again() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+    let _ = try!(Ok(42));\n+    let _ = try!(Ok(43));\n+    let _ = try!(Ok(44));\n+    let _ = try!(Ok(45));\n+    let _ = try!(Ok(46));\n+    let _ = try!(Ok(47));\n+    let _ = try!(Ok(48));\n+    let _ = try!(Ok(49));\n+    match 5 {\n+        5 => Ok(5),\n+        _ => return Err(\"bla\"),\n+    }\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn early() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+    return Ok(5);\n+}\n+\n+#[cyclomatic_complexity = \"0\"]\n+fn early_ret() -> i32 { //~ ERROR: cyclomatic complexity of 8\n+    let a = if true { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    let a = if a < 99 { 42 } else { return 0; };\n+    match 5 {\n+        5 => 5,\n+        _ => return 6,\n+    }\n+}"}]}