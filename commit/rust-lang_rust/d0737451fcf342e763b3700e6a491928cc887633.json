{"sha": "d0737451fcf342e763b3700e6a491928cc887633", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzM3NDUxZmNmMzQyZTc2M2IzNzAwZTZhNDkxOTI4Y2M4ODc2MzM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T06:27:51Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-26T06:27:51Z"}, "message": "Add BitCount trait", "tree": {"sha": "7a9006c9967cc288ae9ea7c422679d3bacb77f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a9006c9967cc288ae9ea7c422679d3bacb77f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0737451fcf342e763b3700e6a491928cc887633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0737451fcf342e763b3700e6a491928cc887633", "html_url": "https://github.com/rust-lang/rust/commit/d0737451fcf342e763b3700e6a491928cc887633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0737451fcf342e763b3700e6a491928cc887633/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c07f5e457102d52042735e277959f7e1a55491e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c07f5e457102d52042735e277959f7e1a55491e", "html_url": "https://github.com/rust-lang/rust/commit/4c07f5e457102d52042735e277959f7e1a55491e"}], "stats": {"total": 303, "additions": 287, "deletions": 16}, "files": [{"sha": "b7d657669fea7cd59bda1a485a725e6d97d95533", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -106,7 +106,7 @@ pub use iter::{ExtendedMutableIter};\n pub use num::{Num, NumCast};\n pub use num::{Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n-pub use num::{Bitwise, Bounded};\n+pub use num::{Bitwise, BitCount, Bounded};\n pub use num::{Primitive, PrimitiveInt};\n pub use num::{Int, Uint, Float};\n pub use ptr::Ptr;"}, {"sha": "11dacdd44939a9c59953a46c55fdaa1787fa7768", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -646,7 +646,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_bitwise_ops() {\n+    fn test_bitwise() {\n         assert_eq!(0b1110 as T, (0b1100 as T).bitor(&(0b1010 as T)));\n         assert_eq!(0b1000 as T, (0b1100 as T).bitand(&(0b1010 as T)));\n         assert_eq!(0b0110 as T, (0b1100 as T).bitxor(&(0b1010 as T)));\n@@ -655,6 +655,11 @@ mod tests {\n         assert_eq!(-(0b11 as T) - (1 as T), (0b11 as T).not());\n     }\n \n+    #[test]\n+    fn test_bitcount() {\n+        assert_eq!((0b010101 as T).population_count(), 3);\n+    }\n+\n     #[test]\n     fn test_primitive() {\n         assert_eq!(Primitive::bits::<T>(), sys::size_of::<T>() * 8);"}, {"sha": "282633785553bf26e6362e8e46b266043f935887", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `i16`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = i16;\n     pub static bits: uint = ::u16::bits;\n@@ -23,4 +24,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<i16>() / 8 }\n     }\n+\n+    impl BitCount for i16 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> i16 { unsafe { intrinsics::ctpop16(*self) } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> i16 { unsafe { intrinsics::ctlz16(*self) } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> i16 { unsafe { intrinsics::cttz16(*self) } }\n+    }\n }"}, {"sha": "959cf8f7d77cac26cb66f9993c2444e77f94cb26", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `i32`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = i32;\n     pub static bits: uint = ::u32::bits;\n@@ -23,4 +24,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<i32>() / 8 }\n     }\n+\n+    impl BitCount for i32 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> i32 { unsafe { intrinsics::ctpop32(*self) } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> i32 { unsafe { intrinsics::ctlz32(*self) } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> i32 { unsafe { intrinsics::cttz32(*self) } }\n+    }\n }"}, {"sha": "3b51c70be12e52bc2f684b7e85fb198a9de160ca", "filename": "src/libcore/num/int-template/i64.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `i64`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = i64;\n     pub static bits: uint = ::u64::bits;\n@@ -23,4 +24,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<i64>() / 8 }\n     }\n+\n+    impl BitCount for i64 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> i64 { unsafe { intrinsics::ctpop64(*self) } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> i64 { unsafe { intrinsics::ctlz64(*self) } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> i64 { unsafe { intrinsics::cttz64(*self) } }\n+    }\n }"}, {"sha": "896fb4dbf50f822bafd99e9207e66db73c3b10fb", "filename": "src/libcore/num/int-template/i8.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `i8`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = i8;\n     pub static bits: uint = ::u8::bits;\n@@ -23,4 +24,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<i8>() / 8 }\n     }\n+\n+    impl BitCount for i8 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> i8 { unsafe { intrinsics::ctpop8(*self) } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> i8 { unsafe { intrinsics::ctlz8(*self) } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> i8 { unsafe { intrinsics::cttz8(*self) } }\n+    }\n }"}, {"sha": "bfe8bd0bfe68b4697f327e57b83bb281e65d9491", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -13,7 +13,7 @@\n pub use self::inst::pow;\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n \n     pub type T = int;\n     pub static bits: uint = ::uint::bits;\n@@ -31,12 +31,79 @@ mod inst {\n         #[cfg(not(target_word_size = \"32\"),\n               not(target_word_size = \"64\"))]\n         #[inline(always)]\n-        fn bits() -> uint { sys::size_of::<int>() * 8 }\n+        fn bits() -> uint { ::sys::size_of::<int>() * 8 }\n \n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<int>() / 8 }\n     }\n \n+    #[cfg(target_word_size = \"32\")]\n+    #[inline(always)]\n+    impl BitCount for int {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> int { (*self as i32).population_count() as uint }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> int { (*self as i32).leading_zeros() as uint }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> int { (*self as i32).trailing_zeros() as uint }\n+    }\n+\n+    #[cfg(target_word_size = \"64\")]\n+    #[inline(always)]\n+    impl BitCount for int {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> int { (*self as i64).population_count() as int }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> int { (*self as i64).leading_zeros() as int }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> int { (*self as i32).trailing_zeros() as int }\n+    }\n+\n+    // fallback if we don't have access to the current word size\n+    #[cfg(not(target_word_size = \"32\"),\n+          not(target_word_size = \"64\"))]\n+    impl BitCount for int {\n+        /// Counts the number of bits set.\n+        #[inline(always)]\n+        fn population_count(&self) -> int {\n+            match ::sys::size_of::<int>() {\n+                8 => (*self as i64).population_count() as int,\n+                4 => (*self as i32).population_count() as int,\n+                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n+            }\n+        }\n+\n+        /// Counts the number of leading zeros.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> int {\n+            match ::sys::size_of::<int>() {\n+                8 => (*self as i64).leading_zeros() as int,\n+                4 => (*self as i32).leading_zeros() as int,\n+                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n+            }\n+        }\n+\n+        /// Counts the number of trailing zeros.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> int {\n+            match ::sys::size_of::<int>() {\n+                8 => (*self as i64).trailing_zeros() as int,\n+                4 => (*self as i32).trailing_zeros() as int,\n+                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n+            }\n+        }\n+    }\n+\n     /// Returns `base` raised to the power of `exponent`\n     pub fn pow(base: int, exponent: uint) -> int {\n         if exponent == 0u {"}, {"sha": "cec5fe8cd283bc22d25b80c07e52133150b1b4eb", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -184,6 +184,12 @@ pub trait Bitwise: Not<Self>\n                  + Shl<Self,Self>\n                  + Shr<Self,Self> {}\n \n+pub trait BitCount {\n+    fn population_count(&self) -> Self;\n+    fn leading_zeros(&self) -> Self;\n+    fn trailing_zeros(&self) -> Self;\n+}\n+\n pub trait Bounded {\n     // FIXME (#5527): These should be associated constants\n     fn min_value() -> Self;\n@@ -214,7 +220,8 @@ pub trait Primitive: Num\n pub trait PrimitiveInt: Integer\n                       + Primitive\n                       + Bounded\n-                      + Bitwise {}\n+                      + Bitwise\n+                      + BitCount {}\n \n ///\n /// Specialisation of `PrimitiveInt` for unsigned integers"}, {"sha": "2e6c7e28b18dda427ea3de2be6b294e6751e8487", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -389,7 +389,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_bitwise_ops() {\n+    fn test_bitwise() {\n         assert_eq!(0b1110 as T, (0b1100 as T).bitor(&(0b1010 as T)));\n         assert_eq!(0b1000 as T, (0b1100 as T).bitand(&(0b1010 as T)));\n         assert_eq!(0b0110 as T, (0b1100 as T).bitxor(&(0b1010 as T)));\n@@ -398,6 +398,11 @@ mod tests {\n         assert_eq!(max_value - (0b1011 as T), (0b1011 as T).not());\n     }\n \n+    #[test]\n+    fn test_bitcount() {\n+        assert_eq!((0b010101 as T).population_count(), 3);\n+    }\n+\n     #[test]\n     fn test_primitive() {\n         assert_eq!(Primitive::bits::<T>(), sys::size_of::<T>() * 8);"}, {"sha": "cc262f6b4dee7100385e9b7784383173265c8d5e", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `u16`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = u16;\n     #[allow(non_camel_case_types)]\n@@ -25,4 +26,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<u16>() / 8 }\n     }\n+\n+    impl BitCount for u16 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> u16 { unsafe { intrinsics::ctpop16(*self as i16) as u16 } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> u16 { unsafe { intrinsics::ctlz16(*self as i16) as u16 } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> u16 { unsafe { intrinsics::cttz16(*self as i16) as u16 } }\n+    }\n }"}, {"sha": "7d7c8e3be302e3589b6d72f5e3fbd5f77296647a", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `u32`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = u32;\n     #[allow(non_camel_case_types)]\n@@ -25,4 +26,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<u32>() / 8 }\n     }\n+\n+    impl BitCount for u32 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> u32 { unsafe { intrinsics::ctpop32(*self as i32) as u32 } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlp` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> u32 { unsafe { intrinsics::ctlz32(*self as i32) as u32 } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttp` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> u32 { unsafe { intrinsics::cttz32(*self as i32) as u32 } }\n+    }\n }"}, {"sha": "756c29950c35b062b2fdf4dd902c6924e5e88a9f", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `u64`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = u64;\n     #[allow(non_camel_case_types)]\n@@ -25,4 +26,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<u64>() / 8 }\n     }\n+\n+    impl BitCount for u64 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> u64 { unsafe { intrinsics::ctpop64(*self as i64) as u64 } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> u64 { unsafe { intrinsics::ctlz64(*self as i64) as u64 } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> u64 { unsafe { intrinsics::cttz64(*self as i64) as u64 } }\n+    }\n }"}, {"sha": "5ac860c0359c547fd7217162a1245b169e6f49c8", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -11,7 +11,8 @@\n //! Operations and constants for `u8`\n \n mod inst {\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n+    use unstable::intrinsics;\n \n     pub type T = u8;\n     #[allow(non_camel_case_types)]\n@@ -25,4 +26,18 @@ mod inst {\n         #[inline(always)]\n         fn bytes() -> uint { Primitive::bits::<u8>() / 8 }\n     }\n+\n+    impl BitCount for u8 {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> u8 { unsafe { intrinsics::ctpop8(*self as i8) as u8 } }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> u8 { unsafe { intrinsics::ctlz8(*self as i8) as u8 } }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> u8 { unsafe { intrinsics::cttz8(*self as i8) as u8 } }\n+    }\n }"}, {"sha": "9e10ed63968a1658bbf7c4ddb87699e2597282b7", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -18,7 +18,7 @@ pub use self::inst::{\n pub mod inst {\n     use sys;\n     use iter;\n-    use num::Primitive;\n+    use num::{Primitive, BitCount};\n \n     pub type T = uint;\n     #[allow(non_camel_case_types)]\n@@ -51,6 +51,73 @@ pub mod inst {\n         fn bytes() -> uint { Primitive::bits::<uint>() / 8 }\n     }\n \n+    #[cfg(target_word_size = \"32\")]\n+    #[inline(always)]\n+    impl BitCount for uint {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> uint { (*self as i32).population_count() as uint }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> uint { (*self as i32).leading_zeros() as uint }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> uint { (*self as i32).trailing_zeros() as uint }\n+    }\n+\n+    #[cfg(target_word_size = \"64\")]\n+    #[inline(always)]\n+    impl BitCount for uint {\n+        /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n+        #[inline(always)]\n+        fn population_count(&self) -> uint { (*self as i64).population_count() as uint }\n+\n+        /// Counts the number of leading zeros. Wraps LLVM's `ctlz` intrinsic.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> uint { (*self as i64).leading_zeros() as uint }\n+\n+        /// Counts the number of trailing zeros. Wraps LLVM's `cttz` intrinsic.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> uint { (*self as i32).trailing_zeros() as uint }\n+    }\n+\n+    // fallback if we don't have access to the current word size\n+    #[cfg(not(target_word_size = \"32\"),\n+          not(target_word_size = \"64\"))]\n+    impl BitCount for uint {\n+        /// Counts the number of bits set.\n+        #[inline(always)]\n+        fn population_count(&self) -> uint {\n+            match sys::size_of::<uint>() {\n+                8 => (*self as i64).population_count() as uint,\n+                4 => (*self as i32).population_count() as uint,\n+                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n+            }\n+        }\n+\n+        /// Counts the number of leading zeros.\n+        #[inline(always)]\n+        fn leading_zeros(&self) -> uint {\n+            match sys::size_of::<uint>() {\n+                8 => (*self as i64).leading_zeros() as uint,\n+                4 => (*self as i32).leading_zeros() as uint,\n+                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n+            }\n+        }\n+\n+        /// Counts the number of trailing zeros.\n+        #[inline(always)]\n+        fn trailing_zeros(&self) -> uint {\n+            match sys::size_of::<uint>() {\n+                8 => (*self as i64).trailing_zeros() as uint,\n+                4 => (*self as i32).trailing_zeros() as uint,\n+                s => fail!(fmt!(\"unsupported word size: %?\", s)),\n+            }\n+        }\n+    }\n+\n     ///\n     /// Divide two numbers, return the result, rounded up.\n     ///"}, {"sha": "1ab6f8d4441786942909bfa329518347904433d3", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0737451fcf342e763b3700e6a491928cc887633/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=d0737451fcf342e763b3700e6a491928cc887633", "patch": "@@ -40,7 +40,7 @@ pub use iter::{Times, ExtendedMutableIter};\n pub use num::{Num, NumCast};\n pub use num::{Signed, Unsigned, Integer};\n pub use num::{Round, Fractional, Real, RealExt};\n-pub use num::{Bitwise, Bounded};\n+pub use num::{Bitwise, BitCount, Bounded};\n pub use num::{Primitive, PrimitiveInt};\n pub use num::{Int, Uint, Float};\n pub use path::GenericPath;"}]}