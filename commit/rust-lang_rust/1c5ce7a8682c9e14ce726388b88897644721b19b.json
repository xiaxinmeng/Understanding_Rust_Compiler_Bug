{"sha": "1c5ce7a8682c9e14ce726388b88897644721b19b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNWNlN2E4NjgyYzllMTRjZTcyNjM4OGI4ODg5NzY0NDcyMWIxOWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T22:48:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T22:51:05Z"}, "message": "File module source does not depend on syntax", "tree": {"sha": "bba7163aa81ceba1dfb26f481b8fd974421aaa8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba7163aa81ceba1dfb26f481b8fd974421aaa8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c5ce7a8682c9e14ce726388b88897644721b19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5ce7a8682c9e14ce726388b88897644721b19b", "html_url": "https://github.com/rust-lang/rust/commit/1c5ce7a8682c9e14ce726388b88897644721b19b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c5ce7a8682c9e14ce726388b88897644721b19b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9664fbcac5e53d725c6e438ffba2194921321b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/9664fbcac5e53d725c6e438ffba2194921321b76", "html_url": "https://github.com/rust-lang/rust/commit/9664fbcac5e53d725c6e438ffba2194921321b76"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "5941a9ea3d9a2bc23bd4996252dd9c14b8ecd927", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=1c5ce7a8682c9e14ce726388b88897644721b19b", "patch": "@@ -109,7 +109,8 @@ pub(crate) type SourceFileItemId = Id<SyntaxNode>;\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct SourceItemId {\n     file_id: FileId,\n-    item_id: SourceFileItemId,\n+    /// None for the whole file.\n+    item_id: Option<SourceFileItemId>,\n }\n \n /// Maps item's `SyntaxNode`s to `SourceFileItemId` and back."}, {"sha": "d5866f6ef5cbd8b015678d9f806598fceb2fd9a3", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=1c5ce7a8682c9e14ce726388b88897644721b19b", "patch": "@@ -271,15 +271,13 @@ pub struct ModuleData {\n \n impl ModuleSource {\n     // precondition: item_id **must** point to module\n-    fn new(file_id: FileId, item_id: SourceFileItemId) -> ModuleSource {\n+    fn new(file_id: FileId, item_id: Option<SourceFileItemId>) -> ModuleSource {\n         let source_item_id = SourceItemId { file_id, item_id };\n         ModuleSource(source_item_id)\n     }\n \n-    pub(crate) fn new_file(db: &impl HirDatabase, file_id: FileId) -> ModuleSource {\n-        let file_items = db.file_items(file_id);\n-        let item_id = file_items.id_of_source_file();\n-        ModuleSource::new(file_id, item_id)\n+    pub(crate) fn new_file(file_id: FileId) -> ModuleSource {\n+        ModuleSource::new(file_id, None)\n     }\n \n     pub(crate) fn new_inline(\n@@ -290,7 +288,7 @@ impl ModuleSource {\n         assert!(!m.has_semi());\n         let file_items = db.file_items(file_id);\n         let item_id = file_items.id_of(file_id, m.syntax());\n-        ModuleSource::new(file_id, item_id)\n+        ModuleSource::new(file_id, Some(item_id))\n     }\n \n     pub fn file_id(self) -> FileId {"}, {"sha": "4a19842c43ab2b95f8c8003df669db6f7bddf7af", "filename": "crates/ra_hir/src/module/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs?ref=1c5ce7a8682c9e14ce726388b88897644721b19b", "patch": "@@ -66,7 +66,7 @@ fn create_module_tree<'a>(\n \n     let source_root = db.source_root(source_root);\n     for &file_id in source_root.files.iter() {\n-        let source = ModuleSource::new_file(db, file_id);\n+        let source = ModuleSource::new_file(file_id);\n         if visited.contains(&source) {\n             continue; // TODO: use explicit crate_roots here\n         }\n@@ -126,7 +126,7 @@ fn build_subtree(\n                             visited,\n                             roots,\n                             Some(link),\n-                            ModuleSource::new_file(db, file_id),\n+                            ModuleSource::new_file(file_id),\n                         ),\n                     })\n                     .collect::<Cancelable<Vec<_>>>()?;"}, {"sha": "5540b827f1887c72cfba6e23b00b8109efa32dd3", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=1c5ce7a8682c9e14ce726388b88897644721b19b", "patch": "@@ -98,7 +98,7 @@ impl NamedImport {\n     pub fn range(&self, db: &impl HirDatabase, file_id: FileId) -> TextRange {\n         let source_item_id = SourceItemId {\n             file_id,\n-            item_id: self.file_item_id,\n+            item_id: Some(self.file_item_id),\n         };\n         let syntax = db.file_item(source_item_id);\n         let offset = syntax.borrowed().range().start();\n@@ -281,7 +281,7 @@ where\n                 module_id,\n                 source_item_id: SourceItemId {\n                     file_id,\n-                    item_id: item.id,\n+                    item_id: Some(item.id),\n                 },\n             };\n             let def_id = def_loc.id(self.db);"}, {"sha": "efaeb1525a7e8e3823dfd5f3858556028d15eba9", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=1c5ce7a8682c9e14ce726388b88897644721b19b", "patch": "@@ -38,7 +38,6 @@ pub(super) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {\n     let mut res = SourceFileItems::new(file_id);\n     let source_file = db.source_file(file_id);\n-    res.alloc(source_file.syntax().owned());\n     let source_file = source_file.borrowed();\n     source_file\n         .syntax()\n@@ -52,7 +51,10 @@ pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFi\n }\n \n pub(super) fn file_item(db: &impl HirDatabase, source_item_id: SourceItemId) -> SyntaxNode {\n-    db.file_items(source_item_id.file_id)[source_item_id.item_id].clone()\n+    match source_item_id.item_id {\n+        Some(id) => db.file_items(source_item_id.file_id)[id].clone(),\n+        None => db.source_file(source_item_id.file_id).syntax().owned(),\n+    }\n }\n \n pub(crate) fn submodules("}, {"sha": "ce2a0f2e8947b49973527208a2c3f840f367ac4a", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c5ce7a8682c9e14ce726388b88897644721b19b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=1c5ce7a8682c9e14ce726388b88897644721b19b", "patch": "@@ -20,7 +20,7 @@ use crate::{\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n pub fn module_from_file_id(db: &impl HirDatabase, file_id: FileId) -> Cancelable<Option<Module>> {\n-    let module_source = ModuleSource::new_file(db, file_id);\n+    let module_source = ModuleSource::new_file(file_id);\n     module_from_source(db, module_source)\n }\n \n@@ -32,7 +32,7 @@ pub fn module_from_position(\n     let file = db.source_file(position.file_id);\n     let module_source = match find_node_at_offset::<ast::Module>(file.syntax(), position.offset) {\n         Some(m) if !m.has_semi() => ModuleSource::new_inline(db, position.file_id, m),\n-        _ => ModuleSource::new_file(db, position.file_id),\n+        _ => ModuleSource::new_file(position.file_id),\n     };\n     module_from_source(db, module_source)\n }\n@@ -50,7 +50,7 @@ pub fn module_from_child_node(\n     {\n         ModuleSource::new_inline(db, file_id, m)\n     } else {\n-        ModuleSource::new_file(db, file_id)\n+        ModuleSource::new_file(file_id)\n     };\n     module_from_source(db, module_source)\n }\n@@ -76,7 +76,10 @@ pub fn function_from_source(\n     let module = ctry!(module_from_child_node(db, file_id, fn_def.syntax())?);\n     let file_items = db.file_items(file_id);\n     let item_id = file_items.id_of(file_id, fn_def.syntax());\n-    let source_item_id = SourceItemId { file_id, item_id };\n+    let source_item_id = SourceItemId {\n+        file_id,\n+        item_id: Some(item_id),\n+    };\n     let def_loc = DefLoc {\n         kind: DefKind::Function,\n         source_root_id: module.source_root_id,"}]}