{"sha": "52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZDJjN2FjOTQ4ZDZhYmRjMThlYjllMDVhNTNkMDNkZGNhZmZkOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T11:07:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T11:07:32Z"}, "message": "Auto merge of #74817 - JohnTitor:rollup-0fchdye, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #74088 (Avoid writes without any data in `Write::write_all_vectored`)\n - #74598 (Fix sync_once_cell_does_not_leak_partially_constructed_boxes)\n - #74750 (Clean up some uses of logging in ui tests)\n - #74783 (python codes cleanup)\n - #74790 (Don't italicize comments in ayu theme)\n - #74799 (Fixed typo in `closure`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a30872c445cc554a5bff48f20e7afb134540c103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30872c445cc554a5bff48f20e7afb134540c103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "html_url": "https://github.com/rust-lang/rust/commit/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af6b3d4e74cf31c21821430de755219bf239d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af6b3d4e74cf31c21821430de755219bf239d96", "html_url": "https://github.com/rust-lang/rust/commit/9af6b3d4e74cf31c21821430de755219bf239d96"}, {"sha": "7df242dd0900c9ac9bf79c184c72b0978ef9fa9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df242dd0900c9ac9bf79c184c72b0978ef9fa9e", "html_url": "https://github.com/rust-lang/rust/commit/7df242dd0900c9ac9bf79c184c72b0978ef9fa9e"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "440181a7611cb12ca3cdd6034e8763e4aba2ebe3", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -125,8 +125,8 @@\n     from htmlentitydefs import name2codepoint\n \n # \"void elements\" (no closing tag) from the HTML Standard section 12.1.2\n-VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n-                     'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'])\n+VOID_ELEMENTS = {'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n+                     'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'}\n \n # Python 2 -> 3 compatibility\n try:\n@@ -146,7 +146,7 @@ def __init__(self, target=None):\n         self.__builder = target or ET.TreeBuilder()\n \n     def handle_starttag(self, tag, attrs):\n-        attrs = dict((k, v or '') for k, v in attrs)\n+        attrs = {k: v or '' for k, v in attrs}\n         self.__builder.start(tag, attrs)\n         if tag in VOID_ELEMENTS:\n             self.__builder.end(tag)\n@@ -155,7 +155,7 @@ def handle_endtag(self, tag):\n         self.__builder.end(tag)\n \n     def handle_startendtag(self, tag, attrs):\n-        attrs = dict((k, v or '') for k, v in attrs)\n+        attrs = {k: v or '' for k, v in attrs}\n         self.__builder.start(tag, attrs)\n         self.__builder.end(tag)\n "}, {"sha": "3e5cad2b185a14b252e5e2854e9ebfddc0cbfcce", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -160,7 +160,7 @@ pub trait FnMut<Args>: FnOnce<Args> {\n /// times. Because of this, if the only thing known about a type is that it\n /// implements `FnOnce`, it can only be called once.\n ///\n-/// `FnOnce` is implemented automatically by closure that might consume captured\n+/// `FnOnce` is implemented automatically by closures that might consume captured\n /// variables, as well as all types that implement [`FnMut`], e.g., (safe)\n /// [function pointers] (since `FnOnce` is a supertrait of [`FnMut`]).\n ///"}, {"sha": "01b7ae8778671957365f91c953dafb0615dafed2", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -199,7 +199,6 @@ pre {\n \n pre.rust .comment, pre.rust .doccomment {\n \tcolor: #788797;\n-\tfont-style: italic;\n }\n \n nav:not(.sidebar) {"}, {"sha": "9eb54c2cc0044ae1dc8b4af9437bd977dcf4e83a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -251,7 +251,6 @@\n \n use crate::cmp;\n use crate::fmt;\n-use crate::mem;\n use crate::memchr;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n@@ -1435,12 +1434,15 @@ pub trait Write {\n     /// ```\n     #[unstable(feature = \"write_all_vectored\", issue = \"70436\")]\n     fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {\n+        // Guarantee that bufs is empty if it contains no data,\n+        // to avoid calling write_vectored if there is no data to be written.\n+        bufs = IoSlice::advance(bufs, 0);\n         while !bufs.is_empty() {\n             match self.write_vectored(bufs) {\n                 Ok(0) => {\n                     return Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\"));\n                 }\n-                Ok(n) => bufs = IoSlice::advance(mem::take(&mut bufs), n),\n+                Ok(n) => bufs = IoSlice::advance(bufs, n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }\n@@ -2958,6 +2960,7 @@ mod tests {\n         #[rustfmt::skip] // Becomes unreadable otherwise.\n         let tests: Vec<(_, &'static [u8])> = vec![\n             (vec![], &[]),\n+            (vec![IoSlice::new(&[]), IoSlice::new(&[])], &[]),\n             (vec![IoSlice::new(&[1])], &[1]),\n             (vec![IoSlice::new(&[1, 2])], &[1, 2]),\n             (vec![IoSlice::new(&[1, 2, 3])], &[1, 2, 3]),"}, {"sha": "1705a4f77c5555b4ad5ac05d4e89e22000602bf3", "filename": "src/libstd/lazy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibstd%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Flibstd%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flazy.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -827,6 +827,8 @@ mod tests {\n                         tx.send(msg).unwrap();\n                         break;\n                     }\n+                    #[cfg(target_env = \"sgx\")]\n+                    crate::thread::yield_now();\n                 }\n             });\n         }"}, {"sha": "f46eeb7a020d8f9ef0464d821d3db2a2fd285de8", "filename": "src/test/ui/binding/func-arg-ref-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffunc-arg-ref-pattern.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// exec-env:RUST_POISON_ON_FREE=1\n \n // Test argument patterns where we create refs to the inside of\n // boxes. Make sure that we don't free the box as we match the"}, {"sha": "56ec629c61360532c7ce65445b9094745acdbe4f", "filename": "src/test/ui/issues/issue-18075.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fissues%2Fissue-18075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fissues%2Fissue-18075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18075.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// exec-env:RUSTC_LOG=rustc::middle=debug\n+// rustc-env:RUSTC_LOG=rustc::middle=debug\n \n fn main() {\n     let b = 1isize;"}, {"sha": "ab568fd01efc5811d8f9e257fa7df387e180ec37", "filename": "src/test/ui/issues/issue-34932.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fissues%2Fissue-34932.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fissues%2Fissue-34932.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34932.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags:--test\n-// rustc-env:RUSTC_BOOTSTRAP_KEY=\n #![cfg(any())] // This test should be configured away\n #![feature(rustc_attrs)] // Test that this is allowed on stable/beta\n #![feature(iter_arith_traits)] // Test that this is not unused"}, {"sha": "6d16819ceb0f0624980167819513982b378a99ac", "filename": "src/test/ui/logging-only-prints-once.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flogging-only-prints-once.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // ignore-windows\n // ignore-emscripten no threads support\n-// exec-env:RUSTC_LOG=debug\n \n use std::cell::Cell;\n use std::fmt;\n@@ -19,10 +18,13 @@ impl fmt::Debug for Foo {\n }\n \n pub fn main() {\n-    thread::spawn(move|| {\n+    thread::spawn(move || {\n         let mut f = Foo(Cell::new(0));\n         println!(\"{:?}\", f);\n         let Foo(ref mut f) = f;\n         assert_eq!(f.get(), 1);\n-    }).join().ok().unwrap();\n+    })\n+    .join()\n+    .ok()\n+    .unwrap();\n }"}, {"sha": "540d2b4f58a90f175d9bfe700aa93843a10c5be7", "filename": "src/test/ui/logging_before_rt_started.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9af6b3d4e74cf31c21821430de755219bf239d96/src%2Ftest%2Fui%2Flogging_before_rt_started.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af6b3d4e74cf31c21821430de755219bf239d96/src%2Ftest%2Fui%2Flogging_before_rt_started.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flogging_before_rt_started.rs?ref=9af6b3d4e74cf31c21821430de755219bf239d96", "patch": "@@ -1,12 +0,0 @@\n-// run-pass\n-// exec-env:RUSTC_LOG=std::ptr\n-\n-// In issue #9487, it was realized that std::ptr was invoking the logging\n-// infrastructure, and when std::ptr was used during runtime initialization,\n-// this caused some serious problems. The problems have since been fixed, but\n-// this test will trigger \"output during runtime initialization\" to make sure\n-// that the bug isn't re-introduced.\n-\n-// pretty-expanded FIXME #23616\n-\n-pub fn main() {}"}, {"sha": "3b1992d90b7c5966ee8932701b534d615954b1a4", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,5 +1,3 @@\n-// rustc-env:RUST_NEW_ERROR_FORMAT\n-\n #![feature(const_fn)]\n \n trait Foo {"}, {"sha": "450981a9183a220cd45744eed319c0643b9aacc5", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,11 +1,11 @@\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-in-trait.rs:7:5\n+  --> $DIR/const-fn-in-trait.rs:5:5\n    |\n LL |     const fn g();\n    |     ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-in-trait.rs:11:5\n+  --> $DIR/const-fn-in-trait.rs:9:5\n    |\n LL |     const fn f() -> u32 { 22 }\n    |     ^^^^^ functions in traits cannot be const"}, {"sha": "ba206b8608f6c51b0fabd3d480c19440104b45e3", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,5 +1,3 @@\n-// rustc-env:RUST_NEW_ERROR_FORMAT\n-\n trait Foo {\n     fn foo(x: u16);\n     fn bar(&mut self, bar: &mut Bar);"}, {"sha": "5735120f7104a189e029b2f2bc184d0683a1386d", "filename": "src/test/ui/mismatched_types/trait-impl-fn-incompatibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-impl-fn-incompatibility.stderr?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `foo` has an incompatible type for trait\n-  --> $DIR/trait-impl-fn-incompatibility.rs:11:15\n+  --> $DIR/trait-impl-fn-incompatibility.rs:9:15\n    |\n LL |     fn foo(x: u16);\n    |               --- type in trait\n@@ -11,7 +11,7 @@ LL |     fn foo(x: i16) { }\n               found fn pointer `fn(i16)`\n \n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/trait-impl-fn-incompatibility.rs:12:28\n+  --> $DIR/trait-impl-fn-incompatibility.rs:10:28\n    |\n LL |     fn bar(&mut self, bar: &mut Bar);\n    |                            -------- type in trait"}, {"sha": "9d3487ffb29566685bb24f06c43eeac9c9d6db57", "filename": "src/test/ui/threads-sendsync/spawning-with-debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fthreads-sendsync%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftest%2Fui%2Fthreads-sendsync%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fspawning-with-debug.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_must_use)]\n #![allow(unused_mut)]\n // ignore-windows\n-// exec-env:RUSTC_LOG=debug\n+// exec-env:RUST_LOG=debug\n // ignore-emscripten no threads support\n \n // regression test for issue #10405, make sure we don't call println! too soon.\n@@ -11,5 +11,5 @@ use std::thread::Builder;\n \n pub fn main() {\n     let mut t = Builder::new();\n-    t.spawn(move|| ());\n+    t.spawn(move || ());\n }"}, {"sha": "653e1f13c4b486f8d10176096d134a662cb6f726", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=52d2c7ac948d6abdc18eb9e05a53d03ddcaffd98", "patch": "@@ -623,7 +623,7 @@ impl<'test> TestCx<'test> {\n             .arg(\"-L\")\n             .arg(&aux_dir)\n             .args(&self.props.compile_flags)\n-            .envs(self.props.exec_env.clone());\n+            .envs(self.props.rustc_env.clone());\n         self.maybe_add_external_args(\n             &mut rustc,\n             self.split_maybe_args(&self.config.target_rustcflags),"}]}