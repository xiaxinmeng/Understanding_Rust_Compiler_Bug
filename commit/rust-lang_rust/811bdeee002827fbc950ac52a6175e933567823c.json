{"sha": "811bdeee002827fbc950ac52a6175e933567823c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMWJkZWVlMDAyODI3ZmJjOTUwYWM1MmE2MTc1ZTkzMzU2NzgyM2M=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-11T13:50:19Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-24T09:10:36Z"}, "message": "Show value for consts in the documentation", "tree": {"sha": "3c4bcf2e2329d30c9f95fda4db87d19ffb0b626e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4bcf2e2329d30c9f95fda4db87d19ffb0b626e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811bdeee002827fbc950ac52a6175e933567823c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811bdeee002827fbc950ac52a6175e933567823c", "html_url": "https://github.com/rust-lang/rust/commit/811bdeee002827fbc950ac52a6175e933567823c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811bdeee002827fbc950ac52a6175e933567823c/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625375400cdd172877e81c3ce44ce68f2011af2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/625375400cdd172877e81c3ce44ce68f2011af2d", "html_url": "https://github.com/rust-lang/rust/commit/625375400cdd172877e81c3ce44ce68f2011af2d"}], "stats": {"total": 208, "additions": 192, "deletions": 16}, "files": [{"sha": "5132f77e578a74d746cc5a09734e8385fd148bdc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -3869,6 +3869,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools 0.8.0\",\n  \"minifier\",\n  \"pulldown-cmark 0.5.3\",\n  \"rustc-rayon\","}, {"sha": "fd7b7cf0b3490dcd628fd6b0f4295ff82cb6cdc0", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -30,7 +30,7 @@ pub const DIGITS: u32 = 6;\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const EPSILON: f32 = 1.19209290e-07_f32;\n+pub const EPSILON: f32 = 1.1920929e-7_f32;\n \n /// Smallest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "74e46b1eae362df506f6408a68aebdd71d80b90c", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -15,3 +15,4 @@ rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n tempfile = \"3\"\n+itertools = \"0.8\""}, {"sha": "35e26819b10b4167829836c74a82e7afc216b177", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -450,7 +450,16 @@ pub fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n }\n \n fn build_const(cx: &DocContext<'_>, did: DefId) -> clean::Constant {\n-    clean::Constant { type_: cx.tcx.type_of(did).clean(cx), expr: print_inlined_const(cx, did) }\n+    clean::Constant {\n+        type_: cx.tcx.type_of(did).clean(cx),\n+        expr: print_inlined_const(cx, did),\n+        value: clean::utils::print_evaluated_const(cx, did),\n+        is_literal: cx\n+            .tcx\n+            .hir()\n+            .as_local_hir_id(did)\n+            .map_or(false, |hir_id| clean::utils::is_literal_expr(cx, hir_id)),\n+    }\n }\n \n fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {"}, {"sha": "e5c0a6aadce4311caed3f3e1fbb4375ff59a41b5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -435,6 +435,8 @@ impl Clean<Constant> for hir::ConstArg {\n         Constant {\n             type_: cx.tcx.type_of(cx.tcx.hir().body_owner_def_id(self.value.body)).clean(cx),\n             expr: print_const_expr(cx, self.value.body),\n+            value: None,\n+            is_literal: is_literal_expr(cx, self.value.body.hir_id),\n         }\n     }\n }\n@@ -1717,7 +1719,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n     fn clean(&self, cx: &DocContext<'_>) -> Constant {\n-        Constant { type_: self.ty.clean(cx), expr: format!(\"{}\", self) }\n+        Constant {\n+            type_: self.ty.clean(cx),\n+            expr: format!(\"{}\", self),\n+            value: None,\n+            is_literal: false,\n+        }\n     }\n }\n \n@@ -2062,17 +2069,21 @@ impl Clean<Item> for doctree::Static<'_> {\n \n impl Clean<Item> for doctree::Constant<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n+        let def_id = cx.tcx.hir().local_def_id(self.id);\n+\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id,\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n             inner: ConstantItem(Constant {\n                 type_: self.type_.clean(cx),\n                 expr: print_const_expr(cx, self.expr),\n+                value: print_evaluated_const(cx, def_id),\n+                is_literal: is_literal_expr(cx, self.expr.hir_id),\n             }),\n         }\n     }"}, {"sha": "e7b9964d4652a88aabb905f26e698223b5aacd77", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -1460,6 +1460,8 @@ pub struct Static {\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n+    pub value: Option<String>,\n+    pub is_literal: bool,\n }\n \n #[derive(Clone, PartialEq, Debug)]"}, {"sha": "e52afe501c34fdf9dba70eb174a100a6f2d11962", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 74, "deletions": 3, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -8,17 +8,18 @@ use crate::clean::{\n };\n use crate::core::DocContext;\n \n+use itertools::Itertools;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::mir::interpret::{sign_extend, ConstValue, Scalar};\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, DefIdTree, Ty};\n use rustc::util::nodemap::FxHashSet;\n+use std::mem;\n use syntax_pos;\n use syntax_pos::symbol::{kw, sym, Symbol};\n \n-use std::mem;\n-\n pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     use crate::visit_lib::LibEmbargoVisitor;\n \n@@ -482,8 +483,78 @@ pub fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     }\n }\n \n+pub fn print_evaluated_const(cx: &DocContext<'_>, def_id: DefId) -> Option<String> {\n+    let value =\n+        cx.tcx.const_eval_poly(def_id).ok().and_then(|value| match (value.val, &value.ty.kind) {\n+            (_, ty::Ref(..)) => None,\n+            (ty::ConstKind::Value(ConstValue::Scalar(_)), ty::Adt(_, _)) => None,\n+            (ty::ConstKind::Value(ConstValue::Scalar(_)), _) => {\n+                Some(print_const_with_custom_print_scalar(cx, value))\n+            }\n+            _ => None,\n+        });\n+\n+    value\n+}\n+\n+fn format_integer_with_underscore_sep(num: &str) -> String {\n+    let num_chars: Vec<_> = num.chars().collect();\n+    let num_start_index = if num_chars.get(0) == Some(&'-') { 1 } else { 0 };\n+\n+    num_chars[..num_start_index]\n+        .iter()\n+        .chain(num_chars[num_start_index..].rchunks(3).rev().intersperse(&['_']).flatten())\n+        .collect()\n+}\n+\n+fn print_const_with_custom_print_scalar(cx: &DocContext<'_>, ct: &'tcx ty::Const<'tcx>) -> String {\n+    // Use a slightly different format for integer types which always shows the actual value.\n+    // For all other types, fallback to the original `pretty_print_const`.\n+    match (ct.val, &ct.ty.kind) {\n+        (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Uint(ui)) => {\n+            format!(\"{}{}\", format_integer_with_underscore_sep(&data.to_string()), ui.name_str())\n+        }\n+        (ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, .. })), ty::Int(i)) => {\n+            let ty = cx.tcx.lift(&ct.ty).unwrap();\n+            let size = cx.tcx.layout_of(ty::ParamEnv::empty().and(ty)).unwrap().size;\n+            let sign_extended_data = sign_extend(data, size) as i128;\n+\n+            format!(\n+                \"{}{}\",\n+                format_integer_with_underscore_sep(&sign_extended_data.to_string()),\n+                i.name_str()\n+            )\n+        }\n+        _ => ct.to_string(),\n+    }\n+}\n+\n+pub fn is_literal_expr(cx: &DocContext<'_>, hir_id: hir::HirId) -> bool {\n+    if let hir::Node::Expr(expr) = cx.tcx.hir().get(hir_id) {\n+        if let hir::ExprKind::Lit(_) = &expr.kind {\n+            return true;\n+        }\n+\n+        if let hir::ExprKind::Unary(hir::UnOp::UnNeg, expr) = &expr.kind {\n+            if let hir::ExprKind::Lit(_) = &expr.kind {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n pub fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n-    cx.tcx.hir().hir_to_pretty_string(body.hir_id)\n+    let value = &cx.tcx.hir().body(body).value;\n+\n+    let snippet = if !value.span.from_expansion() {\n+        cx.sess().source_map().span_to_snippet(value.span).ok()\n+    } else {\n+        None\n+    };\n+\n+    snippet.unwrap_or_else(|| cx.tcx.hir().hir_to_pretty_string(body.hir_id))\n }\n \n /// Given a type Path, resolve it to a Type using the TyCtxt"}, {"sha": "f763255a932907ae984e7d761d7fca636cf7db0f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -2272,14 +2272,36 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n fn item_constant(w: &mut Buffer, cx: &Context, it: &clean::Item, c: &clean::Constant) {\n     write!(w, \"<pre class='rust const'>\");\n     render_attributes(w, it, false);\n+\n     write!(\n         w,\n         \"{vis}const \\\n-               {name}: {typ}</pre>\",\n+               {name}: {typ}\",\n         vis = it.visibility.print_with_space(),\n         name = it.name.as_ref().unwrap(),\n-        typ = c.type_.print()\n+        typ = c.type_.print(),\n     );\n+\n+    if c.value.is_some() || c.is_literal {\n+        write!(w, \" = {expr};\", expr = c.expr);\n+    } else {\n+        write!(w, \";\");\n+    }\n+\n+    if let Some(value) = &c.value {\n+        if !c.is_literal {\n+            let value_lowercase = value.to_lowercase();\n+            let expr_lowercase = c.expr.to_lowercase();\n+\n+            if value_lowercase != expr_lowercase\n+                && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n+            {\n+                write!(w, \" // {value}\", value = value);\n+            }\n+        }\n+    }\n+\n+    write!(w, \"</pre>\");\n     document(w, cx, it)\n }\n "}, {"sha": "819adfeb9c775c0974debdf53482389b16af1fb5", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -17,14 +17,14 @@ pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//h3[@id=\"impl\"]/code' 'impl<T> VSet<T, { Order::Sorted }>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl\"]/code' 'impl<T> VSet<T, {Order::Sorted}>'\n impl <T> VSet<T, {Order::Sorted}> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//h3[@id=\"impl-1\"]/code' 'impl<T> VSet<T, { Order::Unsorted }>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-1\"]/code' 'impl<T> VSet<T, {Order::Unsorted}>'\n impl <T> VSet<T, {Order::Unsorted}> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }"}, {"sha": "656d579e4f3bc8b6a2af7ba8950ce14338d85fca", "filename": "src/test/rustdoc/dont-show-const-contents.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Frustdoc%2Fdont-show-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/625375400cdd172877e81c3ce44ce68f2011af2d/src%2Ftest%2Frustdoc%2Fdont-show-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdont-show-const-contents.rs?ref=625375400cdd172877e81c3ce44ce68f2011af2d", "patch": "@@ -1,5 +0,0 @@\n-// Test that the contents of constants are not displayed as part of the\n-// documentation.\n-\n-// @!has dont_show_const_contents/constant.CONST_S.html 'dont show this'\n-pub const CONST_S: &'static str = \"dont show this\";"}, {"sha": "6d95f7827a1d78a298430211c22f13a7537db732", "filename": "src/test/rustdoc/show-const-contents.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/811bdeee002827fbc950ac52a6175e933567823c/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811bdeee002827fbc950ac52a6175e933567823c/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshow-const-contents.rs?ref=811bdeee002827fbc950ac52a6175e933567823c", "patch": "@@ -0,0 +1,64 @@\n+// Test that the contents of constants are displayed as part of the\n+// documentation.\n+\n+// @has show_const_contents/constant.CONST_S.html 'show this'\n+// @!has show_const_contents/constant.CONST_S.html '; //'\n+pub const CONST_S: &'static str = \"show this\";\n+\n+// @has show_const_contents/constant.CONST_I32.html '= 42;'\n+// @!has show_const_contents/constant.CONST_I32.html '; //'\n+pub const CONST_I32: i32 = 42;\n+\n+// @has show_const_contents/constant.CONST_I32_HEX.html '= 0x42;'\n+// @!has show_const_contents/constant.CONST_I32_HEX.html '; //'\n+pub const CONST_I32_HEX: i32 = 0x42;\n+\n+// @has show_const_contents/constant.CONST_NEG_I32.html '= -42;'\n+// @!has show_const_contents/constant.CONST_NEG_I32.html '; //'\n+pub const CONST_NEG_I32: i32 = -42;\n+\n+// @has show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '= 42i32;'\n+// @!has show_const_contents/constant.CONST_EQ_TO_VALUE_I32.html '// 42i32'\n+pub const CONST_EQ_TO_VALUE_I32: i32 = 42i32;\n+\n+// @has show_const_contents/constant.CONST_CALC_I32.html '= 42 + 1; // 43i32'\n+pub const CONST_CALC_I32: i32 = 42 + 1;\n+\n+// @!has show_const_contents/constant.CONST_REF_I32.html '= &42;'\n+// @!has show_const_contents/constant.CONST_REF_I32.html '; //'\n+pub const CONST_REF_I32: &'static i32 = &42;\n+\n+// @has show_const_contents/constant.CONST_I32_MAX.html '= i32::max_value(); // 2_147_483_647i32'\n+pub const CONST_I32_MAX: i32 = i32::max_value();\n+\n+// @!has show_const_contents/constant.UNIT.html '= ();'\n+// @!has show_const_contents/constant.UNIT.html '; //'\n+pub const UNIT: () = ();\n+\n+pub struct MyType(i32);\n+\n+// @!has show_const_contents/constant.MY_TYPE.html '= MyType(42);'\n+// @!has show_const_contents/constant.MY_TYPE.html '; //'\n+pub const MY_TYPE: MyType = MyType(42);\n+\n+pub struct MyTypeWithStr(&'static str);\n+\n+// @!has show_const_contents/constant.MY_TYPE_WITH_STR.html '= MyTypeWithStr(\"show this\");'\n+// @!has show_const_contents/constant.MY_TYPE_WITH_STR.html '; //'\n+pub const MY_TYPE_WITH_STR: MyTypeWithStr = MyTypeWithStr(\"show this\");\n+\n+// @has show_const_contents/constant.EPSILON.html '1.1920929e-7f32;'\n+// @!has show_const_contents/constant.EPSILON.html '; //'\n+pub use std::f32::EPSILON;\n+\n+// @has show_const_contents/constant.MAX.html '= i32::max_value(); // 2_147_483_647i32'\n+pub use std::i32::MAX;\n+\n+macro_rules! int_module {\n+    ($T:ident) => (\n+        pub const MIN: $T = $T::min_value();\n+    )\n+}\n+\n+// @has show_const_contents/constant.MIN.html '= i16::min_value(); // -32_768i16'\n+int_module!(i16);"}]}