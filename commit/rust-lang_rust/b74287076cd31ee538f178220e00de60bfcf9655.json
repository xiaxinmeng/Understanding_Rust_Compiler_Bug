{"sha": "b74287076cd31ee538f178220e00de60bfcf9655", "node_id": "C_kwDOAAsO6NoAKGI3NDI4NzA3NmNkMzFlZTUzOGYxNzgyMjBlMDBkZTYwYmZjZjk2NTU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T04:24:11Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T04:24:11Z"}, "message": "Convert many impls of `DocFolder` to `DocVisitor`\n\nMany of `DocFolder`'s impls didn't actually transform the syntax tree,\nso they can be visitors instead.", "tree": {"sha": "73ee6339daa46813d1b0f608b3bbad2f2c34c06f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ee6339daa46813d1b0f608b3bbad2f2c34c06f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b74287076cd31ee538f178220e00de60bfcf9655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b74287076cd31ee538f178220e00de60bfcf9655", "html_url": "https://github.com/rust-lang/rust/commit/b74287076cd31ee538f178220e00de60bfcf9655", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b74287076cd31ee538f178220e00de60bfcf9655/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10606c3caf42124bf5b8069647badc0cfcc31a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/10606c3caf42124bf5b8069647badc0cfcc31a89", "html_url": "https://github.com/rust-lang/rust/commit/10606c3caf42124bf5b8069647badc0cfcc31a89"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "4e146a07d154a64b3f8d99eedd4b419d8f61d3db", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=b74287076cd31ee538f178220e00de60bfcf9655", "patch": "@@ -1,8 +1,8 @@\n use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n-use crate::fold::DocFolder;\n use crate::html::markdown::main_body_opts;\n+use crate::visit::DocVisitor;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use regex::Regex;\n@@ -53,16 +53,17 @@ impl<'a, 'tcx> BareUrlsLinter<'a, 'tcx> {\n }\n \n crate fn check_bare_urls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n-    BareUrlsLinter { cx }.fold_crate(krate)\n+    BareUrlsLinter { cx }.visit_crate(&krate);\n+    krate\n }\n \n-impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n-    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+impl<'a, 'tcx> DocVisitor for BareUrlsLinter<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &Item) {\n         let hir_id = match DocContext::as_local_hir_id(self.cx.tcx, item.def_id) {\n             Some(hir_id) => hir_id,\n             None => {\n                 // If non-local, no need to check anything.\n-                return Some(self.fold_item_recur(item));\n+                return;\n             }\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n@@ -106,6 +107,6 @@ impl<'a, 'tcx> DocFolder for BareUrlsLinter<'a, 'tcx> {\n             }\n         }\n \n-        Some(self.fold_item_recur(item))\n+        self.visit_item_recur(item)\n     }\n }"}, {"sha": "85542ebd9ac559f4c5ddcfc546bdc34b893bcac8", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=b74287076cd31ee538f178220e00de60bfcf9655", "patch": "@@ -1,9 +1,9 @@\n use crate::clean;\n use crate::core::DocContext;\n-use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n use crate::passes::check_doc_test_visibility::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n+use crate::visit::DocVisitor;\n use rustc_hir as hir;\n use rustc_lint::builtin::MISSING_DOCS;\n use rustc_middle::lint::LintLevelSource;\n@@ -23,7 +23,7 @@ crate const CALCULATE_DOC_COVERAGE: Pass = Pass {\n \n fn calculate_doc_coverage(krate: clean::Crate, ctx: &mut DocContext<'_>) -> clean::Crate {\n     let mut calc = CoverageCalculator { items: Default::default(), ctx };\n-    let krate = calc.fold_crate(krate);\n+    calc.visit_crate(&krate);\n \n     calc.print_results();\n \n@@ -182,17 +182,18 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n-    fn fold_item(&mut self, i: clean::Item) -> Option<clean::Item> {\n+impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n+    fn visit_item(&mut self, i: &clean::Item) {\n+        if !i.def_id.is_local() {\n+            // non-local items are skipped because they can be out of the users control,\n+            // especially in the case of trait impls, which rustdoc eagerly inlines\n+            return;\n+        }\n+\n         match *i.kind {\n-            _ if !i.def_id.is_local() => {\n-                // non-local items are skipped because they can be out of the users control,\n-                // especially in the case of trait impls, which rustdoc eagerly inlines\n-                return Some(i);\n-            }\n             clean::StrippedItem(..) => {\n                 // don't count items in stripped modules\n-                return Some(i);\n+                return;\n             }\n             // docs on `use` and `extern crate` statements are not displayed, so they're not\n             // worth counting\n@@ -269,6 +270,6 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n             }\n         }\n \n-        Some(self.fold_item_recur(i))\n+        self.visit_item_recur(i)\n     }\n }"}, {"sha": "fd2ab0dc97cb2230373a3cfb9832eb6400170336", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b74287076cd31ee538f178220e00de60bfcf9655", "patch": "@@ -8,9 +8,9 @@ use rustc_span::{hygiene::AstPass, ExpnData, ExpnKind, FileName, InnerSpan, DUMM\n \n use crate::clean;\n use crate::core::DocContext;\n-use crate::fold::DocFolder;\n use crate::html::markdown::{self, RustCodeBlock};\n use crate::passes::Pass;\n+use crate::visit::DocVisitor;\n \n crate const CHECK_CODE_BLOCK_SYNTAX: Pass = Pass {\n     name: \"check-code-block-syntax\",\n@@ -19,7 +19,8 @@ crate const CHECK_CODE_BLOCK_SYNTAX: Pass = Pass {\n };\n \n crate fn check_code_block_syntax(krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n-    SyntaxChecker { cx }.fold_crate(krate)\n+    SyntaxChecker { cx }.visit_crate(&krate);\n+    krate\n }\n \n struct SyntaxChecker<'a, 'tcx> {\n@@ -141,8 +142,8 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n-    fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+impl<'a, 'tcx> DocVisitor for SyntaxChecker<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &clean::Item) {\n         if let Some(dox) = &item.attrs.collapsed_doc_value() {\n             let sp = item.attr_span(self.cx.tcx);\n             let extra = crate::html::markdown::ExtraInfo::new_did(\n@@ -155,7 +156,7 @@ impl<'a, 'tcx> DocFolder for SyntaxChecker<'a, 'tcx> {\n             }\n         }\n \n-        Some(self.fold_item_recur(item))\n+        self.visit_item_recur(item)\n     }\n }\n "}, {"sha": "7d3010cf3325b327c03f2b67b93d2c7190de34eb", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=b74287076cd31ee538f178220e00de60bfcf9655", "patch": "@@ -7,8 +7,8 @@ use super::Pass;\n use crate::clean;\n use crate::clean::*;\n use crate::core::DocContext;\n-use crate::fold::DocFolder;\n use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n+use crate::visit::DocVisitor;\n use crate::visit_ast::inherits_doc_hidden;\n use rustc_hir as hir;\n use rustc_middle::lint::LintLevelSource;\n@@ -27,17 +27,17 @@ struct DocTestVisibilityLinter<'a, 'tcx> {\n \n crate fn check_doc_test_visibility(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     let mut coll = DocTestVisibilityLinter { cx };\n-\n-    coll.fold_crate(krate)\n+    coll.visit_crate(&krate);\n+    krate\n }\n \n-impl<'a, 'tcx> DocFolder for DocTestVisibilityLinter<'a, 'tcx> {\n-    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+impl<'a, 'tcx> DocVisitor for DocTestVisibilityLinter<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &Item) {\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n \n         look_for_tests(self.cx, &dox, &item);\n \n-        Some(self.fold_item_recur(item))\n+        self.visit_item_recur(item)\n     }\n }\n "}, {"sha": "da9d1305b9394ad821dc3e3f2f9ea39b55781331", "filename": "src/librustdoc/passes/html_tags.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74287076cd31ee538f178220e00de60bfcf9655/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fhtml_tags.rs?ref=b74287076cd31ee538f178220e00de60bfcf9655", "patch": "@@ -1,8 +1,8 @@\n use super::Pass;\n use crate::clean::*;\n use crate::core::DocContext;\n-use crate::fold::DocFolder;\n use crate::html::markdown::main_body_opts;\n+use crate::visit::DocVisitor;\n use core::ops::Range;\n use pulldown_cmark::{Event, Parser, Tag};\n use std::iter::Peekable;\n@@ -19,13 +19,11 @@ struct InvalidHtmlTagsLinter<'a, 'tcx> {\n }\n \n crate fn check_invalid_html_tags(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n-    if !cx.tcx.sess.is_nightly_build() {\n-        krate\n-    } else {\n+    if cx.tcx.sess.is_nightly_build() {\n         let mut coll = InvalidHtmlTagsLinter { cx };\n-\n-        coll.fold_crate(krate)\n+        coll.visit_crate(&krate);\n     }\n+    krate\n }\n \n const ALLOWED_UNCLOSED: &[&str] = &[\n@@ -165,14 +163,14 @@ fn extract_tags(\n     }\n }\n \n-impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n-    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+impl<'a, 'tcx> DocVisitor for InvalidHtmlTagsLinter<'a, 'tcx> {\n+    fn visit_item(&mut self, item: &Item) {\n         let tcx = self.cx.tcx;\n         let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n             Some(hir_id) => hir_id,\n             None => {\n                 // If non-local, no need to check anything.\n-                return Some(self.fold_item_recur(item));\n+                return;\n             }\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n@@ -217,6 +215,6 @@ impl<'a, 'tcx> DocFolder for InvalidHtmlTagsLinter<'a, 'tcx> {\n             }\n         }\n \n-        Some(self.fold_item_recur(item))\n+        self.visit_item_recur(item)\n     }\n }"}]}