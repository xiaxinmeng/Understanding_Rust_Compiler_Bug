{"sha": "d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MzNlODMxYmEwZjRiMjhmZGQ2MGIyYjJiODZlYTJjYTcwMzA2NTc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-27T22:04:04Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-27T22:04:04Z"}, "message": "Merge pull request #1009 from rust-lang-nursery/fn-args-1\n\nFix off by 2 error in function sigs", "tree": {"sha": "3986734173d186b15d6ac6aea95b690dd79e8e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3986734173d186b15d6ac6aea95b690dd79e8e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "html_url": "https://github.com/rust-lang/rust/commit/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6bcfceb7e122ab86009ea36ff01388e613ca353", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bcfceb7e122ab86009ea36ff01388e613ca353", "html_url": "https://github.com/rust-lang/rust/commit/d6bcfceb7e122ab86009ea36ff01388e613ca353"}, {"sha": "882ef8cc8249430027c5cea8f5cc65a9d35e9210", "url": "https://api.github.com/repos/rust-lang/rust/commits/882ef8cc8249430027c5cea8f5cc65a9d35e9210", "html_url": "https://github.com/rust-lang/rust/commit/882ef8cc8249430027c5cea8f5cc65a9d35e9210"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "46446eda77941bbfea609775e7c9d40a71731bd2", "filename": "src/items.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "patch": "@@ -1301,7 +1301,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     // Args.\n     let (mut one_line_budget, mut multi_line_budget, mut arg_indent) =\n-        compute_budgets_for_args(context, &result, indent, ret_str_len, newline_brace);\n+        try_opt!(compute_budgets_for_args(context, &result, indent, ret_str_len, newline_brace));\n \n     if context.config.fn_args_layout == FnArgLayoutStyle::Block ||\n        context.config.fn_args_layout == FnArgLayoutStyle::BlockAlways {\n@@ -1617,7 +1617,7 @@ fn compute_budgets_for_args(context: &RewriteContext,\n                             indent: Indent,\n                             ret_str_len: usize,\n                             newline_brace: bool)\n-                            -> (usize, usize, Indent) {\n+                            -> Option<((usize, usize, Indent))> {\n     // Try keeping everything on the same line.\n     if !result.contains(\"\\n\") {\n         // 3 = `() `, space is before ret_string.\n@@ -1628,23 +1628,23 @@ fn compute_budgets_for_args(context: &RewriteContext,\n         let one_line_budget = context.config.max_width.checked_sub(used_space).unwrap_or(0);\n \n         if one_line_budget > 0 {\n-            let multi_line_budget = context.config.max_width -\n-                                    (indent.width() + result.len() + \"()\".len());\n+            // 4 = \"() {\".len()\n+            let multi_line_budget =\n+                try_opt!(context.config.max_width.checked_sub(indent.width() + result.len() + 4));\n \n-            return (one_line_budget, multi_line_budget, indent + result.len() + 1);\n+            return Some((one_line_budget, multi_line_budget, indent + result.len() + 1));\n         }\n     }\n \n     // Didn't work. we must force vertical layout and put args on a newline.\n     let new_indent = indent.block_indent(context.config);\n-    let used_space = new_indent.width() + 2; // account for `(` and `)`\n+    let used_space = new_indent.width() + 4; // Account for `(` and `)` and possibly ` {`.\n     let max_space = context.config.max_width;\n     if used_space <= max_space {\n-        (0, max_space - used_space, new_indent)\n+        Some((0, max_space - used_space, new_indent))\n     } else {\n         // Whoops! bankrupt.\n-        // FIXME: take evasive action, perhaps kill the indent or something.\n-        panic!(\"in compute_budgets_for_args\");\n+        None\n     }\n }\n "}, {"sha": "ad36de7a997595c8a60a3114fbc482cb7e930ece", "filename": "tests/target/fn-custom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/tests%2Ftarget%2Ffn-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/tests%2Ftarget%2Ffn-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom.rs?ref=d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "patch": "@@ -2,8 +2,8 @@\n // Test some of the ways function signatures can be customised.\n \n // Test compressed layout of args.\n-fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc, d: Ddddddddddddddddddddddddd,\n-       e: Eeeeeeeeeeeeeeeeeee) {\n+fn foo(a: Aaaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbbbb, c: Ccccccccccccccccc,\n+       d: Ddddddddddddddddddddddddd, e: Eeeeeeeeeeeeeeeeeee) {\n     foo();\n }\n "}, {"sha": "9ba150d6115d133a1e21cfc81ed7d334d0b10022", "filename": "tests/target/fn.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d633e831ba0f4b28fdd60b2b2b86ea2ca7030657/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=d633e831ba0f4b28fdd60b2b2b86ea2ca7030657", "patch": "@@ -88,3 +88,18 @@ fn ______________________baz(a: i32)\n                                                 arg3: i32)\n                                     -> ()> {\n }\n+\n+pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                            path: &hir::Path,\n+                            id: ast::NodeId,\n+                            cb: &mut FnMut(DefId, Span, &Option<&Stability>, &Option<Depecation>)) {\n+}\n+\n+pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                            path: &hir::Path,\n+                            id: ast::NodeId,\n+                            cb: &mut FnMut(DefId,\n+                                           Span,\n+                                           &Option<&Stability>,\n+                                           &Option<Deprecation>)) {\n+}"}]}