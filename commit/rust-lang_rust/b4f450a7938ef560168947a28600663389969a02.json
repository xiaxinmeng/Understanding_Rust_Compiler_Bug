{"sha": "b4f450a7938ef560168947a28600663389969a02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZjQ1MGE3OTM4ZWY1NjAxNjg5NDdhMjg2MDA2NjMzODk5NjlhMDI=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-18T08:00:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-13T00:15:29Z"}, "message": "Using filename when finding libraries for linking\n\nRevert #999 commit 16dad84f7b2f173db012dda2e77b08ccb423391f", "tree": {"sha": "7438b8e770607e2bba5fd422f86dafad33942bdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7438b8e770607e2bba5fd422f86dafad33942bdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4f450a7938ef560168947a28600663389969a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f450a7938ef560168947a28600663389969a02", "html_url": "https://github.com/rust-lang/rust/commit/b4f450a7938ef560168947a28600663389969a02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4f450a7938ef560168947a28600663389969a02/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887d970fee8f754747b60c795cdb341e76a8a692", "url": "https://api.github.com/repos/rust-lang/rust/commits/887d970fee8f754747b60c795cdb341e76a8a692", "html_url": "https://github.com/rust-lang/rust/commit/887d970fee8f754747b60c795cdb341e76a8a692"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "51bc708c36c1067954c7f3dc7e00eee1417d0763", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4f450a7938ef560168947a28600663389969a02/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/b4f450a7938ef560168947a28600663389969a02/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=b4f450a7938ef560168947a28600663389969a02", "patch": "@@ -105,7 +105,7 @@ endif\n CFG_RUNTIME :=$(call CFG_LIB_NAME,rustrt)\n CFG_RUSTLLVM :=$(call CFG_LIB_NAME,rustllvm)\n CFG_CORELIB :=$(call CFG_LIB_NAME,core)\n-CFG_STDLIB :=$(call CFG_LIB_NAME,ruststd)\n+CFG_STDLIB :=$(call CFG_LIB_NAME,std)\n CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n \n # version-string calculation"}, {"sha": "cb806efa6474d804f517f1834c9b78d0987065a1", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4f450a7938ef560168947a28600663389969a02/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4f450a7938ef560168947a28600663389969a02/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=b4f450a7938ef560168947a28600663389969a02", "patch": "@@ -125,25 +125,39 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n     attr::require_unique_names(sess, metas);\n     let metas = metas;\n \n-    // Metadata \"name\" will be used to find the crate. Use `ident'\n-    // as \"name\" if the attribute is not explicitly specified\n-    if !attr::contains_name(metas, \"name\") {\n-      metas += [attr::mk_name_value_item_str(\"name\", ident)];\n-    }\n+    let crate_name =\n+        {\n+            let name_items = attr::find_meta_items_by_name(metas, \"name\");\n+            alt vec::last(name_items) {\n+              some(i) {\n+                alt attr::get_meta_item_value_str(i) {\n+                  some(n) { n }\n+                  // FIXME: Probably want a warning here since the user\n+                  // is using the wrong type of meta item\n+                  _ { ident }\n+                }\n+              }\n+              none. { ident }\n+            }\n+        };\n+\n     let nn = default_native_lib_naming(sess, sess.get_opts().static);\n     let x =\n-        find_library_crate_aux(sess, nn, metas, sess.filesearch());\n+        find_library_crate_aux(sess, nn, crate_name,\n+                               metas, sess.filesearch());\n     if x != none || sess.get_opts().static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(sess, nn2, metas, sess.filesearch());\n+    ret find_library_crate_aux(sess, nn2, crate_name, metas,\n+                               sess.filesearch());\n }\n \n fn find_library_crate_aux(sess: session::session,\n                           nn: {prefix: str, suffix: str},\n+                          crate_name: str,\n                           metas: [@ast::meta_item],\n                           filesearch: filesearch::filesearch) ->\n    option::t<{ident: str, data: @[u8]}> {\n-    let prefix: str = nn.prefix;\n+    let prefix: str = nn.prefix + crate_name;\n     let suffix: str = nn.suffix;\n \n     ret filesearch::search(filesearch, { |path|"}]}