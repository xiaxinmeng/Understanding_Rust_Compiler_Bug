{"sha": "cef43782693931c62119f70351dd886681895455", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZjQzNzgyNjkzOTMxYzYyMTE5ZjcwMzUxZGQ4ODY2ODE4OTU0NTU=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-07-20T14:25:35Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-07-21T23:00:03Z"}, "message": "Refactoring: Only use `MacroExpander` for expanding outside of\n`syntax::ext::expand`", "tree": {"sha": "4110251edc990fbb0c2f0fa876e14378b043e333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4110251edc990fbb0c2f0fa876e14378b043e333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef43782693931c62119f70351dd886681895455", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef43782693931c62119f70351dd886681895455", "html_url": "https://github.com/rust-lang/rust/commit/cef43782693931c62119f70351dd886681895455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef43782693931c62119f70351dd886681895455/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d92e6830768cc026348766f7f74fc3fd510888", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d92e6830768cc026348766f7f74fc3fd510888", "html_url": "https://github.com/rust-lang/rust/commit/94d92e6830768cc026348766f7f74fc3fd510888"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "07539a11113f5aaeeaf2b33833bb1581d85567bc", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cef43782693931c62119f70351dd886681895455/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef43782693931c62119f70351dd886681895455/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=cef43782693931c62119f70351dd886681895455", "patch": "@@ -34,6 +34,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::ext::base::{ExtCtxt, MacResult, MacExpr, DummyResult};\n use syntax::parse::token;\n use syntax::print::pprust;\n+use syntax::fold::Folder;\n \n use rustc::plugin::Registry;\n \n@@ -615,7 +616,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n /// Otherwise, logs an error with cx.span_err and returns None.\n fn parse(cx: &mut ExtCtxt, tts: &[ast::TokenTree]) -> Option<String> {\n     let mut parser = cx.new_parser_from_tts(tts);\n-    let entry = cx.expand_expr(parser.parse_expr());\n+    let entry = cx.expander().fold_expr(parser.parse_expr());\n     let regex = match entry.node {\n         ast::ExprLit(lit) => {\n             match lit.node {"}, {"sha": "a66d6839ab0743d5d5884c8507b1515a4784b07d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cef43782693931c62119f70351dd886681895455/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef43782693931c62119f70351dd886681895455/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=cef43782693931c62119f70351dd886681895455", "patch": "@@ -20,6 +20,7 @@ use parse::token;\n use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n use ext::mtwt;\n+use fold::Folder;\n \n use std::collections::HashMap;\n use std::gc::{Gc, GC};\n@@ -434,7 +435,7 @@ pub struct ExtCtxt<'a> {\n     pub trace_mac: bool,\n     pub exported_macros: Vec<Gc<ast::Item>>,\n \n-\tpub syntax_env: SyntaxEnv,\n+    pub syntax_env: SyntaxEnv,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -452,18 +453,14 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn expand_expr(&mut self, mut e: Gc<ast::Expr>) -> Gc<ast::Expr> {\n-        loop {\n-            match e.node {\n-                ast::ExprMac(..) => {\n-                    let mut expander = expand::MacroExpander {\n-                        cx: self,\n-                    };\n-                    e = expand::expand_expr(e, &mut expander);\n-                }\n-                _ => return e\n-            }\n-        }\n+    #[deprecated = \"Replaced with `expander().fold_expr()`\"]\n+    pub fn expand_expr(&mut self, e: Gc<ast::Expr>) -> Gc<ast::Expr> {\n+        self.expander().fold_expr(e)\n+    }\n+\n+    /// Returns a `Folder` for deeply expanding all macros in a AST node.\n+    pub fn expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n+        expand::MacroExpander { cx: self }\n     }\n \n     pub fn new_parser_from_tts(&self, tts: &[ast::TokenTree])\n@@ -573,7 +570,7 @@ impl<'a> ExtCtxt<'a> {\n pub fn expr_to_string(cx: &mut ExtCtxt, expr: Gc<ast::Expr>, err_msg: &str)\n                    -> Option<(InternedString, ast::StrStyle)> {\n     // we want to be able to handle e.g. concat(\"foo\", \"bar\")\n-    let expr = cx.expand_expr(expr);\n+    let expr = cx.expander().fold_expr(expr);\n     match expr.node {\n         ast::ExprLit(l) => match l.node {\n             ast::LitStr(ref s, style) => return Some(((*s).clone(), style)),\n@@ -630,7 +627,7 @@ pub fn get_exprs_from_tts(cx: &mut ExtCtxt,\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::EOF {\n-        es.push(cx.expand_expr(p.parse_expr()));\n+        es.push(cx.expander().fold_expr(p.parse_expr()));\n         if p.eat(&token::COMMA) {\n             continue;\n         }"}, {"sha": "123dcf366f440f57756decf58169029aeb4af22b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cef43782693931c62119f70351dd886681895455/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef43782693931c62119f70351dd886681895455/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=cef43782693931c62119f70351dd886681895455", "patch": "@@ -32,7 +32,7 @@ use util::small_vector::SmallVector;\n use std::gc::{Gc, GC};\n \n \n-pub fn expand_expr(e: Gc<ast::Expr>, fld: &mut MacroExpander) -> Gc<ast::Expr> {\n+fn expand_expr(e: Gc<ast::Expr>, fld: &mut MacroExpander) -> Gc<ast::Expr> {\n     match e.node {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n@@ -1347,16 +1347,6 @@ mod test {\n         name_finder.ident_accumulator\n     }\n \n-    //fn expand_and_resolve(crate_str: @str) -> ast::crate {\n-        //let expanded_ast = expand_crate_str(crate_str);\n-        // println!(\"expanded: {:?}\\n\",expanded_ast);\n-        //mtwt_resolve_crate(expanded_ast)\n-    //}\n-    //fn expand_and_resolve_and_pretty_print (crate_str: @str) -> String {\n-        //let resolved_ast = expand_and_resolve(crate_str);\n-        //pprust::to_string(&resolved_ast,fake_print_crate,get_ident_interner())\n-    //}\n-\n     #[test] fn macro_tokens_should_match(){\n         expand_crate_str(\n             \"macro_rules! m((a)=>(13)) fn main(){m!(a);}\".to_string());"}, {"sha": "f85c6f1fc9349966947f518a45d38040a8162e83", "filename": "src/test/run-pass/macro-deep_expansion.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cef43782693931c62119f70351dd886681895455/src%2Ftest%2Frun-pass%2Fmacro-deep_expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef43782693931c62119f70351dd886681895455/src%2Ftest%2Frun-pass%2Fmacro-deep_expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-deep_expansion.rs?ref=cef43782693931c62119f70351dd886681895455", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! foo2 {\n+    () => {\n+        \"foo\"\n+    }\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        foo2!()\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(concat!(foo!(), \"bar\"), \"foobar\")\n+}"}]}