{"sha": "8b53d7806ccb066e7041bcaccc61421a20a4829c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTNkNzgwNmNjYjA2NmU3MDQxYmNhY2NjNjE0MjFhMjBhNDgyOWM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-29T08:37:51Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-29T08:37:51Z"}, "message": "Cargo fmt", "tree": {"sha": "52f632d7e82a0dd78a7637f57bb823feb3307960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f632d7e82a0dd78a7637f57bb823feb3307960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b53d7806ccb066e7041bcaccc61421a20a4829c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b53d7806ccb066e7041bcaccc61421a20a4829c", "html_url": "https://github.com/rust-lang/rust/commit/8b53d7806ccb066e7041bcaccc61421a20a4829c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b53d7806ccb066e7041bcaccc61421a20a4829c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af663d8f627420d111b307ed057918dc44b1a7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/af663d8f627420d111b307ed057918dc44b1a7f0", "html_url": "https://github.com/rust-lang/rust/commit/af663d8f627420d111b307ed057918dc44b1a7f0"}], "stats": {"total": 53, "additions": 17, "deletions": 36}, "files": [{"sha": "001f2c8e0f70c1f0d0423ac3b57932fac8019c2d", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=8b53d7806ccb066e7041bcaccc61421a20a4829c", "patch": "@@ -87,9 +87,10 @@ impl CliOptions {\n             if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n                 options.write_mode = Some(write_mode);\n             } else {\n-                return Err(FmtError::from(\n-                    format!(\"Invalid write-mode: {}\", write_mode),\n-                ));\n+                return Err(FmtError::from(format!(\n+                    \"Invalid write-mode: {}\",\n+                    write_mode\n+                )));\n             }\n         }\n "}, {"sha": "576d036d47bef6494f46c07cc01ee867d8d1b950", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=8b53d7806ccb066e7041bcaccc61421a20a4829c", "patch": "@@ -147,9 +147,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let last_subexpr = &subexpr_list[suffix_try_num];\n     let subexpr_list = &subexpr_list[suffix_try_num..subexpr_num - prefix_try_num];\n     let iter = subexpr_list.iter().skip(1).rev().zip(child_shape_iter);\n-    let mut rewrites = iter.map(|(e, shape)| {\n-        rewrite_chain_subexpr(e, total_span, context, shape)\n-    }).collect::<Option<Vec<_>>>()?;\n+    let mut rewrites = iter.map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n+        .collect::<Option<Vec<_>>>()?;\n \n     // Total of all items excluding the last.\n     let extend_last_subexpr = last_line_extendable(&parent_rewrite) && rewrites.is_empty();"}, {"sha": "2e3dadd20660b9d1e68d893fafd719cfead730e2", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=8b53d7806ccb066e7041bcaccc61421a20a4829c", "patch": "@@ -224,9 +224,7 @@ pub fn rewrite_comment(\n     // we should stop now.\n     let num_bare_lines = orig.lines()\n         .map(|line| line.trim())\n-        .filter(|l| {\n-            !(l.starts_with('*') || l.starts_with(\"//\") || l.starts_with(\"/*\"))\n-        })\n+        .filter(|l| !(l.starts_with('*') || l.starts_with(\"//\") || l.starts_with(\"/*\")))\n         .count();\n     if num_bare_lines > 0 && !config.normalize_comments() {\n         return Some(orig.to_owned());"}, {"sha": "ad3bb053de91527bddcbb9c33ee8484d8e155eb5", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8b53d7806ccb066e7041bcaccc61421a20a4829c", "patch": "@@ -292,9 +292,7 @@ pub fn format_expr(\n     };\n \n     expr_rw\n-        .and_then(|expr_str| {\n-            recover_comment_removed(expr_str, expr.span, context)\n-        })\n+        .and_then(|expr_str| recover_comment_removed(expr_str, expr.span, context))\n         .and_then(|expr_str| {\n             let attrs = outer_attributes(&expr.attrs);\n             let attrs_str = attrs.rewrite(context, shape)?;\n@@ -1925,9 +1923,7 @@ where\n         config: context.config,\n     };\n \n-    write_list(&item_vec, &fmt).map(|args_str| {\n-        (tactic != DefinitiveListTactic::Vertical, args_str)\n-    })\n+    write_list(&item_vec, &fmt).map(|args_str| (tactic != DefinitiveListTactic::Vertical, args_str))\n }\n \n fn try_overflow_last_arg<'a, T>("}, {"sha": "6285811e79e28e6b2dfd0ad592503e508ec9bb8b", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8b53d7806ccb066e7041bcaccc61421a20a4829c", "patch": "@@ -817,8 +817,7 @@ fn format_impl_ref_and_type(\n             IndentStyle::Visual => new_line_offset + trait_ref_overhead,\n             IndentStyle::Block => new_line_offset,\n         };\n-        result.push_str(&*self_ty\n-            .rewrite(context, Shape::legacy(budget, type_offset))?);\n+        result.push_str(&*self_ty.rewrite(context, Shape::legacy(budget, type_offset))?);\n         Some(result)\n     } else {\n         unreachable!();\n@@ -1578,9 +1577,7 @@ fn rewrite_static(\n             lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n-        ).and_then(|res| {\n-            recover_comment_removed(res, static_parts.span, context)\n-        })\n+        ).and_then(|res| recover_comment_removed(res, static_parts.span, context))\n             .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n     } else {\n         Some(format!(\"{}{};\", prefix, ty_str))\n@@ -2096,18 +2093,14 @@ fn rewrite_args(\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n     let mut arg_item_strs = args.iter()\n-        .map(|arg| {\n-            arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n-        })\n+        .map(|arg| arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent)))\n         .collect::<Option<Vec<_>>>()?;\n \n     // Account for sugary self.\n     // FIXME: the comment for the self argument is dropped. This is blocked\n     // on rust issue #27522.\n     let min_args = explicit_self\n-        .and_then(|explicit_self| {\n-            rewrite_explicit_self(explicit_self, args, context)\n-        })\n+        .and_then(|explicit_self| rewrite_explicit_self(explicit_self, args, context))\n         .map_or(1, |self_str| {\n             arg_item_strs[0] = self_str;\n             2\n@@ -2326,9 +2319,8 @@ fn rewrite_generics(\n ) -> Option<String> {\n     let g_shape = generics_shape_from_config(context.config, shape, 0)?;\n     let one_line_width = shape.width.checked_sub(2).unwrap_or(0);\n-    rewrite_generics_inner(context, generics, g_shape, one_line_width, span).or_else(|| {\n-        rewrite_generics_inner(context, generics, g_shape, 0, span)\n-    })\n+    rewrite_generics_inner(context, generics, g_shape, one_line_width, span)\n+        .or_else(|| rewrite_generics_inner(context, generics, g_shape, 0, span))\n }\n \n fn rewrite_generics_inner("}, {"sha": "00d62aeeff702d4b065a7ee27df5414674be0f02", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b53d7806ccb066e7041bcaccc61421a20a4829c/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8b53d7806ccb066e7041bcaccc61421a20a4829c", "patch": "@@ -109,9 +109,7 @@ impl<'a> FmtVisitor<'a> {\n         if self.config.remove_blank_lines_at_start_or_end_of_block() {\n             if let Some(first_stmt) = b.stmts.first() {\n                 let attr_lo = inner_attrs\n-                    .and_then(|attrs| {\n-                        inner_attributes(attrs).first().map(|attr| attr.span.lo())\n-                    })\n+                    .and_then(|attrs| inner_attributes(attrs).first().map(|attr| attr.span.lo()))\n                     .or_else(|| {\n                         // Attributes for an item in a statement position\n                         // do not belong to the statement. (rust-lang/rust#34459)\n@@ -872,10 +870,7 @@ fn rewrite_first_group_attrs(\n             for derive in derives {\n                 derive_args.append(&mut get_derive_args(context, derive)?);\n             }\n-            return Some((\n-                derives.len(),\n-                format_derive(context, &derive_args, shape)?,\n-            ));\n+            return Some((derives.len(), format_derive(context, &derive_args, shape)?));\n         }\n     }\n     // Rewrite the first attribute."}]}