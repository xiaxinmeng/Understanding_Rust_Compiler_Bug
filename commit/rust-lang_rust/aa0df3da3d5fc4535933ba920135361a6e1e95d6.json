{"sha": "aa0df3da3d5fc4535933ba920135361a6e1e95d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMGRmM2RhM2Q1ZmM0NTM1OTMzYmE5MjAxMzUzNjFhNmUxZTk1ZDY=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-06T18:38:54Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T18:36:10Z"}, "message": "get the old error messages back\n- added some old code that used ExplicitSelf::determine to check for eqtype with the expected self type in the simple cases\n- this fixes problems with error messages being worse in those cases, which caused some compile-fail tests to fail", "tree": {"sha": "53f8ce607c4eac49e666abd6639c9bc9388d413d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53f8ce607c4eac49e666abd6639c9bc9388d413d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa0df3da3d5fc4535933ba920135361a6e1e95d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0df3da3d5fc4535933ba920135361a6e1e95d6", "html_url": "https://github.com/rust-lang/rust/commit/aa0df3da3d5fc4535933ba920135361a6e1e95d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa0df3da3d5fc4535933ba920135361a6e1e95d6/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03eb2cc2d5581bc1fab13bd8e0c6bdef5f00b11", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03eb2cc2d5581bc1fab13bd8e0c6bdef5f00b11", "html_url": "https://github.com/rust-lang/rust/commit/d03eb2cc2d5581bc1fab13bd8e0c6bdef5f00b11"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "a75f35be1f349f5a85a50f1045134aba4268da90", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa0df3da3d5fc4535933ba920135361a6e1e95d6/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0df3da3d5fc4535933ba920135361a6e1e95d6/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=aa0df3da3d5fc4535933ba920135361a6e1e95d6", "patch": "@@ -491,17 +491,40 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n                 .code(\"E0307\".into())\n                 .emit();\n-                return\n+                break\n             }\n         }\n \n-        if let ExplicitSelf::Other = ExplicitSelf::determine(fcx, fcx.param_env, self_ty, self_arg_ty) {\n+        let self_kind = ExplicitSelf::determine(fcx, fcx.param_env, self_ty, self_arg_ty);\n+\n+        if let ExplicitSelf::Other = self_kind {\n             if !fcx.tcx.sess.features.borrow().arbitrary_self_types {\n                 feature_gate::feature_err(&fcx.tcx.sess.parse_sess, \"arbitrary_self_types\", span,\n                     GateIssue::Language, \"arbitrary `self` types are unstable\")\n                 .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n                 .emit();\n-                return\n+            }\n+        } else {\n+            let rcvr_ty = match self_kind {\n+                ExplicitSelf::ByValue => self_ty,\n+                ExplicitSelf::ByReference(region, mutbl) => {\n+                    fcx.tcx.mk_ref(region, ty::TypeAndMut {\n+                        ty: self_ty,\n+                        mutbl,\n+                    })\n+                }\n+                ExplicitSelf::ByBox => fcx.tcx.mk_box(self_ty),\n+                ExplicitSelf::Other => unreachable!(),\n+            };\n+            let rcvr_ty = fcx.normalize_associated_types_in(span, &rcvr_ty);\n+            let rcvr_ty = fcx.liberate_late_bound_regions(method.def_id,\n+                                                        &ty::Binder(rcvr_ty));\n+\n+            debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n+\n+            let cause = fcx.cause(span, ObligationCauseCode::MethodReceiver);\n+            if let Some(mut err) = fcx.demand_eqtype_with_origin(&cause, rcvr_ty, self_arg_ty) {\n+                err.emit();\n             }\n         }\n     }"}]}