{"sha": "e27bae09ca4947ea20520ba7a7f1737559f8dd0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyN2JhZTA5Y2E0OTQ3ZWEyMDUyMGJhN2E3ZjE3Mzc1NTlmOGRkMGY=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2018-08-31T13:15:44Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2018-09-01T10:58:18Z"}, "message": "Remove 'not reporting regions error due to nll' warning", "tree": {"sha": "8e05b1bef1620fdd1573e8c38bc483277c2e262d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e05b1bef1620fdd1573e8c38bc483277c2e262d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e27bae09ca4947ea20520ba7a7f1737559f8dd0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e27bae09ca4947ea20520ba7a7f1737559f8dd0f", "html_url": "https://github.com/rust-lang/rust/commit/e27bae09ca4947ea20520ba7a7f1737559f8dd0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e27bae09ca4947ea20520ba7a7f1737559f8dd0f/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1114ab684fbad001c4e580326d8eb4d8c4e917d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1114ab684fbad001c4e580326d8eb4d8c4e917d3", "html_url": "https://github.com/rust-lang/rust/commit/1114ab684fbad001c4e580326d8eb4d8c4e917d3"}], "stats": {"total": 43, "additions": 10, "deletions": 33}, "files": [{"sha": "ac6a7f0c2baa8ff7d2ae1e968b35295670004f1e", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e27bae09ca4947ea20520ba7a7f1737559f8dd0f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e27bae09ca4947ea20520ba7a7f1737559f8dd0f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e27bae09ca4947ea20520ba7a7f1737559f8dd0f", "patch": "@@ -68,6 +68,7 @@ use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n use ty::{self, subst::Subst, Region, Ty, TyCtxt, TypeFoldable, TyKind};\n use ty::error::TypeError;\n+use session::config::BorrowckMode;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n@@ -303,40 +304,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n-        if will_later_be_reported_by_nll &&\n-            // FIXME: `use_mir_borrowck` seems wrong here...\n-            self.tcx.use_mir_borrowck() &&\n-            // ... this is a band-aid; may be better to explicitly\n-            // match on every borrowck_mode variant to guide decision\n-            // here.\n-            !self.tcx.migrate_borrowck() {\n-\n-            // With `#![feature(nll)]`, we want to present a nice user\n-            // experience, so don't even mention the errors from the\n-            // AST checker.\n-            if self.tcx.features().nll {\n-                return;\n+        // If the errors will later be reported by NLL, choose wether to display them or not based\n+        // on the borrowck mode\n+        if will_later_be_reported_by_nll {\n+            match self.tcx.borrowck_mode() {\n+                // If we're on AST or Migrate mode, report AST region errors\n+                BorrowckMode::Ast | BorrowckMode::Migrate => {},\n+                // If we're on MIR or Compare mode, don't report AST region errors as they should\n+                // be reported by NLL\n+                BorrowckMode::Compare | BorrowckMode::Mir => return,\n             }\n-\n-            // But with nll, it's nice to have some note for later.\n-            for error in errors {\n-                match *error {\n-                    RegionResolutionError::ConcreteFailure(ref origin, ..)\n-                    | RegionResolutionError::GenericBoundFailure(ref origin, ..) => {\n-                        self.tcx\n-                            .sess\n-                            .span_warn(origin.span(), \"not reporting region error due to nll\");\n-                    }\n-\n-                    RegionResolutionError::SubSupConflict(ref rvo, ..) => {\n-                        self.tcx\n-                            .sess\n-                            .span_warn(rvo.span(), \"not reporting region error due to nll\");\n-                    }\n-                }\n-            }\n-\n-            return;\n         }\n \n         // try to pre-process the errors, which will group some of them"}]}