{"sha": "d28e948b92d85b5b93f48075d010f799cf9642b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOGU5NDhiOTJkODViNWI5M2Y0ODA3NWQwMTBmNzk5Y2Y5NjQyYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-11T22:13:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-11T22:13:10Z"}, "message": "Auto merge of #60748 - Centril:rollup-rr63jqo, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #60720 (Remove unnecessary unwraps)\n - #60727 (add comment to `Rc`/`Arc`'s `Eq` specialization)\n - #60733 (Cleanup the .await HIR lowering with .stmt(..).)\n - #60741 (Remove redundant \"let mut\" in write_graph_label)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ebd4206ec6ca498170c3511da2707bf0c09f66d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd4206ec6ca498170c3511da2707bf0c09f66d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28e948b92d85b5b93f48075d010f799cf9642b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28e948b92d85b5b93f48075d010f799cf9642b6", "html_url": "https://github.com/rust-lang/rust/commit/d28e948b92d85b5b93f48075d010f799cf9642b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28e948b92d85b5b93f48075d010f799cf9642b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af98304b9a006e2f9a367b1f79dd7655f243c150", "url": "https://api.github.com/repos/rust-lang/rust/commits/af98304b9a006e2f9a367b1f79dd7655f243c150", "html_url": "https://github.com/rust-lang/rust/commit/af98304b9a006e2f9a367b1f79dd7655f243c150"}, {"sha": "f2dd97cc34bf8d28f1a6cb7f4b7f6dbcd7e3e824", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2dd97cc34bf8d28f1a6cb7f4b7f6dbcd7e3e824", "html_url": "https://github.com/rust-lang/rust/commit/f2dd97cc34bf8d28f1a6cb7f4b7f6dbcd7e3e824"}], "stats": {"total": 81, "additions": 47, "deletions": 34}, "files": [{"sha": "0dffb19476f3d318dc64968dd31d11663fededd7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d28e948b92d85b5b93f48075d010f799cf9642b6", "patch": "@@ -932,6 +932,11 @@ impl<T: ?Sized + PartialEq> RcEqIdent<T> for Rc<T> {\n     }\n }\n \n+/// We're doing this specialization here, and not as a more general optimization on `&T`, because it\n+/// would otherwise add a cost to all equality checks on refs. We assume that `Rc`s are used to\n+/// store large values, that are slow to clone, but also heavy to check for equality, causing this\n+/// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to\n+/// the same value, than two `&T`s.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Eq> RcEqIdent<T> for Rc<T> {\n     #[inline]"}, {"sha": "90c7859b3db9ec457acdbc4f0b0f67fea0f105bf", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=d28e948b92d85b5b93f48075d010f799cf9642b6", "patch": "@@ -1377,6 +1377,11 @@ impl<T: ?Sized + PartialEq> ArcEqIdent<T> for Arc<T> {\n     }\n }\n \n+/// We're doing this specialization here, and not as a more general optimization on `&T`, because it\n+/// would otherwise add a cost to all equality checks on refs. We assume that `Arc`s are used to\n+/// store large values, that are slow to clone, but also heavy to check for equality, causing this\n+/// cost to pay off more easily. It's also more likely to have two `Arc` clones, that point to\n+/// the same value, than two `&T`s.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Eq> ArcEqIdent<T> for Arc<T> {\n     #[inline]"}, {"sha": "1612e0a6e9df3dd19bfb6acd6011226730fb3886", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d28e948b92d85b5b93f48075d010f799cf9642b6", "patch": "@@ -5647,11 +5647,7 @@ impl<'a> LoweringContext<'a> {\n                 hir_vec![ready_arm, pending_arm],\n                 hir::MatchSource::AwaitDesugar,\n             ));\n-            hir::Stmt {\n-                hir_id: self.next_id(),\n-                node: hir::StmtKind::Expr(match_expr),\n-                span,\n-            }\n+            self.stmt(span, hir::StmtKind::Expr(match_expr))\n         };\n \n         let yield_stmt = {\n@@ -5661,11 +5657,7 @@ impl<'a> LoweringContext<'a> {\n                 hir::ExprKind::Yield(P(unit)),\n                 ThinVec::new(),\n             ));\n-            hir::Stmt {\n-                hir_id: self.next_id(),\n-                node: hir::StmtKind::Expr(yield_expr),\n-                span,\n-            }\n+            self.stmt(span, hir::StmtKind::Expr(yield_expr))\n         };\n \n         let loop_block = P(self.block_all("}, {"sha": "188da9a82dc995a07c85e1119c51b3a3894a3807", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=d28e948b92d85b5b93f48075d010f799cf9642b6", "patch": "@@ -167,7 +167,7 @@ fn write_graph_label<'a, 'gcx, 'tcx, W: Write>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             write!(w, r#\"{:?}: {}; // {}<br align=\"left\"/>\"#,\n                    Place::Base(PlaceBase::Local(local)), escape(&decl.ty), name)?;\n         } else {\n-            write!(w, r#\"let mut {:?}: {};<br align=\"left\"/>\"#,\n+            write!(w, r#\"{:?}: {};<br align=\"left\"/>\"#,\n                    Place::Base(PlaceBase::Local(local)), escape(&decl.ty))?;\n         }\n     }"}, {"sha": "77d2ffab8efb4e1bb32c8b9a64f52afe2c9b10f8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28e948b92d85b5b93f48075d010f799cf9642b6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d28e948b92d85b5b93f48075d010f799cf9642b6", "patch": "@@ -91,14 +91,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     CandidateSource::ImplSource(impl_did) => {\n                         // Provide the best span we can. Use the item, if local to crate, else\n                         // the impl, if local to crate (item may be defaulted), else nothing.\n-                        let item = self.associated_item(impl_did, item_name, Namespace::Value)\n-                            .or_else(|| {\n-                                self.associated_item(\n-                                    self.tcx.impl_trait_ref(impl_did).unwrap().def_id,\n-                                    item_name,\n-                                    Namespace::Value,\n-                                )\n-                            }).unwrap();\n+                        let item = match self.associated_item(\n+                            impl_did,\n+                            item_name,\n+                            Namespace::Value,\n+                        ).or_else(|| {\n+                            let impl_trait_ref = self.tcx.impl_trait_ref(impl_did)?;\n+                            self.associated_item(\n+                                impl_trait_ref.def_id,\n+                                item_name,\n+                                Namespace::Value,\n+                            )\n+                        }) {\n+                            Some(item) => item,\n+                            None => continue,\n+                        };\n                         let note_span = self.tcx.hir().span_if_local(item.def_id).or_else(|| {\n                             self.tcx.hir().span_if_local(impl_did)\n                         });\n@@ -132,9 +139,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n-                        let item = self\n-                            .associated_item(trait_did, item_name, Namespace::Value)\n-                            .unwrap();\n+                        let item = match self.associated_item(\n+                            trait_did,\n+                            item_name,\n+                            Namespace::Value)\n+                        {\n+                            Some(item) => item,\n+                            None => continue,\n+                        };\n                         let item_span = self.tcx.sess.source_map()\n                             .def_span(self.tcx.def_span(item.def_id));\n                         if sources.len() > 1 {\n@@ -251,8 +263,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 if let &QPath::Resolved(_, ref path) = &qpath {\n                                     if let hir::def::Res::Local(hir_id) = path.res {\n                                         let span = tcx.hir().span_by_hir_id(hir_id);\n-                                        let snippet = tcx.sess.source_map().span_to_snippet(span)\n-                                            .unwrap();\n+                                        let snippet = tcx.sess.source_map().span_to_snippet(span);\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                                         let parent_node = self.tcx.hir().get_by_hir_id(\n@@ -263,12 +274,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             concrete_type,\n                                         );\n \n-                                        match (filename, parent_node) {\n+                                        match (filename, parent_node, snippet) {\n                                             (FileName::Real(_), Node::Local(hir::Local {\n                                                 source: hir::LocalSource::Normal,\n                                                 ty,\n                                                 ..\n-                                            })) => {\n+                                            }), Ok(ref snippet)) => {\n                                                 err.span_suggestion(\n                                                     // account for `let x: _ = 42;`\n                                                     //                  ^^^^\n@@ -375,14 +386,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n                                 );\n \n-                                let span = call_expr.span.trim_start(item_name.span).unwrap();\n-\n-                                err.span_suggestion(\n-                                    span,\n-                                    \"remove the arguments\",\n-                                    String::new(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                if let Some(span) = call_expr.span.trim_start(item_name.span) {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"remove the arguments\",\n+                                        String::new(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             }\n                         }\n "}]}