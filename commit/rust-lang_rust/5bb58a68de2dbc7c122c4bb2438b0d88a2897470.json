{"sha": "5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "node_id": "C_kwDOAAsO6NoAKDViYjU4YTY4ZGUyZGJjN2MxMjJjNGJiMjQzOGIwZDg4YTI4OTc0NzA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-16T09:34:53Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-21T22:27:20Z"}, "message": "Make `check_match` and `check_liveness` take a `LocalDefId`", "tree": {"sha": "f3c9643b742fee650b3dd1d58cebfcc90d578cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3c9643b742fee650b3dd1d58cebfcc90d578cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "html_url": "https://github.com/rust-lang/rust/commit/5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce80e210d152619caa99b1bc030f57a352b657a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce80e210d152619caa99b1bc030f57a352b657a", "html_url": "https://github.com/rust-lang/rust/commit/1ce80e210d152619caa99b1bc030f57a352b657a"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "8e8e29fd4cfb74ba0dbea3bd1ce91b226fd7021f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "patch": "@@ -775,7 +775,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                         // \"not all control paths return a value\" is reported here.\n                         //\n                         // maybe move the check to a MIR pass?\n-                        tcx.ensure().check_liveness(def_id.to_def_id());\n+                        tcx.ensure().check_liveness(def_id);\n                     });\n                 });\n             }"}, {"sha": "088c1585e1364ad0afb7d8be49431288ef3e71ef", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "patch": "@@ -832,7 +832,7 @@ rustc_queries! {\n         desc { |tcx| \"checking privacy in {}\", describe_as_module(key, tcx) }\n     }\n \n-    query check_liveness(key: DefId) {\n+    query check_liveness(key: LocalDefId) {\n         desc { |tcx| \"checking liveness of variables in `{}`\", tcx.def_path_str(key) }\n     }\n \n@@ -1021,7 +1021,7 @@ rustc_queries! {\n     }\n \n     query check_match(key: LocalDefId) {\n-        desc { |tcx| \"match-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        desc { |tcx| \"match-checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { true }\n     }\n "}, {"sha": "cd1dcb315cfdc04170c8d2422d9b11b3034cfc87", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb58a68de2dbc7c122c4bb2438b0d88a2897470/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "patch": "@@ -90,7 +90,7 @@ use rustc_errors::Applicability;\n use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n use rustc_index::vec::IndexVec;\n@@ -137,27 +137,22 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-fn check_liveness(tcx: TyCtxt<'_>, def_id: DefId) {\n-    let local_def_id = match def_id.as_local() {\n-        None => return,\n-        Some(def_id) => def_id,\n-    };\n-\n+fn check_liveness(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     // Don't run unused pass for #[derive()]\n-    let parent = tcx.local_parent(local_def_id);\n+    let parent = tcx.local_parent(def_id);\n     if let DefKind::Impl { .. } = tcx.def_kind(parent)\n         && tcx.has_attr(parent, sym::automatically_derived)\n     {\n         return;\n     }\n \n     // Don't run unused pass for #[naked]\n-    if tcx.has_attr(def_id, sym::naked) {\n+    if tcx.has_attr(def_id.to_def_id(), sym::naked) {\n         return;\n     }\n \n     let mut maps = IrMaps::new(tcx);\n-    let body_id = tcx.hir().body_owned_by(local_def_id);\n+    let body_id = tcx.hir().body_owned_by(def_id);\n     let hir_id = tcx.hir().body_owner(body_id);\n     let body = tcx.hir().body(body_id);\n \n@@ -173,7 +168,7 @@ fn check_liveness(tcx: TyCtxt<'_>, def_id: DefId) {\n     maps.visit_body(body);\n \n     // compute liveness\n-    let mut lsets = Liveness::new(&mut maps, local_def_id);\n+    let mut lsets = Liveness::new(&mut maps, def_id);\n     let entry_ln = lsets.compute(&body, hir_id);\n     lsets.log_liveness(entry_ln, body_id.hir_id);\n "}]}