{"sha": "961974fe0348f479255f9e95b5924419c2c15a77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MTk3NGZlMDM0OGY0NzkyNTVmOWU5NWI1OTI0NDE5YzJjMTVhNzc=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-02T22:56:27Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-11T16:48:32Z"}, "message": "Use enum to distinguish dependency type", "tree": {"sha": "e1ca6b3b9437a211fa66189104418b267fe67d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1ca6b3b9437a211fa66189104418b267fe67d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/961974fe0348f479255f9e95b5924419c2c15a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/961974fe0348f479255f9e95b5924419c2c15a77", "html_url": "https://github.com/rust-lang/rust/commit/961974fe0348f479255f9e95b5924419c2c15a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/961974fe0348f479255f9e95b5924419c2c15a77/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638ebbc5859a38794408a988ffec6f54e0dc0f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/638ebbc5859a38794408a988ffec6f54e0dc0f0b", "html_url": "https://github.com/rust-lang/rust/commit/638ebbc5859a38794408a988ffec6f54e0dc0f0b"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "5fae7277149d2f0d5da99c28e59182fd74749cea", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/961974fe0348f479255f9e95b5924419c2c15a77/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961974fe0348f479255f9e95b5924419c2c15a77/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=961974fe0348f479255f9e95b5924419c2c15a77", "patch": "@@ -23,7 +23,7 @@ use crate::builder::Cargo;\n use crate::dist;\n use crate::native;\n use crate::util::{exe, is_dylib, symlink_dir};\n-use crate::{Compiler, GitRepo, Mode};\n+use crate::{Compiler, DependencyType, GitRepo, Mode};\n \n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n@@ -84,7 +84,7 @@ impl Step for Std {\n             return;\n         }\n \n-        target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n+        target_deps.extend(copy_third_party_objects(builder, &compiler, target));\n         target_deps.extend(copy_self_contained_objects(builder, &compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n@@ -116,7 +116,8 @@ fn copy_and_stamp(\n     libdir: &Path,\n     sourcedir: &Path,\n     name: &str,\n-    target_deps: &mut Vec<PathBuf>,\n+    target_deps: &mut Vec<(PathBuf, DependencyType)>,\n+    dependency_type: DependencyType,\n ) {\n     let target = libdir.join(name);\n     builder.copy(&sourcedir.join(name), &target);\n@@ -129,7 +130,7 @@ fn copy_third_party_objects(\n     builder: &Builder<'_>,\n     compiler: &Compiler,\n     target: Interned<String>,\n-) -> Vec<PathBuf> {\n+) -> Vec<(PathBuf, DependencyType)> {\n     let libdir = builder.sysroot_libdir(*compiler, target);\n     let mut target_deps = vec![];\n \n@@ -148,13 +149,18 @@ fn copy_third_party_objects(\n             Path::new(&src),\n             \"libunwind.a\",\n             &mut target_deps,\n+            DependencyType::Target,\n         );\n     }\n \n     if builder.config.sanitizers && compiler.stage != 0 {\n         // The sanitizers are only copied in stage1 or above,\n         // to avoid creating dependency on LLVM.\n-        target_deps.extend(copy_sanitizers(builder, &compiler, target));\n+        target_deps.extend(\n+            copy_sanitizers(builder, &compiler, target)\n+                .into_iter()\n+                .map(|d| (d, DependencyType::Target)),\n+        );\n     }\n \n     target_deps\n@@ -165,7 +171,7 @@ fn copy_self_contained_objects(\n     builder: &Builder<'_>,\n     compiler: &Compiler,\n     target: Interned<String>,\n-) -> Vec<PathBuf> {\n+) -> Vec<(PathBuf, DependencyType)> {\n     let libdir = builder.sysroot_libdir(*compiler, target);\n     let mut target_deps = vec![];\n \n@@ -185,6 +191,7 @@ fn copy_self_contained_objects(\n                 &srcdir,\n                 obj,\n                 &mut target_deps,\n+                DependencyType::TargetSelfContained,\n             );\n         }\n     } else if target.ends_with(\"-wasi\") {\n@@ -195,13 +202,14 @@ fn copy_self_contained_objects(\n             &srcdir,\n             \"crt1.o\",\n             &mut target_deps,\n+            DependencyType::TargetSelfContained,\n         );\n     } else if target.contains(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n             let src = compiler_file(builder, builder.cc(target), target, obj);\n             let target = libdir.join(obj);\n             builder.copy(&src, &target);\n-            target_deps.push(target);\n+            target_deps.push((target, DependencyType::TargetSelfContained));\n         }\n     }\n \n@@ -370,7 +378,7 @@ pub struct StartupObjects {\n }\n \n impl Step for StartupObjects {\n-    type Output = Vec<PathBuf>;\n+    type Output = Vec<(PathBuf, DependencyType)>;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.path(\"src/rtstartup\")\n@@ -389,7 +397,7 @@ impl Step for StartupObjects {\n     /// They don't require any library support as they're just plain old object\n     /// files, so we just use the nightly snapshot compiler to always build them (as\n     /// no other compilers are guaranteed to be available).\n-    fn run(self, builder: &Builder<'_>) -> Vec<PathBuf> {\n+    fn run(self, builder: &Builder<'_>) -> Vec<(PathBuf, DependencyType)> {\n         let for_compiler = self.compiler;\n         let target = self.target;\n         if !target.contains(\"windows-gnu\") {\n@@ -423,7 +431,7 @@ impl Step for StartupObjects {\n \n             let target = sysroot_dir.join((*file).to_string() + \".o\");\n             builder.copy(dst_file, &target);\n-            target_deps.push(target);\n+            target_deps.push((target, DependencyType::Target));\n         }\n \n         target_deps\n@@ -838,8 +846,8 @@ pub fn add_to_sysroot(\n ) {\n     t!(fs::create_dir_all(&sysroot_dst));\n     t!(fs::create_dir_all(&sysroot_host_dst));\n-    for (path, host) in builder.read_stamp_file(stamp) {\n-        if host {\n+    for (path, dependency_type) in builder.read_stamp_file(stamp) {\n+        if dependency_type == DependencyType::Host {\n             builder.copy(&path, &sysroot_host_dst.join(path.file_name().unwrap()));\n         } else {\n             builder.copy(&path, &sysroot_dst.join(path.file_name().unwrap()));\n@@ -852,7 +860,7 @@ pub fn run_cargo(\n     cargo: Cargo,\n     tail_args: Vec<String>,\n     stamp: &Path,\n-    additional_target_deps: Vec<PathBuf>,\n+    additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n ) -> Vec<PathBuf> {\n     if builder.config.dry_run {\n@@ -903,15 +911,15 @@ pub fn run_cargo(\n             if filename.starts_with(&host_root_dir) {\n                 // Unless it's a proc macro used in the compiler\n                 if crate_types.iter().any(|t| t == \"proc-macro\") {\n-                    deps.push((filename.to_path_buf(), true));\n+                    deps.push((filename.to_path_buf(), DependencyType::Host));\n                 }\n                 continue;\n             }\n \n             // If this was output in the `deps` dir then this is a precise file\n             // name (hash included) so we start tracking it.\n             if filename.starts_with(&target_deps_dir) {\n-                deps.push((filename.to_path_buf(), false));\n+                deps.push((filename.to_path_buf(), DependencyType::Target));\n                 continue;\n             }\n \n@@ -963,17 +971,21 @@ pub fn run_cargo(\n             let candidate = format!(\"{}.lib\", path_to_add);\n             let candidate = PathBuf::from(candidate);\n             if candidate.exists() {\n-                deps.push((candidate, false));\n+                deps.push((candidate, DependencyType::Target));\n             }\n         }\n-        deps.push((path_to_add.into(), false));\n+        deps.push((path_to_add.into(), DependencyType::Target));\n     }\n \n-    deps.extend(additional_target_deps.into_iter().map(|d| (d, false)));\n+    deps.extend(additional_target_deps);\n     deps.sort();\n     let mut new_contents = Vec::new();\n-    for (dep, proc_macro) in deps.iter() {\n-        new_contents.extend(if *proc_macro { b\"h\" } else { b\"t\" });\n+    for (dep, dependency_type) in deps.iter() {\n+        new_contents.extend(match *dependency_type {\n+            DependencyType::Host => b\"h\",\n+            DependencyType::Target => b\"t\",\n+            DependencyType::TargetSelfContained => b\"s\",\n+        });\n         new_contents.extend(dep.to_str().unwrap().as_bytes());\n         new_contents.extend(b\"\\0\");\n     }"}, {"sha": "77dd9c784badf20071d3e60ed858d708c273c8a6", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/961974fe0348f479255f9e95b5924419c2c15a77/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961974fe0348f479255f9e95b5924419c2c15a77/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=961974fe0348f479255f9e95b5924419c2c15a77", "patch": "@@ -22,7 +22,7 @@ use crate::channel;\n use crate::compile;\n use crate::tool::{self, Tool};\n use crate::util::{exe, is_dylib, timeit};\n-use crate::{Compiler, Mode, LLVM_TOOLS};\n+use crate::{Compiler, DependencyType, Mode, LLVM_TOOLS};\n use time::{self, Timespec};\n \n pub fn pkgname(builder: &Builder<'_>, component: &str) -> String {\n@@ -651,8 +651,8 @@ fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n     let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n     t!(fs::create_dir_all(&dst));\n-    for (path, host) in builder.read_stamp_file(stamp) {\n-        if !host || builder.config.build == target {\n+    for (path, dependency_type) in builder.read_stamp_file(stamp) {\n+        if dependency_type != DependencyType::Host || builder.config.build == target {\n             builder.copy(&path, &dst.join(path.file_name().unwrap()));\n         }\n     }"}, {"sha": "db861cb7013713c040677ba0ffbfaf37a4ded2c6", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/961974fe0348f479255f9e95b5924419c2c15a77/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/961974fe0348f479255f9e95b5924419c2c15a77/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=961974fe0348f479255f9e95b5924419c2c15a77", "patch": "@@ -280,6 +280,17 @@ impl Crate {\n     }\n }\n \n+/// When building Rust various objects are handled differently.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+pub enum DependencyType {\n+    /// Libraries originating from proc-macros.\n+    Host,\n+    /// Typical Rust libraries.\n+    Target,\n+    /// Non Rust libraries and objects shipped to ease usage of certain targets.\n+    TargetSelfContained,\n+}\n+\n /// The various \"modes\" of invoking Cargo.\n ///\n /// These entries currently correspond to the various output directories of the\n@@ -1097,7 +1108,7 @@ impl Build {\n         ret\n     }\n \n-    fn read_stamp_file(&self, stamp: &Path) -> Vec<(PathBuf, bool)> {\n+    fn read_stamp_file(&self, stamp: &Path) -> Vec<(PathBuf, DependencyType)> {\n         if self.config.dry_run {\n             return Vec::new();\n         }\n@@ -1110,9 +1121,14 @@ impl Build {\n             if part.is_empty() {\n                 continue;\n             }\n-            let host = part[0] as char == 'h';\n+            let dependency_type = match part[0] as char {\n+                'h' => DependencyType::Host,\n+                's' => DependencyType::TargetSelfContained,\n+                't' => DependencyType::Target,\n+                _ => unreachable!(),\n+            };\n             let path = PathBuf::from(t!(str::from_utf8(&part[1..])));\n-            paths.push((path, host));\n+            paths.push((path, dependency_type));\n         }\n         paths\n     }"}]}