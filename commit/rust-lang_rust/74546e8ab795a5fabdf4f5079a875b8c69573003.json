{"sha": "74546e8ab795a5fabdf4f5079a875b8c69573003", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NTQ2ZThhYjc5NWE1ZmFiZGY0ZjUwNzlhODc1YjhjNjk1NzMwMDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-30T23:34:59Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-30T23:34:59Z"}, "message": "Rollup merge of #32494 - pnkfelix:gate-parser-recovery-via-debugflag, r=nrc\n\nGate parser recovery via debugflag\n\nGate parser recovery via debugflag\n\nPut in `-Z continue_parse_after_error`\n\nThis works by adding a method, `fn abort_if_no_parse_recovery`, to the\ndiagnostic handler in `syntax::errors`, and calling it after each\nerror is emitted in the parser.\n\n(We might consider adding a debugflag to do such aborts in other\nplaces where we are currently attempting recovery, such as resolve,\nbut I think the parser is the really important case to handle in the\nface of #31994 and the parser bugs of varying degrees that were\ninjected by parse error recovery.)\n\nr? @nikomatsakis", "tree": {"sha": "5693f2f5a1012e27364f689c03f988afaf8d38a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5693f2f5a1012e27364f689c03f988afaf8d38a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74546e8ab795a5fabdf4f5079a875b8c69573003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74546e8ab795a5fabdf4f5079a875b8c69573003", "html_url": "https://github.com/rust-lang/rust/commit/74546e8ab795a5fabdf4f5079a875b8c69573003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74546e8ab795a5fabdf4f5079a875b8c69573003/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9957081e78643aafab55f35c96d7c08936521dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9957081e78643aafab55f35c96d7c08936521dea", "html_url": "https://github.com/rust-lang/rust/commit/9957081e78643aafab55f35c96d7c08936521dea"}, {"sha": "e1d8ad3fb0a1fc764bd2b117141ee94ef78460e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d8ad3fb0a1fc764bd2b117141ee94ef78460e6", "html_url": "https://github.com/rust-lang/rust/commit/e1d8ad3fb0a1fc764bd2b117141ee94ef78460e6"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "eba3332c8f7132e3a6ffa55338b0ef4e6065b996", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -136,6 +136,7 @@ pub struct Options {\n     pub no_trans: bool,\n     pub error_format: ErrorOutputType,\n     pub treat_err_as_bug: bool,\n+    pub continue_parse_after_error: bool,\n     pub mir_opt_level: usize,\n \n     /// if true, build up the dep-graph\n@@ -257,6 +258,7 @@ pub fn basic_options() -> Options {\n         parse_only: false,\n         no_trans: false,\n         treat_err_as_bug: false,\n+        continue_parse_after_error: false,\n         mir_opt_level: 1,\n         build_dep_graph: false,\n         dump_dep_graph: false,\n@@ -631,6 +633,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool,\n           \"treat all errors that occur as bugs\"),\n+    continue_parse_after_error: bool = (false, parse_bool,\n+          \"attempt to recover from parse errors (experimental)\"),\n     incr_comp: bool = (false, parse_bool,\n           \"enable incremental compilation (experimental)\"),\n     dump_dep_graph: bool = (false, parse_bool,\n@@ -1045,6 +1049,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n     let treat_err_as_bug = debugging_opts.treat_err_as_bug;\n+    let continue_parse_after_error = debugging_opts.continue_parse_after_error;\n     let mir_opt_level = debugging_opts.mir_opt_level.unwrap_or(1);\n     let incremental_compilation = debugging_opts.incr_comp;\n     let dump_dep_graph = debugging_opts.dump_dep_graph;\n@@ -1224,6 +1229,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         parse_only: parse_only,\n         no_trans: no_trans,\n         treat_err_as_bug: treat_err_as_bug,\n+        continue_parse_after_error: continue_parse_after_error,\n         mir_opt_level: mir_opt_level,\n         build_dep_graph: incremental_compilation || dump_dep_graph,\n         dump_dep_graph: dump_dep_graph,"}, {"sha": "a0752852dc3d858bfd8bf1375279368e46f50353", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -429,6 +429,8 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n     // memory, but they do not restore the initial state.\n     syntax::ext::mtwt::reset_tables();\n     token::reset_ident_interner();\n+    let continue_after_error = sess.opts.continue_parse_after_error;\n+    sess.diagnostic().set_continue_after_error(continue_after_error);\n \n     let krate = time(sess.time_passes(), \"parsing\", || {\n         match *input {\n@@ -444,6 +446,8 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n         }\n     })?;\n \n+    sess.diagnostic().set_continue_after_error(true);\n+\n     if sess.opts.debugging_opts.ast_json_noexpand {\n         println!(\"{}\", json::as_json(&krate));\n     }"}, {"sha": "c8c12d5a883344b32cb999d66122c314cbb4957d", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -370,6 +370,7 @@ pub struct Handler {\n     emit: RefCell<Box<Emitter>>,\n     pub can_emit_warnings: bool,\n     treat_err_as_bug: bool,\n+    continue_after_error: Cell<bool>,\n     delayed_span_bug: RefCell<Option<(MultiSpan, String)>>,\n }\n \n@@ -392,10 +393,15 @@ impl Handler {\n             emit: RefCell::new(e),\n             can_emit_warnings: can_emit_warnings,\n             treat_err_as_bug: treat_err_as_bug,\n+            continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n         }\n     }\n \n+    pub fn set_continue_after_error(&self, continue_after_error: bool) {\n+        self.continue_after_error.set(continue_after_error);\n+    }\n+\n     pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new(&self.emit, Level::Cancelled, \"\")\n     }\n@@ -612,6 +618,7 @@ impl Handler {\n                 lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n         self.emit.borrow_mut().emit(msp, msg, None, lvl);\n+        if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n     pub fn emit_with_code(&self,\n                           msp: Option<&MultiSpan>,\n@@ -620,10 +627,12 @@ impl Handler {\n                           lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n         self.emit.borrow_mut().emit(msp, msg, Some(code), lvl);\n+        if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n     pub fn custom_emit(&self, rsp: RenderSpan, msg: &str, lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n         self.emit.borrow_mut().custom_emit(&rsp, msg, lvl);\n+        if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n }\n "}, {"sha": "9cbe2ebffe694eaf83a117d224ad3df92870072e", "filename": "src/test/compile-fail/issue-12560-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fissue-12560-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fissue-12560-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12560-2.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n // For style and consistency reasons, non-parametrized enum variants must\n // be used simply as `ident` instead of `ident ()`.\n // This test-case covers enum matching."}, {"sha": "018a40e28ef32bf90a18b242cf3cdc0648886f8b", "filename": "src/test/compile-fail/issue-28433.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n enum bird {\n     pub duck,\n     //~^ ERROR: expected identifier, found keyword `pub`"}, {"sha": "5cacf8f53c62edbd946eefa1f02d0514a24b54b7", "filename": "src/test/compile-fail/issue-30715.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fissue-30715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fissue-30715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30715.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n macro_rules! parallel {\n     (\n         // If future has `pred`/`moelarry` fragments (where \"pred\" is"}, {"sha": "0d5f9079649c4688631a578df61032167b5a0a05", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n macro_rules! ignored_item {\n     () => {\n         fn foo() {}"}, {"sha": "17b58a9f7c298c385225e184ab802a6bd74d1c40", "filename": "src/test/compile-fail/parse-error-correct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparse-error-correct.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n // Test that the parser is error correcting missing idents. Despite a parsing\n // error (or two), we still run type checking (and don't get extra errors there).\n "}, {"sha": "85b62461238336b5e8bb90c286132d7bbe7e5b72", "filename": "src/test/compile-fail/parser-recovery-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparser-recovery-1.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n // Test that we can recover from missing braces in the parser.\n \n trait Foo {"}, {"sha": "109da6251e37d436d1e3ead96c65b46794e43681", "filename": "src/test/compile-fail/parser-recovery-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fparser-recovery-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fparser-recovery-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparser-recovery-2.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n // Test that we can recover from mismatched braces in the parser.\n \n trait Foo {"}, {"sha": "62966737874070b81e930905d51e87885e39fbdf", "filename": "src/test/compile-fail/self_type_keyword.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fself_type_keyword.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z continue-parse-after-error\n+\n struct Self;\n //~^ ERROR expected identifier, found keyword `Self`\n "}, {"sha": "a8c40225c302132023cb415540154b555011c351", "filename": "src/test/parse-fail/ascii-only-character-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fascii-only-character-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fascii-only-character-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fascii-only-character-escape.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n fn main() {\n     let x = \"\\x80\"; //~ ERROR may only be used"}, {"sha": "96311d6de176c64a824e9364e06db938c7c75a74", "filename": "src/test/parse-fail/bad-char-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n // ignore-tidy-cr\n // ignore-tidy-tab"}, {"sha": "0811a6470247e00ba36cf11aa2d978ce35ce92be", "filename": "src/test/parse-fail/bad-lit-suffixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n \n extern"}, {"sha": "3ecd7780afd84fc61879aed18bd5407d3aabc6bb", "filename": "src/test/parse-fail/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n \n // ignore-tidy-tab"}, {"sha": "4eba9e91ca5f4891e306cc6f59e1615e29cd7449", "filename": "src/test/parse-fail/byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n \n // ignore-tidy-tab"}, {"sha": "b75e7b12bbdc906949f769a1e89619451312d01f", "filename": "src/test/parse-fail/issue-10412.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-10412.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n \n trait Serializable<'self, T> { //~ ERROR no longer a special lifetime"}, {"sha": "821149d1d008771e05e0cf6d60235d9d772356c2", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n fn main() {\n     let _ = b\"\\u{a66e}\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string"}, {"sha": "caacb12d0082df53a723325106e6b206b8a2b24b", "filename": "src/test/parse-fail/lex-bad-binary-literal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bad-binary-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bad-binary-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-binary-literal.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n+\n fn main() {\n     0b121; //~ ERROR invalid digit for a base 2 literal\n     0b10_10301; //~ ERROR invalid digit for a base 2 literal"}, {"sha": "006e3e68d8f2d8a0eefb6b09380cf67cbb91e42f", "filename": "src/test/parse-fail/lex-bad-char-literals-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-char-literals-1.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n static c3: char =\n     '\\x1' //~ ERROR: numeric character escape is too short\n ;"}, {"sha": "bb97b037a0028e879595a2ed4626eed30bba617e", "filename": "src/test/parse-fail/lex-bad-numeric-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bad-numeric-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bad-numeric-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bad-numeric-literals.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n fn main() {\n     0o1.0; //~ ERROR: octal float literal is not supported"}, {"sha": "f894305754319d20880407201cf6f158bfdbbc2a", "filename": "src/test/parse-fail/lex-bare-cr-string-literal-doc-comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bare-cr-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Flex-bare-cr-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bare-cr-string-literal-doc-comment.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n // ignore-tidy-cr\n "}, {"sha": "5615ac8df017df6debf331d3dfa09e19a3c29ac5", "filename": "src/test/parse-fail/new-unicode-escapes-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n pub fn main() {\n     let s = \"\\u{lol}\";"}, {"sha": "cbdf50a7521ac50f0d19a817da1bdcef6873c55a", "filename": "src/test/parse-fail/no-unsafe-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74546e8ab795a5fabdf4f5079a875b8c69573003/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs?ref=74546e8ab795a5fabdf4f5079a875b8c69573003", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n+// compile-flags: -Z parse-only -Z continue-parse-after-error\n \n trait A {\n     fn foo(*mut self); //~ ERROR cannot pass self by raw pointer"}]}