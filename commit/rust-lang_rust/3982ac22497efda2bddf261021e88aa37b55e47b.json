{"sha": "3982ac22497efda2bddf261021e88aa37b55e47b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODJhYzIyNDk3ZWZkYTJiZGRmMjYxMDIxZTg4YWEzN2I1NWU0N2I=", "commit": {"author": {"name": "liudingming", "email": "liudingming@bytedance.com", "date": "2021-04-03T17:40:47Z"}, "committer": {"name": "liudingming", "email": "liudingming@bytedance.com", "date": "2021-04-03T17:40:47Z"}, "message": "Optimize out unneeded type resolving", "tree": {"sha": "1555a1305befafdf6b659922a3b28c8afce33099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1555a1305befafdf6b659922a3b28c8afce33099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3982ac22497efda2bddf261021e88aa37b55e47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3982ac22497efda2bddf261021e88aa37b55e47b", "html_url": "https://github.com/rust-lang/rust/commit/3982ac22497efda2bddf261021e88aa37b55e47b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3982ac22497efda2bddf261021e88aa37b55e47b/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eed8ed9675b264cbacc3e589950368000b2664d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eed8ed9675b264cbacc3e589950368000b2664d", "html_url": "https://github.com/rust-lang/rust/commit/8eed8ed9675b264cbacc3e589950368000b2664d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "e9e810344776b963d52a0eeb85fbd6ecbcc8c376", "filename": "compiler/rustc_typeck/src/check/expectation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3982ac22497efda2bddf261021e88aa37b55e47b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3982ac22497efda2bddf261021e88aa37b55e47b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs?ref=3982ac22497efda2bddf261021e88aa37b55e47b", "patch": "@@ -104,8 +104,8 @@ impl<'a, 'tcx> Expectation<'tcx> {\n     /// for the program to type-check). `only_has_type` will return\n     /// such a constraint, if it exists.\n     pub(super) fn only_has_type(self, fcx: &FnCtxt<'a, 'tcx>) -> Option<Ty<'tcx>> {\n-        match self.resolve(fcx) {\n-            ExpectHasType(ty) => Some(ty),\n+        match self {\n+            ExpectHasType(ty) => Some(fcx.resolve_vars_if_possible(ty)),\n             NoExpectation | ExpectCastableToType(_) | ExpectRvalueLikeUnsized(_) | IsLast(_) => {\n                 None\n             }"}]}