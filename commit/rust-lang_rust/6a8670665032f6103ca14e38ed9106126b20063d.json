{"sha": "6a8670665032f6103ca14e38ed9106126b20063d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhODY3MDY2NTAzMmY2MTAzY2ExNGUzOGVkOTEwNjEyNmIyMDA2M2Q=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-24T21:04:33Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-24T21:05:12Z"}, "message": "Implement the call argument checking order hack for closures", "tree": {"sha": "ff9c2f3c665ef95ebf509dc69ff82d39ec42d176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9c2f3c665ef95ebf509dc69ff82d39ec42d176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a8670665032f6103ca14e38ed9106126b20063d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8670665032f6103ca14e38ed9106126b20063d", "html_url": "https://github.com/rust-lang/rust/commit/6a8670665032f6103ca14e38ed9106126b20063d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a8670665032f6103ca14e38ed9106126b20063d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0aeb6e7ad7385811a4bb75577513339c9a9ed91", "html_url": "https://github.com/rust-lang/rust/commit/a0aeb6e7ad7385811a4bb75577513339c9a9ed91"}], "stats": {"total": 120, "additions": 108, "deletions": 12}, "files": [{"sha": "378d2f829e13a38d0f2aa84c218285954301c93e", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6a8670665032f6103ca14e38ed9106126b20063d/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8670665032f6103ca14e38ed9106126b20063d/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6a8670665032f6103ca14e38ed9106126b20063d", "patch": "@@ -790,11 +790,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         };\n         self.unify(&expected_receiver_ty, &actual_receiver_ty);\n \n-        let param_iter = param_tys.into_iter().chain(repeat(Ty::Unknown));\n-        for (arg, param_ty) in args.iter().zip(param_iter) {\n-            let param_ty = self.normalize_associated_types_in(param_ty);\n-            self.infer_expr(*arg, &Expectation::has_type(param_ty));\n-        }\n+        self.check_call_arguments(args, &param_tys);\n         let ret_ty = self.normalize_associated_types_in(ret_ty);\n         ret_ty\n     }\n@@ -928,11 +924,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     }\n                 };\n                 self.register_obligations_for_call(&callee_ty);\n-                let param_iter = param_tys.into_iter().chain(repeat(Ty::Unknown));\n-                for (arg, param_ty) in args.iter().zip(param_iter) {\n-                    let param_ty = self.normalize_associated_types_in(param_ty);\n-                    self.infer_expr(*arg, &Expectation::has_type(param_ty));\n-                }\n+                self.check_call_arguments(args, &param_tys);\n                 let ret_ty = self.normalize_associated_types_in(ret_ty);\n                 ret_ty\n             }\n@@ -1274,6 +1266,30 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n+    fn check_call_arguments(&mut self, args: &[ExprId], param_tys: &[Ty]) {\n+        // Quoting https://github.com/rust-lang/rust/blob/6ef275e6c3cb1384ec78128eceeb4963ff788dca/src/librustc_typeck/check/mod.rs#L3325 --\n+        // We do this in a pretty awful way: first we type-check any arguments\n+        // that are not closures, then we type-check the closures. This is so\n+        // that we have more information about the types of arguments when we\n+        // type-check the functions. This isn't really the right way to do this.\n+        for &check_closures in &[false, true] {\n+            let param_iter = param_tys.iter().cloned().chain(repeat(Ty::Unknown));\n+            for (&arg, param_ty) in args.iter().zip(param_iter) {\n+                let is_closure = match &self.body[arg] {\n+                    Expr::Lambda { .. } => true,\n+                    _ => false,\n+                };\n+\n+                if is_closure != check_closures {\n+                    continue;\n+                }\n+\n+                let param_ty = self.normalize_associated_types_in(param_ty);\n+                self.infer_expr(arg, &Expectation::has_type(param_ty));\n+            }\n+        }\n+    }\n+\n     fn collect_const(&mut self, data: &ConstData) {\n         self.return_ty = self.make_ty(data.type_ref());\n     }"}, {"sha": "2872cd27babf2139dd58e846cb60bebcbcae3310", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6a8670665032f6103ca14e38ed9106126b20063d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8670665032f6103ca14e38ed9106126b20063d/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6a8670665032f6103ca14e38ed9106126b20063d", "patch": "@@ -4078,6 +4078,86 @@ fn test<F: FnOnce(u32) -> u64>(f: F) {\n     );\n }\n \n+#[test]\n+fn closure_as_argument_inference_order() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang = \"fn_once\"]\n+trait FnOnce<Args> {\n+    type Output;\n+}\n+\n+fn foo1<T, U, F: FnOnce(T) -> U>(x: T, f: F) -> U {}\n+fn foo2<T, U, F: FnOnce(T) -> U>(f: F, x: T) -> U {}\n+\n+struct S;\n+impl S {\n+    fn method(self) -> u64;\n+\n+    fn foo1<T, U, F: FnOnce(T) -> U>(self, x: T, f: F) -> U {}\n+    fn foo2<T, U, F: FnOnce(T) -> U>(self, f: F, x: T) -> U {}\n+}\n+\n+fn test() {\n+    let x1 = foo1(S, |s| s.method());\n+    let x2 = foo2(|s| s.method(), S);\n+    let x3 = S.foo1(S, |s| s.method());\n+    let x4 = S.foo2(|s| s.method(), S);\n+}\n+\"#),\n+        @r###\"\n+    [95; 96) 'x': T\n+    [101; 102) 'f': F\n+    [112; 114) '{}': ()\n+    [148; 149) 'f': F\n+    [154; 155) 'x': T\n+    [165; 167) '{}': ()\n+    [202; 206) 'self': S\n+    [254; 258) 'self': S\n+    [260; 261) 'x': T\n+    [266; 267) 'f': F\n+    [277; 279) '{}': ()\n+    [317; 321) 'self': S\n+    [323; 324) 'f': F\n+    [329; 330) 'x': T\n+    [340; 342) '{}': ()\n+    [356; 515) '{     ... S); }': ()\n+    [366; 368) 'x1': u64\n+    [371; 375) 'foo1': fn foo1<S, u64, |S| -> u64>(T, F) -> U\n+    [371; 394) 'foo1(S...hod())': u64\n+    [376; 377) 'S': S\n+    [379; 393) '|s| s.method()': |S| -> u64\n+    [380; 381) 's': S\n+    [383; 384) 's': S\n+    [383; 393) 's.method()': u64\n+    [404; 406) 'x2': u64\n+    [409; 413) 'foo2': fn foo2<S, u64, |S| -> u64>(F, T) -> U\n+    [409; 432) 'foo2(|...(), S)': u64\n+    [414; 428) '|s| s.method()': |S| -> u64\n+    [415; 416) 's': S\n+    [418; 419) 's': S\n+    [418; 428) 's.method()': u64\n+    [430; 431) 'S': S\n+    [442; 444) 'x3': u64\n+    [447; 448) 'S': S\n+    [447; 472) 'S.foo1...hod())': u64\n+    [454; 455) 'S': S\n+    [457; 471) '|s| s.method()': |S| -> u64\n+    [458; 459) 's': S\n+    [461; 462) 's': S\n+    [461; 471) 's.method()': u64\n+    [482; 484) 'x4': u64\n+    [487; 488) 'S': S\n+    [487; 512) 'S.foo2...(), S)': u64\n+    [494; 508) '|s| s.method()': |S| -> u64\n+    [495; 496) 's': S\n+    [498; 499) 's': S\n+    [498; 508) 's.method()': u64\n+    [510; 511) 'S': S\n+    \"###\n+    );\n+}\n+\n #[test]\n fn unselected_projection_in_trait_env_1() {\n     let t = type_at("}, {"sha": "d83706f860376096d16b11a83bb2e6091b1736d5", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a8670665032f6103ca14e38ed9106126b20063d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8670665032f6103ca14e38ed9106126b20063d/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=6a8670665032f6103ca14e38ed9106126b20063d", "patch": "@@ -406,8 +406,8 @@ where\n \n         let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref().clone());\n         if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Closure { def, expr }, .. }) = ty {\n-            for fn_trait in\n-                [super::FnTrait::FnOnce, super::FnTrait::FnMut, super::FnTrait::Fn].iter().copied()\n+            for &fn_trait in\n+                [super::FnTrait::FnOnce, super::FnTrait::FnMut, super::FnTrait::Fn].iter()\n             {\n                 if let Some(actual_trait) = get_fn_trait(self.db, self.krate, fn_trait) {\n                     if trait_ == actual_trait {"}]}