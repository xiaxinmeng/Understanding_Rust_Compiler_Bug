{"sha": "214b2a126bc6654bf60108aea2e8dce94b096b4b", "node_id": "C_kwDOAAsO6NoAKDIxNGIyYTEyNmJjNjY1NGJmNjAxMDhhZWEyZThkY2U5NGIwOTZiNGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-05T14:04:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-05T14:04:20Z"}, "message": "Rollup merge of #90529 - b-naber:reborrows-consts, r=lcnr\n\nSkip reborrows in AbstractConstBuilder\n\nFixes https://github.com/rust-lang/rust/issues/90455\n\nTemporary fix to prevent confusing diagnostics that refer to implicit borrows and derefs until we allow borrows and derefs on constant expressions.\n\nr? `@oli-obk`", "tree": {"sha": "bdbc040e1f0e9b6c1a27784539118281fbcf5e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbc040e1f0e9b6c1a27784539118281fbcf5e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214b2a126bc6654bf60108aea2e8dce94b096b4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrMbkCRBK7hj4Ov3rIwAAzAQIAFjvHkyBOFY+xU2Lce9tgSzB\npZh+lExm83iIHGxzlgpKAIPpxRAssTVwU0szjp+f9UWKOCIpeJofZanFB0kyUf0A\niG1ta0kjmSVSbPasGBNCVwANI9ItrAEqX7EvOZ3tMNt8VTCmk9Rlz+H1N8lJDFHC\nS8YRJ32CnIiUCiv7fo4JCEjzcYBTnpV0IVhEz+Kx+UkjmtbY8XbDuGQs+facrC+x\n8u5m77Y4WEM3hMQToeVhEWKXDj5VXQJ0gdN/ICja/mUz8YM3PKh0i5y3VQW4Nc8A\n/CicOQGjtKzZnOiyTFE8EUKvd4kjBOq+fbuvPY4hLMNtbJHOOrUG3btdPSs8ozU=\n=kPQw\n-----END PGP SIGNATURE-----\n", "payload": "tree bdbc040e1f0e9b6c1a27784539118281fbcf5e3c\nparent cafc4582e66c478b6b297ae85b225c788106015e\nparent 1777f431ad3afa1c19ceed8b11b211dbe18b558c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638713060 +0100\ncommitter GitHub <noreply@github.com> 1638713060 +0100\n\nRollup merge of #90529 - b-naber:reborrows-consts, r=lcnr\n\nSkip reborrows in AbstractConstBuilder\n\nFixes https://github.com/rust-lang/rust/issues/90455\n\nTemporary fix to prevent confusing diagnostics that refer to implicit borrows and derefs until we allow borrows and derefs on constant expressions.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214b2a126bc6654bf60108aea2e8dce94b096b4b", "html_url": "https://github.com/rust-lang/rust/commit/214b2a126bc6654bf60108aea2e8dce94b096b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214b2a126bc6654bf60108aea2e8dce94b096b4b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafc4582e66c478b6b297ae85b225c788106015e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafc4582e66c478b6b297ae85b225c788106015e", "html_url": "https://github.com/rust-lang/rust/commit/cafc4582e66c478b6b297ae85b225c788106015e"}, {"sha": "1777f431ad3afa1c19ceed8b11b211dbe18b558c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1777f431ad3afa1c19ceed8b11b211dbe18b558c", "html_url": "https://github.com/rust-lang/rust/commit/1777f431ad3afa1c19ceed8b11b211dbe18b558c"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "0ea3a18ca34fa2af5317beb4e552dc15594a4e0d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/214b2a126bc6654bf60108aea2e8dce94b096b4b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b2a126bc6654bf60108aea2e8dce94b096b4b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=214b2a126bc6654bf60108aea2e8dce94b096b4b", "patch": "@@ -399,13 +399,25 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 let arg = self.recurse_build(source)?;\n                 self.nodes.push(Node::Cast(abstract_const::CastKind::As, arg, node.ty))\n             }\n-\n+            ExprKind::Borrow{ arg, ..} => {\n+                let arg_node = &self.body.exprs[*arg];\n+\n+                // Skip reborrows for now until we allow Deref/Borrow/AddressOf\n+                // expressions.\n+                // FIXME(generic_const_exprs): Verify/explain why this is sound\n+                if let ExprKind::Deref {arg} = arg_node.kind {\n+                    self.recurse_build(arg)?\n+                } else {\n+                    self.maybe_supported_error(\n+                        node.span,\n+                        \"borrowing is not supported in generic constants\",\n+                    )?\n+                }\n+            }\n             // FIXME(generic_const_exprs): We may want to support these.\n-            ExprKind::AddressOf { .. }\n-            | ExprKind::Borrow { .. }\n-            | ExprKind::Deref { .. } => self.maybe_supported_error(\n+            ExprKind::AddressOf { .. } | ExprKind::Deref {..}=> self.maybe_supported_error(\n                 node.span,\n-                \"dereferencing is not supported in generic constants\",\n+                \"dereferencing or taking the address is not supported in generic constants\",\n             )?,\n             ExprKind::Repeat { .. } | ExprKind::Array { .. } =>  self.maybe_supported_error(\n                 node.span,"}, {"sha": "18010413b9394528e0ef615a33b48fa5cfb2b1e3", "filename": "src/test/ui/const-generics/generic_const_exprs/closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214b2a126bc6654bf60108aea2e8dce94b096b4b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214b2a126bc6654bf60108aea2e8dce94b096b4b/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr?ref=214b2a126bc6654bf60108aea2e8dce94b096b4b", "patch": "@@ -4,7 +4,7 @@ error: overly complex generic constant\n LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n    |                                   ^^^^-------^^\n    |                                       |\n-   |                                       dereferencing is not supported in generic constants\n+   |                                       borrowing is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "a580410cf37efc779e46b18a39fb5068f9f13d97", "filename": "src/test/ui/const-generics/issues/issue-90455.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/214b2a126bc6654bf60108aea2e8dce94b096b4b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b2a126bc6654bf60108aea2e8dce94b096b4b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90455.rs?ref=214b2a126bc6654bf60108aea2e8dce94b096b4b", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_const_exprs, adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+struct FieldElement<const N: &'static str> {\n+    n: [u64; num_limbs(N)],\n+    //~^ ERROR unconstrained generic constant\n+}\n+const fn num_limbs(_: &str) -> usize {\n+    0\n+}\n+\n+fn main() {}"}, {"sha": "724d7f42e69d176aad2789f1bad78d5eb3f4dfd1", "filename": "src/test/ui/const-generics/issues/issue-90455.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/214b2a126bc6654bf60108aea2e8dce94b096b4b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/214b2a126bc6654bf60108aea2e8dce94b096b4b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-90455.stderr?ref=214b2a126bc6654bf60108aea2e8dce94b096b4b", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/issue-90455.rs:5:8\n+   |\n+LL |     n: [u64; num_limbs(N)],\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); num_limbs(N)]:`\n+\n+error: aborting due to previous error\n+"}]}