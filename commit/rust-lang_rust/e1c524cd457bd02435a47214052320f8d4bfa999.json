{"sha": "e1c524cd457bd02435a47214052320f8d4bfa999", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzUyNGNkNDU3YmQwMjQzNWE0NzIxNDA1MjMyMGY4ZDRiZmE5OTk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-23T07:33:47Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-23T07:52:04Z"}, "message": "review", "tree": {"sha": "b439140e9821bbae8534b0506d1c9258d3069d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b439140e9821bbae8534b0506d1c9258d3069d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c524cd457bd02435a47214052320f8d4bfa999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c524cd457bd02435a47214052320f8d4bfa999", "html_url": "https://github.com/rust-lang/rust/commit/e1c524cd457bd02435a47214052320f8d4bfa999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c524cd457bd02435a47214052320f8d4bfa999/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ab18d97dab9df68418d19ef8a40c3218142d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ab18d97dab9df68418d19ef8a40c3218142d5f", "html_url": "https://github.com/rust-lang/rust/commit/40ab18d97dab9df68418d19ef8a40c3218142d5f"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "16e9aafb25a54e6987ab1534ab6a024e3e037f7f", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1c524cd457bd02435a47214052320f8d4bfa999/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c524cd457bd02435a47214052320f8d4bfa999/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=e1c524cd457bd02435a47214052320f8d4bfa999", "patch": "@@ -175,19 +175,15 @@ impl<'tcx> UnifyKey for ty::ConstVid<'tcx> {\n impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n     type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);\n \n-    fn unify_values(value1: &Self, value2: &Self) -> Result<Self, Self::Error> {\n-        let (val, origin) = match (value1.val, value2.val) {\n+    fn unify_values(&value1: &Self, &value2: &Self) -> Result<Self, Self::Error> {\n+        Ok(match (value1.val, value2.val) {\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Known { .. }) => {\n                 bug!(\"equating two const variables, both of which have known values\")\n             }\n \n             // If one side is known, prefer that one.\n-            (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => {\n-                (value1.val, value1.origin)\n-            }\n-            (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => {\n-                (value2.val, value2.origin)\n-            }\n+            (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => value1,\n+            (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => value2,\n \n             // If both sides are *unknown*, it hardly matters, does it?\n             (\n@@ -200,11 +196,12 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n                 // universe is the minimum of the two universes, because that is\n                 // the one which contains the fewest names in scope.\n                 let universe = cmp::min(universe1, universe2);\n-                (ConstVariableValue::Unknown { universe }, value1.origin)\n+                ConstVarValue {\n+                    val: ConstVariableValue::Unknown { universe },\n+                    origin: value1.origin,\n+                }\n             }\n-        };\n-\n-        Ok(ConstVarValue { origin, val })\n+        })\n     }\n }\n "}]}