{"sha": "35a559fdd1780d64cfc353a5ce865820c7c65a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTU1OWZkZDE3ODBkNjRjZmMzNTNhNWNlODY1ODIwYzdjNjVhOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T17:15:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-23T17:15:11Z"}, "message": "Auto merge of #4839 - flip1995:rollup-new-lints, r=flip1995\n\nRollup of 4 Pull requests with new lints\n\nRollup of pull requests\n\n- #4816 (New lint: zst_offset)\n- #4814 (New lint: Implement ifs_same_cond_fn)\n- #4807 (Add `large_stack_arrays` lint)\n- #4806 (Issue/4623)\n\nchangelog: add [`zst_offset`] lint\nchangelog: New lint: [`ifs_same_cond_fn`]\ncahngelog: Add new lint [large_stack_arrays]\nchangelog: added lint [`tabs_in_doc_comments`]", "tree": {"sha": "37bc0eb72edd47113d9da7446558bf9dd6a0aae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37bc0eb72edd47113d9da7446558bf9dd6a0aae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a559fdd1780d64cfc353a5ce865820c7c65a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a559fdd1780d64cfc353a5ce865820c7c65a8a", "html_url": "https://github.com/rust-lang/rust/commit/35a559fdd1780d64cfc353a5ce865820c7c65a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a559fdd1780d64cfc353a5ce865820c7c65a8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e8413a4e5b7c67001176783893b12411ce355e", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e8413a4e5b7c67001176783893b12411ce355e", "html_url": "https://github.com/rust-lang/rust/commit/60e8413a4e5b7c67001176783893b12411ce355e"}, {"sha": "7cc8fa2e25643f52cdee4657bb30063678c78cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc8fa2e25643f52cdee4657bb30063678c78cca", "html_url": "https://github.com/rust-lang/rust/commit/7cc8fa2e25643f52cdee4657bb30063678c78cca"}], "stats": {"total": 790, "additions": 786, "deletions": 4}, "files": [{"sha": "f21174c0bcef60b1178bde96713eb318a015feff", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -1059,6 +1059,7 @@ Released 2018-09-13\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n+[`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n@@ -1176,6 +1177,7 @@ Released 2018-09-13\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reverse_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#reverse_range_loop\n+[`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n@@ -1201,6 +1203,7 @@ Released 2018-09-13\n [`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n+[`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n [`to_digit_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some\n@@ -1273,4 +1276,5 @@ Released 2018-09-13\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n [`zero_width_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_width_space\n+[`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n <!-- end autogenerated links to lint list -->"}, {"sha": "d467e05257b7af59ca10a125904ca20b83b62b8b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 333 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 337 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "9cbff066f46405470da8354f0f65e019c5f4dc10", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -40,6 +40,53 @@ declare_clippy_lint! {\n     \"consecutive `ifs` with the same condition\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for consecutive `if`s with the same function call.\n+    ///\n+    /// **Why is this bad?** This is probably a copy & paste error.\n+    /// Despite the fact that function can have side effects and `if` works as\n+    /// intended, such an approach is implicit and can be considered a \"code smell\".\n+    ///\n+    /// **Known problems:** Hopefully none.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// if foo() == bar {\n+    ///     \u2026\n+    /// } else if foo() == bar {\n+    ///     \u2026\n+    /// }\n+    /// ```\n+    ///\n+    /// This probably should be:\n+    /// ```ignore\n+    /// if foo() == bar {\n+    ///     \u2026\n+    /// } else if foo() == baz {\n+    ///     \u2026\n+    /// }\n+    /// ```\n+    ///\n+    /// or if the original code was not a typo and called function mutates a state,\n+    /// consider move the mutation out of the `if` condition to avoid similarity to\n+    /// a copy & paste error:\n+    ///\n+    /// ```ignore\n+    /// let first = foo();\n+    /// if first == bar {\n+    ///     \u2026\n+    /// } else {\n+    ///     let second = foo();\n+    ///     if second == bar {\n+    ///     \u2026\n+    ///     }\n+    /// }\n+    /// ```\n+    pub SAME_FUNCTIONS_IN_IF_CONDITION,\n+    pedantic,\n+    \"consecutive `ifs` with the same function call\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for `if/else` with the same body as the *then* part\n     /// and the *else* part.\n@@ -102,7 +149,7 @@ declare_clippy_lint! {\n     \"`match` with identical arm bodies\"\n }\n \n-declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n+declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, SAME_FUNCTIONS_IN_IF_CONDITION, IF_SAME_THEN_ELSE, MATCH_SAME_ARMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -119,6 +166,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n             let (conds, blocks) = if_sequence(expr);\n             lint_same_then_else(cx, &blocks);\n             lint_same_cond(cx, &conds);\n+            lint_same_fns_in_if_cond(cx, &conds);\n             lint_match_arms(cx, expr);\n         }\n     }\n@@ -163,6 +211,34 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n     }\n }\n \n+/// Implementation of `SAME_FUNCTIONS_IN_IF_CONDITION`.\n+fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n+    let hash: &dyn Fn(&&Expr) -> u64 = &|expr| -> u64 {\n+        let mut h = SpanlessHash::new(cx, cx.tables);\n+        h.hash_expr(expr);\n+        h.finish()\n+    };\n+\n+    let eq: &dyn Fn(&&Expr, &&Expr) -> bool = &|&lhs, &rhs| -> bool {\n+        // Do not spawn warning if `IFS_SAME_COND` already produced it.\n+        if SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) {\n+            return false;\n+        }\n+        SpanlessEq::new(cx).eq_expr(lhs, rhs)\n+    };\n+\n+    for (i, j) in search_same(conds, hash, eq) {\n+        span_note_and_lint(\n+            cx,\n+            SAME_FUNCTIONS_IN_IF_CONDITION,\n+            j.span,\n+            \"this `if` has the same function call as a previous if\",\n+            i.span,\n+            \"same as this\",\n+        );\n+    }\n+}\n+\n /// Implementation of `MATCH_SAME_ARMS`.\n fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr) {\n     fn same_bindings<'tcx>("}, {"sha": "975a96c9a82530a0951b536aa2e5384bdc96ee70", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,68 @@\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::mir::interpret::ConstValue;\n+use rustc::ty::{self, ConstKind};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n+\n+use if_chain::if_chain;\n+\n+use crate::rustc_target::abi::LayoutOf;\n+use crate::utils::{snippet, span_help_and_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for local arrays that may be too large.\n+    ///\n+    /// **Why is this bad?** Large local arrays may cause stack overflow.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// let a = [0u32; 1_000_000];\n+    /// ```\n+    pub LARGE_STACK_ARRAYS,\n+    pedantic,\n+    \"allocating large arrays on stack may cause stack overflow\"\n+}\n+\n+pub struct LargeStackArrays {\n+    maximum_allowed_size: u64,\n+}\n+\n+impl LargeStackArrays {\n+    #[must_use]\n+    pub fn new(maximum_allowed_size: u64) -> Self {\n+        Self { maximum_allowed_size }\n+    }\n+}\n+\n+impl_lint_pass!(LargeStackArrays => [LARGE_STACK_ARRAYS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeStackArrays {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {\n+        if_chain! {\n+            if let ExprKind::Repeat(_, _) = expr.kind;\n+            if let ty::Array(element_type, cst) = cx.tables.expr_ty(expr).kind;\n+            if let ConstKind::Value(val) = cst.val;\n+            if let ConstValue::Scalar(element_count) = val;\n+            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n+            if self.maximum_allowed_size < element_count * element_size;\n+            then {\n+                span_help_and_lint(\n+                    cx,\n+                    LARGE_STACK_ARRAYS,\n+                    expr.span,\n+                    &format!(\n+                        \"allocating a local array larger than {} bytes\",\n+                        self.maximum_allowed_size\n+                    ),\n+                    &format!(\n+                        \"consider allocating on the heap with vec!{}.into_boxed_slice()\",\n+                        snippet(cx, expr.span, \"[...]\")\n+                    ),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "c8954aef2ba8363e4627bd1bc0abe01b6e7179ff", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -212,6 +212,7 @@ pub mod int_plus_one;\n pub mod integer_division;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n+pub mod large_stack_arrays;\n pub mod len_zero;\n pub mod let_if_seq;\n pub mod lifetimes;\n@@ -274,6 +275,7 @@ pub mod slow_vector_initialization;\n pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n+pub mod tabs_in_doc_comments;\n pub mod temporary_assignment;\n pub mod to_digit_is_some;\n pub mod trait_bounds;\n@@ -472,6 +474,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &copies::IFS_SAME_COND,\n         &copies::IF_SAME_THEN_ELSE,\n         &copies::MATCH_SAME_ARMS,\n+        &copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n         &copy_iterator::COPY_ITERATOR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n@@ -538,6 +541,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &integer_division::INTEGER_DIVISION,\n         &items_after_statements::ITEMS_AFTER_STATEMENTS,\n         &large_enum_variant::LARGE_ENUM_VARIANT,\n+        &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n@@ -624,6 +628,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &methods::USELESS_ASREF,\n         &methods::WRONG_PUB_SELF_CONVENTION,\n         &methods::WRONG_SELF_CONVENTION,\n+        &methods::ZST_OFFSET,\n         &minmax::MIN_MAX,\n         &misc::CMP_NAN,\n         &misc::CMP_OWNED,\n@@ -716,6 +721,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL,\n         &swap::ALMOST_SWAPPED,\n         &swap::MANUAL_SWAP,\n+        &tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n         &temporary_assignment::TEMPORARY_ASSIGNMENT,\n         &to_digit_is_some::TO_DIGIT_IS_SOME,\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n@@ -946,10 +952,13 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n+    store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n     store.register_late_pass(|| box exit::Exit);\n     store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n+    let array_size_threshold = conf.array_size_threshold;\n+    store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -989,6 +998,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&attrs::INLINE_ALWAYS),\n         LintId::of(&checked_conversions::CHECKED_CONVERSIONS),\n         LintId::of(&copies::MATCH_SAME_ARMS),\n+        LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n@@ -1003,6 +1013,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&if_not_else::IF_NOT_ELSE),\n         LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n+        LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n@@ -1176,6 +1187,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::UNNECESSARY_FOLD),\n         LintId::of(&methods::USELESS_ASREF),\n         LintId::of(&methods::WRONG_SELF_CONVENTION),\n+        LintId::of(&methods::ZST_OFFSET),\n         LintId::of(&minmax::MIN_MAX),\n         LintId::of(&misc::CMP_NAN),\n         LintId::of(&misc::CMP_OWNED),\n@@ -1243,6 +1255,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n         LintId::of(&swap::MANUAL_SWAP),\n+        LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n@@ -1370,6 +1383,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&returns::UNUSED_UNIT),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n+        LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n@@ -1497,6 +1511,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n         LintId::of(&methods::TEMPORARY_CSTRING_AS_PTR),\n         LintId::of(&methods::UNINIT_ASSUMED_INIT),\n+        LintId::of(&methods::ZST_OFFSET),\n         LintId::of(&minmax::MIN_MAX),\n         LintId::of(&misc::CMP_NAN),\n         LintId::of(&misc::FLOAT_CMP),"}, {"sha": "f20abeff0658253c71a7767b11e7725168c1c2f8", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -1065,6 +1065,23 @@ declare_clippy_lint! {\n     \"`.chcked_add/sub(x).unwrap_or(MAX/MIN)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `offset(_)`, `wrapping_`{`add`, `sub`}, etc. on raw pointers to\n+    /// zero-sized types\n+    ///\n+    /// **Why is this bad?** This is a no-op, and likely unintended\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// unsafe { (&() as *const ()).offest(1) };\n+    /// ```\n+    pub ZST_OFFSET,\n+    correctness,\n+    \"Check for offset calculations on raw pointers to zero-sized types\"\n+}\n+\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n@@ -1109,6 +1126,7 @@ declare_lint_pass!(Methods => [\n     SUSPICIOUS_MAP,\n     UNINIT_ASSUMED_INIT,\n     MANUAL_SATURATING_ARITHMETIC,\n+    ZST_OFFSET,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n@@ -1167,6 +1185,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             | [\"unwrap_or\", arith @ \"checked_mul\"] => {\n                 manual_saturating_arithmetic::lint(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n             },\n+            [\"add\"] | [\"offset\"] | [\"sub\"] | [\"wrapping_offset\"] | [\"wrapping_add\"] | [\"wrapping_sub\"] => {\n+                check_pointer_offset(cx, expr, arg_lists[0])\n+            },\n             _ => {},\n         }\n \n@@ -3063,3 +3084,15 @@ fn contains_return(expr: &hir::Expr) -> bool {\n     visitor.visit_expr(expr);\n     visitor.found\n }\n+\n+fn check_pointer_offset(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr]) {\n+    if_chain! {\n+        if args.len() == 2;\n+        if let ty::RawPtr(ty::TypeAndMut { ref ty, .. }) = cx.tables.expr_ty(&args[0]).kind;\n+        if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty));\n+        if layout.is_zst();\n+        then {\n+            span_lint(cx, ZST_OFFSET, expr.span, \"offset calculation on zero-sized value\");\n+        }\n+    }\n+}"}, {"sha": "ccea700f3538d0d381e03b9d49a85b0865b6ba0e", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,219 @@\n+use crate::utils::span_lint_and_sugg;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+use std::convert::TryFrom;\n+use syntax::ast;\n+use syntax::source_map::{BytePos, Span};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks doc comments for usage of tab characters.\n+    ///\n+    /// **Why is this bad?** The rust style-guide promotes spaces instead of tabs for indentation.\n+    /// To keep a consistent view on the source, also doc comments should not have tabs.\n+    /// Also, explaining ascii-diagrams containing tabs can get displayed incorrectly when the\n+    /// display settings of the author and reader differ.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// ///\n+    /// /// Struct to hold two strings:\n+    /// /// \t- first\t\tone\n+    /// /// \t- second\tone\n+    /// pub struct DoubleString {\n+    ///    ///\n+    ///    /// \t- First String:\n+    ///    /// \t\t- needs to be inside here\n+    ///    first_string: String,\n+    ///    ///\n+    ///    /// \t- Second String:\n+    ///    /// \t\t- needs to be inside here\n+    ///    second_string: String,\n+    ///}\n+    /// ```\n+    ///\n+    /// Will be converted to:\n+     /// ```rust\n+    /// ///\n+    /// /// Struct to hold two strings:\n+    /// ///     - first        one\n+    /// ///     - second    one\n+    /// pub struct DoubleString {\n+    ///    ///\n+    ///    ///     - First String:\n+    ///    ///         - needs to be inside here\n+    ///    first_string: String,\n+    ///    ///\n+    ///    ///     - Second String:\n+    ///    ///         - needs to be inside here\n+    ///    second_string: String,\n+    ///}\n+    /// ```\n+    pub TABS_IN_DOC_COMMENTS,\n+    style,\n+    \"using tabs in doc comments is not recommended\"\n+}\n+\n+declare_lint_pass!(TabsInDocComments => [TABS_IN_DOC_COMMENTS]);\n+\n+impl TabsInDocComments {\n+    fn warn_if_tabs_in_doc(cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n+        if let ast::AttrKind::DocComment(comment) = attr.kind {\n+            let comment = comment.as_str();\n+\n+            for (lo, hi) in get_chunks_of_tabs(&comment) {\n+                let new_span = Span::new(\n+                    attr.span.lo() + BytePos(lo),\n+                    attr.span.lo() + BytePos(hi),\n+                    attr.span.ctxt(),\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    TABS_IN_DOC_COMMENTS,\n+                    new_span,\n+                    \"using tabs in doc comments is not recommended\",\n+                    \"consider using four spaces per tab\",\n+                    \"    \".repeat((hi - lo) as usize),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for TabsInDocComments {\n+    fn check_attribute(&mut self, cx: &EarlyContext<'_>, attribute: &ast::Attribute) {\n+        Self::warn_if_tabs_in_doc(cx, &attribute);\n+    }\n+}\n+\n+///\n+/// scans the string for groups of tabs and returns the start(inclusive) and end positions\n+/// (exclusive) of all groups\n+/// e.g. \"sd\\tasd\\t\\taa\" will be converted to [(2, 3), (6, 8)] as\n+///       012 3456 7 89\n+///         ^-^  ^---^\n+fn get_chunks_of_tabs(the_str: &str) -> Vec<(u32, u32)> {\n+    let line_length_way_to_long = \"doc comment longer than 2^32 chars\";\n+    let mut spans: Vec<(u32, u32)> = vec![];\n+    let mut current_start: u32 = 0;\n+\n+    // tracker to decide if the last group of tabs is not closed by a non-tab character\n+    let mut is_active = false;\n+\n+    let chars_array: Vec<_> = the_str.chars().collect();\n+\n+    if chars_array == vec!['\\t'] {\n+        return vec![(0, 1)];\n+    }\n+\n+    for (index, arr) in chars_array.windows(2).enumerate() {\n+        let index = u32::try_from(index).expect(line_length_way_to_long);\n+        match arr {\n+            ['\\t', '\\t'] => {\n+                // either string starts with double tab, then we have to set it active,\n+                // otherwise is_active is true anyway\n+                is_active = true;\n+            },\n+            [_, '\\t'] => {\n+                // as ['\\t', '\\t'] is excluded, this has to be a start of a tab group,\n+                // set indices accordingly\n+                is_active = true;\n+                current_start = index + 1;\n+            },\n+            ['\\t', _] => {\n+                // this now has to be an end of the group, hence we have to push a new tuple\n+                is_active = false;\n+                spans.push((current_start, index + 1));\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    // only possible when tabs are at the end, insert last group\n+    if is_active {\n+        spans.push((\n+            current_start,\n+            u32::try_from(the_str.chars().count()).expect(line_length_way_to_long),\n+        ));\n+    }\n+\n+    spans\n+}\n+\n+#[cfg(test)]\n+mod tests_for_get_chunks_of_tabs {\n+    use super::get_chunks_of_tabs;\n+\n+    #[test]\n+    fn test_empty_string() {\n+        let res = get_chunks_of_tabs(\"\");\n+\n+        assert_eq!(res, vec![]);\n+    }\n+\n+    #[test]\n+    fn test_simple() {\n+        let res = get_chunks_of_tabs(\"sd\\t\\t\\taa\");\n+\n+        assert_eq!(res, vec![(2, 5)]);\n+    }\n+\n+    #[test]\n+    fn test_only_t() {\n+        let res = get_chunks_of_tabs(\"\\t\\t\");\n+\n+        assert_eq!(res, vec![(0, 2)]);\n+    }\n+\n+    #[test]\n+    fn test_only_one_t() {\n+        let res = get_chunks_of_tabs(\"\\t\");\n+\n+        assert_eq!(res, vec![(0, 1)]);\n+    }\n+\n+    #[test]\n+    fn test_double() {\n+        let res = get_chunks_of_tabs(\"sd\\tasd\\t\\taa\");\n+\n+        assert_eq!(res, vec![(2, 3), (6, 8)]);\n+    }\n+\n+    #[test]\n+    fn test_start() {\n+        let res = get_chunks_of_tabs(\"\\t\\taa\");\n+\n+        assert_eq!(res, vec![(0, 2)]);\n+    }\n+\n+    #[test]\n+    fn test_end() {\n+        let res = get_chunks_of_tabs(\"aa\\t\\t\");\n+\n+        assert_eq!(res, vec![(2, 4)]);\n+    }\n+\n+    #[test]\n+    fn test_start_single() {\n+        let res = get_chunks_of_tabs(\"\\taa\");\n+\n+        assert_eq!(res, vec![(0, 1)]);\n+    }\n+\n+    #[test]\n+    fn test_end_single() {\n+        let res = get_chunks_of_tabs(\"aa\\t\");\n+\n+        assert_eq!(res, vec![(2, 3)]);\n+    }\n+\n+    #[test]\n+    fn test_no_tabs() {\n+        let res = get_chunks_of_tabs(\"dsfs\");\n+\n+        assert_eq!(res, vec![]);\n+    }\n+}"}, {"sha": "a3407d1e9902e439f30ea9d82d8a4230392c6c66", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -151,6 +151,8 @@ define_Conf! {\n     (trivial_copy_size_limit, \"trivial_copy_size_limit\", None => Option<u64>),\n     /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n     (too_many_lines_threshold, \"too_many_lines_threshold\", 100 => u64),\n+    /// Lint: LARGE_STACK_ARRAYS. The maximum allowed size for arrays on the stack\n+    (array_size_threshold, \"array_size_threshold\", 512_000 => u64),\n }\n \n impl Default for Conf {"}, {"sha": "9b258ffb610ad70082a4bcab0c789c9fd6ab3744", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 333] = [\n+pub const ALL_LINTS: [Lint; 337] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -903,6 +903,13 @@ pub const ALL_LINTS: [Lint; 333] = [\n         deprecation: None,\n         module: \"large_enum_variant\",\n     },\n+    Lint {\n+        name: \"large_stack_arrays\",\n+        group: \"pedantic\",\n+        desc: \"allocating large arrays on stack may cause stack overflow\",\n+        deprecation: None,\n+        module: \"large_stack_arrays\",\n+    },\n     Lint {\n         name: \"len_without_is_empty\",\n         group: \"style\",\n@@ -1708,6 +1715,13 @@ pub const ALL_LINTS: [Lint; 333] = [\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"same_functions_in_if_condition\",\n+        group: \"pedantic\",\n+        desc: \"consecutive `ifs` with the same function call\",\n+        deprecation: None,\n+        module: \"copies\",\n+    },\n     Lint {\n         name: \"search_is_some\",\n         group: \"complexity\",\n@@ -1862,6 +1876,13 @@ pub const ALL_LINTS: [Lint; 333] = [\n         deprecation: None,\n         module: \"formatting\",\n     },\n+    Lint {\n+        name: \"tabs_in_doc_comments\",\n+        group: \"style\",\n+        desc: \"using tabs in doc comments is not recommended\",\n+        deprecation: None,\n+        module: \"tabs_in_doc_comments\",\n+    },\n     Lint {\n         name: \"temporary_assignment\",\n         group: \"complexity\",\n@@ -2338,5 +2359,12 @@ pub const ALL_LINTS: [Lint; 333] = [\n         deprecation: None,\n         module: \"unicode\",\n     },\n+    Lint {\n+        name: \"zst_offset\",\n+        group: \"correctness\",\n+        desc: \"Check for offset calculations on raw pointers to zero-sized types\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n ];\n // end lint list, do not remove this comment, it\u2019s used in `update_lints`"}, {"sha": "cbb4126a8668ad8304a2b09c4f1d49a1e9d6b920", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "d9161bfcf15433f491bb5c58125f9b327b6736c5", "filename": "tests/ui/large_stack_arrays.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_stack_arrays.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,30 @@\n+#![warn(clippy::large_stack_arrays)]\n+#![allow(clippy::large_enum_variant)]\n+\n+#[derive(Clone, Copy)]\n+struct S {\n+    pub data: [u64; 32],\n+}\n+\n+#[derive(Clone, Copy)]\n+enum E {\n+    S(S),\n+    T(u32),\n+}\n+\n+fn main() {\n+    let bad = (\n+        [0u32; 20_000_000],\n+        [S { data: [0; 32] }; 5000],\n+        [Some(\"\"); 20_000_000],\n+        [E::T(0); 5000],\n+    );\n+\n+    let good = (\n+        [0u32; 1000],\n+        [S { data: [0; 32] }; 1000],\n+        [Some(\"\"); 1000],\n+        [E::T(0); 1000],\n+        [(); 20_000_000],\n+    );\n+}"}, {"sha": "98d8262372df689a28943141cbd58036dffcd459", "filename": "tests/ui/large_stack_arrays.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Flarge_stack_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Flarge_stack_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_stack_arrays.stderr?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,35 @@\n+error: allocating a local array larger than 512000 bytes\n+  --> $DIR/large_stack_arrays.rs:17:9\n+   |\n+LL |         [0u32; 20_000_000],\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::large-stack-arrays` implied by `-D warnings`\n+   = help: consider allocating on the heap with vec![0u32; 20_000_000].into_boxed_slice()\n+\n+error: allocating a local array larger than 512000 bytes\n+  --> $DIR/large_stack_arrays.rs:18:9\n+   |\n+LL |         [S { data: [0; 32] }; 5000],\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider allocating on the heap with vec![S { data: [0; 32] }; 5000].into_boxed_slice()\n+\n+error: allocating a local array larger than 512000 bytes\n+  --> $DIR/large_stack_arrays.rs:19:9\n+   |\n+LL |         [Some(\"\"); 20_000_000],\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider allocating on the heap with vec![Some(\"\"); 20_000_000].into_boxed_slice()\n+\n+error: allocating a local array larger than 512000 bytes\n+  --> $DIR/large_stack_arrays.rs:20:9\n+   |\n+LL |         [E::T(0); 5000],\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider allocating on the heap with vec![E::T(0); 5000].into_boxed_slice()\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "686867cf5c6f661df745266fea2860e3ccd10b7d", "filename": "tests/ui/same_functions_in_if_condition.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fsame_functions_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fsame_functions_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,80 @@\n+#![warn(clippy::same_functions_in_if_condition)]\n+#![allow(clippy::ifs_same_cond)] // This warning is different from `ifs_same_cond`.\n+#![allow(clippy::if_same_then_else, clippy::comparison_chain)] // all empty blocks\n+\n+fn function() -> bool {\n+    true\n+}\n+\n+fn fn_arg(_arg: u8) -> bool {\n+    true\n+}\n+\n+struct Struct;\n+\n+impl Struct {\n+    fn method(&self) -> bool {\n+        true\n+    }\n+    fn method_arg(&self, _arg: u8) -> bool {\n+        true\n+    }\n+}\n+\n+fn ifs_same_cond_fn() {\n+    let a = 0;\n+    let obj = Struct;\n+\n+    if function() {\n+    } else if function() {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if fn_arg(a) {\n+    } else if fn_arg(a) {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if obj.method() {\n+    } else if obj.method() {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    if obj.method_arg(a) {\n+    } else if obj.method_arg(a) {\n+        //~ ERROR ifs same condition\n+    }\n+\n+    let mut v = vec![1];\n+    if v.pop() == None {\n+        //~ ERROR ifs same condition\n+    } else if v.pop() == None {\n+    }\n+\n+    if v.len() == 42 {\n+        //~ ERROR ifs same condition\n+    } else if v.len() == 42 {\n+    }\n+\n+    if v.len() == 1 {\n+        // ok, different conditions\n+    } else if v.len() == 2 {\n+    }\n+\n+    if fn_arg(0) {\n+        // ok, different arguments.\n+    } else if fn_arg(1) {\n+    }\n+\n+    if obj.method_arg(0) {\n+        // ok, different arguments.\n+    } else if obj.method_arg(1) {\n+    }\n+\n+    if a == 1 {\n+        // ok, warning is on `ifs_same_cond` behalf.\n+    } else if a == 1 {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "214f1a9e7c8fae78d7a86fdc1b544b583841e973", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,75 @@\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:29:15\n+   |\n+LL |     } else if function() {\n+   |               ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::same-functions-in-if-condition` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:28:8\n+   |\n+LL |     if function() {\n+   |        ^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:34:15\n+   |\n+LL |     } else if fn_arg(a) {\n+   |               ^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:33:8\n+   |\n+LL |     if fn_arg(a) {\n+   |        ^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:39:15\n+   |\n+LL |     } else if obj.method() {\n+   |               ^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:38:8\n+   |\n+LL |     if obj.method() {\n+   |        ^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:44:15\n+   |\n+LL |     } else if obj.method_arg(a) {\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:43:8\n+   |\n+LL |     if obj.method_arg(a) {\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:51:15\n+   |\n+LL |     } else if v.pop() == None {\n+   |               ^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:49:8\n+   |\n+LL |     if v.pop() == None {\n+   |        ^^^^^^^^^^^^^^^\n+\n+error: this `if` has the same function call as a previous if\n+  --> $DIR/same_functions_in_if_condition.rs:56:15\n+   |\n+LL |     } else if v.len() == 42 {\n+   |               ^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/same_functions_in_if_condition.rs:54:8\n+   |\n+LL |     if v.len() == 42 {\n+   |        ^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "4bc4bc86c76c291dd2fd9417c00fc7ec16a0e195", "filename": "tests/ui/tabs_in_doc_comments.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Ftabs_in_doc_comments.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Ftabs_in_doc_comments.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.fixed?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![warn(clippy::tabs_in_doc_comments)]\n+#[allow(dead_code)]\n+\n+///\n+/// Struct to hold two strings:\n+///     - first        one\n+///     - second    one\n+pub struct DoubleString {\n+    ///\n+    ///     - First String:\n+    ///         - needs to be inside here\n+    first_string: String,\n+    ///\n+    ///     - Second String:\n+    ///         - needs to be inside here\n+    second_string: String,\n+}\n+\n+/// This is main\n+fn main() {}"}, {"sha": "9db3416e6596409c385bf20c1a40e746a24b1b01", "filename": "tests/ui/tabs_in_doc_comments.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![warn(clippy::tabs_in_doc_comments)]\n+#[allow(dead_code)]\n+\n+///\n+/// Struct to hold two strings:\n+/// \t- first\t\tone\n+/// \t- second\tone\n+pub struct DoubleString {\n+    ///\n+    /// \t- First String:\n+    /// \t\t- needs to be inside here\n+    first_string: String,\n+    ///\n+    /// \t- Second String:\n+    /// \t\t- needs to be inside here\n+    second_string: String,\n+}\n+\n+/// This is main\n+fn main() {}"}, {"sha": "355f2e805796436a09d4900cb596ed3848926bc7", "filename": "tests/ui/tabs_in_doc_comments.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Ftabs_in_doc_comments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Ftabs_in_doc_comments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftabs_in_doc_comments.stderr?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,52 @@\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:12:9\n+   |\n+LL |     ///     - First String:\n+   |         ^^^^ help: consider using four spaces per tab\n+   |\n+   = note: `-D clippy::tabs-in-doc-comments` implied by `-D warnings`\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:13:9\n+   |\n+LL |     ///         - needs to be inside here\n+   |         ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:16:9\n+   |\n+LL |     ///     - Second String:\n+   |         ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:17:9\n+   |\n+LL |     ///         - needs to be inside here\n+   |         ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:8:5\n+   |\n+LL | ///     - first        one\n+   |     ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:8:13\n+   |\n+LL | ///     - first        one\n+   |                ^^^^^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:9:5\n+   |\n+LL | ///     - second    one\n+   |     ^^^^ help: consider using four spaces per tab\n+\n+error: using tabs in doc comments is not recommended\n+  --> $DIR/tabs_in_doc_comments.rs:9:14\n+   |\n+LL | ///     - second    one\n+   |                 ^^^^ help: consider using four spaces per tab\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "2de904376ad45b438ef580b99f2791fe7d5ea9bd", "filename": "tests/ui/zero_offset.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fzero_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fzero_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_offset.rs?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    unsafe {\n+        let x = &() as *const ();\n+        x.offset(0);\n+        x.wrapping_add(0);\n+        x.sub(0);\n+        x.wrapping_sub(0);\n+\n+        let y = &1 as *const u8;\n+        y.offset(0);\n+    }\n+}"}, {"sha": "cfcd7de2b3d2c6b4503cbb125ff03be2ee0896b8", "filename": "tests/ui/zero_offset.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fzero_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35a559fdd1780d64cfc353a5ce865820c7c65a8a/tests%2Fui%2Fzero_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_offset.stderr?ref=35a559fdd1780d64cfc353a5ce865820c7c65a8a", "patch": "@@ -0,0 +1,9 @@\n+error[E0606]: casting `&i32` as `*const u8` is invalid\n+  --> $DIR/zero_offset.rs:9:17\n+   |\n+LL |         let y = &1 as *const u8;\n+   |                 ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0606`."}]}