{"sha": "1dd9c3e52a78399ca071728c76fafcd9524f793e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDljM2U1MmE3ODM5OWNhMDcxNzI4Yzc2ZmFmY2Q5NTI0Zjc5M2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-01T20:03:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T20:21:56Z"}, "message": "support inlining by asking for optimizer mir for callees\n\nI tested this with it enabled 100% of the time, and we were able to run\nmir-opt tests successfully.", "tree": {"sha": "e6dddfddc58128d32f6e61dca73f3e25d1b90fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6dddfddc58128d32f6e61dca73f3e25d1b90fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd9c3e52a78399ca071728c76fafcd9524f793e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd9c3e52a78399ca071728c76fafcd9524f793e", "html_url": "https://github.com/rust-lang/rust/commit/1dd9c3e52a78399ca071728c76fafcd9524f793e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd9c3e52a78399ca071728c76fafcd9524f793e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669d31683f97c173c404d27b841d30a6424bf639", "url": "https://api.github.com/repos/rust-lang/rust/commits/669d31683f97c173c404d27b841d30a6424bf639", "html_url": "https://github.com/rust-lang/rust/commit/669d31683f97c173c404d27b841d30a6424bf639"}], "stats": {"total": 208, "additions": 68, "deletions": 140}, "files": [{"sha": "f80d6473dcc540109ae1c6025f4a6691f9adcf31", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9c3e52a78399ca071728c76fafcd9524f793e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9c3e52a78399ca071728c76fafcd9524f793e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1dd9c3e52a78399ca071728c76fafcd9524f793e", "patch": "@@ -928,7 +928,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n \n     // No lifetime analysis based on borrowing can be done from here on out.\n-    // TODO passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::instcombine::InstCombine);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::deaggregator::Deaggregator);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::copy_prop::CopyPropagation);"}, {"sha": "b9d6e527e556c0ae934661ff844442f3a179fa2a", "filename": "src/librustc_mir/queries.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9c3e52a78399ca071728c76fafcd9524f793e/src%2Flibrustc_mir%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9c3e52a78399ca071728c76fafcd9524f793e/src%2Flibrustc_mir%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fqueries.rs?ref=1dd9c3e52a78399ca071728c76fafcd9524f793e", "patch": "@@ -38,10 +38,15 @@ pub fn provide(providers: &mut Providers) {\n         mir_const,\n         mir_validated,\n         optimized_mir,\n+        is_item_mir_available,\n         ..*providers\n     };\n }\n \n+fn is_item_mir_available<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+    tcx.mir_keys(def_id.krate).contains(&def_id)\n+}\n+\n /// Finds the full set of def-ids within the current crate that have\n /// MIR associated with them.\n fn mir_keys<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, krate: CrateNum)"}, {"sha": "614b5e2cc3f8d40e5b9613232c78dff19bc2ee85", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 62, "deletions": 139, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/1dd9c3e52a78399ca071728c76fafcd9524f793e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd9c3e52a78399ca071728c76fafcd9524f793e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=1dd9c3e52a78399ca071728c76fafcd9524f793e", "patch": "@@ -14,27 +14,20 @@ use rustc::hir::def_id::DefId;\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc_data_structures::graph;\n \n-use rustc::dep_graph::DepNode;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirSource, PassId};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::*;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::maps::Multi;\n-use rustc::ty::steal::Steal;\n use rustc::ty::subst::{Subst,Substs};\n-use rustc::util::nodemap::{DefIdSet};\n \n+use std::collections::VecDeque;\n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n \n use syntax::{attr};\n use syntax::abi::Abi;\n \n-use callgraph;\n-use transform::interprocedural::InterproceduralCx;\n-\n const DEFAULT_THRESHOLD: usize = 50;\n const HINT_THRESHOLD: usize = 100;\n \n@@ -45,140 +38,92 @@ const UNKNOWN_SIZE_COST: usize = 10;\n \n pub struct Inline;\n \n-pub trait Pass {\n-    fn run_pass<'a, 'tcx: 'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                              -> Multi<PassId, &'tcx Steal<Mir<'tcx>>>;\n+#[derive(Copy, Clone)]\n+struct CallSite<'tcx> {\n+    callee: DefId,\n+    substs: &'tcx Substs<'tcx>,\n+    bb: BasicBlock,\n+    location: SourceInfo,\n }\n \n-impl Pass for Inline {\n-    fn run_pass<'a, 'tcx: 'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                              -> Multi<PassId, &'tcx Steal<Mir<'tcx>>> {\n-        let mut cx = InterproceduralCx::new(tcx);\n-\n-        let callgraph = callgraph::CallGraph::build(&mut cx);\n-\n-        let mut inliner = Inliner { tcx };\n-\n-        for scc in callgraph.scc_iter() {\n-            inliner.inline_scc(&mut cx, &callgraph, &scc);\n+impl MirPass for Inline {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+            Inliner { tcx, source }.run_pass(mir);\n         }\n-\n-        Multi::from(cx.into_local_mirs())\n     }\n }\n \n struct Inliner<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-}\n-\n-#[derive(Copy, Clone)]\n-struct CallSite<'tcx> {\n-    caller: DefId,\n-    callee: DefId,\n-    substs: &'tcx Substs<'tcx>,\n-    bb: BasicBlock,\n-    location: SourceInfo,\n+    source: MirSource,\n }\n \n impl<'a, 'tcx> Inliner<'a, 'tcx> {\n-    fn inline_scc(&mut self,\n-                  cx: &mut InterproceduralCx<'a, 'tcx>,\n-                  callgraph: &callgraph::CallGraph,\n-                  scc: &[graph::NodeIndex]) -> bool {\n-        let tcx = self.tcx;\n-        let mut callsites = Vec::new();\n-        let mut in_scc = DefIdSet();\n-\n-        let mut inlined_into = DefIdSet();\n-\n-        for &node in scc {\n-            let def_id = callgraph.def_id(node);\n-\n-            // Don't inspect functions from other crates\n-            let id = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-                id\n-            } else {\n-                continue;\n-            };\n-            let src = MirSource::from_node(tcx, id);\n-            if let MirSource::Fn(_) = src {\n-                if let Some(mir) = cx.ensure_mir_and_read(def_id) {\n-                    for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n-                        // Don't inline calls that are in cleanup blocks.\n-                        if bb_data.is_cleanup { continue; }\n-\n-                        // Only consider direct calls to functions\n-                        let terminator = bb_data.terminator();\n-                        if let TerminatorKind::Call {\n-                            func: Operand::Constant(ref f), .. } = terminator.kind {\n-                            if let ty::TyFnDef(callee_def_id, substs, _) = f.ty.sty {\n-                                callsites.push(CallSite {\n-                                    caller: def_id,\n-                                    callee: callee_def_id,\n-                                    substs: substs,\n-                                    bb: bb,\n-                                    location: terminator.source_info\n-                                });\n-                            }\n-                        }\n+    fn run_pass(&self, caller_mir: &mut Mir<'tcx>) {\n+        // Keep a queue of callsites to try inlining on. We take\n+        // advantage of the fact that queries detect cycles here to\n+        // allow us to try and fetch the fully optimized MIR of a\n+        // call; if it succeeds, we can inline it and we know that\n+        // they do not call us.  Otherwise, we just don't try to\n+        // inline.\n+        //\n+        // We use a queue so that we inline \"broadly\" before we inline\n+        // in depth.  It is unclear if this is the current heuristic.\n+\n+        let mut callsites = VecDeque::new();\n+\n+        // Only do inlining into fn bodies.\n+        if let MirSource::Fn(_) = self.source {\n+            for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated() {\n+                // Don't inline calls that are in cleanup blocks.\n+                if bb_data.is_cleanup { continue; }\n+\n+                // Only consider direct calls to functions\n+                let terminator = bb_data.terminator();\n+                if let TerminatorKind::Call {\n+                    func: Operand::Constant(ref f), .. } = terminator.kind {\n+                    if let ty::TyFnDef(callee_def_id, substs, _) = f.ty.sty {\n+                        callsites.push_back(CallSite {\n+                            callee: callee_def_id,\n+                            substs: substs,\n+                            bb: bb,\n+                            location: terminator.source_info\n+                        });\n                     }\n-\n-                    in_scc.insert(def_id);\n                 }\n             }\n         }\n \n-        // Move callsites that are in the the SCC to the end so\n-        // they're inlined after calls to outside the SCC\n-        let mut first_call_in_scc = callsites.len();\n-\n-        let mut i = 0;\n-        while i < first_call_in_scc {\n-            let f = callsites[i].caller;\n-            if in_scc.contains(&f) {\n-                first_call_in_scc -= 1;\n-                callsites.swap(i, first_call_in_scc);\n-            } else {\n-                i += 1;\n-            }\n-        }\n-\n         let mut local_change;\n         let mut changed = false;\n \n         loop {\n             local_change = false;\n-            let mut csi = 0;\n-            while csi < callsites.len() {\n-                let callsite = callsites[csi];\n-                csi += 1;\n-\n-                let _task = tcx.dep_graph.in_task(DepNode::Mir(callsite.caller));\n-                tcx.dep_graph.write(DepNode::Mir(callsite.caller));\n-\n-                let callee_mir = {\n-                    if let Some(callee_mir) = cx.ensure_mir_and_read(callsite.callee) {\n-                        if !self.should_inline(callsite, &callee_mir) {\n-                            continue;\n-                        }\n+            while let Some(callsite) = callsites.pop_front() {\n+                if !self.tcx.is_item_mir_available(callsite.callee) {\n+                    continue;\n+                }\n \n-                        callee_mir.subst(tcx, callsite.substs)\n-                    } else {\n-                        continue;\n+                let callee_mir = match ty::queries::optimized_mir::try_get(self.tcx,\n+                                                                           callsite.location.span,\n+                                                                           callsite.callee) {\n+                    Ok(ref callee_mir) if self.should_inline(callsite, callee_mir) => {\n+                        callee_mir.subst(self.tcx, callsite.substs)\n                     }\n \n+                    _ => continue,\n                 };\n \n-                let caller_mir = cx.mir_mut(callsite.caller);\n-\n                 let start = caller_mir.basic_blocks().len();\n \n                 if !self.inline_call(callsite, caller_mir, callee_mir) {\n                     continue;\n                 }\n \n-                inlined_into.insert(callsite.caller);\n-\n                 // Add callsites from inlined function\n                 for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated().skip(start) {\n                     // Only consider direct calls to functions\n@@ -188,8 +133,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                         if let ty::TyFnDef(callee_def_id, substs, _) = f.ty.sty {\n                             // Don't inline the same function multiple times.\n                             if callsite.callee != callee_def_id {\n-                                callsites.push(CallSite {\n-                                    caller: callsite.caller,\n+                                callsites.push_back(CallSite {\n                                     callee: callee_def_id,\n                                     substs: substs,\n                                     bb: bb,\n@@ -200,13 +144,6 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     }\n                 }\n \n-                csi -= 1;\n-                if scc.len() == 1 {\n-                    callsites.swap_remove(csi);\n-                } else {\n-                    callsites.remove(csi);\n-                }\n-\n                 local_change = true;\n                 changed = true;\n             }\n@@ -216,18 +153,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             }\n         }\n \n-        // Simplify functions we inlined into.\n-        for def_id in inlined_into {\n-            let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n-            tcx.dep_graph.write(DepNode::Mir(def_id));\n-\n-            let caller_mir = cx.mir_mut(def_id);\n-\n-            debug!(\"Running simplify cfg on {:?}\", def_id);\n+        // Simplify if we inlined anything.\n+        if changed {\n+            debug!(\"Running simplify cfg on {:?}\", self.source);\n             CfgSimplifier::new(caller_mir).simplify();\n             remove_dead_blocks(caller_mir);\n         }\n-        changed\n     }\n \n     fn should_inline(&self,\n@@ -286,8 +217,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n \n         // FIXME: Give a bonus to functions with only a single caller\n \n-        let id = tcx.hir.as_local_node_id(callsite.caller).expect(\"Caller not local\");\n-        let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n+        let param_env = ty::ParameterEnvironment::for_item(tcx, self.source.item_id());\n \n         let mut first_block = true;\n         let mut cost = 0;\n@@ -390,18 +320,11 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                    callsite: CallSite<'tcx>,\n                    caller_mir: &mut Mir<'tcx>,\n                    mut callee_mir: Mir<'tcx>) -> bool {\n-        // Don't inline a function into itself\n-        if callsite.caller == callsite.callee { return false; }\n-\n-        let _task = self.tcx.dep_graph.in_task(DepNode::Mir(callsite.caller));\n-\n-\n         let terminator = caller_mir[callsite.bb].terminator.take().unwrap();\n         match terminator.kind {\n             // FIXME: Handle inlining of diverging calls\n             TerminatorKind::Call { args, destination: Some(destination), cleanup, .. } => {\n-\n-                debug!(\"Inlined {:?} into {:?}\", callsite.callee, callsite.caller);\n+                debug!(\"Inlined {:?} into {:?}\", callsite.callee, self.source);\n \n                 let is_box_free = Some(callsite.callee) == self.tcx.lang_items.box_free_fn();\n "}]}