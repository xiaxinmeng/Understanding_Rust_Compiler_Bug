{"sha": "07a9e5c0e1c20f66730f608647e96ce29359b91d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YTllNWMwZTFjMjBmNjY3MzBmNjA4NjQ3ZTk2Y2UyOTM1OWI5MWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-20T10:05:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-20T10:05:03Z"}, "message": "document assists", "tree": {"sha": "7b5da44305f0f435b86481a1af514ec33b743e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b5da44305f0f435b86481a1af514ec33b743e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a9e5c0e1c20f66730f608647e96ce29359b91d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a9e5c0e1c20f66730f608647e96ce29359b91d", "html_url": "https://github.com/rust-lang/rust/commit/07a9e5c0e1c20f66730f608647e96ce29359b91d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a9e5c0e1c20f66730f608647e96ce29359b91d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab9fef1ee26c185cdf2b14c3d21ecfae7b0905ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9fef1ee26c185cdf2b14c3d21ecfae7b0905ae", "html_url": "https://github.com/rust-lang/rust/commit/ab9fef1ee26c185cdf2b14c3d21ecfae7b0905ae"}], "stats": {"total": 251, "additions": 203, "deletions": 48}, "files": [{"sha": "aa3bf5157e09c31770229abeeecebaa88ac65cf4", "filename": "docs/user/features.md", "status": "modified", "additions": 203, "deletions": 48, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/07a9e5c0e1c20f66730f608647e96ce29359b91d/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/07a9e5c0e1c20f66730f608647e96ce29359b91d/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=07a9e5c0e1c20f66730f608647e96ce29359b91d", "patch": "@@ -1,79 +1,85 @@\n-This documents is an index of features that rust-analyzer language server provides.\n+This documents is an index of features that rust-analyzer language server\n+provides. Shortcuts are for the default VS Code layout. If there's no shortcut,\n+you can use <kbd>Ctrl+Shift+P</kbd> to search for the corresponding action.\n \n-### Go to symbol in workspace <kbd>ctrl+t</kbd>\n+### Workspace Symbol <kbd>ctrl+t</kbd>\n \n-It mostly works on top of the built-in LSP functionality, however `#` and `*`\n-symbols can be used to narrow down the search. Specifically,\n+Uses fuzzy-search to find types, modules and function by name across your\n+project and dependencies. This **the** most useful feature, which improves code\n+navigation tremendously. It mostly works on top of the built-in LSP\n+functionality, however `#` and `*` symbols can be used to narrow down the\n+search. Specifically,\n \n-- `#Foo` searches for `Foo` type in the current workspace\n-- `#foo#` searches for `foo` function in the current workspace\n-- `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n-- `#foo#*` searches for `foo` function among dependencies.\n+- `Foo` searches for `Foo` type in the current workspace\n+- `foo#` searches for `foo` function in the current workspace\n+- `Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n+- `foo#*` searches for `foo` function among dependencies.\n \n That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n workspace to dependencies.\n \n-### Commands <kbd>ctrl+shift+p</kbd>\n-\n-#### Show Rust Syntax Tree\n-\n-Shows the parse tree of the current file. It exists mostly for debugging\n-rust-analyzer itself.\n+### Document Symbol <kbd>ctrl+shift+o</kbd>\n \n-#### Extend Selection\n+Provides a tree of the symbols defined in the file. Can be used to\n \n-Extends the current selection to the encompassing syntactic construct\n-(expression, statement, item, module, etc). It works with multiple cursors. Do\n-bind this command to a key, its super-useful! Expected to be upstreamed to LSP soonish:\n-https://github.com/Microsoft/language-server-protocol/issues/613\n+* fuzzy search symbol in a file (super useful)\n+* draw breadcrumbs to describe the context around the cursor\n+* draw outline of the file\n \n-#### Matching Brace\n+### On Typing Assists\n \n-If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n-moves cursor to the matching brace. It uses the actual parser to determine\n-braces, so it won't confuse generics with comparisons.\n+Some features trigger on typing certain characters:\n \n-#### Parent Module\n+- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n+- Enter inside comments automatically inserts `///`\n+- typing `.` in a chain method call auto-indents\n \n-Navigates to the parent module of the current module.\n+### Commands <kbd>ctrl+shift+p</kbd>\n \n-#### Join Lines\n+#### Extend Selection\n \n-Join selected lines into one, smartly fixing up whitespace and trailing commas.\n+Extends the current selection to the encompassing syntactic construct\n+(expression, statement, item, module, etc). It works with multiple cursors. Do\n+bind this command to a key, it's super-useful! Expected to be upstreamed to LSP\n+soonish: https://github.com/Microsoft/language-server-protocol/issues/613\n \n #### Run\n \n Shows popup suggesting to run a test/benchmark/binary **at the current cursor\n location**. Super useful for repeatedly running just a single test. Do bind this\n to a shortcut!\n \n+#### Parent Module\n \n-### On Typing Assists\n+Navigates to the parent module of the current module.\n \n-Some features trigger on typing certain characters:\n+#### Matching Brace\n \n-- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n-- Enter inside comments automatically inserts `///`\n-- typing `.` in a chain method call auto-indents\n+If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+moves cursor to the matching brace. It uses the actual parser to determine\n+braces, so it won't confuse generics with comparisons.\n \n+#### Join Lines\n \n+Join selected lines into one, smartly fixing up whitespace and trailing commas.\n \n+#### Show Syntax Tree\n \n+Shows the parse tree of the current file. It exists mostly for debugging\n+rust-analyzer itself.\n \n-### Code Actions (Assists)\n+#### Status\n \n-These are triggered in a particular context via light bulb. We use custom code on\n-the VS Code side to be able to position cursor.\n+Shows internal statistic about memory usage of rust-analyzer\n \n+#### Run garbage collection\n \n-- Flip `,`\n+Manually triggers GC\n \n-```rust\n-// before:\n-fn foo(x: usize,<|> dim: (usize, usize))\n-// after:\n-fn foo(dim: (usize, usize), x: usize)\n-```\n+### Code Actions (Assists)\n+\n+These are triggered in a particular context via light bulb. We use custom code on\n+the VS Code side to be able to position cursor. `<|>` signifies cursor\n \n - Add `#[derive]`\n \n@@ -106,14 +112,147 @@ impl<'a, T: Debug> Foo<'a, T> {\n }\n ```\n \n-- Change visibility\n+- Add missing `impl` members\n \n ```rust\n // before:\n-fn<|> foo() {}\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self);\n+    fn baz(&self);\n+}\n+\n+struct S;\n+\n+impl Foo for S {\n+    fn bar(&self) {}\n+    <|>\n+}\n+\n+// after:\n+trait Foo {\n+    fn foo(&self);\n+    fn bar(&self);\n+    fn baz(&self);\n+}\n \n-// after\n-pub(crate) fn foo() {}\n+struct S;\n+\n+impl Foo for S {\n+    fn bar(&self) {}\n+    fn foo(&self) { unimplemented!() }\n+    fn baz(&self) { unimplemented!() }<|>\n+}\n+```\n+\n+- Import path\n+\n+```rust\n+// before:\n+impl std::fmt::Debug<|> for Foo {\n+}\n+\n+// after:\n+use std::fmt::Debug\n+\n+impl Debug<|> for Foo {\n+}\n+```\n+\n+- Change Visibility\n+\n+```rust\n+// before:\n+<|>fn foo() {}\n+\n+// after:\n+<|>pub(crate) fn foo() {}\n+\n+// after:\n+<|>pub fn foo() {}\n+```\n+\n+- Fill match arms\n+\n+```rust\n+// before:\n+enum A {\n+    As,\n+    Bs,\n+    Cs(String),\n+    Ds(String, String),\n+    Es{x: usize, y: usize}\n+}\n+\n+fn main() {\n+    let a = A::As;\n+    match a<|> {}\n+}\n+\n+// after:\n+enum A {\n+    As,\n+    Bs,\n+    Cs(String),\n+    Ds(String, String),\n+    Es{x: usize, y: usize}\n+}\n+\n+fn main() {\n+    let a = A::As;\n+    match <|>a {\n+        A::As => (),\n+        A::Bs => (),\n+        A::Cs(_) => (),\n+        A::Ds(_, _) => (),\n+        A::Es{x, y} => (),\n+    }\n+}\n+```\n+\n+-- Fill struct fields\n+\n+```rust\n+// before:\n+struct S<'a, D> {\n+    a: u32,\n+    b: String,\n+    c: (i32, i32),\n+    d: D,\n+    r: &'a str,\n+}\n+\n+fn main() {\n+    let s = S<|> {}\n+}\n+\n+// after:\n+struct S<'a, D> {\n+    a: u32,\n+    b: String,\n+    c: (i32, i32),\n+    d: D,\n+    r: &'a str,\n+}\n+\n+fn main() {\n+    let s = <|>S {\n+        a: (),\n+        b: (),\n+        c: (),\n+        d: (),\n+        r: (),\n+    }\n+}\n+```\n+\n+- Flip `,`\n+\n+```rust\n+// before:\n+fn foo(x: usize,<|> dim: (usize, usize)) {}\n+// after:\n+fn foo(dim: (usize, usize), x: usize) {}\n ```\n \n - Introduce variable:\n@@ -131,6 +270,24 @@ fn foo() {\n }\n ```\n \n+-- Remove `dbg!`\n+\n+```rust\n+// before:\n+fn foo(n: usize) {\n+    if let Some(_) = dbg!(n.<|>checked_sub(4)) {\n+        // ...\n+    }\n+}\n+\n+// after:\n+fn foo(n: usize) {\n+    if let Some(_) = n.<|>checked_sub(4) {\n+        // ...\n+    }\n+}\n+```\n+\n - Replace if-let with match:\n \n ```rust\n@@ -164,5 +321,3 @@ use algo:<|>:visitor::{Visitor, visit};\n //after:\n use algo::{<|>visitor::{Visitor, visit}};\n ```\n-\n-"}]}