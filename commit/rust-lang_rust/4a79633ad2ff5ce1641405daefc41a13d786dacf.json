{"sha": "4a79633ad2ff5ce1641405daefc41a13d786dacf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNzk2MzNhZDJmZjVjZTE2NDE0MDVkYWVmYzQxYTEzZDc4NmRhY2Y=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T15:05:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-03T15:05:54Z"}, "message": "review comments", "tree": {"sha": "6297213c02a7d66d338089d3178434e36aa27733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6297213c02a7d66d338089d3178434e36aa27733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a79633ad2ff5ce1641405daefc41a13d786dacf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a79633ad2ff5ce1641405daefc41a13d786dacf", "html_url": "https://github.com/rust-lang/rust/commit/4a79633ad2ff5ce1641405daefc41a13d786dacf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a79633ad2ff5ce1641405daefc41a13d786dacf/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b518474ed2a5dee812e4f356f71f4c60628421", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b518474ed2a5dee812e4f356f71f4c60628421", "html_url": "https://github.com/rust-lang/rust/commit/28b518474ed2a5dee812e4f356f71f4c60628421"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "f7f459cd27f68d2d801e6d82a52c76119e7de820", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a79633ad2ff5ce1641405daefc41a13d786dacf/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a79633ad2ff5ce1641405daefc41a13d786dacf/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=4a79633ad2ff5ce1641405daefc41a13d786dacf", "patch": "@@ -60,13 +60,15 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) =>\n-                format!(\"method `{}`'s receiver cannot be dispatched on\", name).into(),\n+                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into(),\n             ObjectSafetyViolation::AssocConst(name, _) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }\n     }\n \n     pub fn span(&self) -> Option<Span> {\n+        // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n+        // diagnostics use a `note` instead of a `span_label`.\n         match *self {\n             ObjectSafetyViolation::AssocConst(_, span) |\n             ObjectSafetyViolation::Method(_, _, span) if span != DUMMY_SP => Some(span),"}, {"sha": "e6eba377a9578c9178a282268ee3c866e92c556e", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a79633ad2ff5ce1641405daefc41a13d786dacf/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a79633ad2ff5ce1641405daefc41a13d786dacf/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.stderr?ref=4a79633ad2ff5ce1641405daefc41a13d786dacf", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:32\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s receiver cannot be dispatched on\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n@@ -11,7 +11,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:31:13\n    |\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- method `foo`'s receiver cannot be dispatched on\n+   |        --- method `foo`'s `self` parameter cannot be dispatched on\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object"}]}