{"sha": "f75d1b2bc5b5794ccc43925f36900d404211eeda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NWQxYjJiYzViNTc5NGNjYzQzOTI1ZjM2OTAwZDQwNDIxMWVlZGE=", "commit": {"author": {"name": "xordi", "email": "jordi.obuades@gmail.com", "date": "2021-08-26T14:14:37Z"}, "committer": {"name": "xordi", "email": "jordi.obuades@gmail.com", "date": "2021-08-31T06:56:53Z"}, "message": "Check for Not trait implementation", "tree": {"sha": "bbece68ceadd6984c8be941f8557405bd26d078d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbece68ceadd6984c8be941f8557405bd26d078d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f75d1b2bc5b5794ccc43925f36900d404211eeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f75d1b2bc5b5794ccc43925f36900d404211eeda", "html_url": "https://github.com/rust-lang/rust/commit/f75d1b2bc5b5794ccc43925f36900d404211eeda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f75d1b2bc5b5794ccc43925f36900d404211eeda/comments", "author": {"login": "xordi", "id": 915557, "node_id": "MDQ6VXNlcjkxNTU1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/915557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xordi", "html_url": "https://github.com/xordi", "followers_url": "https://api.github.com/users/xordi/followers", "following_url": "https://api.github.com/users/xordi/following{/other_user}", "gists_url": "https://api.github.com/users/xordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/xordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xordi/subscriptions", "organizations_url": "https://api.github.com/users/xordi/orgs", "repos_url": "https://api.github.com/users/xordi/repos", "events_url": "https://api.github.com/users/xordi/events{/privacy}", "received_events_url": "https://api.github.com/users/xordi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xordi", "id": 915557, "node_id": "MDQ6VXNlcjkxNTU1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/915557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xordi", "html_url": "https://github.com/xordi", "followers_url": "https://api.github.com/users/xordi/followers", "following_url": "https://api.github.com/users/xordi/following{/other_user}", "gists_url": "https://api.github.com/users/xordi/gists{/gist_id}", "starred_url": "https://api.github.com/users/xordi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xordi/subscriptions", "organizations_url": "https://api.github.com/users/xordi/orgs", "repos_url": "https://api.github.com/users/xordi/repos", "events_url": "https://api.github.com/users/xordi/events{/privacy}", "received_events_url": "https://api.github.com/users/xordi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd30241281333d73d504355b2f4d0ecd94f27b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd30241281333d73d504355b2f4d0ecd94f27b0e", "html_url": "https://github.com/rust-lang/rust/commit/fd30241281333d73d504355b2f4d0ecd94f27b0e"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "171d22f998666439352703ff6c48c72c98b6e33c", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 62, "deletions": 28, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f75d1b2bc5b5794ccc43925f36900d404211eeda/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75d1b2bc5b5794ccc43925f36900d404211eeda/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=f75d1b2bc5b5794ccc43925f36900d404211eeda", "patch": "@@ -1,9 +1,11 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{ast_utils, is_direct_expn_of};\n-use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, higher, is_direct_expn_of, ty::implements_trait};\n+use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_hir::*;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -28,45 +30,77 @@ declare_clippy_lint! {\n \n declare_lint_pass!(BoolAssertComparison => [BOOL_ASSERT_COMPARISON]);\n \n-fn is_bool_lit(e: &Expr) -> bool {\n+fn is_bool_lit(e: &Expr<'_>) -> bool {\n     matches!(\n         e.kind,\n         ExprKind::Lit(Lit {\n-            kind: LitKind::Bool(_),\n+            node: LitKind::Bool(_),\n             ..\n         })\n     ) && !e.span.from_expansion()\n }\n \n-impl EarlyLintPass for BoolAssertComparison {\n-    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n+fn impl_not_trait_with_bool_out(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(e);\n+\n+    cx.tcx\n+        .lang_items()\n+        .not_trait()\n+        .filter(|id| implements_trait(cx, ty, *id, &[]))\n+        .and_then(|id| {\n+            cx.tcx.associated_items(id).find_by_name_and_kind(\n+                cx.tcx,\n+                Ident::from_str(\"Output\"),\n+                ty::AssocKind::Type,\n+                id,\n+            )\n+        })\n+        .map_or(false, |item| {\n+            let proj = cx.tcx.mk_projection(item.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            let nty = cx.tcx.normalize_erasing_regions(cx.param_env, proj);\n+\n+            nty.is_bool()\n+        })\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let macros = [\"assert_eq\", \"debug_assert_eq\"];\n         let inverted_macros = [\"assert_ne\", \"debug_assert_ne\"];\n \n         for mac in macros.iter().chain(inverted_macros.iter()) {\n-            if let Some(span) = is_direct_expn_of(e.span, mac) {\n-                if let Some([a, b]) = ast_utils::extract_assert_macro_args(e) {\n-                    let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+            if let Some(span) = is_direct_expn_of(expr.span, mac) {\n+                if let Some(args) = higher::extract_assert_macro_args(expr) {\n+                    if let [a, b, ..] = args[..] {\n+                        let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+\n+                        if nb_bool_args != 1 {\n+                            // If there are two boolean arguments, we definitely don't understand\n+                            // what's going on, so better leave things as is...\n+                            //\n+                            // Or there is simply no boolean and then we can leave things as is!\n+                            return;\n+                        }\n \n-                    if nb_bool_args != 1 {\n-                        // If there are two boolean arguments, we definitely don't understand\n-                        // what's going on, so better leave things as is...\n-                        //\n-                        // Or there is simply no boolean and then we can leave things as is!\n+                        if !impl_not_trait_with_bool_out(cx, a) || !impl_not_trait_with_bool_out(cx, b) {\n+                            // At this point the expression which is not a boolean\n+                            // literal does not implement Not trait with a bool output,\n+                            // so we cannot suggest to rewrite our code\n+                            return;\n+                        }\n+\n+                        let non_eq_mac = &mac[..mac.len() - 3];\n+                        span_lint_and_sugg(\n+                            cx,\n+                            BOOL_ASSERT_COMPARISON,\n+                            span,\n+                            &format!(\"used `{}!` with a literal bool\", mac),\n+                            \"replace it with\",\n+                            format!(\"{}!(..)\", non_eq_mac),\n+                            Applicability::MaybeIncorrect,\n+                        );\n                         return;\n                     }\n-\n-                    let non_eq_mac = &mac[..mac.len() - 3];\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_ASSERT_COMPARISON,\n-                        span,\n-                        &format!(\"used `{}!` with a literal bool\", mac),\n-                        \"replace it with\",\n-                        format!(\"{}!(..)\", non_eq_mac),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    return;\n                 }\n             }\n         }"}, {"sha": "5987f9e5b0cb8ab992c861aa4738f5ff8eb09174", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f75d1b2bc5b5794ccc43925f36900d404211eeda/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f75d1b2bc5b5794ccc43925f36900d404211eeda/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f75d1b2bc5b5794ccc43925f36900d404211eeda", "patch": "@@ -2115,7 +2115,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n     store.register_late_pass(|| box manual_map::ManualMap);\n     store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n-    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n+    store.register_late_pass(|| box bool_assert_comparison::BoolAssertComparison);\n     store.register_early_pass(move || box module_style::ModStyle);\n     store.register_late_pass(|| box unused_async::UnusedAsync);\n     let disallowed_types = conf.disallowed_types.iter().cloned().collect::<FxHashSet<_>>();"}]}