{"sha": "5a9ca311e36eb6f336f0a8f24df842bdca824388", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOWNhMzExZTM2ZWI2ZjMzNmYwYThmMjRkZjg0MmJkY2E4MjQzODg=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-08T14:40:14Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-07-08T14:43:39Z"}, "message": "Remove proc macro management thread", "tree": {"sha": "7030677142053c698e78a4ad6801aad1b9fd36e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7030677142053c698e78a4ad6801aad1b9fd36e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a9ca311e36eb6f336f0a8f24df842bdca824388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9ca311e36eb6f336f0a8f24df842bdca824388", "html_url": "https://github.com/rust-lang/rust/commit/5a9ca311e36eb6f336f0a8f24df842bdca824388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a9ca311e36eb6f336f0a8f24df842bdca824388/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552b50de9ec8ed4d2d9ced9d267c72b40474e687", "url": "https://api.github.com/repos/rust-lang/rust/commits/552b50de9ec8ed4d2d9ced9d267c72b40474e687", "html_url": "https://github.com/rust-lang/rust/commit/552b50de9ec8ed4d2d9ced9d267c72b40474e687"}], "stats": {"total": 111, "additions": 42, "deletions": 69}, "files": [{"sha": "5054bc7643da9c2f1e162b18e035dda173ddfebc", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a9ca311e36eb6f336f0a8f24df842bdca824388/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9ca311e36eb6f336f0a8f24df842bdca824388/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=5a9ca311e36eb6f336f0a8f24df842bdca824388", "patch": "@@ -20,7 +20,7 @@ use std::{\n \n use tt::{SmolStr, Subtree};\n \n-use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n+use crate::process::ProcMacroProcessSrv;\n \n pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n pub use version::{read_dylib_info, RustCInfo};\n@@ -64,16 +64,16 @@ impl base_db::ProcMacroExpander for ProcMacroProcessExpander {\n #[derive(Debug)]\n pub struct ProcMacroClient {\n     process: Arc<ProcMacroProcessSrv>,\n-    thread: ProcMacroProcessThread,\n }\n \n impl ProcMacroClient {\n+    /// Spawns an external process as the proc macro server and returns a client connected to it.\n     pub fn extern_process(\n         process_path: PathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n-        let (thread, process) = ProcMacroProcessSrv::run(process_path, args)?;\n-        Ok(ProcMacroClient { process: Arc::new(process), thread })\n+        let process = ProcMacroProcessSrv::run(process_path, args)?;\n+        Ok(ProcMacroClient { process: Arc::new(process) })\n     }\n \n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {"}, {"sha": "592c1282c0bce575400ac8236cb141f693cff8c4", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 37, "deletions": 65, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/5a9ca311e36eb6f336f0a8f24df842bdca824388/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9ca311e36eb6f336f0a8f24df842bdca824388/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=5a9ca311e36eb6f336f0a8f24df842bdca824388", "patch": "@@ -3,52 +3,45 @@\n use std::{\n     convert::{TryFrom, TryInto},\n     ffi::{OsStr, OsString},\n+    fmt,\n     io::{self, BufRead, BufReader, Write},\n     path::{Path, PathBuf},\n-    process::{Child, Command, Stdio},\n-    sync::{Arc, Weak},\n+    process::{Child, ChildStdin, ChildStdout, Command, Stdio},\n+    sync::Mutex,\n };\n \n-use crossbeam_channel::{bounded, Receiver, Sender};\n use stdx::JodChild;\n \n use crate::{\n     msg::{ErrorCode, Message, Request, Response, ResponseError},\n     rpc::{ListMacrosResult, ListMacrosTask, ProcMacroKind},\n };\n \n-#[derive(Debug, Default)]\n pub(crate) struct ProcMacroProcessSrv {\n-    inner: Weak<Sender<Task>>,\n+    process: Mutex<Process>,\n+    stdio: Mutex<(ChildStdin, BufReader<ChildStdout>)>,\n }\n \n-#[derive(Debug)]\n-pub(crate) struct ProcMacroProcessThread {\n-    // XXX: drop order is significant\n-    sender: Arc<Sender<Task>>,\n-    handle: jod_thread::JoinHandle<()>,\n+impl fmt::Debug for ProcMacroProcessSrv {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"ProcMacroProcessSrv\").field(\"process\", &self.process).finish()\n+    }\n }\n \n impl ProcMacroProcessSrv {\n     pub(crate) fn run(\n         process_path: PathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n-    ) -> io::Result<(ProcMacroProcessThread, ProcMacroProcessSrv)> {\n-        let process = Process::run(process_path, args)?;\n-\n-        let (task_tx, task_rx) = bounded(0);\n-        let handle = jod_thread::Builder::new()\n-            .name(\"ProcMacroClient\".to_owned())\n-            .spawn(move || {\n-                client_loop(task_rx, process);\n-            })\n-            .expect(\"failed to spawn thread\");\n-\n-        let task_tx = Arc::new(task_tx);\n-        let srv = ProcMacroProcessSrv { inner: Arc::downgrade(&task_tx) };\n-        let thread = ProcMacroProcessThread { handle, sender: task_tx };\n-\n-        Ok((thread, srv))\n+    ) -> io::Result<ProcMacroProcessSrv> {\n+        let mut process = Process::run(process_path, args)?;\n+        let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n+\n+        let srv = ProcMacroProcessSrv {\n+            process: Mutex::new(process),\n+            stdio: Mutex::new((stdin, stdout)),\n+        };\n+\n+        Ok(srv)\n     }\n \n     pub(crate) fn find_proc_macros(\n@@ -65,38 +58,15 @@ impl ProcMacroProcessSrv {\n     where\n         R: TryFrom<Response, Error = &'static str>,\n     {\n-        let (result_tx, result_rx) = bounded(0);\n-        let sender = match self.inner.upgrade() {\n-            None => return Err(tt::ExpansionError::Unknown(\"proc macro process is closed\".into())),\n-            Some(it) => it,\n-        };\n-        sender\n-            .send(Task { req, result_tx })\n-            .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n+        let mut guard = self.stdio.lock().unwrap_or_else(|e| e.into_inner());\n+        let stdio = &mut *guard;\n+        let (stdin, stdout) = (&mut stdio.0, &mut stdio.1);\n \n-        let res = result_rx\n-            .recv()\n-            .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n-\n-        match res {\n-            Some(Response::Error(err)) => Err(tt::ExpansionError::ExpansionError(err.message)),\n-            Some(res) => Ok(res.try_into().map_err(|err| {\n-                tt::ExpansionError::Unknown(format!(\"Fail to get response, reason : {:#?} \", err))\n-            })?),\n-            None => Err(tt::ExpansionError::Unknown(\"Empty result\".into())),\n-        }\n-    }\n-}\n-\n-fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n-    let (mut stdin, mut stdout) = process.stdio().expect(\"couldn't access child stdio\");\n-\n-    let mut buf = String::new();\n-\n-    for Task { req, result_tx } in task_rx {\n-        match send_request(&mut stdin, &mut stdout, req, &mut buf) {\n-            Ok(res) => result_tx.send(res).unwrap(),\n+        let mut buf = String::new();\n+        let res = match send_request(stdin, stdout, req, &mut buf) {\n+            Ok(res) => res,\n             Err(err) => {\n+                let mut process = self.process.lock().unwrap_or_else(|e| e.into_inner());\n                 log::error!(\n                     \"proc macro server crashed, server process state: {:?}, server request error: {:?}\",\n                     process.child.try_wait(),\n@@ -106,19 +76,21 @@ fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n                     code: ErrorCode::ServerErrorEnd,\n                     message: \"proc macro server crashed\".into(),\n                 });\n-                result_tx.send(res.into()).unwrap();\n-                // Exit the thread.\n-                break;\n+                Some(res)\n             }\n+        };\n+\n+        match res {\n+            Some(Response::Error(err)) => Err(tt::ExpansionError::ExpansionError(err.message)),\n+            Some(res) => Ok(res.try_into().map_err(|err| {\n+                tt::ExpansionError::Unknown(format!(\"Fail to get response, reason : {:#?} \", err))\n+            })?),\n+            None => Err(tt::ExpansionError::Unknown(\"Empty result\".into())),\n         }\n     }\n }\n \n-struct Task {\n-    req: Request,\n-    result_tx: Sender<Option<Response>>,\n-}\n-\n+#[derive(Debug)]\n struct Process {\n     child: JodChild,\n }\n@@ -133,7 +105,7 @@ impl Process {\n         Ok(Process { child })\n     }\n \n-    fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {\n+    fn stdio(&mut self) -> Option<(ChildStdin, BufReader<ChildStdout>)> {\n         let stdin = self.child.stdin.take()?;\n         let stdout = self.child.stdout.take()?;\n         let read = BufReader::new(stdout);"}, {"sha": "e83d5db437d1d218d5fe3c3696e23790366b9de1", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a9ca311e36eb6f336f0a8f24df842bdca824388/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9ca311e36eb6f336f0a8f24df842bdca824388/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=5a9ca311e36eb6f336f0a8f24df842bdca824388", "patch": "@@ -111,6 +111,7 @@ pub fn defer<F: FnOnce()>(f: F) -> impl Drop {\n }\n \n #[cfg_attr(not(target_arch = \"wasm32\"), repr(transparent))]\n+#[derive(Debug)]\n pub struct JodChild(pub std::process::Child);\n \n impl ops::Deref for JodChild {"}]}