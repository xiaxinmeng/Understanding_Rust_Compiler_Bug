{"sha": "de74c0dcab2efd50d68f70d15de3fced718e8c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNzRjMGRjYWIyZWZkNTBkNjhmNzBkMTVkZTNmY2VkNzE4ZThjN2E=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-06T09:00:46Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-06T15:17:52Z"}, "message": "Preliminary runnables refactoring", "tree": {"sha": "96b949d903878a69b5732cd920192c6e16cb9dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b949d903878a69b5732cd920192c6e16cb9dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de74c0dcab2efd50d68f70d15de3fced718e8c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de74c0dcab2efd50d68f70d15de3fced718e8c7a", "html_url": "https://github.com/rust-lang/rust/commit/de74c0dcab2efd50d68f70d15de3fced718e8c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de74c0dcab2efd50d68f70d15de3fced718e8c7a/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a92b4fefecbd63d8c7c82a5553cd209c068144", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a92b4fefecbd63d8c7c82a5553cd209c068144", "html_url": "https://github.com/rust-lang/rust/commit/d4a92b4fefecbd63d8c7c82a5553cd209c068144"}], "stats": {"total": 176, "additions": 122, "deletions": 54}, "files": [{"sha": "9f7b5edfd5766879eecba712e6606b4c93f02597", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/de74c0dcab2efd50d68f70d15de3fced718e8c7a/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74c0dcab2efd50d68f70d15de3fced718e8c7a/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=de74c0dcab2efd50d68f70d15de3fced718e8c7a", "patch": "@@ -42,6 +42,42 @@ pub enum RunnableKind {\n     Bin,\n }\n \n+#[derive(Debug, Eq, PartialEq)]\n+pub struct RunnableAction {\n+    pub run_title: &'static str,\n+    pub debugee: bool,\n+}\n+\n+const TEST: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Test\", debugee: true };\n+const DOCTEST: RunnableAction =\n+    RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Doctest\", debugee: false };\n+const BENCH: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Bench\", debugee: true };\n+const BIN: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run\", debugee: true };\n+\n+impl Runnable {\n+    // test package::module::testname\n+    pub fn label(&self, target: Option<String>) -> String {\n+        match &self.kind {\n+            RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n+            RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n+            RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n+            RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n+            RunnableKind::Bin => {\n+                target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n+            }\n+        }\n+    }\n+\n+    pub fn action(&self) -> &'static RunnableAction {\n+        match &self.kind {\n+            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => &TEST,\n+            RunnableKind::DocTest { .. } => &DOCTEST,\n+            RunnableKind::Bench { .. } => &BENCH,\n+            RunnableKind::Bin => &BIN,\n+        }\n+    }\n+}\n+\n // Feature: Run\n //\n // Shows a popup suggesting to run a test/benchmark/binary **at the current cursor\n@@ -207,6 +243,15 @@ mod tests {\n \n     use crate::mock_analysis::analysis_and_position;\n \n+    use super::{Runnable, RunnableAction, BENCH, BIN, DOCTEST, TEST};\n+\n+    fn assert_actions(runnables: &[Runnable], actions: &[&RunnableAction]) {\n+        assert_eq!(\n+            actions,\n+            runnables.into_iter().map(|it| it.action()).collect::<Vec<_>>().as_slice()\n+        );\n+    }\n+\n     #[test]\n     fn test_runnables() {\n         let (analysis, pos) = analysis_and_position(\n@@ -221,6 +266,9 @@ mod tests {\n         #[test]\n         #[ignore]\n         fn test_foo() {}\n+\n+        #[bench]\n+        fn bench() {}\n         \"#,\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n@@ -295,9 +343,32 @@ mod tests {\n                 },\n                 cfg_exprs: [],\n             },\n+            Runnable {\n+                nav: NavigationTarget {\n+                    file_id: FileId(\n+                        1,\n+                    ),\n+                    full_range: 82..104,\n+                    name: \"bench\",\n+                    kind: FN_DEF,\n+                    focus_range: Some(\n+                        94..99,\n+                    ),\n+                    container_name: None,\n+                    description: None,\n+                    docs: None,\n+                },\n+                kind: Bench {\n+                    test_id: Path(\n+                        \"bench\",\n+                    ),\n+                },\n+                cfg_exprs: [],\n+            },\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&BIN, &TEST, &TEST, &BENCH]);\n     }\n \n     #[test]\n@@ -361,6 +432,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&BIN, &DOCTEST]);\n     }\n \n     #[test]\n@@ -427,6 +499,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&BIN, &DOCTEST]);\n     }\n \n     #[test]\n@@ -493,6 +566,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST, &TEST]);\n     }\n \n     #[test]\n@@ -561,6 +635,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST, &TEST]);\n     }\n \n     #[test]\n@@ -631,6 +706,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST, &TEST]);\n     }\n \n     #[test]\n@@ -681,6 +757,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST]);\n     }\n \n     #[test]\n@@ -739,6 +816,7 @@ mod tests {\n         ]\n         \"###\n                 );\n+        assert_actions(&runnables, &[&TEST]);\n     }\n \n     #[test]"}, {"sha": "da16976d3daab11fbc299b10a57b7ab88ff5a7b3", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 42, "deletions": 44, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/de74c0dcab2efd50d68f70d15de3fced718e8c7a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74c0dcab2efd50d68f70d15de3fced718e8c7a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=de74c0dcab2efd50d68f70d15de3fced718e8c7a", "patch": "@@ -18,7 +18,7 @@ use lsp_types::{\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, RunnableKind, SearchScope,\n+    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n     TextEdit,\n };\n use ra_prof::profile;\n@@ -403,16 +403,11 @@ pub fn handle_runnables(\n             if !runnable.nav.full_range().contains_inclusive(offset) {\n                 continue;\n             }\n+        }        \n+        if is_lib_target(&runnable, cargo_spec.as_ref()) {\n+            continue;\n         }\n-        // Do not suggest binary run on other target than binary\n-        if let RunnableKind::Bin = runnable.kind {\n-            if let Some(spec) = &cargo_spec {\n-                match spec.target_kind {\n-                    TargetKind::Bin => {}\n-                    _ => continue,\n-                }\n-            }\n-        }\n+\n         res.push(to_proto::runnable(&snap, file_id, runnable)?);\n     }\n \n@@ -817,53 +812,26 @@ pub fn handle_code_lens(\n     if snap.config.lens.runnable() {\n         // Gather runnables\n         for runnable in snap.analysis().runnables(file_id)? {\n-            let (run_title, debugee) = match &runnable.kind {\n-                RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => {\n-                    (\"\u25b6\\u{fe0e} Run Test\", true)\n-                }\n-                RunnableKind::DocTest { .. } => {\n-                    // cargo does not support -no-run for doctests\n-                    (\"\u25b6\\u{fe0e} Run Doctest\", false)\n-                }\n-                RunnableKind::Bench { .. } => {\n-                    // Nothing wrong with bench debugging\n-                    (\"Run Bench\", true)\n-                }\n-                RunnableKind::Bin => {\n-                    // Do not suggest binary run on other target than binary\n-                    match &cargo_spec {\n-                        Some(spec) => match spec.target_kind {\n-                            TargetKind::Bin => (\"Run\", true),\n-                            _ => continue,\n-                        },\n-                        None => continue,\n-                    }\n-                }\n-            };\n+            if is_lib_target(&runnable, cargo_spec.as_ref()) {\n+                continue;\n+            }\n \n+            let action = runnable.action();\n             let range = to_proto::range(&line_index, runnable.nav.range());\n             let r = to_proto::runnable(&snap, file_id, runnable)?;\n             if snap.config.lens.run {\n                 let lens = CodeLens {\n                     range,\n-                    command: Some(Command {\n-                        title: run_title.to_string(),\n-                        command: \"rust-analyzer.runSingle\".into(),\n-                        arguments: Some(vec![to_value(&r).unwrap()]),\n-                    }),\n+                    command: Some(run_single_command(&r, action.run_title)),\n                     data: None,\n                 };\n                 lenses.push(lens);\n             }\n \n-            if debugee && snap.config.lens.debug {\n+            if action.debugee && snap.config.lens.debug {\n                 let debug_lens = CodeLens {\n                     range,\n-                    command: Some(Command {\n-                        title: \"Debug\".into(),\n-                        command: \"rust-analyzer.debugSingle\".into(),\n-                        arguments: Some(vec![to_value(r).unwrap()]),\n-                    }),\n+                    command: Some(debug_single_command(r)),\n                     data: None,\n                 };\n                 lenses.push(debug_lens);\n@@ -1169,6 +1137,22 @@ fn show_references_command(\n     }\n }\n \n+fn run_single_command(runnable: &lsp_ext::Runnable, title: &str) -> Command {\n+    Command {\n+        title: title.to_string(),\n+        command: \"rust-analyzer.runSingle\".into(),\n+        arguments: Some(vec![to_value(runnable).unwrap()]),\n+    }\n+}\n+\n+fn debug_single_command(runnable: lsp_ext::Runnable) -> Command {\n+    Command {\n+        title: \"Debug\".into(),\n+        command: \"rust-analyzer.debugSingle\".into(),\n+        arguments: Some(vec![to_value(runnable).unwrap()]),\n+    }\n+}\n+\n fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }\n@@ -1214,3 +1198,17 @@ fn prepare_hover_actions(\n         })\n         .collect()\n }\n+\n+fn is_lib_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>) -> bool {\n+    // Do not suggest binary run on other target than binary\n+    if let RunnableKind::Bin = runnable.kind {\n+        if let Some(spec) = cargo_spec {\n+            match spec.target_kind {\n+                TargetKind::Bin => return true,\n+                _ => ()\n+            }\n+        }\n+    }\n+\n+    false\n+}\n\\ No newline at end of file"}, {"sha": "710df1fbdec4e7d3e530b8c2d64fbe083bd5641e", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de74c0dcab2efd50d68f70d15de3fced718e8c7a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74c0dcab2efd50d68f70d15de3fced718e8c7a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=de74c0dcab2efd50d68f70d15de3fced718e8c7a", "patch": "@@ -4,7 +4,7 @@ use ra_ide::{\n     Assist, CompletionItem, CompletionItemKind, Documentation, FileSystemEdit, Fold, FoldKind,\n     FunctionSignature, Highlight, HighlightModifier, HighlightTag, HighlightedRange, Indel,\n     InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess,\n-    ResolvedAssist, Runnable, RunnableKind, Severity, SourceChange, SourceFileEdit, TextEdit,\n+    ResolvedAssist, Runnable, Severity, SourceChange, SourceFileEdit, TextEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_vfs::LineEndings;\n@@ -662,15 +662,7 @@ pub(crate) fn runnable(\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n         CargoTargetSpec::runnable_args(spec, &runnable.kind, &runnable.cfg_exprs)?;\n-    let label = match &runnable.kind {\n-        RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n-        RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n-        RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n-        RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n-        RunnableKind::Bin => {\n-            target.map_or_else(|| \"run binary\".to_string(), |t| format!(\"run {}\", t))\n-        }\n-    };\n+    let label = runnable.label(target);\n     let location = location_link(snap, None, runnable.nav)?;\n \n     Ok(lsp_ext::Runnable {"}]}