{"sha": "bb4761d1ebd47ec966a4774c087c645dc3a0227d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNDc2MWQxZWJkNDdlYzk2NmE0Nzc0YzA4N2M2NDVkYzNhMDIyN2Q=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-26T00:27:56Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-26T00:27:56Z"}, "message": "Merge `pub-restricted` and `visibility` test", "tree": {"sha": "3893941ee6f330502e15202088812b10467797e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3893941ee6f330502e15202088812b10467797e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb4761d1ebd47ec966a4774c087c645dc3a0227d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4761d1ebd47ec966a4774c087c645dc3a0227d", "html_url": "https://github.com/rust-lang/rust/commit/bb4761d1ebd47ec966a4774c087c645dc3a0227d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb4761d1ebd47ec966a4774c087c645dc3a0227d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b959c75b3135189a90a1d3f630d702266270763f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b959c75b3135189a90a1d3f630d702266270763f", "html_url": "https://github.com/rust-lang/rust/commit/b959c75b3135189a90a1d3f630d702266270763f"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "f828e642abdcad6ce3c896de07fbd9d2b1054c27", "filename": "src/test/rustdoc/pub-restricted.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b959c75b3135189a90a1d3f630d702266270763f/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b959c75b3135189a90a1d3f630d702266270763f/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-restricted.rs?ref=b959c75b3135189a90a1d3f630d702266270763f", "patch": "@@ -1,32 +0,0 @@\n-// compile-flags: --document-private-items\n-\n-#![feature(crate_visibility_modifier)]\n-\n-#![crate_name = \"foo\"]\n-\n-// @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n-pub struct FooPublic;\n-// @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n-crate struct FooJustCrate;\n-// @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n-pub(crate) struct FooPubCrate;\n-// @has 'foo/struct.FooSelf.html' '//pre' 'pub(crate) struct FooSelf'\n-pub(self) struct FooSelf;\n-// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(crate) struct FooInSelf'\n-pub(in self) struct FooInSelf;\n-mod a {\n-    // @has 'foo/a/struct.FooASuper.html' '//pre' 'pub(crate) struct FooASuper'\n-    pub(super) struct FooASuper;\n-    // @has 'foo/a/struct.FooAInSuper.html' '//pre' 'pub(crate) struct FooAInSuper'\n-    pub(in super) struct FooAInSuper;\n-    // @has 'foo/a/struct.FooAInA.html' '//pre' 'struct FooAInA'\n-    pub(in a) struct FooAInA;\n-    mod b {\n-        // @has 'foo/a/b/struct.FooBSuper.html' '//pre' 'pub(super) struct FooBSuper'\n-        pub(super) struct FooBSuper;\n-        // @has 'foo/a/b/struct.FooBInSuperSuper.html' '//pre' 'pub(crate) struct FooBInSuperSuper'\n-        pub(in super::super) struct FooBInSuperSuper;\n-        // @has 'foo/a/b/struct.FooBInAB.html' '//pre' 'struct FooBInAB'\n-        pub(in a::b) struct FooBInAB;\n-    }\n-}"}, {"sha": "ebb314a7941b61f7ffc3a7f202bd3d03f7402ef4", "filename": "src/test/rustdoc/visibility.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb4761d1ebd47ec966a4774c087c645dc3a0227d/src%2Ftest%2Frustdoc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4761d1ebd47ec966a4774c087c645dc3a0227d/src%2Ftest%2Frustdoc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fvisibility.rs?ref=bb4761d1ebd47ec966a4774c087c645dc3a0227d", "patch": "@@ -1,13 +1,40 @@\n // compile-flags: --document-private-items\n \n+#![feature(crate_visibility_modifier)]\n+\n #![crate_name = \"foo\"]\n \n-// @has 'foo/fn.foo.html' '//pre' 'fn foo'\n-// !@has 'foo/fn.foo.html' '//pre' 'pub'\n-fn foo() {}\n+// @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n+pub struct FooPublic;\n+// @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n+crate struct FooJustCrate;\n+// @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n+pub(crate) struct FooPubCrate;\n+// @has 'foo/struct.FooSelf.html' '//pre' 'pub(crate) struct FooSelf'\n+pub(self) struct FooSelf;\n+// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(crate) struct FooInSelf'\n+pub(in self) struct FooInSelf;\n+// @has 'foo/struct.FooPriv.html' '//pre' 'pub(crate) struct FooPriv'\n+struct FooPriv;\n+\n+mod a {\n+    // @has 'foo/a/struct.FooASuper.html' '//pre' 'pub(crate) struct FooASuper'\n+    pub(super) struct FooASuper;\n+    // @has 'foo/a/struct.FooAInSuper.html' '//pre' 'pub(crate) struct FooAInSuper'\n+    pub(in super) struct FooAInSuper;\n+    // @has 'foo/a/struct.FooAInA.html' '//pre' 'struct FooAInA'\n+    pub(in a) struct FooAInA;\n+    // @has 'foo/a/struct.FooAPriv.html' '//pre' 'struct FooAPriv'\n+    struct FooAPriv;\n \n-mod bar {\n-    // @has 'foo/bar/fn.baz.html' '//pre' 'fn baz'\n-    // !@has 'foo/bar/fn.baz.html' '//pre' 'pub'\n-    fn baz() {}\n+    mod b {\n+        // @has 'foo/a/b/struct.FooBSuper.html' '//pre' 'pub(super) struct FooBSuper'\n+        pub(super) struct FooBSuper;\n+        // @has 'foo/a/b/struct.FooBInSuperSuper.html' '//pre' 'pub(crate) struct FooBInSuperSuper'\n+        pub(in super::super) struct FooBInSuperSuper;\n+        // @has 'foo/a/b/struct.FooBInAB.html' '//pre' 'struct FooBInAB'\n+        pub(in a::b) struct FooBInAB;\n+        // @has 'foo/a/b/struct.FooBPriv.html' '//pre' 'struct FooBPriv'\n+        struct FooBPriv;\n+    }\n }"}]}