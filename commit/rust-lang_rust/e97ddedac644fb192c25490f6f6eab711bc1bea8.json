{"sha": "e97ddedac644fb192c25490f6f6eab711bc1bea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5N2RkZWRhYzY0NGZiMTkyYzI1NDkwZjZmNmVhYjcxMWJjMWJlYTg=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-16T01:14:59Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-16T01:14:59Z"}, "message": "added some docs for StyledBuffer", "tree": {"sha": "09a2ed43b74f3311ec831e36d2e184b39fd0b43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a2ed43b74f3311ec831e36d2e184b39fd0b43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97ddedac644fb192c25490f6f6eab711bc1bea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97ddedac644fb192c25490f6f6eab711bc1bea8", "html_url": "https://github.com/rust-lang/rust/commit/e97ddedac644fb192c25490f6f6eab711bc1bea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97ddedac644fb192c25490f6f6eab711bc1bea8/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5229916e350e5b70a6db4f3378f63993eaecb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5229916e350e5b70a6db4f3378f63993eaecb3d", "html_url": "https://github.com/rust-lang/rust/commit/f5229916e350e5b70a6db4f3378f63993eaecb3d"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "a89d0aeaffd84fd5b1f87518d13842019ab0c437", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e97ddedac644fb192c25490f6f6eab711bc1bea8/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97ddedac644fb192c25490f6f6eab711bc1bea8/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=e97ddedac644fb192c25490f6f6eab711bc1bea8", "patch": "@@ -30,6 +30,7 @@ impl StyledBuffer {\n         StyledBuffer { text: vec![] }\n     }\n \n+    /// Returns content of `StyledBuffer` splitted by lines and line styles\n     pub fn render(&self) -> Vec<Vec<StyledString>> {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n         debug_assert!(self.text.iter().all(|r| !r.iter().any(|sc| sc.chr == '\\t')));\n@@ -70,6 +71,9 @@ impl StyledBuffer {\n         }\n     }\n \n+    /// Sets `chr` with `style` for given `line`, `col`.\n+    /// If line not exist in `StyledBuffer`, adds lines up to given\n+    /// and fills last line with spaces and `Style::NoStyle` style\n     pub fn putc(&mut self, line: usize, col: usize, chr: char, style: Style) {\n         self.ensure_lines(line);\n         if col < self.text[line].len() {\n@@ -84,6 +88,9 @@ impl StyledBuffer {\n         }\n     }\n \n+    /// Sets `string` with `style` for given `line`, starting from `col`.\n+    /// If line not exist in `StyledBuffer`, adds lines up to given\n+    /// and fills last line with spaces and `Style::NoStyle` style\n     pub fn puts(&mut self, line: usize, col: usize, string: &str, style: Style) {\n         let mut n = col;\n         for c in string.chars() {\n@@ -92,6 +99,8 @@ impl StyledBuffer {\n         }\n     }\n \n+    /// For given `line` inserts `string` with `style` before old content of that line,\n+    /// adding lines if needed\n     pub fn prepend(&mut self, line: usize, string: &str, style: Style) {\n         self.ensure_lines(line);\n         let string_len = string.chars().count();\n@@ -104,6 +113,8 @@ impl StyledBuffer {\n         self.puts(line, 0, string, style);\n     }\n \n+    /// For given `line` inserts `string` with `style` after old content of that line,\n+    /// adding lines if needed\n     pub fn append(&mut self, line: usize, string: &str, style: Style) {\n         if line >= self.text.len() {\n             self.puts(line, 0, string, style);\n@@ -117,6 +128,9 @@ impl StyledBuffer {\n         self.text.len()\n     }\n \n+    /// Set `style` for `line`, `col_start..col_end` range if:\n+    /// 1. That line and column range exist in `StyledBuffer`\n+    /// 2. `overwrite` is `true` or existing style is `Style::NoStyle` or `Style::Quotation`\n     pub fn set_style_range(\n         &mut self,\n         line: usize,\n@@ -130,6 +144,9 @@ impl StyledBuffer {\n         }\n     }\n \n+    /// Set `style` for `line`, `col` if:\n+    /// 1. That line and column exist in `StyledBuffer`\n+    /// 2. Existing style is `Style::NoStyle` or `Style::Quotation` or `overwrite` is `true`\n     pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n         if let Some(ref mut line) = self.text.get_mut(line) {\n             if let Some(StyledChar { style: s, .. }) = line.get_mut(col) {"}]}