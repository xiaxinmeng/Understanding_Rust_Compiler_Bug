{"sha": "03fb61cfefc1436ac9dc50d3fa7d7e60146beadd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZmI2MWNmZWZjMTQzNmFjOWRjNTBkM2ZhN2Q3ZTYwMTQ2YmVhZGQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T16:46:57Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T16:46:57Z"}, "message": "Formatting.", "tree": {"sha": "cb30e54d2056224fae25860a9f2e4d838d918368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb30e54d2056224fae25860a9f2e4d838d918368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03fb61cfefc1436ac9dc50d3fa7d7e60146beadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03fb61cfefc1436ac9dc50d3fa7d7e60146beadd", "html_url": "https://github.com/rust-lang/rust/commit/03fb61cfefc1436ac9dc50d3fa7d7e60146beadd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03fb61cfefc1436ac9dc50d3fa7d7e60146beadd/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f166a9e63547689f866bdfdb2147f86fba915c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f166a9e63547689f866bdfdb2147f86fba915c", "html_url": "https://github.com/rust-lang/rust/commit/13f166a9e63547689f866bdfdb2147f86fba915c"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "701c6e2e9bec7ccac6fc2f3ec0c392e23e072fd7", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03fb61cfefc1436ac9dc50d3fa7d7e60146beadd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fb61cfefc1436ac9dc50d3fa7d7e60146beadd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=03fb61cfefc1436ac9dc50d3fa7d7e60146beadd", "patch": "@@ -168,7 +168,8 @@ impl Parker {\n             };\n \n             // Wait for unpark() to produce this event.\n-            let unparked = c::NtWaitForKeyedEvent(handle, self.ptr(), 0, &mut timeout) == c::STATUS_SUCCESS;\n+            let unparked =\n+                c::NtWaitForKeyedEvent(handle, self.ptr(), 0, &mut timeout) == c::STATUS_SUCCESS;\n \n             // Set the state back to EMPTY (from either PARKED or NOTIFIED).\n             let prev_state = self.state.swap(EMPTY, Acquire);"}]}