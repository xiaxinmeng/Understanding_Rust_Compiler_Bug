{"sha": "edc11a9f09060b355010b8cc71da45c4f35eadf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzExYTlmMDkwNjBiMzU1MDEwYjhjYzcxZGE0NWM0ZjM1ZWFkZjA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-18T02:36:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-29T01:47:55Z"}, "message": "rustc: Suppress derived pattern-match-checking errors\n\ntypeck::check::_match wasn't suppressing derived errors properly.\nFixed it.", "tree": {"sha": "7eff749328602e4ed636c1f22538fd1662510b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eff749328602e4ed636c1f22538fd1662510b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc11a9f09060b355010b8cc71da45c4f35eadf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc11a9f09060b355010b8cc71da45c4f35eadf0", "html_url": "https://github.com/rust-lang/rust/commit/edc11a9f09060b355010b8cc71da45c4f35eadf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc11a9f09060b355010b8cc71da45c4f35eadf0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f03d45c56b37b36912c16bd5b4fb4723fd91cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f03d45c56b37b36912c16bd5b4fb4723fd91cb7", "html_url": "https://github.com/rust-lang/rust/commit/9f03d45c56b37b36912c16bd5b4fb4723fd91cb7"}], "stats": {"total": 243, "additions": 164, "deletions": 79}, "files": [{"sha": "7d2fd51cefed71291b1abfa115e62ad2a914bc39", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 104, "deletions": 70, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/edc11a9f09060b355010b8cc71da45c4f35eadf0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc11a9f09060b355010b8cc71da45c4f35eadf0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=edc11a9f09060b355010b8cc71da45c4f35eadf0", "patch": "@@ -175,11 +175,18 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: @ast::pat, path: @ast::Path,\n             kind_name = \"structure\";\n         }\n         _ => {\n-            tcx.sess.span_fatal(\n-                pat.span,\n-                fmt!(\"mismatched types: expected `%s` but found enum or \\\n-                      structure\",\n-                     fcx.infcx().ty_to_str(expected)));\n+            let resolved_expected =\n+                fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n+            fcx.infcx().type_error_message_str(pat.span,\n+                                               |actual| {\n+                    fmt!(\"mismatched types: expected `%s` but found %s\",\n+                         resolved_expected, actual)},\n+                    ~\"an enum or structure pattern\",\n+                    None);\n+            fcx.write_error(pat.id);\n+            kind_name = \"[error]\";\n+            arg_types = (copy subpats).get_or_default(~[]).map(|_|\n+                                                               ty::mk_err());\n         }\n     }\n \n@@ -486,74 +493,44 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n       }\n       ast::pat_tup(ref elts) => {\n         let s = structure_of(fcx, pat.span, expected);\n-        let ex_elts = match s {\n-          ty::ty_tup(ref elts) => elts,\n-          _ => {\n-            tcx.sess.span_fatal\n-                (pat.span,\n-                 fmt!(\"mismatched types: expected `%s`, found tuple\",\n-                      fcx.infcx().ty_to_str(expected)));\n-          }\n-        };\n         let e_count = elts.len();\n-        if e_count != ex_elts.len() {\n-            tcx.sess.span_fatal\n-                (pat.span, fmt!(\"mismatched types: expected a tuple \\\n-                      with %u fields, found one with %u \\\n-                      fields\", ex_elts.len(), e_count));\n-        }\n-        let mut i = 0u;\n-        for elts.each |elt| {\n-            check_pat(pcx, *elt, ex_elts[i]);\n-            i += 1u;\n+        match s {\n+            ty::ty_tup(ref ex_elts) if e_count == ex_elts.len() => {\n+                for elts.eachi |i, elt| {\n+                    check_pat(pcx, *elt, ex_elts[i]);\n+                }\n+                fcx.write_ty(pat.id, expected);\n+            }\n+            _ => {\n+                for elts.each |elt| {\n+                    check_pat(pcx, *elt, ty::mk_err());\n+                }\n+                let actual = ty::mk_tup(tcx, elts.map(|pat_var| {\n+                    fcx.node_ty(pat_var.id)\n+                }));\n+                // use terr_tuple_size if both types are tuples\n+                let type_error = match s {\n+                    ty::ty_tup(ref ex_elts) =>\n+                        ty::terr_tuple_size(ty::expected_found{expected: ex_elts.len(),\n+                                                           found: e_count}),\n+                    _ => ty::terr_mismatch\n+                };\n+                fcx.infcx().report_mismatched_types(pat.span,\n+                                                    expected,\n+                                                    actual,\n+                                                    &type_error);\n+                fcx.write_error(pat.id);\n+            }\n         }\n-\n-        fcx.write_ty(pat.id, expected);\n       }\n       ast::pat_box(inner) => {\n-        match structure_of(fcx, pat.span, expected) {\n-          ty::ty_box(e_inner) => {\n-            check_pat(pcx, inner, e_inner.ty);\n-            fcx.write_ty(pat.id, expected);\n-          }\n-          _ => {\n-            tcx.sess.span_fatal(\n-                pat.span,\n-                ~\"mismatched types: expected `\" +\n-                fcx.infcx().ty_to_str(expected) +\n-                ~\"` found box\");\n-          }\n-        }\n+          check_pointer_pat(pcx, At, inner, pat.id, pat.span, expected);\n       }\n       ast::pat_uniq(inner) => {\n-        match structure_of(fcx, pat.span, expected) {\n-          ty::ty_uniq(e_inner) => {\n-            check_pat(pcx, inner, e_inner.ty);\n-            fcx.write_ty(pat.id, expected);\n-          }\n-          _ => {\n-            tcx.sess.span_fatal(\n-                pat.span,\n-                ~\"mismatched types: expected `\" +\n-                fcx.infcx().ty_to_str(expected) +\n-                ~\"` found uniq\");\n-          }\n-        }\n+          check_pointer_pat(pcx, Uniq, inner, pat.id, pat.span, expected);\n       }\n       ast::pat_region(inner) => {\n-        match structure_of(fcx, pat.span, expected) {\n-          ty::ty_rptr(_, e_inner) => {\n-            check_pat(pcx, inner, e_inner.ty);\n-            fcx.write_ty(pat.id, expected);\n-          }\n-          _ => {\n-            tcx.sess.span_fatal(\n-                pat.span,\n-                ~\"mismatched types: expected `\" +\n-                fcx.infcx().ty_to_str(expected) +\n-                ~\"` found borrowed pointer\");\n-          }\n-        }\n+          check_pointer_pat(pcx, Borrowed, inner, pat.id, pat.span, expected);\n       }\n       ast::pat_vec(ref before, slice, ref after) => {\n         let default_region_var =\n@@ -577,11 +554,25 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n             (mt, default_region_var)\n           },\n           _ => {\n-            tcx.sess.span_fatal(\n-                pat.span,\n-                fmt!(\"mismatched type: expected `%s` but found vector\",\n-                     fcx.infcx().ty_to_str(expected))\n-            );\n+              for before.each |&elt| {\n+                  check_pat(pcx, elt, ty::mk_err());\n+              }\n+              for slice.each |&elt| {\n+                  check_pat(pcx, elt, ty::mk_err());\n+              }\n+              for after.each |&elt| {\n+                  check_pat(pcx, elt, ty::mk_err());\n+              }\n+              let resolved_expected =\n+                  fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n+              fcx.infcx().type_error_message_str(pat.span,\n+                  |actual| {\n+                      fmt!(\"mismatched types: expected `%s` but found %s\",\n+                           resolved_expected, actual)},\n+                                                 ~\"a vector pattern\",\n+                                                 None);\n+              fcx.write_error(pat.id);\n+              return;\n           }\n         };\n         for before.each |elt| {\n@@ -605,3 +596,46 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n     }\n }\n \n+// Helper function to check @, ~ and & patterns\n+pub fn check_pointer_pat(pcx: &pat_ctxt,\n+                         pointer_kind: PointerKind,\n+                         inner: @ast::pat,\n+                         pat_id: ast::node_id,\n+                         span: span,\n+                         expected: ty::t) {\n+    let fcx = pcx.fcx;\n+    let check_inner: &fn(ty::mt) = |e_inner| {\n+        check_pat(pcx, inner, e_inner.ty);\n+        fcx.write_ty(pat_id, expected);\n+    };\n+    match structure_of(fcx, span, expected) {\n+        ty::ty_box(e_inner) if pointer_kind == At => {\n+            check_inner(e_inner);\n+        }\n+        ty::ty_uniq(e_inner) if pointer_kind == Uniq => {\n+            check_inner(e_inner);\n+        }\n+        ty::ty_rptr(_, e_inner) if pointer_kind == Borrowed => {\n+            check_inner(e_inner);\n+        }\n+        _ => {\n+            check_pat(pcx, inner, ty::mk_err());\n+            let resolved_expected =\n+                fcx.infcx().ty_to_str(fcx.infcx().resolve_type_vars_if_possible(expected));\n+            fcx.infcx().type_error_message_str(span, |actual| {\n+                    fmt!(\"mismatched types: expected `%s` but found %s\",\n+                         resolved_expected, actual)},\n+                                               fmt!(\"an %s pattern\", match pointer_kind {\n+                                                   At => \"@-box\",\n+                                                   Uniq => \"~-box\",\n+                                                   Borrowed => \"&-pointer\"\n+                                               }),\n+                    None);\n+            fcx.write_error(pat_id);\n+          }\n+    }\n+}\n+\n+#[deriving(Eq)]\n+enum PointerKind { At, Uniq, Borrowed }\n+"}, {"sha": "8f709e7cd5af10e81f025bba0cfaac49dca88694", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/edc11a9f09060b355010b8cc71da45c4f35eadf0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc11a9f09060b355010b8cc71da45c4f35eadf0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=edc11a9f09060b355010b8cc71da45c4f35eadf0", "patch": "@@ -749,25 +749,32 @@ pub impl InferCtxt {\n         }\n     }\n \n-    fn type_error_message(@mut self, sp: span, mk_msg: &fn(~str) -> ~str,\n-                          actual_ty: ty::t, err: Option<&ty::type_err>) {\n-        let actual_ty = self.resolve_type_vars_if_possible(actual_ty);\n \n-        // Don't report an error if actual type is ty_err.\n-        if ty::type_is_error(actual_ty) {\n-            return;\n-        }\n+    fn type_error_message_str(@mut self, sp: span, mk_msg: &fn(~str) -> ~str,\n+                          actual_ty: ~str, err: Option<&ty::type_err>) {\n         let error_str = err.map_default(~\"\", |t_err|\n                          fmt!(\" (%s)\",\n                               ty::type_err_to_str(self.tcx, *t_err)));\n         self.tcx.sess.span_err(sp,\n-           fmt!(\"%s%s\", mk_msg(self.ty_to_str(actual_ty)),\n-                error_str));\n+           fmt!(\"%s%s\", mk_msg(actual_ty), error_str));\n         for err.each |err| {\n             ty::note_and_explain_type_err(self.tcx, *err)\n         }\n     }\n \n+    fn type_error_message(@mut self, sp: span, mk_msg: &fn(~str) -> ~str,\n+                          actual_ty: ty::t, err: Option<&ty::type_err>) {\n+        let actual_ty = self.resolve_type_vars_if_possible(actual_ty);\n+\n+        // Don't report an error if actual type is ty_err.\n+        if ty::type_is_error(actual_ty) {\n+            return;\n+        }\n+\n+        self.type_error_message_str(sp, mk_msg, self.ty_to_str(actual_ty),\n+                                    err);\n+    }\n+\n     fn report_mismatched_types(@mut self, sp: span, e: ty::t, a: ty::t,\n                                err: &ty::type_err) {\n         let resolved_expected ="}, {"sha": "dbfdb38f7211fd6a237d44da7895677a447581be", "filename": "src/test/compile-fail/issue-5100.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/edc11a9f09060b355010b8cc71da45c4f35eadf0/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc11a9f09060b355010b8cc71da45c4f35eadf0/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=edc11a9f09060b355010b8cc71da45c4f35eadf0", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum A { B, C }\n+\n+fn main() {\n+    match (true, false) {\n+        B => (), //~ ERROR expected `(bool,bool)` but found an enum or structure pattern\n+        _ => ()\n+    }\n+\n+    match (true, false) {\n+        (true, false, false) => () //~ ERROR mismatched types: expected `(bool,bool)` but found `(bool,bool,bool)` (expected a tuple with 2 elements but found one with 3 elements)\n+    }\n+\n+    match (true, false) {\n+        @(true, false) => () //~ ERROR mismatched types: expected `(bool,bool)` but found an @-box pattern\n+    }\n+\n+    match (true, false) {\n+        ~(true, false) => () //~ ERROR mismatched types: expected `(bool,bool)` but found a ~-box pattern\n+    }\n+\n+    match (true, false) {\n+        &(true, false) => () //~ ERROR mismatched types: expected `(bool,bool)` but found an &-pointer pattern\n+    }\n+\n+\n+    let v = [('a', 'b')   //~ ERROR expected function but found `(char,char)`\n+             ('c', 'd'),\n+             ('e', 'f')];\n+\n+    for v.each |&(x,y)| {} // should be OK\n+\n+    // Make sure none of the errors above were fatal\n+    let x: char = true; //~ ERROR expected `char` but found `bool`\n+}"}]}