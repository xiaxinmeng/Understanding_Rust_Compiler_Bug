{"sha": "794ecd965ab39d767caebd79c0e32702e86a3ff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NGVjZDk2NWFiMzlkNzY3Y2FlYmQ3OWMwZTMyNzAyZTg2YTNmZjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-02T17:25:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:12Z"}, "message": "[WIP] Make some debug info methods take &mut FunctionDebugContext\n\ndeclare_local still takes &FunctionDebugContext, because of borrowck errors", "tree": {"sha": "a840973f0d0a133221c926a592f51a6b18a2a078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a840973f0d0a133221c926a592f51a6b18a2a078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/794ecd965ab39d767caebd79c0e32702e86a3ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/794ecd965ab39d767caebd79c0e32702e86a3ff1", "html_url": "https://github.com/rust-lang/rust/commit/794ecd965ab39d767caebd79c0e32702e86a3ff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/794ecd965ab39d767caebd79c0e32702e86a3ff1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8f1527e485d0de49139ca7b9d42c320991a53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8f1527e485d0de49139ca7b9d42c320991a53b", "html_url": "https://github.com/rust-lang/rust/commit/ab8f1527e485d0de49139ca7b9d42c320991a53b"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "066ac8f019e00aaa20b281a9176d6c9d732d8c09", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/794ecd965ab39d767caebd79c0e32702e86a3ff1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794ecd965ab39d767caebd79c0e32702e86a3ff1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=794ecd965ab39d767caebd79c0e32702e86a3ff1", "patch": "@@ -216,7 +216,7 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn set_source_location(\n         &mut self,\n-        debug_context: &FunctionDebugContext<&'ll DISubprogram>,\n+        debug_context: &mut FunctionDebugContext<&'ll DISubprogram>,\n         scope: Option<&'ll DIScope>,\n         span: Span,\n     ) {\n@@ -519,7 +519,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn create_mir_scopes(\n         &self,\n         mir: &mir::Mir<'_>,\n-        debug_context: &FunctionDebugContext<&'ll DISubprogram>,\n+        debug_context: &mut FunctionDebugContext<&'ll DISubprogram>,\n     ) -> IndexVec<mir::SourceScope, MirDebugScope<&'ll DIScope>> {\n         create_scope_map::create_mir_scopes(self, mir, debug_context)\n     }"}, {"sha": "4d9579504c8573ad9db1d25591fd1e8525c134d4", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/794ecd965ab39d767caebd79c0e32702e86a3ff1/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794ecd965ab39d767caebd79c0e32702e86a3ff1/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=794ecd965ab39d767caebd79c0e32702e86a3ff1", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         source_info: mir::SourceInfo\n     ) {\n         let (scope, span) = self.debug_loc(source_info);\n-        bx.set_source_location(&self.debug_context, scope, span);\n+        bx.set_source_location(&mut self.debug_context, scope, span);\n     }\n \n     pub fn debug_loc(&self, source_info: mir::SourceInfo) -> (Option<Bx::DIScope>, Span) {\n@@ -203,7 +203,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let fn_ty = cx.new_fn_type(sig, &[]);\n     debug!(\"fn_ty: {:?}\", fn_ty);\n-    let debug_context =\n+    let mut debug_context =\n         cx.create_function_debug_context(instance, sig, llfn, mir);\n     let mut bx = Bx::new_block(cx, llfn, \"start\");\n \n@@ -225,7 +225,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         }).collect();\n \n     // Compute debuginfo scopes from MIR scopes.\n-    let scopes = cx.create_mir_scopes(mir, &debug_context);\n+    let scopes = cx.create_mir_scopes(mir, &mut debug_context);\n     let (landing_pads, funclets) = create_funclets(mir, &mut bx, &cleanup_kinds, &block_bxs);\n \n     let mut fx = FunctionCx {\n@@ -253,7 +253,7 @@ pub fn codegen_mir<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         // FIXME(dlrobertson): This is ugly. Find a better way of getting the `PlaceRef` or\n         // `LocalRef` from `arg_local_refs`\n         let mut va_list_ref = None;\n-        let args = arg_local_refs(&mut bx, &fx, &fx.scopes, &memory_locals, &mut va_list_ref);\n+        let args = arg_local_refs(&mut bx, &fx, &memory_locals, &mut va_list_ref);\n         fx.va_list_ref = va_list_ref;\n \n         let mut allocate_local = |local| {\n@@ -430,10 +430,6 @@ fn create_funclets<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     fx: &FunctionCx<'a, 'tcx, Bx>,\n-    scopes: &IndexVec<\n-        mir::SourceScope,\n-        debuginfo::MirDebugScope<Bx::DIScope>\n-    >,\n     memory_locals: &BitSet<mir::Local>,\n     va_list_ref: &mut Option<PlaceRef<'tcx, Bx::Value>>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {\n@@ -443,7 +439,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     let mut llarg_idx = fx.fn_ty.ret.is_indirect() as usize;\n \n     // Get the argument scope, if it exists and if we need it.\n-    let arg_scope = scopes[mir::OUTERMOST_SOURCE_SCOPE];\n+    let arg_scope = fx.scopes[mir::OUTERMOST_SOURCE_SCOPE];\n     let arg_scope = if bx.sess().opts.debuginfo == DebugInfo::Full {\n         arg_scope.scope_metadata\n     } else {"}, {"sha": "dcbb4e66cb3855524adbc16e6d99af1b1595370b", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/794ecd965ab39d767caebd79c0e32702e86a3ff1/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/794ecd965ab39d767caebd79c0e32702e86a3ff1/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=794ecd965ab39d767caebd79c0e32702e86a3ff1", "patch": "@@ -28,7 +28,7 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_mir_scopes(\n         &self,\n         mir: &mir::Mir<'_>,\n-        debug_context: &FunctionDebugContext<Self::DIScope>,\n+        debug_context: &mut FunctionDebugContext<Self::DIScope>,\n     ) -> IndexVec<mir::SourceScope, MirDebugScope<Self::DIScope>>;\n     fn extend_scope_to_file(\n         &self,\n@@ -53,7 +53,7 @@ pub trait DebugInfoBuilderMethods<'tcx>: BackendTypes {\n     );\n     fn set_source_location(\n         &mut self,\n-        debug_context: &FunctionDebugContext<Self::DIScope>,\n+        debug_context: &mut FunctionDebugContext<Self::DIScope>,\n         scope: Option<Self::DIScope>,\n         span: Span,\n     );"}]}