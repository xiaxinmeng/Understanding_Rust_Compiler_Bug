{"sha": "041f6668b5d9aacd742e6d501401ca0ab899ac1c", "node_id": "C_kwDOAAsO6NoAKDA0MWY2NjY4YjVkOWFhY2Q3NDJlNmQ1MDE0MDFjYTBhYjg5OWFjMWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-03T19:45:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-03T19:45:00Z"}, "message": "Rollup merge of #108540 - WaffleLapkin:atomic_thingy_from_thingy_pointer, r=m-ou-se\n\nAdd `Atomic*::from_ptr`\n\nThis PR adds functions in the following form to all atomic types:\n```rust\nimpl AtomicT {\n    pub const unsafe fn from_ptr<'a>(ptr: *mut T) -> &'a AtomicT;\n}\n```\nr? `@m-ou-se` (we've talked about it before)\n\nI'm not sure about docs & safety requirements, I'd appreciate some feedback on them.", "tree": {"sha": "0716b52325a61a318a08d103a58796f6997017b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0716b52325a61a318a08d103a58796f6997017b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/041f6668b5d9aacd742e6d501401ca0ab899ac1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAk48CRBK7hj4Ov3rIwAAHS0IAEjZ33kryqT38oO/QzCL7++8\nMJf8piXFj+RnUUDVTbL38+UxbOMoSgasoNplNN66zelPLJeouRfvOBJ6Z+tq1RpM\nkmFjL40mLb6Kr/7jPCQL+tqDs6ebndYvRduqxC+TGMeRSAq1gUScIzNZWr830uec\n3x6WofMGBvFsbgHErUqscZRxHUg3h+/93l77XFDlZaBNjp5mPmALKgHXVDnng39Y\n7TbHWG8CT5iOpEEhrqrsOnqNYZy6O4jkO0ptnjL1iR+rfGnuAvA2Zkdqvis97YjZ\npksOxQ+FlFkM66w2Ue8owHtLP6tg5zW/Zm3JBarPaILCTRB5d7JA/nde+coirjQ=\n=94f1\n-----END PGP SIGNATURE-----\n", "payload": "tree 0716b52325a61a318a08d103a58796f6997017b1\nparent 188ed14ca31899f241799f47cf5e640eb6e921ce\nparent a2baba09a2d86db7915b899ea631c427bfe8c4e8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677872700 +0100\ncommitter GitHub <noreply@github.com> 1677872700 +0100\n\nRollup merge of #108540 - WaffleLapkin:atomic_thingy_from_thingy_pointer, r=m-ou-se\n\nAdd `Atomic*::from_ptr`\n\nThis PR adds functions in the following form to all atomic types:\n```rust\nimpl AtomicT {\n    pub const unsafe fn from_ptr<'a>(ptr: *mut T) -> &'a AtomicT;\n}\n```\nr? `@m-ou-se` (we've talked about it before)\n\nI'm not sure about docs & safety requirements, I'd appreciate some feedback on them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/041f6668b5d9aacd742e6d501401ca0ab899ac1c", "html_url": "https://github.com/rust-lang/rust/commit/041f6668b5d9aacd742e6d501401ca0ab899ac1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/041f6668b5d9aacd742e6d501401ca0ab899ac1c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188ed14ca31899f241799f47cf5e640eb6e921ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/188ed14ca31899f241799f47cf5e640eb6e921ce", "html_url": "https://github.com/rust-lang/rust/commit/188ed14ca31899f241799f47cf5e640eb6e921ce"}, {"sha": "a2baba09a2d86db7915b899ea631c427bfe8c4e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2baba09a2d86db7915b899ea631c427bfe8c4e8", "html_url": "https://github.com/rust-lang/rust/commit/a2baba09a2d86db7915b899ea631c427bfe8c4e8"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "040a59184a64639d675d63dfada5d6a20a42781e", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/041f6668b5d9aacd742e6d501401ca0ab899ac1c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041f6668b5d9aacd742e6d501401ca0ab899ac1c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=041f6668b5d9aacd742e6d501401ca0ab899ac1c", "patch": "@@ -305,6 +305,50 @@ impl AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n+    /// Creates a new `AtomicBool` from a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+    /// use std::sync::atomic::{self, AtomicBool};\n+    /// use std::mem::align_of;\n+    ///\n+    /// // Get a pointer to an allocated value\n+    /// let ptr: *mut bool = Box::into_raw(Box::new(false));\n+    ///\n+    /// assert!(ptr.is_aligned_to(align_of::<AtomicBool>()));\n+    ///\n+    /// {\n+    ///     // Create an atomic view of the allocated value\n+    ///     let atomic = unsafe { AtomicBool::from_ptr(ptr) };\n+    ///\n+    ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+    ///     atomic.store(true, atomic::Ordering::Relaxed);\n+    /// }\n+    ///\n+    /// // It's ok to non-atomically access the value behind `ptr`,\n+    /// // since the reference to the atomic ended its lifetime in the block above\n+    /// assert_eq!(unsafe { *ptr }, true);\n+    ///\n+    /// // Deallocate the value\n+    /// unsafe { drop(Box::from_raw(ptr)) }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `ptr` must be aligned to `align_of::<AtomicBool>()` (note that on some platforms this can be bigger than `align_of::<bool>()`).\n+    /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+    /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+    ///\n+    /// [valid]: crate::ptr#safety\n+    #[unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *mut bool) -> &'a AtomicBool {\n+        // SAFETY: guaranteed by the caller\n+        unsafe { &*ptr.cast() }\n+    }\n+\n     /// Returns a mutable reference to the underlying [`bool`].\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n@@ -1017,6 +1061,50 @@ impl<T> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n \n+    /// Creates a new `AtomicPtr` from a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+    /// use std::sync::atomic::{self, AtomicPtr};\n+    /// use std::mem::align_of;\n+    ///\n+    /// // Get a pointer to an allocated value\n+    /// let ptr: *mut *mut u8 = Box::into_raw(Box::new(std::ptr::null_mut()));\n+    ///\n+    /// assert!(ptr.is_aligned_to(align_of::<AtomicPtr<u8>>()));\n+    ///\n+    /// {\n+    ///     // Create an atomic view of the allocated value\n+    ///     let atomic = unsafe { AtomicPtr::from_ptr(ptr) };\n+    ///\n+    ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+    ///     atomic.store(std::ptr::NonNull::dangling().as_ptr(), atomic::Ordering::Relaxed);\n+    /// }\n+    ///\n+    /// // It's ok to non-atomically access the value behind `ptr`,\n+    /// // since the reference to the atomic ended its lifetime in the block above\n+    /// assert!(!unsafe { *ptr }.is_null());\n+    ///\n+    /// // Deallocate the value\n+    /// unsafe { drop(Box::from_raw(ptr)) }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `ptr` must be aligned to `align_of::<AtomicPtr<T>>()` (note that on some platforms this can be bigger than `align_of::<*mut T>()`).\n+    /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+    /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+    ///\n+    /// [valid]: crate::ptr#safety\n+    #[unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *mut *mut T) -> &'a AtomicPtr<T> {\n+        // SAFETY: guaranteed by the caller\n+        unsafe { &*ptr.cast() }\n+    }\n+\n     /// Returns a mutable reference to the underlying pointer.\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n@@ -1958,6 +2046,53 @@ macro_rules! atomic_int {\n                 Self {v: UnsafeCell::new(v)}\n             }\n \n+            /// Creates a new reference to an atomic integer from a pointer.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{self, \", stringify!($atomic_type), \"};\")]\n+            /// use std::mem::align_of;\n+            ///\n+            /// // Get a pointer to an allocated value\n+            #[doc = concat!(\"let ptr: *mut \", stringify!($int_type), \" = Box::into_raw(Box::new(0));\")]\n+            ///\n+            #[doc = concat!(\"assert!(ptr.is_aligned_to(align_of::<\", stringify!($atomic_type), \">()));\")]\n+            ///\n+            /// {\n+            ///     // Create an atomic view of the allocated value\n+            // SAFETY: this is a doc comment, tidy, it can't hurt you (also guaranteed by the construction of `ptr` and the assert above)\n+            #[doc = concat!(\"    let atomic = unsafe {\", stringify!($atomic_type), \"::from_ptr(ptr) };\")]\n+            ///\n+            ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+            ///     atomic.store(1, atomic::Ordering::Relaxed);\n+            /// }\n+            ///\n+            /// // It's ok to non-atomically access the value behind `ptr`,\n+            /// // since the reference to the atomic ended its lifetime in the block above\n+            /// assert_eq!(unsafe { *ptr }, 1);\n+            ///\n+            /// // Deallocate the value\n+            /// unsafe { drop(Box::from_raw(ptr)) }\n+            /// ```\n+            ///\n+            /// # Safety\n+            ///\n+            /// * `ptr` must be aligned to `align_of::<AtomicBool>()` (note that on some platforms this can be bigger than `align_of::<bool>()`).\n+            #[doc = concat!(\" * `ptr` must be aligned to `align_of::<\", stringify!($atomic_type), \">()` (note that on some platforms this can be bigger than `align_of::<\", stringify!($int_type), \">()`).\")]\n+            /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+            /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+            ///\n+            /// [valid]: crate::ptr#safety\n+            #[unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+            #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"108652\")]\n+            pub const unsafe fn from_ptr<'a>(ptr: *mut $int_type) -> &'a $atomic_type {\n+                // SAFETY: guaranteed by the caller\n+                unsafe { &*ptr.cast() }\n+            }\n+\n+\n             /// Returns a mutable reference to the underlying integer.\n             ///\n             /// This is safe because the mutable reference guarantees that no other threads are"}]}