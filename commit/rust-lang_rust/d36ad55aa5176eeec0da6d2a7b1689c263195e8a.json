{"sha": "d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNmFkNTVhYTUxNzZlZWVjMGRhNmQyYTdiMTY4OWMyNjMxOTVlOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-19T00:53:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-19T00:53:58Z"}, "message": "Auto merge of #32755 - alexcrichton:rustbuild-start-test, r=brson\n\nrustbuild: Add support for compiletest test suites\n\nThis commit adds support in rustbuild for running all of the compiletest test\nsuites as part of `make check`. The `compiletest` program was moved to\n`src/tools` (like `rustbook` and others) and is now just compiled like any other\nold tool. Each test suite has a pretty standard set of dependencies and just\ntweaks various parameters to the final compiletest executable.\n\nNote that full support is lacking in terms of:\n\n* Once a test suite has passed, that's not remembered. When a test suite is\n  requested to be run, it's always run.\n* The arguments to compiletest probably don't work for every possible\n  combination of platforms and testing environments just yet. There will likely\n  need to be future updates to tweak various pieces here and there.\n* Cross compiled test suites probably don't work just yet, support for that will\n  come in a follow-up patch.", "tree": {"sha": "b905f307184a974fb3f31f7c239e6e7cb5fa30a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b905f307184a974fb3f31f7c239e6e7cb5fa30a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "html_url": "https://github.com/rust-lang/rust/commit/d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b324fa7204dbdc17544d4402ffd0b1964df326f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b324fa7204dbdc17544d4402ffd0b1964df326f7", "html_url": "https://github.com/rust-lang/rust/commit/b324fa7204dbdc17544d4402ffd0b1964df326f7"}, {"sha": "b325baf0ae838c16eb554185bb8653189561dbc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b325baf0ae838c16eb554185bb8653189561dbc8", "html_url": "https://github.com/rust-lang/rust/commit/b325baf0ae838c16eb554185bb8653189561dbc8"}], "stats": {"total": 495, "additions": 432, "deletions": 63}, "files": [{"sha": "4003e092034e5e38edd97eaf6b19d3d65331af95", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -133,7 +133,7 @@ TOOL_DEPS_rustdoc := rustdoc\n TOOL_DEPS_rustc := rustc_driver\n TOOL_DEPS_rustbook := std rustdoc\n TOOL_DEPS_error_index_generator := rustdoc syntax serialize\n-TOOL_SOURCE_compiletest := $(S)src/compiletest/compiletest.rs\n+TOOL_SOURCE_compiletest := $(S)src/tools/compiletest/src/main.rs\n TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n TOOL_SOURCE_rustbook := $(S)src/tools/rustbook/main.rs"}, {"sha": "48e01a2533467dc8eaec43d0038c514e09c2ca7e", "filename": "mk/dist.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -50,7 +50,6 @@ PKG_FILES := \\\n     $(addprefix $(S)src/,                      \\\n       bootstrap                                \\\n       build_helper                             \\\n-      compiletest                              \\\n       doc                                      \\\n       driver                                   \\\n       etc                                      \\"}, {"sha": "41b078efafcf1f77249287596e420bc99641b1b9", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -611,7 +611,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n         --rustdoc-path $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-        --llvm-bin-path $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin \\\n+        --llvm-filecheck $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin/FileCheck \\\n         --aux-base $$(S)src/test/auxiliary/ \\\n         --stage-id stage$(1)-$(2) \\\n         --target $(2) \\"}, {"sha": "d852bd82416cdc533cbcb097d59d195233d78d61", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -335,11 +335,11 @@ def build_triple(self):\n \n # Run the bootstrap\n args = [os.path.join(rb.build_dir, \"bootstrap/debug/bootstrap\")]\n-args.extend(sys.argv[1:])\n args.append('--src')\n args.append(rb.rust_root)\n args.append('--build')\n args.append(rb.build)\n+args.extend(sys.argv[1:])\n env = os.environ.copy()\n env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n rb.run(args, env)"}, {"sha": "f145a7149fbe154740b0b8d492ca6aa1bdbb73cf", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::fs;\n+use std::path::PathBuf;\n \n use build::{Build, Compiler};\n \n@@ -49,3 +50,55 @@ pub fn tidy(build: &Build, stage: u32, host: &str) {\n     build.run(build.tool_cmd(&compiler, \"tidy\")\n                    .arg(build.src.join(\"src\")));\n }\n+\n+fn testdir(build: &Build, host: &str) -> PathBuf {\n+    build.out.join(host).join(\"test\")\n+}\n+\n+pub fn compiletest(build: &Build,\n+                   compiler: &Compiler,\n+                   target: &str,\n+                   mode: &str,\n+                   suite: &str) {\n+    let mut cmd = build.tool_cmd(compiler, \"compiletest\");\n+\n+    cmd.arg(\"--compile-lib-path\").arg(build.rustc_libdir(compiler));\n+    cmd.arg(\"--run-lib-path\").arg(build.sysroot_libdir(compiler, target));\n+    cmd.arg(\"--rustc-path\").arg(build.compiler_path(compiler));\n+    cmd.arg(\"--rustdoc-path\").arg(build.rustdoc(compiler));\n+    cmd.arg(\"--src-base\").arg(build.src.join(\"src/test\").join(suite));\n+    cmd.arg(\"--aux-base\").arg(build.src.join(\"src/test/auxiliary\"));\n+    cmd.arg(\"--build-base\").arg(testdir(build, compiler.host).join(suite));\n+    cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n+    cmd.arg(\"--mode\").arg(mode);\n+    cmd.arg(\"--target\").arg(target);\n+    cmd.arg(\"--host\").arg(compiler.host);\n+    cmd.arg(\"--llvm-filecheck\").arg(build.llvm_filecheck(&build.config.build));\n+\n+    let linkflag = format!(\"-Lnative={}\", build.test_helpers_out(target).display());\n+    cmd.arg(\"--host-rustcflags\").arg(\"-Crpath\");\n+    cmd.arg(\"--target-rustcflags\").arg(format!(\"-Crpath {}\", linkflag));\n+\n+    // FIXME: needs android support\n+    cmd.arg(\"--android-cross-path\").arg(\"\");\n+    // FIXME: CFG_PYTHON should probably be detected more robustly elsewhere\n+    cmd.arg(\"--python\").arg(\"python\");\n+\n+    if let Some(ref vers) = build.gdb_version {\n+        cmd.arg(\"--gdb-version\").arg(vers);\n+    }\n+    if let Some(ref vers) = build.lldb_version {\n+        cmd.arg(\"--lldb-version\").arg(vers);\n+    }\n+    if let Some(ref dir) = build.lldb_python_dir {\n+        cmd.arg(\"--lldb-python-dir\").arg(dir);\n+    }\n+\n+    cmd.args(&build.flags.args);\n+\n+    if build.config.verbose || build.flags.verbose {\n+        cmd.arg(\"--verbose\");\n+    }\n+\n+    build.run(&mut cmd);\n+}"}, {"sha": "1f6538f5eae5f9c627692e74b1d8cb8c9c241a2b", "filename": "src/bootstrap/build/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fclean.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -25,8 +25,8 @@ pub fn clean(build: &Build) {\n             rm_rf(build, &out.join(format!(\"stage{}\", stage)));\n             rm_rf(build, &out.join(format!(\"stage{}-std\", stage)));\n             rm_rf(build, &out.join(format!(\"stage{}-rustc\", stage)));\n-            rm_rf(build, &out.join(format!(\"stage{}-test\", stage)));\n             rm_rf(build, &out.join(format!(\"stage{}-tools\", stage)));\n+            rm_rf(build, &out.join(format!(\"stage{}-test\", stage)));\n         }\n     }\n }"}, {"sha": "7a582d853d8c5f0501bbec827d57910e901db1ba", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -191,14 +191,7 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n     if !build.unstable_features {\n         cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n     }\n-    let target_config = build.config.target_config.get(target);\n-    if let Some(ref s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-        cargo.env(\"LLVM_CONFIG\", s);\n-    } else {\n-        let llvm_config = build.llvm_out(&build.config.build).join(\"bin\")\n-                               .join(exe(\"llvm-config\", target));\n-        cargo.env(\"LLVM_CONFIG\", llvm_config);\n-    }\n+    cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n     if build.config.llvm_static_stdcpp {\n         cargo.env(\"LLVM_STATIC_STDCPP\",\n                   compiler_file(build.cxx(target), \"libstdc++.a\"));"}, {"sha": "f2e3117fa9766f90cf26fde34423390d648f4d83", "filename": "src/bootstrap/build/dist.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdist.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -195,29 +195,7 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n         cp_r(&build.src.join(\"man\"), &image.join(\"share/man/man1\"));\n \n         // Debugger scripts\n-        let cp_debugger_script = |file: &str| {\n-            let dst = image.join(\"lib/rustlib/etc\");\n-            t!(fs::create_dir_all(&dst));\n-            install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n-        };\n-        if host.contains(\"windows\") {\n-            // no debugger scripts\n-        } else if host.contains(\"darwin\") {\n-            // lldb debugger scripts\n-            install(&build.src.join(\"src/etc/rust-lldb\"), &image.join(\"bin\"),\n-                    0o755);\n-\n-            cp_debugger_script(\"lldb_rust_formatters.py\");\n-            cp_debugger_script(\"debugger_pretty_printers_common.py\");\n-        } else {\n-            // gdb debugger scripts\n-            install(&build.src.join(\"src/etc/rust-gdb\"), &image.join(\"bin\"),\n-                    0o755);\n-\n-            cp_debugger_script(\"gdb_load_rust_pretty_printers.py\");\n-            cp_debugger_script(\"gdb_rust_pretty_printing.py\");\n-            cp_debugger_script(\"debugger_pretty_printers_common.py\");\n-        }\n+        debugger_scripts(build, &image, host);\n \n         // Misc license info\n         let cp = |file: &str| {\n@@ -231,6 +209,35 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     }\n }\n \n+pub fn debugger_scripts(build: &Build,\n+                        sysroot: &Path,\n+                        host: &str) {\n+    let cp_debugger_script = |file: &str| {\n+        let dst = sysroot.join(\"lib/rustlib/etc\");\n+        t!(fs::create_dir_all(&dst));\n+        install(&build.src.join(\"src/etc/\").join(file), &dst, 0o644);\n+    };\n+    if host.contains(\"windows\") {\n+        // no debugger scripts\n+    } else if host.contains(\"darwin\") {\n+        // lldb debugger scripts\n+        install(&build.src.join(\"src/etc/rust-lldb\"), &sysroot.join(\"bin\"),\n+                0o755);\n+\n+        cp_debugger_script(\"lldb_rust_formatters.py\");\n+        cp_debugger_script(\"debugger_pretty_printers_common.py\");\n+    } else {\n+        // gdb debugger scripts\n+        install(&build.src.join(\"src/etc/rust-gdb\"), &sysroot.join(\"bin\"),\n+                0o755);\n+\n+        cp_debugger_script(\"gdb_load_rust_pretty_printers.py\");\n+        cp_debugger_script(\"gdb_rust_pretty_printing.py\");\n+        cp_debugger_script(\"debugger_pretty_printers_common.py\");\n+    }\n+}\n+\n+\n pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     println!(\"Dist std stage{} ({} -> {})\", compiler.stage, compiler.host,\n              target);"}, {"sha": "67f33e29cae84ac1a9f475991945ece1d85f7ecf", "filename": "src/bootstrap/build/flags.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fflags.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -62,11 +62,6 @@ impl Flags {\n             usage(0);\n         }\n \n-        if m.free.len() > 0 {\n-            println!(\"free arguments are not currently accepted\");\n-            usage(1);\n-        }\n-\n         let cfg_file = m.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n             if fs::metadata(\"config.toml\").is_ok() {\n                 Some(PathBuf::from(\"config.toml\"))"}, {"sha": "e755416f17f25f50b319c11e474097e4e0de4fcc", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -80,6 +80,11 @@ pub struct Build {\n     package_vers: String,\n     bootstrap_key: String,\n \n+    // Probed tools at runtime\n+    gdb_version: Option<String>,\n+    lldb_version: Option<String>,\n+    lldb_python_dir: Option<String>,\n+\n     // Runtime state filled in later on\n     cc: HashMap<String, (gcc::Tool, PathBuf)>,\n     cxx: HashMap<String, gcc::Tool>,\n@@ -128,6 +133,9 @@ impl Build {\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n             compiler_rt_built: RefCell::new(HashMap::new()),\n+            gdb_version: None,\n+            lldb_version: None,\n+            lldb_python_dir: None,\n         }\n     }\n \n@@ -160,6 +168,9 @@ impl Build {\n                 CompilerRt { _dummy } => {\n                     native::compiler_rt(self, target.target);\n                 }\n+                TestHelpers { _dummy } => {\n+                    native::test_helpers(self, target.target);\n+                }\n                 Libstd { compiler } => {\n                     compile::std(self, target.target, &compiler);\n                 }\n@@ -200,6 +211,9 @@ impl Build {\n                 ToolTidy { stage } => {\n                     compile::tool(self, stage, target.target, \"tidy\");\n                 }\n+                ToolCompiletest { stage } => {\n+                    compile::tool(self, stage, target.target, \"compiletest\");\n+                }\n                 DocBook { stage } => {\n                     doc::rustbook(self, stage, target.target, \"book\", &doc_out);\n                 }\n@@ -236,12 +250,75 @@ impl Build {\n                 CheckTidy { stage } => {\n                     check::tidy(self, stage, target.target);\n                 }\n+                CheckRPass { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-pass\", \"run-pass\");\n+                }\n+                CheckCFail { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"compile-fail\", \"compile-fail\");\n+                }\n+                CheckPFail { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"parse-fail\", \"parse-fail\");\n+                }\n+                CheckRFail { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-fail\", \"run-fail\");\n+                }\n+                CheckPretty { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"pretty\", \"pretty\");\n+                }\n+                CheckCodegen { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"codegen\", \"codegen\");\n+                }\n+                CheckCodegenUnits { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"codegen-units\", \"codegen-units\");\n+                }\n+                CheckDebuginfo { compiler } => {\n+                    if target.target.contains(\"msvc\") ||\n+                       target.target.contains(\"android\") {\n+                        // nothing to do\n+                    } else if target.target.contains(\"apple\") {\n+                        check::compiletest(self, &compiler, target.target,\n+                                           \"debuginfo-lldb\", \"debuginfo\");\n+                    } else {\n+                        check::compiletest(self, &compiler, target.target,\n+                                           \"debuginfo-gdb\", \"debuginfo\");\n+                    }\n+                }\n+                CheckRustdoc { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"rustdoc\", \"rustdoc\");\n+                }\n+                CheckRPassValgrind { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-pass-valgrind\", \"run-pass-valgrind\");\n+                }\n+                CheckRPassFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"run-pass\", \"run-pass-fulldeps\");\n+                }\n+                CheckCFailFull { compiler } => {\n+                    check::compiletest(self, &compiler, target.target,\n+                                       \"compile-fail\", \"compile-fail-fulldeps\")\n+                }\n \n                 DistDocs { stage } => dist::docs(self, stage, target.target),\n                 DistMingw { _dummy } => dist::mingw(self, target.target),\n                 DistRustc { stage } => dist::rustc(self, stage, target.target),\n                 DistStd { compiler } => dist::std(self, &compiler, target.target),\n \n+                DebuggerScripts { stage } => {\n+                    let compiler = Compiler::new(stage, target.target);\n+                    dist::debugger_scripts(self,\n+                                           &self.sysroot(&compiler),\n+                                           target.target);\n+                }\n+\n                 Dist { .. } |\n                 Doc { .. } | // pseudo-steps\n                 Check { .. } => {}\n@@ -388,6 +465,7 @@ impl Build {\n             self.cargo_out(compiler, Mode::Libstd, host).join(\"deps\"),\n             self.cargo_out(compiler, Mode::Libtest, host).join(\"deps\"),\n             self.cargo_out(compiler, Mode::Librustc, host).join(\"deps\"),\n+            self.cargo_out(compiler, Mode::Tool, host).join(\"deps\"),\n         ];\n         add_lib_path(paths, &mut cmd);\n         return cmd\n@@ -442,7 +520,8 @@ impl Build {\n         let suffix = match mode {\n             Mode::Libstd => \"-std\",\n             Mode::Libtest => \"-test\",\n-            Mode::Tool | Mode::Librustc => \"-rustc\",\n+            Mode::Tool => \"-tools\",\n+            Mode::Librustc => \"-rustc\",\n         };\n         self.out.join(compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))\n@@ -463,11 +542,44 @@ impl Build {\n         self.out.join(target).join(\"llvm\")\n     }\n \n+    /// Returns the path to `llvm-config` for the specified target\n+    fn llvm_config(&self, target: &str) -> PathBuf {\n+        let target_config = self.config.target_config.get(target);\n+        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+            s.clone()\n+        } else {\n+            self.llvm_out(&self.config.build).join(\"bin\")\n+                .join(exe(\"llvm-config\", target))\n+        }\n+    }\n+\n+    /// Returns the path to `llvm-config` for the specified target\n+    fn llvm_filecheck(&self, target: &str) -> PathBuf {\n+        let target_config = self.config.target_config.get(target);\n+        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+            s.parent().unwrap().join(exe(\"FileCheck\", target))\n+        } else {\n+            let base = self.llvm_out(&self.config.build).join(\"build\");\n+            let exe = exe(\"FileCheck\", target);\n+            if self.config.build.contains(\"msvc\") {\n+                base.join(\"Release/bin\").join(exe)\n+            } else {\n+                base.join(\"bin\").join(exe)\n+            }\n+        }\n+    }\n+\n     /// Root output directory for compiler-rt compiled for `target`\n     fn compiler_rt_out(&self, target: &str) -> PathBuf {\n         self.out.join(target).join(\"compiler-rt\")\n     }\n \n+    /// Root output directory for rust_test_helpers library compiled for\n+    /// `target`\n+    fn test_helpers_out(&self, target: &str) -> PathBuf {\n+        self.out.join(target).join(\"rust-test-helpers\")\n+    }\n+\n     fn add_rustc_lib_path(&self, compiler: &Compiler, cmd: &mut Command) {\n         // Windows doesn't need dylib path munging because the dlls for the\n         // compiler live next to the compiler and the system will find them\n@@ -510,8 +622,11 @@ impl Build {\n     }\n \n     fn cflags(&self, target: &str) -> Vec<String> {\n+        // Filter out -O and /O (the optimization flags) that we picked up from\n+        // gcc-rs because the build scripts will determine that for themselves.\n         let mut base = self.cc[target].0.args().iter()\n                            .map(|s| s.to_string_lossy().into_owned())\n+                           .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))\n                            .collect::<Vec<_>>();\n \n         // If we're compiling on OSX then we add a few unconditional flags"}, {"sha": "59c928ab7b7b39f3c35ed548db2215947ff8e4b0", "filename": "src/bootstrap/build/native.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fnative.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -14,9 +14,10 @@ use std::fs;\n \n use build_helper::output;\n use cmake;\n+use gcc;\n \n use build::Build;\n-use build::util::{exe, staticlib};\n+use build::util::{exe, staticlib, up_to_date};\n \n pub fn llvm(build: &Build, target: &str) {\n     // If we're using a custom LLVM bail out here, but we can only use a\n@@ -152,9 +153,7 @@ pub fn compiler_rt(build: &Build, target: &str) {\n     }\n     let _ = fs::remove_dir_all(&dst);\n     t!(fs::create_dir_all(&dst));\n-    let build_llvm_config = build.llvm_out(&build.config.build)\n-                                 .join(\"bin\")\n-                                 .join(exe(\"llvm-config\", &build.config.build));\n+    let build_llvm_config = build.llvm_config(&build.config.build);\n     let mut cfg = cmake::Config::new(build.src.join(\"src/compiler-rt\"));\n     cfg.target(target)\n        .host(&build.config.build)\n@@ -171,3 +170,23 @@ pub fn compiler_rt(build: &Build, target: &str) {\n        .build_target(&build_target);\n     cfg.build();\n }\n+\n+pub fn test_helpers(build: &Build, target: &str) {\n+    let dst = build.test_helpers_out(target);\n+    let src = build.src.join(\"src/rt/rust_test_helpers.c\");\n+    if up_to_date(&src, &dst.join(\"librust_test_helpers.a\")) {\n+        return\n+    }\n+\n+    println!(\"Building test helpers\");\n+    t!(fs::create_dir_all(&dst));\n+    let mut cfg = gcc::Config::new();\n+    cfg.cargo_metadata(false)\n+       .out_dir(&dst)\n+       .target(target)\n+       .host(&build.config.build)\n+       .opt_level(0)\n+       .debug(false)\n+       .file(build.src.join(\"src/rt/rust_test_helpers.c\"))\n+       .compile(\"librust_test_helpers.a\");\n+}"}, {"sha": "09e6e467b06e51566c8fdae638b8aea8ec8e45de", "filename": "src/bootstrap/build/sanity.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fsanity.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -66,6 +66,12 @@ pub fn check(build: &mut Build) {\n         need_cmd(build.cxx(host).as_ref());\n     }\n \n+    // Externally configured LLVM requires FileCheck to exist\n+    let filecheck = build.llvm_filecheck(&build.config.build);\n+    if !filecheck.starts_with(&build.out) && !filecheck.exists() {\n+        panic!(\"filecheck executable {:?} does not exist\", filecheck);\n+    }\n+\n     for target in build.config.target.iter() {\n         // Either can't build or don't want to run jemalloc on these targets\n         if target.contains(\"rumprun\") ||\n@@ -134,4 +140,17 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n                    target);\n         }\n     }\n+\n+    let run = |cmd: &mut Command| {\n+        cmd.output().map(|output| {\n+            String::from_utf8_lossy(&output.stdout)\n+                   .lines().next().unwrap()\n+                   .to_string()\n+        })\n+    };\n+    build.gdb_version = run(Command::new(\"gdb\").arg(\"--version\")).ok();\n+    build.lldb_version = run(Command::new(\"lldb\").arg(\"--version\")).ok();\n+    if build.lldb_version.is_some() {\n+        build.lldb_python_dir = run(Command::new(\"lldb\").arg(\"-P\")).ok();\n+    }\n }"}, {"sha": "a22b28a6cddb4d123979e3414aa063f07e020802", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -52,6 +52,7 @@ macro_rules! targets {\n             (tool_error_index, ToolErrorIndex { stage: u32 }),\n             (tool_cargotest, ToolCargoTest { stage: u32 }),\n             (tool_tidy, ToolTidy { stage: u32 }),\n+            (tool_compiletest, ToolCompiletest { stage: u32 }),\n \n             // Steps for long-running native builds. Ideally these wouldn't\n             // actually exist and would be part of build scripts, but for now\n@@ -61,6 +62,8 @@ macro_rules! targets {\n             // with braces are unstable so we just pick something that works.\n             (llvm, Llvm { _dummy: () }),\n             (compiler_rt, CompilerRt { _dummy: () }),\n+            (test_helpers, TestHelpers { _dummy: () }),\n+            (debugger_scripts, DebuggerScripts { stage: u32 }),\n \n             // Steps for various pieces of documentation that we can generate,\n             // the 'doc' step is just a pseudo target to depend on a bunch of\n@@ -81,6 +84,18 @@ macro_rules! targets {\n             (check_linkcheck, CheckLinkcheck { stage: u32 }),\n             (check_cargotest, CheckCargoTest { stage: u32 }),\n             (check_tidy, CheckTidy { stage: u32 }),\n+            (check_rpass, CheckRPass { compiler: Compiler<'a> }),\n+            (check_rfail, CheckRFail { compiler: Compiler<'a> }),\n+            (check_cfail, CheckCFail { compiler: Compiler<'a> }),\n+            (check_pfail, CheckPFail { compiler: Compiler<'a> }),\n+            (check_codegen, CheckCodegen { compiler: Compiler<'a> }),\n+            (check_codegen_units, CheckCodegenUnits { compiler: Compiler<'a> }),\n+            (check_debuginfo, CheckDebuginfo { compiler: Compiler<'a> }),\n+            (check_rustdoc, CheckRustdoc { compiler: Compiler<'a> }),\n+            (check_pretty, CheckPretty { compiler: Compiler<'a> }),\n+            (check_rpass_valgrind, CheckRPassValgrind { compiler: Compiler<'a> }),\n+            (check_rpass_full, CheckRPassFull { compiler: Compiler<'a> }),\n+            (check_cfail_full, CheckCFailFull { compiler: Compiler<'a> }),\n \n             // Distribution targets, creating tarballs\n             (dist, Dist { stage: u32 }),\n@@ -278,6 +293,8 @@ impl<'a> Step<'a> {\n                 vec![self.llvm(()).target(&build.config.build)]\n             }\n             Source::Llvm { _dummy } => Vec::new(),\n+            Source::TestHelpers { _dummy } => Vec::new(),\n+            Source::DebuggerScripts { stage: _ } => Vec::new(),\n \n             // Note that all doc targets depend on artifacts from the build\n             // architecture, not the target (which is where we're generating\n@@ -310,9 +327,23 @@ impl<'a> Step<'a> {\n                      self.doc_std(stage),\n                      self.doc_error_index(stage)]\n             }\n-            Source::Check { stage, compiler: _ } => {\n-                vec![self.check_linkcheck(stage),\n-                     self.dist(stage)]\n+            Source::Check { stage, compiler } => {\n+                vec![\n+                    self.check_rpass(compiler),\n+                    self.check_cfail(compiler),\n+                    self.check_rfail(compiler),\n+                    self.check_pfail(compiler),\n+                    self.check_codegen(compiler),\n+                    self.check_codegen_units(compiler),\n+                    self.check_debuginfo(compiler),\n+                    self.check_rustdoc(compiler),\n+                    self.check_pretty(compiler),\n+                    self.check_rpass_valgrind(compiler),\n+                    self.check_rpass_full(compiler),\n+                    self.check_cfail_full(compiler),\n+                    self.check_linkcheck(stage),\n+                    self.dist(stage),\n+                ]\n             }\n             Source::CheckLinkcheck { stage } => {\n                 vec![self.tool_linkchecker(stage), self.doc(stage)]\n@@ -324,6 +355,34 @@ impl<'a> Step<'a> {\n             Source::CheckTidy { stage } => {\n                 vec![self.tool_tidy(stage)]\n             }\n+            Source::CheckRFail { compiler } |\n+            Source::CheckPFail { compiler } |\n+            Source::CheckCodegen { compiler } |\n+            Source::CheckCodegenUnits { compiler } |\n+            Source::CheckRustdoc { compiler } |\n+            Source::CheckPretty { compiler } |\n+            Source::CheckCFail { compiler } |\n+            Source::CheckRPassValgrind { compiler } |\n+            Source::CheckRPass { compiler } => {\n+                vec![\n+                    self.libtest(compiler),\n+                    self.tool_compiletest(compiler.stage),\n+                    self.test_helpers(()),\n+                ]\n+            }\n+            Source::CheckDebuginfo { compiler } => {\n+                vec![\n+                    self.libtest(compiler),\n+                    self.tool_compiletest(compiler.stage),\n+                    self.test_helpers(()),\n+                    self.debugger_scripts(compiler.stage),\n+                ]\n+            }\n+            Source::CheckRPassFull { compiler } |\n+            Source::CheckCFailFull { compiler } => {\n+                vec![self.librustc(compiler),\n+                     self.tool_compiletest(compiler.stage)]\n+            }\n \n             Source::ToolLinkchecker { stage } |\n             Source::ToolTidy { stage } => {\n@@ -336,6 +395,9 @@ impl<'a> Step<'a> {\n             Source::ToolCargoTest { stage } => {\n                 vec![self.libstd(self.compiler(stage))]\n             }\n+            Source::ToolCompiletest { stage } => {\n+                vec![self.libtest(self.compiler(stage))]\n+            }\n \n             Source::DistDocs { stage } => vec![self.doc(stage)],\n             Source::DistMingw { _dummy: _ } => Vec::new(),"}, {"sha": "f49ac4fc8e401557b30b2ab3d2d03ba8f97be038", "filename": "src/test/auxiliary/rbmtp_cross_crate_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fauxiliary%2Frbmtp_cross_crate_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fauxiliary%2Frbmtp_cross_crate_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frbmtp_cross_crate_lib.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/test/auxiliary/regions_bounded_method_type_parameters_cross_crate_lib.rs"}, {"sha": "2e425ac96c55f9de510c0358e93105c48424d3ba", "filename": "src/test/auxiliary/tdticc_coherence_lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fauxiliary%2Ftdticc_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fauxiliary%2Ftdticc_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftdticc_coherence_lib.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/test/auxiliary/typeck_default_trait_impl_cross_crate_coherence_lib.rs"}, {"sha": "1eb36e34ab32ee611ceaaa2e70b1547c93b93a07", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters-cross-crate.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:regions_bounded_method_type_parameters_cross_crate_lib.rs\n+// aux-build:rbmtp_cross_crate_lib.rs\n \n // Check explicit region bounds on methods in the cross crate case.\n \n-extern crate regions_bounded_method_type_parameters_cross_crate_lib as lib;\n+extern crate rbmtp_cross_crate_lib as lib;\n \n use lib::Inv;\n use lib::MaybeOwned;"}, {"sha": "b918b0dde47f45fe00c0f20081844abefb781927", "filename": "src/test/compile-fail/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:typeck_default_trait_impl_cross_crate_coherence_lib.rs\n+// aux-build:tdticc_coherence_lib.rs\n \n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE).\n \n #![feature(optin_builtin_traits)]\n \n-extern crate typeck_default_trait_impl_cross_crate_coherence_lib as lib;\n+extern crate tdticc_coherence_lib as lib;\n \n use lib::DefaultedTrait;\n "}, {"sha": "3b79636a2db5bbad449158a193a9459227cf43a5", "filename": "src/tools/compiletest/Cargo.lock", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.lock?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -0,0 +1,70 @@\n+[root]\n+name = \"compiletest\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"env_logger 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"env_logger\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.62 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"log\"\n+version = \"0.3.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"mempool\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"regex\"\n+version = \"0.1.62\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mempool 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+"}, {"sha": "359efe8af62e9d2ee4a23545d5d2ec898288cf0c", "filename": "src/tools/compiletest/Cargo.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -0,0 +1,15 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"compiletest\"\n+version = \"0.0.0\"\n+build = \"build.rs\"\n+\n+# Curiously, this will segfault if compiled with opt-level=3 on 64-bit MSVC when\n+# running the compile-fail test suite when a should-fail test panics. But hey if\n+# this is removed and it gets past the bots, sounds good to me.\n+[profile.release]\n+opt-level = 2\n+\n+[dependencies]\n+log = \"0.3\"\n+env_logger = \"0.3\""}, {"sha": "d5164b9b7591814430a77c9286ffab1b6cb19214", "filename": "src/tools/compiletest/build.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fbuild.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n+}"}, {"sha": "6ffc1e9ea11180c978f37b397aed4031f8594a53", "filename": "src/tools/compiletest/src/common.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -86,8 +86,8 @@ pub struct Config {\n     // The python executable\n     pub python: String,\n \n-    // The llvm binaries path\n-    pub llvm_bin_path: Option<PathBuf>,\n+    // The llvm FileCheck binary path\n+    pub llvm_filecheck: Option<PathBuf>,\n \n     // The valgrind path\n     pub valgrind_path: Option<String>,", "previous_filename": "src/compiletest/common.rs"}, {"sha": "418a0bc7121cbd624be4797e47fd78b5226b59be", "filename": "src/tools/compiletest/src/errors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/compiletest/errors.rs"}, {"sha": "ef93fcfa013f89f10b99c00917a462cbe21aea18", "filename": "src/tools/compiletest/src/header.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/compiletest/header.rs"}, {"sha": "e92b0c8728099a54101294e91e34be0a545af156", "filename": "src/tools/compiletest/src/main.rs", "status": "renamed", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_type = \"bin\"]\n+#![crate_name = \"compiletest\"]\n \n #![feature(box_syntax)]\n-#![feature(libc)]\n #![feature(rustc_private)]\n #![feature(test)]\n #![feature(question_mark)]\n+#![feature(libc)]\n \n #![deny(warnings)]\n \n@@ -25,6 +25,9 @@ extern crate getopts;\n #[macro_use]\n extern crate log;\n \n+#[cfg(cargobuild)]\n+extern crate env_logger;\n+\n use std::env;\n use std::fs;\n use std::io;\n@@ -43,7 +46,13 @@ pub mod common;\n pub mod errors;\n mod raise_fd_limit;\n \n-pub fn main() {\n+fn main() {\n+    #[cfg(cargobuild)]\n+    fn log_init() { env_logger::init().unwrap(); }\n+    #[cfg(not(cargobuild))]\n+    fn log_init() {}\n+    log_init();\n+\n     let config = parse_config(env::args().collect());\n \n     if config.valgrind_path.is_none() && config.force_valgrind {\n@@ -64,7 +73,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"python\", \"path to python to use for doc tests\", \"PATH\"),\n           optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\"),\n           optflag(\"\", \"force-valgrind\", \"fail if Valgrind tests cannot be run under Valgrind\"),\n-          optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n+          optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\"),\n           reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n           reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n           reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n@@ -134,7 +143,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         python: matches.opt_str(\"python\").unwrap(),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n-        llvm_bin_path: matches.opt_str(\"llvm-bin-path\").map(|s| PathBuf::from(&s)),\n+        llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),", "previous_filename": "src/compiletest/compiletest.rs"}, {"sha": "f418edf66866e83f0c97d3af8fcc367484c01b33", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/compiletest/procsrv.rs"}, {"sha": "0cf90ec95f38e3c838e40e08ce6e2f57580cb080", "filename": "src/tools/compiletest/src/raise_fd_limit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fraise_fd_limit.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/compiletest/raise_fd_limit.rs"}, {"sha": "6358d19ff0906da57d4bfbd586eeefebec17df2b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "patch": "@@ -1845,7 +1845,7 @@ fn compile_test_and_save_ir(config: &Config, props: &TestProps,\n \n fn check_ir_with_filecheck(config: &Config, testpaths: &TestPaths) -> ProcRes {\n     let irfile = output_base_name(config, testpaths).with_extension(\"ll\");\n-    let prog = config.llvm_bin_path.as_ref().unwrap().join(\"FileCheck\");\n+    let prog = config.llvm_filecheck.as_ref().unwrap();\n     let proc_args = ProcArgs {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         prog: prog.to_str().unwrap().to_owned(),\n@@ -1858,8 +1858,8 @@ fn check_ir_with_filecheck(config: &Config, testpaths: &TestPaths) -> ProcRes {\n fn run_codegen_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n     assert!(props.revisions.is_empty(), \"revisions not relevant here\");\n \n-    if config.llvm_bin_path.is_none() {\n-        fatal(None, \"missing --llvm-bin-path\");\n+    if config.llvm_filecheck.is_none() {\n+        fatal(None, \"missing --llvm-filecheck\");\n     }\n \n     let mut proc_res = compile_test_and_save_ir(config, props, testpaths);", "previous_filename": "src/compiletest/runtest.rs"}, {"sha": "69b839c5b7d9d0e94cdf58623574ef3ecd8e9dc3", "filename": "src/tools/compiletest/src/util.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d36ad55aa5176eeec0da6d2a7b1689c263195e8a/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=d36ad55aa5176eeec0da6d2a7b1689c263195e8a", "previous_filename": "src/compiletest/util.rs"}]}