{"sha": "7f5dc49214b05a469c5c4974fc4e605cb72822ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNWRjNDkyMTRiMDVhNDY5YzVjNDk3NGZjNGU2MDVjYjcyODIyZWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T12:16:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T16:56:43Z"}, "message": "review or fix miri failures in iter, slice, cell, time", "tree": {"sha": "7e5650b8b636dce5b843cccc29ec262c651dbc06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e5650b8b636dce5b843cccc29ec262c651dbc06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5dc49214b05a469c5c4974fc4e605cb72822ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5dc49214b05a469c5c4974fc4e605cb72822ea", "html_url": "https://github.com/rust-lang/rust/commit/7f5dc49214b05a469c5c4974fc4e605cb72822ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5dc49214b05a469c5c4974fc4e605cb72822ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ade1cfaa095350f27c90a144779a250312cb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ade1cfaa095350f27c90a144779a250312cb26", "html_url": "https://github.com/rust-lang/rust/commit/26ade1cfaa095350f27c90a144779a250312cb26"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "b16416022c04e700197081fcdaa016d4fb565655", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=7f5dc49214b05a469c5c4974fc4e605cb72822ea", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::cell::*;\n use core::default::Default;\n use std::mem::drop;\n@@ -111,6 +109,7 @@ fn double_borrow_single_release_no_borrow_mut() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn discard_doesnt_unborrow() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();\n@@ -351,6 +350,7 @@ fn refcell_ref_coercion() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn refcell_swap_borrows() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();\n@@ -360,6 +360,7 @@ fn refcell_swap_borrows() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn refcell_replace_borrows() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();"}, {"sha": "bc951829bd7b996c2f9418664f7bff38ff913c79", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=7f5dc49214b05a469c5c4974fc4e605cb72822ea", "patch": "@@ -190,7 +190,6 @@ fn test_iterator_step_by() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_iterator_step_by_nth() {\n     let mut it = (0..16).step_by(5);\n     assert_eq!(it.nth(0), Some(0));\n@@ -209,7 +208,6 @@ fn test_iterator_step_by_nth() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_iterator_step_by_nth_overflow() {\n     #[cfg(target_pointer_width = \"8\")]\n     type Bigger = u16;\n@@ -262,7 +260,6 @@ fn test_iterator_step_by_zero() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_iterator_step_by_size_hint() {\n     struct StubSizeHint(usize, Option<usize>);\n     impl Iterator for StubSizeHint {\n@@ -1657,15 +1654,16 @@ fn test_range_inclusive_nth() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_range_step() {\n     #![allow(deprecated)]\n \n     assert_eq!((0..20).step_by(5).collect::<Vec<isize>>(), [0, 5, 10, 15]);\n     assert_eq!((1..21).rev().step_by(5).collect::<Vec<isize>>(), [20, 15, 10, 5]);\n     assert_eq!((1..21).rev().step_by(6).collect::<Vec<isize>>(), [20, 14, 8, 2]);\n     assert_eq!((200..255).step_by(50).collect::<Vec<u8>>(), [200, 250]);\n+    #[cfg(not(miri))] // Miri cannot compare empty slices\n     assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n+    #[cfg(not(miri))] // Miri cannot compare empty slices\n     assert_eq!((200..200).step_by(1).collect::<Vec<isize>>(), []);\n \n     assert_eq!((0..20).step_by(1).size_hint(), (20, Some(20)));\n@@ -1681,15 +1679,13 @@ fn test_range_step() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_step_by_skip() {\n     assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);\n     assert_eq!((0..=50).step_by(10).nth(3), Some(30));\n     assert_eq!((200..=255u8).step_by(10).nth(3), Some(230));\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n     assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);"}, {"sha": "31d16e0e320571c28897f4b30feb266e3bc86ba0", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=7f5dc49214b05a469c5c4974fc4e605cb72822ea", "patch": "@@ -1015,7 +1015,7 @@ fn test_rotate_right() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support entropy\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n@@ -1171,7 +1171,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1187,7 +1187,6 @@ fn test_align_to_simple() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_align_to_zst() {\n     let bytes = [1, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<()>() };\n@@ -1196,7 +1195,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);\n@@ -1208,7 +1207,6 @@ fn test_align_to_non_trivial() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_align_to_empty_mid() {\n     use core::mem;\n "}, {"sha": "f7d00304df5b6e8b1cce502d339a5f26467508b6", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5dc49214b05a469c5c4974fc4e605cb72822ea/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=7f5dc49214b05a469c5c4974fc4e605cb72822ea", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::time::Duration;\n \n #[test]\n@@ -109,12 +107,14 @@ fn checked_sub() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn sub_bad1() {\n     let _ = Duration::new(0, 0) - Duration::new(0, 1);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn sub_bad2() {\n     let _ = Duration::new(0, 0) - Duration::new(1, 0);\n }\n@@ -287,6 +287,7 @@ fn debug_formatting_precision_two() {\n }\n \n #[test]\n+#[cfg(not(miri))] // FIXME: A bug in Miri breaks padding in string formatting\n fn debug_formatting_precision_high() {\n     assert_eq!(format!(\"{:.5?}\",  Duration::new(0, 23_678)), \"23.67800\u00b5s\");\n "}]}