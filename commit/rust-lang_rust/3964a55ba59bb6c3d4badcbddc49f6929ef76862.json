{"sha": "3964a55ba59bb6c3d4badcbddc49f6929ef76862", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NjRhNTViYTU5YmI2YzNkNGJhZGNiZGRjNDlmNjkyOWVmNzY4NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-13T10:07:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-13T10:07:38Z"}, "message": "Auto merge of #67077 - Aaron1011:build-llvm-in-binary, r=alexcrichton\n\nrustc: Link LLVM directly into rustc again (take two)\n\nThis is a continuation of PR https://github.com/rust-lang/rust/pull/65703", "tree": {"sha": "b93c1463acd9450d8a83d338d65c31ea94c2f69a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b93c1463acd9450d8a83d338d65c31ea94c2f69a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3964a55ba59bb6c3d4badcbddc49f6929ef76862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3964a55ba59bb6c3d4badcbddc49f6929ef76862", "html_url": "https://github.com/rust-lang/rust/commit/3964a55ba59bb6c3d4badcbddc49f6929ef76862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3964a55ba59bb6c3d4badcbddc49f6929ef76862/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9409c208a9a70eb6194c7502979843f42d6fed1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9409c208a9a70eb6194c7502979843f42d6fed1a", "html_url": "https://github.com/rust-lang/rust/commit/9409c208a9a70eb6194c7502979843f42d6fed1a"}, {"sha": "47e932b96e726d855f9885f073ef6b6b6bb78438", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e932b96e726d855f9885f073ef6b6b6bb78438", "html_url": "https://github.com/rust-lang/rust/commit/47e932b96e726d855f9885f073ef6b6b6bb78438"}], "stats": {"total": 730, "additions": 251, "deletions": 479}, "files": [{"sha": "fc4e3bcd83afcc875b186f90c94e591aff7257ef", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -3435,7 +3435,27 @@ dependencies = [\n name = \"rustc_codegen_llvm\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n+ \"flate2\",\n+ \"libc\",\n+ \"log\",\n+ \"rustc\",\n+ \"rustc-demangle\",\n+ \"rustc_codegen_ssa\",\n+ \"rustc_codegen_utils\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_fs_util\",\n+ \"rustc_incremental\",\n+ \"rustc_index\",\n  \"rustc_llvm\",\n+ \"rustc_session\",\n+ \"rustc_target\",\n+ \"smallvec 0.6.10\",\n+ \"syntax\",\n+ \"syntax_expand\",\n+ \"syntax_pos\",\n ]\n \n [[package]]\n@@ -3597,6 +3617,7 @@ dependencies = [\n  \"once_cell\",\n  \"rustc\",\n  \"rustc-rayon\",\n+ \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n  \"rustc_codegen_utils\",\n  \"rustc_data_structures\",\n@@ -3651,6 +3672,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper\",\n  \"cc\",\n+ \"libc\",\n ]\n \n [[package]]"}, {"sha": "5152a6c988582260cd83695b6d6b1ed9a81b7048", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -379,9 +379,6 @@\n # and currently the only standard option supported is `\"llvm\"`\n #codegen-backends = [\"llvm\"]\n \n-# This is the name of the directory in which codegen backends will get installed\n-#codegen-backends-dir = \"codegen-backends\"\n-\n # Indicates whether LLD will be compiled and made available in the sysroot for\n # rustc to execute.\n #lld = false"}, {"sha": "8b0ad169cfc257f050254be9d5546a2bd7c2fbe9", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -339,7 +339,6 @@ impl<'a> Builder<'a> {\n             Kind::Build => describe!(\n                 compile::Std,\n                 compile::Rustc,\n-                compile::CodegenBackend,\n                 compile::StartupObjects,\n                 tool::BuildManifest,\n                 tool::Rustbook,\n@@ -364,7 +363,6 @@ impl<'a> Builder<'a> {\n             Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,\n                 check::Rustc,\n-                check::CodegenBackend,\n                 check::Rustdoc\n             ),\n             Kind::Test => describe!(\n@@ -632,11 +630,6 @@ impl<'a> Builder<'a> {\n         self.ensure(Libdir { compiler, target })\n     }\n \n-    pub fn sysroot_codegen_backends(&self, compiler: Compiler) -> PathBuf {\n-        self.sysroot_libdir(compiler, compiler.host)\n-            .with_file_name(self.config.rust_codegen_backends_dir.clone())\n-    }\n-\n     /// Returns the compiler's libdir where it stores the dynamic libraries that\n     /// it itself links against.\n     ///\n@@ -707,15 +700,6 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n-    /// Gets the paths to all of the compiler's codegen backends.\n-    fn codegen_backends(&self, compiler: Compiler) -> impl Iterator<Item = PathBuf> {\n-        fs::read_dir(self.sysroot_codegen_backends(compiler))\n-            .into_iter()\n-            .flatten()\n-            .filter_map(Result::ok)\n-            .map(|entry| entry.path())\n-    }\n-\n     pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n         self.ensure(tool::Rustdoc { compiler })\n     }\n@@ -759,12 +743,6 @@ impl<'a> Builder<'a> {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n \n-        // Codegen backends are not yet tracked by -Zbinary-dep-depinfo,\n-        // so we need to explicitly clear out if they've been updated.\n-        for backend in self.codegen_backends(compiler) {\n-            self.clear_if_dirty(&out_dir, &backend);\n-        }\n-\n         if cmd == \"doc\" || cmd == \"rustdoc\" {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation."}, {"sha": "b9d97fb8b760a05149b9ba141e180a97aca5f72f", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -363,6 +363,10 @@ fn dist_with_same_targets_and_hosts() {\n                 compiler: Compiler { host: a, stage: 1 },\n                 target: b,\n             },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n         ]\n     );\n     assert_eq!("}, {"sha": "f5c427d870e718e86465767556a63c5c79d620ed", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 63, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -1,11 +1,10 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::compile::{run_cargo, std_cargo, rustc_cargo, rustc_cargo_env,\n-                     add_to_sysroot};\n+use crate::compile::{run_cargo, std_cargo, rustc_cargo, add_to_sysroot};\n use crate::builder::{RunConfig, Builder, Kind, ShouldRun, Step};\n use crate::tool::{prepare_tool_cargo, SourceType};\n use crate::{Compiler, Mode};\n-use crate::cache::{INTERNER, Interned};\n+use crate::cache::Interned;\n use std::path::PathBuf;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -97,7 +96,7 @@ impl Step for Rustc {\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target,\n             cargo_subcommand(builder.kind));\n-        rustc_cargo(builder, &mut cargo);\n+        rustc_cargo(builder, &mut cargo, target);\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n@@ -113,55 +112,6 @@ impl Step for Rustc {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct CodegenBackend {\n-    pub target: Interned<String>,\n-    pub backend: Interned<String>,\n-}\n-\n-impl Step for CodegenBackend {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc_codegen_llvm\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        let backend = run.builder.config.rust_codegen_backends.get(0);\n-        let backend = backend.cloned().unwrap_or_else(|| {\n-            INTERNER.intern_str(\"llvm\")\n-        });\n-        run.builder.ensure(CodegenBackend {\n-            target: run.target,\n-            backend,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let compiler = builder.compiler(0, builder.config.build);\n-        let target = self.target;\n-        let backend = self.backend;\n-\n-        builder.ensure(Rustc { target });\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target,\n-            cargo_subcommand(builder.kind));\n-        cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n-        rustc_cargo_env(builder, &mut cargo);\n-\n-        // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n-\n-        run_cargo(builder,\n-                  cargo,\n-                  args(builder.kind),\n-                  &codegen_backend_stamp(builder, compiler, target, backend),\n-                  vec![],\n-                  true);\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustdoc {\n     pub target: Interned<String>,\n@@ -231,16 +181,6 @@ pub fn librustc_stamp(\n     builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc-check.stamp\")\n }\n \n-/// Cargo's output path for librustc_codegen_llvm in a given stage, compiled by a particular\n-/// compiler for the specified target and backend.\n-fn codegen_backend_stamp(builder: &Builder<'_>,\n-                         compiler: Compiler,\n-                         target: Interned<String>,\n-                         backend: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Codegen, target)\n-         .join(format!(\".librustc_codegen_llvm-{}-check.stamp\", backend))\n-}\n-\n /// Cargo's output path for rustdoc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn rustdoc_stamp("}, {"sha": "baf9aabed00af459378c3279636e1dc690181c9e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 97, "deletions": 237, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -27,7 +27,7 @@ use crate::{Compiler, Mode, GitRepo};\n use crate::native;\n \n use crate::cache::{INTERNER, Interned};\n-use crate::builder::{Step, RunConfig, ShouldRun, Builder};\n+use crate::builder::{Step, RunConfig, ShouldRun, Builder, Kind};\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n@@ -445,7 +445,7 @@ impl Step for Rustc {\n         });\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n-        rustc_cargo(builder, &mut cargo);\n+        rustc_cargo(builder, &mut cargo, target);\n \n         builder.info(&format!(\"Building stage{} compiler artifacts ({} -> {})\",\n                  compiler.stage, &compiler.host, target));\n@@ -456,6 +456,44 @@ impl Step for Rustc {\n                   vec![],\n                   false);\n \n+        // We used to build librustc_codegen_llvm as a separate step,\n+        // which produced a dylib that the compiler would dlopen() at runtime.\n+        // This meant that we only needed to make sure that libLLVM.so was\n+        // installed by the time we went to run a tool using it - since\n+        // librustc_codegen_llvm was effectively a standalone artifact,\n+        // other crates were completely oblivious to its dependency\n+        // on `libLLVM.so` during build time.\n+        //\n+        // However, librustc_codegen_llvm is now built as an ordinary\n+        // crate during the same step as the rest of the compiler crates.\n+        // This means that any crates depending on it will see the fact\n+        // that it uses `libLLVM.so` as a native library, and will\n+        // cause us to pass `-llibLLVM.so` to the linker when we link\n+        // a binary.\n+        //\n+        // For `rustc` itself, this works out fine.\n+        // During the `Assemble` step, we call `dist::maybe_install_llvm_dylib`\n+        // to copy libLLVM.so into the `stage` directory. We then link\n+        // the compiler binary, which will find `libLLVM.so` in the correct place.\n+        //\n+        // However, this is insufficient for tools that are build against stage0\n+        // (e.g. stage1 rustdoc). Since `Assemble` for stage0 doesn't actually do anything,\n+        // we won't have `libLLVM.so` in the stage0 sysroot. In the past, this wasn't\n+        // a problem - we would copy the tool binary into its correct stage directory\n+        // (e.g. stage1 for a stage1 rustdoc built against a stage0 compiler).\n+        // Since libLLVM.so wasn't resolved until runtime, it was fine for it to\n+        // not exist while we were building it.\n+        //\n+        // To ensure that we can still build stage1 tools against a stage0 compiler,\n+        // we explicitly copy libLLVM.so into the stage0 sysroot when building\n+        // the stage0 compiler. This ensures that tools built against stage0\n+        // will see libLLVM.so at build time, making the linker happy.\n+        if compiler.stage == 0 {\n+            builder.info(&format!(\"Installing libLLVM.so to stage 0 ({})\", compiler.host));\n+            let sysroot = builder.sysroot(compiler);\n+            dist::maybe_install_llvm_dylib(builder, compiler.host, &sysroot);\n+        }\n+\n         builder.ensure(RustcLink {\n             compiler: builder.compiler(compiler.stage, builder.config.build),\n             target_compiler: compiler,\n@@ -464,21 +502,20 @@ impl Step for Rustc {\n     }\n }\n \n-pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo) {\n+pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo, target: Interned<String>) {\n     cargo.arg(\"--features\").arg(builder.rustc_features())\n          .arg(\"--manifest-path\")\n          .arg(builder.src.join(\"src/rustc/Cargo.toml\"));\n-    rustc_cargo_env(builder, cargo);\n+    rustc_cargo_env(builder, cargo, target);\n }\n \n-pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo) {\n+pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: Interned<String>) {\n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n     cargo.env(\"CFG_RELEASE\", builder.rust_release())\n          .env(\"CFG_RELEASE_CHANNEL\", &builder.config.channel)\n          .env(\"CFG_VERSION\", builder.rust_version())\n-         .env(\"CFG_PREFIX\", builder.config.prefix.clone().unwrap_or_default())\n-         .env(\"CFG_CODEGEN_BACKENDS_DIR\", &builder.config.rust_codegen_backends_dir);\n+         .env(\"CFG_PREFIX\", builder.config.prefix.clone().unwrap_or_default());\n \n     let libdir_relative = builder.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n@@ -501,6 +538,49 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo) {\n     if builder.config.rust_verify_llvm_ir {\n         cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n     }\n+\n+    // Pass down configuration from the LLVM build into the build of\n+    // librustc_llvm and librustc_codegen_llvm.\n+    //\n+    // Note that this is disabled if LLVM itself is disabled or we're in a check\n+    // build, where if we're in a check build there's no need to build all of\n+    // LLVM and such.\n+    if builder.config.llvm_enabled() && builder.kind != Kind::Check {\n+        if builder.is_rust_llvm(target) {\n+            cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+        }\n+        let llvm_config = builder.ensure(native::Llvm { target });\n+        cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+        let target_config = builder.config.target_config.get(&target);\n+        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+            cargo.env(\"CFG_LLVM_ROOT\", s);\n+        }\n+        // Some LLVM linker flags (-L and -l) may be needed to link librustc_llvm.\n+        if let Some(ref s) = builder.config.llvm_ldflags {\n+            cargo.env(\"LLVM_LINKER_FLAGS\", s);\n+        }\n+        // Building with a static libstdc++ is only supported on linux right now,\n+        // not for MSVC or macOS\n+        if builder.config.llvm_static_stdcpp &&\n+           !target.contains(\"freebsd\") &&\n+           !target.contains(\"windows\") &&\n+           !target.contains(\"apple\") {\n+            let file = compiler_file(builder,\n+                                     builder.cxx(target).unwrap(),\n+                                     target,\n+                                     \"libstdc++.a\");\n+            cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+        }\n+        if builder.config.llvm_link_shared || builder.config.llvm_thin_lto {\n+            cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+        }\n+        if builder.config.llvm_use_libcxx {\n+            cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n+        }\n+        if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n+            cargo.env(\"LLVM_NDEBUG\", \"1\");\n+        }\n+    }\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -537,215 +617,6 @@ impl Step for RustcLink {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct CodegenBackend {\n-    pub compiler: Compiler,\n-    pub target: Interned<String>,\n-    pub backend: Interned<String>,\n-}\n-\n-impl Step for CodegenBackend {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc_codegen_llvm\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        let backend = run.builder.config.rust_codegen_backends.get(0);\n-        let backend = backend.cloned().unwrap_or_else(|| {\n-            INTERNER.intern_str(\"llvm\")\n-        });\n-        run.builder.ensure(CodegenBackend {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n-            target: run.target,\n-            backend,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let compiler = self.compiler;\n-        let target = self.target;\n-        let backend = self.backend;\n-\n-        builder.ensure(Rustc { compiler, target });\n-\n-        if builder.config.keep_stage.contains(&compiler.stage) {\n-            builder.info(\"Warning: Using a potentially old codegen backend. \\\n-                This may not behave well.\");\n-            // Codegen backends are linked separately from this step today, so we don't do\n-            // anything here.\n-            return;\n-        }\n-\n-        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n-        if compiler_to_use != compiler {\n-            builder.ensure(CodegenBackend {\n-                compiler: compiler_to_use,\n-                target,\n-                backend,\n-            });\n-            return;\n-        }\n-\n-        let out_dir = builder.cargo_out(compiler, Mode::Codegen, target);\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"build\");\n-        cargo.arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n-        rustc_cargo_env(builder, &mut cargo);\n-\n-        let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n-        cargo.arg(\"--features\").arg(features);\n-\n-        let tmp_stamp = out_dir.join(\".tmp.stamp\");\n-\n-        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false);\n-        if builder.config.dry_run {\n-            return;\n-        }\n-        let mut files = files.into_iter()\n-            .filter(|f| {\n-                let filename = f.file_name().unwrap().to_str().unwrap();\n-                is_dylib(filename) && filename.contains(\"rustc_codegen_llvm-\")\n-            });\n-        let codegen_backend = match files.next() {\n-            Some(f) => f,\n-            None => panic!(\"no dylibs built for codegen backend?\"),\n-        };\n-        if let Some(f) = files.next() {\n-            panic!(\"codegen backend built two dylibs:\\n{}\\n{}\",\n-                   codegen_backend.display(),\n-                   f.display());\n-        }\n-        let stamp = codegen_backend_stamp(builder, compiler, target, backend);\n-        let codegen_backend = codegen_backend.to_str().unwrap();\n-        t!(fs::write(&stamp, &codegen_backend));\n-    }\n-}\n-\n-pub fn build_codegen_backend(builder: &Builder<'_>,\n-                             cargo: &mut Cargo,\n-                             compiler: &Compiler,\n-                             target: Interned<String>,\n-                             backend: Interned<String>) -> String {\n-    match &*backend {\n-        \"llvm\" => {\n-            // Build LLVM for our target. This will implicitly build the\n-            // host LLVM if necessary.\n-            let llvm_config = builder.ensure(native::Llvm {\n-                target,\n-            });\n-\n-            builder.info(&format!(\"Building stage{} codegen artifacts ({} -> {}, {})\",\n-                     compiler.stage, &compiler.host, target, backend));\n-\n-            // Pass down configuration from the LLVM build into the build of\n-            // librustc_llvm and librustc_codegen_llvm.\n-            if builder.is_rust_llvm(target) {\n-                cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-            }\n-\n-            cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-            let target_config = builder.config.target_config.get(&target);\n-            if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-                cargo.env(\"CFG_LLVM_ROOT\", s);\n-            }\n-            // Some LLVM linker flags (-L and -l) may be needed to link librustc_llvm.\n-            if let Some(ref s) = builder.config.llvm_ldflags {\n-                cargo.env(\"LLVM_LINKER_FLAGS\", s);\n-            }\n-            // Building with a static libstdc++ is only supported on linux and mingw right now,\n-            // not for MSVC or macOS\n-            if builder.config.llvm_static_stdcpp &&\n-               !target.contains(\"freebsd\") &&\n-               !target.contains(\"msvc\") &&\n-               !target.contains(\"apple\") {\n-                let file = compiler_file(builder,\n-                                         builder.cxx(target).unwrap(),\n-                                         target,\n-                                         \"libstdc++.a\");\n-                cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-            }\n-            if builder.config.llvm_link_shared || builder.config.llvm_thin_lto {\n-                cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-            }\n-            if builder.config.llvm_use_libcxx {\n-                cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n-            }\n-            if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n-                cargo.env(\"LLVM_NDEBUG\", \"1\");\n-            }\n-        }\n-        _ => panic!(\"unknown backend: {}\", backend),\n-    }\n-    String::new()\n-}\n-\n-/// Creates the `codegen-backends` folder for a compiler that's about to be\n-/// assembled as a complete compiler.\n-///\n-/// This will take the codegen artifacts produced by `compiler` and link them\n-/// into an appropriate location for `target_compiler` to be a functional\n-/// compiler.\n-fn copy_codegen_backends_to_sysroot(builder: &Builder<'_>,\n-                                    compiler: Compiler,\n-                                    target_compiler: Compiler) {\n-    let target = target_compiler.host;\n-\n-    // Note that this step is different than all the other `*Link` steps in\n-    // that it's not assembling a bunch of libraries but rather is primarily\n-    // moving the codegen backend into place. The codegen backend of rustc is\n-    // not linked into the main compiler by default but is rather dynamically\n-    // selected at runtime for inclusion.\n-    //\n-    // Here we're looking for the output dylib of the `CodegenBackend` step and\n-    // we're copying that into the `codegen-backends` folder.\n-    let dst = builder.sysroot_codegen_backends(target_compiler);\n-    t!(fs::create_dir_all(&dst));\n-\n-    if builder.config.dry_run {\n-        return;\n-    }\n-\n-    for backend in builder.config.rust_codegen_backends.iter() {\n-        let stamp = codegen_backend_stamp(builder, compiler, target, *backend);\n-        let dylib = t!(fs::read_to_string(&stamp));\n-        let file = Path::new(&dylib);\n-        let filename = file.file_name().unwrap().to_str().unwrap();\n-        // change `librustc_codegen_llvm-xxxxxx.so` to `librustc_codegen_llvm-llvm.so`\n-        let target_filename = {\n-            let dash = filename.find('-').unwrap();\n-            let dot = filename.find('.').unwrap();\n-            format!(\"{}-{}{}\",\n-                    &filename[..dash],\n-                    backend,\n-                    &filename[dot..])\n-        };\n-        builder.copy(&file, &dst.join(target_filename));\n-    }\n-}\n-\n-fn copy_lld_to_sysroot(builder: &Builder<'_>,\n-                       target_compiler: Compiler,\n-                       lld_install_root: &Path) {\n-    let target = target_compiler.host;\n-\n-    let dst = builder.sysroot_libdir(target_compiler, target)\n-        .parent()\n-        .unwrap()\n-        .join(\"bin\");\n-    t!(fs::create_dir_all(&dst));\n-\n-    let src_exe = exe(\"lld\", &target);\n-    let dst_exe = exe(\"rust-lld\", &target);\n-    // we prepend this bin directory to the user PATH when linking Rust binaries. To\n-    // avoid shadowing the system LLD we rename the LLD we provide to `rust-lld`.\n-    builder.copy(&lld_install_root.join(\"bin\").join(&src_exe), &dst.join(&dst_exe));\n-}\n-\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(\n@@ -766,16 +637,6 @@ pub fn librustc_stamp(\n     builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc.stamp\")\n }\n \n-/// Cargo's output path for librustc_codegen_llvm in a given stage, compiled by a particular\n-/// compiler for the specified target and backend.\n-fn codegen_backend_stamp(builder: &Builder<'_>,\n-                         compiler: Compiler,\n-                         target: Interned<String>,\n-                         backend: Interned<String>) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Codegen, target)\n-        .join(format!(\".librustc_codegen_llvm-{}.stamp\", backend))\n-}\n-\n pub fn compiler_file(\n     builder: &Builder<'_>,\n     compiler: &Path,\n@@ -879,13 +740,6 @@ impl Step for Assemble {\n             compiler: build_compiler,\n             target: target_compiler.host,\n         });\n-        for &backend in builder.config.rust_codegen_backends.iter() {\n-            builder.ensure(CodegenBackend {\n-                compiler: build_compiler,\n-                target: target_compiler.host,\n-                backend,\n-            });\n-        }\n \n         let lld_install = if builder.config.lld_enabled {\n             Some(builder.ensure(native::Lld {\n@@ -911,13 +765,19 @@ impl Step for Assemble {\n             }\n         }\n \n-        copy_codegen_backends_to_sysroot(builder,\n-                                         build_compiler,\n-                                         target_compiler);\n+        let libdir = builder.sysroot_libdir(target_compiler, target_compiler.host);\n         if let Some(lld_install) = lld_install {\n-            copy_lld_to_sysroot(builder, target_compiler, &lld_install);\n+            let src_exe = exe(\"lld\", &target_compiler.host);\n+            let dst_exe = exe(\"rust-lld\", &target_compiler.host);\n+            // we prepend this bin directory to the user PATH when linking Rust binaries. To\n+            // avoid shadowing the system LLD we rename the LLD we provide to `rust-lld`.\n+            let dst = libdir.parent().unwrap().join(\"bin\");\n+            t!(fs::create_dir_all(&dst));\n+            builder.copy(&lld_install.join(\"bin\").join(&src_exe), &dst.join(&dst_exe));\n         }\n \n+        // Ensure that `libLLVM.so` ends up in the newly build compiler directory,\n+        // so that it can be found when the newly built `rustc` is run.\n         dist::maybe_install_llvm_dylib(builder, target_compiler.host, &sysroot);\n \n         // Link the compiler binary itself into place"}, {"sha": "5f2ef01bd5c452f2c74a23ffff764ce5f1dd65df", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -105,7 +105,6 @@ pub struct Config {\n     pub rust_optimize_tests: bool,\n     pub rust_dist_src: bool,\n     pub rust_codegen_backends: Vec<Interned<String>>,\n-    pub rust_codegen_backends_dir: String,\n     pub rust_verify_llvm_ir: bool,\n     pub rust_remap_debuginfo: bool,\n \n@@ -316,7 +315,6 @@ struct Rust {\n     dist_src: Option<bool>,\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n-    codegen_backends_dir: Option<String>,\n     lld: Option<bool>,\n     llvm_tools: Option<bool>,\n     lldb: Option<bool>,\n@@ -372,7 +370,6 @@ impl Config {\n         config.ignore_git = false;\n         config.rust_dist_src = true;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n-        config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n         config.deny_warnings = true;\n         config.missing_tools = false;\n \n@@ -575,8 +572,6 @@ impl Config {\n                     .collect();\n             }\n \n-            set(&mut config.rust_codegen_backends_dir, rust.codegen_backends_dir.clone());\n-\n             config.rust_codegen_units = rust.codegen_units.map(threads_from_config);\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n         }"}, {"sha": "02533944fc28fc560e9fbeb2c20f8766253ea8e1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -498,16 +498,6 @@ impl Step for Rustc {\n                 }\n             }\n \n-            // Copy over the codegen backends\n-            let backends_src = builder.sysroot_codegen_backends(compiler);\n-            let backends_rel = backends_src.strip_prefix(&src).unwrap()\n-                .strip_prefix(builder.sysroot_libdir_relative(compiler)).unwrap();\n-            // Don't use custom libdir here because ^lib/ will be resolved again with installer\n-            let backends_dst = image.join(\"lib\").join(&backends_rel);\n-\n-            t!(fs::create_dir_all(&backends_dst));\n-            builder.cp_r(&backends_src, &backends_dst);\n-\n             // Copy libLLVM.so to the lib dir as well, if needed. While not\n             // technically needed by rustc itself it's needed by lots of other\n             // components like the llvm tools and LLD. LLD is included below and\n@@ -2134,6 +2124,10 @@ impl Step for HashSign {\n \n // Maybe add libLLVM.so to the lib-dir. It will only have been built if\n // LLVM tools are linked dynamically.\n+//\n+// We add this to both the libdir of the rustc binary itself (for it to load at\n+// runtime) and also to the target directory so it can find it at link-time.\n+//\n // Note: This function does no yet support Windows but we also don't support\n //       linking LLVM tools dynamically on Windows yet.\n pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n@@ -2142,13 +2136,19 @@ pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n     let src_libdir = builder\n         .llvm_out(target)\n         .join(\"lib\");\n-    let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n-    t!(fs::create_dir_all(&dst_libdir));\n+    let dst_libdir1 = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n+    let dst_libdir2 = sysroot.join(builder.sysroot_libdir_relative(Compiler {\n+        stage: 1,\n+        host: target,\n+    }));\n+    t!(fs::create_dir_all(&dst_libdir1));\n+    t!(fs::create_dir_all(&dst_libdir2));\n \n     if target.contains(\"apple-darwin\") {\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");\n         if llvm_dylib_path.exists() {\n-            builder.install(&llvm_dylib_path, &dst_libdir, 0o644);\n+            builder.install(&llvm_dylib_path, &dst_libdir1, 0o644);\n+            builder.install(&llvm_dylib_path, &dst_libdir2, 0o644);\n         }\n         return\n     }\n@@ -2164,7 +2164,8 @@ pub fn maybe_install_llvm_dylib(builder: &Builder<'_>,\n         });\n \n \n-        builder.install(&llvm_dylib_path, &dst_libdir, 0o644);\n+        builder.install(&llvm_dylib_path, &dst_libdir1, 0o644);\n+        builder.install(&llvm_dylib_path, &dst_libdir2, 0o644);\n     }\n }\n "}, {"sha": "608cee0a80bfc9f602c8c60c78429f8f522e24ae", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -433,7 +433,7 @@ impl Step for Std {\n         builder.info(&format!(\"Documenting stage{} std ({})\", stage, target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n+        let compiler = builder.compiler(stage, builder.config.build);\n \n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std)\n@@ -541,7 +541,7 @@ impl Step for Rustc {\n         // Build cargo command.\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items --passes strip-hidden\");\n-        compile::rustc_cargo(builder, &mut cargo);\n+        compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`.\n         cargo.arg(\"--no-deps\");"}, {"sha": "080bef6853a20ce39fdd22ff0011f6918188bd34", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -500,6 +500,9 @@ impl Build {\n         if self.config.jemalloc {\n             features.push_str(\"jemalloc\");\n         }\n+        if self.config.llvm_enabled() {\n+            features.push_str(\" llvm\");\n+        }\n         features\n     }\n "}, {"sha": "f3b2a73d3c5dc54fb20e1e037cbf87a2443d92e9", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -1773,7 +1773,7 @@ impl Step for Crate {\n             }\n             Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });\n-                compile::rustc_cargo(builder, &mut cargo);\n+                compile::rustc_cargo(builder, &mut cargo, target);\n             }\n             _ => panic!(\"can only test libraries\"),\n         };"}, {"sha": "71cfacfa56058c929838712e0ab98e78cc7cb705", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -7,8 +7,28 @@ edition = \"2018\"\n [lib]\n name = \"rustc_codegen_llvm\"\n path = \"lib.rs\"\n-crate-type = [\"dylib\"]\n test = false\n+doctest = false\n \n [dependencies]\n+bitflags = \"1.0\"\n+flate2 = \"1.0\"\n+libc = \"0.2\"\n+log = \"0.4\"\n+rustc = { path = \"../librustc\" }\n+rustc-demangle = \"0.1\"\n+rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n+rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }\n+rustc_incremental = { path = \"../librustc_incremental\" }\n+rustc_index = { path = \"../librustc_index\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n+rustc_session = { path = \"../librustc_session\" }\n+rustc_target = { path = \"../librustc_target\" }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n+syntax = { path = \"../libsyntax\" }\n+syntax_expand = { path = \"../libsyntax_expand\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "2607a497326f9e1b140ea1c556747a517800d942", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -8,6 +8,7 @@ use crate::value::Value;\n use rustc_codegen_ssa::MemFlags;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n+use rustc::bug;\n use rustc_codegen_ssa::traits::*;\n use rustc_target::abi::call::ArgAbi;\n use rustc_target::abi::{HasDataLayout, LayoutOf};"}, {"sha": "e1d56b9be7a27f998b0ec17fcba49f610404260a", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -4,6 +4,7 @@ use crate::attributes;\n use libc::c_uint;\n use rustc::ty::TyCtxt;\n use syntax::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc::bug;\n \n use crate::ModuleLlvm;\n use crate::llvm::{self, False, True};"}, {"sha": "fa43e0829190b02f304ea1a670652033aa24d2b1", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -12,7 +12,7 @@ use syntax_pos::Span;\n \n use std::ffi::{CStr, CString};\n use libc::{c_uint, c_char};\n-\n+use log::debug;\n \n impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn codegen_inline_asm("}, {"sha": "5479a1f31445e8f7f6c74a5a5918b4f4cb5b86ea", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -12,6 +12,7 @@ use rustc::ty::query::Providers;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::abi::call::Conv;\n+use rustc_data_structures::const_cstr;\n use rustc_target::spec::PanicStrategy;\n use rustc_codegen_ssa::traits::*;\n "}, {"sha": "0e4e4e2f983f6ebc4ecb9bc648753436389d17c7", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -4,11 +4,12 @@ use crate::back::write::{self, DiagnosticHandlers, with_llvm_pmb, save_temp_bitc\n use crate::llvm::archive_ro::ArchiveRO;\n use crate::llvm::{self, True, False};\n use crate::{ModuleLlvm, LlvmCodegenBackend};\n+use rustc::bug;\n use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{ModuleConfig, CodegenContext, FatLTOInput};\n use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinShared, ThinModule};\n use rustc_codegen_ssa::traits::*;\n-use errors::{FatalError, Handler};\n+use rustc_errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::LOCAL_CRATE;\n@@ -17,6 +18,7 @@ use rustc::session::config::{self, Lto};\n use rustc::util::common::time_ext;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_codegen_ssa::{RLIB_BYTECODE_EXTENSION, ModuleCodegen, ModuleKind};\n+use log::{info, debug};\n \n use std::ffi::{CStr, CString};\n use std::ptr;"}, {"sha": "796ea7aac36a25bd0dc62db66ecd76a25c005d3c", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -10,6 +10,7 @@ use crate::type_::Type;\n use crate::context::{is_pie_binary, get_reloc_model};\n use crate::common;\n use crate::LlvmCodegenBackend;\n+use rustc::bug;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler};\n use rustc_codegen_ssa::traits::*;\n@@ -20,7 +21,8 @@ use rustc_codegen_ssa::{RLIB_BYTECODE_EXTENSION, ModuleCodegen, CompiledModule};\n use rustc::util::common::time_ext;\n use rustc_fs_util::{path_to_c_string, link_or_copy};\n use rustc_data_structures::small_c_str::SmallCStr;\n-use errors::{Handler, FatalError};\n+use rustc_errors::{Handler, FatalError};\n+use log::debug;\n \n use std::ffi::CString;\n use std::fs;\n@@ -55,15 +57,15 @@ pub const TLS_MODEL_ARGS : [(&str, llvm::ThreadLocalMode); 4] = [\n     (\"local-exec\", llvm::ThreadLocalMode::LocalExec),\n ];\n \n-pub fn llvm_err(handler: &errors::Handler, msg: &str) -> FatalError {\n+pub fn llvm_err(handler: &rustc_errors::Handler, msg: &str) -> FatalError {\n     match llvm::last_error() {\n         Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),\n         None => handler.fatal(&msg),\n     }\n }\n \n pub fn write_output_file(\n-        handler: &errors::Handler,\n+        handler: &rustc_errors::Handler,\n         target: &'ll llvm::TargetMachine,\n         pm: &llvm::PassManager<'ll>,\n         m: &'ll llvm::Module,"}, {"sha": "7509584df277e9db74f9a50c2c796244b00ba14e", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -23,6 +23,8 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n+use rustc_data_structures::const_cstr;\n+use log::debug;\n \n // All Builders must have an llfn associated with them\n #[must_use]"}, {"sha": "c0be87b117d65d063d0941f7868f517299685e11", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -10,6 +10,7 @@ use crate::llvm;\n use crate::context::CodegenCx;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n+use log::debug;\n \n use rustc::ty::{TypeFoldable, Instance};\n use rustc::ty::layout::{FnAbiExt, HasTyCtxt};"}, {"sha": "ff03c1f76d87a4771b7406b3acf06d966c75873d", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -8,6 +8,8 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n+use rustc::bug;\n+use log::debug;\n \n use crate::consts::const_alloc_to_llvm;\n use rustc::ty::layout::{HasDataLayout, LayoutOf, self, TyLayout, Size};"}, {"sha": "11a105c1828caf182d71bd90653afa182b86a0b2", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -16,6 +16,8 @@ use rustc::ty::{self, Ty, Instance};\n use rustc_codegen_ssa::traits::*;\n use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n+use rustc::{bug, span_bug};\n+use log::debug;\n \n use rustc::ty::layout::{self, Size, Align, LayoutOf};\n "}, {"sha": "2c894a5d7403cf472736fceb792cc7d302f06e48", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -12,6 +12,7 @@ use rustc_codegen_ssa::traits::*;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc::bug;\n use rustc::mir::mono::CodegenUnit;\n use rustc::session::config::{self, DebugInfo};\n use rustc::session::Session;\n@@ -23,6 +24,7 @@ use rustc::util::nodemap::FxHashMap;\n use rustc_target::spec::{HasTargetSpec, Target};\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use crate::callee::get_fn;\n+use rustc_data_structures::const_cstr;\n \n use std::ffi::CStr;\n use std::cell::{Cell, RefCell};"}, {"sha": "739437ac27b82d25c395ca7e4810d1856b79e9ca", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -7,6 +7,7 @@ use crate::builder::Builder;\n use crate::value::Value;\n use rustc::session::config::DebugInfo;\n use rustc_codegen_ssa::traits::*;\n+use rustc::bug;\n \n use syntax::attr;\n use syntax::symbol::sym;"}, {"sha": "8327ff257c210fdf0aeb47736c5e373f3c1693b9", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -35,10 +35,13 @@ use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::FxHashMap;\n use rustc_fs_util::path_to_c_string;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_data_structures::const_cstr;\n use rustc_target::abi::HasDataLayout;\n use syntax::ast;\n use syntax::symbol::{Interner, Symbol};\n use syntax_pos::{self, Span, FileName};\n+use rustc::{bug, span_bug};\n+use log::debug;\n \n use libc::{c_uint, c_longlong};\n use std::collections::hash_map::Entry;"}, {"sha": "1de298de75f2e1ee95841176bc689235647f0e4a", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -33,6 +33,7 @@ use rustc_codegen_ssa::mir::debuginfo::{FunctionDebugContext, DebugScope,\n use libc::c_uint;\n use std::cell::RefCell;\n use std::ffi::CString;\n+use log::debug;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, BytePos, Span, Pos};"}, {"sha": "82183fa9bd7bfbce4beb83a3f6ca05338f0e02cb", "filename": "src/librustc_codegen_llvm/debuginfo/source_loc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fsource_loc.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -8,6 +8,7 @@ use crate::llvm;\n use crate::llvm::debuginfo::DIScope;\n use crate::builder::Builder;\n use rustc_codegen_ssa::traits::*;\n+use log::debug;\n \n use libc::c_uint;\n use syntax_pos::{Span, Pos};"}, {"sha": "5144b92ea101cee5c47ccd2fb944135cfe6e436c", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -22,6 +22,7 @@ use rustc::ty::Ty;\n use rustc::session::config::Sanitizer;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_codegen_ssa::traits::*;\n+use log::debug;\n \n /// Declare a function.\n ///"}, {"sha": "900f2d2defc0f29905f742d4309c6119956df58d", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -19,6 +19,7 @@ use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use rustc_target::abi::HasDataLayout;\n use syntax::ast;\n+use rustc::{bug, span_bug};\n \n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::traits::*;"}, {"sha": "1e1d74cfa9a40b3910f9241fa5a07d5ea57cdb7d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -24,33 +24,11 @@\n use back::write::{create_target_machine, create_informational_target_machine};\n use syntax_pos::symbol::Symbol;\n \n-extern crate rustc_demangle;\n-extern crate flate2;\n-#[macro_use] extern crate bitflags;\n-extern crate libc;\n-#[macro_use] extern crate rustc;\n-extern crate rustc_target;\n-#[macro_use] extern crate rustc_data_structures;\n-extern crate rustc_feature;\n-extern crate rustc_index;\n-extern crate rustc_incremental;\n-extern crate rustc_codegen_utils;\n-extern crate rustc_codegen_ssa;\n-extern crate rustc_fs_util;\n-extern crate rustc_driver as _;\n-\n-#[macro_use] extern crate log;\n-extern crate smallvec;\n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_errors as errors;\n-extern crate rustc_session;\n-\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, FatLTOInput};\n use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinModule};\n use rustc_codegen_ssa::CompiledModule;\n-use errors::{FatalError, Handler};\n+use rustc_errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n use syntax::expand::allocator::AllocatorKind;\n pub use llvm_util::target_features;\n@@ -339,12 +317,6 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n }\n \n-/// This is the entrypoint for a hot plugged rustc_codegen_llvm\n-#[no_mangle]\n-pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n-    LlvmCodegenBackend::new()\n-}\n-\n pub struct ModuleLlvm {\n     llcx: &'static mut llvm::Context,\n     llmod_raw: *const llvm::Module,"}, {"sha": "b8a1003b11866e6dfeb1e503ee73d4330e50b848", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -544,6 +544,7 @@ pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(&SMDiagnostic, *const c_voi\n \n pub mod debuginfo {\n     use super::{InvariantOpaque, Metadata};\n+    use bitflags::bitflags;\n \n     #[repr(C)]\n     pub struct DIBuilder<'a>(InvariantOpaque<'a>);"}, {"sha": "975756753d6adeef06aceada629b9ab553e49db3", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -10,11 +10,11 @@ pub use self::Linkage::*;\n \n use std::str::FromStr;\n use std::string::FromUtf8Error;\n-use std::slice;\n use std::ffi::CStr;\n use std::cell::RefCell;\n-use libc::{c_uint, c_char, size_t};\n+use libc::c_uint;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_llvm::RustString;\n \n pub mod archive_ro;\n pub mod diagnostic;\n@@ -81,21 +81,6 @@ impl FromStr for ArchiveKind {\n     }\n }\n \n-#[repr(C)]\n-pub struct RustString {\n-    bytes: RefCell<Vec<u8>>,\n-}\n-\n-/// Appending to a Rust string -- used by RawRustStringOstream.\n-#[no_mangle]\n-pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: &RustString,\n-                                                 ptr: *const c_char,\n-                                                 size: size_t) {\n-    let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n-\n-    sr.bytes.borrow_mut().extend_from_slice(slice);\n-}\n-\n pub fn SetInstructionCallConv(instr: &'a Value, cc: CallConv) {\n     unsafe {\n         LLVMSetInstructionCallConv(instr, cc as c_uint);"}, {"sha": "40739387b00c47dcedd3a6f506eb2f87db391fa5", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -8,6 +8,7 @@ use libc::c_int;\n use std::ffi::CString;\n use rustc_feature::UnstableFeatures;\n use syntax::symbol::sym;\n+use rustc::bug;\n \n use std::str;\n use std::slice;"}, {"sha": "bbe42e3b50a2ceb5df4533130b4943875906046d", "filename": "src/librustc_codegen_llvm/metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmetadata.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -6,6 +6,8 @@ use rustc_target::spec::Target;\n \n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_codegen_ssa::METADATA_FILENAME;\n+use log::debug;\n+use rustc_data_structures::rustc_erase_owner;\n \n use std::path::Path;\n use std::slice;"}, {"sha": "9f6bdd2390082a0325ca3d83b85d4b1a40ce43aa", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -9,6 +9,7 @@ use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::{TypeFoldable, Instance};\n use rustc::ty::layout::{FnAbiExt, LayoutOf};\n use rustc_codegen_ssa::traits::*;\n+use log::debug;\n \n pub use rustc::mir::mono::MonoItem;\n "}, {"sha": "e6677f3d25b9c35d2a8434fc93f49b6a7981740b", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -5,6 +5,7 @@ use crate::llvm::{Bool, False, True};\n use crate::context::CodegenCx;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n+use rustc::bug;\n \n use crate::common;\n use crate::type_of::LayoutLlvmExt;"}, {"sha": "f9cbf4bbe45020f710828fabd6db18b21c972bf4", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -6,6 +6,8 @@ use rustc::ty::layout::{self, Align, LayoutOf, FnAbiExt, PointeeInfo, Size, TyLa\n use rustc_target::abi::TyLayoutMethods;\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc_codegen_ssa::traits::*;\n+use log::debug;\n+use rustc::bug;\n \n use std::fmt::Write;\n "}, {"sha": "043cfc58974b7b0475a96f6cbacec71c66fef271", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -32,3 +32,6 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+\n+[features]\n+llvm = ['rustc_interface/llvm']"}, {"sha": "3230e048a3bf3e455c6de8409ad49baf59d71b1c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -42,7 +42,7 @@ use rustc_metadata::locator;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use errors::{PResult, registry::Registry};\n use rustc_interface::{interface, Queries};\n-use rustc_interface::util::get_codegen_sysroot;\n+use rustc_interface::util::get_builtin_codegen_backend;\n use rustc_data_structures::sync::SeqCst;\n use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_serialize::json::ToJson;\n@@ -765,7 +765,7 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"commit-date: {}\", unw(commit_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n-        get_codegen_sysroot(\"llvm\")().print_version();\n+        get_builtin_codegen_backend(\"llvm\")().print_version();\n     }\n }\n \n@@ -1059,7 +1059,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.iter().any(|x| *x == \"passes=list\") {\n-        get_codegen_sysroot(\"llvm\")().print_passes();\n+        get_builtin_codegen_backend(\"llvm\")().print_passes();\n         return None;\n     }\n "}, {"sha": "58fd92822e9a2d01455b1d0783b9859ca9608670", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -25,6 +25,7 @@ rustc_traits = { path = \"../librustc_traits\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n+rustc_codegen_llvm = { path = \"../librustc_codegen_llvm\", optional = true }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_passes = { path = \"../librustc_passes\" }\n@@ -39,3 +40,6 @@ once_cell = \"1\"\n \n [dev-dependencies]\n rustc_target = { path = \"../librustc_target\" }\n+\n+[features]\n+llvm = ['rustc_codegen_llvm']"}, {"sha": "c78b3ee07676eebc0bfe686393dd97ff71fc33b8", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 8, "deletions": 77, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -16,11 +16,9 @@ use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n use std::env;\n-use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n use std::io::{self, Write};\n use std::mem;\n use std::path::{Path, PathBuf};\n-use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::{Arc, Mutex, Once};\n use std::ops::DerefMut;\n use smallvec::SmallVec;\n@@ -249,7 +247,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n             filename if filename.contains(\".\") => {\n                 load_backend_from_dylib(filename.as_ref())\n             }\n-            codegen_name => get_codegen_sysroot(codegen_name),\n+            codegen_name => get_builtin_codegen_backend(codegen_name),\n         };\n \n         unsafe {\n@@ -384,83 +382,16 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     }\n }\n \n-pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n-    // For now we only allow this function to be called once as it'll dlopen a\n-    // few things, which seems to work best if we only do that once. In\n-    // general this assertion never trips due to the once guard in `get_codegen_backend`,\n-    // but there's a few manual calls to this function in this file we protect\n-    // against.\n-    static LOADED: AtomicBool = AtomicBool::new(false);\n-    assert!(!LOADED.fetch_or(true, Ordering::SeqCst),\n-            \"cannot load the default codegen backend twice\");\n-\n-    let target = session::config::host_triple();\n-    let sysroot_candidates = sysroot_candidates();\n-\n-    let sysroot = sysroot_candidates.iter()\n-        .map(|sysroot| {\n-            let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir).with_file_name(\n-                option_env!(\"CFG_CODEGEN_BACKENDS_DIR\").unwrap_or(\"codegen-backends\"))\n-        })\n-        .filter(|f| {\n-            info!(\"codegen backend candidate: {}\", f.display());\n-            f.exists()\n-        })\n-        .next();\n-    let sysroot = sysroot.unwrap_or_else(|| {\n-        let candidates = sysroot_candidates.iter()\n-            .map(|p| p.display().to_string())\n-            .collect::<Vec<_>>()\n-            .join(\"\\n* \");\n-        let err = format!(\"failed to find a `codegen-backends` folder \\\n-                           in the sysroot candidates:\\n* {}\", candidates);\n-        early_error(ErrorOutputType::default(), &err);\n-    });\n-    info!(\"probing {} for a codegen backend\", sysroot.display());\n-\n-    let d = sysroot.read_dir().unwrap_or_else(|e| {\n-        let err = format!(\"failed to load default codegen backend, couldn't \\\n-                           read `{}`: {}\", sysroot.display(), e);\n-        early_error(ErrorOutputType::default(), &err);\n-    });\n-\n-    let mut file: Option<PathBuf> = None;\n-\n-    let expected_name = format!(\"rustc_codegen_llvm-{}\", backend_name);\n-    for entry in d.filter_map(|e| e.ok()) {\n-        let path = entry.path();\n-        let filename = match path.file_name().and_then(|s| s.to_str()) {\n-            Some(s) => s,\n-            None => continue,\n-        };\n-        if !(filename.starts_with(DLL_PREFIX) && filename.ends_with(DLL_SUFFIX)) {\n-            continue\n-        }\n-        let name = &filename[DLL_PREFIX.len() .. filename.len() - DLL_SUFFIX.len()];\n-        if name != expected_name {\n-            continue\n-        }\n-        if let Some(ref prev) = file {\n-            let err = format!(\"duplicate codegen backends found\\n\\\n-                               first:  {}\\n\\\n-                               second: {}\\n\\\n-            \", prev.display(), path.display());\n-            early_error(ErrorOutputType::default(), &err);\n-        }\n-        file = Some(path.clone());\n-    }\n-\n-    match file {\n-        Some(ref s) => return load_backend_from_dylib(s),\n-        None => {\n-            let err = format!(\"failed to load default codegen backend for `{}`, \\\n-                               no appropriate codegen dylib found in `{}`\",\n-                              backend_name, sysroot.display());\n-            early_error(ErrorOutputType::default(), &err);\n+pub fn get_builtin_codegen_backend(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n+    #[cfg(feature = \"llvm\")]\n+    {\n+        if backend_name == \"llvm\" {\n+            return rustc_codegen_llvm::LlvmCodegenBackend::new;\n         }\n     }\n \n+    let err = format!(\"unsupported builtin codegen backend `{}`\", backend_name);\n+    early_error(ErrorOutputType::default(), &err);\n }\n \n pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {"}, {"sha": "4fc02e348f64637a61aeff09833cd5a561fa9fef", "filename": "src/librustc_llvm/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2FCargo.toml?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -13,6 +13,9 @@ path = \"lib.rs\"\n static-libstdcpp = []\n emscripten = []\n \n+[dependencies]\n+libc = \"0.2\"\n+\n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n cc = \"1.0.1\""}, {"sha": "9c8943a9559a32724ed5ec1fa78566a455f1ae47", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -5,6 +5,26 @@\n \n // NOTE: This crate only exists to allow linking on mingw targets.\n \n+use std::cell::RefCell;\n+use std::slice;\n+use libc::{c_char, size_t};\n+\n+\n+#[repr(C)]\n+pub struct RustString {\n+    pub bytes: RefCell<Vec<u8>>,\n+}\n+\n+/// Appending to a Rust string -- used by RawRustStringOstream.\n+#[no_mangle]\n+pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(sr: &RustString,\n+                                                 ptr: *const c_char,\n+                                                 size: size_t) {\n+    let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n+\n+    sr.bytes.borrow_mut().extend_from_slice(slice);\n+}\n+\n /// Initialize targets enabled by the build script via `cfg(llvm_component = \"...\")`.\n /// N.B., this function can't be moved to `rustc_codegen_llvm` because of the `cfg`s.\n pub fn initialize_available_targets() {"}, {"sha": "86a93d7d0cbfec9d3be91a46cbb52bb2f40f55c7", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -23,3 +23,4 @@ features = ['unprefixed_malloc_on_supported_platforms']\n \n [features]\n jemalloc = ['jemalloc-sys']\n+llvm = ['rustc_driver/llvm']"}, {"sha": "36e412975b931f885a0413694575aee5e55927b8", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3964a55ba59bb6c3d4badcbddc49f6929ef76862/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=3964a55ba59bb6c3d4badcbddc49f6929ef76862", "patch": "@@ -135,6 +135,7 @@ const WHITELIST: &[Crate<'_>] = &[\n     Crate(\"polonius-engine\"),\n     Crate(\"ppv-lite86\"),\n     Crate(\"proc-macro2\"),\n+    Crate(\"punycode\"),\n     Crate(\"quick-error\"),\n     Crate(\"quote\"),\n     Crate(\"rand\"),"}]}