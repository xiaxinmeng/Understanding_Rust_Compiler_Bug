{"sha": "c06876c90437c7eecd1dc246d3515d6211397f16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjg3NmM5MDQzN2M3ZWVjZDFkYzI0NmQzNTE1ZDYyMTEzOTdmMTY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-23T01:31:51Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-06-16T01:09:47Z"}, "message": "[const-prop] Remove `ConstPropMode::NoPropagation`\n\nThis mode is unnecessary because it's always ok to evaluate the\nright-hand side of assignments even if the left-hand side should not\nhave reads propagated.", "tree": {"sha": "0bea9422b82b376a69df38c14edbd3c737a1a1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bea9422b82b376a69df38c14edbd3c737a1a1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06876c90437c7eecd1dc246d3515d6211397f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06876c90437c7eecd1dc246d3515d6211397f16", "html_url": "https://github.com/rust-lang/rust/commit/c06876c90437c7eecd1dc246d3515d6211397f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06876c90437c7eecd1dc246d3515d6211397f16/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f315c35a77e40bd11ce81fedc0556be0f410bbf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f315c35a77e40bd11ce81fedc0556be0f410bbf4", "html_url": "https://github.com/rust-lang/rust/commit/f315c35a77e40bd11ce81fedc0556be0f410bbf4"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "4dbe6642a30432ee6a525465843339bc9c97e972", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c06876c90437c7eecd1dc246d3515d6211397f16", "patch": "@@ -721,8 +721,6 @@ enum ConstPropMode {\n     OnlyInsideOwnBlock,\n     /// The `Local` can be propagated into but reads cannot be propagated.\n     OnlyPropagateInto,\n-    /// No propagation is allowed at all.\n-    NoPropagation,\n }\n \n struct CanConstProp {\n@@ -793,7 +791,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n                                 \"local {:?} can't be propagated because of multiple assignments\",\n                                 local,\n                             );\n-                            *other = ConstPropMode::NoPropagation;\n+                            *other = ConstPropMode::OnlyPropagateInto;\n                         }\n                     }\n                 }\n@@ -820,7 +818,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | MutatingUse(MutatingUseContext::Borrow)\n             | MutatingUse(MutatingUseContext::AddressOf) => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n-                self.can_const_prop[local] = ConstPropMode::NoPropagation;\n+                self.can_const_prop[local] = ConstPropMode::OnlyPropagateInto;\n             }\n         }\n     }\n@@ -852,31 +850,28 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n                 let can_const_prop = self.can_const_prop[place.local];\n                 if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                    if can_const_prop != ConstPropMode::NoPropagation {\n-                        // This will return None for variables that are from other blocks,\n-                        // so it should be okay to propagate from here on down.\n-                        if let Some(value) = self.get_const(place) {\n-                            if self.should_const_prop(value) {\n-                                trace!(\"replacing {:?} with {:?}\", rval, value);\n-                                self.replace_with_const(rval, value, source_info);\n-                                if can_const_prop == ConstPropMode::FullConstProp\n-                                    || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n-                                {\n-                                    trace!(\"propagated into {:?}\", place);\n-                                }\n-                            }\n-                            if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n-                                trace!(\n-                                    \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n-                                    place.local\n-                                );\n-                                self.locals_of_current_block.insert(place.local);\n+                    // This will return None for variables that are from other blocks,\n+                    // so it should be okay to propagate from here on down.\n+                    if let Some(value) = self.get_const(place) {\n+                        if self.should_const_prop(value) {\n+                            trace!(\"replacing {:?} with {:?}\", rval, value);\n+                            self.replace_with_const(rval, value, source_info);\n+                            if can_const_prop == ConstPropMode::FullConstProp\n+                                || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n+                            {\n+                                trace!(\"propagated into {:?}\", place);\n                             }\n                         }\n                     }\n-                    if can_const_prop == ConstPropMode::OnlyPropagateInto\n-                        || can_const_prop == ConstPropMode::NoPropagation\n-                    {\n+                    if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n+                        trace!(\n+                            \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n+                            place.local\n+                        );\n+                        self.locals_of_current_block.insert(place.local);\n+                    }\n+\n+                    if can_const_prop == ConstPropMode::OnlyPropagateInto {\n                         trace!(\"can't propagate into {:?}\", place);\n                         if place.local != RETURN_PLACE {\n                             Self::remove_const(&mut self.ecx, place.local);"}, {"sha": "0d703068d41f4069dc8e1dfdc1959b277a5b4882", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref/rustc.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff?ref=c06876c90437c7eecd1dc246d3515d6211397f16", "patch": "@@ -23,13 +23,15 @@\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n+-                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n++                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002b))\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n+-                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n++                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19"}, {"sha": "94759dca038b1cd2fb5ef9ab309449320daa0bd0", "filename": "src/test/mir-opt/simplify-arm-identity/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=c06876c90437c7eecd1dc246d3515d6211397f16", "patch": "@@ -39,14 +39,13 @@\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          _2 = const Dst::Foo(0u8);        // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n-                                           // + ty: u8\n+                                           // + ty: Dst\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }\n   "}, {"sha": "ba21f16b685d402450d04188bdf29b9b91099570", "filename": "src/test/mir-opt/simplify-arm-identity/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=c06876c90437c7eecd1dc246d3515d6211397f16", "patch": "@@ -39,14 +39,13 @@\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          _2 = const Dst::Foo(0u8);        // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n-                                           // + ty: u8\n+                                           // + ty: Dst\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }\n   "}, {"sha": "e7373391b79c77f4b8476baaaacd3f48f57b1286", "filename": "src/test/mir-opt/simplify-arm-identity/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff?ref=c06876c90437c7eecd1dc246d3515d6211397f16", "patch": "@@ -33,15 +33,14 @@\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n+          _2 = const Dst::Foo(0u8);        // bb1[0]: scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n                                            // ty::Const\n-                                           // + ty: u8\n+                                           // + ty: Dst\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:20:30: 20:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+                                           // + span: $DIR/simplify-arm-identity.rs:20:21: 20:32\n+                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n+          goto -> bb4;                     // bb1[1]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n       }\n   \n       bb2: {"}, {"sha": "a97fa98a7b09e466caaa10dda0646331fecea640", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c06876c90437c7eecd1dc246d3515d6211397f16/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2Frustc.map.SimplifyLocals.diff?ref=c06876c90437c7eecd1dc246d3515d6211397f16", "patch": "@@ -24,7 +24,13 @@\n       }\n   \n       bb2: {\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+          _0 = const std::option::Option::<std::boxed::Box<()>>::None; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+                                           // ty::Const\n+                                           // + ty: std::option::Option<std::boxed::Box<()>>\n+                                           // + val: Value(Scalar(0x0000000000000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+                                           // + literal: Const { ty: std::option::Option<std::boxed::Box<()>>, val: Value(Scalar(0x0000000000000000)) }\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}]}