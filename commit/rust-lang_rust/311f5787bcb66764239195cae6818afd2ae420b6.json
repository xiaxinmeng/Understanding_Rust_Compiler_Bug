{"sha": "311f5787bcb66764239195cae6818afd2ae420b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMWY1Nzg3YmNiNjY3NjQyMzkxOTVjYWU2ODE4YWZkMmFlNDIwYjY=", "commit": {"author": {"name": "Yerkebulan Tulibergenov", "email": "yerkebulan@gmail.com", "date": "2021-06-22T09:03:52Z"}, "committer": {"name": "Yerkebulan Tulibergenov", "email": "yerkebulan@gmail.com", "date": "2021-06-22T09:03:52Z"}, "message": "add regression test for issue #52025", "tree": {"sha": "854632bd695a32a35144a3632ffbbd46db60595d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/854632bd695a32a35144a3632ffbbd46db60595d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/311f5787bcb66764239195cae6818afd2ae420b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/311f5787bcb66764239195cae6818afd2ae420b6", "html_url": "https://github.com/rust-lang/rust/commit/311f5787bcb66764239195cae6818afd2ae420b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/311f5787bcb66764239195cae6818afd2ae420b6/comments", "author": {"login": "yerke", "id": 5137691, "node_id": "MDQ6VXNlcjUxMzc2OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5137691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yerke", "html_url": "https://github.com/yerke", "followers_url": "https://api.github.com/users/yerke/followers", "following_url": "https://api.github.com/users/yerke/following{/other_user}", "gists_url": "https://api.github.com/users/yerke/gists{/gist_id}", "starred_url": "https://api.github.com/users/yerke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yerke/subscriptions", "organizations_url": "https://api.github.com/users/yerke/orgs", "repos_url": "https://api.github.com/users/yerke/repos", "events_url": "https://api.github.com/users/yerke/events{/privacy}", "received_events_url": "https://api.github.com/users/yerke/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yerke", "id": 5137691, "node_id": "MDQ6VXNlcjUxMzc2OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5137691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yerke", "html_url": "https://github.com/yerke", "followers_url": "https://api.github.com/users/yerke/followers", "following_url": "https://api.github.com/users/yerke/following{/other_user}", "gists_url": "https://api.github.com/users/yerke/gists{/gist_id}", "starred_url": "https://api.github.com/users/yerke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yerke/subscriptions", "organizations_url": "https://api.github.com/users/yerke/orgs", "repos_url": "https://api.github.com/users/yerke/repos", "events_url": "https://api.github.com/users/yerke/events{/privacy}", "received_events_url": "https://api.github.com/users/yerke/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8629bff642c3c3b84bb644c0099194f063b627", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8629bff642c3c3b84bb644c0099194f063b627", "html_url": "https://github.com/rust-lang/rust/commit/0a8629bff642c3c3b84bb644c0099194f063b627"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "7ce638832b06b4f10a97dcb327a783091a5acd1f", "filename": "src/test/ui/traits/operator-overloading-issue-52025.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/311f5787bcb66764239195cae6818afd2ae420b6/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311f5787bcb66764239195cae6818afd2ae420b6/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foperator-overloading-issue-52025.rs?ref=311f5787bcb66764239195cae6818afd2ae420b6", "patch": "@@ -0,0 +1,57 @@\n+// only-x86_64\n+// build-pass\n+\n+use std::arch::x86_64::*;\n+use std::fmt::Debug;\n+use std::ops::*;\n+\n+pub trait Simd {\n+    type Vf32: Copy + Debug + Add<Self::Vf32, Output = Self::Vf32> + Add<f32, Output = Self::Vf32>;\n+\n+    unsafe fn set1_ps(a: f32) -> Self::Vf32;\n+    unsafe fn add_ps(a: Self::Vf32, b: Self::Vf32) -> Self::Vf32;\n+}\n+\n+#[derive(Copy, Debug, Clone)]\n+pub struct F32x4(pub __m128);\n+\n+impl Add<F32x4> for F32x4 {\n+    type Output = F32x4;\n+\n+    fn add(self, rhs: F32x4) -> F32x4 {\n+        F32x4(unsafe { _mm_add_ps(self.0, rhs.0) })\n+    }\n+}\n+\n+impl Add<f32> for F32x4 {\n+    type Output = F32x4;\n+    fn add(self, rhs: f32) -> F32x4 {\n+        F32x4(unsafe { _mm_add_ps(self.0, _mm_set1_ps(rhs)) })\n+    }\n+}\n+\n+pub struct Sse2;\n+impl Simd for Sse2 {\n+    type Vf32 = F32x4;\n+\n+    #[inline(always)]\n+    unsafe fn set1_ps(a: f32) -> Self::Vf32 {\n+        F32x4(_mm_set1_ps(a))\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn add_ps(a: Self::Vf32, b: Self::Vf32) -> Self::Vf32 {\n+        F32x4(_mm_add_ps(a.0, b.0))\n+    }\n+}\n+\n+unsafe fn test<S: Simd>() -> S::Vf32 {\n+    let a = S::set1_ps(3.0);\n+    let b = S::set1_ps(2.0);\n+    let result = a + b;\n+    result\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", unsafe { test::<Sse2>() });\n+}"}]}