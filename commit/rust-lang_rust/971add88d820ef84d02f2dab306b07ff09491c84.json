{"sha": "971add88d820ef84d02f2dab306b07ff09491c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MWFkZDg4ZDgyMGVmODRkMDJmMmRhYjMwNmIwN2ZmMDk0OTFjODQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T22:33:22Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:39Z"}, "message": "Fix run-pass tests", "tree": {"sha": "2adcc482b50dbecf906435b3b4d73a415a78fcd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2adcc482b50dbecf906435b3b4d73a415a78fcd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971add88d820ef84d02f2dab306b07ff09491c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971add88d820ef84d02f2dab306b07ff09491c84", "html_url": "https://github.com/rust-lang/rust/commit/971add88d820ef84d02f2dab306b07ff09491c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971add88d820ef84d02f2dab306b07ff09491c84/comments", "author": null, "committer": null, "parents": [{"sha": "2b170839880e82a72d463b00759c409cb61d41b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b170839880e82a72d463b00759c409cb61d41b0", "html_url": "https://github.com/rust-lang/rust/commit/2b170839880e82a72d463b00759c409cb61d41b0"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "61854aba2790de84b2fddf282aafc89bf35c84ab", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -10,24 +10,24 @@\n \n use std::cmp::PartialEq;\n \n-pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq {\n+pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone {\n }\n \n-#[deriving(Show)]\n+#[deriving(Clone, Show)]\n pub struct MyInt {\n     pub val: int\n }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    fn add(self, other: MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl Sub<MyInt, MyInt> for MyInt {\n-    fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n+    fn sub(self, other: MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n impl Mul<MyInt, MyInt> for MyInt {\n-    fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n+    fn mul(self, other: MyInt) -> MyInt { mi(self.val * other.val) }\n }\n \n impl PartialEq for MyInt {"}, {"sha": "238d0ecdca7f8cc6b01b6081f45297df9b0071c4", "filename": "src/test/run-pass/bool.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -16,30 +16,30 @@ fn main() {\n     assert_eq!(false != true, true);\n     assert_eq!(false.ne(&false), false);\n \n-    assert_eq!(false.bitand(&false), false);\n-    assert_eq!(true.bitand(&false), false);\n-    assert_eq!(false.bitand(&true), false);\n-    assert_eq!(true.bitand(&true), true);\n+    assert_eq!(false.bitand(false), false);\n+    assert_eq!(true.bitand(false), false);\n+    assert_eq!(false.bitand(true), false);\n+    assert_eq!(true.bitand(true), true);\n \n     assert_eq!(false & false, false);\n     assert_eq!(true & false, false);\n     assert_eq!(false & true, false);\n     assert_eq!(true & true, true);\n \n-    assert_eq!(false.bitor(&false), false);\n-    assert_eq!(true.bitor(&false), true);\n-    assert_eq!(false.bitor(&true), true);\n-    assert_eq!(true.bitor(&true), true);\n+    assert_eq!(false.bitor(false), false);\n+    assert_eq!(true.bitor(false), true);\n+    assert_eq!(false.bitor(true), true);\n+    assert_eq!(true.bitor(true), true);\n \n     assert_eq!(false | false, false);\n     assert_eq!(true | false, true);\n     assert_eq!(false | true, true);\n     assert_eq!(true | true, true);\n \n-    assert_eq!(false.bitxor(&false), false);\n-    assert_eq!(true.bitxor(&false), true);\n-    assert_eq!(false.bitxor(&true), true);\n-    assert_eq!(true.bitxor(&true), false);\n+    assert_eq!(false.bitxor(false), false);\n+    assert_eq!(true.bitxor(false), true);\n+    assert_eq!(false.bitxor(true), true);\n+    assert_eq!(true.bitxor(true), false);\n \n     assert_eq!(false ^ false, false);\n     assert_eq!(true ^ false, true);"}, {"sha": "88f3e5775b78b8f09b10ac4786c7442f50566827", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -15,10 +15,10 @@ use std::num::Zero;\n struct Vector2<T>(T, T);\n \n impl<T: Add<T, T>> Add<Vector2<T>, Vector2<T>> for Vector2<T> {\n-    fn add(&self, other: &Vector2<T>) -> Vector2<T> {\n+    fn add(self, other: Vector2<T>) -> Vector2<T> {\n         match (self, other) {\n-            (&Vector2(ref x0, ref y0), &Vector2(ref x1, ref y1)) => {\n-                Vector2(*x0 + *x1, *y0 + *y1)\n+            (Vector2(x0, y0), Vector2(x1, y1)) => {\n+                Vector2(x0 + x1, y0 + y1)\n             }\n         }\n     }\n@@ -30,7 +30,7 @@ struct Vector3<T> {\n }\n \n impl<T: Add<T, T>> Add<Vector3<T>, Vector3<T>> for Vector3<T> {\n-    fn add(&self, other: &Vector3<T>) -> Vector3<T> {\n+    fn add(self, other: Vector3<T>) -> Vector3<T> {\n         Vector3 {\n             x: self.x + other.x,\n             y: self.y + other.y,\n@@ -47,7 +47,7 @@ struct Matrix3x2<T> {\n }\n \n impl<T: Add<T, T>> Add<Matrix3x2<T>, Matrix3x2<T>> for Matrix3x2<T> {\n-    fn add(&self, other: &Matrix3x2<T>) -> Matrix3x2<T> {\n+    fn add(self, other: Matrix3x2<T>) -> Matrix3x2<T> {\n         Matrix3x2 {\n             x: self.x + other.x,\n             y: self.y + other.y,"}, {"sha": "80d3d29bc004d1b6d7a824a42efd7975f7c2139e", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -28,7 +28,7 @@ trait RhsOfVec2Mul<Result> { fn mul_vec2_by(&self, lhs: &Vec2) -> Result; }\n \n // Vec2's implementation of Mul \"from the other side\" using the above trait\n impl<Res, Rhs: RhsOfVec2Mul<Res>> Mul<Rhs,Res> for Vec2 {\n-    fn mul(&self, rhs: &Rhs) -> Res { rhs.mul_vec2_by(self) }\n+    fn mul(self, rhs: Rhs) -> Res { rhs.mul_vec2_by(&self) }\n }\n \n // Implementation of 'f64 as right-hand-side of Vec2::Mul'"}, {"sha": "f8184d248ff0166bcd38f56180097ae7fff15e23", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -18,19 +18,19 @@\n pub fn main() {\n // ints\n     // num\n-    assert_eq!(15i.add(&6), 21);\n-    assert_eq!(15i8.add(&6i8), 21i8);\n-    assert_eq!(15i16.add(&6i16), 21i16);\n-    assert_eq!(15i32.add(&6i32), 21i32);\n-    assert_eq!(15i64.add(&6i64), 21i64);\n+    assert_eq!(15i.add(6), 21);\n+    assert_eq!(15i8.add(6i8), 21i8);\n+    assert_eq!(15i16.add(6i16), 21i16);\n+    assert_eq!(15i32.add(6i32), 21i32);\n+    assert_eq!(15i64.add(6i64), 21i64);\n \n // uints\n     // num\n-    assert_eq!(15u.add(&6u), 21u);\n-    assert_eq!(15u8.add(&6u8), 21u8);\n-    assert_eq!(15u16.add(&6u16), 21u16);\n-    assert_eq!(15u32.add(&6u32), 21u32);\n-    assert_eq!(15u64.add(&6u64), 21u64);\n+    assert_eq!(15u.add(6u), 21u);\n+    assert_eq!(15u8.add(6u8), 21u8);\n+    assert_eq!(15u16.add(6u16), 21u16);\n+    assert_eq!(15u32.add(6u32), 21u32);\n+    assert_eq!(15u64.add(6u64), 21u64);\n \n // floats\n     // num"}, {"sha": "cb3397c00bc57a1196d3859e4065ce9666218dd6", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -20,13 +20,13 @@ struct Point {\n }\n \n impl ops::Add<Point,Point> for Point {\n-    fn add(&self, other: &Point) -> Point {\n-        Point {x: self.x + (*other).x, y: self.y + (*other).y}\n+    fn add(self, other: Point) -> Point {\n+        Point {x: self.x + other.x, y: self.y + other.y}\n     }\n }\n \n impl ops::Add<int,Point> for Point {\n-    fn add(&self, &other: &int) -> Point {\n+    fn add(self, other: int) -> Point {\n         Point {x: self.x + other,\n                y: self.y + other}\n     }"}, {"sha": "0f3da6836cb34e9f5a3d2f5b15ed5a40e27f4a58", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -12,21 +12,21 @@\n use std::cmp;\n use std::ops;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n struct Point {\n     x: int,\n     y: int\n }\n \n impl ops::Add<Point,Point> for Point {\n-    fn add(&self, other: &Point) -> Point {\n-        Point {x: self.x + (*other).x, y: self.y + (*other).y}\n+    fn add(self, other: Point) -> Point {\n+        Point {x: self.x + other.x, y: self.y + other.y}\n     }\n }\n \n impl ops::Sub<Point,Point> for Point {\n-    fn sub(&self, other: &Point) -> Point {\n-        Point {x: self.x - (*other).x, y: self.y - (*other).y}\n+    fn sub(self, other: Point) -> Point {\n+        Point {x: self.x - other.x, y: self.y - other.y}\n     }\n }\n "}, {"sha": "2e8ec3916bd89f5c5ace9e8513c9d9bf6e007e99", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -18,7 +18,7 @@ struct G;\n \n impl<'a, A: Add<int, int>> Fn<(A,), int> for G {\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> int {\n-        arg.add(&1)\n+        arg.add(1)\n     }\n }\n "}, {"sha": "42f93a97142d239138dcec06978bec3884a6ffe9", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -22,8 +22,8 @@ fn add<T: ops::Add<T, T>>(lhs: T, rhs: T) -> T {\n }\n \n impl ops::Add<f32x4, f32x4> for f32x4 {\n-    fn add(&self, rhs: &f32x4) -> f32x4 {\n-        *self + *rhs\n+    fn add(self, rhs: f32x4) -> f32x4 {\n+        self + rhs\n     }\n }\n "}, {"sha": "2a087e5e425ad23d976baf8a98ab48f131ddde20", "filename": "src/test/run-pass/trait-inheritance-overloading-xc-exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-xc-exe.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -14,7 +14,7 @@ extern crate trait_inheritance_overloading_xc;\n use trait_inheritance_overloading_xc::{MyNum, MyInt};\n \n fn f<T:MyNum>(x: T, y: T) -> (T, T, T) {\n-    return (x + y, x - y, x * y);\n+    return (x.clone() + y.clone(), x.clone() - y.clone(), x * y);\n }\n \n fn mi(v: int) -> MyInt { MyInt { val: v } }"}, {"sha": "5f8e945cce8604d696c86ca9f2d37aecb1290e9d", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971add88d820ef84d02f2dab306b07ff09491c84/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=971add88d820ef84d02f2dab306b07ff09491c84", "patch": "@@ -10,21 +10,21 @@\n \n use std::cmp::PartialEq;\n \n-trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq { }\n+trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone { }\n \n-#[deriving(Show)]\n+#[deriving(Clone, Show)]\n struct MyInt { val: int }\n \n impl Add<MyInt, MyInt> for MyInt {\n-    fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n+    fn add(self, other: MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n impl Sub<MyInt, MyInt> for MyInt {\n-    fn sub(&self, other: &MyInt) -> MyInt { mi(self.val - other.val) }\n+    fn sub(self, other: MyInt) -> MyInt { mi(self.val - other.val) }\n }\n \n impl Mul<MyInt, MyInt> for MyInt {\n-    fn mul(&self, other: &MyInt) -> MyInt { mi(self.val * other.val) }\n+    fn mul(self, other: MyInt) -> MyInt { mi(self.val * other.val) }\n }\n \n impl PartialEq for MyInt {\n@@ -35,7 +35,7 @@ impl PartialEq for MyInt {\n impl MyNum for MyInt {}\n \n fn f<T:MyNum>(x: T, y: T) -> (T, T, T) {\n-    return (x + y, x - y, x * y);\n+    return (x.clone() + y.clone(), x.clone() - y.clone(), x * y);\n }\n \n fn mi(v: int) -> MyInt { MyInt { val: v } }"}]}