{"sha": "85ff90c86c98b9fad41f792a8fabb145db320a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmY5MGM4NmM5OGI5ZmFkNDFmNzkyYThmYWJiMTQ1ZGIzMjBhNTA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-26T13:40:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-26T14:19:07Z"}, "message": "syntax: add a some docs/clarification to the fields of ExpnInfo.", "tree": {"sha": "0895f7034e2dc06f8745ffbc587e1f11c61e00ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0895f7034e2dc06f8745ffbc587e1f11c61e00ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ff90c86c98b9fad41f792a8fabb145db320a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ff90c86c98b9fad41f792a8fabb145db320a50", "html_url": "https://github.com/rust-lang/rust/commit/85ff90c86c98b9fad41f792a8fabb145db320a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ff90c86c98b9fad41f792a8fabb145db320a50/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c7f3b850ce11c70d5bef2b2d5155a1f0fdaa421", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7f3b850ce11c70d5bef2b2d5155a1f0fdaa421", "html_url": "https://github.com/rust-lang/rust/commit/2c7f3b850ce11c70d5bef2b2d5155a1f0fdaa421"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "4a9e53c63e7bf6ed7404e13269320deb371e37d9", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/85ff90c86c98b9fad41f792a8fabb145db320a50/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ff90c86c98b9fad41f792a8fabb145db320a50/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=85ff90c86c98b9fad41f792a8fabb145db320a50", "patch": "@@ -88,6 +88,8 @@ to the original source.\n pub struct Span {\n     lo: BytePos,\n     hi: BytePos,\n+    /// Information about where the macro came from, if this piece of\n+    /// code was created by a macro expansion.\n     expn_info: Option<@ExpnInfo>\n }\n \n@@ -162,26 +164,47 @@ pub struct LocWithOpt {\n pub struct FileMapAndLine {fm: Rc<FileMap>, line: uint}\n pub struct FileMapAndBytePos {fm: Rc<FileMap>, pos: BytePos}\n \n+/// The syntax with which a macro was invoked.\n #[deriving(Clone, Hash, Show)]\n pub enum MacroFormat {\n-    // e.g. #[deriving(...)] <item>\n+    /// e.g. #[deriving(...)] <item>\n     MacroAttribute,\n-    // e.g. `format!()`\n+    /// e.g. `format!()`\n     MacroBang\n }\n \n #[deriving(Clone, Hash, Show)]\n pub struct NameAndSpan {\n+    /// The name of the macro that was invoked to create the thing\n+    /// with this Span.\n     name: ~str,\n-    // the format with which the macro was invoked.\n+    /// The format with which the macro was invoked.\n     format: MacroFormat,\n+    /// The span of the macro definition itself. The macro may not\n+    /// have a sensible definition span (e.g. something defined\n+    /// completely inside libsyntax) in which case this is None.\n     span: Option<Span>\n }\n \n /// Extra information for tracking macro expansion of spans\n #[deriving(Hash, Show)]\n pub struct ExpnInfo {\n+    /// The location of the actual macro invocation, e.g. `let x =\n+    /// foo!();`\n+    ///\n+    /// This may recursively refer to other macro invocations, e.g. if\n+    /// `foo!()` invoked `bar!()` internally, and there was an\n+    /// expression inside `bar!`; the call_site of the expression in\n+    /// the expansion would point to the `bar!` invocation; that\n+    /// call_site span would have its own ExpnInfo, with the call_site\n+    /// pointing to the `foo!` invocation.\n     call_site: Span,\n+    /// Information about the macro and its definition.\n+    ///\n+    /// The `callee` of the inner expression in the `call_site`\n+    /// example would point to the `macro_rules! bar { ... }` and that\n+    /// of the `bar!()` invocation would point to the `macro_rules!\n+    /// foo { ... }`.\n     callee: NameAndSpan\n }\n "}]}