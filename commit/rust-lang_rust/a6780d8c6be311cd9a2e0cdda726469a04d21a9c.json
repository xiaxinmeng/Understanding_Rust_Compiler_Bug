{"sha": "a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzgwZDhjNmJlMzExY2Q5YTJlMGNkZGE3MjY0NjlhMDRkMjFhOWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:15:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:15:59Z"}, "message": "rollup merge of #21414: ejjeong/aarch64-linux-android\n\nInitial support for aarch64-linux-android (#18920)\n- Add new configuration files\n- Modify some options to compile & link succesfully.\n  (PIE, disable tls on jemalloc, modify some external function linkage, ..)\n- To build, refer to https://github.com/rust-lang/rust/wiki/Doc-building-for-android.\n   (tested with platform=21 and toolchain=aarch64-linux-android-4.9)", "tree": {"sha": "e119d0b5d837b05450e4766394949fc2c60ec539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e119d0b5d837b05450e4766394949fc2c60ec539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "html_url": "https://github.com/rust-lang/rust/commit/a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81504f211c36afb69fa2a13d475c45e65d7b2a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/81504f211c36afb69fa2a13d475c45e65d7b2a31", "html_url": "https://github.com/rust-lang/rust/commit/81504f211c36afb69fa2a13d475c45e65d7b2a31"}, {"sha": "940080501b76e559e3a2c0de1b15dc7b2353fd85", "url": "https://api.github.com/repos/rust-lang/rust/commits/940080501b76e559e3a2c0de1b15dc7b2353fd85", "html_url": "https://github.com/rust-lang/rust/commit/940080501b76e559e3a2c0de1b15dc7b2353fd85"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "a6f7f2ba1d66eb592e98cf844ce1c6a856b9c390", "filename": "mk/cfg/aarch64-linux-android.mk", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/mk%2Fcfg%2Faarch64-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/mk%2Fcfg%2Faarch64-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-linux-android.mk?ref=a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "patch": "@@ -0,0 +1,30 @@\n+# aarch64-linux-android configuration\n+# CROSS_PREFIX_aarch64-linux-android-\n+CC_aarch64-linux-android=$(CFG_ANDROID_CROSS_PATH)/bin/aarch64-linux-android-gcc\n+CXX_aarch64-linux-android=$(CFG_ANDROID_CROSS_PATH)/bin/aarch64-linux-android-g++\n+CPP_aarch64-linux-android=$(CFG_ANDROID_CROSS_PATH)/bin/aarch64-linux-android-gcc -E\n+AR_aarch64-linux-android=$(CFG_ANDROID_CROSS_PATH)/bin/aarch64-linux-android-ar\n+CFG_LIB_NAME_aarch64-linux-android=lib$(1).so\n+CFG_STATIC_LIB_NAME_aarch64-linux-android=lib$(1).a\n+CFG_LIB_GLOB_aarch64-linux-android=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_aarch64-linux-android=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_aarch64-linux-android := -D__aarch64__ -DANDROID -D__ANDROID__ $(CFLAGS)\n+CFG_GCCISH_CFLAGS_aarch64-linux-android := -Wall -g -fPIC -D__aarch64__ -DANDROID -D__ANDROID__ $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_aarch64-linux-android := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_aarch64-linux-android := -shared -fPIC -ldl -g -lm -lsupc++\n+CFG_GCCISH_DEF_FLAG_aarch64-linux-android := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_aarch64-linux-android := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_aarch64-linux-android := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_aarch64-linux-android := .android.def\n+CFG_LLC_FLAGS_aarch64-linux-android :=\n+CFG_INSTALL_NAME_aarch64-linux-android =\n+CFG_EXE_SUFFIX_aarch64-linux-android :=\n+CFG_WINDOWSY_aarch64-linux-android :=\n+CFG_UNIXY_aarch64-linux-android := 1\n+CFG_PATH_MUNGE_aarch64-linux-android := true\n+CFG_LDPATH_aarch64-linux-android :=\n+CFG_RUN_aarch64-linux-android=\n+CFG_RUN_TARG_aarch64-linux-android=\n+RUSTC_FLAGS_aarch64-linux-android :=\n+RUSTC_CROSS_FLAGS_aarch64-linux-android :=\n+CFG_GNU_TRIPLE_aarch64-linux-android := aarch64-linux-android"}, {"sha": "a8bbeb4151701055a1c961973565b3dbd24097a5", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "patch": "@@ -141,6 +141,8 @@ else ifeq ($(OSTYPE_$(1)), apple-ios)\n   JEMALLOC_ARGS_$(1) := --disable-tls\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n   JEMALLOC_ARGS_$(1) := --disable-tls\n+else ifeq ($(OSTYPE_$(1)), linux-android)\n+  JEMALLOC_ARGS_$(1) := --disable-tls\n endif\n \n ################################################################################"}, {"sha": "677a5f37a1be70b184f3cd3fa84cd3e8ae8ec14a", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "patch": "@@ -4648,13 +4648,13 @@ pub mod funcs {\n             use types::os::arch::c95::c_int;\n             use types::os::common::posix01::sighandler_t;\n \n-            #[cfg(not(target_os = \"android\"))]\n+            #[cfg(not(all(target_os = \"android\", target_arch = \"arm\")))]\n             extern {\n                 pub fn signal(signum: c_int,\n                               handler: sighandler_t) -> sighandler_t;\n             }\n \n-            #[cfg(target_os = \"android\")]\n+            #[cfg(all(target_os = \"android\", target_arch = \"arm\"))]\n             extern {\n                 #[link_name = \"bsd_signal\"]\n                 pub fn signal(signum: c_int,"}, {"sha": "313c0dc2a6ea74c1ee10d8ce3109379165a90ecd", "filename": "src/librustc_back/target/aarch64_linux_android.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_linux_android.rs?ref=a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_base::opts();\n+    base.pre_link_args.push(\"-Wl,--allow-multiple-definition\".to_string());\n+    base.position_independent_executables = true;\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n+                      n32:64-S128\".to_string(),\n+        llvm_target: \"aarch64-linux-android\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"android\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "4626f2dc483394863517558e38ef23a7988aca87", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "patch": "@@ -65,6 +65,7 @@ mod arm_linux_androideabi;\n mod arm_unknown_linux_gnueabi;\n mod arm_unknown_linux_gnueabihf;\n mod aarch64_apple_ios;\n+mod aarch64_linux_android;\n mod aarch64_unknown_linux_gnu;\n mod i686_apple_darwin;\n mod i686_pc_windows_gnu;\n@@ -357,6 +358,7 @@ impl Target {\n             i386_apple_ios,\n             x86_64_apple_ios,\n             aarch64_apple_ios,\n+            aarch64_linux_android,\n             armv7_apple_ios,\n             armv7s_apple_ios,\n "}, {"sha": "e6007a4d43cf4a696d8fa4f66092e68307bc2709", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6780d8c6be311cd9a2e0cdda726469a04d21a9c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=a6780d8c6be311cd9a2e0cdda726469a04d21a9c", "patch": "@@ -418,7 +418,7 @@ mod uw {\n                                  trace_argument: *mut libc::c_void)\n                     -> _Unwind_Reason_Code;\n \n-        #[cfg(all(not(target_os = \"android\"),\n+        #[cfg(all(not(all(target_os = \"android\", target_arch = \"arm\")),\n                   not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n         pub fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t;\n \n@@ -431,7 +431,7 @@ mod uw {\n     // On android, the function _Unwind_GetIP is a macro, and this is the\n     // expansion of the macro. This is all copy/pasted directly from the\n     // header file with the definition of _Unwind_GetIP.\n-    #[cfg(any(target_os = \"android\",\n+    #[cfg(any(all(target_os = \"android\", target_arch = \"arm\"),\n               all(target_os = \"linux\", target_arch = \"arm\")))]\n     pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n         #[repr(C)]"}]}