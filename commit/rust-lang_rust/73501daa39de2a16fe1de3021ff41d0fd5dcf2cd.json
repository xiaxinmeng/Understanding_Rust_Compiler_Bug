{"sha": "73501daa39de2a16fe1de3021ff41d0fd5dcf2cd", "node_id": "C_kwDOAAsO6NoAKDczNTAxZGFhMzlkZTJhMTZmZTFkZTMwMjFmZjQxZDBmZDVkY2YyY2Q", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-20T18:16:50Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-05T19:16:56Z"}, "message": "Add expr_visitor util", "tree": {"sha": "26a87680f58aef8c8820a7137028197279d58da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26a87680f58aef8c8820a7137028197279d58da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73501daa39de2a16fe1de3021ff41d0fd5dcf2cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73501daa39de2a16fe1de3021ff41d0fd5dcf2cd", "html_url": "https://github.com/rust-lang/rust/commit/73501daa39de2a16fe1de3021ff41d0fd5dcf2cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73501daa39de2a16fe1de3021ff41d0fd5dcf2cd/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c4dd8d3eb2204510599e090e3bef65f553d066f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4dd8d3eb2204510599e090e3bef65f553d066f", "html_url": "https://github.com/rust-lang/rust/commit/1c4dd8d3eb2204510599e090e3bef65f553d066f"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "4a3181dd0276aece1e2408ff334c347f31a5eff0", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/73501daa39de2a16fe1de3021ff41d0fd5dcf2cd/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73501daa39de2a16fe1de3021ff41d0fd5dcf2cd/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=73501daa39de2a16fe1de3021ff41d0fd5dcf2cd", "patch": "@@ -6,6 +6,51 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use std::ops::ControlFlow;\n \n+/// Convenience method for creating a `Visitor` with just `visit_expr` overridden and nested\n+/// bodies (i.e. closures) are visited.\n+/// If the callback returns `true`, the expr just provided to the callback is walked.\n+#[must_use]\n+pub fn expr_visitor<'tcx>(cx: &LateContext<'tcx>, f: impl FnMut(&'tcx Expr<'tcx>) -> bool) -> impl Visitor<'tcx> {\n+    struct V<'tcx, F> {\n+        hir: Map<'tcx>,\n+        f: F,\n+    }\n+    impl<'tcx, F: FnMut(&'tcx Expr<'tcx>) -> bool> Visitor<'tcx> for V<'tcx, F> {\n+        type Map = Map<'tcx>;\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+            NestedVisitorMap::OnlyBodies(self.hir)\n+        }\n+\n+        fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+            if (self.f)(expr) {\n+                walk_expr(self, expr);\n+            }\n+        }\n+    }\n+    V { hir: cx.tcx.hir(), f }\n+}\n+\n+/// Convenience method for creating a `Visitor` with just `visit_expr` overridden and nested\n+/// bodies (i.e. closures) are not visited.\n+/// If the callback returns `true`, the expr just provided to the callback is walked.\n+#[must_use]\n+pub fn expr_visitor_no_bodies<'tcx>(f: impl FnMut(&'tcx Expr<'tcx>) -> bool) -> impl Visitor<'tcx> {\n+    struct V<F>(F);\n+    impl<'tcx, F: FnMut(&'tcx Expr<'tcx>) -> bool> Visitor<'tcx> for V<F> {\n+        type Map = intravisit::ErasedMap<'tcx>;\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+            NestedVisitorMap::None\n+        }\n+\n+        fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n+            if (self.0)(e) {\n+                walk_expr(self, e);\n+            }\n+        }\n+    }\n+    V(f)\n+}\n+\n /// returns `true` if expr contains match expr desugared from try\n fn contains_try(expr: &hir::Expr<'_>) -> bool {\n     struct TryFinder {"}]}