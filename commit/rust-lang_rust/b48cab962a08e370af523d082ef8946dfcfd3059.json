{"sha": "b48cab962a08e370af523d082ef8946dfcfd3059", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGNhYjk2MmEwOGUzNzBhZjUyM2QwODJlZjg5NDZkZmNmZDMwNTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-30T22:56:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-31T18:00:47Z"}, "message": "Add span to field to catch per-field comments in rec exprs.", "tree": {"sha": "24e7ca85c92746e5d92f84cacb972c4b0d83ce27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e7ca85c92746e5d92f84cacb972c4b0d83ce27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48cab962a08e370af523d082ef8946dfcfd3059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48cab962a08e370af523d082ef8946dfcfd3059", "html_url": "https://github.com/rust-lang/rust/commit/b48cab962a08e370af523d082ef8946dfcfd3059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48cab962a08e370af523d082ef8946dfcfd3059/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12ea3989649616437a7c1434f5c5a6438235eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d12ea3989649616437a7c1434f5c5a6438235eb7", "html_url": "https://github.com/rust-lang/rust/commit/d12ea3989649616437a7c1434f5c5a6438235eb7"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "55ef2211774ef4890caa8d093dd4d59ccb0e6dda", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -229,7 +229,8 @@ tag decl_ {\n type arm = rec(@pat pat, block block);\n \n type elt = rec(mutability mut, @expr expr);\n-type field = rec(mutability mut, ident ident, @expr expr);\n+type field_ = rec(mutability mut, ident ident, @expr expr);\n+type field = spanned[field_];\n \n tag spawn_dom {\n     dom_implicit;"}, {"sha": "f6ad1d04a39de21113fa33361a2fab8a3cdab3c6", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -148,9 +148,9 @@ fn pieces_to_expr(parser p, vec[piece] pieces, vec[@ast::expr] args)\n         for (tup(ast::ident, @ast::expr) field in fields) {\n             auto ident = field._0;\n             auto val = field._1;\n-            auto astfield = rec(mut = ast::imm,\n-                                ident = ident,\n-                                expr = val);\n+            auto astfield = rec(node=rec(mut = ast::imm,\n+                                         ident = ident,\n+                                         expr = val), span=sp);\n             astfields += [astfield];\n         }\n "}, {"sha": "a6d8560ee6729ecc1d084b270c172605bb492dd8", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -737,11 +737,12 @@ fn parse_mutability(&parser p) -> ast::mutability {\n }\n \n fn parse_field(&parser p) -> ast::field {\n+    auto lo = p.get_lo_pos();\n     auto m = parse_mutability(p);\n     auto i = parse_ident(p);\n     expect(p, token::EQ);\n     auto e = parse_expr(p);\n-    ret rec(mut=m, ident=i, expr=e);\n+    ret spanned(lo, e.span.hi, rec(mut=m, ident=i, expr=e));\n }\n \n fn parse_bottom_expr(&parser p) -> @ast::expr {"}, {"sha": "625db8d4c717a053221d4d93fbcf4d19b4794225", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -5423,9 +5423,9 @@ fn trans_rec(&@block_ctxt cx, &vec[ast::field] fields,\n         auto src_res = res(bcx, C_nil());\n \n         for (ast::field f in fields) {\n-            if (str::eq(f.ident, tf.ident)) {\n+            if (str::eq(f.node.ident, tf.ident)) {\n                 expr_provided = true;\n-                src_res = trans_expr(bcx, f.expr);\n+                src_res = trans_expr(bcx, f.node.expr);\n             }\n         }\n         if (!expr_provided) {"}, {"sha": "1be5472257e8182b5da36beade53419108c4bd32", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -1248,11 +1248,11 @@ mod pushdown {\n                             case (none) {\n                                 auto i = 0u;\n                                 for (ast::field field_0 in fields_0) {\n-                                    assert (str::eq(field_0.ident,\n+                                    assert (str::eq(field_0.node.ident,\n                                                     field_mts.(i).ident));\n                                     pushdown_expr(scx,\n                                                   field_mts.(i).mt.ty,\n-                                                  field_0.expr);\n+                                                  field_0.node.expr);\n                                     i += 1u;\n                                 }\n                             }\n@@ -1263,10 +1263,10 @@ mod pushdown {\n                                 for (ast::field field_0 in fields_0) {\n \n                                     for (ty::field ft in field_mts) {\n-                                        if (str::eq(field_0.ident,\n+                                        if (str::eq(field_0.node.ident,\n                                                     ft.ident)) {\n                                             pushdown_expr(scx, ft.mt.ty,\n-                                                          field_0.expr);\n+                                                          field_0.node.expr);\n                                         }\n                                     }\n                                 }\n@@ -2461,11 +2461,12 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             let vec[field] fields_t = [];\n \n             for (ast::field f in fields) {\n-                check_expr(scx, f.expr);\n-                auto expr_t = expr_ty(scx.fcx.ccx.tcx, f.expr);\n+                check_expr(scx, f.node.expr);\n+                auto expr_t = expr_ty(scx.fcx.ccx.tcx, f.node.expr);\n \n-                auto expr_mt = rec(ty=expr_t, mut=f.mut);\n-                vec::push[field](fields_t, rec(ident=f.ident, mt=expr_mt));\n+                auto expr_mt = rec(ty=expr_t, mut=f.node.mut);\n+                vec::push[field](fields_t, rec(ident=f.node.ident,\n+                                               mt=expr_mt));\n             }\n \n             alt (base) {"}, {"sha": "b57f3217c3f93cfd16d6109996d170579ebd8e4f", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -323,7 +323,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n         }\n         case (ast::expr_rec(?flds, ?base, _)) {\n             for (ast::field f in flds) {\n-                walk_expr(v, f.expr);\n+                walk_expr(v, f.node.expr);\n             }\n             walk_expr_opt(v, base);\n         }"}, {"sha": "cd2d5f70a9ccda9722246912251aede22e348c9c", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -140,6 +140,7 @@ fn commasep_cmnt[IN](ps s, breaks b, vec[IN] elts, fn(ps, &IN) op,\n     auto len = vec::len[IN](elts);\n     auto i = 0u;\n     for (IN elt in elts) {\n+        maybe_print_comment(s, get_span(elt).hi);\n         op(s, elt);\n         i += 1u;\n         if (i < len) {\n@@ -485,14 +486,14 @@ fn print_expr(ps s, &@ast::expr expr) {\n         case (ast::expr_rec(?fields,?wth,_)) {\n             fn print_field(ps s, &ast::field field) {\n                 ibox(s.s, indent_unit);\n-                if (field.mut == ast::mut) {word_nbsp(s, \"mutable\");}\n-                word(s.s, field.ident);\n+                if (field.node.mut == ast::mut) {word_nbsp(s, \"mutable\");}\n+                word(s.s, field.node.ident);\n                 word(s.s, \"=\");\n-                print_expr(s, field.expr);\n+                print_expr(s, field.node.expr);\n                 end(s.s);\n             }\n             fn get_span(&ast::field field) -> common::span {\n-                ret field.expr.span;\n+                ret field.span;\n             }\n             word(s.s, \"rec\");\n             popen(s);\n@@ -1132,8 +1133,8 @@ fn print_comment(ps s, lexer::cmnt cmnt) {\n                 zerobreak(s.s);\n                 word_and_eol(s.s, line);\n             }\n-            zerobreak(s.s);\n             end(s.s);\n+            zerobreak(s.s);\n         }\n         case (lexer::trailing) {\n             cbox(s.s, 0u);\n@@ -1142,6 +1143,7 @@ fn print_comment(ps s, lexer::cmnt cmnt) {\n                 zerobreak(s.s);\n             }\n             end(s.s);\n+            zerobreak(s.s);\n         }\n         case (lexer::mixed) {\n             assert vec::len(cmnt.lines) == 1u;"}, {"sha": "e23e79f28bd483c27c21d2b8963d7c701f499b8d", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48cab962a08e370af523d082ef8946dfcfd3059/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=b48cab962a08e370af523d082ef8946dfcfd3059", "patch": "@@ -118,7 +118,7 @@ fn elt_exprs(&vec[ast::elt] elts) -> vec[@ast::expr] {\n     ret vec::map[ast::elt, @ast::expr](f, elts);\n }\n \n-fn field_expr(&ast::field f) -> @ast::expr { ret f.expr; }\n+fn field_expr(&ast::field f) -> @ast::expr { ret f.node.expr; }\n \n fn field_exprs(vec[ast::field] fields) -> vec [@ast::expr] {\n     auto f = field_expr;"}]}