{"sha": "a78ca9e955d66c7f676482e348c6ba4e89cfc24a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OGNhOWU5NTVkNjZjN2Y2NzY0ODJlMzQ4YzZiYTRlODljZmMyNGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-28T13:29:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-28T13:29:06Z"}, "message": "Run rustfmt", "tree": {"sha": "0b370f71b5875ad4e01ef7a120e03d7b8d11b063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b370f71b5875ad4e01ef7a120e03d7b8d11b063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78ca9e955d66c7f676482e348c6ba4e89cfc24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78ca9e955d66c7f676482e348c6ba4e89cfc24a", "html_url": "https://github.com/rust-lang/rust/commit/a78ca9e955d66c7f676482e348c6ba4e89cfc24a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78ca9e955d66c7f676482e348c6ba4e89cfc24a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53575b871a3798be6abc49c78d64f2d939768bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53575b871a3798be6abc49c78d64f2d939768bf", "html_url": "https://github.com/rust-lang/rust/commit/e53575b871a3798be6abc49c78d64f2d939768bf"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "12dd5d1f695b10e0c027e9f69593ff2154e7c670", "filename": "src/main.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a78ca9e955d66c7f676482e348c6ba4e89cfc24a/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78ca9e955d66c7f676482e348c6ba4e89cfc24a/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=a78ca9e955d66c7f676482e348c6ba4e89cfc24a", "patch": "@@ -245,30 +245,31 @@ pub fn main() {\n         };\n \n         rustc_driver::in_rustc_thread(|| {\n-            // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n-            // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n-                env::args().collect()\n-            } else {\n-                env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n-            };\n+                // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n+                // without having to pass --sysroot or anything\n+                let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n+                    env::args().collect()\n+                } else {\n+                    env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n+                };\n \n-            // this check ensures that dependencies are built but not linted and the final crate is\n-            // linted but not built\n-            let clippy_enabled = env::args().any(|s| s == \"-Zno-trans\");\n+                // this check ensures that dependencies are built but not linted and the final crate is\n+                // linted but not built\n+                let clippy_enabled = env::args().any(|s| s == \"-Zno-trans\");\n \n-            if clippy_enabled {\n-                args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-            }\n+                if clippy_enabled {\n+                    args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+                }\n \n-            let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-            let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n-            if let Err(err_count) = result {\n-                if err_count > 0 {\n-                    std::process::exit(1);\n+                let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n+                let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n+                if let Err(err_count) = result {\n+                    if err_count > 0 {\n+                        std::process::exit(1);\n+                    }\n                 }\n-            }\n-        }).expect(\"rustc_thread failed\");\n+            })\n+            .expect(\"rustc_thread failed\");\n     }\n }\n "}]}