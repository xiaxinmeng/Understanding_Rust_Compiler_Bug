{"sha": "c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTk0YzVkZmFhZjVmMWRhY2MxMTBiYjgxZDI5MmM0MzgyNTU0ZDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-15T21:55:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T17:32:37Z"}, "message": "Convert TyPolyTraitRef to accept arbitary bounds, so that things like\n`Box<for<'a> Foo<&'a T> + 'a>` can be accepted. Also cleanup the visitor/fold\nin general, exposing more callbacks.", "tree": {"sha": "82e6306f91f24f06e8be597672f9a3c82a206300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e6306f91f24f06e8be597672f9a3c82a206300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "html_url": "https://github.com/rust-lang/rust/commit/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c808ffee44afad69aeeeec835601d44bf0e9147", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c808ffee44afad69aeeeec835601d44bf0e9147", "html_url": "https://github.com/rust-lang/rust/commit/9c808ffee44afad69aeeeec835601d44bf0e9147"}], "stats": {"total": 225, "additions": 155, "deletions": 70}, "files": [{"sha": "baf53cc34ba94bded0b8fa304f13663e15ad8621", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -5038,10 +5038,10 @@ impl<'a> Resolver<'a> {\n                 visit::walk_ty(self, ty);\n             }\n \n-            TyPolyTraitRef(ref poly_trait_ref) => {\n-                self.resolve_poly_trait_reference(\n+            TyPolyTraitRef(ref bounds) => {\n+                self.resolve_type_parameter_bounds(\n                     ty.id,\n-                    &**poly_trait_ref,\n+                    bounds,\n                     TraitObject);\n                 visit::walk_ty(self, ty);\n             }"}, {"sha": "d85f8eab7cd07dcab60032219b1924fb4893ad8b", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -883,15 +883,8 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n \n                 ty::mk_closure(tcx, fn_decl)\n             }\n-            ast::TyPolyTraitRef(ref data) => {\n-                // FIXME(#18639) this is just a placeholder for code to come\n-                let principal = instantiate_trait_ref(this, rscope, &data.trait_ref, None, None);\n-                let bounds = conv_existential_bounds(this,\n-                                                     rscope,\n-                                                     ast_ty.span,\n-                                                     &[principal.clone()],\n-                                                     &[]);\n-                ty::mk_trait(tcx, (*principal).clone(), bounds)\n+            ast::TyPolyTraitRef(ref bounds) => {\n+                conv_ty_poly_trait_ref(this, rscope, ast_ty.span, bounds.as_slice())\n             }\n             ast::TyPath(ref path, ref bounds, id) => {\n                 let a_def = match tcx.def_map.borrow().get(&id) {\n@@ -1371,15 +1364,66 @@ pub fn conv_existential_bounds<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n     let ast_bound_refs: Vec<&ast::TyParamBound> =\n         ast_bounds.iter().collect();\n \n+    let partitioned_bounds =\n+        partition_bounds(this.tcx(), span, ast_bound_refs.as_slice());\n+\n+    conv_existential_bounds_from_partitioned_bounds(\n+        this, rscope, span, main_trait_refs, partitioned_bounds)\n+}\n+\n+fn conv_ty_poly_trait_ref<'tcx, AC, RS>(\n+    this: &AC,\n+    rscope: &RS,\n+    span: Span,\n+    ast_bounds: &[ast::TyParamBound])\n+    -> ty::t\n+    where AC: AstConv<'tcx>, RS:RegionScope\n+{\n+    let ast_bounds: Vec<&ast::TyParamBound> = ast_bounds.iter().collect();\n+    let mut partitioned_bounds = partition_bounds(this.tcx(), span, ast_bounds[]);\n+\n+    let main_trait_bound = match partitioned_bounds.trait_bounds.remove(0) {\n+        Some(trait_bound) => {\n+            Some(instantiate_poly_trait_ref(this, rscope, trait_bound, None, None))\n+        }\n+        None => {\n+            this.tcx().sess.span_err(\n+                span,\n+                \"at least one non-builtin trait is required for an object type\");\n+            None\n+        }\n+    };\n+\n+    let bounds = conv_existential_bounds_from_partitioned_bounds(this,\n+                                                                 rscope,\n+                                                                 span,\n+                                                                 main_trait_bound.as_slice(),\n+                                                                 partitioned_bounds);\n+\n+    match main_trait_bound {\n+        None => ty::mk_err(),\n+        Some(principal) => ty::mk_trait(this.tcx(), (*principal).clone(), bounds)\n+    }\n+}\n+\n+pub fn conv_existential_bounds_from_partitioned_bounds<'tcx, AC, RS>(\n+    this: &AC,\n+    rscope: &RS,\n+    span: Span,\n+    main_trait_refs: &[Rc<ty::TraitRef>],\n+    partitioned_bounds: PartitionedBounds)\n+    -> ty::ExistentialBounds\n+    where AC: AstConv<'tcx>, RS:RegionScope\n+{\n     let PartitionedBounds { builtin_bounds,\n                             trait_bounds,\n                             region_bounds } =\n-        partition_bounds(this.tcx(), span, ast_bound_refs.as_slice());\n+        partitioned_bounds;\n \n     if !trait_bounds.is_empty() {\n         let b = &trait_bounds[0];\n         this.tcx().sess.span_err(\n-            b.path.span,\n+            b.trait_ref.path.span,\n             format!(\"only the builtin traits can be used \\\n                      as closure or object bounds\").as_slice());\n     }"}, {"sha": "15e14902727f5db6e4dff09d7e143b57a430bdc3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -1154,7 +1154,7 @@ pub enum Ty_ {\n     /// Type parameters are stored in the Path itself\n     TyPath(Path, Option<TyParamBounds>, NodeId), // for #7264; see above\n     /// A type like `for<'a> Foo<&'a Bar>`\n-    TyPolyTraitRef(P<PolyTraitRef>),\n+    TyPolyTraitRef(TyParamBounds),\n     /// A \"qualified path\", e.g. `<Vec<T> as SomeTrait>::SomeType`\n     TyQPath(P<QPath>),\n     /// No-op; kept solely so that we can pretty-print faithfully"}, {"sha": "30cdecbc851999877562f804c51d37822e1f7196", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -494,10 +494,10 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n         }\n \n         visit::walk_fn(self,\n-                        function_kind,\n-                        function_declaration,\n-                        block,\n-                        span);\n+                       function_kind,\n+                       function_declaration,\n+                       block,\n+                       span);\n \n         if !self.pass_through_items {\n             match function_kind {"}, {"sha": "b3137ff5f7e52c0acd00cac02a9b748dfffcade9", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -445,10 +445,12 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyFixedLengthVec(ty, e) => {\n                 TyFixedLengthVec(fld.fold_ty(ty), fld.fold_expr(e))\n             }\n-            TyTypeof(expr) => TyTypeof(fld.fold_expr(expr)),\n-            TyPolyTraitRef(poly_trait_ref) => {\n-                TyPolyTraitRef(poly_trait_ref.map(|p| fld.fold_poly_trait_ref(p)))\n-            },\n+            TyTypeof(expr) => {\n+                TyTypeof(fld.fold_expr(expr))\n+            }\n+            TyPolyTraitRef(bounds) => {\n+                TyPolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+            }\n         },\n         span: fld.new_span(span)\n     })"}, {"sha": "40c4ac9f8c04418fa2b1a811fcf2dfaff73e9ee5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -1023,10 +1023,21 @@ impl<'a> Parser<'a> {\n             self.parse_ty_bare_fn_or_ty_closure(lifetime_defs)\n         } else if self.token == token::ModSep ||\n                   self.token.is_ident() ||\n-                  self.token.is_path() {\n+                  self.token.is_path()\n+        {\n             let trait_ref = self.parse_trait_ref();\n-            TyPolyTraitRef(P(PolyTraitRef { bound_lifetimes: lifetime_defs,\n-                                            trait_ref: trait_ref }))\n+            let poly_trait_ref = ast::PolyTraitRef { bound_lifetimes: lifetime_defs,\n+                                                     trait_ref: trait_ref };\n+            let other_bounds = if self.eat(&token::BinOp(token::Plus)) {\n+                self.parse_ty_param_bounds()\n+            } else {\n+                OwnedSlice::empty()\n+            };\n+            let all_bounds =\n+                Some(TraitTyParamBound(poly_trait_ref)).into_iter()\n+                .chain(other_bounds.into_vec().into_iter())\n+                .collect();\n+            ast::TyPolyTraitRef(all_bounds)\n         } else {\n             self.parse_ty_closure(lifetime_defs)\n         }"}, {"sha": "e6e0c33a42dbdf0497ddb841ba33f3d09cacf429", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -739,8 +739,8 @@ impl<'a> State<'a> {\n             ast::TyPath(ref path, ref bounds, _) => {\n                 try!(self.print_bounded_path(path, bounds));\n             }\n-            ast::TyPolyTraitRef(ref poly_trait_ref) => {\n-                try!(self.print_poly_trait_ref(&**poly_trait_ref));\n+            ast::TyPolyTraitRef(ref bounds) => {\n+                try!(self.print_bounds(\"\", bounds));\n             }\n             ast::TyQPath(ref qpath) => {\n                 try!(word(&mut self.s, \"<\"));"}, {"sha": "efe1e18eda92872d6b2800373a4e64034cb45727", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 70, "deletions": 42, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a94c5dfaaf5f1dacc110bb81d292c4382554d9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c8a94c5dfaaf5f1dacc110bb81d292c4382554d9", "patch": "@@ -78,6 +78,9 @@ pub trait Visitor<'v> {\n     fn visit_ty_method(&mut self, t: &'v TypeMethod) { walk_ty_method(self, t) }\n     fn visit_trait_item(&mut self, t: &'v TraitItem) { walk_trait_item(self, t) }\n     fn visit_trait_ref(&mut self, t: &'v TraitRef) { walk_trait_ref(self, t) }\n+    fn visit_ty_param_bound(&mut self, bounds: &'v TyParamBound) {\n+        walk_ty_param_bound(self, bounds)\n+    }\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef) {\n         walk_poly_trait_ref(self, t)\n     }\n@@ -119,6 +122,12 @@ pub trait Visitor<'v> {\n     fn visit_path(&mut self, path: &'v Path, _id: ast::NodeId) {\n         walk_path(self, path)\n     }\n+    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n+        walk_path_segment(self, path_span, path_segment)\n+    }\n+    fn visit_path_parameters(&mut self, path_span: Span, path_parameters: &'v PathParameters) {\n+        walk_path_parameters(self, path_span, path_parameters)\n+    }\n     fn visit_attribute(&mut self, _attr: &'v Attribute) {}\n }\n \n@@ -170,7 +179,7 @@ pub fn walk_view_item<'v, V: Visitor<'v>>(visitor: &mut V, vi: &'v ViewItem) {\n                 ViewPathGlob(ref path, id) => {\n                     visitor.visit_path(path, id);\n                 }\n-                ViewPathList(ref path, ref list, _) => {\n+                ViewPathList(ref prefix, ref list, _) => {\n                     for id in list.iter() {\n                         match id.node {\n                             PathListIdent { name, .. } => {\n@@ -179,7 +188,10 @@ pub fn walk_view_item<'v, V: Visitor<'v>>(visitor: &mut V, vi: &'v ViewItem) {\n                             PathListMod { .. } => ()\n                         }\n                     }\n-                    walk_path(visitor, path);\n+\n+                    // Note that the `prefix` here is not a complete\n+                    // path, so we don't use `visit_path`.\n+                    walk_path(visitor, prefix);\n                 }\n             }\n         }\n@@ -212,7 +224,7 @@ pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,\n                                          trait_ref: &'v PolyTraitRef)\n     where V: Visitor<'v>\n {\n-    walk_lifetime_decls(visitor, &trait_ref.bound_lifetimes);\n+    walk_lifetime_decls_helper(visitor, &trait_ref.bound_lifetimes);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n \n@@ -290,7 +302,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemTrait(ref generics, _, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n-            walk_ty_param_bounds(visitor, bounds);\n+            walk_ty_param_bounds_helper(visitor, bounds);\n             for method in methods.iter() {\n                 visitor.visit_trait_item(method)\n             }\n@@ -363,29 +375,29 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n                 visitor.visit_ty(&*argument.ty)\n             }\n             walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n-            walk_ty_param_bounds(visitor, &function_declaration.bounds);\n-            walk_lifetime_decls(visitor, &function_declaration.lifetimes);\n+            walk_ty_param_bounds_helper(visitor, &function_declaration.bounds);\n+            walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n         }\n         TyProc(ref function_declaration) => {\n             for argument in function_declaration.decl.inputs.iter() {\n                 visitor.visit_ty(&*argument.ty)\n             }\n             walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n-            walk_ty_param_bounds(visitor, &function_declaration.bounds);\n-            walk_lifetime_decls(visitor, &function_declaration.lifetimes);\n+            walk_ty_param_bounds_helper(visitor, &function_declaration.bounds);\n+            walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n         }\n         TyBareFn(ref function_declaration) => {\n             for argument in function_declaration.decl.inputs.iter() {\n                 visitor.visit_ty(&*argument.ty)\n             }\n             walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n-            walk_lifetime_decls(visitor, &function_declaration.lifetimes);\n+            walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n         }\n         TyPath(ref path, ref opt_bounds, id) => {\n             visitor.visit_path(path, id);\n             match *opt_bounds {\n                 Some(ref bounds) => {\n-                    walk_ty_param_bounds(visitor, bounds);\n+                    walk_ty_param_bounds_helper(visitor, bounds);\n                 }\n                 None => { }\n             }\n@@ -399,8 +411,8 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             visitor.visit_ty(&**ty);\n             visitor.visit_expr(&**expression)\n         }\n-        TyPolyTraitRef(ref poly_trait_ref) => {\n-            visitor.visit_poly_trait_ref(&**poly_trait_ref)\n+        TyPolyTraitRef(ref bounds) => {\n+            walk_ty_param_bounds_helper(visitor, bounds)\n         }\n         TyTypeof(ref expression) => {\n             visitor.visit_expr(&**expression)\n@@ -409,33 +421,44 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     }\n }\n \n-fn walk_lifetime_decls<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                           lifetimes: &'v Vec<LifetimeDef>) {\n+pub fn walk_lifetime_decls_helper<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                                      lifetimes: &'v Vec<LifetimeDef>) {\n     for l in lifetimes.iter() {\n         visitor.visit_lifetime_decl(l);\n     }\n }\n \n pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     for segment in path.segments.iter() {\n-        visitor.visit_ident(path.span, segment.identifier);\n+        visitor.visit_path_segment(path.span, segment);\n+    }\n+}\n \n-        match segment.parameters {\n-            ast::AngleBracketedParameters(ref data) => {\n-                for typ in data.types.iter() {\n-                    visitor.visit_ty(&**typ);\n-                }\n-                for lifetime in data.lifetimes.iter() {\n-                    visitor.visit_lifetime_ref(lifetime);\n-                }\n+pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                             path_span: Span,\n+                                             segment: &'v PathSegment) {\n+    visitor.visit_ident(path_span, segment.identifier);\n+    visitor.visit_path_parameters(path_span, &segment.parameters);\n+}\n+\n+pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                                _path_span: Span,\n+                                                path_parameters: &'v PathParameters) {\n+    match *path_parameters {\n+        ast::AngleBracketedParameters(ref data) => {\n+            for typ in data.types.iter() {\n+                visitor.visit_ty(&**typ);\n             }\n-            ast::ParenthesizedParameters(ref data) => {\n-                for typ in data.inputs.iter() {\n-                    visitor.visit_ty(&**typ);\n-                }\n-                for typ in data.output.iter() {\n-                    visitor.visit_ty(&**typ);\n-                }\n+            for lifetime in data.lifetimes.iter() {\n+                visitor.visit_lifetime_ref(lifetime);\n+            }\n+        }\n+        ast::ParenthesizedParameters(ref data) => {\n+            for typ in data.inputs.iter() {\n+                visitor.visit_ty(&**typ);\n+            }\n+            for typ in data.output.iter() {\n+                visitor.visit_ty(&**typ);\n             }\n         }\n     }\n@@ -511,32 +534,37 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n     }\n }\n \n-pub fn walk_ty_param_bounds<'v, V: Visitor<'v>>(visitor: &mut V,\n-                                                bounds: &'v OwnedSlice<TyParamBound>) {\n+pub fn walk_ty_param_bounds_helper<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                                       bounds: &'v OwnedSlice<TyParamBound>) {\n     for bound in bounds.iter() {\n-        match *bound {\n-            TraitTyParamBound(ref typ) => {\n-                visitor.visit_poly_trait_ref(typ)\n-            }\n-            RegionTyParamBound(ref lifetime) => {\n-                visitor.visit_lifetime_ref(lifetime);\n-            }\n+        visitor.visit_ty_param_bound(bound)\n+    }\n+}\n+\n+pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                               bound: &'v TyParamBound) {\n+    match *bound {\n+        TraitTyParamBound(ref typ) => {\n+            visitor.visit_poly_trait_ref(typ);\n+        }\n+        RegionTyParamBound(ref lifetime) => {\n+            visitor.visit_lifetime_ref(lifetime);\n         }\n     }\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for type_parameter in generics.ty_params.iter() {\n-        walk_ty_param_bounds(visitor, &type_parameter.bounds);\n+        walk_ty_param_bounds_helper(visitor, &type_parameter.bounds);\n         match type_parameter.default {\n             Some(ref ty) => visitor.visit_ty(&**ty),\n             None => {}\n         }\n     }\n-    walk_lifetime_decls(visitor, &generics.lifetimes);\n+    walk_lifetime_decls_helper(visitor, &generics.lifetimes);\n     for predicate in generics.where_clause.predicates.iter() {\n         visitor.visit_ident(predicate.span, predicate.ident);\n-        walk_ty_param_bounds(visitor, &predicate.bounds);\n+        walk_ty_param_bounds_helper(visitor, &predicate.bounds);\n     }\n }\n "}]}