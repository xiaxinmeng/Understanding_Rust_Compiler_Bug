{"sha": "154db50d86432e7ddc7f292b161f9a52237a129e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NGRiNTBkODY0MzJlN2RkYzdmMjkyYjE2MWY5YTUyMjM3YTEyOWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-16T00:37:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T00:37:19Z"}, "message": "Rollup merge of #71724 - GuillaumeGomez:doc-alias-improvements, r=ollie27\n\nDoc alias improvements\n\nAfter [this message](https://github.com/rust-lang/rust/issues/50146#issuecomment-496601755), I realized that the **doc alias**. So this PR does the followings:\n\n * Align the alias discovery on items added into the search-index. It brings a few nice advantages:\n   * Instead of cloning the data between the two (in rustdoc source code), we now have the search-index one and aliases which reference to the first one. So we go from one big map containing a lot of duplicated data to just integers...\n * In the front-end (main.js), I improved the code around aliases to allow them to go through the same transformation as other items when we show the search results.\n * Improve the search tester in order to perform multiple requests into one file (I think it's better in this case than having a file for each case considering how many there are...)\n    * I also had to add the new function inside the tester (`handleAliases`)\n\nOnce this PR is merged, I intend to finally stabilize this feature.\n\nr? @ollie27\n\ncc @rust-lang/rustdoc", "tree": {"sha": "e3fa7b98ce906a801b11a2a2913a140de20e131c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3fa7b98ce906a801b11a2a2913a140de20e131c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154db50d86432e7ddc7f292b161f9a52237a129e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevzW/CRBK7hj4Ov3rIwAAdHIIAESUKOaEKbaDcBzS0+susdU5\n+/XTIX7Wp3nKHMcb/ybCRDKJOHUyWxbEjdGGMQcmfGGmTLWHmcjuowie6F7YSDUd\nMiD/Ah+Q3VQy4sE06eY1LkKKFc00TjLR7CsqRHQ1f6gMX4lH7hjU90Isll/gD+f0\n1cmdQpSLCgT4MJYBJO/JouZVD+nn0qhqeE4fOIRWryq7S09WRKIKurfaS0TeO46y\nGwTaOmB7I/sKwZjX9fH3f//AugT9+dul9tAuoCFzMoo1BIpdepEzpDwRSCiphDeR\nZHiz85S+Mzs7z8/GYc44tEUcC04Uf4SFOX3hSFLNWZ240xZmX5UpHLROgS011p0=\n=Lm6h\n-----END PGP SIGNATURE-----\n", "payload": "tree e3fa7b98ce906a801b11a2a2913a140de20e131c\nparent 21d58a1d31906ab03bd332321dde1d5d76368755\nparent e17ac668997410a1a9d2da8725329afb8b5f2901\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589589439 +0200\ncommitter GitHub <noreply@github.com> 1589589439 +0200\n\nRollup merge of #71724 - GuillaumeGomez:doc-alias-improvements, r=ollie27\n\nDoc alias improvements\n\nAfter [this message](https://github.com/rust-lang/rust/issues/50146#issuecomment-496601755), I realized that the **doc alias**. So this PR does the followings:\n\n * Align the alias discovery on items added into the search-index. It brings a few nice advantages:\n   * Instead of cloning the data between the two (in rustdoc source code), we now have the search-index one and aliases which reference to the first one. So we go from one big map containing a lot of duplicated data to just integers...\n * In the front-end (main.js), I improved the code around aliases to allow them to go through the same transformation as other items when we show the search results.\n * Improve the search tester in order to perform multiple requests into one file (I think it's better in this case than having a file for each case considering how many there are...)\n    * I also had to add the new function inside the tester (`handleAliases`)\n\nOnce this PR is merged, I intend to finally stabilize this feature.\n\nr? @ollie27\n\ncc @rust-lang/rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154db50d86432e7ddc7f292b161f9a52237a129e", "html_url": "https://github.com/rust-lang/rust/commit/154db50d86432e7ddc7f292b161f9a52237a129e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154db50d86432e7ddc7f292b161f9a52237a129e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d58a1d31906ab03bd332321dde1d5d76368755", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d58a1d31906ab03bd332321dde1d5d76368755", "html_url": "https://github.com/rust-lang/rust/commit/21d58a1d31906ab03bd332321dde1d5d76368755"}, {"sha": "e17ac668997410a1a9d2da8725329afb8b5f2901", "url": "https://api.github.com/repos/rust-lang/rust/commits/e17ac668997410a1a9d2da8725329afb8b5f2901", "html_url": "https://github.com/rust-lang/rust/commit/e17ac668997410a1a9d2da8725329afb8b5f2901"}], "stats": {"total": 704, "additions": 561, "deletions": 143}, "files": [{"sha": "381238165274de42d61683ab44d30eebd2a8cf83", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -643,6 +643,15 @@ impl Attributes {\n             })\n             .collect()\n     }\n+\n+    pub fn get_doc_aliases(&self) -> FxHashSet<String> {\n+        self.other_attrs\n+            .lists(sym::doc)\n+            .filter(|a| a.check_name(sym::alias))\n+            .filter_map(|a| a.value_str().map(|s| s.to_string().replace(\"\\\"\", \"\")))\n+            .filter(|v| !v.is_empty())\n+            .collect::<FxHashSet<_>>()\n+    }\n }\n \n impl PartialEq for Attributes {"}, {"sha": "ea65b3905272e9c180ae75d081c5cca588d9d713", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -114,7 +114,6 @@ pub fn render<T: Print, S: Print>(\n         window.rootPath = \\\"{root_path}\\\";\\\n         window.currentCrate = \\\"{krate}\\\";\\\n     </script>\\\n-    <script src=\\\"{root_path}aliases{suffix}.js\\\"></script>\\\n     <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n     {static_extra_scripts}\\\n     {extra_scripts}\\"}, {"sha": "646c663ad9ccd737e91e368ef9c7d12a7b3f3144", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -293,7 +293,12 @@ impl Serialize for IndexItem {\n     where\n         S: Serializer,\n     {\n-        assert_eq!(self.parent.is_some(), self.parent_idx.is_some());\n+        assert_eq!(\n+            self.parent.is_some(),\n+            self.parent_idx.is_some(),\n+            \"`{}` is missing idx\",\n+            self.name\n+        );\n \n         (self.ty, &self.name, &self.path, &self.desc, self.parent_idx, &self.search_type)\n             .serialize(serializer)\n@@ -819,42 +824,6 @@ themePicker.onblur = handleThemeButtonsBlur;\n         Ok((ret, krates))\n     }\n \n-    fn show_item(item: &IndexItem, krate: &str) -> String {\n-        format!(\n-            \"{{'crate':'{}','ty':{},'name':'{}','desc':'{}','p':'{}'{}}}\",\n-            krate,\n-            item.ty as usize,\n-            item.name,\n-            item.desc.replace(\"'\", \"\\\\'\"),\n-            item.path,\n-            if let Some(p) = item.parent_idx { format!(\",'parent':{}\", p) } else { String::new() }\n-        )\n-    }\n-\n-    let dst = cx.dst.join(&format!(\"aliases{}.js\", cx.shared.resource_suffix));\n-    {\n-        let (mut all_aliases, _) = try_err!(collect(&dst, &krate.name, \"ALIASES\"), &dst);\n-        let mut output = String::with_capacity(100);\n-        for (alias, items) in &cx.cache.aliases {\n-            if items.is_empty() {\n-                continue;\n-            }\n-            output.push_str(&format!(\n-                \"\\\"{}\\\":[{}],\",\n-                alias,\n-                items.iter().map(|v| show_item(v, &krate.name)).collect::<Vec<_>>().join(\",\")\n-            ));\n-        }\n-        all_aliases.push(format!(\"ALIASES[\\\"{}\\\"] = {{{}}};\", krate.name, output));\n-        all_aliases.sort();\n-        let mut v = Buffer::html();\n-        writeln!(&mut v, \"var ALIASES = {{}};\");\n-        for aliases in &all_aliases {\n-            writeln!(&mut v, \"{}\", aliases);\n-        }\n-        cx.shared.fs.write(&dst, v.into_inner().into_bytes())?;\n-    }\n-\n     use std::ffi::OsString;\n \n     #[derive(Debug)]"}, {"sha": "57d385de32096d88e11c5682a94ffe6213b05716", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -120,7 +120,7 @@ crate struct Cache {\n \n     /// Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n     /// we need the alias element to have an array of items.\n-    pub(super) aliases: FxHashMap<String, Vec<IndexItem>>,\n+    pub(super) aliases: BTreeMap<String, Vec<usize>>,\n }\n \n impl Cache {\n@@ -311,7 +311,7 @@ impl DocFolder for Cache {\n             };\n \n             match parent {\n-                (parent, Some(path)) if is_inherent_impl_item || (!self.stripped_mod) => {\n+                (parent, Some(path)) if is_inherent_impl_item || !self.stripped_mod => {\n                     debug_assert!(!item.is_stripped());\n \n                     // A crate has a module at its root, containing all items,\n@@ -327,6 +327,13 @@ impl DocFolder for Cache {\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),\n                         });\n+\n+                        for alias in item.attrs.get_doc_aliases() {\n+                            self.aliases\n+                                .entry(alias.to_lowercase())\n+                                .or_insert(Vec::new())\n+                                .push(self.search_index.len() - 1);\n+                        }\n                     }\n                 }\n                 (Some(parent), None) if is_inherent_impl_item => {\n@@ -376,11 +383,8 @@ impl DocFolder for Cache {\n                 {\n                     self.paths.insert(item.def_id, (self.stack.clone(), item.type_()));\n                 }\n-                self.add_aliases(&item);\n             }\n-\n             clean::PrimitiveItem(..) => {\n-                self.add_aliases(&item);\n                 self.paths.insert(item.def_id, (self.stack.clone(), item.type_()));\n             }\n \n@@ -488,40 +492,6 @@ impl DocFolder for Cache {\n     }\n }\n \n-impl Cache {\n-    fn add_aliases(&mut self, item: &clean::Item) {\n-        if item.def_id.index == CRATE_DEF_INDEX {\n-            return;\n-        }\n-        if let Some(ref item_name) = item.name {\n-            let path = self\n-                .paths\n-                .get(&item.def_id)\n-                .map(|p| p.0[..p.0.len() - 1].join(\"::\"))\n-                .unwrap_or(\"std\".to_owned());\n-            for alias in item\n-                .attrs\n-                .lists(sym::doc)\n-                .filter(|a| a.check_name(sym::alias))\n-                .filter_map(|a| a.value_str().map(|s| s.to_string().replace(\"\\\"\", \"\")))\n-                .filter(|v| !v.is_empty())\n-                .collect::<FxHashSet<_>>()\n-                .into_iter()\n-            {\n-                self.aliases.entry(alias).or_insert(Vec::with_capacity(1)).push(IndexItem {\n-                    ty: item.type_(),\n-                    name: item_name.to_string(),\n-                    path: path.clone(),\n-                    desc: shorten(plain_summary_line(item.doc_value())),\n-                    parent: None,\n-                    parent_idx: None,\n-                    search_type: get_index_search_type(&item),\n-                });\n-            }\n-        }\n-    }\n-}\n-\n /// Attempts to find where an external crate is located, given that we're\n /// rendering in to the specified source destination.\n fn extern_location(\n@@ -567,7 +537,8 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = vec![];\n \n-    let Cache { ref mut search_index, ref orphan_impl_items, ref paths, .. } = *cache;\n+    let Cache { ref mut search_index, ref orphan_impl_items, ref paths, ref mut aliases, .. } =\n+        *cache;\n \n     // Attach all orphan items to the type's definition if the type\n     // has since been learned.\n@@ -582,6 +553,12 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item),\n             });\n+            for alias in item.attrs.get_doc_aliases() {\n+                aliases\n+                    .entry(alias.to_lowercase())\n+                    .or_insert(Vec::new())\n+                    .push(search_index.len() - 1);\n+            }\n         }\n     }\n \n@@ -630,6 +607,12 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         items: Vec<&'a IndexItem>,\n         #[serde(rename = \"p\")]\n         paths: Vec<(ItemType, String)>,\n+        // The String is alias name and the vec is the list of the elements with this alias.\n+        //\n+        // To be noted: the `usize` elements are indexes to `items`.\n+        #[serde(rename = \"a\")]\n+        #[serde(skip_serializing_if = \"BTreeMap::is_empty\")]\n+        aliases: &'a BTreeMap<String, Vec<usize>>,\n     }\n \n     // Collect the index into a string\n@@ -640,6 +623,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n             doc: crate_doc,\n             items: crate_items,\n             paths: crate_paths,\n+            aliases,\n         })\n         .expect(\"failed serde conversion\")\n         // All these `replace` calls are because we have to go through JS string for JSON content."}, {"sha": "9b498d66249e2fde35175429162a10f83da2690f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 110, "deletions": 26, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -531,6 +531,7 @@ function getSearchElement() {\n         var OUTPUT_DATA = 1;\n         var NO_TYPE_FILTER = -1;\n         var currentResults, index, searchIndex;\n+        var ALIASES = {};\n         var params = getQueryStringParams();\n \n         // Populate search bar with query string search term when provided,\n@@ -963,6 +964,72 @@ function getSearchElement() {\n                 return itemTypes[ty.ty] + ty.path + ty.name;\n             }\n \n+            function createAliasFromItem(item) {\n+                return {\n+                    crate: item.crate,\n+                    name: item.name,\n+                    path: item.path,\n+                    desc: item.desc,\n+                    ty: item.ty,\n+                    parent: item.parent,\n+                    type: item.type,\n+                    is_alias: true,\n+                };\n+            }\n+\n+            function handleAliases(ret, query, filterCrates) {\n+                // We separate aliases and crate aliases because we want to have current crate\n+                // aliases to be before the others in the displayed results.\n+                var aliases = [];\n+                var crateAliases = [];\n+                var i;\n+                if (filterCrates !== undefined &&\n+                        ALIASES[filterCrates] &&\n+                        ALIASES[filterCrates][query.search]) {\n+                    for (i = 0; i < ALIASES[crate][query.search].length; ++i) {\n+                        aliases.push(\n+                            createAliasFromItem(searchIndex[ALIASES[filterCrates][query.search]]));\n+                    }\n+                } else {\n+                    Object.keys(ALIASES).forEach(function(crate) {\n+                        if (ALIASES[crate][query.search]) {\n+                            var pushTo = crate === window.currentCrate ? crateAliases : aliases;\n+                            for (i = 0; i < ALIASES[crate][query.search].length; ++i) {\n+                                pushTo.push(\n+                                    createAliasFromItem(\n+                                        searchIndex[ALIASES[crate][query.search][i]]));\n+                            }\n+                        }\n+                    });\n+                }\n+\n+                var sortFunc = function(aaa, bbb) {\n+                    if (aaa.path < bbb.path) {\n+                        return 1;\n+                    } else if (aaa.path === bbb.path) {\n+                        return 0;\n+                    }\n+                    return -1;\n+                };\n+                crateAliases.sort(sortFunc);\n+                aliases.sort(sortFunc);\n+\n+                var pushFunc = function(alias) {\n+                    alias.alias = query.raw;\n+                    var res = buildHrefAndPath(alias);\n+                    alias.displayPath = pathSplitter(res[0]);\n+                    alias.fullPath = alias.displayPath + alias.name;\n+                    alias.href = res[1];\n+\n+                    ret.others.unshift(alias);\n+                    if (ret.others.length > MAX_RESULTS) {\n+                        ret.others.pop();\n+                    }\n+                };\n+                onEach(aliases, pushFunc);\n+                onEach(crateAliases, pushFunc);\n+            }\n+\n             // quoted values mean literal search\n             var nSearchWords = searchWords.length;\n             var i;\n@@ -1190,23 +1257,7 @@ function getSearchElement() {\n                 \"returned\": sortResults(results_returned, true),\n                 \"others\": sortResults(results),\n             };\n-            if (ALIASES && ALIASES[window.currentCrate] &&\n-                    ALIASES[window.currentCrate][query.raw]) {\n-                var aliases = ALIASES[window.currentCrate][query.raw];\n-                for (i = 0; i < aliases.length; ++i) {\n-                    aliases[i].is_alias = true;\n-                    aliases[i].alias = query.raw;\n-                    aliases[i].path = aliases[i].p;\n-                    var res = buildHrefAndPath(aliases[i]);\n-                    aliases[i].displayPath = pathSplitter(res[0]);\n-                    aliases[i].fullPath = aliases[i].displayPath + aliases[i].name;\n-                    aliases[i].href = res[1];\n-                    ret.others.unshift(aliases[i]);\n-                    if (ret.others.length > MAX_RESULTS) {\n-                        ret.others.pop();\n-                    }\n-                }\n-            }\n+            handleAliases(ret, query, filterCrates);\n             return ret;\n         }\n \n@@ -1599,13 +1650,12 @@ function getSearchElement() {\n                     \"returned\": mergeArrays(results.returned),\n                     \"others\": mergeArrays(results.others),\n                 };\n-            } else {\n-                return {\n-                    \"in_args\": results.in_args[0],\n-                    \"returned\": results.returned[0],\n-                    \"others\": results.others[0],\n-                };\n             }\n+            return {\n+                \"in_args\": results.in_args[0],\n+                \"returned\": results.returned[0],\n+                \"others\": results.others[0],\n+            };\n         }\n \n         function getFilterCrates() {\n@@ -1656,10 +1706,13 @@ function getSearchElement() {\n             searchIndex = [];\n             var searchWords = [];\n             var i;\n+            var currentIndex = 0;\n \n             for (var crate in rawSearchIndex) {\n                 if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n \n+                var crateSize = 0;\n+\n                 searchWords.push(crate);\n                 searchIndex.push({\n                     crate: crate,\n@@ -1669,6 +1722,7 @@ function getSearchElement() {\n                     desc: rawSearchIndex[crate].doc,\n                     type: null,\n                 });\n+                currentIndex += 1;\n \n                 // an array of [(Number) item type,\n                 //              (String) name,\n@@ -1680,6 +1734,9 @@ function getSearchElement() {\n                 // an array of [(Number) item type,\n                 //              (String) name]\n                 var paths = rawSearchIndex[crate].p;\n+                // a array of [(String) alias name\n+                //             [Number] index to items]\n+                var aliases = rawSearchIndex[crate].a;\n \n                 // convert `rawPaths` entries into object form\n                 var len = paths.length;\n@@ -1698,9 +1755,18 @@ function getSearchElement() {\n                 var lastPath = \"\";\n                 for (i = 0; i < len; ++i) {\n                     var rawRow = items[i];\n-                    var row = {crate: crate, ty: rawRow[0], name: rawRow[1],\n-                               path: rawRow[2] || lastPath, desc: rawRow[3],\n-                               parent: paths[rawRow[4]], type: rawRow[5]};\n+                    if (!rawRow[2]) {\n+                        rawRow[2] = lastPath;\n+                    }\n+                    var row = {\n+                        crate: crate,\n+                        ty: rawRow[0],\n+                        name: rawRow[1],\n+                        path: rawRow[2],\n+                        desc: rawRow[3],\n+                        parent: paths[rawRow[4]],\n+                        type: rawRow[5],\n+                    };\n                     searchIndex.push(row);\n                     if (typeof row.name === \"string\") {\n                         var word = row.name.toLowerCase();\n@@ -1709,7 +1775,25 @@ function getSearchElement() {\n                         searchWords.push(\"\");\n                     }\n                     lastPath = row.path;\n+                    crateSize += 1;\n+                }\n+\n+                if (aliases) {\n+                    ALIASES[crate] = {};\n+                    var j, local_aliases;\n+                    for (var alias_name in aliases) {\n+                        if (!aliases.hasOwnProperty(alias_name)) { continue; }\n+\n+                        if (!ALIASES[crate].hasOwnProperty(alias_name)) {\n+                            ALIASES[crate][alias_name] = [];\n+                        }\n+                        local_aliases = aliases[alias_name];\n+                        for (j = 0; j < local_aliases.length; ++j) {\n+                            ALIASES[crate][alias_name].push(local_aliases[j] + currentIndex);\n+                        }\n+                    }\n                 }\n+                currentIndex += crateSize;\n             }\n             return searchWords;\n         }"}, {"sha": "798fa29efbd2d2c1af3c63143c95bbbfa975e6c1", "filename": "src/test/rustdoc-js-std/alias-2.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftest%2Frustdoc-js-std%2Falias-2.js", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftest%2Frustdoc-js-std%2Falias-2.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Falias-2.js?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -1,10 +1,10 @@\n-// ignore-order\n-\n const QUERY = '+';\n \n const EXPECTED = {\n     'others': [\n         { 'path': 'std::ops', 'name': 'AddAssign' },\n         { 'path': 'std::ops', 'name': 'Add' },\n+        { 'path': 'core::ops', 'name': 'AddAssign' },\n+        { 'path': 'core::ops', 'name': 'Add' },\n     ],\n };"}, {"sha": "896808d4157808e1b0f682bd2c02d4440d0fb85c", "filename": "src/test/rustdoc-js/doc-alias.js", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftest%2Frustdoc-js%2Fdoc-alias.js", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftest%2Frustdoc-js%2Fdoc-alias.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fdoc-alias.js?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -0,0 +1,263 @@\n+// exact-check\n+\n+const QUERY = [\n+    'StructItem',\n+    'StructFieldItem',\n+    'StructMethodItem',\n+    'ImplTraitItem',\n+    'ImplAssociatedConstItem',\n+    'ImplTraitFunction',\n+    'EnumItem',\n+    'VariantItem',\n+    'EnumMethodItem',\n+    'TypedefItem',\n+    'TraitItem',\n+    'TraitTypeItem',\n+    'AssociatedConstItem',\n+    'TraitFunctionItem',\n+    'FunctionItem',\n+    'ModuleItem',\n+    'ConstItem',\n+    'StaticItem',\n+    'UnionItem',\n+    'UnionFieldItem',\n+    'UnionMethodItem',\n+    'MacroItem',\n+];\n+\n+const EXPECTED = [\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Struct',\n+                'alias': 'StructItem',\n+                'href': '../doc_alias/struct.Struct.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Struct',\n+                'name': 'field',\n+                'alias': 'StructFieldItem',\n+                'href': '../doc_alias/struct.Struct.html#structfield.field',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Struct',\n+                'name': 'method',\n+                'alias': 'StructMethodItem',\n+                'href': '../doc_alias/struct.Struct.html#method.method',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        // ImplTraitItem\n+        'others': [],\n+    },\n+    {\n+        // ImplAssociatedConstItem\n+        'others': [],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Struct',\n+                'name': 'function',\n+                'alias': 'ImplTraitFunction',\n+                'href': '../doc_alias/struct.Struct.html#method.function',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Enum',\n+                'alias': 'EnumItem',\n+                'href': '../doc_alias/enum.Enum.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Enum',\n+                'name': 'Variant',\n+                'alias': 'VariantItem',\n+                'href': '../doc_alias/enum.Enum.html#variant.Variant',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Enum',\n+                'name': 'method',\n+                'alias': 'EnumMethodItem',\n+                'href': '../doc_alias/enum.Enum.html#method.method',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Typedef',\n+                'alias': 'TypedefItem',\n+                'href': '../doc_alias/type.Typedef.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Trait',\n+                'alias': 'TraitItem',\n+                'href': '../doc_alias/trait.Trait.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Trait',\n+                'name': 'Target',\n+                'alias': 'TraitTypeItem',\n+                'href': '../doc_alias/trait.Trait.html#associatedtype.Target',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Trait',\n+                'name': 'AssociatedConst',\n+                'alias': 'AssociatedConstItem',\n+                'href': '../doc_alias/trait.Trait.html#associatedconstant.AssociatedConst',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Trait',\n+                'name': 'function',\n+                'alias': 'TraitFunctionItem',\n+                'href': '../doc_alias/trait.Trait.html#tymethod.function',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'function',\n+                'alias': 'FunctionItem',\n+                'href': '../doc_alias/fn.function.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Module',\n+                'alias': 'ModuleItem',\n+                'href': '../doc_alias/Module/index.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Const',\n+                'alias': 'ConstItem',\n+                'href': '../doc_alias/constant.Const.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Static',\n+                'alias': 'StaticItem',\n+                'href': '../doc_alias/static.Static.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Union',\n+                'alias': 'UnionItem',\n+                'href': '../doc_alias/union.Union.html',\n+                'is_alias': true\n+            },\n+            // Not an alias!\n+            {\n+                'path': 'doc_alias::Union',\n+                'name': 'union_item',\n+                'href': '../doc_alias/union.Union.html#structfield.union_item'\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Union',\n+                'name': 'union_item',\n+                'alias': 'UnionFieldItem',\n+                'href': '../doc_alias/union.Union.html#structfield.union_item',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias::Union',\n+                'name': 'method',\n+                'alias': 'UnionMethodItem',\n+                'href': '../doc_alias/union.Union.html#method.method',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+    {\n+        'others': [\n+            {\n+                'path': 'doc_alias',\n+                'name': 'Macro',\n+                'alias': 'MacroItem',\n+                'href': '../doc_alias/macro.Macro.html',\n+                'is_alias': true\n+            },\n+        ],\n+    },\n+];"}, {"sha": "84c638a199507f25aecbe9823b434d3d0f288b4f", "filename": "src/test/rustdoc-js/doc-alias.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftest%2Frustdoc-js%2Fdoc-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftest%2Frustdoc-js%2Fdoc-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fdoc-alias.rs?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -0,0 +1,79 @@\n+#![feature(doc_alias)]\n+\n+#[doc(alias = \"StructItem\")]\n+pub struct Struct {\n+    #[doc(alias = \"StructFieldItem\")]\n+    pub field: u32,\n+}\n+\n+impl Struct {\n+    #[doc(alias = \"StructMethodItem\")]\n+    pub fn method(&self) {}\n+}\n+\n+impl Trait for Struct {\n+    // Shouldn't be listed in aliases!\n+    #[doc(alias = \"ImplTraitItem\")]\n+    type Target = u32;\n+    // Shouldn't be listed in aliases!\n+    #[doc(alias = \"ImplAssociatedConstItem\")]\n+    const AssociatedConst: i32 = 12;\n+\n+    #[doc(alias = \"ImplTraitFunction\")]\n+    fn function() -> Self::Target { 0 }\n+}\n+\n+#[doc(alias = \"EnumItem\")]\n+pub enum Enum {\n+    #[doc(alias = \"VariantItem\")]\n+    Variant,\n+}\n+\n+impl Enum {\n+    #[doc(alias = \"EnumMethodItem\")]\n+    pub fn method(&self) {}\n+}\n+\n+#[doc(alias = \"TypedefItem\")]\n+pub type Typedef = i32;\n+\n+#[doc(alias = \"TraitItem\")]\n+pub trait Trait {\n+    #[doc(alias = \"TraitTypeItem\")]\n+    type Target;\n+    #[doc(alias = \"AssociatedConstItem\")]\n+    const AssociatedConst: i32;\n+\n+    #[doc(alias = \"TraitFunctionItem\")]\n+    fn function() -> Self::Target;\n+}\n+\n+#[doc(alias = \"FunctionItem\")]\n+pub fn function() {}\n+\n+#[doc(alias = \"ModuleItem\")]\n+pub mod Module {}\n+\n+#[doc(alias = \"ConstItem\")]\n+pub const Const: u32 = 0;\n+\n+#[doc(alias = \"StaticItem\")]\n+pub static Static: u32 = 0;\n+\n+#[doc(alias = \"UnionItem\")]\n+pub union Union {\n+    #[doc(alias = \"UnionFieldItem\")]\n+    pub union_item: u32,\n+    pub y: f32,\n+}\n+\n+impl Union {\n+    #[doc(alias = \"UnionMethodItem\")]\n+    pub fn method(&self) {}\n+}\n+\n+#[doc(alias = \"MacroItem\")]\n+#[macro_export]\n+macro_rules! Macro {\n+    () => {}\n+}"}, {"sha": "1fa46ce99f5e66794e88b5bccb9a14046892787a", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 68, "deletions": 37, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/154db50d86432e7ddc7f292b161f9a52237a129e/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=154db50d86432e7ddc7f292b161f9a52237a129e", "patch": "@@ -181,7 +181,7 @@ function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n     for (var i = 0; i < thingsToLoad.length; ++i) {\n         var tmp = funcToCall(fileContent, thingsToLoad[i]);\n         if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            console.log('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n             process.exit(1);\n         }\n         content += tmp;\n@@ -218,12 +218,13 @@ function lookForEntry(entry, data) {\n     return null;\n }\n \n-function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n+function loadMainJsAndIndex(mainJs, searchIndex, storageJs, crate) {\n     if (searchIndex[searchIndex.length - 1].length === 0) {\n         searchIndex.pop();\n     }\n     searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    var fullSearchIndex = searchIndex.join(\"\\n\") + '\\nexports.rawSearchIndex = searchIndex;';\n+    searchIndex = loadContent(fullSearchIndex);\n     var finalJS = \"\";\n \n     var arraysToLoad = [\"itemTypes\"];\n@@ -235,34 +236,28 @@ function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n     // execQuery last parameter is built in buildIndex.\n     // buildIndex requires the hashmap from search-index.\n     var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+                           \"handleAliases\", \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n+    ALIASES = {};\n     finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n     finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += aliases;\n+    finalJS += loadThings([\"onEach\"], 'function', extractFunction, storageJs);\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n \n     var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n+    var index = loaded.buildIndex(searchIndex.rawSearchIndex);\n \n     return [loaded, index];\n }\n \n-function runChecks(testFile, loaded, index) {\n-    var errors = 0;\n-    var loadedFile = loadContent(\n-        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-\n-    const expected = loadedFile.EXPECTED;\n-    const query = loadedFile.QUERY;\n+function runSearch(query, expected, index, loaded, loadedFile, queryName) {\n     const filter_crate = loadedFile.FILTER_CRATE;\n     const ignore_order = loadedFile.ignore_order;\n     const exact_check = loadedFile.exact_check;\n-    const should_fail = loadedFile.should_fail;\n \n-    var results = loaded.execSearch(loaded.getQuery(query), index);\n+    var results = loaded.execSearch(loaded.getQuery(query), index, filter_crate);\n     var error_text = [];\n \n     for (var key in expected) {\n@@ -278,41 +273,77 @@ function runChecks(testFile, loaded, index) {\n         for (var i = 0; i < entry.length; ++i) {\n             var entry_pos = lookForEntry(entry[i], results[key]);\n             if (entry_pos === null) {\n-                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                error_text.push(queryName + \"==> Result not found in '\" + key + \"': '\" +\n                                 JSON.stringify(entry[i]) + \"'\");\n             } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                error_text.push(queryName + \"==> Exact check failed at position \" + (prev_pos + 1) +\n+                                \": expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n                                 JSON.stringify(results[key][i]) + \"'\");\n             } else if (ignore_order === false && entry_pos < prev_pos) {\n-                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+                error_text.push(queryName + \"==> '\" + JSON.stringify(entry[i]) + \"' was supposed \" +\n+                                \"to be before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n             } else {\n                 prev_pos = entry_pos;\n             }\n         }\n     }\n-    if (error_text.length === 0 && should_fail === true) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(\"==> Test was supposed to fail but all items were found...\");\n-    } else if (error_text.length !== 0 && should_fail === false) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(error_text.join(\"\\n\"));\n+    return error_text;\n+}\n+\n+function checkResult(error_text, loadedFile, displaySuccess) {\n+    if (error_text.length === 0 && loadedFile.should_fail === true) {\n+        console.log(\"FAILED\");\n+        console.log(\"==> Test was supposed to fail but all items were found...\");\n+    } else if (error_text.length !== 0 && loadedFile.should_fail === false) {\n+        console.log(\"FAILED\");\n+        console.log(error_text.join(\"\\n\"));\n     } else {\n+        if (displaySuccess) {\n+            console.log(\"OK\");\n+        }\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+function runChecks(testFile, loaded, index) {\n+    var loadedFile = loadContent(\n+        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+\n+    const expected = loadedFile.EXPECTED;\n+    const query = loadedFile.QUERY;\n+\n+    if (Array.isArray(query)) {\n+        if (!Array.isArray(expected)) {\n+            console.log(\"FAILED\");\n+            console.log(\"==> If QUERY variable is an array, EXPECTED should be an array too\");\n+            return 1;\n+        } else if (query.length !== expected.length) {\n+            console.log(\"FAILED\");\n+            console.log(\"==> QUERY variable should have the same length as EXPECTED\");\n+            return 1;\n+        }\n+        for (var i = 0; i < query.length; ++i) {\n+            var error_text = runSearch(query[i], expected[i], index, loaded, loadedFile,\n+                \"[ query `\" + query[i] + \"`]\");\n+            if (checkResult(error_text, loadedFile, false) !== 0) {\n+                return 1;\n+            }\n+        }\n         console.log(\"OK\");\n+        return 0;\n     }\n-    return errors;\n+    var error_text = runSearch(query, expected, index, loaded, loadedFile, \"\");\n+    return checkResult(error_text, loadedFile, true);\n }\n \n function load_files(doc_folder, resource_suffix, crate) {\n     var mainJs = readFile(path.join(doc_folder, \"main\" + resource_suffix + \".js\"));\n-    var aliases = readFile(path.join(doc_folder, \"aliases\" + resource_suffix + \".js\"));\n+    var storageJs = readFile(path.join(doc_folder, \"storage\" + resource_suffix + \".js\"));\n     var searchIndex = readFile(\n         path.join(doc_folder, \"search-index\" + resource_suffix + \".js\")).split(\"\\n\");\n \n-    return loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n+    return loadMainJsAndIndex(mainJs, searchIndex, storageJs, crate);\n }\n \n function showHelp() {\n@@ -349,25 +380,25 @@ function parseOptions(args) {\n             || args[i] === \"--crate-name\") {\n             i += 1;\n             if (i >= args.length) {\n-                console.error(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n             opts[correspondances[args[i - 1]]] = args[i];\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n         } else {\n-            console.error(\"Unknown option `\" + args[i] + \"`.\");\n-            console.error(\"Use `--help` to see the list of options\");\n+            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Use `--help` to see the list of options\");\n             return null;\n         }\n     }\n     if (opts[\"doc_folder\"].length < 1) {\n-        console.error(\"Missing `--doc-folder` option.\");\n+        console.log(\"Missing `--doc-folder` option.\");\n     } else if (opts[\"crate_name\"].length < 1) {\n-        console.error(\"Missing `--crate-name` option.\");\n+        console.log(\"Missing `--crate-name` option.\");\n     } else if (opts[\"test_folder\"].length < 1 && opts[\"test_file\"].length < 1) {\n-        console.error(\"At least one of `--test-folder` or `--test-file` option is required.\");\n+        console.log(\"At least one of `--test-folder` or `--test-file` option is required.\");\n     } else {\n         return opts;\n     }"}]}