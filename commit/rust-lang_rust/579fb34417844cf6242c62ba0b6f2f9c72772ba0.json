{"sha": "579fb34417844cf6242c62ba0b6f2f9c72772ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OWZiMzQ0MTc4NDRjZjYyNDJjNjJiYTBiNmYyZjljNzI3NzJiYTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-22T21:37:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-10-23T20:46:14Z"}, "message": "Remove dependence on rustc/rustc_driver, use syntex\n\nInstead just parse manually with the `syntex_syntax` crate which is a clone of\nlibsyntax on crates.io which builds on stable Rust.", "tree": {"sha": "4bcaff05a3b999d959047b583ad969f74e7d6e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bcaff05a3b999d959047b583ad969f74e7d6e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579fb34417844cf6242c62ba0b6f2f9c72772ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579fb34417844cf6242c62ba0b6f2f9c72772ba0", "html_url": "https://github.com/rust-lang/rust/commit/579fb34417844cf6242c62ba0b6f2f9c72772ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579fb34417844cf6242c62ba0b6f2f9c72772ba0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36abfe5dc25cd0c34579f2f20a2201fd87496e4d", "html_url": "https://github.com/rust-lang/rust/commit/36abfe5dc25cd0c34579f2f20a2201fd87496e4d"}], "stats": {"total": 177, "additions": 56, "deletions": 121}, "files": [{"sha": "d3f20f8b759149bef8ef81c40eabe902b2f9ea36", "filename": "Cargo.lock", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/579fb34417844cf6242c62ba0b6f2f9c72772ba0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/579fb34417844cf6242c62ba0b6f2f9c72772ba0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=579fb34417844cf6242c62ba0b6f2f9c72772ba0", "patch": "@@ -8,6 +8,7 @@ dependencies = [\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n+ \"syntex_syntax 0.18.0 (git+https://github.com/serde-rs/syntex)\",\n  \"term 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -21,6 +22,11 @@ dependencies = [\n  \"memchr 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"diff\"\n version = \"0.1.7\"\n@@ -93,6 +99,19 @@ dependencies = [\n  \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.18.0\"\n+source = \"git+https://github.com/serde-rs/syntex#176ca5d8add606fac8d503b10c89ddb82f02d92b\"\n+dependencies = [\n+ \"bitflags 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"term\"\n version = \"0.2.12\"\n@@ -115,6 +134,11 @@ name = \"unicode-segmentation\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.4\""}, {"sha": "60df8ac69048958dde5ae203dbf2db51aa890d29", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579fb34417844cf6242c62ba0b6f2f9c72772ba0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/579fb34417844cf6242c62ba0b6f2f9c72772ba0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=579fb34417844cf6242c62ba0b6f2f9c72772ba0", "patch": "@@ -16,6 +16,7 @@ regex = \"0.1.41\"\n term = \"0.2.11\"\n strings = { version = \"0.0.1\", git = \"https://github.com/nrc/strings.rs.git\" }\n diff = { git = \"https://github.com/utkarshkukreti/diff.rs.git\" }\n+syntex_syntax = { git = \"https://github.com/serde-rs/syntex\" }\n log = \"0.3.2\"\n env_logger = \"0.3.1\"\n "}, {"sha": "51497e3b1c355fd14e81bc1f519279ab0d96ac6d", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 64, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/579fb34417844cf6242c62ba0b6f2f9c72772ba0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579fb34417844cf6242c62ba0b6f2f9c72772ba0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=579fb34417844cf6242c62ba0b6f2f9c72772ba0", "patch": "@@ -15,10 +15,7 @@\n #[macro_use]\n extern crate log;\n \n-extern crate getopts;\n-extern crate rustc;\n-extern crate rustc_driver;\n-extern crate syntax;\n+extern crate syntex_syntax as syntax;\n extern crate rustc_serialize;\n \n extern crate strings;\n@@ -28,22 +25,15 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n \n-use rustc::session::Session;\n-use rustc::session::config as rustc_config;\n-use rustc::session::config::Input;\n-use rustc_driver::{driver, CompilerCalls, Compilation};\n-\n use syntax::ast;\n use syntax::codemap::{CodeMap, Span};\n-use syntax::diagnostics;\n+use syntax::parse::{self, ParseSess};\n \n use std::ops::{Add, Sub};\n-use std::path::PathBuf;\n+use std::path::Path;\n use std::collections::HashMap;\n use std::fmt;\n use std::str::FromStr;\n-use std::rc::Rc;\n-use std::cell::RefCell;\n \n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n@@ -380,65 +370,24 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-struct RustFmtCalls {\n-    config: Rc<Config>,\n-    result: Rc<RefCell<Option<FileMap>>>,\n-}\n-\n-impl<'a> CompilerCalls<'a> for RustFmtCalls {\n-    fn no_input(&mut self,\n-                _: &getopts::Matches,\n-                _: &rustc_config::Options,\n-                _: &Option<PathBuf>,\n-                _: &Option<PathBuf>,\n-                _: &diagnostics::registry::Registry)\n-                -> Option<(Input, Option<PathBuf>)> {\n-        panic!(\"No input supplied to RustFmt\");\n-    }\n-\n-    fn build_controller(&mut self, _: &Session) -> driver::CompileController<'a> {\n-        let result = self.result.clone();\n-        let config = self.config.clone();\n-\n-        let mut control = driver::CompileController::basic();\n-        control.after_parse.stop = Compilation::Stop;\n-        control.after_parse.callback = Box::new(move |state| {\n-            let krate = state.krate.unwrap();\n-            let codemap = state.session.codemap();\n-            let mut file_map = fmt_ast(krate, codemap, &*config);\n-            // For some reason, the codemap does not include terminating\n-            // newlines so we must add one on for each file. This is sad.\n-            filemap::append_newlines(&mut file_map);\n-\n-            *result.borrow_mut() = Some(file_map);\n-        });\n+pub fn format(file: &Path, config: &Config) -> FileMap {\n+    let parse_session = ParseSess::new();\n+    let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n+    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config);\n \n-        control\n-    }\n-}\n-\n-pub fn format(args: Vec<String>, config: &Config) -> FileMap {\n-    let result = Rc::new(RefCell::new(None));\n-\n-    {\n-        let config = Rc::new(config.clone());\n-        let mut call_ctxt = RustFmtCalls {\n-            config: config,\n-            result: result.clone(),\n-        };\n-        rustc_driver::run_compiler(&args, &mut call_ctxt);\n-    }\n+    // For some reason, the codemap does not include terminating\n+    // newlines so we must add one on for each file. This is sad.\n+    filemap::append_newlines(&mut file_map);\n \n-    // Peel the union.\n-    Rc::try_unwrap(result).ok().unwrap().into_inner().unwrap()\n+    return file_map;\n }\n \n // args are the arguments passed on the command line, generally passed through\n // to the compiler.\n // write_mode determines what happens to the result of running rustfmt, see\n // WriteMode.\n-pub fn run(args: Vec<String>, write_mode: WriteMode, config: &Config) {\n-    let mut result = format(args, config);\n+pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n+    let mut result = format(file, config);\n \n     println!(\"{}\", fmt_lines(&mut result, config));\n "}, {"sha": "bede00d6e9e3b54f6fa1f67063cd6ca719c3e2e0", "filename": "src/macros.rs", "status": "modified", "additions": 17, "deletions": 55, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/579fb34417844cf6242c62ba0b6f2f9c72772ba0/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579fb34417844cf6242c62ba0b6f2f9c72772ba0/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=579fb34417844cf6242c62ba0b6f2f9c72772ba0", "patch": "@@ -19,15 +19,10 @@\n // List-like invocations with parentheses will be formatted as function calls,\n // and those with brackets will be formatted as array literals.\n \n-use std::thread;\n-use std::collections::hash_map::{HashMap, Entry};\n-\n use syntax::ast;\n use syntax::parse::token::{Eof, Comma, Token};\n use syntax::parse::{ParseSess, tts_to_parser};\n use syntax::codemap::{mk_sp, BytePos};\n-use syntax::parse::token;\n-use syntax::util::interner::StrInterner;\n \n use Indent;\n use rewrite::RewriteContext;\n@@ -37,12 +32,6 @@ use utils::{wrap_str, span_after};\n \n static FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n \n-// We need to pass `TokenTree`s to our expression parsing thread, but they are\n-// not `Send`. We wrap them in a `Send` container to force our will.\n-// FIXME: this is a pretty terrible hack. Any other solution would be preferred.\n-struct ForceSend<T>(pub T);\n-unsafe impl<T> Send for ForceSend<T> {}\n-\n // FIXME: use the enum from libsyntax?\n #[derive(Clone, Copy)]\n enum MacroStyle {\n@@ -84,38 +73,28 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         };\n     }\n \n-    let wrapped_tt_vec = ForceSend(mac.node.tts.clone());\n-    let my_interner = ForceSend(clone_interner());\n-\n-    // Wrap expression parsing logic in a thread since the libsyntax parser\n-    // panics on failure, which we do not want to propagate.\n-    // The expression vector is wrapped in an Option inside a Result.\n-    let expr_vec_result = thread::spawn(move || {\n-        let parse_session = ParseSess::new();\n-        let mut parser = tts_to_parser(&parse_session, wrapped_tt_vec.0, vec![]);\n-        let mut expr_vec = vec![];\n-        token::get_ident_interner().reset(my_interner.0);\n+    let parse_session = ParseSess::new();\n+    let mut parser = tts_to_parser(&parse_session, mac.node.tts.clone(), Vec::new());\n+    let mut expr_vec = Vec::new();\n \n-        loop {\n-            expr_vec.push(parser.parse_expr());\n+    loop {\n+        expr_vec.push(match parser.parse_expr_nopanic() {\n+            Ok(expr) => expr,\n+            Err(..) => return None,\n+        });\n \n-            match parser.token {\n-                Token::Eof => break,\n-                Token::Comma => (),\n-                _ => panic!(\"Macro not list-like, skiping...\"),\n-            }\n+        match parser.token {\n+            Token::Eof => break,\n+            Token::Comma => (),\n+            _ => return None,\n+        }\n \n-            let _ = parser.bump();\n+        let _ = parser.bump();\n \n-            if parser.token == Token::Eof {\n-                return None;\n-            }\n+        if parser.token == Token::Eof {\n+            return None;\n         }\n-\n-        Some(ForceSend((expr_vec, clone_interner())))\n-    });\n-    let (expr_vec, interner) = try_opt!(try_opt!(expr_vec_result.join().ok())).0;\n-    token::get_ident_interner().reset(interner);\n+    }\n \n     match style {\n         MacroStyle::Parens => {\n@@ -146,23 +125,6 @@ pub fn rewrite_macro(mac: &ast::Mac,\n     }\n }\n \n-fn clone_interner() -> StrInterner {\n-    let old = token::get_ident_interner();\n-    let new = StrInterner::new();\n-    let mut map = HashMap::new();\n-    for name in (0..old.len()).map(|i| i as u32).map(ast::Name) {\n-        match map.entry(old.get(name)) {\n-            Entry::Occupied(e) => {\n-                new.gensym_copy(*e.get());\n-            }\n-            Entry::Vacant(e) => {\n-                e.insert(new.intern(&old.get(name)));\n-            }\n-        }\n-    }\n-    return new\n-}\n-\n fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n     let snippet = context.snippet(mac.span);\n     let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());"}, {"sha": "649ccdf5647a2a387aa8bd0e1aff10fd5290c31d", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/579fb34417844cf6242c62ba0b6f2f9c72772ba0/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579fb34417844cf6242c62ba0b6f2f9c72772ba0/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=579fb34417844cf6242c62ba0b6f2f9c72772ba0", "patch": "@@ -135,7 +135,6 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n-    let args = vec![\"rustfmt\".to_owned(), filename];\n \n     for (key, val) in &sig_comments {\n         if key != \"target\" && key != \"config\" {\n@@ -146,7 +145,7 @@ pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String\n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n \n-    let mut file_map = format(args, &config);\n+    let mut file_map = format(Path::new(&filename), &config);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n     // Won't panic, as we're not doing any IO."}]}