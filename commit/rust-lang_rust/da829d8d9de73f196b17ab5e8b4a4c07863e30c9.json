{"sha": "da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "node_id": "C_kwDOAAsO6NoAKGRhODI5ZDhkOWRlNzNmMTk2YjE3YWI1ZThiNGE0YzA3ODYzZTMwYzk", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-03-28T14:14:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:09Z"}, "message": "Improve the BNF description a bit and fix some issues", "tree": {"sha": "08de17fef317c80546715484ccafaff90c9bef27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08de17fef317c80546715484ccafaff90c9bef27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "html_url": "https://github.com/rust-lang/rust/commit/da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5c4c2b306689347d12627bae9895624ee8eae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5c4c2b306689347d12627bae9895624ee8eae1", "html_url": "https://github.com/rust-lang/rust/commit/1f5c4c2b306689347d12627bae9895624ee8eae1"}], "stats": {"total": 241, "additions": 201, "deletions": 40}, "files": [{"sha": "239fef494ad50e25ba5742dac8d5a80dd71e4981", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "patch": "@@ -172,7 +172,7 @@ window.initSearch = function(rawSearchIndex) {\n             throw new Error(\"`\\\"` cannot be used in generics\");\n         } else if (query.literalSearch) {\n             throw new Error(\"Cannot have more than one literal search element\");\n-        } else if (parserState.totalElems !== 0) {\n+        } else if (parserState.totalElems - parserState.genericsElems > 0) {\n             throw new Error(\"Cannot use literal search when there is more than one element\");\n         }\n         parserState.pos += 1;\n@@ -234,11 +234,11 @@ window.initSearch = function(rawSearchIndex) {\n      *\n      * @return {QueryElement}                - The newly created `QueryElement`.\n      */\n-    function createQueryElement(query, parserState, name, generics) {\n+    function createQueryElement(query, parserState, name, generics, isInGenerics) {\n         if (name === '*' || (name.length === 0 && generics.length === 0)) {\n             return;\n         }\n-        if (query.literalSearch && parserState.totalElems > 0) {\n+        if (query.literalSearch && parserState.totalElems - parserState.genericsElems > 0) {\n             throw new Error(\"You cannot have more than one element if you use quotes\");\n         }\n         var pathSegments = name.split(\"::\");\n@@ -261,6 +261,9 @@ window.initSearch = function(rawSearchIndex) {\n             throw new Error(\"Found generics without a path\");\n         }\n         parserState.totalElems += 1;\n+        if (isInGenerics) {\n+            parserState.genericsElems += 1;\n+        }\n         return {\n             name: name,\n             fullPath: pathSegments,\n@@ -315,6 +318,8 @@ window.initSearch = function(rawSearchIndex) {\n         {\n             if (isInGenerics) {\n                 throw new Error(\"Unexpected `<` after `<`\");\n+            } else if (start >= end) {\n+                throw new Error(\"Found generics without a path\");\n             }\n             parserState.pos += 1;\n             getItemsBefore(query, parserState, generics, \">\");\n@@ -327,7 +332,8 @@ window.initSearch = function(rawSearchIndex) {\n                 query,\n                 parserState,\n                 parserState.userQuery.slice(start, end),\n-                generics\n+                generics,\n+                isInGenerics\n             )\n         );\n     }\n@@ -346,13 +352,15 @@ window.initSearch = function(rawSearchIndex) {\n      *                                      character.\n      */\n     function getItemsBefore(query, parserState, elems, endChar) {\n-        var turns = 0;\n+        var foundStopChar = true;\n+\n         while (parserState.pos < parserState.length) {\n             var c = parserState.userQuery[parserState.pos];\n             if (c === endChar) {\n                 break;\n-            } else if (c === \",\" && endChar !== \"\" && turns > 0) {\n+            } else if (c === \",\" || c === \" \") {\n                 parserState.pos += 1;\n+                foundStopChar = true;\n                 continue;\n             } else if (c === \":\" && isPathStart(parserState)) {\n                 throw new Error(\"Unexpected `::`: paths cannot start with `::`\");\n@@ -365,15 +373,21 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n                 throw new Error(\"Unexpected `\" + c + \"` after \" + extra);\n             }\n+            if (!foundStopChar) {\n+                if (endChar !== \"\") {\n+                    throw new Error(`Expected \\`,\\`, \\` \\` or \\`${endChar}\\`, found \\`${c}\\``);\n+                }\n+                throw new Error(`Expected \\`,\\` or \\` \\`, found \\`${c}\\``);\n+            }\n             var posBefore = parserState.pos;\n             getNextElem(query, parserState, elems, endChar === \">\");\n-            turns += 1;\n             // This case can be encountered if `getNextElem` encounted a \"stop character\" right from\n-            // the start. For example if you have `,,`. In this case, we simply move up the current\n-            // position to continue the parsing.\n+            // the start. For example if you have `,,` or `<>`. In this case, we simply move up the\n+            // current position to continue the parsing.\n             if (posBefore === parserState.pos) {\n                 parserState.pos += 1;\n             }\n+            foundStopChar = false;\n         }\n         // We are either at the end of the string or on the `endChar`` character, let's move forward\n         // in any case.\n@@ -389,10 +403,12 @@ window.initSearch = function(rawSearchIndex) {\n      */\n     function parseInput(query, parserState) {\n         var c, before;\n+        var foundStopChar = true;\n \n         while (parserState.pos < parserState.length) {\n             c = parserState.userQuery[parserState.pos];\n             if (isStopCharacter(c)) {\n+                foundStopChar = true;\n                 if (c === \",\" || c === \" \") {\n                     parserState.pos += 1;\n                     continue;\n@@ -402,6 +418,7 @@ window.initSearch = function(rawSearchIndex) {\n                     }\n                     throw new Error(`Unexpected \\`${c}\\` (did you mean \\`->\\`?)`);\n                 }\n+                throw new Error(`Unexpected \\`${c}\\``);\n             } else if (c === \":\" &&\n                 parserState.typeFilter === null &&\n                 !isPathStart(parserState))\n@@ -419,8 +436,15 @@ window.initSearch = function(rawSearchIndex) {\n                 parserState.pos += 1;\n                 parserState.totalElems = 0;\n                 query.literalSearch = false;\n+                foundStopChar = true;\n                 continue;\n             }\n+            if (!foundStopChar) {\n+                if (parserState.typeFilter !== null) {\n+                    throw new Error(`Expected \\`,\\`, \\` \\` or \\`->\\`, found \\`${c}\\``);\n+                }\n+                throw new Error(`Expected \\`,\\`, \\` \\`, \\`:\\` or \\`->\\`, found \\`${c}\\``);\n+            }\n             before = query.elems.length;\n             getNextElem(query, parserState, query.elems, false);\n             if (query.elems.length === before) {\n@@ -432,6 +456,7 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n                 parserState.pos += 1;\n             }\n+            foundStopChar = false;\n         }\n         while (parserState.pos < parserState.length) {\n             c = parserState.userQuery[parserState.pos];\n@@ -515,17 +540,17 @@ window.initSearch = function(rawSearchIndex) {\n      * arg = path [generics]\n      * arg-without-generic = path\n      * type-sep = COMMA/WS *(COMMA/WS)\n-     * nonempty-arg-list = arg *(type-sep arg) *(COMMA/WS)\n-     * nonempty-arg-list-without-generics = arg-without-generic *(type-sep arg-without-generic)\n-     *                                      *(COMMA/WS)\n-     * generics = OPEN-ANGLE-BRACKET *WS [ nonempty-arg-list-without-generics ] *WS\n+     * nonempty-arg-list = *(type-sep) arg *(type-sep arg) *(type-sep)\n+     * nonempty-arg-list-without-generics = *(type-sep) arg-without-generic\n+     *                                      *(type-sep arg-without-generic) *(type-sep)\n+     * generics = OPEN-ANGLE-BRACKET [ nonempty-arg-list-without-generics ] *(type-sep)\n      *            CLOSE-ANGLE-BRACKET\n-     * return-args = RETURN-ARROW *WS nonempty-arg-list\n+     * return-args = RETURN-ARROW *(type-sep) nonempty-arg-list\n      *\n-     * exact-search = [type-filter *WS COLON] *WS QUOTE ident QUOTE *WS [generics]\n-     * type-search = [type-filter *WS COLON] *WS path *WS nonempty-arg-list\n+     * exact-search = [type-filter *WS COLON] [ RETURN-ARROW ] *WS QUOTE ident QUOTE [ generics ]\n+     * type-search = [type-filter *WS COLON] [ nonempty-arg-list ] [ return-args ]\n      *\n-     * query = *WS (exact-search / type-search / return-args) *WS\n+     * query = *WS (exact-search / type-search) *WS\n      *\n      * type-filter = (\n      *     \"mod\" /\n@@ -578,6 +603,7 @@ window.initSearch = function(rawSearchIndex) {\n             pos: 0,\n             // Total number of elements (includes generics).\n             totalElems: 0,\n+            genericsElems: 0,\n             typeFilter: null,\n             userQuery: userQuery.toLowerCase(),\n         };\n@@ -606,7 +632,7 @@ window.initSearch = function(rawSearchIndex) {\n         query.foundElems = query.elems.length + query.returned.length;\n         if (query.foundElems === 0 && parserState.length !== 0) {\n             // In this case, we'll simply keep whatever was entered by the user...\n-            query.elems.push(createQueryElement(query, parserState, userQuery, []));\n+            query.elems.push(createQueryElement(query, parserState, userQuery, [], false));\n             query.foundElems += 1;\n         }\n         return query;"}, {"sha": "bd024a932a1530b8bf5fed8afcb4f5da3814d057", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 69, "deletions": 19, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "patch": "@@ -1,15 +1,14 @@\n const QUERY = [\n     '<P>',\n     '-> <P>',\n-    '<\"P\">',\n+    'a<\"P\">',\n     '\"P\" \"P\"',\n     'P \"P\"',\n     '\"p\" p',\n     '\"const\": p',\n-    \"<:a>\",\n-    \"<::a>\",\n+    \"a<:a>\",\n+    \"a<::a>\",\n     \"((a))\",\n-    \"->,a\",\n     \"(p -> p\",\n     \"::a::b\",\n     \"a::::b\",\n@@ -22,6 +21,12 @@ const QUERY = [\n     \"a>bb\",\n     \"ab'\",\n     \"a->\",\n+    '\"p\" <a>',\n+    '\"p\" a<a>',\n+    \"a,<\",\n+    \"aaaaa<>b\",\n+    \"fn:aaaaa<>b\",\n+    \"->a<>b\",\n ];\n \n const PARSED = [\n@@ -46,10 +51,10 @@ const PARSED = [\n     {\n         elems: [],\n         foundElems: 0,\n-        original: \"<\\\"P\\\">\",\n+        original: \"a<\\\"P\\\">\",\n         returned: [],\n         typeFilter: -1,\n-        userQuery: \"<\\\"p\\\">\",\n+        userQuery: \"a<\\\"p\\\">\",\n         error: \"`\\\"` cannot be used in generics\",\n     },\n     {\n@@ -91,19 +96,19 @@ const PARSED = [\n     {\n         elems: [],\n         foundElems: 0,\n-        original: \"<:a>\",\n+        original: \"a<:a>\",\n         returned: [],\n         typeFilter: -1,\n-        userQuery: \"<:a>\",\n+        userQuery: \"a<:a>\",\n         error: \"Unexpected `:` after `<`\",\n     },\n     {\n         elems: [],\n         foundElems: 0,\n-        original: \"<::a>\",\n+        original: \"a<::a>\",\n         returned: [],\n         typeFilter: -1,\n-        userQuery: \"<::a>\",\n+        userQuery: \"a<::a>\",\n         error: \"Unexpected `::`: paths cannot start with `::`\",\n     },\n     {\n@@ -115,15 +120,6 @@ const PARSED = [\n         userQuery: \"((a))\",\n         error: \"Unexpected `(`\",\n     },\n-    {\n-        elems: [],\n-        foundElems: 0,\n-        original: \"->,a\",\n-        returned: [],\n-        typeFilter: -1,\n-        userQuery: \"->,a\",\n-        error: \"Unexpected `,` after `->`\",\n-    },\n     {\n         elems: [],\n         foundElems: 0,\n@@ -232,4 +228,58 @@ const PARSED = [\n         userQuery: \"a->\",\n         error: \"Expected at least one item after `->`\",\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: '\"p\" <a>',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: '\"p\" <a>',\n+        error: \"Found generics without a path\",\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: '\"p\" a<a>',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: '\"p\" a<a>',\n+        error: \"You cannot have more than one element if you use quotes\",\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: 'a,<',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: 'a,<',\n+        error: 'Found generics without a path',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: 'aaaaa<>b',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: 'aaaaa<>b',\n+        error: 'Expected `,`, ` `, `:` or `->`, found `b`',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: 'fn:aaaaa<>b',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: 'fn:aaaaa<>b',\n+        error: 'Expected `,`, ` ` or `->`, found `b`',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: '->a<>b',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: '->a<>b',\n+        error: 'Expected `,` or ` `, found `b`',\n+    },\n ];"}, {"sha": "0cf7f5019aa5f2053b8dd4e3168bae7caf539a28", "filename": "src/test/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js?ref=da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['A<B<C<D>,  E>', 'p<> u8'];\n+const QUERY = ['A<B<C<D>,  E>', 'p<> u8', '\"p\"<a>'];\n \n const PARSED = [\n     {\n@@ -34,4 +34,29 @@ const PARSED = [\n         userQuery: \"p<> u8\",\n         error: null,\n     },\n+    {\n+        elems: [\n+            {\n+                name: \"p\",\n+                fullPath: [\"p\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p\",\n+                generics: [\n+                    {\n+                        name: \"a\",\n+                        fullPath: [\"a\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"a\",\n+                        generics: [],\n+                    },\n+                ],\n+            },\n+        ],\n+        foundElems: 1,\n+        original: '\"p\"<a>',\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: '\"p\"<a>',\n+        error: null,\n+    },\n ];"}, {"sha": "b45466aa940a46938e7d52305676f6f73cebdab3", "filename": "src/test/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js?ref=da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['-> F<P>', '-> P'];\n+const QUERY = ['-> F<P>', '-> P', '->,a', 'aaaaa->a'];\n \n const PARSED = [\n     {\n@@ -39,4 +39,40 @@ const PARSED = [\n         userQuery: \"-> p\",\n         error: null,\n     },\n+    {\n+        elems: [],\n+        foundElems: 1,\n+        original: \"->,a\",\n+        returned: [{\n+            name: \"a\",\n+            fullPath: [\"a\"],\n+            pathWithoutLast: [],\n+            pathLast: \"a\",\n+            generics: [],\n+        }],\n+        typeFilter: -1,\n+        userQuery: \"->,a\",\n+        error: null,\n+    },\n+    {\n+        elems: [{\n+            name: \"aaaaa\",\n+            fullPath: [\"aaaaa\"],\n+            pathWithoutLast: [],\n+            pathLast: \"aaaaa\",\n+            generics: [],\n+        }],\n+        foundElems: 2,\n+        original: \"aaaaa->a\",\n+        returned: [{\n+            name: \"a\",\n+            fullPath: [\"a\"],\n+            pathWithoutLast: [],\n+            pathLast: \"a\",\n+            generics: [],\n+        }],\n+        typeFilter: -1,\n+        userQuery: \"aaaaa->a\",\n+        error: null,\n+    },\n ];"}, {"sha": "4b4ce64284e6de622cae3e466a63af118ad139be", "filename": "src/test/rustdoc-js-std/parser-weird-queries.js", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js", "raw_url": "https://github.com/rust-lang/rust/raw/da829d8d9de73f196b17ab5e8b4a4c07863e30c9/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-weird-queries.js?ref=da829d8d9de73f196b17ab5e8b4a4c07863e30c9", "patch": "@@ -1,7 +1,7 @@\n // This test is mostly to check that the parser still kinda outputs something\n // (and doesn't enter an infinite loop!) even though the query is completely\n // invalid.\n-const QUERY = ['a b', 'a   b', 'a,b(c)'];\n+const QUERY = ['a b', 'a   b', 'a,b(c)', 'aaa,a'];\n \n const PARSED = [\n     {\n@@ -61,4 +61,28 @@ const PARSED = [\n         userQuery: \"a,b(c)\",\n         error: \"Unexpected `(`\",\n     },\n+    {\n+        elems: [\n+            {\n+                name: \"aaa\",\n+                fullPath: [\"aaa\"],\n+                pathWithoutLast: [],\n+                pathLast: \"aaa\",\n+                generics: [],\n+            },\n+            {\n+                name: \"a\",\n+                fullPath: [\"a\"],\n+                pathWithoutLast: [],\n+                pathLast: \"a\",\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        original: \"aaa,a\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"aaa,a\",\n+        error: null,\n+    },\n ];"}]}