{"sha": "bf78ef3851b10001a5ec95f9c4aace6184348d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNzhlZjM4NTFiMTAwMDFhNWVjOTVmOWM0YWFjZTYxODQzNDhkNmQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-19T17:33:32Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-19T21:22:05Z"}, "message": "Add missing examples in SocketAddr", "tree": {"sha": "ba355fabc8e5a8fb76e15fcdca07f88ea1925b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba355fabc8e5a8fb76e15fcdca07f88ea1925b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf78ef3851b10001a5ec95f9c4aace6184348d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf78ef3851b10001a5ec95f9c4aace6184348d6d", "html_url": "https://github.com/rust-lang/rust/commit/bf78ef3851b10001a5ec95f9c4aace6184348d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf78ef3851b10001a5ec95f9c4aace6184348d6d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509d14fc70d673bd01c7721481f63cb1bc503103", "url": "https://api.github.com/repos/rust-lang/rust/commits/509d14fc70d673bd01c7721481f63cb1bc503103", "html_url": "https://github.com/rust-lang/rust/commit/509d14fc70d673bd01c7721481f63cb1bc503103"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "1c016015b7928c9b9da3343bc6fb81b9a7e901b4", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/bf78ef3851b10001a5ec95f9c4aace6184348d6d/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf78ef3851b10001a5ec95f9c4aace6184348d6d/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=bf78ef3851b10001a5ec95f9c4aace6184348d6d", "patch": "@@ -31,7 +31,7 @@ pub enum SocketAddr {\n     /// An IPv4 socket address which is a (ip, port) combination.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     V4(#[stable(feature = \"rust1\", since = \"1.0.0\")] SocketAddrV4),\n-    /// An IPv6 socket address\n+    /// An IPv6 socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     V6(#[stable(feature = \"rust1\", since = \"1.0.0\")] SocketAddrV6),\n }\n@@ -48,6 +48,16 @@ pub struct SocketAddrV6 { inner: c::sockaddr_in6 }\n \n impl SocketAddr {\n     /// Creates a new socket address from the (ip, port) pair.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n+    ///\n+    /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n+    /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n+    /// assert_eq!(socket.port(), 8080);\n+    /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     pub fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n@@ -57,6 +67,15 @@ impl SocketAddr {\n     }\n \n     /// Returns the IP address associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n+    ///\n+    /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n+    /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n+    /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     pub fn ip(&self) -> IpAddr {\n         match *self {\n@@ -66,6 +85,16 @@ impl SocketAddr {\n     }\n \n     /// Change the IP address associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n+    ///\n+    /// let mut socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n+    /// socket.set_ip(IpAddr::V4(Ipv4Addr::new(10, 10, 0, 1)));\n+    /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(10, 10, 0, 1)));\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_ip(&mut self, new_ip: IpAddr) {\n         // `match (*self, new_ip)` would have us mutate a copy of self only to throw it away.\n@@ -77,6 +106,15 @@ impl SocketAddr {\n     }\n \n     /// Returns the port number associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n+    ///\n+    /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n+    /// assert_eq!(socket.port(), 8080);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 {\n         match *self {\n@@ -86,6 +124,16 @@ impl SocketAddr {\n     }\n \n     /// Change the port number associated with this socket address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n+    ///\n+    /// let mut socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n+    /// socket.set_port(1025);\n+    /// assert_eq!(socket.port(), 1025);\n+    /// ```\n     #[stable(feature = \"sockaddr_setters\", since = \"1.9.0\")]\n     pub fn set_port(&mut self, new_port: u16) {\n         match *self {\n@@ -96,6 +144,20 @@ impl SocketAddr {\n \n     /// Returns true if the IP in this `SocketAddr` is a valid IPv4 address,\n     /// false if it's a valid IPv6 address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(sockaddr_checker)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n+    ///\n+    /// fn main() {\n+    ///     let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n+    ///     assert_eq!(socket.is_ipv4(), true);\n+    ///     assert_eq!(socket.is_ipv6(), false);\n+    /// }\n+    /// ```\n     #[unstable(feature = \"sockaddr_checker\", issue = \"36949\")]\n     pub fn is_ipv4(&self) -> bool {\n         match *self {\n@@ -106,6 +168,21 @@ impl SocketAddr {\n \n     /// Returns true if the IP in this `SocketAddr` is a valid IPv6 address,\n     /// false if it's a valid IPv4 address.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(sockaddr_checker)]\n+    ///\n+    /// use std::net::{IpAddr, Ipv6Addr, SocketAddr};\n+    ///\n+    /// fn main() {\n+    ///     let socket = SocketAddr::new(\n+    ///                      IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 0, 1)), 8080);\n+    ///     assert_eq!(socket.is_ipv4(), false);\n+    ///     assert_eq!(socket.is_ipv6(), true);\n+    /// }\n+    /// ```\n     #[unstable(feature = \"sockaddr_checker\", issue = \"36949\")]\n     pub fn is_ipv6(&self) -> bool {\n         match *self {"}]}