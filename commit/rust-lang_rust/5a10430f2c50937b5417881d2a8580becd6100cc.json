{"sha": "5a10430f2c50937b5417881d2a8580becd6100cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTA0MzBmMmM1MDkzN2I1NDE3ODgxZDJhODU4MGJlY2Q2MTAwY2M=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-23T00:23:01Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-27T21:07:19Z"}, "message": "Remove `Rvalue::Ref` handling from `HasMutInterior`", "tree": {"sha": "bafa88029dd88235dbb3af7d31aadcf5aa6583d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bafa88029dd88235dbb3af7d31aadcf5aa6583d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a10430f2c50937b5417881d2a8580becd6100cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a10430f2c50937b5417881d2a8580becd6100cc", "html_url": "https://github.com/rust-lang/rust/commit/5a10430f2c50937b5417881d2a8580becd6100cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a10430f2c50937b5417881d2a8580becd6100cc/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3ddcd771e9df8b5ed47b7aad22bf526bfd8b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3ddcd771e9df8b5ed47b7aad22bf526bfd8b13", "html_url": "https://github.com/rust-lang/rust/commit/5a3ddcd771e9df8b5ed47b7aad22bf526bfd8b13"}], "stats": {"total": 30, "additions": 1, "deletions": 29}, "files": [{"sha": "2d5a0a2afcd016e0e263f0feb2ced56c7099ed07", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a10430f2c50937b5417881d2a8580becd6100cc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a10430f2c50937b5417881d2a8580becd6100cc/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=5a10430f2c50937b5417881d2a8580becd6100cc", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::{self, Ty};\n use rustc::hir::def_id::DefId;\n use syntax_pos::DUMMY_SP;\n \n-use super::{ConstKind, Item as ConstCx};\n+use super::Item as ConstCx;\n \n pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> ConstQualifs {\n     ConstQualifs {\n@@ -218,34 +218,6 @@ impl Qualif for HasMutInterior {\n         rvalue: &Rvalue<'tcx>,\n     ) -> bool {\n         match *rvalue {\n-            // Returning `true` for `Rvalue::Ref` indicates the borrow isn't\n-            // allowed in constants (and the `Checker` will error), and/or it\n-            // won't be promoted, due to `&mut ...` or interior mutability.\n-            Rvalue::Ref(_, kind, ref place) => {\n-                let ty = place.ty(cx.body, cx.tcx).ty;\n-\n-                if let BorrowKind::Mut { .. } = kind {\n-                    // In theory, any zero-sized value could be borrowed\n-                    // mutably without consequences.\n-                    match ty.kind {\n-                        // Inside a `static mut`, &mut [...] is also allowed.\n-                        | ty::Array(..)\n-                        | ty::Slice(_)\n-                        if cx.const_kind == Some(ConstKind::StaticMut)\n-                        => {},\n-\n-                        // FIXME(eddyb): We only return false for `&mut []` outside a const\n-                        // context which seems unnecessary given that this is merely a ZST.\n-                        | ty::Array(_, len)\n-                        if len.try_eval_usize(cx.tcx, cx.param_env) == Some(0)\n-                            && cx.const_kind == None\n-                        => {},\n-\n-                        _ => return true,\n-                    }\n-                }\n-            }\n-\n             Rvalue::Aggregate(ref kind, _) => {\n                 if let AggregateKind::Adt(def, ..) = **kind {\n                     if Some(def.did) == cx.tcx.lang_items().unsafe_cell_type() {"}]}