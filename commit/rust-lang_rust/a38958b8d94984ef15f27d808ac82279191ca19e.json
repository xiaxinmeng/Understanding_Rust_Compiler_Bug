{"sha": "a38958b8d94984ef15f27d808ac82279191ca19e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzODk1OGI4ZDk0OTg0ZWYxNWYyN2Q4MDhhYzgyMjc5MTkxY2ExOWU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-11T19:27:33Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-11T19:27:33Z"}, "message": "Fix `unsugar_range` with `..`", "tree": {"sha": "c333e116abd18b739b7a37cdf87109888854ed70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c333e116abd18b739b7a37cdf87109888854ed70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38958b8d94984ef15f27d808ac82279191ca19e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38958b8d94984ef15f27d808ac82279191ca19e", "html_url": "https://github.com/rust-lang/rust/commit/a38958b8d94984ef15f27d808ac82279191ca19e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38958b8d94984ef15f27d808ac82279191ca19e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f112b1b8a42f2ceacb373bbb09b29d55523f7fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f112b1b8a42f2ceacb373bbb09b29d55523f7fe", "html_url": "https://github.com/rust-lang/rust/commit/3f112b1b8a42f2ceacb373bbb09b29d55523f7fe"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "625e8da197d573b2c93a14e44ae622a32b5d6c2e", "filename": "src/utils/mod.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a38958b8d94984ef15f27d808ac82279191ca19e/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38958b8d94984ef15f27d808ac82279191ca19e/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=a38958b8d94984ef15f27d808ac82279191ca19e", "patch": "@@ -681,6 +681,7 @@ pub fn camel_case_from(s: &str) -> usize {\n }\n \n /// Represents a range akin to `ast::ExprKind::Range`.\n+#[derive(Debug, Copy, Clone)]\n pub struct UnsugaredRange<'a> {\n     pub start: Option<&'a Expr>,\n     pub end: Option<&'a Expr>,\n@@ -711,24 +712,30 @@ pub fn unsugar_range(expr: &Expr) -> Option<UnsugaredRange> {\n         Some(unwrap_unstable(expr))\n     }\n \n-    if let ExprStruct(ref path, ref fields, None) = unwrap_unstable(&expr).node {\n-        if match_path(path, &RANGE_FROM_PATH) {\n-            Some(UnsugaredRange { start: get_field(\"start\", fields), end: None, limits: RangeLimits::HalfOpen })\n-        } else if match_path(path, &RANGE_FULL_PATH) {\n-            Some(UnsugaredRange { start: None, end: None, limits: RangeLimits::HalfOpen })\n-        } else if match_path(path, &RANGE_INCLUSIVE_NON_EMPTY_PATH) {\n-            Some(UnsugaredRange { start: get_field(\"start\", fields), end: get_field(\"end\", fields), limits: RangeLimits::Closed })\n-        } else if match_path(path, &RANGE_PATH) {\n-            Some(UnsugaredRange { start: get_field(\"start\", fields), end: get_field(\"end\", fields), limits: RangeLimits::HalfOpen })\n-        } else if match_path(path, &RANGE_TO_INCLUSIVE_PATH) {\n-            Some(UnsugaredRange { start: None, end: get_field(\"end\", fields), limits: RangeLimits::Closed })\n-        } else if match_path(path, &RANGE_TO_PATH) {\n-            Some(UnsugaredRange { start: None, end: get_field(\"end\", fields), limits: RangeLimits::HalfOpen })\n-        } else {\n-            None\n+    match unwrap_unstable(&expr).node {\n+        ExprPath(None, ref path) => {\n+            if match_path(path, &RANGE_FULL_PATH) {\n+                Some(UnsugaredRange { start: None, end: None, limits: RangeLimits::HalfOpen })\n+            } else {\n+                None\n+            }\n         }\n-    } else {\n-        None\n+        ExprStruct(ref path, ref fields, None) => {\n+            if match_path(path, &RANGE_FROM_PATH) {\n+                Some(UnsugaredRange { start: get_field(\"start\", fields), end: None, limits: RangeLimits::HalfOpen })\n+            } else if match_path(path, &RANGE_INCLUSIVE_NON_EMPTY_PATH) {\n+                Some(UnsugaredRange { start: get_field(\"start\", fields), end: get_field(\"end\", fields), limits: RangeLimits::Closed })\n+            } else if match_path(path, &RANGE_PATH) {\n+                Some(UnsugaredRange { start: get_field(\"start\", fields), end: get_field(\"end\", fields), limits: RangeLimits::HalfOpen })\n+            } else if match_path(path, &RANGE_TO_INCLUSIVE_PATH) {\n+                Some(UnsugaredRange { start: None, end: get_field(\"end\", fields), limits: RangeLimits::Closed })\n+            } else if match_path(path, &RANGE_TO_PATH) {\n+                Some(UnsugaredRange { start: None, end: get_field(\"end\", fields), limits: RangeLimits::HalfOpen })\n+            } else {\n+                None\n+            }\n+        }\n+        _ => None,\n     }\n }\n "}]}