{"sha": "752d4419a060e007548cf56f85ff864a13589567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MmQ0NDE5YTA2MGUwMDc1NDhjZjU2Zjg1ZmY4NjRhMTM1ODk1Njc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-11T19:33:40Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-11T22:25:04Z"}, "message": "Refactor `get_ident_interner` -> `with_ident_interner`.", "tree": {"sha": "ea4dc19e713a1e4ec99ed0992462c908f56bf064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4dc19e713a1e4ec99ed0992462c908f56bf064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752d4419a060e007548cf56f85ff864a13589567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752d4419a060e007548cf56f85ff864a13589567", "html_url": "https://github.com/rust-lang/rust/commit/752d4419a060e007548cf56f85ff864a13589567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752d4419a060e007548cf56f85ff864a13589567/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e2845230ffeb013814c9bab08c7fe033410f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e2845230ffeb013814c9bab08c7fe033410f03", "html_url": "https://github.com/rust-lang/rust/commit/70e2845230ffeb013814c9bab08c7fe033410f03"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "ba59c2afc769d3e5112fa436f2c725047ea76173", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752d4419a060e007548cf56f85ff864a13589567/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752d4419a060e007548cf56f85ff864a13589567/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=752d4419a060e007548cf56f85ff864a13589567", "patch": "@@ -211,7 +211,7 @@ pub fn compile_input(sess: &Session,\n             }\n \n             // Discard interned strings as they are no longer required.\n-            token::get_ident_interner().clear();\n+            token::clear_ident_interner();\n \n             Ok((outputs, trans))\n         })??\n@@ -480,7 +480,7 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n                                input: &Input)\n                                -> PResult<'a, ast::Crate> {\n     // These may be left in an incoherent state after a previous compile.\n-    // `clear_tables` and `get_ident_interner().clear()` can be used to free\n+    // `clear_tables` and `clear_ident_interner` can be used to free\n     // memory, but they do not restore the initial state.\n     syntax::ext::mtwt::reset_tables();\n     token::reset_ident_interner();"}, {"sha": "3f5c9a6d3bd83724637bd350a38846d4d60efce5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752d4419a060e007548cf56f85ff864a13589567/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752d4419a060e007548cf56f85ff864a13589567/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=752d4419a060e007548cf56f85ff864a13589567", "patch": "@@ -442,7 +442,7 @@ pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,\n                                   struct_field_family_to_visibility(ff))\n         }).chain(reader::tagged_docs(doc, tag_item_unnamed_field).map(|f| {\n             let ff = item_family(f);\n-            let name = token::get_ident_interner().intern(index.to_string());\n+            let name = token::with_ident_interner(|interner| interner.intern(index.to_string()));\n             index += 1;\n             ty::FieldDefData::new(item_def_id(f, cdata), name,\n                                   struct_field_family_to_visibility(ff))\n@@ -1147,7 +1147,7 @@ pub fn get_struct_field_names(cdata: Cmd, id: DefIndex) -> Vec<ast::Name> {\n     reader::tagged_docs(item, tag_item_field).map(|an_item| {\n         item_name(an_item)\n     }).chain(reader::tagged_docs(item, tag_item_unnamed_field).map(|_| {\n-        let name = token::get_ident_interner().intern(index.to_string());\n+        let name = token::with_ident_interner(|interner| interner.intern(index.to_string()));\n         index += 1;\n         name\n     })).collect()"}, {"sha": "4729a9adcec6845d9ad53973c8f067544258aa22", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/752d4419a060e007548cf56f85ff864a13589567/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752d4419a060e007548cf56f85ff864a13589567/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=752d4419a060e007548cf56f85ff864a13589567", "patch": "@@ -31,7 +31,6 @@ use rustc::ty::subst;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{self, NodeId};\n use syntax::{attr,errors};\n-use syntax::parse::token;\n use type_of;\n use glue;\n use abi::{Abi, FnType};\n@@ -562,8 +561,8 @@ fn push_type_params<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     for projection in projections {\n         let projection = projection.skip_binder();\n-        let name = token::get_ident_interner().get(projection.projection_ty.item_name);\n-        output.push_str(&name[..]);\n+        let name = &projection.projection_ty.item_name.as_str();\n+        output.push_str(name);\n         output.push_str(\"=\");\n         push_unique_type_name(tcx, projection.ty, output);\n         output.push_str(\", \");"}, {"sha": "c3908118284756ba6b0a9a9998cb5a19933a7210", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/752d4419a060e007548cf56f85ff864a13589567/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752d4419a060e007548cf56f85ff864a13589567/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=752d4419a060e007548cf56f85ff864a13589567", "patch": "@@ -477,17 +477,20 @@ pub type IdentInterner = Interner;\n // if an interner exists in TLS, return it. Otherwise, prepare a\n // fresh one.\n // FIXME(eddyb) #8726 This should probably use a thread-local reference.\n-pub fn get_ident_interner() -> Rc<IdentInterner> {\n-    thread_local!(static KEY: Rc<::parse::token::IdentInterner> = {\n-        Rc::new(mk_fresh_ident_interner())\n+pub fn with_ident_interner<T, F: FnOnce(&IdentInterner) -> T>(f: F) -> T {\n+    thread_local!(static KEY: IdentInterner = {\n+        mk_fresh_ident_interner()\n     });\n-    KEY.with(|k| k.clone())\n+    KEY.with(f)\n }\n \n /// Reset the ident interner to its initial state.\n pub fn reset_ident_interner() {\n-    let interner = get_ident_interner();\n-    interner.reset(mk_fresh_ident_interner());\n+    with_ident_interner(|interner| interner.reset(mk_fresh_ident_interner()));\n+}\n+\n+pub fn clear_ident_interner() {\n+    with_ident_interner(|interner| interner.clear());\n }\n \n /// Represents a string stored in the thread-local interner. Because the\n@@ -521,8 +524,7 @@ impl InternedString {\n \n     #[inline]\n     pub fn new_from_name(name: ast::Name) -> InternedString {\n-        let interner = get_ident_interner();\n-        InternedString::new_from_rc_str(interner.get(name))\n+        with_ident_interner(|interner| InternedString::new_from_rc_str(interner.get(name)))\n     }\n }\n \n@@ -610,13 +612,13 @@ pub fn intern_and_get_ident(s: &str) -> InternedString {\n /// Maps a string to its interned representation.\n #[inline]\n pub fn intern(s: &str) -> ast::Name {\n-    get_ident_interner().intern(s)\n+    with_ident_interner(|interner| interner.intern(s))\n }\n \n /// gensym's a new usize, using the current interner.\n #[inline]\n pub fn gensym(s: &str) -> ast::Name {\n-    get_ident_interner().gensym(s)\n+    with_ident_interner(|interner| interner.gensym(s))\n }\n \n /// Maps a string to an identifier with an empty syntax context.\n@@ -635,8 +637,7 @@ pub fn gensym_ident(s: &str) -> ast::Ident {\n // note that this guarantees that str_ptr_eq(ident_to_string(src),interner_get(fresh_name(src)));\n // that is, that the new name and the old one are connected to ptr_eq strings.\n pub fn fresh_name(src: ast::Ident) -> ast::Name {\n-    let interner = get_ident_interner();\n-    interner.gensym_copy(src.name)\n+    with_ident_interner(|interner| interner.gensym_copy(src.name))\n     // following: debug version. Could work in final except that it's incompatible with\n     // good error messages and uses of struct names in ambiguous could-be-binding\n     // locations. Also definitely destroys the guarantee given above about ptr_eq."}]}