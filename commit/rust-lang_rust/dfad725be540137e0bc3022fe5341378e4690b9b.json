{"sha": "dfad725be540137e0bc3022fe5341378e4690b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYWQ3MjViZTU0MDEzN2UwYmMzMDIyZmU1MzQxMzc4ZTQ2OTBiOWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T08:26:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T18:43:09Z"}, "message": "Recover 'for ( $pat in $expr ) $block'.", "tree": {"sha": "f8b4f5d3561be6ae57395dabea7b244f1e5a8b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b4f5d3561be6ae57395dabea7b244f1e5a8b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfad725be540137e0bc3022fe5341378e4690b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfad725be540137e0bc3022fe5341378e4690b9b", "html_url": "https://github.com/rust-lang/rust/commit/dfad725be540137e0bc3022fe5341378e4690b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfad725be540137e0bc3022fe5341378e4690b9b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "023525dbda35748a10713471b948974b68a1c2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/023525dbda35748a10713471b948974b68a1c2cc", "html_url": "https://github.com/rust-lang/rust/commit/023525dbda35748a10713471b948974b68a1c2cc"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "e9dcfa81343d9035138243929e7473151bbd7839", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=dfad725be540137e0bc3022fe5341378e4690b9b", "patch": "@@ -923,6 +923,50 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Recover a situation like `for ( $pat in $expr )`\n+    /// and suggest writing `for $pat in $expr` instead.\n+    ///\n+    /// This should be called before parsing the `$block`.\n+    crate fn recover_parens_around_for_head(\n+        &mut self,\n+        pat: P<Pat>,\n+        expr: &Expr,\n+        begin_paren: Option<Span>,\n+    ) -> P<Pat> {\n+        match (&self.token.kind, begin_paren) {\n+            (token::CloseDelim(token::Paren), Some(begin_par_sp)) => {\n+                self.bump();\n+\n+                let pat_str = self\n+                    .sess\n+                    .source_map()\n+                    // Remove the `(` from the span of the pattern:\n+                    .span_to_snippet(pat.span.trim_start(begin_par_sp).unwrap())\n+                    .unwrap_or_else(|_| pprust::pat_to_string(&pat));\n+\n+                self.struct_span_err(self.prev_span, \"unexpected closing `)`\")\n+                    .span_label(begin_par_sp, \"opening `(`\")\n+                    .span_suggestion(\n+                        begin_par_sp.to(self.prev_span),\n+                        \"remove parenthesis in `for` loop\",\n+                        format!(\"{} in {}\", pat_str, pprust::expr_to_string(&expr)),\n+                        // With e.g. `for (x) in y)` this would replace `(x) in y)`\n+                        // with `x) in y)` which is syntactically invalid.\n+                        // However, this is prevented before we get here.\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+\n+                // Unwrap `(pat)` into `pat` to avoid the `unused_parens` lint.\n+                pat.and_then(|pat| match pat.node {\n+                    PatKind::Paren(pat) => pat,\n+                    _ => P(pat),\n+                })\n+            }\n+            _ => pat,\n+        }\n+    }\n+\n     crate fn could_ascription_be_path(&self, node: &ast::ExprKind) -> bool {\n         self.token.is_ident() &&\n             if let ast::ExprKind::Path(..) = node { true } else { false } &&"}, {"sha": "42030acf9df8730168f690b1d20e4b08afbfb975", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dfad725be540137e0bc3022fe5341378e4690b9b", "patch": "@@ -3275,6 +3275,14 @@ impl<'a> Parser<'a> {\n                           mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n \n+        // Record whether we are about to parse `for (`.\n+        // This is used below for recovery in case of `for ( $stuff ) $block`\n+        // in which case we will suggest `for $stuff $block`.\n+        let begin_paren = match self.token.kind {\n+            token::OpenDelim(token::Paren) => Some(self.token.span),\n+            _ => None,\n+        };\n+\n         let pat = self.parse_top_level_pat()?;\n         if !self.eat_keyword(kw::In) {\n             let in_span = self.prev_span.between(self.token.span);\n@@ -3290,6 +3298,9 @@ impl<'a> Parser<'a> {\n         let in_span = self.prev_span;\n         self.check_for_for_in_in_typo(in_span);\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+\n+        let pat = self.recover_parens_around_for_head(pat, &expr, begin_paren);\n+\n         let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n "}, {"sha": "e6c59fcf22dea3a04b8101970db9a995b9a78df8", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.rs?ref=dfad725be540137e0bc3022fe5341378e4690b9b", "patch": "@@ -0,0 +1,15 @@\n+// Here we test that the parser is able to recover in a situation like\n+// `for ( $pat in $expr )` since that is familiar syntax in other languages.\n+// Instead we suggest that the user writes `for $pat in $expr`.\n+\n+#![deny(unused)] // Make sure we don't trigger `unused_parens`.\n+\n+fn main() {\n+    let vec = vec![1, 2, 3];\n+\n+    for ( elem in vec ) {\n+        //~^ ERROR expected one of `)`, `,`, or `@`, found `in`\n+        //~| ERROR unexpected closing `)`\n+        const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "c160e646c28b34821efdebbe8201008a8eaafca1", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfad725be540137e0bc3022fe5341378e4690b9b/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=dfad725be540137e0bc3022fe5341378e4690b9b", "patch": "@@ -0,0 +1,27 @@\n+error: expected one of `)`, `,`, or `@`, found `in`\n+  --> $DIR/recover-for-loop-parens-around-head.rs:10:16\n+   |\n+LL |     for ( elem in vec ) {\n+   |                ^^ expected one of `)`, `,`, or `@` here\n+\n+error: unexpected closing `)`\n+  --> $DIR/recover-for-loop-parens-around-head.rs:10:23\n+   |\n+LL |     for ( elem in vec ) {\n+   |         --------------^\n+   |         |\n+   |         opening `(`\n+   |         help: remove parenthesis in `for` loop: `elem in vec`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-for-loop-parens-around-head.rs:13:38\n+   |\n+LL |         const RECOVERY_WITNESS: () = 0;\n+   |                                      ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}