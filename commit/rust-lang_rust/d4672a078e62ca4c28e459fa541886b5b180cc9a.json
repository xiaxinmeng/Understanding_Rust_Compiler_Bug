{"sha": "d4672a078e62ca4c28e459fa541886b5b180cc9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NjcyYTA3OGU2MmNhNGMyOGU0NTlmYTU0MTg4NmI1YjE4MGNjOWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-26T21:18:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-26T21:37:29Z"}, "message": "libstd: Work around some metadata infelicities that are causing problems in resolve3, and remove an unused glob\n\nConflicts:\n\n\tsrc/libstd/net_tcp.rs\n\tsrc/libstd/par.rs", "tree": {"sha": "506a1706f8d58c06b6d184c7c9eef12bc17dfa4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506a1706f8d58c06b6d184c7c9eef12bc17dfa4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4672a078e62ca4c28e459fa541886b5b180cc9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4672a078e62ca4c28e459fa541886b5b180cc9a", "html_url": "https://github.com/rust-lang/rust/commit/d4672a078e62ca4c28e459fa541886b5b180cc9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4672a078e62ca4c28e459fa541886b5b180cc9a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd2394ff9ccff11950d0830aaeb74f4fabb7d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd2394ff9ccff11950d0830aaeb74f4fabb7d9c", "html_url": "https://github.com/rust-lang/rust/commit/ccd2394ff9ccff11950d0830aaeb74f4fabb7d9c"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "8c637f0089ecca5faabf269b08a6db0b8f23d65f", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4672a078e62ca4c28e459fa541886b5b180cc9a/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4672a078e62ca4c28e459fa541886b5b180cc9a/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=d4672a078e62ca4c28e459fa541886b5b180cc9a", "patch": "@@ -6,6 +6,7 @@ import ip = net_ip;\n import uv::iotask;\n import uv::iotask::iotask;\n import comm::methods;\n+import future_spawn = future::spawn;\n import future::future;\n import result::{result,err,ok,extensions};\n \n@@ -248,9 +249,9 @@ A `future` value that, once the `write` operation completes, resolves to a\n value as the `err` variant\n \"]\n fn write_future(sock: tcp_socket, raw_write_data: [u8]/~)\n-    -> future::future<result::result<(), tcp_err_data>> unsafe {\n+    -> future<result::result<(), tcp_err_data>> unsafe {\n     let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n-    future::spawn {||\n+    future_spawn {||\n         write_common_impl(socket_data_ptr, raw_write_data)\n     }\n }\n@@ -337,9 +338,9 @@ Otherwise, use the blocking `tcp::read` function instead.\n read attempt. Pass `0u` to wait indefinitely\n \"]\n fn read_future(sock: tcp_socket, timeout_msecs: uint)\n-    -> future::future<result::result<[u8]/~,tcp_err_data>> {\n+    -> future<result::result<[u8]/~,tcp_err_data>> {\n     let socket_data = ptr::addr_of(*(sock.socket_data));\n-    future::spawn {||\n+    future_spawn {||\n         read_common_impl(socket_data, timeout_msecs)\n     }\n }\n@@ -802,15 +803,15 @@ impl sock_methods for tcp_socket {\n         read(self, timeout_msecs)\n     }\n     fn read_future(timeout_msecs: uint) ->\n-        future::future<result::result<[u8]/~, tcp_err_data>> {\n+        future<result::result<[u8]/~, tcp_err_data>> {\n         read_future(self, timeout_msecs)\n     }\n     fn write(raw_write_data: [u8]/~)\n         -> result::result<(), tcp_err_data> {\n         write(self, raw_write_data)\n     }\n     fn write_future(raw_write_data: [u8]/~)\n-        -> future::future<result::result<(), tcp_err_data>> {\n+        -> future<result::result<(), tcp_err_data>> {\n         write_future(self, raw_write_data)\n     }\n }"}, {"sha": "83ccdb5c3aafffbc14623396396b949b45811911", "filename": "src/libstd/par.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4672a078e62ca4c28e459fa541886b5b180cc9a/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4672a078e62ca4c28e459fa541886b5b180cc9a/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=d4672a078e62ca4c28e459fa541886b5b180cc9a", "patch": "@@ -2,6 +2,7 @@ import comm::port;\n import comm::chan;\n import comm::send;\n import comm::recv;\n+import future_spawn = future::spawn;\n import future::future;\n \n export map, mapi, alli, any, mapi_factory;\n@@ -42,7 +43,7 @@ fn map_slices<A: copy send, B: copy send>(\n             // FIXME: why is the ::<A, ()> annotation required here? (#2617)\n             vec::unpack_slice::<A, ()>(xs) {|p, _len|\n                 let f = f();\n-                let f = future::spawn() {|copy base|\n+                let f = future_spawn() {|copy base|\n                     unsafe {\n                         let len = end - base;\n                         let slice = (ptr::offset(p, base),"}]}