{"sha": "eb727a8faa08557d894506e2f95f2bfdc4996490", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzI3YThmYWEwODU1N2Q4OTQ1MDZlMmY5NWYyYmZkYzQ5OTY0OTA=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-03T01:36:32Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:45:55Z"}, "message": "Add TerminatorKind::if_ convenience constructor\n\nConstructs a TerminatorKind::SwitchInt for an equivalent conditional true-false branch.", "tree": {"sha": "7a9d8f2c8b154868b958f7fbb405734e1e16e104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a9d8f2c8b154868b958f7fbb405734e1e16e104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb727a8faa08557d894506e2f95f2bfdc4996490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb727a8faa08557d894506e2f95f2bfdc4996490", "html_url": "https://github.com/rust-lang/rust/commit/eb727a8faa08557d894506e2f95f2bfdc4996490", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb727a8faa08557d894506e2f95f2bfdc4996490/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b7b6218565f50a682d4367714066c0c4e7517c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b7b6218565f50a682d4367714066c0c4e7517c", "html_url": "https://github.com/rust-lang/rust/commit/a8b7b6218565f50a682d4367714066c0c4e7517c"}], "stats": {"total": 100, "additions": 38, "deletions": 62}, "files": [{"sha": "d8212807eb2771af21ad235020cbf64127765a8b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=eb727a8faa08557d894506e2f95f2bfdc4996490", "patch": "@@ -446,9 +446,6 @@ pub struct Terminator<'tcx> {\n     pub kind: TerminatorKind<'tcx>\n }\n \n-/// For use in SwitchInt, for switching on bools.\n-pub static BOOL_SWITCH_FALSE: Cow<'static, [ConstInt]> = Cow::Borrowed(&[ConstInt::Infer(0)]);\n-\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum TerminatorKind<'tcx> {\n     /// block should have one successor in the graph; we jump there\n@@ -543,6 +540,17 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n+    pub fn if_<'a, 'gcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n+                         t: BasicBlock, f: BasicBlock) -> TerminatorKind<'tcx> {\n+        static BOOL_SWITCH_FALSE: &'static [ConstInt] = &[ConstInt::Infer(0)];\n+        TerminatorKind::SwitchInt {\n+            discr: cond,\n+            switch_ty: tcx.types.bool,\n+            values: From::from(BOOL_SWITCH_FALSE),\n+            targets: vec![f, t],\n+        }\n+    }\n+\n     pub fn successors(&self) -> Cow<[BasicBlock]> {\n         use self::TerminatorKind::*;\n         match *self {"}, {"sha": "d7ffe538c24560196094faa33b0a4cadc17763fc", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=eb727a8faa08557d894506e2f95f2bfdc4996490", "patch": "@@ -842,13 +842,8 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             (true, false) => on_set,\n             (true, true) => {\n                 let flag = self.drop_flag(c.path).unwrap();\n-                let boolty = self.tcx.types.bool;\n-                self.new_block(c, is_cleanup, TerminatorKind::SwitchInt {\n-                    discr: Operand::Consume(flag),\n-                    switch_ty: boolty,\n-                    values: BOOL_SWITCH_FALSE.clone(),\n-                    targets: vec![on_unset, on_set],\n-                })\n+                let term = TerminatorKind::if_(self.tcx, Operand::Consume(flag), on_set, on_unset);\n+                self.new_block(c, is_cleanup, term)\n             }\n         }\n     }"}, {"sha": "35841c2cbdf01f4e8257edc563c80b83715dc488", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=eb727a8faa08557d894506e2f95f2bfdc4996490", "patch": "@@ -69,12 +69,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 let mut then_block = this.cfg.start_new_block();\n                 let mut else_block = this.cfg.start_new_block();\n-                this.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n-                    discr: operand,\n-                    switch_ty: this.hir.bool_ty(),\n-                    values: BOOL_SWITCH_FALSE.clone(),\n-                    targets: vec![else_block, then_block],\n-                });\n+                let term = TerminatorKind::if_(this.hir.tcx(), operand, then_block, else_block);\n+                this.cfg.terminate(block, source_info, term);\n \n                 unpack!(then_block = this.into(destination, then_block, then_expr));\n                 else_block = if let Some(else_expr) = else_expr {\n@@ -113,23 +109,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 let lhs = unpack!(block = this.as_operand(block, lhs));\n                 let blocks = match op {\n-                    LogicalOp::And => vec![false_block, else_block],\n-                    LogicalOp::Or => vec![else_block, true_block],\n+                    LogicalOp::And => (else_block, false_block),\n+                    LogicalOp::Or => (true_block, else_block),\n                 };\n-                this.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n-                    discr: lhs,\n-                    switch_ty: this.hir.bool_ty(),\n-                    values: BOOL_SWITCH_FALSE.clone(),\n-                    targets: blocks,\n-                });\n+                let term = TerminatorKind::if_(this.hir.tcx(), lhs, blocks.0, blocks.1);\n+                this.cfg.terminate(block, source_info, term);\n \n                 let rhs = unpack!(else_block = this.as_operand(else_block, rhs));\n-                this.cfg.terminate(else_block, source_info, TerminatorKind::SwitchInt {\n-                    discr: rhs,\n-                    switch_ty: this.hir.bool_ty(),\n-                    values: BOOL_SWITCH_FALSE.clone(),\n-                    targets: vec![false_block, true_block],\n-                });\n+                let term = TerminatorKind::if_(this.hir.tcx(), rhs, true_block, false_block);\n+                this.cfg.terminate(else_block, source_info, term);\n \n                 this.cfg.push_assign_constant(\n                     true_block, source_info, destination,\n@@ -187,13 +175,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             let cond = unpack!(\n                                 loop_block_end = this.as_operand(loop_block, cond_expr));\n                             body_block = this.cfg.start_new_block();\n-                            this.cfg.terminate(loop_block_end, source_info,\n-                                               TerminatorKind::SwitchInt {\n-                                                   discr: cond,\n-                                                   switch_ty: this.hir.bool_ty(),\n-                                                   values: BOOL_SWITCH_FALSE.clone(),\n-                                                   targets: vec![exit_block, body_block],\n-                                               });\n+                            let term = TerminatorKind::if_(this.hir.tcx(), cond,\n+                                                           body_block, exit_block);\n+                            this.cfg.terminate(loop_block_end, source_info, term);\n \n                             // if the test is false, there's no `break` to assign `destination`, so\n                             // we have to do it; this overwrites any `break`-assigned value but it's"}, {"sha": "a28bc5d6ce36db5b99c59224edf870d04a0e8223", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=eb727a8faa08557d894506e2f95f2bfdc4996490", "patch": "@@ -672,12 +672,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let source_info = self.source_info(guard.span);\n             let cond = unpack!(block = self.as_operand(block, guard));\n             let otherwise = self.cfg.start_new_block();\n-            self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n-                discr: cond,\n-                switch_ty: self.hir.bool_ty(),\n-                values: BOOL_SWITCH_FALSE.clone(),\n-                targets: vec![otherwise, arm_block],\n-            });\n+            self.cfg.terminate(block, source_info,\n+                               TerminatorKind::if_(self.hir.tcx(), cond, arm_block, otherwise));\n             Some(otherwise)\n         } else {\n             let source_info = self.source_info(candidate.span);"}, {"sha": "7e47e173c51c5906802f27a6ecf347baaabd705e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb727a8faa08557d894506e2f95f2bfdc4996490/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=eb727a8faa08557d894506e2f95f2bfdc4996490", "patch": "@@ -228,6 +228,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             TestKind::SwitchInt { switch_ty, ref options, indices: _ } => {\n                 let (values, targets, ret) = if switch_ty.sty == ty::TyBool {\n+                    static BOOL_SWITCH_FALSE: &'static [ConstInt] = &[ConstInt::Infer(0)];\n                     assert!(options.len() > 0 && options.len() <= 2);\n                     let (true_bb, false_bb) = (self.cfg.start_new_block(),\n                                                self.cfg.start_new_block());\n@@ -236,7 +237,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         &ConstVal::Bool(false) => vec![false_bb, true_bb],\n                         v => span_bug!(test.span, \"expected boolean value but got {:?}\", v)\n                     };\n-                    (BOOL_SWITCH_FALSE.clone(), vec![false_bb, true_bb], ret)\n+                    (From::from(BOOL_SWITCH_FALSE), vec![false_bb, true_bb], ret)\n                 } else {\n                     // The switch may be inexhaustive so we\n                     // add a catch all block\n@@ -323,12 +324,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                     // check the result\n                     let block = self.cfg.start_new_block();\n-                    self.cfg.terminate(eq_block, source_info, TerminatorKind::SwitchInt {\n-                        discr: Operand::Consume(eq_result),\n-                        switch_ty: self.hir.bool_ty(),\n-                        values: BOOL_SWITCH_FALSE.clone(),\n-                        targets: vec![fail, block],\n-                    });\n+                    self.cfg.terminate(eq_block, source_info,\n+                                       TerminatorKind::if_(self.hir.tcx(),\n+                                                           Operand::Consume(eq_result),\n+                                                           block, fail));\n                     vec![block, fail]\n                 } else {\n                     let block = self.compare(block, fail, test.span, BinOp::Eq, expect, val);\n@@ -372,12 +371,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // branch based on result\n                 let (false_bb, true_bb) = (self.cfg.start_new_block(),\n                                            self.cfg.start_new_block());\n-                self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n-                    discr: Operand::Consume(result),\n-                    switch_ty: self.hir.bool_ty(),\n-                    values: BOOL_SWITCH_FALSE.clone(),\n-                    targets: vec![false_bb, true_bb],\n-                });\n+                self.cfg.terminate(block, source_info,\n+                                   TerminatorKind::if_(self.hir.tcx(), Operand::Consume(result),\n+                                                       true_bb, false_bb));\n                 vec![true_bb, false_bb]\n             }\n         }\n@@ -400,12 +396,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         // branch based on result\n         let target_block = self.cfg.start_new_block();\n-        self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n-            discr: Operand::Consume(result),\n-            switch_ty: self.hir.bool_ty(),\n-            values: BOOL_SWITCH_FALSE.clone(),\n-            targets: vec![fail_block, target_block]\n-        });\n+        self.cfg.terminate(block, source_info,\n+                           TerminatorKind::if_(self.hir.tcx(), Operand::Consume(result),\n+                                               target_block, fail_block));\n         target_block\n     }\n "}]}