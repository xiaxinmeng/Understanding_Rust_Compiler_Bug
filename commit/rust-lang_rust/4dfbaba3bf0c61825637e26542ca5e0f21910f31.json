{"sha": "4dfbaba3bf0c61825637e26542ca5e0f21910f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZmJhYmEzYmYwYzYxODI1NjM3ZTI2NTQyY2E1ZTBmMjE5MTBmMzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T01:59:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T01:59:49Z"}, "message": "Rollup merge of #64141 - nnethercote:minimize-LocalInternedString, r=petrochenkov\n\nMinimize uses of `LocalInternedString`\n\n`LocalInternedString` is described as \"An alternative to `Symbol` and `InternedString`, useful when the chars within the symbol need to be accessed. It is best used for temporary values.\"\n\nThis PR makes the code match that comment, by removing all non-local uses of `LocalInternedString`. This allows the removal of a number of operations on `LocalInternedString` and a couple of uses of `unsafe`.", "tree": {"sha": "11faedeffb5962f0e97b3f2cfb4ae6896abb9b47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11faedeffb5962f0e97b3f2cfb4ae6896abb9b47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dfbaba3bf0c61825637e26542ca5e0f21910f31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcGwVCRBK7hj4Ov3rIwAAdHIIAF9+4KgXz3R14JiyU+1yxwGo\nqIwt5YPp1jPjbnix2mRk0xiT+3QAbd9+BWrLig2CP0AsCLGSXGHcw20E/UPXTrQx\n4Kd7yZyBRONOFtn7BYfO9g9oK6GM4zqTNwrTTILIMCwIMnA19qi16WMmgSZnCPaB\nw5zW/ex0upBebl960xKWuJ/qwubaSIkF/HGRq8fNFO0YHLFN+bHjfhFJr9HlQ7cQ\n7ArLXTGR/gxTVF0Sj8HxD0M8MvNERHqLPWeLol4ell7NwtVfzjshynhC94+PEeMt\nEyZhbW9J/QvgkS19VzJz0dp+ql4tU08eCU4LcPBBSfOczP+T1wEFXeeWsCOfu/E=\n=lXxK\n-----END PGP SIGNATURE-----\n", "payload": "tree 11faedeffb5962f0e97b3f2cfb4ae6896abb9b47\nparent 57ffc8331234cb93c1a1a3d981b5a124d7c93b5b\nparent cc17b1bc3c877c5cf9a2f5de58535477607972f2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567648789 +0200\ncommitter GitHub <noreply@github.com> 1567648789 +0200\n\nRollup merge of #64141 - nnethercote:minimize-LocalInternedString, r=petrochenkov\n\nMinimize uses of `LocalInternedString`\n\n`LocalInternedString` is described as \"An alternative to `Symbol` and `InternedString`, useful when the chars within the symbol need to be accessed. It is best used for temporary values.\"\n\nThis PR makes the code match that comment, by removing all non-local uses of `LocalInternedString`. This allows the removal of a number of operations on `LocalInternedString` and a couple of uses of `unsafe`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dfbaba3bf0c61825637e26542ca5e0f21910f31", "html_url": "https://github.com/rust-lang/rust/commit/4dfbaba3bf0c61825637e26542ca5e0f21910f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dfbaba3bf0c61825637e26542ca5e0f21910f31/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b", "html_url": "https://github.com/rust-lang/rust/commit/57ffc8331234cb93c1a1a3d981b5a124d7c93b5b"}, {"sha": "cc17b1bc3c877c5cf9a2f5de58535477607972f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc17b1bc3c877c5cf9a2f5de58535477607972f2", "html_url": "https://github.com/rust-lang/rust/commit/cc17b1bc3c877c5cf9a2f5de58535477607972f2"}], "stats": {"total": 219, "additions": 86, "deletions": 133}, "files": [{"sha": "b8bd1d73fc28b4e12e786aea303dc12430ea2d2c", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             });\n \n         let mut upstream_crates: Vec<_> = cstore.crates_untracked().iter().map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum).as_str();\n+            let name = cstore.crate_name_untracked(cnum).as_interned_str();\n             let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n             let hash = cstore.crate_hash_untracked(cnum);\n             (name, disambiguator, hash)"}, {"sha": "ddfca3a4cfb725a0ec256fdd807358731552f056", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::{InternedString, LocalInternedString};\n+use syntax::symbol::InternedString;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -39,27 +39,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n-    #[inline]\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let s: &str = &**self;\n-        s.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n-    type KeyType = LocalInternedString;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          _: &StableHashingContext<'a>)\n-                          -> LocalInternedString {\n-        self.clone()\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "77df93080cd165cfeb9ea33870184163f4f92a0e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -33,7 +33,7 @@ use crate::util::common::time;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n+use syntax_pos::{MultiSpan, Span, symbol::Symbol};\n use errors::DiagnosticBuilder;\n use crate::hir;\n use crate::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -405,7 +405,7 @@ impl LintStore {\n     pub fn check_lint_name(\n         &self,\n         lint_name: &str,\n-        tool_name: Option<LocalInternedString>,\n+        tool_name: Option<Symbol>,\n     ) -> CheckLintNameResult<'_> {\n         let complete_name = if let Some(tool_name) = tool_name {\n             format!(\"{}::{}\", tool_name, lint_name)"}, {"sha": "cbc6dbdba7e6cc9716f29a7c2e8c295291c483ea", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -291,7 +291,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue;\n                     }\n \n-                    Some(tool_ident.as_str())\n+                    Some(tool_ident.name)\n                 } else {\n                     None\n                 };"}, {"sha": "5a988d9509e800ee8cb903b36810b8c218c638a3", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -9,10 +9,9 @@ use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n-use syntax_pos::symbol::LocalInternedString;\n \n #[derive(Clone, Debug)]\n-pub struct OnUnimplementedFormatString(LocalInternedString);\n+pub struct OnUnimplementedFormatString(Symbol);\n \n #[derive(Debug)]\n pub struct OnUnimplementedDirective {\n@@ -89,19 +88,19 @@ impl<'tcx> OnUnimplementedDirective {\n             if item.check_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n                     message = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, message_.as_str(), span)?);\n+                        tcx, trait_def_id, message_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::label) && label.is_none() {\n                 if let Some(label_) = item.value_str() {\n                     label = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, label_.as_str(), span)?);\n+                        tcx, trait_def_id, label_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::note) && note.is_none() {\n                 if let Some(note_) = item.value_str() {\n                     note = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, note_.as_str(), span)?);\n+                        tcx, trait_def_id, note_, span)?);\n                     continue;\n                 }\n             } else if item.check_name(sym::on) && is_root &&\n@@ -154,7 +153,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n-                    tcx, trait_def_id, value.as_str(), attr.span)?),\n+                    tcx, trait_def_id, value, attr.span)?),\n                 note: None,\n             }))\n         } else {\n@@ -218,7 +217,7 @@ impl<'tcx> OnUnimplementedFormatString {\n     fn try_parse(\n         tcx: TyCtxt<'tcx>,\n         trait_def_id: DefId,\n-        from: LocalInternedString,\n+        from: Symbol,\n         err_sp: Span,\n     ) -> Result<Self, ErrorReported> {\n         let result = OnUnimplementedFormatString(from);\n@@ -234,7 +233,8 @@ impl<'tcx> OnUnimplementedFormatString {\n     ) -> Result<(), ErrorReported> {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n-        let parser = Parser::new(&self.0, None, vec![], false);\n+        let s = self.0.as_str();\n+        let parser = Parser::new(&s, None, vec![], false);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -294,7 +294,8 @@ impl<'tcx> OnUnimplementedFormatString {\n         }).collect::<FxHashMap<Symbol, String>>();\n         let empty_string = String::new();\n \n-        let parser = Parser::new(&self.0, None, vec![], false);\n+        let s = self.0.as_str();\n+        let parser = Parser::new(&s, None, vec![], false);\n         parser.map(|p|\n             match p {\n                 Piece::String(s) => s,"}, {"sha": "2da50f37409ae2a68433f11e86ff98628761442d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -46,7 +46,7 @@ use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::ExpnId;\n-use syntax::symbol::{kw, sym, Symbol, LocalInternedString, InternedString};\n+use syntax::symbol::{kw, sym, Symbol, InternedString};\n use syntax_pos::Span;\n \n use smallvec;\n@@ -3386,10 +3386,6 @@ impl SymbolName {\n             name: InternedString::intern(name)\n         }\n     }\n-\n-    pub fn as_str(&self) -> LocalInternedString {\n-        self.name.as_str()\n-    }\n }\n \n impl fmt::Display for SymbolName {"}, {"sha": "fc23ef1d47e5b63436e56cf7edb8fe8f267a98ae", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -5,7 +5,6 @@ use crate::context::CodegenCx;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use syntax::symbol::LocalInternedString;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind, RealPredicate};\n use rustc_codegen_ssa::MemFlags;\n use libc::{c_uint, c_char};\n@@ -24,6 +23,7 @@ use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n use std::iter::TrustedLen;\n+use syntax::symbol::Symbol;\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -1082,8 +1082,8 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n \n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "35d5107842d5b3464b2d7b6f8a86b6bffdb62f12", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -37,7 +37,7 @@ pub fn get_fn(\n         return llfn;\n     }\n \n-    let sym = tcx.symbol_name(instance).as_str();\n+    let sym = tcx.symbol_name(instance).name.as_str();\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n \n     // Create a fn pointer with the substituted signature."}, {"sha": "c337e35460e1829e0f0c9ebda938bf825ce2aab6", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -17,7 +17,7 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n \n use libc::{c_uint, c_char};\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::ast::Mutability;\n \n pub use crate::context::CodegenCx;\n@@ -122,17 +122,18 @@ impl CodegenCx<'ll, 'tcx> {\n \n     fn const_cstr(\n         &self,\n-        s: LocalInternedString,\n+        s: Symbol,\n         null_terminated: bool,\n     ) -> &'ll Value {\n         unsafe {\n             if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n                 return llval;\n             }\n \n+            let s_str = s.as_str();\n             let sc = llvm::LLVMConstStringInContext(self.llcx,\n-                                                    s.as_ptr() as *const c_char,\n-                                                    s.len() as c_uint,\n+                                                    s_str.as_ptr() as *const c_char,\n+                                                    s_str.len() as c_uint,\n                                                     !null_terminated as Bool);\n             let sym = self.generate_local_symbol_name(\"str\");\n             let g = self.define_global(&sym[..], self.val_ty(sc)).unwrap_or_else(||{\n@@ -147,8 +148,8 @@ impl CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    pub fn const_str_slice(&self, s: LocalInternedString) -> &'ll Value {\n-        let len = s.len();\n+    pub fn const_str_slice(&self, s: Symbol) -> &'ll Value {\n+        let len = s.as_str().len();\n         let cs = consts::ptrcast(self.const_cstr(s, false),\n             self.type_ptr_to(self.layout_of(self.tcx.mk_str()).llvm_type(self)));\n         self.const_fat_ptr(cs, self.const_usize(len as u64))"}, {"sha": "e71d1fc16924bb1ed966d99935c2b3114aa63059", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -11,12 +11,11 @@ use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n     Pointer, ErrorHandled, GlobalId};\n use rustc::mir::mono::MonoItem;\n use rustc::hir::Node;\n-use syntax_pos::Span;\n use rustc_target::abi::HasDataLayout;\n-use syntax::symbol::sym;\n-use syntax_pos::symbol::LocalInternedString;\n use rustc::ty::{self, Ty, Instance};\n use rustc_codegen_ssa::traits::*;\n+use syntax::symbol::{Symbol, sym};\n+use syntax_pos::Span;\n \n use rustc::ty::layout::{self, Size, Align, LayoutOf};\n \n@@ -122,10 +121,11 @@ fn check_and_apply_linkage(\n     cx: &CodegenCx<'ll, 'tcx>,\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n-    sym: LocalInternedString,\n+    sym: Symbol,\n     span: Span\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n+    let sym = sym.as_str();\n     if let Some(linkage) = attrs.linkage {\n         debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n \n@@ -221,7 +221,7 @@ impl CodegenCx<'ll, 'tcx> {\n                  def_id);\n \n         let ty = instance.ty(self.tcx);\n-        let sym = self.tcx.symbol_name(instance).as_str();\n+        let sym = self.tcx.symbol_name(instance).name.as_symbol();\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n \n@@ -232,11 +232,12 @@ impl CodegenCx<'ll, 'tcx> {\n                 Node::Item(&hir::Item {\n                     ref attrs, span, node: hir::ItemKind::Static(..), ..\n                 }) => {\n-                    if self.get_declared_value(&sym[..]).is_some() {\n+                    let sym_str = sym.as_str();\n+                    if self.get_declared_value(&sym_str).is_some() {\n                         span_bug!(span, \"Conflicting symbol names for static?\");\n                     }\n \n-                    let g = self.define_global(&sym[..], llty).unwrap();\n+                    let g = self.define_global(&sym_str, llty).unwrap();\n \n                     if !self.tcx.is_reachable_non_generic(def_id) {\n                         unsafe {"}, {"sha": "58ce97039099e7bc7dc0477a84e483d82ac6d268", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -29,7 +29,7 @@ use std::cell::{Cell, RefCell};\n use std::iter;\n use std::str;\n use std::sync::Arc;\n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax::source_map::{DUMMY_SP, Span};\n use crate::abi::Abi;\n \n@@ -52,7 +52,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, &'ll Value>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a Value holding a *T,"}, {"sha": "d0b607bd88ee4f9d5023b8d653d5b80b6768c694", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -2251,7 +2251,7 @@ pub fn create_global_var_metadata(\n         None\n     } else {\n         let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id));\n-        Some(SmallCStr::new(&linkage_name.as_str()))\n+        Some(SmallCStr::new(&linkage_name.name.as_str()))\n     };\n \n     let global_align = cx.align_of(variable_type);"}, {"sha": "cad2bcdc05fc948a491230f5bfd3ce1383ecf370", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -290,7 +290,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let scope_line = span_start(self, span).line;\n \n         let function_name = CString::new(name).unwrap();\n-        let linkage_name = SmallCStr::new(&linkage_name.as_str());\n+        let linkage_name = SmallCStr::new(&linkage_name.name.as_str());\n \n         let mut flags = DIFlags::FlagPrototyped;\n "}, {"sha": "7e700e6819426c2ba29170df616edd1dd6be74fb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -121,7 +121,7 @@ fn reachable_non_generics_provider(\n         })\n         .map(|def_id| {\n             let export_level = if special_runtime_crate {\n-                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n+                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).name.as_str();\n                 // We can probably do better here by just ensuring that\n                 // it has hidden visibility rather than public\n                 // visibility, as this is primarily here to ensure it's"}, {"sha": "134c321456b6cc9ddda02d2bafde2d9ef9579e42", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -14,7 +14,7 @@ use crate::traits::*;\n \n use std::borrow::Cow;\n \n-use syntax::symbol::LocalInternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::Pos;\n \n use super::{FunctionCx, LocalRef};\n@@ -397,7 +397,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Get the location information.\n         let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-        let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+        let filename = Symbol::intern(&loc.file.name.to_string());\n         let line = bx.const_u32(loc.line as u32);\n         let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n@@ -418,8 +418,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     vec![file_line_col, index, len])\n             }\n             _ => {\n-                let str = msg.description();\n-                let msg_str = LocalInternedString::intern(str);\n+                let msg_str = Symbol::intern(msg.description());\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,\n@@ -531,15 +530,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let layout = bx.layout_of(ty);\n             if layout.abi.is_uninhabited() {\n                 let loc = bx.sess().source_map().lookup_char_pos(span.lo());\n-                let filename = LocalInternedString::intern(&loc.file.name.to_string());\n+                let filename = Symbol::intern(&loc.file.name.to_string());\n                 let line = bx.const_u32(loc.line as u32);\n                 let col = bx.const_u32(loc.col.to_usize() as u32 + 1);\n \n                 let str = format!(\n                     \"Attempted to instantiate uninhabited type {}\",\n                     ty\n                 );\n-                let msg_str = LocalInternedString::intern(&str);\n+                let msg_str = Symbol::intern(&str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,"}, {"sha": "5801963c101ef1079dc773e837b7ca58c50fa656", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n \n-        let symbol_name = self.symbol_name(cx.tcx()).as_str();\n+        let symbol_name = self.symbol_name(cx.tcx()).name.as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n "}, {"sha": "73c4c053979173449661ba4e0714b330f2d2ed4f", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -1,5 +1,5 @@\n use super::BackendTypes;\n-use syntax_pos::symbol::LocalInternedString;\n+use syntax_pos::symbol::Symbol;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n \n@@ -12,8 +12,8 @@ pub trait StaticBuilderMethods: BackendTypes {\n     fn get_static(&mut self, def_id: DefId) -> Self::Value;\n     fn static_panic_msg(\n         &mut self,\n-        msg: Option<LocalInternedString>,\n-        filename: LocalInternedString,\n+        msg: Option<Symbol>,\n+        filename: Symbol,\n         line: Self::Value,\n         col: Self::Value,\n         kind: &str,"}, {"sha": "51269be4e9f409f25f5165939b858adb677a894a", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -40,7 +40,7 @@ impl SymbolNamesTest<'tcx> {\n                 let instance = Instance::mono(tcx, def_id);\n                 let mangled = self.tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", mangled));\n-                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.as_str()) {\n+                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.name.as_str()) {\n                     tcx.sess.span_err(attr.span, &format!(\"demangling({})\", demangling));\n                     tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n                 }"}, {"sha": "9f25e98052ec49934581b628002fc66d2a64fe17", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -336,7 +336,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let local = &self.body.local_decls[local_index];\n         match local.name {\n             Some(name) if !local.from_compiler_desugaring() => {\n-                buf.push_str(name.as_str().get());\n+                buf.push_str(&name.as_str());\n                 Ok(())\n             }\n             _ => Err(()),"}, {"sha": "c193911247e2bea5bb4219c1461214ab7476bf5d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -777,7 +777,7 @@ where\n             debug!(\"CodegenUnit {}:\", cgu.name());\n \n             for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).as_str();\n+                let symbol_name = mono_item.symbol_name(tcx).name.as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");"}, {"sha": "9644815f805d992191fcabcd024dfe95ff63ce4e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -19,7 +19,7 @@ use crate::astconv::AstConv as _;\n \n use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n-use syntax::symbol::{Symbol, LocalInternedString, kw, sym};\n+use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n use rustc::hir;\n@@ -1244,7 +1244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => {\n                 // prevent all specified fields from being suggested\n-                let skip_fields = skip_fields.iter().map(|ref x| x.ident.as_str());\n+                let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);\n                 if let Some(field_name) = Self::suggest_field_name(\n                     variant,\n                     &field.ident.as_str(),\n@@ -1288,11 +1288,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &str,\n-                          skip: Vec<LocalInternedString>)\n+                          skip: Vec<Symbol>)\n                           -> Option<Symbol> {\n         let names = variant.fields.iter().filter_map(|field| {\n             // ignore already set fields and private fields from non-local crates\n-            if skip.iter().any(|x| *x == field.ident.as_str()) ||\n+            if skip.iter().any(|&x| x == field.ident.name) ||\n                (!variant.def_id.is_local() && field.vis != Visibility::Public)\n             {\n                 None"}, {"sha": "3a4dc1f5a096bcfb546e65637abe6b2617df2043", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfbaba3bf0c61825637e26542ca5e0f21910f31/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4dfbaba3bf0c61825637e26542ca5e0f21910f31", "patch": "@@ -818,10 +818,14 @@ impl Ident {\n         with_interner(|interner| interner.is_gensymed(self.name))\n     }\n \n+    /// Convert the name to a `LocalInternedString`. This is a slowish\n+    /// operation because it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n \n+    /// Convert the name to an `InternedString`. This is a slowish operation\n+    /// because it requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         self.name.as_interned_str()\n     }\n@@ -916,6 +920,25 @@ impl Symbol {\n         with_interner(|interner| interner.intern(string))\n     }\n \n+    /// Access the symbol's chars. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self))\n+        })\n+    }\n+\n+    /// Access two symbols' chars. This is a slowish operation because it\n+    /// requires locking the symbol interner, but it is faster than calling\n+    /// `with()` twice.\n+    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: Symbol, f: F) -> R {\n+        with_interner(|interner| {\n+            f(interner.get(self), interner.get(other))\n+        })\n+    }\n+\n+    /// Convert to a `LocalInternedString`. This is a slowish operation because\n+    /// it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {\n@@ -924,6 +947,8 @@ impl Symbol {\n         })\n     }\n \n+    /// Convert to an `InternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_interned_str(self) -> InternedString {\n         with_interner(|interner| InternedString {\n             symbol: interner.interned(self)\n@@ -1152,39 +1177,11 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n+#[derive(Clone, Copy, Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }\n \n-impl LocalInternedString {\n-    /// Maps a string to its interned representation.\n-    pub fn intern(string: &str) -> Self {\n-        let string = with_interner(|interner| {\n-            let symbol = interner.intern(string);\n-            interner.strings[symbol.0.as_usize()]\n-        });\n-        LocalInternedString {\n-            string: unsafe { std::mem::transmute::<&str, &str>(string) }\n-        }\n-    }\n-\n-    pub fn as_interned_str(self) -> InternedString {\n-        InternedString {\n-            symbol: Symbol::intern(self.string)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn get(&self) -> &str {\n-        // This returns a valid string since we ensure that `self` outlives the interner\n-        // by creating the interner on a thread which outlives threads which can access it.\n-        // This type cannot move to a thread which outlives the interner since it does\n-        // not implement Send.\n-        self.string\n-    }\n-}\n-\n impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n     str: std::convert::AsRef<U>\n@@ -1246,18 +1243,6 @@ impl fmt::Display for LocalInternedString {\n     }\n }\n \n-impl Decodable for LocalInternedString {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<LocalInternedString, D::Error> {\n-        Ok(LocalInternedString::intern(&d.read_str()?))\n-    }\n-}\n-\n-impl Encodable for LocalInternedString {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(self.string)\n-    }\n-}\n-\n /// An alternative to `Symbol` that is focused on string contents. It has two\n /// main differences to `Symbol`.\n ///\n@@ -1285,28 +1270,19 @@ impl InternedString {\n     }\n \n     pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n-        let str = with_interner(|interner| {\n-            interner.get(self.symbol) as *const str\n-        });\n-        // This is safe because the interner keeps string alive until it is dropped.\n-        // We can access it because we know the interner is still alive since we use a\n-        // scoped thread local to access it, and it was alive at the beginning of this scope\n-        unsafe { f(&*str) }\n+        self.symbol.with(f)\n     }\n \n     fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n-        let (self_str, other_str) = with_interner(|interner| {\n-            (interner.get(self.symbol) as *const str,\n-             interner.get(other.symbol) as *const str)\n-        });\n-        // This is safe for the same reason that `with` is safe.\n-        unsafe { f(&*self_str, &*other_str) }\n+        self.symbol.with2(other.symbol, f)\n     }\n \n     pub fn as_symbol(self) -> Symbol {\n         self.symbol\n     }\n \n+    /// Convert to a `LocalInternedString`. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n         self.symbol.as_str()\n     }"}]}