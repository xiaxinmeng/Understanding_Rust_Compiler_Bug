{"sha": "28fec683f552cb2bc20644f06895232c574751ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZmVjNjgzZjU1MmNiMmJjMjA2NDRmMDY4OTUyMzJjNTc0NzUxYWI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-03T07:51:50Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-03T07:51:50Z"}, "message": "cleanup: don't use node_to_hir_id where unneeded", "tree": {"sha": "efd20a4d71eac482fae6281cfe2bfa4c5129f0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd20a4d71eac482fae6281cfe2bfa4c5129f0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28fec683f552cb2bc20644f06895232c574751ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28fec683f552cb2bc20644f06895232c574751ab", "html_url": "https://github.com/rust-lang/rust/commit/28fec683f552cb2bc20644f06895232c574751ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28fec683f552cb2bc20644f06895232c574751ab/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7ecb3076260256ae7e43f6991ecc1566c73708", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7ecb3076260256ae7e43f6991ecc1566c73708", "html_url": "https://github.com/rust-lang/rust/commit/ec7ecb3076260256ae7e43f6991ecc1566c73708"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "669c2998d1cb27bd694fcbc1cbea84113a6365bf", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -99,7 +99,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex {\n-        let hir_id = self.tcx.hir().node_to_hir_id(stmt.id);\n         let exit = match stmt.node {\n             hir::StmtKind::Local(ref local) => {\n                 let init_exit = self.opt_expr(&local.init, pred);\n@@ -113,7 +112,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.expr(&expr, pred)\n             }\n         };\n-        self.add_ast_node(hir_id.local_id, &[exit])\n+        self.add_ast_node(stmt.hir_id.local_id, &[exit])\n     }\n \n     fn pat(&mut self, pat: &hir::Pat, pred: CFGIndex) -> CFGIndex {"}, {"sha": "ebaef4977f400b413507b88de9f6c0352511901a", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n \n             hir::TyKind::Rptr(ref lifetime, _) => {\n                 // the lifetime of the TyRptr\n-                let hir_id = self.tcx.hir().node_to_hir_id(lifetime.id);\n+                let hir_id = lifetime.hir_id;\n                 match (self.tcx.named_region(hir_id), self.bound_region) {\n                     // Find the index of the anonymous region that was part of the\n                     // error. We will then search the function parameters for a bound\n@@ -221,8 +221,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n-        let hir_id = self.tcx.hir().node_to_hir_id(lifetime.id);\n-        match (self.tcx.named_region(hir_id), self.bound_region) {\n+        match (self.tcx.named_region(lifetime.hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n             (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n                 if debruijn_index == self.current_index && anon_index == br_index {"}, {"sha": "db52cc3074b9a2c3d4b4808814051d2b59210d2e", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -840,7 +840,7 @@ fn resolve_pat<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, pat: &\n }\n \n fn resolve_stmt<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, stmt: &'tcx hir::Stmt) {\n-    let stmt_id = visitor.tcx.hir().node_to_hir_id(stmt.id).local_id;\n+    let stmt_id = stmt.hir_id.local_id;\n     debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n \n     // Every statement will clean up the temporaries created during"}, {"sha": "518ae978ae17adcbf2422c364bedd4ccc6e576da", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -46,7 +46,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n     for (index, stmt) in stmts.iter().enumerate() {\n-        let hir_id = cx.tcx.hir().node_to_hir_id(stmt.id);\n+        let hir_id = stmt.hir_id;\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n         let stmt_span = StatementSpan(cx.tcx.hir().span(stmt.id));\n         match stmt.node {"}, {"sha": "8da0b6dcbeac3b36ea87c838b44491f817d88929", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -114,8 +114,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             tcx.hir().name(tcx.hir().as_local_node_id(def_id).unwrap()).as_interned_str()\n         };\n \n-        let hir_id = tcx.hir().node_to_hir_id(lifetime.id);\n-        let r = match tcx.named_region(hir_id) {\n+        let r = match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => {\n                 tcx.types.re_static\n             }\n@@ -1145,8 +1144,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             self.ast_region_to_region(lifetime, None)\n         } else {\n             self.compute_object_lifetime_bound(span, existential_predicates).unwrap_or_else(|| {\n-                let hir_id = tcx.hir().node_to_hir_id(lifetime.id);\n-                if tcx.named_region(hir_id).is_some() {\n+                if tcx.named_region(lifetime.hir_id).is_some() {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(span, None).unwrap_or_else(|| {"}, {"sha": "9dc74c5d63a4e2f4eb24f2f1c4eb2ecf87ee0092", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -814,8 +814,7 @@ fn has_late_bound_regions<'a, 'tcx>(\n                 return;\n             }\n \n-            let hir_id = self.tcx.hir().node_to_hir_id(lt.id);\n-            match self.tcx.named_region(hir_id) {\n+            match self.tcx.named_region(lt.hir_id) {\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _, _))\n                 | Some(rl::Region::LateBoundAnon(debruijn, _)) if debruijn < self.outer_index => {}\n@@ -841,8 +840,7 @@ fn has_late_bound_regions<'a, 'tcx>(\n         };\n         for param in &generics.params {\n             if let GenericParamKind::Lifetime { .. } = param.kind {\n-                let hir_id = tcx.hir().node_to_hir_id(param.id);\n-                if tcx.is_late_bound(hir_id) {\n+                if tcx.is_late_bound(param.hir_id) {\n                     return Some(param.span);\n                 }\n             }"}, {"sha": "116e46df3c10a3915f6e4779f24fde1309163e2c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fec683f552cb2bc20644f06895232c574751ab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=28fec683f552cb2bc20644f06895232c574751ab", "patch": "@@ -1210,8 +1210,7 @@ impl Lifetime {\n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext) -> Lifetime {\n         if self.id != ast::DUMMY_NODE_ID {\n-            let hir_id = cx.tcx.hir().node_to_hir_id(self.id);\n-            let def = cx.tcx.named_region(hir_id);\n+            let def = cx.tcx.named_region(self.hir_id);\n             match def {\n                 Some(rl::Region::EarlyBound(_, node_id, _)) |\n                 Some(rl::Region::LateBound(_, node_id, _)) |"}]}