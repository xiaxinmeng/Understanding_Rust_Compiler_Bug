{"sha": "a62f954eeb544ccc5fda3615f38e7f8f40881935", "node_id": "C_kwDOAAsO6NoAKGE2MmY5NTRlZWI1NDRjY2M1ZmRhMzYxNWYzOGU3ZjhmNDA4ODE5MzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T23:35:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T23:35:05Z"}, "message": "Auto merge of #2444 - oli-obk:file_descriptor_defaults, r=RalfJung\n\nAdd default impls for `FileDescriptor` methods\n\nI felt like it was just noisy to have to write the \"can't do this here\" defaults", "tree": {"sha": "1818857b9aa360b9da320822352db128cde30efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1818857b9aa360b9da320822352db128cde30efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a62f954eeb544ccc5fda3615f38e7f8f40881935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a62f954eeb544ccc5fda3615f38e7f8f40881935", "html_url": "https://github.com/rust-lang/rust/commit/a62f954eeb544ccc5fda3615f38e7f8f40881935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a62f954eeb544ccc5fda3615f38e7f8f40881935/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0cbddc78a407b700f86995947dd5d49ccd465a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0cbddc78a407b700f86995947dd5d49ccd465a6", "html_url": "https://github.com/rust-lang/rust/commit/c0cbddc78a407b700f86995947dd5d49ccd465a6"}, {"sha": "cd6b723bb66c7cc32a1436db43079dc4236eaa90", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6b723bb66c7cc32a1436db43079dc4236eaa90", "html_url": "https://github.com/rust-lang/rust/commit/cd6b723bb66c7cc32a1436db43079dc4236eaa90"}], "stats": {"total": 161, "additions": 41, "deletions": 120}, "files": [{"sha": "c9f35c04891710f10cfc4a403ede579831e47bdd", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 38, "deletions": 117, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a62f954eeb544ccc5fda3615f38e7f8f40881935/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62f954eeb544ccc5fda3615f38e7f8f40881935/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=a62f954eeb544ccc5fda3615f38e7f8f40881935", "patch": "@@ -24,38 +24,56 @@ struct FileHandle {\n }\n \n trait FileDescriptor: std::fmt::Debug {\n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle>;\n+    fn name(&self) -> &'static str;\n+\n+    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n+        throw_unsup_format!(\"{} cannot be used as FileHandle\", self.name());\n+    }\n \n     fn read<'tcx>(\n         &mut self,\n-        communicate_allowed: bool,\n-        bytes: &mut [u8],\n-    ) -> InterpResult<'tcx, io::Result<usize>>;\n+        _communicate_allowed: bool,\n+        _bytes: &mut [u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        throw_unsup_format!(\"cannot read from {}\", self.name());\n+    }\n \n     fn write<'tcx>(\n         &self,\n-        communicate_allowed: bool,\n-        bytes: &[u8],\n-    ) -> InterpResult<'tcx, io::Result<usize>>;\n+        _communicate_allowed: bool,\n+        _bytes: &[u8],\n+    ) -> InterpResult<'tcx, io::Result<usize>> {\n+        throw_unsup_format!(\"cannot write to {}\", self.name());\n+    }\n \n     fn seek<'tcx>(\n         &mut self,\n-        communicate_allowed: bool,\n-        offset: SeekFrom,\n-    ) -> InterpResult<'tcx, io::Result<u64>>;\n+        _communicate_allowed: bool,\n+        _offset: SeekFrom,\n+    ) -> InterpResult<'tcx, io::Result<u64>> {\n+        throw_unsup_format!(\"cannot seek on {}\", self.name());\n+    }\n \n     fn close<'tcx>(\n         self: Box<Self>,\n         _communicate_allowed: bool,\n-    ) -> InterpResult<'tcx, io::Result<i32>>;\n+    ) -> InterpResult<'tcx, io::Result<i32>> {\n+        throw_unsup_format!(\"cannot close {}\", self.name());\n+    }\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n \n     #[cfg(unix)]\n-    fn as_unix_host_fd(&self) -> Option<i32>;\n+    fn as_unix_host_fd(&self) -> Option<i32> {\n+        None\n+    }\n }\n \n impl FileDescriptor for FileHandle {\n+    fn name(&self) -> &'static str {\n+        \"FILE\"\n+    }\n+\n     fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n         Ok(self)\n     }\n@@ -126,8 +144,8 @@ impl FileDescriptor for FileHandle {\n }\n \n impl FileDescriptor for io::Stdin {\n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"stdin cannot be used as FileHandle\");\n+    fn name(&self) -> &'static str {\n+        \"stdin\"\n     }\n \n     fn read<'tcx>(\n@@ -142,29 +160,6 @@ impl FileDescriptor for io::Stdin {\n         Ok(Read::read(self, bytes))\n     }\n \n-    fn write<'tcx>(\n-        &self,\n-        _communicate_allowed: bool,\n-        _bytes: &[u8],\n-    ) -> InterpResult<'tcx, io::Result<usize>> {\n-        throw_unsup_format!(\"cannot write to stdin\");\n-    }\n-\n-    fn seek<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _offset: SeekFrom,\n-    ) -> InterpResult<'tcx, io::Result<u64>> {\n-        throw_unsup_format!(\"cannot seek on stdin\");\n-    }\n-\n-    fn close<'tcx>(\n-        self: Box<Self>,\n-        _communicate_allowed: bool,\n-    ) -> InterpResult<'tcx, io::Result<i32>> {\n-        throw_unsup_format!(\"stdin cannot be closed\");\n-    }\n-\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stdin()))\n     }\n@@ -176,16 +171,8 @@ impl FileDescriptor for io::Stdin {\n }\n \n impl FileDescriptor for io::Stdout {\n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"stdout cannot be used as FileHandle\");\n-    }\n-\n-    fn read<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _bytes: &mut [u8],\n-    ) -> InterpResult<'tcx, io::Result<usize>> {\n-        throw_unsup_format!(\"cannot read from stdout\");\n+    fn name(&self) -> &'static str {\n+        \"stdout\"\n     }\n \n     fn write<'tcx>(\n@@ -205,21 +192,6 @@ impl FileDescriptor for io::Stdout {\n         Ok(result)\n     }\n \n-    fn seek<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _offset: SeekFrom,\n-    ) -> InterpResult<'tcx, io::Result<u64>> {\n-        throw_unsup_format!(\"cannot seek on stdout\");\n-    }\n-\n-    fn close<'tcx>(\n-        self: Box<Self>,\n-        _communicate_allowed: bool,\n-    ) -> InterpResult<'tcx, io::Result<i32>> {\n-        throw_unsup_format!(\"stdout cannot be closed\");\n-    }\n-\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stdout()))\n     }\n@@ -231,16 +203,8 @@ impl FileDescriptor for io::Stdout {\n }\n \n impl FileDescriptor for io::Stderr {\n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"stderr cannot be used as FileHandle\");\n-    }\n-\n-    fn read<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _bytes: &mut [u8],\n-    ) -> InterpResult<'tcx, io::Result<usize>> {\n-        throw_unsup_format!(\"cannot read from stderr\");\n+    fn name(&self) -> &'static str {\n+        \"stderr\"\n     }\n \n     fn write<'tcx>(\n@@ -253,21 +217,6 @@ impl FileDescriptor for io::Stderr {\n         Ok(Write::write(&mut { self }, bytes))\n     }\n \n-    fn seek<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _offset: SeekFrom,\n-    ) -> InterpResult<'tcx, io::Result<u64>> {\n-        throw_unsup_format!(\"cannot seek on stderr\");\n-    }\n-\n-    fn close<'tcx>(\n-        self: Box<Self>,\n-        _communicate_allowed: bool,\n-    ) -> InterpResult<'tcx, io::Result<i32>> {\n-        throw_unsup_format!(\"stderr cannot be closed\");\n-    }\n-\n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(io::stderr()))\n     }\n@@ -282,16 +231,8 @@ impl FileDescriptor for io::Stderr {\n struct DummyOutput;\n \n impl FileDescriptor for DummyOutput {\n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"stderr and stdout cannot be used as FileHandle\");\n-    }\n-\n-    fn read<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _bytes: &mut [u8],\n-    ) -> InterpResult<'tcx, io::Result<usize>> {\n-        throw_unsup_format!(\"cannot read from stderr or stdout\");\n+    fn name(&self) -> &'static str {\n+        \"stderr and stdout\"\n     }\n \n     fn write<'tcx>(\n@@ -303,29 +244,9 @@ impl FileDescriptor for DummyOutput {\n         Ok(Ok(bytes.len()))\n     }\n \n-    fn seek<'tcx>(\n-        &mut self,\n-        _communicate_allowed: bool,\n-        _offset: SeekFrom,\n-    ) -> InterpResult<'tcx, io::Result<u64>> {\n-        throw_unsup_format!(\"cannot seek on stderr or stdout\");\n-    }\n-\n-    fn close<'tcx>(\n-        self: Box<Self>,\n-        _communicate_allowed: bool,\n-    ) -> InterpResult<'tcx, io::Result<i32>> {\n-        throw_unsup_format!(\"stderr and stdout cannot be closed\");\n-    }\n-\n     fn dup<'tcx>(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n         Ok(Box::new(DummyOutput))\n     }\n-\n-    #[cfg(unix)]\n-    fn as_unix_host_fd(&self) -> Option<i32> {\n-        None\n-    }\n }\n \n #[derive(Debug)]"}, {"sha": "e4eab5fd69640602c6d793e1ab000800a9a50d8d", "filename": "tests/fail/fs/close_stdout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a62f954eeb544ccc5fda3615f38e7f8f40881935/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a62f954eeb544ccc5fda3615f38e7f8f40881935/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fclose_stdout.rs?ref=a62f954eeb544ccc5fda3615f38e7f8f40881935", "patch": "@@ -7,6 +7,6 @@\n \n fn main() {\n     unsafe {\n-        libc::close(1); //~ ERROR: stdout cannot be closed\n+        libc::close(1); //~ ERROR: cannot close stdout\n     }\n }"}, {"sha": "eb2c54e05f1fa7ca102b489d64a7229ef89ab137", "filename": "tests/fail/fs/close_stdout.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a62f954eeb544ccc5fda3615f38e7f8f40881935/tests%2Ffail%2Ffs%2Fclose_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a62f954eeb544ccc5fda3615f38e7f8f40881935/tests%2Ffail%2Ffs%2Fclose_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fclose_stdout.stderr?ref=a62f954eeb544ccc5fda3615f38e7f8f40881935", "patch": "@@ -1,8 +1,8 @@\n-error: unsupported operation: stdout cannot be closed\n+error: unsupported operation: cannot close stdout\n   --> $DIR/close_stdout.rs:LL:CC\n    |\n LL |         libc::close(1);\n-   |         ^^^^^^^^^^^^^^ stdout cannot be closed\n+   |         ^^^^^^^^^^^^^^ cannot close stdout\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: backtrace:"}]}