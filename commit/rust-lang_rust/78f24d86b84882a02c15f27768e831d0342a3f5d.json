{"sha": "78f24d86b84882a02c15f27768e831d0342a3f5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjI0ZDg2Yjg0ODgyYTAyYzE1ZjI3NzY4ZTgzMWQwMzQyYTNmNWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-04T05:52:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-04T05:52:39Z"}, "message": "Auto merge of #47124 - estebank:loan-paths, r=nikomatsakis\n\nReword reason for move note\n\nOn move errors, when encountering an enum variant, be more ambiguous and do not refer to the type on the cause note, to avoid referring to `(maybe as std::prelude::v1::Some).0`, and instead refer to `the value`.\n\nSidesteps part of the problem with #41962:\n\n```\nerror[E0382]: use of partially moved value: `maybe`\n --> file.rs:5:30\n  |\n5 |         if let Some(thing) = maybe {\n  |                     -----    ^^^^^ value used here after move\n  |                     |\n  |                     value moved here\n  = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n\nerror[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0`\n --> file.rs:5:21\n  |\n5 |         if let Some(thing) = maybe {\n  |                     ^^^^^ value moved here in previous iteration of loop\n  = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n\nerror: aborting due to 2 previous errors\n```\n\nPrevious discussion: #44360\n\nr? @arielb1", "tree": {"sha": "393f3cb3cdb06825658ae1f00142dc74889f997a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393f3cb3cdb06825658ae1f00142dc74889f997a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f24d86b84882a02c15f27768e831d0342a3f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f24d86b84882a02c15f27768e831d0342a3f5d", "html_url": "https://github.com/rust-lang/rust/commit/78f24d86b84882a02c15f27768e831d0342a3f5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f24d86b84882a02c15f27768e831d0342a3f5d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608aae904b14efd09b4f95d9f4c3f030e6a34f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/608aae904b14efd09b4f95d9f4c3f030e6a34f95", "html_url": "https://github.com/rust-lang/rust/commit/608aae904b14efd09b4f95d9f4c3f030e6a34f95"}, {"sha": "a4d46b3d87e9c83ffb78489a513a100e5422ac81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d46b3d87e9c83ffb78489a513a100e5422ac81", "html_url": "https://github.com/rust-lang/rust/commit/a4d46b3d87e9c83ffb78489a513a100e5422ac81"}], "stats": {"total": 125, "additions": 104, "deletions": 21}, "files": [{"sha": "58112650c05d00bc5fca5246dabbc9bda9cf3514", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=78f24d86b84882a02c15f27768e831d0342a3f5d", "patch": "@@ -346,6 +346,16 @@ impl<'tcx> LoanPath<'tcx> {\n     }\n \n     fn to_type(&self) -> Ty<'tcx> { self.ty }\n+\n+    fn has_downcast(&self) -> bool {\n+        match self.kind {\n+            LpDowncast(_, _) => true,\n+            LpExtend(ref lp, _, LpInterior(_, _)) => {\n+                lp.has_downcast()\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n // FIXME (pnkfelix): See discussion here\n@@ -721,16 +731,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                          move_note));\n             err\n         } else {\n-            err.span_label(use_span, format!(\"value {} here after move\", verb_participle))\n-               .span_label(move_span, format!(\"value moved{} here\", move_note));\n+            err.span_label(use_span, format!(\"value {} here after move\", verb_participle));\n+            err.span_label(move_span, format!(\"value moved{} here\", move_note));\n             err\n         };\n \n         if need_note {\n-            err.note(&format!(\"move occurs because `{}` has type `{}`, \\\n-                               which does not implement the `Copy` trait\",\n-                              self.loan_path_to_string(moved_lp),\n-                              moved_lp.ty));\n+            err.note(&format!(\n+                \"move occurs because {} has type `{}`, which does not implement the `Copy` trait\",\n+                if moved_lp.has_downcast() {\n+                    \"the value\".to_string()\n+                } else {\n+                    format!(\"`{}`\", self.loan_path_to_string(moved_lp))\n+                },\n+                moved_lp.ty));\n         }\n \n         // Note: we used to suggest adding a `ref binding` or calling\n@@ -1414,7 +1428,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             LpDowncast(ref lp_base, variant_def_id) => {\n                 out.push('(');\n                 self.append_autoderefd_loan_path_to_string(&lp_base, out);\n-                out.push(':');\n+                out.push_str(DOWNCAST_PRINTED_OPERATOR);\n                 out.push_str(&self.tcx.item_path_str(variant_def_id));\n                 out.push(')');\n             }"}, {"sha": "19bebea7cb8f100794e11e0fb09274111fa0da2e", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=78f24d86b84882a02c15f27768e831d0342a3f5d", "patch": "@@ -62,13 +62,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 Origin::Mir,\n             );\n \n-            err.span_label(\n-                span,\n-                format!(\n-                    \"value {} here after move\",\n-                    desired_action.as_verb_in_past_tense()\n-                ),\n-            );\n+            let mut is_loop_move = false;\n             for moi in mois {\n                 let move_msg = \"\"; //FIXME: add \" (into closure)\"\n                 let move_span = self.mir.source_info(self.move_data.moves[*moi].source).span;\n@@ -77,10 +71,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         span,\n                         format!(\"value moved{} here in previous iteration of loop\", move_msg),\n                     );\n+                    is_loop_move = true;\n                 } else {\n                     err.span_label(move_span, format!(\"value moved{} here\", move_msg));\n                 };\n             }\n+            if !is_loop_move {\n+                err.span_label(\n+                    span,\n+                    format!(\n+                        \"value {} here after move\",\n+                        desired_action.as_verb_in_past_tense()\n+                    ),\n+                );\n+            }\n \n             if let Some(ty) = self.retrieve_type_for_place(place) {\n                 let needs_note = match ty.sty {"}, {"sha": "016ce93a0bd0bc4b68a7108fd7cab8a73e4d8d3c", "filename": "src/test/compile-fail/issue-24357.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs?ref=78f24d86b84882a02c15f27768e831d0342a3f5d", "patch": "@@ -12,9 +12,9 @@ struct NoCopy;\n fn main() {\n    let x = NoCopy;\n    let f = move || { let y = x; };\n-   //~^ value moved (into closure) here\n+   //~^ NOTE value moved (into closure) here\n    let z = x;\n    //~^ ERROR use of moved value: `x`\n-   //~| value used here after move\n-   //~| move occurs because `x` has type `NoCopy`\n+   //~| NOTE value used here after move\n+   //~| NOTE move occurs because `x` has type `NoCopy`\n }"}, {"sha": "5329dcaaaf4a263cb07f081e1f40bc1f37c293c7", "filename": "src/test/compile-fail/moves-based-on-type-distribute-copy-over-paren.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs?ref=78f24d86b84882a02c15f27768e831d0342a3f5d", "patch": "@@ -17,17 +17,19 @@ fn touch<A>(_a: &A) {}\n fn f00() {\n     let x = \"hi\".to_string();\n     let _y = Foo { f:x };\n-    //~^ value moved here\n+    //~^ NOTE value moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n-    //~^ value used here after move\n-    //~| move occurs because `x` has type `std::string::String`\n+    //~^ NOTE value used here after move\n+    //~| NOTE move occurs because `x` has type `std::string::String`\n }\n \n fn f05() {\n     let x = \"hi\".to_string();\n     let _y = Foo { f:(((x))) };\n-    //~^ value moved here\n+    //~^ NOTE value moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n+    //~^ NOTE value used here after move\n+    //~| NOTE move occurs because `x` has type `std::string::String`\n }\n \n fn f10() {"}, {"sha": "d592be11335e0254148657a343d5cdf19c10c733", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=78f24d86b84882a02c15f27768e831d0342a3f5d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=compare\n+\n+pub fn main(){\n+    let maybe = Some(vec![true, true]);\n+\n+    loop {\n+        if let Some(thing) = maybe {\n+        //~^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n+        //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n+        //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+        //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n+        }\n+    }\n+}"}, {"sha": "50d51c4d907fda2670983df05578830c1b18461d", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f24d86b84882a02c15f27768e831d0342a3f5d/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=78f24d86b84882a02c15f27768e831d0342a3f5d", "patch": "@@ -0,0 +1,39 @@\n+error[E0382]: use of partially moved value: `maybe` (Ast)\n+  --> $DIR/issue-41962.rs:17:30\n+   |\n+17 |         if let Some(thing) = maybe {\n+   |                     -----    ^^^^^ value used here after move\n+   |                     |\n+   |                     value moved here\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast)\n+  --> $DIR/issue-41962.rs:17:21\n+   |\n+17 |         if let Some(thing) = maybe {\n+   |                     ^^^^^ value moved here in previous iteration of loop\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `maybe` (Mir)\n+  --> $DIR/issue-41962.rs:17:16\n+   |\n+17 |         if let Some(thing) = maybe {\n+   |                ^^^^^-----^\n+   |                |    |\n+   |                |    value moved here\n+   |                value used here after move\n+   |\n+   = note: move occurs because `maybe` has type `std::option::Option<std::vec::Vec<bool>>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `maybe.0` (Mir)\n+  --> $DIR/issue-41962.rs:17:21\n+   |\n+17 |         if let Some(thing) = maybe {\n+   |                     ^^^^^ value moved here in previous iteration of loop\n+   |\n+   = note: move occurs because `maybe.0` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error: aborting due to 4 previous errors\n+"}]}