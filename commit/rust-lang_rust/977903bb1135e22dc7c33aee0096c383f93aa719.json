{"sha": "977903bb1135e22dc7c33aee0096c383f93aa719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzkwM2JiMTEzNWUyMmRjN2MzM2FlZTAwOTZjMzgzZjkzYWE3MTk=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2021-03-26T14:39:42Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2021-06-06T12:06:56Z"}, "message": "String::remove_matches O(n^2) -> O(n)\n\nCopy only non-matching bytes.", "tree": {"sha": "4efe1a16a6db0b634b576246898dcee3d831c8da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4efe1a16a6db0b634b576246898dcee3d831c8da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977903bb1135e22dc7c33aee0096c383f93aa719", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEGdbxTRDxXfPwlFQKMuM+wV4f7zwFAmC8umAACgkQMuM+wV4f\n7zyC7Av/cN82QD5zEejYN3mMrAK0QymE6FBXX0cs4IwzMqvbP76MrldCry/ZMo3s\nUrJNfad3Ri5RMAum3YGkyEIL1ZEkrzUQzTFpk/PArmiirPbnr/XK6qZaBpvLPBBF\n6INZS1sOZ6UUjWuYTXkVPDRjWLxr2Y+7AGRCiMqPjW4GJAilULe6f/Q+gHxhN6nV\n/nwLada1+jNSkMzgciRhUUo1V6DtR+W1w33OdWk7TBH4jJ3M2ZMvHypI4ij/2ND6\nwCjtaoBUI6duaLF5XfPlum94pF7Sicrq29YU8xQh1sTWOHciaUr8fuVfqN/w8o+D\nc/9NGjOa2ZVw0bmbETx93oz4RcczbEWDwoGpbPz7B7yFyvgdSIFKhve/RqN53k75\nidWzUTVRZMNpndWvSAX1uD1f7ExuhBWUii81XOHsscXBoeoF1aQtuMEfr1UZ/t+E\nuQuVy+F0tKKnvV/8odwAYbOR30TV98EaQZvAGL2hiO3XXYaU+zD80UakKkJRCDzx\ncLwLafPO\n=22Kw\n-----END PGP SIGNATURE-----", "payload": "tree 4efe1a16a6db0b634b576246898dcee3d831c8da\nparent 38013e708eb6ec5abe9992078857b147ff3b58d5\nauthor Tamir Duberstein <tamird@google.com> 1616769582 -0400\ncommitter Tamir Duberstein <tamird@google.com> 1622981216 -0400\n\nString::remove_matches O(n^2) -> O(n)\n\nCopy only non-matching bytes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977903bb1135e22dc7c33aee0096c383f93aa719", "html_url": "https://github.com/rust-lang/rust/commit/977903bb1135e22dc7c33aee0096c383f93aa719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977903bb1135e22dc7c33aee0096c383f93aa719/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38013e708eb6ec5abe9992078857b147ff3b58d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/38013e708eb6ec5abe9992078857b147ff3b58d5", "html_url": "https://github.com/rust-lang/rust/commit/38013e708eb6ec5abe9992078857b147ff3b58d5"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "1fb645a302e76eb91bd4c0f104bb95ebc4f08147", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/977903bb1135e22dc7c33aee0096c383f93aa719/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977903bb1135e22dc7c33aee0096c383f93aa719/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=977903bb1135e22dc7c33aee0096c383f93aa719", "patch": "@@ -1290,26 +1290,49 @@ impl String {\n     {\n         use core::str::pattern::Searcher;\n \n-        let matches: Vec<_> = {\n+        let rejections = {\n             let mut searcher = pat.into_searcher(self);\n-            from_fn(|| searcher.next_match()).collect()\n+            // Per Searcher::next:\n+            //\n+            // A Match result needs to contain the whole matched pattern,\n+            // however Reject results may be split up into arbitrary many\n+            // adjacent fragments. Both ranges may have zero length.\n+            //\n+            // In practice the implementation of Searcher::next_match tends to\n+            // be more efficient, so we use it here and do some work to invert\n+            // matches into rejections since that's what we want to copy below.\n+            let mut front = 0;\n+            let rejections: Vec<_> = from_fn(|| {\n+                let (start, end) = searcher.next_match()?;\n+                let prev_front = front;\n+                front = end;\n+                Some((prev_front, start))\n+            })\n+            .collect();\n+            rejections.into_iter().chain(core::iter::once((front, self.len())))\n         };\n \n-        let len = self.len();\n-        let mut shrunk_by = 0;\n+        let mut len = 0;\n+        let ptr = self.vec.as_mut_ptr();\n+\n+        for (start, end) in rejections {\n+            let count = end - start;\n+            if start != len {\n+                // SAFETY: per Searcher::next:\n+                //\n+                // The stream of Match and Reject values up to a Done will\n+                // contain index ranges that are adjacent, non-overlapping,\n+                // covering the whole haystack, and laying on utf8\n+                // boundaries.\n+                unsafe {\n+                    ptr::copy(ptr.add(start), ptr.add(len), count);\n+                }\n+            }\n+            len += count;\n+        }\n \n-        // SAFETY: start and end will be on utf8 byte boundaries per\n-        // the Searcher docs\n         unsafe {\n-            for (start, end) in matches {\n-                ptr::copy(\n-                    self.vec.as_mut_ptr().add(end - shrunk_by),\n-                    self.vec.as_mut_ptr().add(start - shrunk_by),\n-                    len - end,\n-                );\n-                shrunk_by += end - start;\n-            }\n-            self.vec.set_len(len - shrunk_by);\n+            self.vec.set_len(len);\n         }\n     }\n "}]}