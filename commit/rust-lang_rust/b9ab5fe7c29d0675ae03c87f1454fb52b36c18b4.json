{"sha": "b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YWI1ZmU3YzI5ZDA2NzVhZTAzYzg3ZjE0NTRmYjUyYjM2YzE4YjQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-31T20:47:57Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-31T22:22:21Z"}, "message": "Stabilize a few remaining stragglers\n\n* The `io::Seek` trait, and `SeekFrom` enum.\n* The `Iterator::{partition, unsip}` methods.\n* The `Vec::into_boxed_slice` method.\n* The `LinkedList::append` method.\n* The `{or_insert, or_insert_with` methods in the `Entry` APIs.", "tree": {"sha": "d4e34909a9baac20edc7e5eca2bc3e530c5ed0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4e34909a9baac20edc7e5eca2bc3e530c5ed0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "html_url": "https://github.com/rust-lang/rust/commit/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bf31dd514055177b22c3dc66836d39eb5b1648", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bf31dd514055177b22c3dc66836d39eb5b1648", "html_url": "https://github.com/rust-lang/rust/commit/80bf31dd514055177b22c3dc66836d39eb5b1648"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "adfb284dabea73562a31832c15a098fdfd84d849", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "patch": "@@ -1134,8 +1134,7 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"collections\",\n-               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry.\n     pub fn or_insert(self, default: V) -> &'a mut V {\n@@ -1145,8 +1144,7 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"collections\",\n-               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the result of the default function if empty,\n     /// and returns a mutable reference to the value in the entry.\n     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {"}, {"sha": "97512cbe7cc67728487ea7051b09226ae825aa3a", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "patch": "@@ -252,6 +252,7 @@ impl<T> LinkedList<T> {\n     /// }\n     /// println!(\"{}\", b.len()); // prints 0\n     /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn append(&mut self, other: &mut LinkedList<T>) {\n         match self.list_tail.resolve() {\n             None => {"}, {"sha": "7fdf5b4151d4ee199429b1b49fdf51d50df9ea4f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "patch": "@@ -389,7 +389,7 @@ impl<T> Vec<T> {\n     /// Note that this will drop any excess capacity. Calling this and\n     /// converting back to a vector with `into_vec()` is equivalent to calling\n     /// `shrink_to_fit()`.\n-    #[unstable(feature = \"collections\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_boxed_slice(mut self) -> Box<[T]> {\n         self.shrink_to_fit();\n         unsafe {"}, {"sha": "18e1b9dde48cdf3693c23f20acb4d989ddd51c7f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "patch": "@@ -553,8 +553,7 @@ pub trait Iterator {\n     /// assert_eq!(even, [2, 4]);\n     /// assert_eq!(odd, [1, 3]);\n     /// ```\n-    #[unstable(feature = \"core\",\n-               reason = \"recently added as part of collections reform\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn partition<B, F>(self, mut f: F) -> (B, B) where\n         Self: Sized,\n         B: Default + Extend<Self::Item>,\n@@ -930,7 +929,7 @@ pub trait Iterator {\n     /// assert_eq!([1, 3], left);\n     /// assert_eq!([2, 4], right);\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"recent addition\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB) where\n         FromA: Default + Extend<A>,\n         FromB: Default + Extend<B>,"}, {"sha": "a636c1a812ddcbf2df4c3b5b009b36be5a072955", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "patch": "@@ -1482,8 +1482,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"collections\",\n-               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the default if empty, and returns\n     /// a mutable reference to the value in the entry.\n     pub fn or_insert(self, default: V) -> &'a mut V {\n@@ -1493,8 +1492,7 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n-    #[unstable(feature = \"collections\",\n-               reason = \"matches entry v3 specification, waiting for dust to settle\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Ensures a value is in the entry by inserting the result of the default function if empty,\n     /// and returns a mutable reference to the value in the entry.\n     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {"}, {"sha": "0e379b5ab43e87462489d4304c9f931426f6a635", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b9ab5fe7c29d0675ae03c87f1454fb52b36c18b4", "patch": "@@ -441,9 +441,7 @@ pub trait Write {\n ///\n /// The stream typically has a fixed size, allowing seeking relative to either\n /// end or the current offset.\n-#[unstable(feature = \"io\", reason = \"the central `seek` method may be split \\\n-                                     into multiple methods instead of taking \\\n-                                     an enum as an argument\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Seek {\n     /// Seek to an offset, in bytes, in a stream\n     ///\n@@ -459,28 +457,32 @@ pub trait Seek {\n     /// # Errors\n     ///\n     /// Seeking to a negative offset is considered an error\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;\n }\n \n /// Enumeration of possible methods to seek within an I/O object.\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n-#[unstable(feature = \"io\", reason = \"awaiting the stability of Seek\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SeekFrom {\n     /// Set the offset to the provided number of bytes.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Start(u64),\n \n     /// Set the offset to the size of this object plus the specified number of\n     /// bytes.\n     ///\n     /// It is possible to seek beyond the end of an object, but is an error to\n     /// seek before byte 0.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     End(i64),\n \n     /// Set the offset to the current position plus the specified number of\n     /// bytes.\n     ///\n     /// It is possible to seek beyond the end of an object, but is an error to\n     /// seek before byte 0.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Current(i64),\n }\n "}]}