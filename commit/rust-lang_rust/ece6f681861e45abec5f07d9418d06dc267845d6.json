{"sha": "ece6f681861e45abec5f07d9418d06dc267845d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTZmNjgxODYxZTQ1YWJlYzVmMDdkOTQxOGQwNmRjMjY3ODQ1ZDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T20:44:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T21:39:37Z"}, "message": "rustc_expand: Simplify span quoting in proc macro server\n\n- The `Rustc::expn_id` field kept redundant information\n- `SyntaxContext` is no longer thrown away before `save_proc_macro_span` because it's thrown away during metadata encoding anyway", "tree": {"sha": "2432e8b5939209533ad0ab23f59d9af07abac2d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2432e8b5939209533ad0ab23f59d9af07abac2d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece6f681861e45abec5f07d9418d06dc267845d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece6f681861e45abec5f07d9418d06dc267845d6", "html_url": "https://github.com/rust-lang/rust/commit/ece6f681861e45abec5f07d9418d06dc267845d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece6f681861e45abec5f07d9418d06dc267845d6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de897f52051404e2adf24c2861bcacbdb6e74406", "url": "https://api.github.com/repos/rust-lang/rust/commits/de897f52051404e2adf24c2861bcacbdb6e74406", "html_url": "https://github.com/rust-lang/rust/commit/de897f52051404e2adf24c2861bcacbdb6e74406"}], "stats": {"total": 35, "additions": 9, "deletions": 26}, "files": [{"sha": "ff135f60a822a70ab52cf5f924650793e922fc4f", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ece6f681861e45abec5f07d9418d06dc267845d6/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece6f681861e45abec5f07d9418d06dc267845d6/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=ece6f681861e45abec5f07d9418d06dc267845d6", "patch": "@@ -14,7 +14,6 @@ use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n use rustc_span::def_id::CrateNum;\n-use rustc_span::hygiene::ExpnId;\n use rustc_span::hygiene::ExpnKind;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, MultiSpan, Pos, RealFileName, SourceFile, Span};\n@@ -363,26 +362,20 @@ pub(crate) struct Rustc<'a> {\n     mixed_site: Span,\n     span_debug: bool,\n     krate: CrateNum,\n-    expn_id: ExpnId,\n     rebased_spans: FxHashMap<usize, Span>,\n }\n \n impl<'a> Rustc<'a> {\n     pub fn new(cx: &'a ExtCtxt<'_>) -> Self {\n         let expn_data = cx.current_expansion.id.expn_data();\n-        let def_site = cx.with_def_site_ctxt(expn_data.def_site);\n-        let call_site = cx.with_call_site_ctxt(expn_data.call_site);\n-        let mixed_site = cx.with_mixed_site_ctxt(expn_data.call_site);\n-        let sess = cx.parse_sess();\n         Rustc {\n             resolver: cx.resolver,\n-            sess,\n-            def_site,\n-            call_site,\n-            mixed_site,\n+            sess: cx.parse_sess(),\n+            def_site: cx.with_def_site_ctxt(expn_data.def_site),\n+            call_site: cx.with_call_site_ctxt(expn_data.call_site),\n+            mixed_site: cx.with_mixed_site_ctxt(expn_data.call_site),\n             span_debug: cx.ecfg.span_debug,\n             krate: expn_data.macro_def_id.unwrap().krate,\n-            expn_id: cx.current_expansion.id,\n             rebased_spans: FxHashMap::default(),\n         }\n     }\n@@ -782,25 +775,15 @@ impl server::Span for Rustc<'_> {\n     /// span from the metadata of `my_proc_macro` (which we have access to,\n     /// since we've loaded `my_proc_macro` from disk in order to execute it).\n     /// In this way, we have obtained a span pointing into `my_proc_macro`\n-    fn save_span(&mut self, mut span: Self::Span) -> usize {\n-        // Throw away the `SyntaxContext`, since we currently\n-        // skip serializing `SyntaxContext`s for proc-macro crates\n-        span = span.with_ctxt(rustc_span::SyntaxContext::root());\n+    fn save_span(&mut self, span: Self::Span) -> usize {\n         self.sess.save_proc_macro_span(span)\n     }\n     fn recover_proc_macro_span(&mut self, id: usize) -> Self::Span {\n-        let resolver = self.resolver;\n-        let krate = self.krate;\n-        let expn_id = self.expn_id;\n+        let (resolver, krate, def_site) = (self.resolver, self.krate, self.def_site);\n         *self.rebased_spans.entry(id).or_insert_with(|| {\n-            let raw_span = resolver.get_proc_macro_quoted_span(krate, id);\n-            // Ignore the deserialized `SyntaxContext` entirely.\n-            // FIXME: Preserve the macro backtrace from the serialized span\n-            // For example, if a proc-macro crate has code like\n-            // `macro_one!() -> macro_two!() -> quote!()`, we might\n-            // want to 'concatenate' this backtrace with the backtrace from\n-            // our current call site.\n-            raw_span.with_def_site_ctxt(expn_id)\n+            // FIXME: `SyntaxContext` for spans from proc macro crates is lost during encoding,\n+            // replace it with a def-site context until we are encoding it properly.\n+            resolver.get_proc_macro_quoted_span(krate, id).with_ctxt(def_site.ctxt())\n         })\n     }\n }"}]}