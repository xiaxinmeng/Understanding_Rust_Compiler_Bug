{"sha": "c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDZlOGM1NGZhMGI5OWRlZmQxYmE3N2FkNGQ2NTA1YzQ5MWY0ZjM=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-19T16:58:44Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-19T20:11:40Z"}, "message": "revert workaround #73027", "tree": {"sha": "e6116aed29fde0b0173fda5563b25ce254db5628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6116aed29fde0b0173fda5563b25ce254db5628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "html_url": "https://github.com/rust-lang/rust/commit/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ca239f8019755eb67a255fbf73450bae8ad4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ca239f8019755eb67a255fbf73450bae8ad4c2", "html_url": "https://github.com/rust-lang/rust/commit/71ca239f8019755eb67a255fbf73450bae8ad4c2"}], "stats": {"total": 38, "additions": 10, "deletions": 28}, "files": [{"sha": "21023a06bb2d90a7e3932d1a24738d215db63d42", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "patch": "@@ -91,17 +91,6 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n         if let (None, Some(ty)) =\n             (self.found_local_pattern, self.node_ty_contains_target(local.hir_id))\n         {\n-            // FIXME: There's a trade-off here - we can either check that our target span\n-            // is contained in `local.span` or not. If we choose to check containment\n-            // we can avoid some spurious suggestions (see #72690), but we lose\n-            // the ability to report on things like:\n-            //\n-            // ```\n-            // let x = vec![];\n-            // ```\n-            //\n-            // because the target span will be in the macro expansion of `vec![]`.\n-            // At present we choose not to check containment.\n             self.found_local_pattern = Some(&*local.pat);\n             self.found_node_ty = Some(ty);\n         }\n@@ -113,10 +102,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n             if let (None, Some(ty)) =\n                 (self.found_arg_pattern, self.node_ty_contains_target(param.hir_id))\n             {\n-                if self.target_span.contains(param.pat.span) {\n-                    self.found_arg_pattern = Some(&*param.pat);\n-                    self.found_node_ty = Some(ty);\n-                }\n+                self.found_arg_pattern = Some(&*param.pat);\n+                self.found_node_ty = Some(ty);\n             }\n         }\n         intravisit::walk_body(self, body);"}, {"sha": "2005bd4dd5ca7e7d67e4535238f9409c49d70ee7", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "patch": "@@ -1,8 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:5\n+  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:27\n    |\n LL |     with_closure(|x: u32, y| {});\n-   |     ^^^^^^^^^^^^ cannot infer type for type parameter `B` declared on the function `with_closure`\n+   |                           ^ consider giving this closure parameter a type\n \n error: aborting due to previous error\n "}, {"sha": "a68369616d8b62a32b84bfc9a0e5b2994eae5bc8", "filename": "src/test/ui/issues/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs?ref=c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "patch": "@@ -14,7 +14,7 @@ pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR type annotations needed\n+    let ex = |x| { //~ ERROR type annotations needed\n+        let_(add(x,x), |y| {\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "12b2eb48e7eaa2987d341590f80595f040d88ba6", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c146e8c54fa0b99defd1ba77ad4d6505c491f4f3/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=c146e8c54fa0b99defd1ba77ad4d6505c491f4f3", "patch": "@@ -1,13 +1,8 @@\n-error[E0282]: type annotations needed for the closure `fn(Expr<'_, _>) -> Expr<'_, _>`\n-  --> $DIR/issue-23046.rs:18:9\n+error[E0282]: type annotations needed for `Expr<'_, VAR>`\n+  --> $DIR/issue-23046.rs:17:15\n    |\n-LL |         let_(add(x,x), |y| {\n-   |         ^^^^ cannot infer type for type parameter `VAR` declared on the function `let_`\n-   |\n-help: give this closure an explicit return type without `_` placeholders\n-   |\n-LL |             let_(add(x, x), |x|-> Expr<'_, _> { x })})};\n-   |                                ^^^^^^^^^^^^^^^^   ^\n+LL |     let ex = |x| {\n+   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n \n error: aborting due to previous error\n "}]}