{"sha": "bf16e4bc545640f7269d383edd1592737fbdc0c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMTZlNGJjNTQ1NjQwZjcyNjlkMzgzZWRkMTU5MjczN2ZiZGMwYzk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-16T19:34:55Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-16T19:34:55Z"}, "message": "Rollup merge of #49647 - kennytm:duplicated-features, r=aturon\n\nRemove `underscore_lifetimes` and `match_default_bindings` from active feature list\n\nThese are already stabilized in 1.26.", "tree": {"sha": "98450fb73c7d15d7294a9bf9e8b2715bda1695d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98450fb73c7d15d7294a9bf9e8b2715bda1695d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf16e4bc545640f7269d383edd1592737fbdc0c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrU+t8ACgkQ/vbIBR0O\nATwoEg/8CvsOTS3NxYPqG9YQcdaLZbi/Av3B5yNBsDKE8TJCs/wDl5zSQywJoXU9\nD+2BVo2RlSsndXeTCrw4hZCl5fGe6fHY9OWL0Jxl0lALTarRx5Hojsw1WK4hl3cD\nDE+PffBxTSgqav/grfR7aA3ZsjnQ3Y2jotWyaXihV3iBvoBarjbLpP0gTPWgxfH8\n6fpLySxBTMUyazi1HHf6hWhCa0RSsv/lMJeLOdr56tLYMwcpkU9jbI32THYmQBkp\niXBksTzobnMQZKxSDfaEsKLnTtL9oB2zG6Nul27kJqnOnNXWSKmsoXo9vSaNiFjo\nRIWB57hbgd4olyp5dgK2Buh5JFBmU7HOQPYf4Pleu5zjvjRuynxpl7/FuR/AHp0M\n9NbOlbgK00IhMpXn3+97uD3Y3nS4loPNBSq7Sbu9zOLskLoNuFk6Y5VWRUspbdOi\nH4aPbY8idTbWeIv0yOAdEikXrg9o1amfGjLe4df4GKxJKQ11ei1VXQfeZkX1gWcf\n5gAW+8piJUsrLBrrg5QF+uvddI8DssxeruwpbhWDX13uVgjuYX2G5g1q8IwC5EAD\nlwEzD0L2OEBKP236a0lOTv9IRE/weMs6lfFGe3R3SwCOJ8ZNXK9Wt0eBOC2kyNSx\nQCovbZ0b02WtC6iv/DH5N0IPLBrU+7NXDxyqT5FnYIzAP4spIWQ=\n=EdRq\n-----END PGP SIGNATURE-----", "payload": "tree 98450fb73c7d15d7294a9bf9e8b2715bda1695d7\nparent 932431cedadbd07892f699ac28e279b1d00e3b41\nparent 6c3e1d75553a4b2dbafb8d62a565d10a09c61fc2\nauthor kennytm <kennytm@gmail.com> 1523907295 +0800\ncommitter kennytm <kennytm@gmail.com> 1523907295 +0800\n\nRollup merge of #49647 - kennytm:duplicated-features, r=aturon\n\nRemove `underscore_lifetimes` and `match_default_bindings` from active feature list\n\nThese are already stabilized in 1.26.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf16e4bc545640f7269d383edd1592737fbdc0c9", "html_url": "https://github.com/rust-lang/rust/commit/bf16e4bc545640f7269d383edd1592737fbdc0c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf16e4bc545640f7269d383edd1592737fbdc0c9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932431cedadbd07892f699ac28e279b1d00e3b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/932431cedadbd07892f699ac28e279b1d00e3b41", "html_url": "https://github.com/rust-lang/rust/commit/932431cedadbd07892f699ac28e279b1d00e3b41"}, {"sha": "6c3e1d75553a4b2dbafb8d62a565d10a09c61fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3e1d75553a4b2dbafb8d62a565d10a09c61fc2", "html_url": "https://github.com/rust-lang/rust/commit/6c3e1d75553a4b2dbafb8d62a565d10a09c61fc2"}], "stats": {"total": 177, "additions": 129, "deletions": 48}, "files": [{"sha": "6f3e3b508853ba7c3172824222bd86a0ba6dfcb2", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 123, "deletions": 34, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=bf16e4bc545640f7269d383edd1592737fbdc0c9", "patch": "@@ -100,17 +100,28 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n-    /// assert!(!(3..5).contains(2));\n-    /// assert!( (3..5).contains(3));\n-    /// assert!( (3..5).contains(4));\n-    /// assert!(!(3..5).contains(5));\n+    /// use std::f32;\n     ///\n-    /// assert!(!(3..3).contains(3));\n-    /// assert!(!(3..2).contains(3));\n+    /// assert!(!(3..5).contains(&2));\n+    /// assert!( (3..5).contains(&3));\n+    /// assert!( (3..5).contains(&4));\n+    /// assert!(!(3..5).contains(&5));\n+    ///\n+    /// assert!(!(3..3).contains(&3));\n+    /// assert!(!(3..2).contains(&3));\n+    ///\n+    /// assert!( (0.0..1.0).contains(&0.5));\n+    /// assert!(!(0.0..1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..f32::NAN).contains(&0.5));\n+    /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n-    pub fn contains(&self, item: Idx) -> bool {\n-        (self.start <= item) && (item < self.end)\n+    pub fn contains<U>(&self, item: &U) -> bool\n+    where\n+        Idx: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<Idx>,\n+    {\n+        <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n \n     /// Returns `true` if the range contains no items.\n@@ -179,7 +190,6 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n@@ -188,12 +198,23 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n-    /// assert!(!(3..).contains(2));\n-    /// assert!( (3..).contains(3));\n-    /// assert!( (3..).contains(1_000_000_000));\n+    /// use std::f32;\n+    ///\n+    /// assert!(!(3..).contains(&2));\n+    /// assert!( (3..).contains(&3));\n+    /// assert!( (3..).contains(&1_000_000_000));\n+    ///\n+    /// assert!( (0.0..).contains(&0.5));\n+    /// assert!(!(0.0..).contains(&f32::NAN));\n+    /// assert!(!(f32::NAN..).contains(&0.5));\n     /// ```\n-    pub fn contains(&self, item: Idx) -> bool {\n-        (self.start <= item)\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    pub fn contains<U>(&self, item: &U) -> bool\n+    where\n+        Idx: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<Idx>,\n+    {\n+        <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n }\n \n@@ -250,7 +271,6 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n@@ -259,12 +279,23 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n-    /// assert!( (..5).contains(-1_000_000_000));\n-    /// assert!( (..5).contains(4));\n-    /// assert!(!(..5).contains(5));\n+    /// use std::f32;\n+    ///\n+    /// assert!( (..5).contains(&-1_000_000_000));\n+    /// assert!( (..5).contains(&4));\n+    /// assert!(!(..5).contains(&5));\n+    ///\n+    /// assert!( (..1.0).contains(&0.5));\n+    /// assert!(!(..1.0).contains(&f32::NAN));\n+    /// assert!(!(..f32::NAN).contains(&0.5));\n     /// ```\n-    pub fn contains(&self, item: Idx) -> bool {\n-        (item < self.end)\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    pub fn contains<U>(&self, item: &U) -> bool\n+    where\n+        Idx: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<Idx>,\n+    {\n+        <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n }\n \n@@ -318,18 +349,29 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n-    /// assert!(!(3..=5).contains(2));\n-    /// assert!( (3..=5).contains(3));\n-    /// assert!( (3..=5).contains(4));\n-    /// assert!( (3..=5).contains(5));\n-    /// assert!(!(3..=5).contains(6));\n+    /// use std::f32;\n+    ///\n+    /// assert!(!(3..=5).contains(&2));\n+    /// assert!( (3..=5).contains(&3));\n+    /// assert!( (3..=5).contains(&4));\n+    /// assert!( (3..=5).contains(&5));\n+    /// assert!(!(3..=5).contains(&6));\n     ///\n-    /// assert!( (3..=3).contains(3));\n-    /// assert!(!(3..=2).contains(3));\n+    /// assert!( (3..=3).contains(&3));\n+    /// assert!(!(3..=2).contains(&3));\n+    ///\n+    /// assert!( (0.0..=1.0).contains(&1.0));\n+    /// assert!(!(0.0..=1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..=f32::NAN).contains(&0.0));\n+    /// assert!(!(f32::NAN..=1.0).contains(&1.0));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n-    pub fn contains(&self, item: Idx) -> bool {\n-        self.start <= item && item <= self.end\n+    pub fn contains<U>(&self, item: &U) -> bool\n+    where\n+        Idx: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<Idx>,\n+    {\n+        <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n \n     /// Returns `true` if the range contains no items.\n@@ -431,12 +473,23 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n-    /// assert!( (..=5).contains(-1_000_000_000));\n-    /// assert!( (..=5).contains(5));\n-    /// assert!(!(..=5).contains(6));\n+    /// use std::f32;\n+    ///\n+    /// assert!( (..=5).contains(&-1_000_000_000));\n+    /// assert!( (..=5).contains(&5));\n+    /// assert!(!(..=5).contains(&6));\n+    ///\n+    /// assert!( (..=1.0).contains(&1.0));\n+    /// assert!(!(..=1.0).contains(&f32::NAN));\n+    /// assert!(!(..=f32::NAN).contains(&0.5));\n     /// ```\n-    pub fn contains(&self, item: Idx) -> bool {\n-        (item <= self.end)\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    pub fn contains<U>(&self, item: &U) -> bool\n+    where\n+        Idx: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<Idx>,\n+    {\n+        <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n }\n \n@@ -537,6 +590,42 @@ pub trait RangeBounds<T: ?Sized> {\n     /// # }\n     /// ```\n     fn end(&self) -> Bound<&T>;\n+\n+\n+    /// Returns `true` if `item` is contained in the range.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_contains)]\n+    ///\n+    /// use std::f32;\n+    ///\n+    /// assert!( (3..5).contains(&4));\n+    /// assert!(!(3..5).contains(&2));\n+    ///\n+    /// assert!( (0.0..1.0).contains(&0.5));\n+    /// assert!(!(0.0..1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..f32::NAN).contains(&0.5));\n+    /// assert!(!(f32::NAN..1.0).contains(&0.5));\n+    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    fn contains<U>(&self, item: &U) -> bool\n+    where\n+        T: PartialOrd<U>,\n+        U: ?Sized + PartialOrd<T>,\n+    {\n+        (match self.start() {\n+            Included(ref start) => *start <= item,\n+            Excluded(ref start) => *start < item,\n+            Unbounded => true,\n+        })\n+        &&\n+        (match self.end() {\n+            Included(ref end) => item <= *end,\n+            Excluded(ref end) => item < *end,\n+            Unbounded => true,\n+        })\n+    }\n }\n \n use self::Bound::{Excluded, Included, Unbounded};"}, {"sha": "91075ddcfa422ab40d532178204b806371749145", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=bf16e4bc545640f7269d383edd1592737fbdc0c9", "patch": "@@ -1389,8 +1389,8 @@ fn num_overlap(a_start: usize, a_end: usize, b_start: usize, b_end:usize, inclus\n     } else {\n         0\n     };\n-    (b_start..b_end + extra).contains(a_start) ||\n-    (a_start..a_end + extra).contains(b_start)\n+    (b_start..b_end + extra).contains(&a_start) ||\n+    (a_start..a_end + extra).contains(&b_start)\n }\n fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n     num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)"}, {"sha": "0fe6265345de1ecfa7fd6f988dae5fb9acfa42f4", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=bf16e4bc545640f7269d383edd1592737fbdc0c9", "patch": "@@ -259,18 +259,18 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n     /// True if `r` is a member of this set of universal regions.\n     pub fn is_universal_region(&self, r: RegionVid) -> bool {\n-        (FIRST_GLOBAL_INDEX..self.num_universals).contains(r.index())\n+        (FIRST_GLOBAL_INDEX..self.num_universals).contains(&r.index())\n     }\n \n     /// Classifies `r` as a universal region, returning `None` if this\n     /// is not a member of this set of universal regions.\n     pub fn region_classification(&self, r: RegionVid) -> Option<RegionClassification> {\n         let index = r.index();\n-        if (FIRST_GLOBAL_INDEX..self.first_extern_index).contains(index) {\n+        if (FIRST_GLOBAL_INDEX..self.first_extern_index).contains(&index) {\n             Some(RegionClassification::Global)\n-        } else if (self.first_extern_index..self.first_local_index).contains(index) {\n+        } else if (self.first_extern_index..self.first_local_index).contains(&index) {\n             Some(RegionClassification::External)\n-        } else if (self.first_local_index..self.num_universals).contains(index) {\n+        } else if (self.first_local_index..self.num_universals).contains(&index) {\n             Some(RegionClassification::Local)\n         } else {\n             None"}, {"sha": "49d0f638f206137c2685d65c15d110f67383588c", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=bf16e4bc545640f7269d383edd1592737fbdc0c9", "patch": "@@ -29,7 +29,6 @@\n #![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]\n-#![feature(underscore_lifetimes)]\n \n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;"}, {"sha": "4b66939963ed0a37add319284a78a58ae130fb4e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=bf16e4bc545640f7269d383edd1592737fbdc0c9", "patch": "@@ -82,7 +82,6 @@ This API is completely unstable and subject to change.\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(dyn_trait)]\n-#![feature(underscore_lifetimes)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "eaa2050f608f3c8a4ad08137c397a2b2964212e2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf16e4bc545640f7269d383edd1592737fbdc0c9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bf16e4bc545640f7269d383edd1592737fbdc0c9", "patch": "@@ -378,12 +378,6 @@ declare_features! (\n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // allow `'_` placeholder lifetimes\n-    (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n-\n-    // Default match binding modes (RFC 2005)\n-    (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n-\n     // Trait object syntax with `dyn` prefix\n     (active, dyn_trait, \"1.22.0\", Some(44662), Some(Edition::Edition2018)),\n "}]}