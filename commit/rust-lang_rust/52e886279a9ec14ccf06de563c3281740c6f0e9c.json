{"sha": "52e886279a9ec14ccf06de563c3281740c6f0e9c", "node_id": "C_kwDOAAsO6NoAKDUyZTg4NjI3OWE5ZWMxNGNjZjA2ZGU1NjNjMzI4MTc0MGM2ZjBlOWM", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-12-03T03:51:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-03T03:51:27Z"}, "message": "Rollup merge of #104903 - spastorino:consolidate-normalize-in-report_projection_error, r=lcnr\n\nUse ocx.normalize in report_projection_error\n\nr? `@lcnr`\n\ncc `@compiler-errors`", "tree": {"sha": "155ce0e8335351c4ca8a4f23bc99e2f2eb7ec86a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/155ce0e8335351c4ca8a4f23bc99e2f2eb7ec86a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e886279a9ec14ccf06de563c3281740c6f0e9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjise/CRBK7hj4Ov3rIwAA63YIAGbVpbGjZc7dWd14YjeOM1rA\nfnm8Lz341T5cacvQ2NhvbfSDpcAOOPf24lLvdI+hHYU+X0f7vYEtUFCN9Btu7g7b\n8MtdeTgZJGxkWx1uVuUB3PJjTEYBficUt+Nx5apn6AIrnu2upHJhiuhhGGy5RRxf\nxyVrZhli4fM5L/Wxej04UN6vCPKeajsBoFC6CkGZ2qxAtQHRnDHZ15yoMV+A94ro\nvI/jydaZBJthtcmCkcVbUV9KgoO99PPIfz605x2g/gO0UCAWkKZZwJUbbrrGDpEb\n7CHsVS8wrZQ/QI/8YSUGF2Dz0kV94o6UDCDdMwlkS8ZMIULi4NacpxaIfwrvHAc=\n=EhzA\n-----END PGP SIGNATURE-----\n", "payload": "tree 155ce0e8335351c4ca8a4f23bc99e2f2eb7ec86a\nparent e526d123aa4703aa7b85c5b8e70c20b5ee0deade\nparent 89047430f1233439ca666cc1b05a41ac4da924b7\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1670039487 +0900\ncommitter GitHub <noreply@github.com> 1670039487 +0900\n\nRollup merge of #104903 - spastorino:consolidate-normalize-in-report_projection_error, r=lcnr\n\nUse ocx.normalize in report_projection_error\n\nr? `@lcnr`\n\ncc `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e886279a9ec14ccf06de563c3281740c6f0e9c", "html_url": "https://github.com/rust-lang/rust/commit/52e886279a9ec14ccf06de563c3281740c6f0e9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e886279a9ec14ccf06de563c3281740c6f0e9c/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "url": "https://api.github.com/repos/rust-lang/rust/commits/e526d123aa4703aa7b85c5b8e70c20b5ee0deade", "html_url": "https://github.com/rust-lang/rust/commit/e526d123aa4703aa7b85c5b8e70c20b5ee0deade"}, {"sha": "89047430f1233439ca666cc1b05a41ac4da924b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/89047430f1233439ca666cc1b05a41ac4da924b7", "html_url": "https://github.com/rust-lang/rust/commit/89047430f1233439ca666cc1b05a41ac4da924b7"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "c028e89e4ea2963f093b48240a8f98ca613199d3", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52e886279a9ec14ccf06de563c3281740c6f0e9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e886279a9ec14ccf06de563c3281740c6f0e9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=52e886279a9ec14ccf06de563c3281740c6f0e9c", "patch": "@@ -112,6 +112,24 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         self.register_infer_ok_obligations(infer_ok)\n     }\n \n+    /// Makes `expected <: actual`.\n+    pub fn eq_exp<T>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        a_is_expected: bool,\n+        a: T,\n+        b: T,\n+    ) -> Result<(), TypeError<'tcx>>\n+    where\n+        T: ToTrace<'tcx>,\n+    {\n+        self.infcx\n+            .at(cause, param_env)\n+            .eq_exp(a_is_expected, a, b)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n+    }\n+\n     pub fn eq<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "84e951e80230b004e5159e25d5a7bd600deef9a3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/52e886279a9ec14ccf06de563c3281740c6f0e9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e886279a9ec14ccf06de563c3281740c6f0e9c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=52e886279a9ec14ccf06de563c3281740c6f0e9c", "patch": "@@ -1577,32 +1577,26 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n \n         self.probe(|_| {\n-            let mut err = error.err;\n-            let mut values = None;\n+            let ocx = ObligationCtxt::new_in_snapshot(self);\n \n             // try to find the mismatched types to report the error with.\n             //\n             // this can fail if the problem was higher-ranked, in which\n             // cause I have no idea for a good error message.\n             let bound_predicate = predicate.kind();\n-            if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n+            let (values, err) = if let ty::PredicateKind::Clause(ty::Clause::Projection(data)) =\n                 bound_predicate.skip_binder()\n             {\n-                let mut selcx = SelectionContext::new(self);\n                 let data = self.replace_bound_vars_with_fresh_vars(\n                     obligation.cause.span,\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),\n                 );\n-                let mut obligations = vec![];\n-                // FIXME(normalization): Change this to use `At::normalize`\n-                let normalized_ty = super::normalize_projection_type(\n-                    &mut selcx,\n+                let normalized_ty = ocx.normalize(\n+                    &obligation.cause,\n                     obligation.param_env,\n-                    data.projection_ty,\n-                    obligation.cause.clone(),\n-                    0,\n-                    &mut obligations,\n+                    self.tcx\n+                        .mk_projection(data.projection_ty.item_def_id, data.projection_ty.substs),\n                 );\n \n                 debug!(?obligation.cause, ?obligation.param_env);\n@@ -1618,19 +1612,34 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                if let Err(new_err) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n+                let expected_ty = data.term.ty().unwrap();\n+\n+                // constrain inference variables a bit more to nested obligations from normalize so\n+                // we can have more helpful errors.\n+                ocx.select_where_possible();\n+\n+                if let Err(new_err) = ocx.eq_exp(\n+                    &obligation.cause,\n+                    obligation.param_env,\n                     is_normalized_ty_expected,\n                     normalized_ty,\n-                    data.term,\n+                    expected_ty,\n                 ) {\n-                    values = Some((data, is_normalized_ty_expected, normalized_ty, data.term));\n-                    err = new_err;\n+                    (Some((data, is_normalized_ty_expected, normalized_ty, expected_ty)), new_err)\n+                } else {\n+                    (None, error.err)\n                 }\n-            }\n+            } else {\n+                (None, error.err)\n+            };\n \n             let msg = values\n                 .and_then(|(predicate, _, normalized_ty, expected_ty)| {\n-                    self.maybe_detailed_projection_msg(predicate, normalized_ty, expected_ty)\n+                    self.maybe_detailed_projection_msg(\n+                        predicate,\n+                        normalized_ty.into(),\n+                        expected_ty.into(),\n+                    )\n                 })\n                 .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");\n@@ -1672,11 +1681,11 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 &mut diag,\n                 &obligation.cause,\n                 secondary_span,\n-                values.map(|(_, is_normalized_ty_expected, normalized_ty, term)| {\n+                values.map(|(_, is_normalized_ty_expected, normalized_ty, expected_ty)| {\n                     infer::ValuePairs::Terms(ExpectedFound::new(\n                         is_normalized_ty_expected,\n-                        normalized_ty,\n-                        term,\n+                        normalized_ty.into(),\n+                        expected_ty.into(),\n                     ))\n                 }),\n                 err,"}]}