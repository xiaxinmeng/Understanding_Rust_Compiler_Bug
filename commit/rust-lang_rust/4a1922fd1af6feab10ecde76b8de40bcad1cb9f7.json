{"sha": "4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "node_id": "C_kwDOAAsO6NoAKDRhMTkyMmZkMWFmNmZlYWIxMGVjZGU3NmI4ZGU0MGJjYWQxY2I5Zjc", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-04T23:28:15Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T07:49:23Z"}, "message": "Depend on nohash-hasher individually", "tree": {"sha": "fad7fa79432c98f60858346f48f2189aeca2f639", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad7fa79432c98f60858346f48f2189aeca2f639"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "html_url": "https://github.com/rust-lang/rust/commit/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d678cf6a04d52fca7c593b39fc9a8f772b08b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d678cf6a04d52fca7c593b39fc9a8f772b08b55", "html_url": "https://github.com/rust-lang/rust/commit/1d678cf6a04d52fca7c593b39fc9a8f772b08b55"}], "stats": {"total": 105, "additions": 53, "deletions": 52}, "files": [{"sha": "f20cba98655f5b7a2005a01fee17ef4df36954c9", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -587,6 +587,7 @@ dependencies = [\n  \"itertools\",\n  \"la-arena\",\n  \"limit\",\n+ \"nohash-hasher\",\n  \"once_cell\",\n  \"profile\",\n  \"project-model\",\n@@ -650,6 +651,7 @@ dependencies = [\n  \"ide-diagnostics\",\n  \"ide-ssr\",\n  \"itertools\",\n+ \"nohash-hasher\",\n  \"oorandom\",\n  \"profile\",\n  \"pulldown-cmark\",\n@@ -719,6 +721,7 @@ dependencies = [\n  \"limit\",\n  \"line-index\",\n  \"memchr\",\n+ \"nohash-hasher\",\n  \"once_cell\",\n  \"oorandom\",\n  \"parser\",\n@@ -764,6 +767,7 @@ dependencies = [\n  \"hir\",\n  \"ide-db\",\n  \"itertools\",\n+ \"nohash-hasher\",\n  \"parser\",\n  \"stdx\",\n  \"syntax\",\n@@ -1485,6 +1489,7 @@ dependencies = [\n  \"mbe\",\n  \"mimalloc\",\n  \"mio\",\n+ \"nohash-hasher\",\n  \"num_cpus\",\n  \"oorandom\",\n  \"parking_lot 0.12.1\",\n@@ -1708,7 +1713,6 @@ dependencies = [\n  \"backtrace\",\n  \"libc\",\n  \"miow\",\n- \"nohash-hasher\",\n  \"winapi\",\n ]\n \n@@ -2066,6 +2070,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"fst\",\n  \"indexmap\",\n+ \"nohash-hasher\",\n  \"paths\",\n  \"rustc-hash\",\n  \"stdx\","}, {"sha": "6ca0dbb850399b8dfe1428d6819e4109a69616fb", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -29,6 +29,7 @@ chalk-derive = \"0.89.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n once_cell = \"1.17.0\"\n triomphe.workspace = true\n+nohash-hasher.workspace = true\n typed-arena = \"2.0.1\"\n rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n "}, {"sha": "7d19e0a19169a314d82f94d49c4939d6a2bb2213", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -8,8 +8,8 @@ use base_db::{\n };\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::ExpandDatabase;\n+use nohash_hasher::IntMap;\n use rustc_hash::FxHashSet;\n-use stdx::hash::NoHashHashMap;\n use syntax::TextRange;\n use test_utils::extract_annotations;\n use triomphe::Arc;\n@@ -102,7 +102,7 @@ impl TestDB {\n         self.module_for_file_opt(file_id).unwrap()\n     }\n \n-    pub(crate) fn extract_annotations(&self) -> NoHashHashMap<FileId, Vec<(TextRange, String)>> {\n+    pub(crate) fn extract_annotations(&self) -> IntMap<FileId, Vec<(TextRange, String)>> {\n         let mut files = Vec::new();\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {"}, {"sha": "4e75dc4dba5410ee087b6bf2e3c7b560b03ba001", "filename": "crates/ide-db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -24,6 +24,7 @@ arrayvec = \"0.7.2\"\n indexmap = \"1.9.1\"\n memchr = \"2.5.0\"\n triomphe.workspace = true\n+nohash-hasher.workspace = true\n \n # local deps\n base-db.workspace = true"}, {"sha": "9d00c7170975dd7ef9776534785c89c3eae3dc2d", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -11,9 +11,9 @@ use hir::{\n     AsAssocItem, DefWithBody, HasAttrs, HasSource, InFile, ModuleSource, Semantics, Visibility,\n };\n use memchr::memmem::Finder;\n+use nohash_hasher::IntMap;\n use once_cell::unsync::Lazy;\n use parser::SyntaxKind;\n-use stdx::hash::NoHashHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n use triomphe::Arc;\n \n@@ -25,7 +25,7 @@ use crate::{\n \n #[derive(Debug, Default, Clone)]\n pub struct UsageSearchResult {\n-    pub references: NoHashHashMap<FileId, Vec<FileReference>>,\n+    pub references: IntMap<FileId, Vec<FileReference>>,\n }\n \n impl UsageSearchResult {\n@@ -50,7 +50,7 @@ impl UsageSearchResult {\n \n impl IntoIterator for UsageSearchResult {\n     type Item = (FileId, Vec<FileReference>);\n-    type IntoIter = <NoHashHashMap<FileId, Vec<FileReference>> as IntoIterator>::IntoIter;\n+    type IntoIter = <IntMap<FileId, Vec<FileReference>> as IntoIterator>::IntoIter;\n \n     fn into_iter(self) -> Self::IntoIter {\n         self.references.into_iter()\n@@ -84,17 +84,17 @@ pub enum ReferenceCategory {\n /// e.g. for things like local variables.\n #[derive(Clone, Debug)]\n pub struct SearchScope {\n-    entries: NoHashHashMap<FileId, Option<TextRange>>,\n+    entries: IntMap<FileId, Option<TextRange>>,\n }\n \n impl SearchScope {\n-    fn new(entries: NoHashHashMap<FileId, Option<TextRange>>) -> SearchScope {\n+    fn new(entries: IntMap<FileId, Option<TextRange>>) -> SearchScope {\n         SearchScope { entries }\n     }\n \n     /// Build a search scope spanning the entire crate graph of files.\n     fn crate_graph(db: &RootDatabase) -> SearchScope {\n-        let mut entries = NoHashHashMap::default();\n+        let mut entries = IntMap::default();\n \n         let graph = db.crate_graph();\n         for krate in graph.iter() {\n@@ -108,7 +108,7 @@ impl SearchScope {\n \n     /// Build a search scope spanning all the reverse dependencies of the given crate.\n     fn reverse_dependencies(db: &RootDatabase, of: hir::Crate) -> SearchScope {\n-        let mut entries = NoHashHashMap::default();\n+        let mut entries = IntMap::default();\n         for rev_dep in of.transitive_reverse_dependencies(db) {\n             let root_file = rev_dep.root_file(db);\n             let source_root_id = db.file_source_root(root_file);\n@@ -128,7 +128,7 @@ impl SearchScope {\n \n     /// Build a search scope spanning the given module and all its submodules.\n     fn module_and_children(db: &RootDatabase, module: hir::Module) -> SearchScope {\n-        let mut entries = NoHashHashMap::default();\n+        let mut entries = IntMap::default();\n \n         let (file_id, range) = {\n             let InFile { file_id, value } = module.definition_source(db);\n@@ -161,7 +161,7 @@ impl SearchScope {\n \n     /// Build an empty search scope.\n     pub fn empty() -> SearchScope {\n-        SearchScope::new(NoHashHashMap::default())\n+        SearchScope::new(IntMap::default())\n     }\n \n     /// Build a empty search scope spanning the given file."}, {"sha": "061fb0f05cfb91964614b7ca57ad7fbe1cba052f", "filename": "crates/ide-db/src/source_change.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsource_change.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -5,16 +5,16 @@\n \n use std::{collections::hash_map::Entry, iter, mem};\n \n+use crate::SnippetCap;\n use base_db::{AnchoredPathBuf, FileId};\n-use stdx::{hash::NoHashHashMap, never};\n+use nohash_hasher::IntMap;\n+use stdx::never;\n use syntax::{algo, ast, ted, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n use text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::SnippetCap;\n-\n #[derive(Default, Debug, Clone)]\n pub struct SourceChange {\n-    pub source_file_edits: NoHashHashMap<FileId, TextEdit>,\n+    pub source_file_edits: IntMap<FileId, TextEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub is_snippet: bool,\n }\n@@ -23,7 +23,7 @@ impl SourceChange {\n     /// Creates a new SourceChange with the given label\n     /// from the edits.\n     pub fn from_edits(\n-        source_file_edits: NoHashHashMap<FileId, TextEdit>,\n+        source_file_edits: IntMap<FileId, TextEdit>,\n         file_system_edits: Vec<FileSystemEdit>,\n     ) -> Self {\n         SourceChange { source_file_edits, file_system_edits, is_snippet: false }\n@@ -77,8 +77,8 @@ impl Extend<FileSystemEdit> for SourceChange {\n     }\n }\n \n-impl From<NoHashHashMap<FileId, TextEdit>> for SourceChange {\n-    fn from(source_file_edits: NoHashHashMap<FileId, TextEdit>) -> SourceChange {\n+impl From<IntMap<FileId, TextEdit>> for SourceChange {\n+    fn from(source_file_edits: IntMap<FileId, TextEdit>) -> SourceChange {\n         SourceChange { source_file_edits, file_system_edits: Vec::new(), is_snippet: false }\n     }\n }"}, {"sha": "70ed6dea5bf2814b9c45438392bd5cf569d4d0cf", "filename": "crates/ide-ssr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-ssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-ssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -16,6 +16,7 @@ doctest = false\n cov-mark = \"2.0.0-pre.1\"\n itertools = \"0.10.5\"\n triomphe.workspace = true\n+nohash-hasher.workspace = true\n \n # local deps\n hir.workspace = true"}, {"sha": "f51a9547a5084afe2ee7e54000c29535e7b04b36", "filename": "crates/ide-ssr/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide-ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Flib.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -87,8 +87,8 @@ pub use crate::{errors::SsrError, from_comment::ssr_from_comment, matching::Matc\n use crate::{errors::bail, matching::MatchFailureReason};\n use hir::Semantics;\n use ide_db::base_db::{FileId, FilePosition, FileRange};\n+use nohash_hasher::IntMap;\n use resolving::ResolvedRule;\n-use stdx::hash::NoHashHashMap;\n use syntax::{ast, AstNode, SyntaxNode, TextRange};\n use text_edit::TextEdit;\n \n@@ -168,9 +168,9 @@ impl<'db> MatchFinder<'db> {\n     }\n \n     /// Finds matches for all added rules and returns edits for all found matches.\n-    pub fn edits(&self) -> NoHashHashMap<FileId, TextEdit> {\n+    pub fn edits(&self) -> IntMap<FileId, TextEdit> {\n         use ide_db::base_db::SourceDatabaseExt;\n-        let mut matches_by_file = NoHashHashMap::default();\n+        let mut matches_by_file = IntMap::default();\n         for m in self.matches().matches {\n             matches_by_file\n                 .entry(m.range.file_id)"}, {"sha": "2aee203c4ea5497f1167eb7e350b6d5023cbd769", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -24,6 +24,7 @@ url = \"2.3.1\"\n dot = \"0.1.4\"\n smallvec.workspace = true\n triomphe.workspace = true\n+nohash-hasher.workspace = true\n \n # local deps\n cfg.workspace = true"}, {"sha": "291b1a349b3471b1bc3c9bd7a2c4c17542166e43", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -17,7 +17,7 @@ use ide_db::{\n     RootDatabase,\n };\n use itertools::Itertools;\n-use stdx::hash::NoHashHashMap;\n+use nohash_hasher::IntMap;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, HasName},\n@@ -31,7 +31,7 @@ use crate::{FilePosition, NavigationTarget, TryToNav};\n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n     pub declaration: Option<Declaration>,\n-    pub references: NoHashHashMap<FileId, Vec<(TextRange, Option<ReferenceCategory>)>>,\n+    pub references: IntMap<FileId, Vec<(TextRange, Option<ReferenceCategory>)>>,\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "ae5b8e4c422551b5e26c2e25c7acfd9ea281de28", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -46,6 +46,7 @@ tracing-subscriber = { version = \"0.3.16\", default-features = false, features =\n tracing-log = \"0.1.3\"\n tracing-tree = \"0.2.1\"\n triomphe.workspace = true\n+nohash-hasher.workspace = true\n always-assert = \"0.1.2\"\n \n # These dependencies are unused, but we pin them to a version here to restrict them for our transitive dependencies\n@@ -95,7 +96,4 @@ mbe.workspace = true\n [features]\n jemalloc = [\"jemallocator\", \"profile/jemalloc\"]\n force-always-assert = [\"always-assert/force\"]\n-in-rust-tree = [\n-    \"ide/in-rust-tree\",\n-    \"syntax/in-rust-tree\",\n-]\n+in-rust-tree = [\"ide/in-rust-tree\", \"syntax/in-rust-tree\"]"}, {"sha": "33422fd058ef016f561befa4fddfe535d923ce0e", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -5,12 +5,12 @@ use std::mem;\n \n use ide::FileId;\n use ide_db::FxHashMap;\n-use stdx::hash::{NoHashHashMap, NoHashHashSet};\n+use nohash_hasher::{IntMap, IntSet};\n use triomphe::Arc;\n \n use crate::lsp_ext;\n \n-pub(crate) type CheckFixes = Arc<NoHashHashMap<usize, NoHashHashMap<FileId, Vec<Fix>>>>;\n+pub(crate) type CheckFixes = Arc<IntMap<usize, IntMap<FileId, Vec<Fix>>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsMapConfig {\n@@ -21,12 +21,12 @@ pub struct DiagnosticsMapConfig {\n \n #[derive(Debug, Default, Clone)]\n pub(crate) struct DiagnosticCollection {\n-    // FIXME: should be NoHashHashMap<FileId, Vec<ra_id::Diagnostic>>\n-    pub(crate) native: NoHashHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    // FIXME: should be IntMap<FileId, Vec<ra_id::Diagnostic>>\n+    pub(crate) native: IntMap<FileId, Vec<lsp_types::Diagnostic>>,\n     // FIXME: should be Vec<flycheck::Diagnostic>\n-    pub(crate) check: NoHashHashMap<usize, NoHashHashMap<FileId, Vec<lsp_types::Diagnostic>>>,\n+    pub(crate) check: IntMap<usize, IntMap<FileId, Vec<lsp_types::Diagnostic>>>,\n     pub(crate) check_fixes: CheckFixes,\n-    changes: NoHashHashSet<FileId>,\n+    changes: IntSet<FileId>,\n }\n \n #[derive(Debug, Clone)]\n@@ -106,7 +106,7 @@ impl DiagnosticCollection {\n         native.chain(check)\n     }\n \n-    pub(crate) fn take_changes(&mut self) -> Option<NoHashHashSet<FileId>> {\n+    pub(crate) fn take_changes(&mut self) -> Option<IntSet<FileId>> {\n         if self.changes.is_empty() {\n             return None;\n         }"}, {"sha": "9535d88454f403fe28492536b7c58f65e6b2f4b5", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -10,11 +10,11 @@ use flycheck::FlycheckHandle;\n use ide::{Analysis, AnalysisHost, Cancellable, Change, FileId};\n use ide_db::base_db::{CrateId, FileLoader, ProcMacroPaths, SourceDatabase};\n use lsp_types::{SemanticTokens, Url};\n+use nohash_hasher::IntMap;\n use parking_lot::{Mutex, RwLock};\n use proc_macro_api::ProcMacroServer;\n use project_model::{CargoWorkspace, ProjectWorkspace, Target, WorkspaceBuildScripts};\n use rustc_hash::FxHashMap;\n-use stdx::hash::NoHashHashMap;\n use triomphe::Arc;\n use vfs::AnchoredPathBuf;\n \n@@ -70,7 +70,7 @@ pub(crate) struct GlobalState {\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n     pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n \n-    pub(crate) vfs: Arc<RwLock<(vfs::Vfs, NoHashHashMap<FileId, LineEndings>)>>,\n+    pub(crate) vfs: Arc<RwLock<(vfs::Vfs, IntMap<FileId, LineEndings>)>>,\n     pub(crate) vfs_config_version: u32,\n     pub(crate) vfs_progress_config_version: u32,\n     pub(crate) vfs_progress_n_total: usize,\n@@ -117,7 +117,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) check_fixes: CheckFixes,\n     mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n-    vfs: Arc<RwLock<(vfs::Vfs, NoHashHashMap<FileId, LineEndings>)>>,\n+    vfs: Arc<RwLock<(vfs::Vfs, IntMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n     // used to signal semantic highlighting to fall back to syntax based highlighting until proc-macros have been loaded\n     pub(crate) proc_macros_loaded: bool,\n@@ -170,7 +170,7 @@ impl GlobalState {\n             flycheck_sender,\n             flycheck_receiver,\n \n-            vfs: Arc::new(RwLock::new((vfs::Vfs::default(), NoHashHashMap::default()))),\n+            vfs: Arc::new(RwLock::new((vfs::Vfs::default(), IntMap::default()))),\n             vfs_config_version: 0,\n             vfs_progress_config_version: 0,\n             vfs_progress_n_total: 0,"}, {"sha": "c881f2fd3f45e075f97c5382ee91dbf24fb08ff9", "filename": "crates/stdx/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -15,7 +15,6 @@ doctest = false\n libc = \"0.2.135\"\n backtrace = { version = \"0.3.65\", optional = true }\n always-assert = { version = \"0.1.2\", features = [\"log\"] }\n-nohash-hasher.workspace = true\n # Think twice before adding anything here\n \n [target.'cfg(windows)'.dependencies]"}, {"sha": "66e6c9462b6af72d07d632e8d23092ff718e5f62", "filename": "crates/stdx/src/hash.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d678cf6a04d52fca7c593b39fc9a8f772b08b55/crates%2Fstdx%2Fsrc%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d678cf6a04d52fca7c593b39fc9a8f772b08b55/crates%2Fstdx%2Fsrc%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fhash.rs?ref=1d678cf6a04d52fca7c593b39fc9a8f772b08b55", "patch": "@@ -1,5 +0,0 @@\n-//! Re-exports from [`nohash_hasher`].\n-\n-pub use nohash_hasher::IntMap as NoHashHashMap;\n-pub use nohash_hasher::IntSet as NoHashHashSet;\n-pub use nohash_hasher::IsEnabled;"}, {"sha": "8df86e810047f6b548bcce6b266b49ba93081bd9", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -7,7 +7,6 @@ use std::process::Command;\n use std::{cmp::Ordering, ops, time::Instant};\n \n mod macros;\n-pub mod hash;\n pub mod process;\n pub mod panic_context;\n pub mod non_empty_vec;"}, {"sha": "3ae3dc83ca9b373f52cd355ce6c281144bd49dcf", "filename": "crates/vfs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fvfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fvfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2FCargo.toml?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -15,6 +15,7 @@ doctest = false\n rustc-hash = \"1.1.0\"\n fst = \"0.4.7\"\n indexmap = \"1.9.1\"\n+nohash-hasher.workspace = true\n \n paths.workspace = true\n stdx.workspace = true"}, {"sha": "0392ef3cebe96b698011f1b86516fcea8b3c73a3", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -5,16 +5,16 @@\n use std::fmt;\n \n use fst::{IntoStreamer, Streamer};\n+use nohash_hasher::IntMap;\n use rustc_hash::FxHashMap;\n-use stdx::hash::NoHashHashMap;\n \n use crate::{AnchoredPath, FileId, Vfs, VfsPath};\n \n /// A set of [`VfsPath`]s identified by [`FileId`]s.\n #[derive(Default, Clone, Eq, PartialEq)]\n pub struct FileSet {\n     files: FxHashMap<VfsPath, FileId>,\n-    paths: NoHashHashMap<FileId, VfsPath>,\n+    paths: IntMap<FileId, VfsPath>,\n }\n \n impl FileSet {"}, {"sha": "ff8a2b967338995741f2de11849aa31204a1c58d", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -63,7 +63,7 @@ pub use paths::{AbsPath, AbsPathBuf};\n pub struct FileId(pub u32);\n \n /// safe because `FileId` is a newtype of `u32`\n-impl stdx::hash::IsEnabled for FileId {}\n+impl nohash_hasher::IsEnabled for FileId {}\n \n /// Storage for all files read by rust-analyzer.\n ///"}, {"sha": "fa5cf1503fed32539c5647109aa21263c534cb63", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1922fd1af6feab10ecde76b8de40bcad1cb9f7/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=4a1922fd1af6feab10ecde76b8de40bcad1cb9f7", "patch": "@@ -5,7 +5,7 @@\n #[cfg(test)]\n mod tests;\n \n-use nohash_hasher::IntMap as NoHashHashMap;\n+use nohash_hasher::IntMap;\n \n pub use text_size::{TextRange, TextSize};\n \n@@ -15,7 +15,7 @@ pub struct LineIndex {\n     /// Offset the beginning of each line, zero-based.\n     newlines: Vec<TextSize>,\n     /// List of non-ASCII characters on each line.\n-    line_wide_chars: NoHashHashMap<u32, Vec<WideChar>>,\n+    line_wide_chars: IntMap<u32, Vec<WideChar>>,\n }\n \n /// Line/Column information in native, utf8 format.\n@@ -80,7 +80,7 @@ impl WideChar {\n impl LineIndex {\n     /// Returns a `LineIndex` for the `text`.\n     pub fn new(text: &str) -> LineIndex {\n-        let mut line_wide_chars = NoHashHashMap::default();\n+        let mut line_wide_chars = IntMap::default();\n         let mut wide_chars = Vec::new();\n \n         let mut newlines = Vec::with_capacity(16);"}]}