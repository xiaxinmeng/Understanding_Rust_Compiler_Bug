{"sha": "ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOTY3N2M4MmY1OTJhN2Q2ZDI1YTVlMzQ1MWYxZjljZGE1NWU3NTQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-11-11T11:15:38Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-21T20:54:55Z"}, "message": "Readjust const qualification to detect statics again", "tree": {"sha": "ea1dec3a68f2607b1e29d95dbed4c1e42b4cab40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1dec3a68f2607b1e29d95dbed4c1e42b4cab40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "html_url": "https://github.com/rust-lang/rust/commit/ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d04cc1d87d990c12da5c816dee412704b38d7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d04cc1d87d990c12da5c816dee412704b38d7f", "html_url": "https://github.com/rust-lang/rust/commit/a1d04cc1d87d990c12da5c816dee412704b38d7f"}], "stats": {"total": 74, "additions": 46, "deletions": 28}, "files": [{"sha": "dd27a592004468cb1315505ec3131e3c2e71f92a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "patch": "@@ -7,7 +7,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir;\n-use crate::mir::interpret::{PanicInfo, Scalar};\n+use crate::mir::interpret::{ConstValue, GlobalAlloc, PanicInfo, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -2341,6 +2341,24 @@ pub struct Constant<'tcx> {\n     pub literal: &'tcx ty::Const<'tcx>,\n }\n \n+impl Constant<'tcx> {\n+    pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n+        match self.literal.val {\n+            ConstValue::Scalar(Scalar::Ptr(ptr)) => match tcx.alloc_map.lock().get(ptr.alloc_id) {\n+                Some(GlobalAlloc::Static(def_id)) => Some(def_id),\n+                Some(_) => None,\n+                None => {\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP, \"MIR cannot contain dangling const pointers\",\n+                    );\n+                    None\n+                },\n+            },\n+            _ => None,\n+        }\n+    }\n+}\n+\n /// A collection of projections into user types.\n ///\n /// They are projections because a binding can occur a part of a"}, {"sha": "9ed1ca740b8e727e94853f61dc622743d94156a9", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "patch": "@@ -2,6 +2,7 @@\n \n use rustc::mir::*;\n use rustc::ty::{self, Ty};\n+use rustc::hir::def_id::DefId;\n use syntax_pos::DUMMY_SP;\n \n use super::{ConstKind, Item as ConstCx};\n@@ -32,7 +33,7 @@ pub trait Qualif {\n     /// of the type.\n     fn in_any_value_of_ty(_cx: &ConstCx<'_, 'tcx>, _ty: Ty<'tcx>) -> bool;\n \n-    fn in_static(_cx: &ConstCx<'_, 'tcx>, _static: &Static<'tcx>) -> bool {\n+    fn in_static(_cx: &ConstCx<'_, 'tcx>, _def_id: DefId) -> bool {\n         // FIXME(eddyb) should we do anything here for value properties?\n         false\n     }\n@@ -86,18 +87,9 @@ pub trait Qualif {\n                 projection: [],\n             } => per_local(*local),\n             PlaceRef {\n-                base: PlaceBase::Static(box Static {\n-                    kind: StaticKind::Promoted(..),\n-                    ..\n-                }),\n+                base: PlaceBase::Static(_),\n                 projection: [],\n             } => bug!(\"qualifying already promoted MIR\"),\n-            PlaceRef {\n-                base: PlaceBase::Static(static_),\n-                projection: [],\n-            } => {\n-                Self::in_static(cx, static_)\n-            },\n             PlaceRef {\n                 base: _,\n                 projection: [.., _],\n@@ -115,7 +107,9 @@ pub trait Qualif {\n             Operand::Move(ref place) => Self::in_place(cx, per_local, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n-                if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n+                if let Some(static_) = constant.check_static_ptr(cx.tcx) {\n+                    Self::in_static(cx, static_)\n+                } else if let ty::ConstKind::Unevaluated(def_id, _) = constant.literal.val {\n                     // Don't peek inside trait associated constants.\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)"}, {"sha": "61de6b185e32db105911dbfe43064a34a66f35ff", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "patch": "@@ -408,12 +408,21 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n \n         match place_base {\n             PlaceBase::Local(_) => {}\n-            PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_, _), .. }) => {\n+            PlaceBase::Static(_) => {\n                 bug!(\"Promotion must be run after const validation\");\n             }\n+        }\n+    }\n \n-            PlaceBase::Static(box Static{ kind: StaticKind::Static, def_id, .. }) => {\n-                let is_thread_local = self.tcx.has_attr(*def_id, sym::thread_local);\n+    fn visit_operand(\n+        &mut self,\n+        op: &Operand<'tcx>,\n+        location: Location,\n+    ) {\n+        self.super_operand(op, location);\n+        if let Operand::Constant(c) = op {\n+            if let Some(def_id) = c.check_static_ptr(self.tcx) {\n+                let is_thread_local = self.tcx.has_attr(def_id, sym::thread_local);\n                 if is_thread_local {\n                     self.check_op(ops::ThreadLocalAccess);\n                 } else if self.const_kind() != ConstKind::Static || !context.is_mutating_use() {"}, {"sha": "65fc7cd20439d55c703337707a3cba8dc233405b", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "patch": "@@ -249,7 +249,10 @@ fn check_operand(\n         Operand::Move(place) | Operand::Copy(place) => {\n             check_place(tcx, place, span, def_id, body)\n         }\n-        Operand::Constant(_) => Ok(()),\n+        Operand::Constant(c) => match c.check_static_ptr(tcx) {\n+            Some(_) => Err((span, \"cannot access `static` items in const fn\".into())),\n+            None => Ok(()),\n+        },\n     }\n }\n \n@@ -285,13 +288,7 @@ fn check_place(\n         }\n     }\n \n-    match place.base {\n-        PlaceBase::Static(box Static { kind: StaticKind::Static, .. }) => {\n-            Err((span, \"cannot access `static` items in const fn\".into()))\n-        }\n-        PlaceBase::Local(_)\n-        | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_, _), .. }) => Ok(()),\n-    }\n+    Ok(())\n }\n \n /// Returns whether `allow_internal_unstable(..., <feature_gate>, ...)` is present."}, {"sha": "2d4175ea8eb7da4c4af5bbd19768664e08e89683", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "patch": "@@ -11,10 +11,10 @@ LL |     Y\n    |     ^\n \n error[E0013]: constant functions cannot refer to statics, use a constant instead\n-  --> $DIR/const-fn-not-safe-for-const.rs:25:5\n+  --> $DIR/const-fn-not-safe-for-const.rs:25:6\n    |\n LL |     &Y\n-   |     ^^\n+   |      ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cb1663ed22f9593fca18305b0100b9d0308e8f96", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae9677c82f592a7d6d25a5e3451f1f9cda55e754/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=ae9677c82f592a7d6d25a5e3451f1f9cda55e754", "patch": "@@ -116,10 +116,10 @@ LL | const fn foo25() -> u32 { BAR }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n-  --> $DIR/min_const_fn.rs:91:36\n+  --> $DIR/min_const_fn.rs:91:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n-   |                                    ^^^^\n+   |                                     ^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable"}]}