{"sha": "9a8b80762b4369772ae3f99a96efed1f3bdf8c1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOGI4MDc2MmI0MzY5NzcyYWUzZjk5YTk2ZWZlZDFmM2JkZjhjMWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T23:01:47Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T23:01:47Z"}, "message": "trans: Pass newtypes of immediates as their inner-most type again.", "tree": {"sha": "2e706045074b69857aa2081a3d4eb5923568153a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e706045074b69857aa2081a3d4eb5923568153a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a8b80762b4369772ae3f99a96efed1f3bdf8c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a8b80762b4369772ae3f99a96efed1f3bdf8c1b", "html_url": "https://github.com/rust-lang/rust/commit/9a8b80762b4369772ae3f99a96efed1f3bdf8c1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a8b80762b4369772ae3f99a96efed1f3bdf8c1b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a141a5506ae499367c67e147688d049dd96efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/02a141a5506ae499367c67e147688d049dd96efb", "html_url": "https://github.com/rust-lang/rust/commit/02a141a5506ae499367c67e147688d049dd96efb"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "39ecae4175080407d8dee77de014824426296c5b", "filename": "src/librustc_trans/trans/abi.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a8b80762b4369772ae3f99a96efed1f3bdf8c1b/src%2Flibrustc_trans%2Ftrans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a8b80762b4369772ae3f99a96efed1f3bdf8c1b/src%2Flibrustc_trans%2Ftrans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fabi.rs?ref=9a8b80762b4369772ae3f99a96efed1f3bdf8c1b", "patch": "@@ -378,11 +378,27 @@ impl FnType {\n         if abi == Abi::Rust || abi == Abi::RustCall ||\n            abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             let fixup = |arg: &mut ArgType| {\n-                if !arg.ty.is_aggregate() {\n+                let mut llty = arg.ty;\n+\n+                // Replace newtypes with their inner-most type.\n+                while llty.kind() == llvm::TypeKind::Struct {\n+                    let inner = llty.field_types();\n+                    if inner.len() != 1 {\n+                        break;\n+                    }\n+                    llty = inner[0];\n+                }\n+\n+                if !llty.is_aggregate() {\n                     // Scalars and vectors, always immediate.\n+                    if llty != arg.ty {\n+                        // Needs a cast as we've unpacked a newtype.\n+                        arg.cast = Some(llty);\n+                    }\n                     return;\n                 }\n-                let size = llsize_of_real(ccx, arg.ty);\n+\n+                let size = llsize_of_real(ccx, llty);\n                 if size > llsize_of_real(ccx, ccx.int_type()) {\n                     arg.make_indirect(ccx);\n                 } else if size > 0 {"}]}