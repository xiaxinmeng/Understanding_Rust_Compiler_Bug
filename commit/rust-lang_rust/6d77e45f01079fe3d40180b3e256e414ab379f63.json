{"sha": "6d77e45f01079fe3d40180b3e256e414ab379f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNzdlNDVmMDEwNzlmZTNkNDAxODBiM2UyNTZlNDE0YWIzNzlmNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-04T17:48:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-04T17:48:19Z"}, "message": "Auto merge of #66866 - oli-obk:const_fn_memoization, r=RalfJung\n\nOnly memoize const fn calls during const eval\n\nMiri and other engines may want to execute the function in order to detect UB inside of them.\n\nr? @RalfJung", "tree": {"sha": "6ebdc54c14baad74166c12baf04a690d8f197f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ebdc54c14baad74166c12baf04a690d8f197f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d77e45f01079fe3d40180b3e256e414ab379f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d77e45f01079fe3d40180b3e256e414ab379f63", "html_url": "https://github.com/rust-lang/rust/commit/6d77e45f01079fe3d40180b3e256e414ab379f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d77e45f01079fe3d40180b3e256e414ab379f63/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f130493564b23e78628af25201e7e2260849f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f130493564b23e78628af25201e7e2260849f6", "html_url": "https://github.com/rust-lang/rust/commit/c4f130493564b23e78628af25201e7e2260849f6"}, {"sha": "af8f1416e1bc004c15f2cb305bbc26e0af5478e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/af8f1416e1bc004c15f2cb305bbc26e0af5478e1", "html_url": "https://github.com/rust-lang/rust/commit/af8f1416e1bc004c15f2cb305bbc26e0af5478e1"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "968a8a71ba0bab6a0aa58e590a5929276dbea8b5", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=6d77e45f01079fe3d40180b3e256e414ab379f63", "patch": "@@ -328,20 +328,32 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         false // for now, we don't enforce validity\n     }\n \n-    fn find_fn(\n+    fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         ret: Option<(PlaceTy<'tcx>, mir::BasicBlock)>,\n         _unwind: Option<mir::BasicBlock> // unwinding is not supported in consts\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n-        debug!(\"eval_fn_call: {:?}\", instance);\n+        debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n+\n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def_id) = instance.def {\n             // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n-            if !ecx.tcx.is_const_fn_raw(def_id) {\n+            if ecx.tcx.is_const_fn_raw(def_id) {\n+                // If this function is a `const fn` then as an optimization we can query this\n+                // evaluation immediately.\n+                //\n+                // For the moment we only do this for functions which take no arguments\n+                // (or all arguments are ZSTs) so that we don't memoize too much.\n+                if args.iter().all(|a| a.layout.is_zst()) {\n+                    let gid = GlobalId { instance, promoted: None };\n+                    ecx.eval_const_fn_call(gid, ret)?;\n+                    return Ok(None);\n+                }\n+            } else {\n                 // Some functions we support even if they are non-const -- but avoid testing\n                 // that for const fn!  We certainly do *not* want to actually call the fn\n                 // though, so be sure we return here."}, {"sha": "74206ad28739a62b0b3cbc07b15e8531f6a7b405", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=6d77e45f01079fe3d40180b3e256e414ab379f63", "patch": "@@ -146,7 +146,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// nor just jump to `ret`, but instead push their own stack frame.)\n     /// Passing `dest`and `ret` in the same `Option` proved very annoying when only one of them\n     /// was used.\n-    fn find_fn(\n+    fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],"}, {"sha": "b8dc15f451da482ba73c68a1882c6423ac5b2f27", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=6d77e45f01079fe3d40180b3e256e414ab379f63", "patch": "@@ -266,20 +266,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::InstanceDef::DropGlue(..) |\n             ty::InstanceDef::CloneShim(..) |\n             ty::InstanceDef::Item(_) => {\n-                // If this function is a `const fn` then as an optimization we can query this\n-                // evaluation immediately.\n-                //\n-                // For the moment we only do this for functions which take no arguments\n-                // (or all arguments are ZSTs) so that we don't memoize too much.\n-                if self.tcx.is_const_fn_raw(instance.def.def_id()) &&\n-                   args.iter().all(|a| a.layout.is_zst())\n-                {\n-                    let gid = GlobalId { instance, promoted: None };\n-                    return self.eval_const_fn_call(gid, ret);\n-                }\n-\n                 // We need MIR for this fn\n-                let body = match M::find_fn(self, instance, args, ret, unwind)? {\n+                let body = match M::find_mir_or_eval_fn(self, instance, args, ret, unwind)? {\n                     Some(body) => body,\n                     None => return Ok(()),\n                 };\n@@ -445,7 +433,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Evaluate a const function where all arguments (if any) are zero-sized types.\n     /// The evaluation is memoized thanks to the query system.\n-    fn eval_const_fn_call(\n+    // FIXME: Consider moving this to `const_eval.rs`.\n+    pub (crate) fn eval_const_fn_call(\n         &mut self,\n         gid: GlobalId<'tcx>,\n         ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,"}, {"sha": "95de635d634e46285a79aea6fa765d59f76f7514", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d77e45f01079fe3d40180b3e256e414ab379f63/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=6d77e45f01079fe3d40180b3e256e414ab379f63", "patch": "@@ -128,7 +128,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         false\n     }\n \n-    fn find_fn(\n+    fn find_mir_or_eval_fn(\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],"}]}