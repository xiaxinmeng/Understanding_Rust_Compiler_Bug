{"sha": "4550cb05626a1b982560710d6757145049cca247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NTBjYjA1NjI2YTFiOTgyNTYwNzEwZDY3NTcxNDUwNDljY2EyNDc=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-01-07T19:43:22Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-01-07T22:22:01Z"}, "message": "fmt: simplify parse_precision", "tree": {"sha": "39f2851492d645de65719838af401951697586fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f2851492d645de65719838af401951697586fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4550cb05626a1b982560710d6757145049cca247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4550cb05626a1b982560710d6757145049cca247", "html_url": "https://github.com/rust-lang/rust/commit/4550cb05626a1b982560710d6757145049cca247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4550cb05626a1b982560710d6757145049cca247/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c383deaa6683e5519ce6727e1d3d152d70e66a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c383deaa6683e5519ce6727e1d3d152d70e66a0", "html_url": "https://github.com/rust-lang/rust/commit/9c383deaa6683e5519ce6727e1d3d152d70e66a0"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "5b178e6c82388abc5ccdfd42586a75db4cccf785", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4550cb05626a1b982560710d6757145049cca247/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4550cb05626a1b982560710d6757145049cca247/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=4550cb05626a1b982560710d6757145049cca247", "patch": "@@ -285,9 +285,7 @@ pub mod ct {\n     }\n     pub fn parse_precision(s: &str, i: uint, lim: uint) ->\n        Parsed<Count> {\n-        return if i >= lim {\n-                Parsed::new(CountImplied, i)\n-            } else if s[i] == '.' as u8 {\n+            if i < lim && s[i] == '.' as u8 {\n                 let count = parse_count(s, i + 1u, lim);\n \n \n@@ -297,7 +295,7 @@ pub mod ct {\n                   CountImplied => Parsed::new(CountIs(0), count.next),\n                   _ => count\n                 }\n-            } else { Parsed::new(CountImplied, i) };\n+            } else { Parsed::new(CountImplied, i) }\n     }\n     pub fn parse_type(s: &str, i: uint, lim: uint, err: ErrorFn) ->\n        Parsed<Ty> {"}]}