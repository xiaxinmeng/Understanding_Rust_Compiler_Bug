{"sha": "f243a2ad904705a1e340a08639dca105605b4175", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNDNhMmFkOTA0NzA1YTFlMzQwYTA4NjM5ZGNhMTA1NjA1YjQxNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T22:13:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T22:13:09Z"}, "message": "Auto merge of #77917 - JohnTitor:rollup-e47h2qt, r=JohnTitor\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #77239 (Enable building Cargo for aarch64-apple-darwin)\n - #77569 (BTreeMap: type-specific variants of node_as_mut and cast_unchecked)\n - #77719 (Remove unnecessary rustc_const_stable attributes.)\n - #77722 (Remove unsafety from sys/unsupported and add deny(unsafe_op_in_unsafe_fn).)\n - #77725 (Add regression issue template)\n - #77776 ( Give an error when running `x.py test --stage 0 src/test/ui`)\n - #77786 (Mention rustdoc in `x.py setup`)\n - #77825 (`min_const_generics` diagnostics improvements)\n - #77868 (Include `llvm-dis`, `llc` and `opt` in `llvm-tools-preview` component)\n - #77884 (Use Option::unwrap_or instead of open-coding it)\n - #77886 (Replace trivial bool matches with the `matches!` macro)\n - #77892 (Replace absolute paths with relative ones)\n - #77895 (Include aarch64-apple-darwin in the dist manifests)\n - #77909 (bootstrap: set correct path for the build-manifest binary)\n\nFailed merges:\n\n - #77902 (Include aarch64-pc-windows-msvc in the dist manifests)\n\nr? `@ghost`", "tree": {"sha": "bf7ed498ee090350df2cc33ed6f5805cb8175287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf7ed498ee090350df2cc33ed6f5805cb8175287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f243a2ad904705a1e340a08639dca105605b4175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f243a2ad904705a1e340a08639dca105605b4175", "html_url": "https://github.com/rust-lang/rust/commit/f243a2ad904705a1e340a08639dca105605b4175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f243a2ad904705a1e340a08639dca105605b4175/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adef9da30f1ecbfeb81312d01ed94ac53f7161ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/adef9da30f1ecbfeb81312d01ed94ac53f7161ba", "html_url": "https://github.com/rust-lang/rust/commit/adef9da30f1ecbfeb81312d01ed94ac53f7161ba"}, {"sha": "b4a3b5617fb8b504bf216057adc36043c60f511e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a3b5617fb8b504bf216057adc36043c60f511e", "html_url": "https://github.com/rust-lang/rust/commit/b4a3b5617fb8b504bf216057adc36043c60f511e"}], "stats": {"total": 785, "additions": 426, "deletions": 359}, "files": [{"sha": "ffab883987c0d374248941c62e170bc1bb7e66e8", "filename": ".github/ISSUE_TEMPLATE/regression.md", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/.github%2FISSUE_TEMPLATE%2Fregression.md", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/.github%2FISSUE_TEMPLATE%2Fregression.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fregression.md?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -0,0 +1,68 @@\n+---\n+name: Regression\n+about: Report something that unexpectedly changed between Rust versions.\n+labels: C-bug regression-untriaged\n+---\n+<!--\n+Thank you for filing a regression report! \ud83d\udc1b A regression is something that changed between versions of Rust but was not supposed to.\n+\n+Please provide a short summary of the regression, along with any information you feel is relevant to replicate it.\n+-->\n+\n+### Code\n+\n+I tried this code:\n+\n+```rust\n+<code>\n+```\n+\n+I expected to see this happen: *explanation*\n+\n+Instead, this happened: *explanation*\n+\n+### Version it worked on\n+\n+<!--\n+Provide the most recent version this worked on, for example:\n+\n+It most recently worked on: Rust 1.47\n+-->\n+\n+It most recently worked on: <!-- version -->\n+\n+### Version with regression\n+\n+<!--\n+Provide the version you are using that has the regression.\n+-->\n+\n+`rustc --version --verbose`:\n+```\n+<version>\n+```\n+\n+<!--\n+Did the compiler crash? If so, please provide a backtrace.\n+-->\n+\n+### Backtrace\n+<!--\n+Include a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\n+environment. E.g. `RUST_BACKTRACE=1 cargo build`.\n+-->\n+<details><summary>Backtrace</summary>\n+<p>\n+\n+```\n+<backtrace>\n+```\n+\n+</p>\n+</details>\n+\n+<!--\n+If you know when this regression occurred, please add a line like below, replacing `{channel}` with one of stable, beta, or nightly.\n+\n+@rustbot modify labels: +regression-from-stable-to-{channel} -regression-untriaged\n+-->"}, {"sha": "828a3bc71b87b7a408071789f4703b9c8cb8c790", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -306,14 +306,16 @@ jobs:\n           - name: dist-aarch64-apple\n             env:\n               SCRIPT: \"./x.py dist --stage 2\"\n-              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false --tools=rls,clippy,rustfmt,analysis,src\"\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --host=aarch64-apple-darwin --target=aarch64-apple-darwin --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               SELECT_XCODE: /Applications/Xcode_12_beta.app\n               USE_XCODE_CLANG: 1\n               MACOSX_DEPLOYMENT_TARGET: 11.0\n               MACOSX_STD_DEPLOYMENT_TARGET: 11.0\n               NO_LLVM_ASSERTIONS: 1\n               NO_DEBUG_ASSERTIONS: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+              JEMALLOC_SYS_WITH_LG_PAGE: 14\n             os: macos-latest\n           - name: x86_64-msvc-1\n             env:"}, {"sha": "9c48ff867697757087937cf8cc0ca3d001dae771", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -2192,9 +2192,9 @@ checksum = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \n [[package]]\n name = \"openssl-src\"\n-version = \"111.10.2+1.1.1g\"\n+version = \"111.12.0+1.1.1h\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a287fdb22e32b5b60624d4a5a7a02dbe82777f730ec0dbc42a0554326fef5a70\"\n+checksum = \"858a4132194f8570a7ee9eb8629e85b23cbc4565f2d4a162e87556e5956abf61\"\n dependencies = [\n  \"cc\",\n ]"}, {"sha": "95f969d7691e015c12f6ae23c9fee40dd43e92a9", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -170,17 +170,11 @@ pub enum Token {\n \n impl Token {\n     crate fn is_eof(&self) -> bool {\n-        match *self {\n-            Token::Eof => true,\n-            _ => false,\n-        }\n+        matches!(self, Token::Eof)\n     }\n \n     pub fn is_hardbreak_tok(&self) -> bool {\n-        match *self {\n-            Token::Break(BreakToken { offset: 0, blank_space: bs }) if bs == SIZE_INFINITY => true,\n-            _ => false,\n-        }\n+        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n     }\n }\n \n@@ -491,12 +485,9 @@ impl Printer {\n     }\n \n     fn get_top(&mut self) -> PrintStackElem {\n-        match self.print_stack.last() {\n-            Some(el) => *el,\n-            None => {\n-                PrintStackElem { offset: 0, pbreak: PrintStackBreak::Broken(Breaks::Inconsistent) }\n-            }\n-        }\n+        *self.print_stack.last().unwrap_or({\n+            &PrintStackElem { offset: 0, pbreak: PrintStackBreak::Broken(Breaks::Inconsistent) }\n+        })\n     }\n \n     fn print_begin(&mut self, b: BeginToken, l: isize) {"}, {"sha": "88d73f2a8647373fe64fd7059071d03204fae9c7", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -122,7 +122,7 @@ unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMInitializePasses();\n \n-    ::rustc_llvm::initialize_available_targets();\n+    rustc_llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());\n }"}, {"sha": "69a94d8f795607063f2dcf6ff462b1f8d2033f27", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1175,7 +1175,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // necessary. There's already optimizations in place to avoid sending work\n     // back to the coordinator if LTO isn't requested.\n     return thread::spawn(move || {\n-        let max_workers = ::num_cpus::get();\n+        let max_workers = num_cpus::get();\n         let mut worker_id_counter = 0;\n         let mut free_worker_ids = Vec::new();\n         let mut get_worker_id = |free_worker_ids: &mut Vec<usize>| {"}, {"sha": "7f918bd168e0e228b4e6cf9ec630b8a7e516a266", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -695,7 +695,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         total_codegen_time.into_inner(),\n     );\n \n-    ::rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n+    rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n \n     symbol_names_test::report_symbol_names(tcx);\n \n@@ -754,8 +754,8 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n }\n \n fn finalize_tcx(tcx: TyCtxt<'_>) {\n-    tcx.sess.time(\"assert_dep_graph\", || ::rustc_incremental::assert_dep_graph(tcx));\n-    tcx.sess.time(\"serialize_dep_graph\", || ::rustc_incremental::save_dep_graph(tcx));\n+    tcx.sess.time(\"assert_dep_graph\", || rustc_incremental::assert_dep_graph(tcx));\n+    tcx.sess.time(\"serialize_dep_graph\", || rustc_incremental::save_dep_graph(tcx));\n \n     // We assume that no queries are run past here. If there are new queries\n     // after this point, they'll show up as \"<unknown>\" in self-profiling data."}, {"sha": "82518b7f0c388a948b1c6d38518c41a6d8c815f7", "filename": "compiler/rustc_codegen_ssa/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -85,7 +85,7 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n }\n \n pub trait HasCodegen<'tcx>:\n-    Backend<'tcx> + ::std::ops::Deref<Target = <Self as HasCodegen<'tcx>>::CodegenCx>\n+    Backend<'tcx> + std::ops::Deref<Target = <Self as HasCodegen<'tcx>>::CodegenCx>\n {\n     type CodegenCx: CodegenMethods<'tcx>\n         + BackendTypes<"}, {"sha": "ec2f9597b1827cc7108e2008a01c6bdc5c936e40", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -71,8 +71,8 @@ impl Fingerprint {\n     }\n }\n \n-impl ::std::fmt::Display for Fingerprint {\n-    fn fmt(&self, formatter: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+impl std::fmt::Display for Fingerprint {\n+    fn fmt(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }"}, {"sha": "c0193e9fa0c4e6794af88c0d20e0125d5ab52c61", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -129,7 +129,7 @@ pub enum ProcessResult<O, E> {\n struct ObligationTreeId(usize);\n \n type ObligationTreeIdGenerator =\n-    ::std::iter::Map<::std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;\n+    std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;\n \n pub struct ObligationForest<O: ForestObligation> {\n     /// The list of obligations. In between calls to `process_obligations`,"}, {"sha": "9a28f8f4e21062d5040d9acec2c8da20150b950f", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -93,7 +93,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n     /// Iterate over elements, sorted by key\n     #[inline]\n-    pub fn iter(&self) -> ::std::slice::Iter<'_, (K, V)> {\n+    pub fn iter(&self) -> std::slice::Iter<'_, (K, V)> {\n         self.data.iter()\n     }\n \n@@ -134,7 +134,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n         R: RangeBounds<K>,\n     {\n         let (start, end) = self.range_slice_indices(range);\n-        self.data.splice(start..end, ::std::iter::empty());\n+        self.data.splice(start..end, std::iter::empty());\n     }\n \n     /// Mutate all keys with the given function `f`. This mutation must not\n@@ -241,7 +241,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n impl<K: Ord, V> IntoIterator for SortedMap<K, V> {\n     type Item = (K, V);\n-    type IntoIter = ::std::vec::IntoIter<(K, V)>;\n+    type IntoIter = std::vec::IntoIter<(K, V)>;\n \n     fn into_iter(self) -> Self::IntoIter {\n         self.data.into_iter()"}, {"sha": "579eb1cb7da661e741b99f1e43984367fcc56255", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -20,7 +20,7 @@ pub struct StableHasher {\n }\n \n impl ::std::fmt::Debug for StableHasher {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{:?}\", self.state)\n     }\n }"}, {"sha": "8f76551677c1dbd5b4c4c5ac49dc9949f497a993", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -118,7 +118,7 @@ impl DefKey {\n \n         let DisambiguatedDefPathData { ref data, disambiguator } = self.disambiguated_data;\n \n-        ::std::mem::discriminant(data).hash(&mut hasher);\n+        std::mem::discriminant(data).hash(&mut hasher);\n         if let Some(name) = data.get_opt_name() {\n             // Get a stable hash by considering the symbol chars rather than\n             // the symbol index."}, {"sha": "5295ebfafa87016b193ec25ae1a16353fde4c4d2", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -341,7 +341,7 @@ where\n         // been fully instantiated and hence the set of scopes we have\n         // doesn't matter -- just to be sure, put an empty vector\n         // in there.\n-        let old_a_scopes = ::std::mem::take(pair.vid_scopes(self));\n+        let old_a_scopes = std::mem::take(pair.vid_scopes(self));\n \n         // Relate the generalized kind to the original one.\n         let result = pair.relate_generalized_ty(self, generalized_ty);\n@@ -680,7 +680,7 @@ where\n             //   itself occurs. Note that `'b` and `'c` must both\n             //   include P. At the point, the call works because of\n             //   subtyping (i.e., `&'b u32 <: &{P} u32`).\n-            let variance = ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Covariant);\n+            let variance = std::mem::replace(&mut self.ambient_variance, ty::Variance::Covariant);\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n \n@@ -709,7 +709,7 @@ where\n             // Reset ambient variance to contravariance. See the\n             // covariant case above for an explanation.\n             let variance =\n-                ::std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n+                std::mem::replace(&mut self.ambient_variance, ty::Variance::Contravariant);\n \n             self.relate(a.skip_binder(), b.skip_binder())?;\n "}, {"sha": "eb1a7806256c3e219b5a4324da4ddc5ccb0c0610", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -110,7 +110,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n     /// Trait queries just want to pass back type obligations \"as is\"\n     pub fn take_registered_region_obligations(&self) -> Vec<(hir::HirId, RegionObligation<'tcx>)> {\n-        ::std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n+        std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n     }\n \n     /// Process the region obligations that must be proven (during"}, {"sha": "7aba4fc64a929983f5ec782df1087d873582396a", "filename": "compiler/rustc_middle/src/ich/impls_syntax.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_syntax.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -5,7 +5,7 @@ use crate::ich::StableHashingContext;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_span::SourceFile;\n+use rustc_span::{BytePos, NormalizedPos, SourceFile};\n \n use smallvec::SmallVec;\n \n@@ -102,34 +102,28 @@ impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     }\n }\n \n-fn stable_byte_pos(pos: ::rustc_span::BytePos, source_file_start: ::rustc_span::BytePos) -> u32 {\n+fn stable_byte_pos(pos: BytePos, source_file_start: BytePos) -> u32 {\n     pos.0 - source_file_start.0\n }\n \n-fn stable_multibyte_char(\n-    mbc: ::rustc_span::MultiByteChar,\n-    source_file_start: ::rustc_span::BytePos,\n-) -> (u32, u32) {\n-    let ::rustc_span::MultiByteChar { pos, bytes } = mbc;\n+fn stable_multibyte_char(mbc: rustc_span::MultiByteChar, source_file_start: BytePos) -> (u32, u32) {\n+    let rustc_span::MultiByteChar { pos, bytes } = mbc;\n \n     (pos.0 - source_file_start.0, bytes as u32)\n }\n \n fn stable_non_narrow_char(\n-    swc: ::rustc_span::NonNarrowChar,\n-    source_file_start: ::rustc_span::BytePos,\n+    swc: rustc_span::NonNarrowChar,\n+    source_file_start: BytePos,\n ) -> (u32, u32) {\n     let pos = swc.pos();\n     let width = swc.width();\n \n     (pos.0 - source_file_start.0, width as u32)\n }\n \n-fn stable_normalized_pos(\n-    np: ::rustc_span::NormalizedPos,\n-    source_file_start: ::rustc_span::BytePos,\n-) -> (u32, u32) {\n-    let ::rustc_span::NormalizedPos { pos, diff } = np;\n+fn stable_normalized_pos(np: NormalizedPos, source_file_start: BytePos) -> (u32, u32) {\n+    let NormalizedPos { pos, diff } = np;\n \n     (pos.0 - source_file_start.0, diff)\n }"}, {"sha": "5ebe38b2d7e09fe9b659a6aee5ef5c24d9dbbde9", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -40,7 +40,7 @@ pub struct Allocation<Tag = (), Extra = ()> {\n     pub extra: Extra,\n }\n \n-pub trait AllocationExtra<Tag>: ::std::fmt::Debug + Clone {\n+pub trait AllocationExtra<Tag>: std::fmt::Debug + Clone {\n     // There is no constructor in here because the constructor's type depends\n     // on `MemoryKind`, and making things sufficiently generic leads to painful\n     // inference failure."}, {"sha": "893ab79f4f5cf14ebb295c92398045bf96d1018d", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> ConstValue<'tcx> {\n \n     pub fn try_to_str_slice(&self) -> Option<&'tcx str> {\n         if let ConstValue::Slice { data, start, end } = *self {\n-            ::std::str::from_utf8(data.inspect_with_uninit_and_ptr_outside_interpreter(start..end))\n+            std::str::from_utf8(data.inspect_with_uninit_and_ptr_outside_interpreter(start..end))\n                 .ok()\n         } else {\n             None\n@@ -465,7 +465,7 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     pub fn to_char(self) -> InterpResult<'tcx, char> {\n         let val = self.to_u32()?;\n-        match ::std::char::from_u32(val) {\n+        match std::char::from_u32(val) {\n             Some(c) => Ok(c),\n             None => throw_ub!(InvalidChar(val)),\n         }"}, {"sha": "ef0639bcd79187436c06ef35d042430f83247c41", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -775,7 +775,7 @@ mod binding_form_impl {\n     impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for super::BindingForm<'tcx> {\n         fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n             use super::BindingForm::*;\n-            ::std::mem::discriminant(self).hash_stable(hcx, hasher);\n+            std::mem::discriminant(self).hash_stable(hcx, hasher);\n \n             match self {\n                 Var(binding) => binding.hash_stable(hcx, hasher),"}, {"sha": "fd24de1529d3723274c7c48db8d918e62ec2a565", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1894,7 +1894,7 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n     }\n }\n \n-pub type TyAndLayout<'tcx> = ::rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n+pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n \n impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type Ty = Ty<'tcx>;"}, {"sha": "a594a8ad51240f8c7d524f5868c08bd47bfb62c4", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -23,7 +23,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         debug!(\n             \"normalize_erasing_regions::<{}>(value={:?}, param_env={:?})\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             value,\n             param_env,\n         );"}, {"sha": "68c36642c88bcac27edb5c1ed450b4f62f043fa6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1142,7 +1142,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // relocations (we have an active `str` reference here). We don't use this\n                 // result to affect interpreter execution.\n                 let slice = data.inspect_with_uninit_and_ptr_outside_interpreter(start..end);\n-                let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n+                let s = std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n                 p!(write(\"{:?}\", s));\n                 Ok(self)\n             }"}, {"sha": "6cfa6dbeccd9668e621261e3cc4524f6850220b7", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'tcx> DecoderWithPosition for CacheDecoder<'a, 'tcx> {\n // tag matches and the correct amount of bytes was read.\n fn decode_tagged<D, T, V>(decoder: &mut D, expected_tag: T) -> Result<V, D::Error>\n where\n-    T: Decodable<D> + Eq + ::std::fmt::Debug,\n+    T: Decodable<D> + Eq + std::fmt::Debug,\n     V: Decodable<D>,\n     D: DecoderWithPosition,\n {\n@@ -1023,7 +1023,7 @@ where\n     let _timer = tcx\n         .sess\n         .prof\n-        .extra_verbose_generic_activity(\"encode_query_results_for\", ::std::any::type_name::<Q>());\n+        .extra_verbose_generic_activity(\"encode_query_results_for\", std::any::type_name::<Q>());\n \n     let state = Q::query_state(tcx);\n     assert!(state.all_inactive());"}, {"sha": "8734acad9b228318e3b36e4f1d278ef384afaec0", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -646,8 +646,8 @@ impl<'tcx> ty::TyS<'tcx> {\n             }\n             ty::Char => Some(std::char::MAX as u128),\n             ty::Float(fty) => Some(match fty {\n-                ast::FloatTy::F32 => ::rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n-                ast::FloatTy::F64 => ::rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n+                ast::FloatTy::F32 => rustc_apfloat::ieee::Single::INFINITY.to_bits(),\n+                ast::FloatTy::F64 => rustc_apfloat::ieee::Double::INFINITY.to_bits(),\n             }),\n             _ => None,\n         };"}, {"sha": "66dbacb2f9d4d39af4c2b0421d5f3baf03c1dd27", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -3,6 +3,7 @@\n //! interpreting common C functions leak into CTFE.\n \n use std::borrow::{Borrow, Cow};\n+use std::fmt::Debug;\n use std::hash::Hash;\n \n use rustc_middle::mir;\n@@ -79,19 +80,19 @@ pub trait AllocMap<K: Hash + Eq, V> {\n /// and some use case dependent behaviour can instead be applied.\n pub trait Machine<'mir, 'tcx>: Sized {\n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n-    type MemoryKind: ::std::fmt::Debug + ::std::fmt::Display + MayLeak + Eq + 'static;\n+    type MemoryKind: Debug + std::fmt::Display + MayLeak + Eq + 'static;\n \n     /// Tag tracked alongside every pointer. This is used to implement \"Stacked Borrows\"\n     /// <https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html>.\n     /// The `default()` is used for pointers to consts, statics, vtables and functions.\n     /// The `Debug` formatting is used for displaying pointers; we cannot use `Display`\n     /// as `()` does not implement that, but it should be \"nice\" output.\n-    type PointerTag: ::std::fmt::Debug + Copy + Eq + Hash + 'static;\n+    type PointerTag: Debug + Copy + Eq + Hash + 'static;\n \n     /// Machines can define extra (non-instance) things that represent values of function pointers.\n     /// For example, Miri uses this to return a function pointer from `dlsym`\n     /// that can later be called to execute the right thing.\n-    type ExtraFnVal: ::std::fmt::Debug + Copy;\n+    type ExtraFnVal: Debug + Copy;\n \n     /// Extra data stored in every call frame.\n     type FrameExtra;"}, {"sha": "d8f27ec95458b2bc852707e18d8088046f0d4efc", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -133,7 +133,7 @@ impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n     }\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for ImmTy<'tcx, Tag> {\n     type Target = Immediate<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &Immediate<Tag> {\n@@ -156,7 +156,7 @@ pub struct OpTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for OpTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for OpTy<'tcx, Tag> {\n     type Target = Operand<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &Operand<Tag> {\n@@ -340,7 +340,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn read_str(&self, mplace: MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {\n         let len = mplace.len(self)?;\n         let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;\n-        let str = ::std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;\n+        let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;\n         Ok(str)\n     }\n "}, {"sha": "fe25f8ce962f0eab27c4e1e5436e1fed9c662f0f", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -3,6 +3,7 @@\n //! All high-level functions to write to memory work on places as destinations.\n \n use std::convert::TryFrom;\n+use std::fmt::Debug;\n use std::hash::Hash;\n \n use rustc_macros::HashStable;\n@@ -86,7 +87,7 @@ pub struct PlaceTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for PlaceTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for PlaceTy<'tcx, Tag> {\n     type Target = Place<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &Place<Tag> {\n@@ -101,7 +102,7 @@ pub struct MPlaceTy<'tcx, Tag = ()> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<'tcx, Tag> ::std::ops::Deref for MPlaceTy<'tcx, Tag> {\n+impl<'tcx, Tag> std::ops::Deref for MPlaceTy<'tcx, Tag> {\n     type Target = MemPlace<Tag>;\n     #[inline(always)]\n     fn deref(&self) -> &MemPlace<Tag> {\n@@ -226,7 +227,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n }\n \n // These are defined here because they produce a place.\n-impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n+impl<'tcx, Tag: Debug + Copy> OpTy<'tcx, Tag> {\n     #[inline(always)]\n     /// Note: do not call `as_ref` on the resulting place. This function should only be used to\n     /// read from the resulting mplace, not to get its address back.\n@@ -251,7 +252,7 @@ impl<'tcx, Tag: ::std::fmt::Debug + Copy> OpTy<'tcx, Tag> {\n     }\n }\n \n-impl<Tag: ::std::fmt::Debug> Place<Tag> {\n+impl<Tag: Debug> Place<Tag> {\n     #[inline]\n     pub fn assert_mem_place(self) -> MemPlace<Tag> {\n         match self {\n@@ -261,7 +262,7 @@ impl<Tag: ::std::fmt::Debug> Place<Tag> {\n     }\n }\n \n-impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n+impl<'tcx, Tag: Debug> PlaceTy<'tcx, Tag> {\n     #[inline]\n     pub fn assert_mem_place(self) -> MPlaceTy<'tcx, Tag> {\n         MPlaceTy { mplace: self.place.assert_mem_place(), layout: self.layout }\n@@ -272,7 +273,7 @@ impl<'tcx, Tag: ::std::fmt::Debug> PlaceTy<'tcx, Tag> {\n impl<'mir, 'tcx: 'mir, Tag, M> InterpCx<'mir, 'tcx, M>\n where\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/54385\n-    Tag: ::std::fmt::Debug + Copy + Eq + Hash + 'static,\n+    Tag: Debug + Copy + Eq + Hash + 'static,\n     M: Machine<'mir, 'tcx, PointerTag = Tag>,\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/24159\n     M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKind>, Allocation<Tag, M::AllocExtra>)>,"}, {"sha": "ffb84950fc92c9319af82e29f9f4054907a83d94", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -137,7 +137,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> FxHashSet<LocalDefId> {\n /// Generates a default name for the pass based on the name of the\n /// type `T`.\n pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n-    let name = ::std::any::type_name::<T>();\n+    let name = std::any::type_name::<T>();\n     if let Some(tail) = name.rfind(':') { Cow::from(&name[tail + 1..]) } else { Cow::from(name) }\n }\n "}, {"sha": "25a8565fb43b3ed46912f6304407f8ac895d94b1", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -96,14 +96,14 @@ impl PatCtxt<'_, '_> {\n                 }\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n-                    ::rustc_middle::mir::interpret::struct_error(\n+                    rustc_middle::mir::interpret::struct_error(\n                         self.tcx.at(pat_span),\n                         \"could not evaluate float literal (see issue #31407)\",\n                     )\n                     .emit();\n                 }\n                 PatternError::NonConstPath(span) => {\n-                    ::rustc_middle::mir::interpret::struct_error(\n+                    rustc_middle::mir::interpret::struct_error(\n                         self.tcx.at(span),\n                         \"runtime values cannot be referenced in patterns\",\n                     )"}, {"sha": "d46e9a98825a7de3ca281333cdb0b7b8a59d07d7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1060,13 +1060,13 @@ crate fn compare_const_vals<'tcx>(\n         use rustc_apfloat::Float;\n         return match *ty.kind() {\n             ty::Float(ast::FloatTy::F32) => {\n-                let l = ::rustc_apfloat::ieee::Single::from_bits(a);\n-                let r = ::rustc_apfloat::ieee::Single::from_bits(b);\n+                let l = rustc_apfloat::ieee::Single::from_bits(a);\n+                let r = rustc_apfloat::ieee::Single::from_bits(b);\n                 l.partial_cmp(&r)\n             }\n             ty::Float(ast::FloatTy::F64) => {\n-                let l = ::rustc_apfloat::ieee::Double::from_bits(a);\n-                let r = ::rustc_apfloat::ieee::Double::from_bits(b);\n+                let l = rustc_apfloat::ieee::Double::from_bits(a);\n+                let r = rustc_apfloat::ieee::Double::from_bits(b);\n                 l.partial_cmp(&r)\n             }\n             ty::Int(ity) => {"}, {"sha": "774a147c114ec3c50e57c0f642f3194a68315908", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -469,24 +469,17 @@ impl<'a> Resolver<'a> {\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,\n-                    \"generic parameters must not be used inside of non-trivial constant values\",\n-                );\n-                err.span_label(\n-                    span,\n-                    &format!(\n-                        \"non-trivial anonymous constants must not depend on the parameter `{}`\",\n-                        name\n-                    ),\n+                    \"generic parameters may not be used in const operations\",\n                 );\n+                err.span_label(span, &format!(\"cannot perform const operation using `{}`\", name));\n \n                 if is_type {\n-                    err.note(\"type parameters are currently not permitted in anonymous constants\");\n+                    err.note(\"type parameters may not be used in const expressions\");\n                 } else {\n-                    err.help(\n-                        &format!(\"it is currently only allowed to use either `{0}` or `{{ {0} }}` as generic constants\",\n-                                 name\n-                        )\n-                    );\n+                    err.help(&format!(\n+                        \"const parameters may only be used as standalone arguments, i.e. `{}`\",\n+                        name\n+                    ));\n                 }\n \n                 err"}, {"sha": "6677a5ffe2867e3218078ae027725a2e2e83a19a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -218,7 +218,7 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n-    /// generic parameters must not be used inside of non-trivial constant values.\n+    /// generic parameters must not be used inside const evaluations.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },"}, {"sha": "8b79c93e7605bf98b706175f06616b37d4eb0aff", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -107,7 +107,7 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_i8(&mut self, v: i8) -> EncodeResult {\n-        let as_u8: u8 = unsafe { ::std::mem::transmute(v) };\n+        let as_u8: u8 = unsafe { std::mem::transmute(v) };\n         self.emit_u8(as_u8)\n     }\n \n@@ -300,13 +300,13 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     #[inline]\n     fn read_char(&mut self) -> Result<char, Self::Error> {\n         let bits = self.read_u32()?;\n-        Ok(::std::char::from_u32(bits).unwrap())\n+        Ok(std::char::from_u32(bits).unwrap())\n     }\n \n     #[inline]\n     fn read_str(&mut self) -> Result<Cow<'_, str>, Self::Error> {\n         let len = self.read_usize()?;\n-        let s = ::std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n+        let s = std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n         self.position += len;\n         Ok(Cow::Borrowed(s))\n     }"}, {"sha": "183a11a5277230ffc92cd0439f63174eccf4d6b1", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -132,7 +132,7 @@ impl SymbolMangler<'tcx> {\n             self.push(\"u\");\n \n             // FIXME(eddyb) we should probably roll our own punycode implementation.\n-            let mut punycode_bytes = match ::punycode::encode(ident) {\n+            let mut punycode_bytes = match punycode::encode(ident) {\n                 Ok(s) => s.into_bytes(),\n                 Err(()) => bug!(\"symbol_names: punycode encoding failed for ident {:?}\", ident),\n             };"}, {"sha": "0584c56c9cb66d9e00efb9ab1ff88c4acaa6791c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -22,6 +22,7 @@ use rustc_middle::ty::{\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_target::spec::abi;\n use std::fmt;\n \n use super::InferCtxtPrivExt;\n@@ -1157,15 +1158,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n-                    ::rustc_target::spec::abi::Abi::Rust,\n+                    abi::Abi::Rust,\n                 )\n             } else {\n                 tcx.mk_fn_sig(\n-                    ::std::iter::once(inputs),\n+                    std::iter::once(inputs),\n                     tcx.mk_ty_infer(ty::TyVar(ty::TyVid { index: 0 })),\n                     false,\n                     hir::Unsafety::Normal,\n-                    ::rustc_target::spec::abi::Abi::Rust,\n+                    abi::Abi::Rust,\n                 )\n             };\n             ty::Binder::bind(sig).to_string()"}, {"sha": "d748fc8235e7fc2a09c21dfe412b6e9f93a949bf", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n     {\n         debug!(\n             \"normalize::<{}>(value={:?}, param_env={:?})\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             value,\n             self.param_env,\n         );\n@@ -65,13 +65,13 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n         let result = value.fold_with(&mut normalizer);\n         debug!(\n             \"normalize::<{}>: result={:?} with {} obligations\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             result,\n             normalizer.obligations.len(),\n         );\n         debug!(\n             \"normalize::<{}>: obligations={:?}\",\n-            ::std::any::type_name::<T>(),\n+            std::any::type_name::<T>(),\n             normalizer.obligations,\n         );\n         if normalizer.error {"}, {"sha": "4fa97ff053e6011f862e293f3fa22b70b6d019c2", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -170,6 +170,22 @@ impl<K, V> Root<K, V> {\n         NodeRef { height: self.height, node: self.node.as_ptr(), _marker: PhantomData }\n     }\n \n+    /// Borrows and returns a mutable reference to the leaf node owned by the root.\n+    /// # Safety\n+    /// The root node is a leaf.\n+    unsafe fn leaf_node_as_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Leaf> {\n+        debug_assert!(self.height == 0);\n+        NodeRef { height: self.height, node: self.node.as_ptr(), _marker: PhantomData }\n+    }\n+\n+    /// Borrows and returns a mutable reference to the internal node owned by the root.\n+    /// # Safety\n+    /// The root node is not a leaf.\n+    unsafe fn internal_node_as_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n+        debug_assert!(self.height > 0);\n+        NodeRef { height: self.height, node: self.node.as_ptr(), _marker: PhantomData }\n+    }\n+\n     pub fn node_as_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, marker::LeafOrInternal> {\n         NodeRef { height: self.height, node: self.node.as_ptr(), _marker: PhantomData }\n     }\n@@ -188,14 +204,11 @@ impl<K, V> Root<K, V> {\n         self.node = BoxedNode::from_internal(new_node);\n         self.height += 1;\n \n-        let mut ret =\n-            NodeRef { height: self.height, node: self.node.as_ptr(), _marker: PhantomData };\n-\n         unsafe {\n+            let mut ret = self.internal_node_as_mut();\n             ret.reborrow_mut().first_edge().correct_parent_link();\n+            ret\n         }\n-\n-        ret\n     }\n \n     /// Removes the internal root node, using its first child as the new root node.\n@@ -212,11 +225,8 @@ impl<K, V> Root<K, V> {\n \n         let top = self.node.ptr;\n \n-        self.node = unsafe {\n-            BoxedNode::from_ptr(\n-                self.node_as_mut().cast_unchecked::<marker::Internal>().first_edge().descend().node,\n-            )\n-        };\n+        let internal_node = unsafe { self.internal_node_as_mut() };\n+        self.node = unsafe { BoxedNode::from_ptr(internal_node.first_edge().descend().node) };\n         self.height -= 1;\n         self.node_as_mut().as_leaf_mut().parent = None;\n \n@@ -443,9 +453,9 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n }\n \n impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n-    /// Unsafely asserts to the compiler some static information about whether this\n-    /// node is a `Leaf` or an `Internal`.\n-    unsafe fn cast_unchecked<NewType>(self) -> NodeRef<marker::Mut<'a>, K, V, NewType> {\n+    /// Unsafely asserts to the compiler the static information that this node is an `Internal`.\n+    unsafe fn cast_to_internal_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n+        debug_assert!(self.height > 0);\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n     }\n \n@@ -943,10 +953,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                     Handle::new_edge(left.reborrow_mut(), insert_idx)\n                 },\n                 InsertionPlace::Right(insert_idx) => unsafe {\n-                    Handle::new_edge(\n-                        right.node_as_mut().cast_unchecked::<marker::Leaf>(),\n-                        insert_idx,\n-                    )\n+                    Handle::new_edge(right.leaf_node_as_mut(), insert_idx)\n                 },\n             };\n             let val_ptr = insertion_edge.insert_fit(key, val);\n@@ -1006,10 +1013,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n                     Handle::new_edge(left.reborrow_mut(), insert_idx)\n                 },\n                 InsertionPlace::Right(insert_idx) => unsafe {\n-                    Handle::new_edge(\n-                        right.node_as_mut().cast_unchecked::<marker::Internal>(),\n-                        insert_idx,\n-                    )\n+                    Handle::new_edge(right.internal_node_as_mut(), insert_idx)\n                 },\n             };\n             insertion_edge.insert_fit(key, val, edge);\n@@ -1205,7 +1209,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n \n             let mut new_root = Root { node: BoxedNode::from_internal(new_node), height };\n \n-            new_root.node_as_mut().cast_unchecked().correct_childrens_parent_links(0..=new_len);\n+            new_root.internal_node_as_mut().correct_childrens_parent_links(0..=new_len);\n \n             (self.node, k, v, new_root)\n         }\n@@ -1258,8 +1262,8 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n             if self.node.height > 1 {\n                 // SAFETY: the height of the nodes being merged is one below the height\n                 // of the node of this edge, thus above zero, so they are internal.\n-                let mut left_node = left_node.cast_unchecked::<marker::Internal>();\n-                let right_node = right_node.cast_unchecked::<marker::Internal>();\n+                let mut left_node = left_node.cast_to_internal_unchecked();\n+                let right_node = right_node.cast_to_internal_unchecked();\n                 ptr::copy_nonoverlapping(\n                     right_node.edge_at(0),\n                     left_node.edges_mut().as_mut_ptr().add(left_len + 1),"}, {"sha": "fcb0d6031be62f2b9816107307d95e8ed8c94bd1", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -204,8 +204,8 @@ macro_rules! int_module {\n \n             #[test]\n             fn test_from_str() {\n-                fn from_str<T: ::std::str::FromStr>(t: &str) -> Option<T> {\n-                    ::std::str::FromStr::from_str(t).ok()\n+                fn from_str<T: std::str::FromStr>(t: &str) -> Option<T> {\n+                    std::str::FromStr::from_str(t).ok()\n                 }\n                 assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n                 assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));"}, {"sha": "2cdd9c4d19e6e93faad2a16640dac845d05c659b", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -39,10 +39,13 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n pub enum Void {}\n \n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n-    let mut n = 0;\n-    while *s != 0 {\n-        n += 1;\n-        s = s.offset(1);\n+    // SAFETY: The caller must guarantee `s` points to a valid 0-terminated string.\n+    unsafe {\n+        let mut n = 0;\n+        while *s != 0 {\n+            n += 1;\n+            s = s.offset(1);\n+        }\n+        n\n     }\n-    return n;\n }"}, {"sha": "d9efdec33d93749948315dec25cd8fd468c2f8b4", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n pub mod alloc;\n pub mod args;\n pub mod cmath;"}, {"sha": "b3203c16c50022bb6f67e436899dd7a9879640ed", "filename": "library/std/src/sys/unsupported/mutex.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmutex.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,7 +1,8 @@\n-use crate::cell::UnsafeCell;\n+use crate::cell::Cell;\n \n pub struct Mutex {\n-    locked: UnsafeCell<bool>,\n+    // This platform has no threads, so we can use a Cell here.\n+    locked: Cell<bool>,\n }\n \n pub type MovableMutex = Mutex;\n@@ -10,35 +11,26 @@ unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {} // no threads on this platform\n \n impl Mutex {\n-    #[rustc_const_stable(feature = \"const_sys_mutex_new\", since = \"1.0.0\")]\n     pub const fn new() -> Mutex {\n-        Mutex { locked: UnsafeCell::new(false) }\n+        Mutex { locked: Cell::new(false) }\n     }\n \n     #[inline]\n     pub unsafe fn init(&mut self) {}\n \n     #[inline]\n     pub unsafe fn lock(&self) {\n-        let locked = self.locked.get();\n-        assert!(!*locked, \"cannot recursively acquire mutex\");\n-        *locked = true;\n+        assert_eq!(self.locked.replace(true), false, \"cannot recursively acquire mutex\");\n     }\n \n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        *self.locked.get() = false;\n+        self.locked.set(false);\n     }\n \n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        let locked = self.locked.get();\n-        if *locked {\n-            false\n-        } else {\n-            *locked = true;\n-            true\n-        }\n+        self.locked.replace(true) == false\n     }\n \n     #[inline]"}, {"sha": "6982b2b155fa5b8ae75ecb3a0ef0454b219fa13d", "filename": "library/std/src/sys/unsupported/rwlock.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,32 +1,33 @@\n-use crate::cell::UnsafeCell;\n+use crate::cell::Cell;\n \n pub struct RWLock {\n-    mode: UnsafeCell<isize>,\n+    // This platform has no threads, so we can use a Cell here.\n+    mode: Cell<isize>,\n }\n \n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {} // no threads on this platform\n \n impl RWLock {\n     pub const fn new() -> RWLock {\n-        RWLock { mode: UnsafeCell::new(0) }\n+        RWLock { mode: Cell::new(0) }\n     }\n \n     #[inline]\n     pub unsafe fn read(&self) {\n-        let mode = self.mode.get();\n-        if *mode >= 0 {\n-            *mode += 1;\n+        let m = self.mode.get();\n+        if m >= 0 {\n+            self.mode.set(m + 1);\n         } else {\n             rtabort!(\"rwlock locked for writing\");\n         }\n     }\n \n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n-        let mode = self.mode.get();\n-        if *mode >= 0 {\n-            *mode += 1;\n+        let m = self.mode.get();\n+        if m >= 0 {\n+            self.mode.set(m + 1);\n             true\n         } else {\n             false\n@@ -35,19 +36,15 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn write(&self) {\n-        let mode = self.mode.get();\n-        if *mode == 0 {\n-            *mode = -1;\n-        } else {\n+        if self.mode.replace(-1) != 0 {\n             rtabort!(\"rwlock locked for reading\")\n         }\n     }\n \n     #[inline]\n     pub unsafe fn try_write(&self) -> bool {\n-        let mode = self.mode.get();\n-        if *mode == 0 {\n-            *mode = -1;\n+        if self.mode.get() == 0 {\n+            self.mode.set(-1);\n             true\n         } else {\n             false\n@@ -56,12 +53,12 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn read_unlock(&self) {\n-        *self.mode.get() -= 1;\n+        self.mode.set(self.mode.get() - 1);\n     }\n \n     #[inline]\n     pub unsafe fn write_unlock(&self) {\n-        *self.mode.get() += 1;\n+        assert_eq!(self.mode.replace(0), -1);\n     }\n \n     #[inline]"}, {"sha": "a0a37ef8316a87ca6f063361418f32fe676e6815", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -53,6 +53,7 @@ pub mod thread_local_key;\n pub mod time;\n \n #[path = \"../unsupported/common.rs\"]\n+#[deny(unsafe_op_in_unsafe_fn)]\n #[allow(unused)]\n mod common;\n pub use common::*;"}, {"sha": "18295e1129a053be0aed1e01657fee90d1991ac6", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -66,5 +66,6 @@ cfg_if::cfg_if! {\n }\n \n #[path = \"../unsupported/common.rs\"]\n+#[deny(unsafe_op_in_unsafe_fn)]\n mod common;\n pub use common::*;"}, {"sha": "91d919a3f9b755ef99708adfeec97f05337770b7", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -21,7 +21,6 @@ impl StaticMutex {\n     /// first used with any of the functions below.\n     /// Also, the behavior is undefined if this mutex is ever used reentrantly,\n     /// i.e., `lock` is called by the thread currently holding the lock.\n-    #[rustc_const_stable(feature = \"const_sys_mutex_new\", since = \"1.0.0\")]\n     pub const fn new() -> Self {\n         Self(imp::Mutex::new())\n     }"}, {"sha": "41e7e6adcf16d884bcb307483486aafff01f33ca", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -182,8 +182,8 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n /// Base code taken form `libserialize::json::escape_str`\n struct EscapedString<S: AsRef<str>>(S);\n \n-impl<S: AsRef<str>> ::std::fmt::Display for EscapedString<S> {\n-    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+impl<S: AsRef<str>> std::fmt::Display for EscapedString<S> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n         let mut start = 0;\n \n         for (i, byte) in self.0.as_ref().bytes().enumerate() {"}, {"sha": "1887b805da19bcd46737a2d02f141faac500dc5b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -2617,7 +2617,7 @@ impl Step for BuildManifest {\n         let image_bin = image.join(\"bin\");\n         let _ = fs::remove_dir_all(&image);\n         t!(fs::create_dir_all(&image_bin));\n-        builder.install(&build_manifest, &image_bin.join(\"build-manifest\"), 0o755);\n+        builder.install(&build_manifest, &image_bin, 0o755);\n \n         // Prepare the overlay.\n         let overlay = tmp.join(\"build-manifest-overlay\");"}, {"sha": "22a8e828862f7be2dd6d7c9e2c5b035045341539", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -177,6 +177,9 @@ const LLVM_TOOLS: &[&str] = &[\n     \"llvm-size\", // used to prints the size of the linker sections of a program\n     \"llvm-strip\", // used to discard symbols from binary files to reduce their size\n     \"llvm-ar\", // used for creating and modifying archive files\n+    \"llvm-dis\", // used to disassemble LLVM bitcode\n+    \"llc\",     // used to compile LLVM bytecode\n+    \"opt\",     // used to optimize LLVM bytecode\n ];\n \n pub const VERSION: usize = 2;"}, {"sha": "2a9507cfc4c18b82f7597bdfc4cae651accd654f", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -30,7 +30,7 @@ impl FromStr for Profile {\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n             \"a\" | \"lib\" | \"library\" => Ok(Profile::Library),\n-            \"b\" | \"compiler\" => Ok(Profile::Compiler),\n+            \"b\" | \"compiler\" | \"rustdoc\" => Ok(Profile::Compiler),\n             \"c\" | \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n             \"d\" | \"maintainer\" | \"user\" => Ok(Profile::User),\n             _ => Err(format!(\"unknown profile: '{}'\", s)),\n@@ -108,7 +108,7 @@ pub fn interactive_path() -> io::Result<Profile> {\n     println!(\n         \"Welcome to the Rust project! What do you want to do with x.py?\n a) Contribute to the standard library\n-b) Contribute to the compiler\n+b) Contribute to the compiler or rustdoc\n c) Contribute to the compiler, and also modify LLVM or codegen\n d) Install Rust from source\"\n     );"}, {"sha": "bda9e0f57841cfd8051c54cbf7c933f44a4bfc72", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -966,6 +966,15 @@ impl Step for Compiletest {\n     /// compiletest `mode` and `suite` arguments. For example `mode` can be\n     /// \"run-pass\" or `suite` can be something like `debuginfo`.\n     fn run(self, builder: &Builder<'_>) {\n+        if builder.top_stage == 0 && env::var(\"COMPILETEST_FORCE_STAGE0\").is_err() {\n+            eprintln!(\"\\\n+error: `--stage 0` runs compiletest on the beta compiler, not your local changes, and will almost always cause tests to fail\n+help: use `--stage 1` instead\n+note: if you're sure you want to do this, please open an issue as to why. In the meantime, you can override this with `COMPILETEST_FORCE_STAGE0=1`.\"\n+            );\n+            std::process::exit(1);\n+        }\n+\n         let compiler = self.compiler;\n         let target = self.target;\n         let mode = self.mode;"}, {"sha": "090b06f2a0a7fb5ee2f0b632ef301e5755c766e4", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -469,24 +469,27 @@ jobs:\n                 --build=x86_64-apple-darwin\n                 --host=aarch64-apple-darwin\n                 --target=aarch64-apple-darwin\n+                --enable-full-tools\n                 --enable-sanitizers\n                 --enable-profiler\n                 --set rust.jemalloc\n                 --set llvm.ninja=false\n-                --tools=rls,clippy,rustfmt,analysis,src\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               SELECT_XCODE: /Applications/Xcode_12_beta.app\n               USE_XCODE_CLANG: 1\n               MACOSX_DEPLOYMENT_TARGET: 11.0\n               MACOSX_STD_DEPLOYMENT_TARGET: 11.0\n               NO_LLVM_ASSERTIONS: 1\n               NO_DEBUG_ASSERTIONS: 1\n-              # TODO: Cargo is disabled until OpenSSL 1.1.1 can be\n-              # compiled for aarch64-apple-darwin::\n-              # https://github.com/openssl/openssl/pull/12369. Once\n-              # fixed, remove `--tools`, add back\n-              # `--enable-full-tools`, and enable this again\n-              # DIST_REQUIRE_ALL_TOOLS: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+              # Corresponds to 16K page size\n+              #\n+              # Shouldn't be needed if jemalloc-sys is updated to\n+              # handle this platform like iOS or if we build on\n+              # aarch64-apple-darwin itself.\n+              #\n+              # https://github.com/gnzlbg/jemallocator/blob/c27a859e98e3cb790dc269773d9da71a1e918458/jemalloc-sys/build.rs#L237\n+              JEMALLOC_SYS_WITH_LG_PAGE: 14\n             <<: *job-macos-xl\n \n           ######################"}, {"sha": "ae55297b78c4981a3d94c2f5d6c2f6b83e98f2dc", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -57,7 +57,7 @@ Specifically, these platforms are required to have each of the following:\n \n target | std | host | notes\n -------|-----|------|-------\n-`aarch64-apple-darwin` | \u2713 |  | ARM64 macOS (11.0+, Big Sur+)\n+`aarch64-apple-darwin` | \u2713 | \u2713 | ARM64 macOS (11.0+, Big Sur+)\n `aarch64-apple-ios` | \u2713 |  | ARM64 iOS\n `aarch64-fuchsia` | \u2713 |  | ARM64 Fuchsia\n `aarch64-linux-android` | \u2713 |  | ARM64 Android"}, {"sha": "cfaacf7a5be337d308b571bb0abf9921e1862729", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:9:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-   |                                                ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                                ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |               ^^^ non-trivial anonymous constants must not depend on the parameter `CFG`\n+   |               ^^^ cannot perform const operation using `CFG`\n    |\n-   = help: it is currently only allowed to use either `CFG` or `{ CFG }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `CFG`\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:18:21"}, {"sha": "768180d0813a93b4fb8a98c790bbe8c070fb0876", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -8,7 +8,7 @@\n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n \n #[derive(PartialEq, Eq)]\n struct Config {\n@@ -19,7 +19,7 @@ struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "bce701ade8651f22c40c8956a30c0f88fb9a3e2a", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-argument-if-length.rs:19:24\n    |\n LL |     pad: [u8; is_zst::<T>()],\n-   |                        ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                        ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:17:12"}, {"sha": "a8bffd17b912c0ac3205a1541357bf684ad4f40c", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -17,7 +17,7 @@ pub struct AtLeastByte<T: ?Sized> {\n     value: T,\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR evaluation of constant value failed\n }\n "}, {"sha": "359c2d2a22f02b672257a665e3dc1780bf74461a", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "9746adab29bf63c7f89cb3ee1d3b5525dc779415", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n     //[full]~^ ERROR constant expression depends"}, {"sha": "46485262cc46eab2606aab57e8818647ce607ef9", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/simple.rs:8:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                                     ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/simple.rs:8:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-   |                                   ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                   ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "981d993f58976460988c182404cd31cc11ce2a09", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "5e2c080927f8601c282f8c394294b6a01d55a0c1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -5,7 +5,7 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n     todo!()"}, {"sha": "84449018e4609971b1768a10e97f30baf8c49e83", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:9:39\n    |\n LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n-   |                                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                       ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:12:13\n    |\n LL |     [0; foo(N)]\n-   |             ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |             ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c838070dc95af4dd7f894e53e5f180985ed884fb", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -7,10 +7,10 @@\n const fn foo(n: usize) -> usize { n * 2 }\n \n fn bar<const N: usize>() -> [u32; foo(N)] {\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR constant expression depends on a generic parameter\n     [0; foo(N)]\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "d3f7143327ead8f5023faff290ae4468be4eb9b3", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:7:53\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n+   |                                                     ^ cannot perform const operation using `A`\n    |\n-   = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `A`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:7:57\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                                         ^ non-trivial anonymous constants must not depend on the parameter `B`\n+   |                                                         ^ cannot perform const operation using `B`\n    |\n-   = help: it is currently only allowed to use either `B` or `{ B }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84ddfe055dc3fe5644e1ca410a06430cf4b8f0c9", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -5,8 +5,8 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n-//[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters may not be used in const operations\n+//[min]~| ERROR generic parameters may not be used in const operations\n //[full]~^^^ ERROR constant expression depends on a generic parameter\n \n fn main() {}"}, {"sha": "20a8d9fdaab53c5001082a5ba291f46ebb6ceb7e", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n-   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                            ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22"}, {"sha": "8971c00ed5a298d6883d5addaf0e67663dd9d53c", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -13,7 +13,7 @@ trait Trait<const S: &'static str> {}\n struct Bug<T>\n where\n     T: Trait<{std::intrinsics::type_name::<T>()}>\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR constant expression depends on a generic parameter\n {\n     t: T"}, {"sha": "526807f0a247469e728ae6f6e32cae0697a99401", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:7:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n-   |                                             ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n+   |                                             ^^^^^ cannot perform const operation using `COUNT`\n    |\n-   = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n-   |                              ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n+   |                              ^^^^^ cannot perform const operation using `COUNT`\n    |\n-   = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c0a3a0377468f3dbc2fbbc21899af330331b14a", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -6,12 +6,12 @@\n \n pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used\n+//[min]~^^ ERROR generic parameters may not be used\n \n impl<const COUNT: usize> MyArray<COUNT> {\n     fn inner(&self) -> &[u8; COUNT + 1] {\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used\n+        //[min]~^^ ERROR generic parameters may not be used\n         &self.0\n     }\n }"}, {"sha": "3c344edbf1d15f33329187968c9cd8c0ff13aadc", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67375.rs:9:25\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n-   |                         ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                         ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-67375.rs:7:12"}, {"sha": "ecc76bcae06c5b8f1e55517ff27ccdf74ee15528", "filename": "src/test/ui/const-generics/issue-67375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -7,7 +7,7 @@\n struct Bug<T> {\n     //~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ WARN cannot use constants which depend on generic parameters in types\n     //[full]~^^^ WARN this was previously accepted by the compiler\n }"}, {"sha": "804236c30bd8153fa9e63d5caef60bc1e6c9d416", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:14:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n-   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:17:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n-   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                                             ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:11:12"}, {"sha": "6771603f2594bad3e0af72323e97cd3b9d810e34", "filename": "src/test/ui/const-generics/issue-67945-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -12,10 +12,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         0\n     }],\n }"}, {"sha": "2de942c1220cd636c43358e10bcdd4612bb2274a", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:12:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n-   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:15:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n-   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                                             ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:9:12"}, {"sha": "72dbb674e66bd33fd108df58af146dab975d037d", "filename": "src/test/ui/const-generics/issue-67945-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -10,10 +10,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         0\n     }],\n }"}, {"sha": "b176f9d1c75aa95d2b0ecfa8a567aa73c3ecf79e", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61747.rs:8:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {\n-   |                              ^ non-trivial anonymous constants must not depend on the parameter `C`\n+   |                              ^ cannot perform const operation using `C`\n    |\n-   = help: it is currently only allowed to use either `C` or `{ C }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `C`\n \n error: aborting due to previous error\n "}, {"sha": "3a4dd1cdd181df9d1db2e4391868d6a2fdc89304", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -7,7 +7,7 @@ struct Const<const N: usize>;\n impl<const C: usize> Const<{C}> {\n     fn successor() -> Const<{C + 1}> {\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used\n+        //[min]~^^ ERROR generic parameters may not be used\n         Const\n     }\n }"}, {"sha": "9e31466259fd9a607957c278a49e26f3e19f3cee", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61935.rs:10:23\n    |\n LL |         Self:FooImpl<{N==0}>\n-   |                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                       ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "9fa02329a7124c805d82453896e8babfb9f87a72", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -9,7 +9,7 @@ impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n //[full]~^ERROR constant expression depends on a generic parameter\n-//[min]~^^ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ERROR generic parameters may not be used in const operations\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "3bd127ee74a592c401b72f3d9cd30f8e1d931e0c", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-62220.rs:8:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-   |                                                           ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                                           ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "2017473fa9e24cbb66bc2961685bdc32aa27759b", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -6,7 +6,7 @@\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension."}, {"sha": "c73f62a4a07d9a2141ca5ef1c2c98eedac98c7bd", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-62456.rs:7:20\n    |\n LL |     let _ = [0u64; N + 1];\n-   |                    ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                    ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "cbb2a11a931aeabd1df230222a68ef0211fc7884", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -6,7 +6,7 @@\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "8b02fd108bd5bbc427aa1a8effbe700326b1d300", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:16:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n-   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n-   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n   --> $DIR/issue-64494.rs:19:1"}, {"sha": "014742be03db609f858a3b7ae8f362ba412dfc6f", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -15,10 +15,10 @@ impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n //[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "282f72be6da6e3bc2e139123e90271824caeb544", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-66205.rs:8:14\n    |\n LL |     fact::<{ N - 1 }>();\n-   |              ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |              ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "4e37c247d008ed461f3596cdebd3cd08005b4674", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -7,7 +7,7 @@\n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "35d97c4624811c79f461306eecdab42dd1f0fea9", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67739.rs:12:30\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n-   |                              ^^^^^^^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |                              ^^^^^^^^^^^^^^^^ cannot perform const operation using `Self`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: aborting due to previous error\n "}, {"sha": "21d13de22ebfc7ac279cb0bb0ac4bcb84414eb98", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -11,7 +11,7 @@ pub trait Trait {\n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^^ ERROR generic parameters may not be used in const operations\n         0\n     }\n }"}, {"sha": "b900a0d096ac2d71642415634ab95d9a48d3aea3", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-68366.rs:12:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                     ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-68366.rs:12:13"}, {"sha": "474cdb7258d96478eb2a3f6c30991e970c024738", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -11,7 +11,7 @@ struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n-//[min]~^^ generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ generic parameters may not be used in const operations\n \n struct Foo;\n "}, {"sha": "7828d859394979e5841696d97a9bb668f06d1e03", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:29:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-   |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n+   |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n    |\n-   = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `INT_BITS`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:29:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-   |                            ^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `FRAC_BITS`\n+   |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`\n    |\n-   = help: it is currently only allowed to use either `FRAC_BITS` or `{ FRAC_BITS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `FRAC_BITS`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4fea94cb4652bf5f992a6730cfca6eedab970a57", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -27,8 +27,8 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n-    //[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n+    //[min]~| ERROR generic parameters may not be used in const operations\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where"}, {"sha": "d960d9513b7528e8a083944e5a3e9d30b91bc3c6", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,34 +1,34 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n-   |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n+   |                 ^^^ cannot perform const operation using `LHS`\n    |\n-   = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `LHS`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n-   |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n+   |                        ^^^ cannot perform const operation using `RHS`\n    |\n-   = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `RHS`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n+   |                         ^ cannot perform const operation using `I`\n    |\n-   = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `I`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                                    ^ non-trivial anonymous constants must not depend on the parameter `J`\n+   |                                    ^ cannot perform const operation using `J`\n    |\n-   = help: it is currently only allowed to use either `J` or `{ J }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `J`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:22:26"}, {"sha": "57572e23aa4dee8a83d7ab9c04ca87caae4be15f", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -10,8 +10,8 @@ pub trait True {}\n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n //[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters must not be used inside of non-trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ Error generic parameters may not be used in const operations\n+//[min]~| Error generic parameters may not be used in const operations\n {\n }\n impl True for Condition<true> {}\n@@ -28,8 +28,8 @@ where\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters must not be used inside of non-trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^^^^ Error generic parameters may not be used in const operations\n+//[min]~| Error generic parameters may not be used in const operations\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "9fec3eb946d8313c92ce512338444a72da4101de", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "6182042bde7817e85aa29d0dd7e69b2625f95578", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -8,7 +8,7 @@\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n {\n }\n "}, {"sha": "c10db84ea6ecc1c1fc36e22907cf0c2f2c70302c", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n-   |                                              ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                              ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n-   |                                          ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                          ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9051c36fe81f40aa8d5dd2a7c96583b4b7686438", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -5,13 +5,13 @@\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n     todo!()\n }\n \n fn const_param<const N: usize>() -> [u8; N + 1] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n     todo!()\n }\n "}, {"sha": "8257ffbf4915b3d5cb731a7f4a6c96514febfa90", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -7,19 +7,19 @@ fn ok<const M: usize>() -> [u8; M] {\n }\n \n struct Break0<const N: usize>([u8; { N + 1 }]);\n-//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//~^ ERROR generic parameters may not be used in const operations\n \n struct Break1<const N: usize>([u8; { { N } }]);\n-//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//~^ ERROR generic parameters may not be used in const operations\n \n fn break2<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n fn break3<const N: usize>() {\n     let _ = [0; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n trait Foo {"}, {"sha": "73768ac03a4b107d40aab45adbefe8c27782c925", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,34 +1,34 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:9:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n-   |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                      ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:12:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n-   |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                        ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:16:17\n    |\n LL |     let _: [u8; N + 1];\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:21:17\n    |\n LL |     let _ = [0; N + 1];\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64da5e07df2f4bbfb354cfdb1801d5f55fb35f55", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/self-ty-in-const-1.rs:4:41\n    |\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n-   |                                         ^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |                                         ^^^^ cannot perform const operation using `Self`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:14:41"}, {"sha": "39aa8087cec50a5fff1ff06003597fda61947205", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -6,13 +6,13 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                            ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21"}, {"sha": "51f0cff3f215e61e8f1da9cb07071cd932387464", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -6,7 +6,7 @@\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "935f12dd2c3048e8c8f077653e303619d7fdee1a", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:9:17\n    |\n LL |     let _: [u8; N + 1];\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:17:21\n    |\n LL |     let _: Const::<{N + 1}>;\n-   |                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                     ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "103c580f28fc44985d2c154fa619c339bbe511aa", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -8,15 +8,15 @@\n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "f8c517a9395a09a6aecf5f64e51cab9f8654695d", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f243a2ad904705a1e340a08639dca105605b4175/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=f243a2ad904705a1e340a08639dca105605b4175", "patch": "@@ -22,6 +22,7 @@ use std::sync::Mutex;\n use std::time::Instant;\n \n static HOSTS: &[&str] = &[\n+    \"aarch64-apple-darwin\",\n     \"aarch64-unknown-linux-gnu\",\n     \"aarch64-unknown-linux-musl\",\n     \"arm-unknown-linux-gnueabi\",\n@@ -55,6 +56,7 @@ static HOSTS: &[&str] = &[\n ];\n \n static TARGETS: &[&str] = &[\n+    \"aarch64-apple-darwin\",\n     \"aarch64-apple-ios\",\n     \"aarch64-fuchsia\",\n     \"aarch64-linux-android\","}]}