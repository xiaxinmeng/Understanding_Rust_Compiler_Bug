{"sha": "7c34550931a457dd830173fc4a3c467a2ba2e784", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMzQ1NTA5MzFhNDU3ZGQ4MzAxNzNmYzRhM2M0NjdhMmJhMmU3ODQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-03T01:04:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-03T01:06:46Z"}, "message": "Make _|_ type binopable\n\nBut don't actually generate code that does the operation. That means\nhoisting the check I added in my last commit from trans_compare\nup into trans_eager_binop (don't generate any code if one operand\nhas type _|_ ).\n\nCloses #777", "tree": {"sha": "010fe71786e4d9b609b27a515d7e56950a68713f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/010fe71786e4d9b609b27a515d7e56950a68713f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c34550931a457dd830173fc4a3c467a2ba2e784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c34550931a457dd830173fc4a3c467a2ba2e784", "html_url": "https://github.com/rust-lang/rust/commit/7c34550931a457dd830173fc4a3c467a2ba2e784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c34550931a457dd830173fc4a3c467a2ba2e784/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c93b5fb29dd8819946d7012414a6eed65ba365", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c93b5fb29dd8819946d7012414a6eed65ba365", "html_url": "https://github.com/rust-lang/rust/commit/44c93b5fb29dd8819946d7012414a6eed65ba365"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "98ca83a6ff6d18fef643bd447a0e04b26e0bec0c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7c34550931a457dd830173fc4a3c467a2ba2e784/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34550931a457dd830173fc4a3c467a2ba2e784/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7c34550931a457dd830173fc4a3c467a2ba2e784", "patch": "@@ -2702,8 +2702,6 @@ fn trans_unary(cx: &@block_ctxt, op: ast::unop, e: &@ast::expr,\n     }\n }\n \n-// Important to get types for both lhs and rhs, because one might be _|_\n-// and the other not.\n fn trans_compare(cx0: &@block_ctxt, op: ast::binop,\n                  lhs0: ValueRef, lhs_t: ty::t, rhs0: ValueRef,\n                 rhs_t: ty::t) -> result {\n@@ -2725,22 +2723,14 @@ fn trans_compare(cx0: &@block_ctxt, op: ast::binop,\n       ast::le. | ast::gt. { llop = C_u8(abi::cmp_glue_op_le); }\n     }\n \n-    if (! ty::type_is_bot(bcx_tcx(cx0), rhs_r.ty) &&\n-        ! ty::type_is_bot(bcx_tcx(cx0), lhs_r.ty)) {\n-        let rs = compare(cx, lhs, rhs, rhs_r.ty, llop);\n+    let rs = compare(cx, lhs, rhs, rhs_r.ty, llop);\n \n-        // Invert the result if necessary.\n-        alt op {\n-          ast::eq. | ast::lt. | ast::le. { ret rslt(rs.bcx, rs.val); }\n-          ast::ne. | ast::ge. | ast::gt. {\n-            ret rslt(rs.bcx, rs.bcx.build.Not(rs.val));\n-          }\n-        }\n-    }\n-    else {\n-        // If either is bottom, it diverges. So no need to do the\n-        // actual comparison.\n-        ret rslt(cx, cx.build.Unreachable());\n+    // Invert the result if necessary.\n+    alt op {\n+      ast::eq. | ast::lt. | ast::le. { ret rslt(rs.bcx, rs.val); }\n+      ast::ne. | ast::ge. | ast::gt. {\n+        ret rslt(rs.bcx, rs.bcx.build.Not(rs.val));\n+      }\n     }\n }\n \n@@ -3387,6 +3377,14 @@ fn trans_vec_add(cx: &@block_ctxt, t: &ty::t, lhs: ValueRef, rhs: ValueRef) ->\n // and the other not.\n fn trans_eager_binop(cx: &@block_ctxt, op: ast::binop, lhs: ValueRef,\n                      lhs_t: ty::t, rhs: ValueRef, rhs_t: ty::t) -> result {\n+\n+    // If either is bottom, it diverges. So no need to do the\n+    // operation.\n+    if (ty::type_is_bot(bcx_tcx(cx), lhs_t) ||\n+        ty::type_is_bot(bcx_tcx(cx), rhs_t)) {\n+        ret rslt(cx, cx.build.Unreachable());\n+    }\n+\n     let is_float = false;\n     let intype = lhs_t;\n     if ty::type_is_bot(bcx_tcx(cx), intype) {"}, {"sha": "1c14a0be2c09f40c35cec03b543d938ef2f26814", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c34550931a457dd830173fc4a3c467a2ba2e784/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34550931a457dd830173fc4a3c467a2ba2e784/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7c34550931a457dd830173fc4a3c467a2ba2e784", "patch": "@@ -2880,6 +2880,7 @@ fn is_binopable(cx: &ctxt, ty: t, op: ast::binop) -> bool {\n     const tycat_str: int = 4;\n     const tycat_vec: int = 5;\n     const tycat_struct: int = 6;\n+    const tycat_bot: int = 7;\n \n     const opcat_add: int = 0;\n     const opcat_sub: int = 1;\n@@ -2938,6 +2939,7 @@ fn is_binopable(cx: &ctxt, ty: t, op: ast::binop) -> bool {\n           ty_ivec(_) { tycat_vec }\n           ty_rec(_) { tycat_struct }\n           ty_tag(_, _) { tycat_struct }\n+          ty_bot.    { tycat_bot }\n           _ { tycat_other }\n         }\n     }\n@@ -2954,11 +2956,13 @@ fn is_binopable(cx: &ctxt, ty: t, op: ast::binop) -> bool {\n          /*float*/\n          /*str*/\n          /*vec*/\n+         /*bot*/\n         tbl =\n         [[f, f, f, f, t, t, f, f], [f, f, f, f, t, t, t, t],\n          [t, t, t, t, t, t, t, f], [t, t, t, f, t, t, f, f],\n          [t, f, f, f, t, t, f, f], [t, f, f, f, t, t, f, f],\n-         [f, f, f, f, t, t, f, f]]; /*struct*/\n+         [f, f, f, f, t, t, f, f],\n+         [t, t, t, t, t, t, t, t]]; /*struct*/\n \n     ret tbl.(tycat(cx, ty)).(opcat(op));\n }"}, {"sha": "dc847b30fc2d1bf60cd9d71bd9bf9624eb507713", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c34550931a457dd830173fc4a3c467a2ba2e784/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c34550931a457dd830173fc4a3c467a2ba2e784/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=7c34550931a457dd830173fc4a3c467a2ba2e784", "patch": "@@ -0,0 +1,4 @@\n+fn wsucc(n: int) -> int {\n+    { ret n + 1 } + 0;\n+}\n+fn main() {}"}]}