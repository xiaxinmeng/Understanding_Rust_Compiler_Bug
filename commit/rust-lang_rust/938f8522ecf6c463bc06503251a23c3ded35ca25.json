{"sha": "938f8522ecf6c463bc06503251a23c3ded35ca25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOGY4NTIyZWNmNmM0NjNiYzA2NTAzMjUxYTIzYzNkZWQzNWNhMjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-04T07:43:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-08T21:04:54Z"}, "message": "miri validation: debug-complain about unexpected errors", "tree": {"sha": "26e468c2d9e13b8f9484dc99e7b4acb3caa9449c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e468c2d9e13b8f9484dc99e7b4acb3caa9449c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938f8522ecf6c463bc06503251a23c3ded35ca25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938f8522ecf6c463bc06503251a23c3ded35ca25", "html_url": "https://github.com/rust-lang/rust/commit/938f8522ecf6c463bc06503251a23c3ded35ca25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938f8522ecf6c463bc06503251a23c3ded35ca25/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0468929ce3f3e142287124a37f3318cc3b53a52b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0468929ce3f3e142287124a37f3318cc3b53a52b", "html_url": "https://github.com/rust-lang/rust/commit/0468929ce3f3e142287124a37f3318cc3b53a52b"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "b3de44f36d2b2d3485862e39626f7574d8cfae4d", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/938f8522ecf6c463bc06503251a23c3ded35ca25/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938f8522ecf6c463bc06503251a23c3ded35ca25/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=938f8522ecf6c463bc06503251a23c3ded35ca25", "patch": "@@ -46,13 +46,17 @@ macro_rules! try_validation {\n     ($e:expr, $what:expr, $where:expr, $details:expr) => {{\n         match $e {\n             Ok(x) => x,\n+            // We re-throw the error, so we are okay with allocation:\n+            // this can only slow down builds that fail anyway.\n             Err(_) => throw_validation_failure!($what, $where, $details),\n         }\n     }};\n \n     ($e:expr, $what:expr, $where:expr) => {{\n         match $e {\n             Ok(x) => x,\n+            // We re-throw the error, so we are okay with allocation:\n+            // this can only slow down builds that fail anyway.\n             Err(_) => throw_validation_failure!($what, $where),\n         }\n     }};\n@@ -359,10 +363,13 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                         format_args!(\"a dangling {} (created from integer)\", kind),\n                         self.path\n                     ),\n-                    _ => throw_validation_failure!(\n-                        format_args!(\"a dangling {} (not entirely in bounds)\", kind),\n-                        self.path\n-                    ),\n+                    err_unsup!(PointerOutOfBounds { .. }) | err_unsup!(DanglingPointerDeref) => {\n+                        throw_validation_failure!(\n+                            format_args!(\"a dangling {} (not entirely in bounds)\", kind),\n+                            self.path\n+                        )\n+                    }\n+                    _ => bug!(\"Unexpected error during ptr inbounds test: {}\", err),\n                 }\n             }\n         };\n@@ -638,6 +645,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 err_unsup!(ReadPointerAsBytes) => {\n                     throw_validation_failure!(\"a pointer\", self.path, \"plain (non-pointer) bytes\")\n                 }\n+                // Propagate upwards (that will also check for unexpected errors).\n                 _ => return Err(err),\n             },\n         }\n@@ -797,7 +805,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Try to cast to ptr *once* instead of all the time.\n         let op = self.force_op_ptr(op).unwrap_or(op);\n \n-        // Run it\n-        visitor.visit_value(op)\n+        // Run it.\n+        match visitor.visit_value(op) {\n+            Ok(()) => Ok(()),\n+            Err(err) if matches!(err.kind, err_unsup!(ValidationFailure { .. })) => Err(err),\n+            Err(err) if cfg!(debug_assertions) => {\n+                bug!(\"Unexpected error during validation: {}\", err)\n+            }\n+            Err(err) => Err(err),\n+        }\n     }\n }"}]}