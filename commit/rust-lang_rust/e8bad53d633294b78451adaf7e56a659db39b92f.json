{"sha": "e8bad53d633294b78451adaf7e56a659db39b92f", "node_id": "C_kwDOAAsO6NoAKGU4YmFkNTNkNjMzMjk0Yjc4NDUxYWRhZjdlNTZhNjU5ZGIzOWI5MmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T17:28:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T17:28:46Z"}, "message": "Auto merge of #14455 - jplatte:convert-nested-function-to-closure, r=Veykril\n\nConvert nested function to closure assist\n\nContinuation of / closes #13467.\nResolves #13230.\n\nr? `@Veykril`", "tree": {"sha": "a065514455a67353842afc80dacea3e41b6c19de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a065514455a67353842afc80dacea3e41b6c19de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8bad53d633294b78451adaf7e56a659db39b92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8bad53d633294b78451adaf7e56a659db39b92f", "html_url": "https://github.com/rust-lang/rust/commit/e8bad53d633294b78451adaf7e56a659db39b92f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8bad53d633294b78451adaf7e56a659db39b92f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9c0bd0a704340a075f87edfaab1e6ee33fe247", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9c0bd0a704340a075f87edfaab1e6ee33fe247", "html_url": "https://github.com/rust-lang/rust/commit/da9c0bd0a704340a075f87edfaab1e6ee33fe247"}, {"sha": "bc704e127de2b9ffce384b63812dae6b1d268024", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc704e127de2b9ffce384b63812dae6b1d268024", "html_url": "https://github.com/rust-lang/rust/commit/bc704e127de2b9ffce384b63812dae6b1d268024"}], "stats": {"total": 238, "additions": 237, "deletions": 1}, "files": [{"sha": "399f87c8f509dd7d177316e3b4b8f3f670b62825", "filename": "crates/ide-assists/src/handlers/convert_nested_function_to_closure.rs", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/e8bad53d633294b78451adaf7e56a659db39b92f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8bad53d633294b78451adaf7e56a659db39b92f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs?ref=e8bad53d633294b78451adaf7e56a659db39b92f", "patch": "@@ -0,0 +1,209 @@\n+use ide_db::assists::{AssistId, AssistKind};\n+use syntax::ast::{self, HasGenericParams, HasName};\n+use syntax::{AstNode, SyntaxKind};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: convert_nested_function_to_closure\n+//\n+// Converts a function that is defined within the body of another function into a closure.\n+//\n+// ```\n+// fn main() {\n+//     fn fo$0o(label: &str, number: u64) {\n+//         println!(\"{}: {}\", label, number);\n+//     }\n+//\n+//     foo(\"Bar\", 100);\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let foo = |label: &str, number: u64| {\n+//         println!(\"{}: {}\", label, number);\n+//     };\n+//\n+//     foo(\"Bar\", 100);\n+// }\n+// ```\n+pub(crate) fn convert_nested_function_to_closure(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    let name = ctx.find_node_at_offset::<ast::Name>()?;\n+    let function = name.syntax().parent().and_then(ast::Fn::cast)?;\n+\n+    if !is_nested_function(&function) || is_generic(&function) || has_modifiers(&function) {\n+        return None;\n+    }\n+\n+    let target = function.syntax().text_range();\n+    let body = function.body()?;\n+    let name = function.name()?;\n+    let param_list = function.param_list()?;\n+\n+    acc.add(\n+        AssistId(\"convert_nested_function_to_closure\", AssistKind::RefactorRewrite),\n+        \"Convert nested function to closure\",\n+        target,\n+        |edit| {\n+            let params = &param_list.syntax().text().to_string();\n+            let params = params.strip_prefix(\"(\").unwrap_or(params);\n+            let params = params.strip_suffix(\")\").unwrap_or(params);\n+\n+            let mut body = body.to_string();\n+            if !has_semicolon(&function) {\n+                body.push(';');\n+            }\n+            edit.replace(target, format!(\"let {name} = |{params}| {body}\"));\n+        },\n+    )\n+}\n+\n+/// Returns whether the given function is nested within the body of another function.\n+fn is_nested_function(function: &ast::Fn) -> bool {\n+    function.syntax().ancestors().skip(1).find_map(ast::Item::cast).map_or(false, |it| {\n+        matches!(it, ast::Item::Fn(_) | ast::Item::Static(_) | ast::Item::Const(_))\n+    })\n+}\n+\n+/// Returns whether the given nested function has generic parameters.\n+fn is_generic(function: &ast::Fn) -> bool {\n+    function.generic_param_list().is_some()\n+}\n+\n+/// Returns whether the given nested function has any modifiers:\n+///\n+/// - `async`,\n+/// - `const` or\n+/// - `unsafe`\n+fn has_modifiers(function: &ast::Fn) -> bool {\n+    function.async_token().is_some()\n+        || function.const_token().is_some()\n+        || function.unsafe_token().is_some()\n+}\n+\n+/// Returns whether the given nested function has a trailing semicolon.\n+fn has_semicolon(function: &ast::Fn) -> bool {\n+    function\n+        .syntax()\n+        .next_sibling_or_token()\n+        .map(|t| t.kind() == SyntaxKind::SEMICOLON)\n+        .unwrap_or(false)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::convert_nested_function_to_closure;\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_works() {\n+        check_assist(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn $0foo(a: u64, b: u64) -> u64 {\n+        2 * (a + b)\n+    }\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let foo = |a: u64, b: u64| {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_works_with_existing_semicolon() {\n+        check_assist(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn foo$0(a: u64, b: u64) -> u64 {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let foo = |a: u64, b: u64| {\n+        2 * (a + b)\n+    };\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_is_not_suggested_on_top_level_function() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn ma$0in() {}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_is_not_suggested_when_cursor_off_name() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn foo(a: u64, $0b: u64) -> u64 {\n+        2 * (a + b)\n+    }\n+\n+    _ = foo(3, 4);\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_is_not_suggested_if_function_has_generic_params() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    fn fo$0o<S: Into<String>>(s: S) -> String {\n+        s.into()\n+    }\n+\n+    _ = foo(\"hello\");\n+}\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_nested_function_to_closure_is_not_suggested_if_function_has_modifier() {\n+        check_assist_not_applicable(\n+            convert_nested_function_to_closure,\n+            r#\"\n+fn main() {\n+    const fn fo$0o(s: String) -> String {\n+        s\n+    }\n+\n+    _ = foo(\"hello\");\n+}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "fc03903e593fc8fcd739b0f2459b599f0b5d5895", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8bad53d633294b78451adaf7e56a659db39b92f/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8bad53d633294b78451adaf7e56a659db39b92f/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=e8bad53d633294b78451adaf7e56a659db39b92f", "patch": "@@ -122,6 +122,7 @@ mod handlers {\n     mod convert_iter_for_each_to_for;\n     mod convert_let_else_to_match;\n     mod convert_match_to_let_else;\n+    mod convert_nested_function_to_closure;\n     mod convert_tuple_struct_to_named_struct;\n     mod convert_named_struct_to_tuple_struct;\n     mod convert_to_guarded_return;\n@@ -228,8 +229,9 @@ mod handlers {\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n             convert_iter_for_each_to_for::convert_for_loop_with_for_each,\n             convert_let_else_to_match::convert_let_else_to_match,\n-            convert_named_struct_to_tuple_struct::convert_named_struct_to_tuple_struct,\n             convert_match_to_let_else::convert_match_to_let_else,\n+            convert_named_struct_to_tuple_struct::convert_named_struct_to_tuple_struct,\n+            convert_nested_function_to_closure::convert_nested_function_to_closure,\n             convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n             convert_two_arm_bool_match_to_matches_macro::convert_two_arm_bool_match_to_matches_macro,"}, {"sha": "f093dfddfaebe3d291acd177dda5ede409a3a3ce", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8bad53d633294b78451adaf7e56a659db39b92f/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8bad53d633294b78451adaf7e56a659db39b92f/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=e8bad53d633294b78451adaf7e56a659db39b92f", "patch": "@@ -494,6 +494,31 @@ impl Point {\n     )\n }\n \n+#[test]\n+fn doctest_convert_nested_function_to_closure() {\n+    check_doc_test(\n+        \"convert_nested_function_to_closure\",\n+        r#####\"\n+fn main() {\n+    fn fo$0o(label: &str, number: u64) {\n+        println!(\"{}: {}\", label, number);\n+    }\n+\n+    foo(\"Bar\", 100);\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let foo = |label: &str, number: u64| {\n+        println!(\"{}: {}\", label, number);\n+    };\n+\n+    foo(\"Bar\", 100);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_to_guarded_return() {\n     check_doc_test("}]}