{"sha": "1caaa40768fecb91b322b1e1befc91c54b56817c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYWFhNDA3NjhmZWNiOTFiMzIyYjFlMWJlZmM5MWM1NGI1NjgxN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-25T02:39:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-25T03:45:19Z"}, "message": "parser: gracefully handle `fn foo(A | B: type)`.", "tree": {"sha": "ee0854e5e1c7602db949809e6542cdb4396a61c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0854e5e1c7602db949809e6542cdb4396a61c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1caaa40768fecb91b322b1e1befc91c54b56817c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1caaa40768fecb91b322b1e1befc91c54b56817c", "html_url": "https://github.com/rust-lang/rust/commit/1caaa40768fecb91b322b1e1befc91c54b56817c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1caaa40768fecb91b322b1e1befc91c54b56817c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083963e58c752f1a51b67d65dc6a207bf69f1d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/083963e58c752f1a51b67d65dc6a207bf69f1d64", "html_url": "https://github.com/rust-lang/rust/commit/083963e58c752f1a51b67d65dc6a207bf69f1d64"}], "stats": {"total": 222, "additions": 125, "deletions": 97}, "files": [{"sha": "25ad2d4404cacd8912fc86a1b543253ec55e4a71", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -988,7 +988,7 @@ impl<'a> Parser<'a> {\n         let (pat, ty) = if is_name_required || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (is_name_required:{})\", is_name_required);\n \n-            let pat = self.parse_pat(Some(\"argument name\"))?;\n+            let pat = self.parse_fn_param_pat()?;\n             if let Err(mut err) = self.expect(&token::Colon) {\n                 if let Some(ident) = self.argument_without_type(\n                     &mut err,"}, {"sha": "f7c090b5135e9b5354a12386ac8344b36c96af3d", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,7 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle};\n use super::{BlockMode, SemiColonMode};\n use super::{SeqSep, TokenExpectType};\n-use super::pat::GateOr;\n+use super::pat::{GateOr, PARAM_EXPECTED};\n \n use crate::maybe_recover_from_interpolated_ty_qpath;\n use crate::ptr::P;\n@@ -1176,7 +1176,7 @@ impl<'a> Parser<'a> {\n     fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n         let lo = self.token.span;\n         let attrs = self.parse_arg_attributes()?;\n-        let pat = self.parse_pat(Some(\"argument name\"))?;\n+        let pat = self.parse_pat(PARAM_EXPECTED)?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?\n         } else {"}, {"sha": "1541031ec25395d0214fa246d3bae8674ac73483", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -14,6 +14,9 @@ use errors::{Applicability, DiagnosticBuilder};\n \n type Expected = Option<&'static str>;\n \n+/// `Expected` for function and lambda parameter patterns.\n+pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n+\n /// Whether or not an or-pattern should be gated when occurring in the current context.\n #[derive(PartialEq)]\n pub enum GateOr { Yes, No }\n@@ -49,7 +52,7 @@ impl<'a> Parser<'a> {\n         let gated_leading_vert = self.eat_or_separator() && gate_or == GateOr::Yes;\n \n         // Parse the possibly-or-pattern.\n-        let pat = self.parse_pat_with_or(gate_or, TopLevel::Yes)?;\n+        let pat = self.parse_pat_with_or(None, gate_or, TopLevel::Yes)?;\n \n         // If we parsed a leading `|` which should be gated,\n         // and no other gated or-pattern has been parsed thus far,\n@@ -65,11 +68,38 @@ impl<'a> Parser<'a> {\n         Ok(pat)\n     }\n \n+    /// Parse the pattern for a function or function pointer parameter.\n+    /// Special recovery is provided for or-patterns and leading `|`.\n+    pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        self.recover_leading_vert(\"not allowed in a parameter pattern\");\n+        let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, TopLevel::No)?;\n+\n+        if let PatKind::Or(..) = &pat.node {\n+            self.ban_illegal_fn_param_or_pat(&pat);\n+        }\n+\n+        Ok(pat)\n+    }\n+\n+    /// Ban `A | B` immediately in a parameter pattern and suggest wrapping in parens.\n+    fn ban_illegal_fn_param_or_pat(&self, pat: &Pat) {\n+        let msg = \"wrap the pattern in parenthesis\";\n+        let fix = format!(\"({})\", pprust::pat_to_string(pat));\n+        self.struct_span_err(pat.span, \"an or-pattern parameter must be wrapped in parenthesis\")\n+            .span_suggestion(pat.span, msg, fix, Applicability::MachineApplicable)\n+            .emit();\n+    }\n+\n     /// Parses a pattern, that may be a or-pattern (e.g. `Foo | Bar` in `Some(Foo | Bar)`).\n     /// Corresponds to `pat<allow_top_alt>` in RFC 2535.\n-    fn parse_pat_with_or(&mut self, gate_or: GateOr, top_level: TopLevel) -> PResult<'a, P<Pat>> {\n+    fn parse_pat_with_or(\n+        &mut self,\n+        expected: Expected,\n+        gate_or: GateOr,\n+        top_level: TopLevel,\n+    ) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern.\n-        let first_pat = self.parse_pat(None)?;\n+        let first_pat = self.parse_pat(expected)?;\n         self.maybe_recover_unexpected_comma(first_pat.span, top_level)?;\n \n         // If the next token is not a `|`,\n@@ -81,7 +111,7 @@ impl<'a> Parser<'a> {\n         let lo = first_pat.span;\n         let mut pats = vec![first_pat];\n         while self.eat_or_separator() {\n-            let pat = self.parse_pat(None).map_err(|mut err| {\n+            let pat = self.parse_pat(expected).map_err(|mut err| {\n                 err.span_label(lo, \"while parsing this or-pattern staring here\");\n                 err\n             })?;\n@@ -176,18 +206,18 @@ impl<'a> Parser<'a> {\n     /// Recursive possibly-or-pattern parser with recovery for an erroneous leading `|`.\n     /// See `parse_pat_with_or` for details on parsing or-patterns.\n     fn parse_pat_with_or_inner(&mut self) -> PResult<'a, P<Pat>> {\n-        self.recover_inner_leading_vert();\n-        self.parse_pat_with_or(GateOr::Yes, TopLevel::No)\n+        self.recover_leading_vert(\"only allowed in a top-level pattern\");\n+        self.parse_pat_with_or(None, GateOr::Yes, TopLevel::No)\n     }\n \n     /// Recover if `|` or `||` is here.\n     /// The user is thinking that a leading `|` is allowed in this position.\n-    fn recover_inner_leading_vert(&mut self) {\n+    fn recover_leading_vert(&mut self, ctx: &str) {\n         if let token::BinOp(token::Or) | token::OrOr = self.token.kind {\n             let span = self.token.span;\n             let rm_msg = format!(\"remove the `{}`\", pprust::token_to_string(&self.token));\n \n-            self.struct_span_err(span, \"a leading `|` is only allowed in a top-level pattern\")\n+            self.struct_span_err(span, &format!(\"a leading `|` is {}\", ctx))\n                 .span_suggestion(span, &rm_msg, String::new(), Applicability::MachineApplicable)\n                 .emit();\n "}, {"sha": "5721f5d235783d61102784888bdea8a261bc0cd2", "filename": "src/test/ui/anon-params-denied-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n \n trait T {\n-    fn foo(i32); //~ expected one of `:` or `@`, found `)`\n+    fn foo(i32); //~ expected one of `:`, `@`, or `|`, found `)`\n \n     fn bar_with_default_impl(String, String) {}\n     //~^ ERROR expected one of `:`"}, {"sha": "a58998e4891e09e38f5abc6c4d04277f454e4ff2", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n LL |     fn foo(i32);\n-   |               ^ expected one of `:` or `@` here\n+   |               ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -14,11 +14,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn foo(_: i32);\n    |            ^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:8:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                    ^ expected one of `:` or `@` here\n+   |                                    ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -30,11 +30,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn bar_with_default_impl(_: String, String) {}\n    |                              ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:8:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                            ^ expected one of `:` or `@` here\n+   |                                            ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -46,11 +46,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn bar_with_default_impl(String, _: String) {}\n    |                                      ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/anon-params-denied-2018.rs:13:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n-   |                      ^ expected one of `:` or `@` here\n+   |                      ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "8b18082fca7df7b04885455d4b200f966af9dc06", "filename": "src/test/ui/or-patterns/feature-gate-or_patterns-leading.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/083963e58c752f1a51b67d65dc6a207bf69f1d64/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/083963e58c752f1a51b67d65dc6a207bf69f1d64/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffeature-gate-or_patterns-leading.stderr?ref=083963e58c752f1a51b67d65dc6a207bf69f1d64", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: or-patterns syntax is experimental\n-  --> $DIR/feature-gate-or_patterns-leading.rs:7:11\n-   |\n-LL |     let | A;\n-   |           ^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/54883\n-   = help: add `#![feature(or_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b676ea851a3ba6b514148defbe5a317705445843", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -25,7 +25,11 @@ fn no_top_level_or_patterns() {\n     //           -------- This looks like an or-pattern but is in fact `|A| (B: E | ())`.\n \n     // ...and for now neither do we allow or-patterns at the top level of functions.\n-    fn fun(A | B: E) {} //~ ERROR expected one of `:` or `@`, found `|`\n+    fn fun1(A | B: E) {} //~ ERROR an or-pattern parameter must be wrapped in parenthesis\n+\n+    fn fun2(| A | B: E) {}\n+    //~^ ERROR a leading `|` is not allowed in a parameter pattern\n+    //~| ERROR an or-pattern parameter must be wrapped in parenthesis\n }\n \n // We also do not allow a leading `|` when not in a top level position:"}, {"sha": "2a3a6abfb7b624035d189b0ee55e286d86ddd9b1", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,59 +1,71 @@\n-error: expected one of `:` or `@`, found `|`\n-  --> $DIR/or-patterns-syntactic-fail.rs:28:14\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/or-patterns-syntactic-fail.rs:28:13\n    |\n-LL |     fn fun(A | B: E) {}\n-   |              ^ expected one of `:` or `@` here\n+LL |     fn fun1(A | B: E) {}\n+   |             ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n+\n+error: a leading `|` is not allowed in a parameter pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:30:13\n+   |\n+LL |     fn fun2(| A | B: E) {}\n+   |             ^ help: remove the `|`\n+\n+error: an or-pattern parameter must be wrapped in parenthesis\n+  --> $DIR/or-patterns-syntactic-fail.rs:30:15\n+   |\n+LL |     fn fun2(| A | B: E) {}\n+   |               ^^^^^ help: wrap the pattern in parenthesis: `(A | B)`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:37:11\n+  --> $DIR/or-patterns-syntactic-fail.rs:41:11\n    |\n LL |     let ( | A | B) = E::A;\n    |           ^ help: remove the `|`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:38:11\n+  --> $DIR/or-patterns-syntactic-fail.rs:42:11\n    |\n LL |     let ( | A | B,) = (E::B,);\n    |           ^ help: remove the `|`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:39:11\n+  --> $DIR/or-patterns-syntactic-fail.rs:43:11\n    |\n LL |     let [ | A | B ] = [E::A];\n    |           ^ help: remove the `|`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:40:13\n+  --> $DIR/or-patterns-syntactic-fail.rs:44:13\n    |\n LL |     let TS( | A | B );\n    |             ^ help: remove the `|`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:41:17\n+  --> $DIR/or-patterns-syntactic-fail.rs:45:17\n    |\n LL |     let NS { f: | A | B };\n    |                 ^ help: remove the `|`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:43:11\n+  --> $DIR/or-patterns-syntactic-fail.rs:47:11\n    |\n LL |     let ( || A | B) = E::A;\n    |           ^^ help: remove the `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:44:11\n+  --> $DIR/or-patterns-syntactic-fail.rs:48:11\n    |\n LL |     let [ || A | B ] = [E::A];\n    |           ^^ help: remove the `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:45:13\n+  --> $DIR/or-patterns-syntactic-fail.rs:49:13\n    |\n LL |     let TS( || A | B );\n    |             ^^ help: remove the `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n-  --> $DIR/or-patterns-syntactic-fail.rs:46:17\n+  --> $DIR/or-patterns-syntactic-fail.rs:50:17\n    |\n LL |     let NS { f: || A | B };\n    |                 ^^ help: remove the `||`\n@@ -95,7 +107,7 @@ LL |     let _ = |A | B: E| ();\n    = note: an implementation of `std::ops::BitOr` might be missing for `E`\n \n error[E0308]: mismatched types\n-  --> $DIR/or-patterns-syntactic-fail.rs:48:36\n+  --> $DIR/or-patterns-syntactic-fail.rs:52:36\n    |\n LL |     let recovery_witness: String = 0;\n    |                                    ^\n@@ -106,7 +118,7 @@ LL |     let recovery_witness: String = 0;\n    = note: expected type `std::string::String`\n               found type `{integer}`\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 16 previous errors\n \n Some errors have detailed explanations: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "d6efc8be072bd2fba38ed99dabb4a44054568d72", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -2,29 +2,29 @@ struct S;\n \n impl S {\n     fn foo(&self, &str bar) {}\n-    //~^ ERROR expected one of `:` or `@`\n+    //~^ ERROR expected one of `:`, `@`\n     //~| HELP declare the type after the parameter binding\n     //~| SUGGESTION <identifier>: <type>\n }\n \n fn baz(S quux, xyzzy: i32) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP declare the type after the parameter binding\n //~| SUGGESTION <identifier>: <type>\n \n fn one(i32 a b) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n \n fn pattern((i32, i32) (a, b)) {}\n-//~^ ERROR expected `:`\n+//~^ ERROR expected one of `:`\n \n fn fizz(i32) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP if this was a parameter name, give it a type\n //~| HELP if this is a type, explicitly ignore the parameter name\n \n fn missing_colon(quux S) {}\n-//~^ ERROR expected one of `:` or `@`\n+//~^ ERROR expected one of `:`, `@`\n //~| HELP declare the type after the parameter binding\n //~| SUGGESTION <identifier>: <type>\n "}, {"sha": "2bda4460031a068032c1377dce9bcd159b77e651", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,38 +1,38 @@\n-error: expected one of `:` or `@`, found `bar`\n+error: expected one of `:`, `@`, or `|`, found `bar`\n   --> $DIR/inverted-parameters.rs:4:24\n    |\n LL |     fn foo(&self, &str bar) {}\n    |                   -----^^^\n    |                   |    |\n-   |                   |    expected one of `:` or `@` here\n+   |                   |    expected one of `:`, `@`, or `|` here\n    |                   help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-error: expected one of `:` or `@`, found `quux`\n+error: expected one of `:`, `@`, or `|`, found `quux`\n   --> $DIR/inverted-parameters.rs:10:10\n    |\n LL | fn baz(S quux, xyzzy: i32) {}\n    |        --^^^^\n    |        | |\n-   |        | expected one of `:` or `@` here\n+   |        | expected one of `:`, `@`, or `|` here\n    |        help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-error: expected one of `:` or `@`, found `a`\n+error: expected one of `:`, `@`, or `|`, found `a`\n   --> $DIR/inverted-parameters.rs:15:12\n    |\n LL | fn one(i32 a b) {}\n-   |            ^ expected one of `:` or `@` here\n+   |            ^ expected one of `:`, `@`, or `|` here\n \n-error: expected `:`, found `(`\n+error: expected one of `:` or `|`, found `(`\n   --> $DIR/inverted-parameters.rs:18:23\n    |\n LL | fn pattern((i32, i32) (a, b)) {}\n-   |                       ^ expected `:`\n+   |                       ^ expected one of `:` or `|` here\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/inverted-parameters.rs:21:12\n    |\n LL | fn fizz(i32) {}\n-   |            ^ expected one of `:` or `@` here\n+   |            ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -44,13 +44,13 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn fizz(_: i32) {}\n    |         ^^^^^^\n \n-error: expected one of `:` or `@`, found `S`\n+error: expected one of `:`, `@`, or `|`, found `S`\n   --> $DIR/inverted-parameters.rs:26:23\n    |\n LL | fn missing_colon(quux S) {}\n    |                  -----^\n    |                  |    |\n-   |                  |    expected one of `:` or `@` here\n+   |                  |    expected one of `:`, `@`, or `|` here\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n error: aborting due to 6 previous errors"}, {"sha": "22f80a8aae866f254a8623a196f7c08ab0a85851", "filename": "src/test/ui/parser/issue-33413.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -2,7 +2,7 @@ struct S;\n \n impl S {\n     fn f(*, a: u8) -> u8 {}\n-    //~^ ERROR expected argument name, found `*`\n+    //~^ ERROR expected parameter name, found `*`\n }\n \n fn main() {}"}, {"sha": "9e1178e8ac1f352d3f4fc53d8dc1f401f7cfbeeb", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,8 +1,8 @@\n-error: expected argument name, found `*`\n+error: expected parameter name, found `*`\n   --> $DIR/issue-33413.rs:4:10\n    |\n LL |     fn f(*, a: u8) -> u8 {}\n-   |          ^ expected argument name\n+   |          ^ expected parameter name\n \n error: aborting due to previous error\n "}, {"sha": "a5a8de85466bbccf5c549f3d538f82bf69ccc854", "filename": "src/test/ui/parser/issue-63135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: aborting due to 6 previous errors\n+// error-pattern: aborting due to 5 previous errors\n \n fn i(n{...,f #"}, {"sha": "a077ad454a9df419eb721c5359ccdfe9cbd0721a", "filename": "src/test/ui/parser/issue-63135.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63135.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -28,17 +28,11 @@ error: expected `[`, found `}`\n LL | fn i(n{...,f #\n    |               ^ expected `[`\n \n-error: expected `:`, found `)`\n+error: expected one of `:` or `|`, found `)`\n   --> $DIR/issue-63135.rs:3:15\n    |\n LL | fn i(n{...,f #\n-   |               ^ expected `:`\n+   |               ^ expected one of `:` or `|` here\n \n-error: expected one of `->`, `where`, or `{`, found `<eof>`\n-  --> $DIR/issue-63135.rs:3:15\n-   |\n-LL | fn i(n{...,f #\n-   |               ^ expected one of `->`, `where`, or `{` here\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "49cbc4d6bf40f0c091f8ad6a232585e678ef51e0", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,4 +1,4 @@\n-fn foo(x) { //~ ERROR expected one of `:` or `@`, found `)`\n+fn foo(x) { //~ ERROR expected one of `:`, `@`, or `|`, found `)`\n }\n \n fn main() {}"}, {"sha": "7feb15592c54f7793560863e9279ee3c7967b3b0", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/omitted-arg-in-item-fn.rs:1:9\n    |\n LL | fn foo(x) {\n-   |         ^ expected one of `:` or `@` here\n+   |         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "3a778ed14f637a2f90e64277b104443525eb5e72", "filename": "src/test/ui/parser/pat-lt-bracket-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,4 +1,4 @@\n fn a(B<) {}\n-   //~^ error: expected one of `:` or `@`, found `<`\n+   //~^ error: expected one of `:`, `@`, or `|`, found `<`\n \n fn main() {}"}, {"sha": "dbc8d0f5865c6c7d352826f0919280bff2770b41", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `<`\n+error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/pat-lt-bracket-2.rs:1:7\n    |\n LL | fn a(B<) {}\n-   |       ^ expected one of `:` or `@` here\n+   |       ^ expected one of `:`, `@`, or `|` here\n \n error: aborting due to previous error\n "}, {"sha": "a438db3b0c18b8ee34eb8f6840cde137dd242698", "filename": "src/test/ui/parser/removed-syntax-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,4 +1,4 @@\n fn f(+x: isize) {}\n-//~^ ERROR expected argument name, found `+`\n+//~^ ERROR expected parameter name, found `+`\n \n fn main() {}"}, {"sha": "d0393b379f06d03a4cef67dbede819a6cd2a7bfc", "filename": "src/test/ui/parser/removed-syntax-mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,8 +1,8 @@\n-error: expected argument name, found `+`\n+error: expected parameter name, found `+`\n   --> $DIR/removed-syntax-mode.rs:1:6\n    |\n LL | fn f(+x: isize) {}\n-   |      ^ expected argument name\n+   |      ^ expected parameter name\n \n error: aborting due to previous error\n "}, {"sha": "d71711336b06e41a8ac5f9705c672d1fe55169be", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -3,6 +3,6 @@\n #![feature(param_attrs)]\n \n trait Trait2015 { fn foo(#[allow(C)] i32); }\n-//~^ ERROR expected one of `:` or `@`, found `)`\n+//~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n \n fn main() {}"}, {"sha": "26b414e4268059c0e242404ca85b917e90335860", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/param-attrs-2018.rs:5:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n-   |                                         ^ expected one of `:` or `@` here\n+   |                                         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}, {"sha": "cc0eccd37a26f6eda14f756cbfb5b7eb7390ea6c", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1caaa40768fecb91b322b1e1befc91c54b56817c/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=1caaa40768fecb91b322b1e1befc91c54b56817c", "patch": "@@ -1,14 +1,14 @@\n-error: expected one of `:` or `@`, found `<`\n+error: expected one of `:`, `@`, or `|`, found `<`\n   --> $DIR/issue-34264.rs:1:14\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |              ^ expected one of `:` or `@` here\n+   |              ^ expected one of `:`, `@`, or `|` here\n \n-error: expected one of `:` or `@`, found `)`\n+error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27\n    |\n LL | fn foo(Option<i32>, String) {}\n-   |                           ^ expected one of `:` or `@` here\n+   |                           ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type\n@@ -20,11 +20,11 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn foo(Option<i32>, _: String) {}\n    |                     ^^^^^^^^^\n \n-error: expected one of `:` or `@`, found `,`\n+error: expected one of `:`, `@`, or `|`, found `,`\n   --> $DIR/issue-34264.rs:3:9\n    |\n LL | fn bar(x, y: usize) {}\n-   |         ^ expected one of `:` or `@` here\n+   |         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n help: if this was a parameter name, give it a type"}]}