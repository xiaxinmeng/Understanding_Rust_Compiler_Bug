{"sha": "b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODAzZDRhZWRjMDY1MDRjYjRjYjg2ZjYzYmViNjY1MGZmNjdhOGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-06T21:11:03Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-06T21:11:03Z"}, "message": "Display correct filename with --test option", "tree": {"sha": "fa0fa33f9084c0e8a975ebe35d97eab5837d5fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa0fa33f9084c0e8a975ebe35d97eab5837d5fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "html_url": "https://github.com/rust-lang/rust/commit/b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324b175174c19b8be4592df11e65e0c4b6fee9d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/324b175174c19b8be4592df11e65e0c4b6fee9d3", "html_url": "https://github.com/rust-lang/rust/commit/324b175174c19b8be4592df11e65e0c4b6fee9d3"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "e70030912db0e010a5f16e8c3a6495f971dec70f", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "patch": "@@ -35,6 +35,7 @@ use std::fmt::{self, Write};\n use std::slice;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::codemap::Span;\n \n use html::render::derive_id;\n use html::toc::TocBuilder;\n@@ -429,7 +430,7 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n }\n \n-pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line: usize) {\n+pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n     extern fn block(_ob: *mut hoedown_buffer,\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n@@ -454,11 +455,12 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line:\n             });\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             let line = tests.get_line() + line;\n+            let filename = tests.get_filename();\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness,\n                            block_info.compile_fail, block_info.error_codes,\n-                           line);\n+                           line, filename);\n         }\n     }\n \n@@ -479,7 +481,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line:\n         }\n     }\n \n-    tests.set_line(start_line);\n+    tests.set_position(position);\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);"}, {"sha": "70ef7c597e4d7ba55f3c81a5f46e477f3db2ea35", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "patch": "@@ -18,6 +18,7 @@ use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n+use syntax::codemap::DUMMY_SP;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n@@ -154,9 +155,8 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n-                                       true, opts, maybe_sysroot, \"input\".to_string(),\n-                                       None);\n-    find_testable_code(&input_str, &mut collector, 0);\n+                                       true, opts, maybe_sysroot, None);\n+    find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);\n     0"}, {"sha": "930cf401e74501b202a0f49b404c07301b34cf7e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0803d4aedc06504cb4cb86f63beb6650ff67a8e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "patch": "@@ -37,7 +37,7 @@ use rustc_trans::back::link;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax_pos::{BytePos, DUMMY_SP, Pos};\n+use syntax_pos::{BytePos, DUMMY_SP, Pos, Span};\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -97,15 +97,13 @@ pub fn run(input: &str,\n         link::find_crate_name(None, &hir_forest.krate().attrs, &input)\n     });\n     let opts = scrape_test_config(hir_forest.krate());\n-    let filename = input_path.to_str().unwrap_or(\"\").to_owned();\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n                                        externs,\n                                        false,\n                                        opts,\n                                        maybe_sysroot,\n-                                       filename,\n                                        Some(codemap));\n \n     {\n@@ -391,15 +389,14 @@ pub struct Collector {\n     cratename: String,\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n-    filename: String,\n-    start_line: usize,\n+    position: Span,\n     codemap: Option<Rc<CodeMap>>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n-               filename: String, codemap: Option<Rc<CodeMap>>) -> Collector {\n+               codemap: Option<Rc<CodeMap>>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -412,17 +409,16 @@ impl Collector {\n             cratename: cratename,\n             opts: opts,\n             maybe_sysroot: maybe_sysroot,\n-            filename: filename,\n-            start_line: 0,\n+            position: DUMMY_SP,\n             codemap: codemap,\n         }\n     }\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize) {\n-        let name = format!(\"{} - line {}\", self.filename, line);\n+                    line: usize, filename: String) {\n+        let name = format!(\"{} - line {}\", filename, line);\n         self.cnt += 1;\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n@@ -467,16 +463,25 @@ impl Collector {\n     }\n \n     pub fn get_line(&self) -> usize {\n-        if let Some(ref codemap) = self.codemap{\n-            let line = codemap.lookup_char_pos(BytePos(self.start_line as u32)).line;\n+        if let Some(ref codemap) = self.codemap {\n+            let line = self.position.lo.to_usize();\n+            let line = codemap.lookup_char_pos(BytePos(line as u32)).line;\n             if line > 0 { line - 1 } else { line }\n         } else {\n-            self.start_line\n+            0\n         }\n     }\n \n-    pub fn set_line(&mut self, start_line: usize) {\n-        self.start_line = start_line;\n+    pub fn set_position(&mut self, position: Span) {\n+        self.position = position;\n+    }\n+\n+    pub fn get_filename(&self) -> String {\n+        if let Some(ref codemap) = self.codemap {\n+            codemap.span_to_filename(self.position)\n+        } else {\n+            \"<input>\".to_owned()\n+        }\n     }\n \n     pub fn register_header(&mut self, name: &str, level: u32) {\n@@ -520,7 +525,7 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         if let Some(doc) = attrs.doc_value() {\n             self.collector.cnt = 0;\n             markdown::find_testable_code(doc, self.collector,\n-                                         attrs.span.unwrap_or(DUMMY_SP).lo.to_usize());\n+                                         attrs.span.unwrap_or(DUMMY_SP));\n         }\n \n         nested(self);"}]}