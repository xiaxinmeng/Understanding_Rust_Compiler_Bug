{"sha": "ca94c75c527006be0824c764773380bbeea6030b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTRjNzVjNTI3MDA2YmUwODI0Yzc2NDc3MzM4MGJiZWVhNjAzMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T18:37:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T18:37:27Z"}, "message": "Auto merge of #44220 - kennytm:fix-44216-instance-plus-max-duration-should-panic, r=alexcrichton\n\nProperly detect overflow in Instance \u00b1 Duration.\n\nFix #44216.\nFix #42622\n\nThe computation `Instant::now() + Duration::from_secs(u64::max_value())` now panics. The call `receiver.recv_timeout(Duration::from_secs(u64::max_value()))`, which involves such time addition, will also panic.\n\nThe reason #44216 arises is because of an unchecked cast from `u64` to `i64`, making the duration equivalent to -1 second.\n\nNote that the current implementation is over-conservative, since e.g. (-2\u2076\u00b2) + (2\u2076\u00b3) is perfectly fine for an `i64`, yet this is rejected because (2\u2076\u00b3) overflows the `i64`.", "tree": {"sha": "947a43561b8045589fdc9f3c13cbadbf4e5ca0bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/947a43561b8045589fdc9f3c13cbadbf4e5ca0bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca94c75c527006be0824c764773380bbeea6030b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca94c75c527006be0824c764773380bbeea6030b", "html_url": "https://github.com/rust-lang/rust/commit/ca94c75c527006be0824c764773380bbeea6030b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca94c75c527006be0824c764773380bbeea6030b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b413f34087d913b80cf432a66d05ec5be11f3515", "url": "https://api.github.com/repos/rust-lang/rust/commits/b413f34087d913b80cf432a66d05ec5be11f3515", "html_url": "https://github.com/rust-lang/rust/commit/b413f34087d913b80cf432a66d05ec5be11f3515"}, {"sha": "4962f9d72528602f70c7017d95063ef93a3c8967", "url": "https://api.github.com/repos/rust-lang/rust/commits/4962f9d72528602f70c7017d95063ef93a3c8967", "html_url": "https://github.com/rust-lang/rust/commit/4962f9d72528602f70c7017d95063ef93a3c8967"}], "stats": {"total": 136, "additions": 115, "deletions": 21}, "files": [{"sha": "6c071afd42d05a142108ee598f263e2d367abedf", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -12,6 +12,7 @@ use cmp::Ordering;\n use fmt;\n use sys::{cvt, syscall};\n use time::Duration;\n+use convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n@@ -40,8 +41,12 @@ impl Timespec {\n     }\n \n     fn add_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_add(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when adding duration to time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `i64`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n+            .expect(\"overflow when adding duration to time\");\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -53,16 +58,19 @@ impl Timespec {\n         }\n         Timespec {\n             t: syscall::TimeSpec {\n-                tv_sec: secs as i64,\n+                tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n         }\n     }\n \n     fn sub_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_sub(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when subtracting duration \\\n-                                    from time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `i64`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n+            .expect(\"overflow when subtracting duration from time\");\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n@@ -73,7 +81,7 @@ impl Timespec {\n         }\n         Timespec {\n             t: syscall::TimeSpec {\n-                tv_sec: secs as i64,\n+                tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n         }"}, {"sha": "c1bea95ce91abb0135ab2507f0807f19dbb92597", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -13,6 +13,7 @@ use libc;\n use time::Duration;\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n+use convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n@@ -41,8 +42,12 @@ impl Timespec {\n     }\n \n     fn add_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_add(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when adding duration to time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `libc::time_t`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n+            .expect(\"overflow when adding duration to time\");\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -54,16 +59,19 @@ impl Timespec {\n         }\n         Timespec {\n             t: libc::timespec {\n-                tv_sec: secs as libc::time_t,\n+                tv_sec: secs,\n                 tv_nsec: nsec as libc::c_long,\n             },\n         }\n     }\n \n     fn sub_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_sub(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when subtracting duration \\\n-                                    from time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `libc::time_t`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n+            .expect(\"overflow when subtracting duration from time\");\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n@@ -74,7 +82,7 @@ impl Timespec {\n         }\n         Timespec {\n             t: libc::timespec {\n-                tv_sec: secs as libc::time_t,\n+                tv_sec: secs,\n                 tv_nsec: nsec as libc::c_long,\n             },\n         }"}, {"sha": "1be29b5139a557145ca14b7f5dd771cb3476fa41", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -16,6 +16,7 @@ use sys::c;\n use sys::cvt;\n use sys_common::mul_div_u64;\n use time::Duration;\n+use convert::TryInto;\n \n const NANOS_PER_SEC: u64 = 1_000_000_000;\n const INTERVALS_PER_SEC: u64 = NANOS_PER_SEC / 100;\n@@ -173,9 +174,11 @@ impl From<c::FILETIME> for SystemTime {\n }\n \n fn dur2intervals(d: &Duration) -> i64 {\n-    d.as_secs().checked_mul(INTERVALS_PER_SEC).and_then(|i| {\n-        i.checked_add(d.subsec_nanos() as u64 / 100)\n-    }).expect(\"overflow when converting duration to intervals\") as i64\n+    d.as_secs()\n+        .checked_mul(INTERVALS_PER_SEC)\n+        .and_then(|i| i.checked_add(d.subsec_nanos() as u64 / 100))\n+        .and_then(|i| i.try_into().ok())\n+        .expect(\"overflow when converting duration to intervals\")\n }\n \n fn intervals2dur(intervals: u64) -> Duration {"}, {"sha": "d4993ded843ddb5304306e4588728089b62ffb58", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -509,7 +509,7 @@ mod tests {\n                 let dur = dur.duration();\n                 assert!(a > b);\n                 assert_almost_eq!(b + dur, a);\n-                assert_almost_eq!(b - dur, a);\n+                assert_almost_eq!(a - dur, b);\n             }\n         }\n \n@@ -520,9 +520,12 @@ mod tests {\n \n         assert_almost_eq!(a - second + second, a);\n \n-        let eighty_years = second * 60 * 60 * 24 * 365 * 80;\n-        assert_almost_eq!(a - eighty_years + eighty_years, a);\n-        assert_almost_eq!(a - (eighty_years * 10) + (eighty_years * 10), a);\n+        // A difference of 80 and 800 years cannot fit inside a 32-bit time_t\n+        if !(cfg!(unix) && ::mem::size_of::<::libc::time_t>() <= 4) {\n+            let eighty_years = second * 60 * 60 * 24 * 365 * 80;\n+            assert_almost_eq!(a - eighty_years + eighty_years, a);\n+            assert_almost_eq!(a - (eighty_years * 10) + (eighty_years * 10), a);\n+        }\n \n         let one_second_from_epoch = UNIX_EPOCH + Duration::new(1, 0);\n         let one_second_from_epoch2 = UNIX_EPOCH + Duration::new(0, 500_000_000)"}, {"sha": "e17d23d925a8bb58270b843cbebb99c7c8a480fc", "filename": "src/test/run-fail/issue-44216-add-instant.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-add-instant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-add-instant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-44216-add-instant.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:overflow\n+\n+use std::time::{Instant, Duration};\n+\n+fn main() {\n+    let now = Instant::now();\n+    let _ = now + Duration::from_secs(u64::max_value());\n+}"}, {"sha": "4a0c9c7d65e9e1a1043850991cc7dd6ddb130873", "filename": "src/test/run-fail/issue-44216-add-system-time.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-add-system-time.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-add-system-time.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-44216-add-system-time.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:overflow\n+\n+use std::time::{Duration, SystemTime};\n+\n+fn main() {\n+    let now = SystemTime::now();\n+    let _ = now + Duration::from_secs(u64::max_value());\n+}"}, {"sha": "6cc38cfec831938438b551c6a1e1b04811ef88f5", "filename": "src/test/run-fail/issue-44216-sub-instant.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-sub-instant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-sub-instant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-44216-sub-instant.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:overflow\n+\n+use std::time::{Instant, Duration};\n+\n+fn main() {\n+    let now = Instant::now();\n+    let _ = now - Duration::from_secs(u64::max_value());\n+}"}, {"sha": "bcf60126f0f23d37b7b589854fe99657d099fa0f", "filename": "src/test/run-fail/issue-44216-sub-system-time.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-sub-system-time.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca94c75c527006be0824c764773380bbeea6030b/src%2Ftest%2Frun-fail%2Fissue-44216-sub-system-time.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-44216-sub-system-time.rs?ref=ca94c75c527006be0824c764773380bbeea6030b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:overflow\n+\n+use std::time::{Duration, SystemTime};\n+\n+fn main() {\n+    let now = SystemTime::now();\n+    let _ = now - Duration::from_secs(u64::max_value());\n+}"}]}