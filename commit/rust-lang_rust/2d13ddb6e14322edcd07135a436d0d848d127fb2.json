{"sha": "2d13ddb6e14322edcd07135a436d0d848d127fb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTNkZGI2ZTE0MzIyZWRjZDA3MTM1YTQzNmQwZDg0OGQxMjdmYjI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-02-16T09:58:48Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T22:07:40Z"}, "message": "Use NonNull<_> instead of NonZero<*const _> in btree internals", "tree": {"sha": "ab33b7b51a4ad7e85265be8118d057beb6f6827b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab33b7b51a4ad7e85265be8118d057beb6f6827b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d13ddb6e14322edcd07135a436d0d848d127fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d13ddb6e14322edcd07135a436d0d848d127fb2", "html_url": "https://github.com/rust-lang/rust/commit/2d13ddb6e14322edcd07135a436d0d848d127fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d13ddb6e14322edcd07135a436d0d848d127fb2/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40877feeb17c538a73fe6294d48af123251a8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40877feeb17c538a73fe6294d48af123251a8c5", "html_url": "https://github.com/rust-lang/rust/commit/f40877feeb17c538a73fe6294d48af123251a8c5"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "464f8f2f4eced25d14eca2f3bfeb6c8b40f523c1", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d13ddb6e14322edcd07135a436d0d848d127fb2/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d13ddb6e14322edcd07135a436d0d848d127fb2/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=2d13ddb6e14322edcd07135a436d0d848d127fb2", "patch": "@@ -43,8 +43,7 @@\n \n use core::marker::PhantomData;\n use core::mem;\n-use core::nonzero::NonZero;\n-use core::ptr::{self, Unique};\n+use core::ptr::{self, Unique, NonNull};\n use core::slice;\n \n use boxed::Box;\n@@ -149,14 +148,12 @@ impl<K, V> BoxedNode<K, V> {\n         }\n     }\n \n-    unsafe fn from_ptr(ptr: NonZero<*const LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::new_unchecked(ptr.get() as *mut LeafNode<K, V>) }\n+    unsafe fn from_ptr(ptr: NonNull<LeafNode<K, V>>) -> Self {\n+        BoxedNode { ptr: Unique::from(ptr) }\n     }\n \n-    fn as_ptr(&self) -> NonZero<*const LeafNode<K, V>> {\n-        unsafe {\n-            NonZero::from(self.ptr.as_ref())\n-        }\n+    fn as_ptr(&self) -> NonNull<LeafNode<K, V>> {\n+        NonNull::from(self.ptr)\n     }\n }\n \n@@ -276,7 +273,7 @@ impl<K, V> Root<K, V> {\n ///   `NodeRef` could be pointing to either type of node.\n pub struct NodeRef<BorrowType, K, V, Type> {\n     height: usize,\n-    node: NonZero<*const LeafNode<K, V>>,\n+    node: NonNull<LeafNode<K, V>>,\n     // This is null unless the borrow type is `Mut`\n     root: *const Root<K, V>,\n     _marker: PhantomData<(BorrowType, Type)>\n@@ -302,15 +299,15 @@ unsafe impl<K: Send, V: Send, Type> Send\n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n     fn as_internal(&self) -> &InternalNode<K, V> {\n         unsafe {\n-            &*(self.node.get() as *const InternalNode<K, V>)\n+            &*(self.node.as_ptr() as *mut InternalNode<K, V>)\n         }\n     }\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     fn as_internal_mut(&mut self) -> &mut InternalNode<K, V> {\n         unsafe {\n-            &mut *(self.node.get() as *mut InternalNode<K, V>)\n+            &mut *(self.node.as_ptr() as *mut InternalNode<K, V>)\n         }\n     }\n }\n@@ -352,7 +349,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n \n     fn as_leaf(&self) -> &LeafNode<K, V> {\n         unsafe {\n-            &*self.node.get()\n+            self.node.as_ref()\n         }\n     }\n \n@@ -382,7 +379,8 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         >,\n         Self\n     > {\n-        if let Some(non_zero) = NonZero::new(self.as_leaf().parent as *const LeafNode<K, V>) {\n+        let parent_as_leaf = self.as_leaf().parent as *const LeafNode<K, V>;\n+        if let Some(non_zero) = NonNull::new(parent_as_leaf as *mut _) {\n             Ok(Handle {\n                 node: NodeRef {\n                     height: self.height + 1,\n@@ -498,7 +496,7 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n \n     fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> {\n         unsafe {\n-            &mut *(self.node.get() as *mut LeafNode<K, V>)\n+            self.node.as_mut()\n         }\n     }\n \n@@ -1241,12 +1239,12 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 }\n \n                 Heap.dealloc(\n-                    right_node.node.get() as *mut u8,\n+                    right_node.node.as_ptr() as *mut u8,\n                     Layout::new::<InternalNode<K, V>>(),\n                 );\n             } else {\n                 Heap.dealloc(\n-                    right_node.node.get() as *mut u8,\n+                    right_node.node.as_ptr() as *mut u8,\n                     Layout::new::<LeafNode<K, V>>(),\n                 );\n             }"}]}