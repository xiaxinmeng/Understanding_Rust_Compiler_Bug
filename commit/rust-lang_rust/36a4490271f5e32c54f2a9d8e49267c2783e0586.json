{"sha": "36a4490271f5e32c54f2a9d8e49267c2783e0586", "node_id": "C_kwDOAAsO6NoAKDM2YTQ0OTAyNzFmNWUzMmM1NGYyYTlkOGU0OTI2N2MyNzgzZTA1ODY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-08T11:58:28Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-09T08:45:41Z"}, "message": "rewrite combine doc comment", "tree": {"sha": "9a17694a155c5ff32290ce41de79bcdc69d9f280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a17694a155c5ff32290ce41de79bcdc69d9f280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a4490271f5e32c54f2a9d8e49267c2783e0586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4490271f5e32c54f2a9d8e49267c2783e0586", "html_url": "https://github.com/rust-lang/rust/commit/36a4490271f5e32c54f2a9d8e49267c2783e0586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a4490271f5e32c54f2a9d8e49267c2783e0586/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a7aa7016de32f4d991c30bfa40d3911e18a213", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "html_url": "https://github.com/rust-lang/rust/commit/64a7aa7016de32f4d991c30bfa40d3911e18a213"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "120e57ecebd759a0162cad85fdbc97b566d4e8f2", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/36a4490271f5e32c54f2a9d8e49267c2783e0586/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4490271f5e32c54f2a9d8e49267c2783e0586/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=36a4490271f5e32c54f2a9d8e49267c2783e0586", "patch": "@@ -1,26 +1,26 @@\n-///////////////////////////////////////////////////////////////////////////\n-// # Type combining\n-//\n-// There are four type combiners: equate, sub, lub, and glb.  Each\n-// implements the trait `Combine` and contains methods for combining\n-// two instances of various things and yielding a new instance.  These\n-// combiner methods always yield a `Result<T>`.  There is a lot of\n-// common code for these operations, implemented as default methods on\n-// the `Combine` trait.\n-//\n-// Each operation may have side-effects on the inference context,\n-// though these can be unrolled using snapshots. On success, the\n-// LUB/GLB operations return the appropriate bound. The Eq and Sub\n-// operations generally return the first operand.\n-//\n-// ## Contravariance\n-//\n-// When you are relating two things which have a contravariant\n-// relationship, you should use `contratys()` or `contraregions()`,\n-// rather than inversing the order of arguments!  This is necessary\n-// because the order of arguments is not relevant for LUB and GLB.  It\n-// is also useful to track which value is the \"expected\" value in\n-// terms of error reporting.\n+//! There are four type combiners: [Equate], [Sub], [Lub], and [Glb].\n+//! Each implements the trait [TypeRelation] and contains methods for\n+//! combining two instances of various things and yielding a new instance.\n+//! These combiner methods always yield a `Result<T>`. To relate two\n+//! types, you can use `infcx.at(cause, param_env)` which then allows\n+//! you to use the relevant methods of [At](super::at::At).\n+//!\n+//! Combiners mostly do their specific behavior and then hand off the\n+//! bulk of the work to [InferCtxt::super_combine_tys] and\n+//! [InferCtxt::super_combine_consts].\n+//!\n+//! Combining two types may have side-effects on the inference contexts\n+//! which can be undone by using snapshots. You probably want to use\n+//! either [InferCtxt::commit_if_ok] or [InferCtxt::probe].\n+//!\n+//! On success, the  LUB/GLB operations return the appropriate bound. The\n+//! return value of `Equate` or `Sub` shouldn't really be used.\n+//!\n+//! ## Contravariance\n+//!\n+//! We explicitly track which argument is expected using\n+//! [TypeRelation::a_is_expected], so when dealing with contravariance\n+//! this should be correctly updated.\n \n use super::equate::Equate;\n use super::glb::Glb;"}]}