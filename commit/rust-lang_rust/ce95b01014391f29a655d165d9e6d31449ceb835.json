{"sha": "ce95b01014391f29a655d165d9e6d31449ceb835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTViMDEwMTQzOTFmMjlhNjU1ZDE2NWQ5ZTZkMzE0NDljZWI4MzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-06T21:32:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-07T23:32:20Z"}, "message": "Disable linked failure tests\n\nThe implementation currently contains a race that leads to segfaults.", "tree": {"sha": "f1ceac4362d6ac81173beb18d4301fb13e0ff072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ceac4362d6ac81173beb18d4301fb13e0ff072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce95b01014391f29a655d165d9e6d31449ceb835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce95b01014391f29a655d165d9e6d31449ceb835", "html_url": "https://github.com/rust-lang/rust/commit/ce95b01014391f29a655d165d9e6d31449ceb835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce95b01014391f29a655d165d9e6d31449ceb835/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b735e6b1041125f3237ff1f807455b2017f13e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/b735e6b1041125f3237ff1f807455b2017f13e42", "html_url": "https://github.com/rust-lang/rust/commit/b735e6b1041125f3237ff1f807455b2017f13e42"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "d190c332e6633ade92d1a9ac944aef034caca1db", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -424,7 +424,7 @@ there is no way to \"catch\" the exception.\n All tasks are, by default, _linked_ to each other. That means that the fates\n of all tasks are intertwined: if one fails, so do all the others.\n \n-~~~\n+~~~{.xfail-test .linked-failure}\n # use std::task::spawn;\n # use std::task;\n # fn do_some_work() { loop { task::yield() } }\n@@ -447,7 +447,7 @@ pattern-match on a result to check whether it's an `Ok` result with an `int`\n field (representing a successful result) or an `Err` result (representing\n termination with an error).\n \n-~~~\n+~~~{.xfail-test .linked-failure}\n # use std::task;\n # fn some_condition() -> bool { false }\n # fn calculate_result() -> int { 0 }\n@@ -490,7 +490,7 @@ proceed). Hence, you will need different _linked failure modes_.\n By default, task failure is _bidirectionally linked_, which means that if\n either task fails, it kills the other one.\n \n-~~~\n+~~~{.xfail-test .linked-failure}\n # use std::task;\n # use std::comm::oneshot;\n # fn sleep_forever() { loop { let (p, c) = oneshot::<()>(); p.recv(); } }\n@@ -512,7 +512,7 @@ function `task::try`, which we saw previously, uses `spawn_supervised`\n internally, with additional logic to wait for the child task to finish\n before returning. Hence:\n \n-~~~\n+~~~{.xfail-test .linked-failure}\n # use std::comm::{stream, Chan, Port};\n # use std::comm::oneshot;\n # use std::task::{spawn, try};\n@@ -543,7 +543,7 @@ also fail.\n Supervised task failure propagates across multiple generations even if\n an intermediate generation has already exited:\n \n-~~~\n+~~~{.xfail-test .linked-failure}\n # use std::task;\n # use std::comm::oneshot;\n # fn sleep_forever() { loop { let (p, c) = oneshot::<()>(); p.recv(); } }\n@@ -563,7 +563,7 @@ fail!();  // Will kill grandchild even if child has already exited\n Finally, tasks can be configured to not propagate failure to each\n other at all, using `task::spawn_unlinked` for _isolated failure_.\n \n-~~~\n+~~~{.xfail-test .linked-failure}\n # use std::task;\n # fn random() -> uint { 100 }\n # fn sleep_for(i: uint) { for _ in range(0, i) { task::yield() } }\n@@ -591,7 +591,7 @@ that repeatedly receives a `uint` message, converts it to a string, and sends\n the string in response.  The child terminates when it receives `0`.\n Here is the function that implements the child task:\n \n-~~~~\n+~~~{.xfail-test .linked-failure}\n # use extra::comm::DuplexStream;\n # use std::uint;\n fn stringifier(channel: &DuplexStream<~str, uint>) {\n@@ -614,7 +614,7 @@ response itself is simply the stringified version of the received value,\n \n Here is the code for the parent task:\n \n-~~~~\n+~~~{.xfail-test .linked-failure}\n # use std::task::spawn;\n # use std::uint;\n # use extra::comm::DuplexStream;"}, {"sha": "17f4cbbd1527e04fe1bf48efdf51cf7dbf571693", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -611,6 +611,7 @@ mod tests {\n             }\n         }\n     }\n+\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_arc_condvar_poison() {\n         unsafe {"}, {"sha": "4172c715adb96309701da1228c37f66eb4f492b9", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -935,6 +935,7 @@ mod tests {\n         // child task must have finished by the time try returns\n         do m.lock { }\n     }\n+    #[ignore(reason = \"linked failure\")]\n     #[test] #[ignore(cfg(windows))]\n     fn test_mutex_killed_cond() {\n         // Getting killed during cond wait must not corrupt the mutex while\n@@ -961,6 +962,7 @@ mod tests {\n             assert!(!woken);\n         }\n     }\n+    #[ignore(reason = \"linked failure\")]\n     #[test] #[ignore(cfg(windows))]\n     fn test_mutex_killed_broadcast() {\n         use std::unstable::finally::Finally;"}, {"sha": "fbc9d1d2445af997b58d612857de884fe07dd507", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -614,6 +614,7 @@ mod test {\n     // Test cases don't care about the spare killed flag.\n     fn make_kill_handle() -> KillHandle { let (h,_) = KillHandle::new(); h }\n \n+    #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn no_tombstone_success() {\n         do run_in_newsched_task {\n@@ -819,6 +820,7 @@ mod test {\n         }\n     }\n \n+    #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn block_and_get_killed() {\n         do with_test_task |mut task| {\n@@ -830,6 +832,7 @@ mod test {\n         }\n     }\n \n+    #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn block_already_killed() {\n         do with_test_task |mut task| {\n@@ -839,6 +842,7 @@ mod test {\n         }\n     }\n \n+    #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn block_unkillably_and_get_killed() {\n         do with_test_task |mut task| {\n@@ -856,6 +860,7 @@ mod test {\n         }\n     }\n \n+    #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn block_on_pipe() {\n         // Tests the \"killable\" path of casting to/from uint.\n@@ -869,6 +874,7 @@ mod test {\n         }\n     }\n \n+    #[ignore(reason = \"linked failure\")]\n     #[test]\n     fn block_unkillably_on_pipe() {\n         // Tests the \"indestructible\" path of casting to/from uint."}, {"sha": "2e0c9c1d1ad1e01bf3b75f18e48ebee8c6820d1d", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -659,6 +659,7 @@ pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_kill_unkillable_task() {\n     use rt::test::*;\n@@ -679,6 +680,7 @@ fn test_kill_unkillable_task() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_kill_rekillable_task() {\n     use rt::test::*;\n@@ -720,6 +722,7 @@ fn test_cant_dup_task_builder() {\n #[cfg(test)]\n fn block_forever() { let (po, _ch) = stream::<()>(); po.recv(); }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n     use rt::test::run_in_newsched_task;\n@@ -738,13 +741,15 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n         po.recv();\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n     use rt::test::run_in_newsched_task;\n     do run_in_newsched_task {\n         do spawn_unlinked { fail!(); }\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     use rt::test::run_in_newsched_task;\n@@ -754,6 +759,7 @@ fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n         do 16.times { task::yield(); }\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_fail_down() {\n     use rt::test::run_in_newsched_task;\n@@ -766,6 +772,7 @@ fn test_spawn_unlinked_sup_fail_down() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n     use rt::test::run_in_newsched_task;\n@@ -786,6 +793,7 @@ fn test_spawn_linked_sup_fail_up() { // child fails; parent fails\n         assert!(result.is_err());\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n@@ -802,6 +810,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n         assert!(result.is_err());\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n     use rt::test::run_in_newsched_task;\n@@ -814,6 +823,7 @@ fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n         assert!(result.is_err());\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n@@ -826,6 +836,7 @@ fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n         assert!(result.is_err());\n     }\n }\n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n     use rt::test::run_in_newsched_task;\n@@ -844,6 +855,7 @@ fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n // A couple bonus linked failure tests - testing for failure propagation even\n // when the middle task exits successfully early before kill signals are sent.\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_failure_propagate_grandchild() {\n     use rt::test::run_in_newsched_task;\n@@ -860,6 +872,7 @@ fn test_spawn_failure_propagate_grandchild() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_failure_propagate_secondborn() {\n     use rt::test::run_in_newsched_task;\n@@ -876,6 +889,7 @@ fn test_spawn_failure_propagate_secondborn() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_failure_propagate_nephew_or_niece() {\n     use rt::test::run_in_newsched_task;\n@@ -892,6 +906,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_linked_sup_propagate_sibling() {\n     use rt::test::run_in_newsched_task;\n@@ -1195,6 +1210,7 @@ fn test_avoid_copying_the_body_unlinked() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test]\n #[ignore(cfg(windows))]\n #[should_fail]\n@@ -1230,6 +1246,7 @@ fn test_unkillable() {\n     po.recv();\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test]\n #[ignore(cfg(windows))]\n #[should_fail]\n@@ -1296,6 +1313,7 @@ fn test_simple_newsched_spawn() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_watched() {\n     use rt::test::run_in_newsched_task;\n@@ -1318,6 +1336,7 @@ fn test_spawn_watched() {\n     }\n }\n \n+#[ignore(reason = \"linked failure\")]\n #[test] #[ignore(cfg(windows))]\n fn test_indestructible() {\n     use rt::test::run_in_newsched_task;"}, {"sha": "a65db3ee51543db658e8db9dc155658e0a491f1c", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // error-pattern:explicit failure\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return."}, {"sha": "52dfb8aef13d56b484623c22b4250146ed8452c3", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -10,6 +10,7 @@\n // except according to those terms.\n \n \n+// xfail-test linked failure\n // error-pattern:1 == 2\n extern mod extra;\n "}, {"sha": "d4049f6753ee89204fd75c57be84b2dc9eac15c5", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -10,6 +10,7 @@\n // except according to those terms.\n \n \n+// xfail-test linked failure\n // error-pattern:fail\n \n use std::comm;"}, {"sha": "f40eae20bc0bc386b6e7276e009e22345914c2f0", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -10,6 +10,7 @@\n // except according to those terms.\n \n \n+// xfail-test linked failure\n // error-pattern:fail\n \n use std::comm;"}, {"sha": "94e41f1ae682565703aeb17bf725573209866b76", "filename": "src/test/run-fail/linked-failure4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure4.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -9,6 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // error-pattern:1 == 2\n \n use std::comm;"}, {"sha": "12dab8e25b780755829b5d325667241f69600f0b", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // xfail-win32\n // error-pattern:explicit\n extern mod extra;"}, {"sha": "bd51ce38ec0e47bc03d38444eebc5d5437d1ec6a", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // error-pattern:goodfail\n \n use std::comm;"}, {"sha": "f4e2a9f36a072b5e34f6cdec6f0faeaa2e3dfb36", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // xfail-fast\n // xfail-win32 #7999\n "}, {"sha": "13296131236ab25080245cf119baaa2f06e22461", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // xfail-win32 leaks\n extern mod extra;\n "}, {"sha": "a647e5849a8ee4036ab9eb63f7dda69904271b22", "filename": "src/test/run-pass/send-iloop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // xfail-win32\n extern mod extra;\n "}, {"sha": "b8a1aa433a30a3e6492d7876dac1162a60168919", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // xfail-win32\n \n // A port of task-killjoin to use a class with a dtor to manage"}, {"sha": "5382ac77671392787232a58d60b1c4d8d1973f22", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce95b01014391f29a655d165d9e6d31449ceb835/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=ce95b01014391f29a655d165d9e6d31449ceb835", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test linked failure\n // xfail-win32\n \n // Create a task that is supervised by another task, join the supervised task"}]}