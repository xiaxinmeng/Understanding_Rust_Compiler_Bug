{"sha": "5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "node_id": "C_kwDOAAsO6NoAKDVhYTAyMzliMTY5ZTlmNDVhOWI1YWYxZTk4OTgyMWI5YjY5YmM5YTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T01:47:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-23T01:47:08Z"}, "message": "Auto merge of #92216 - matthiaskrgr:rollup-luplvuc, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #88858 (Allow reverse iteration of lowercase'd/uppercase'd chars)\n - #91544 (Fix duplicate derive clone suggestion)\n - #92026 (Add some JSDoc comments to rustdoc JS)\n - #92117 (kmc-solid: Add `std::sys::solid::fs::File::read_buf`)\n - #92139 (Change Backtrace::enabled atomic from SeqCst to Relaxed)\n - #92146 (Don't emit shared files when scraping examples from dependencies in Rustdoc)\n - #92208 (Quote bat script command line)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "43b5df9ecf9a5f955a29f0f7cd3ba841b8ce3a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43b5df9ecf9a5f955a29f0f7cd3ba841b8ce3a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "html_url": "https://github.com/rust-lang/rust/commit/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e98309298d927307c5184f4869604bd068d26183", "url": "https://api.github.com/repos/rust-lang/rust/commits/e98309298d927307c5184f4869604bd068d26183", "html_url": "https://github.com/rust-lang/rust/commit/e98309298d927307c5184f4869604bd068d26183"}, {"sha": "3afed8fc709cc174e9518269694b344b7487cb65", "url": "https://api.github.com/repos/rust-lang/rust/commits/3afed8fc709cc174e9518269694b344b7487cb65", "html_url": "https://github.com/rust-lang/rust/commit/3afed8fc709cc174e9518269694b344b7487cb65"}], "stats": {"total": 475, "additions": 418, "deletions": 57}, "files": [{"sha": "f3a5fbbb44467b96244bccdfe96255347225fc3a", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -1195,11 +1195,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn suggest_derive(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        unsatisfied_predicates: &Vec<(\n+        unsatisfied_predicates: &[(\n             ty::Predicate<'tcx>,\n             Option<ty::Predicate<'tcx>>,\n             Option<ObligationCause<'tcx>>,\n-        )>,\n+        )],\n     ) {\n         let mut derives = Vec::<(String, Span, String)>::new();\n         let mut traits = Vec::<Span>::new();\n@@ -1236,23 +1236,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 traits.push(self.tcx.def_span(trait_pred.def_id()));\n             }\n         }\n-        derives.sort();\n-        let derives_grouped = derives.into_iter().fold(\n-            Vec::<(String, Span, String)>::new(),\n-            |mut acc, (self_name, self_span, trait_name)| {\n-                if let Some((acc_self_name, _, ref mut traits)) = acc.last_mut() {\n-                    if acc_self_name == &self_name {\n-                        traits.push_str(format!(\", {}\", trait_name).as_str());\n-                        return acc;\n-                    }\n-                }\n-                acc.push((self_name, self_span, trait_name));\n-                acc\n-            },\n-        );\n         traits.sort();\n         traits.dedup();\n \n+        derives.sort();\n+        derives.dedup();\n+\n+        let mut derives_grouped = Vec::<(String, Span, String)>::new();\n+        for (self_name, self_span, trait_name) in derives.into_iter() {\n+            if let Some((last_self_name, _, ref mut last_trait_names)) = derives_grouped.last_mut()\n+            {\n+                if last_self_name == &self_name {\n+                    last_trait_names.push_str(format!(\", {}\", trait_name).as_str());\n+                    continue;\n+                }\n+            }\n+            derives_grouped.push((self_name, self_span, trait_name));\n+        }\n+\n         let len = traits.len();\n         if len > 0 {\n             let span: MultiSpan = traits.into();"}, {"sha": "e92881b1049280cecac939629b3f1e4c4977a0b9", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -1183,6 +1183,37 @@ fn test_rev_iterator() {\n     assert_eq!(pos, v.len());\n }\n \n+#[test]\n+fn test_to_lowercase_rev_iterator() {\n+    let s = \"A\u00d6\u00df\u00dc\ud83d\udca9\u03a3\u03a4\u0399\u0393\u039c\u0391\u03a3\u01c5\ufb01\u0130\";\n+    let v = ['\\u{307}', 'i', '\ufb01', '\u01c6', '\u03c3', '\u03b1', '\u03bc', '\u03b3', '\u03b9', '\u03c4', '\u03c3', '\ud83d\udca9', '\u00fc', '\u00df', '\u00f6', 'a'];\n+\n+    let mut pos = 0;\n+    let it = s.chars().flat_map(|c| c.to_lowercase()).rev();\n+\n+    for c in it {\n+        assert_eq!(c, v[pos]);\n+        pos += 1;\n+    }\n+    assert_eq!(pos, v.len());\n+}\n+\n+#[test]\n+fn test_to_uppercase_rev_iterator() {\n+    let s = \"a\u00f6\u00df\u00fc\ud83d\udca9\u03c3\u03c4\u03b9\u03b3\u03bc\u03b1\u03c2\u01c5\ufb01\u1f80\";\n+    let v =\n+        ['\u0399', '\u1f08', 'I', 'F', '\u01c4', '\u03a3', '\u0391', '\u039c', '\u0393', '\u0399', '\u03a4', '\u03a3', '\ud83d\udca9', '\u00dc', 'S', 'S', '\u00d6', 'A'];\n+\n+    let mut pos = 0;\n+    let it = s.chars().flat_map(|c| c.to_uppercase()).rev();\n+\n+    for c in it {\n+        assert_eq!(c, v[pos]);\n+        pos += 1;\n+    }\n+    assert_eq!(pos, v.len());\n+}\n+\n #[test]\n #[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_decoding() {"}, {"sha": "5f30d5790a04ff8a771206a0afe30f541afdb5d8", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -393,6 +393,13 @@ impl Iterator for ToLowercase {\n     }\n }\n \n+#[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n+impl DoubleEndedIterator for ToLowercase {\n+    fn next_back(&mut self) -> Option<char> {\n+        self.0.next_back()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToLowercase {}\n \n@@ -420,6 +427,13 @@ impl Iterator for ToUppercase {\n     }\n }\n \n+#[stable(feature = \"case_mapping_double_ended\", since = \"1.59.0\")]\n+impl DoubleEndedIterator for ToUppercase {\n+    fn next_back(&mut self) -> Option<char> {\n+        self.0.next_back()\n+    }\n+}\n+\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for ToUppercase {}\n \n@@ -479,6 +493,26 @@ impl Iterator for CaseMappingIter {\n     }\n }\n \n+impl DoubleEndedIterator for CaseMappingIter {\n+    fn next_back(&mut self) -> Option<char> {\n+        match *self {\n+            CaseMappingIter::Three(a, b, c) => {\n+                *self = CaseMappingIter::Two(a, b);\n+                Some(c)\n+            }\n+            CaseMappingIter::Two(b, c) => {\n+                *self = CaseMappingIter::One(b);\n+                Some(c)\n+            }\n+            CaseMappingIter::One(c) => {\n+                *self = CaseMappingIter::Zero;\n+                Some(c)\n+            }\n+            CaseMappingIter::Zero => None,\n+        }\n+    }\n+}\n+\n impl fmt::Display for CaseMappingIter {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {"}, {"sha": "2b857a6591929d1cbf0fa00ed7d73664fa2cfea7", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -103,6 +103,9 @@ fn test_to_lowercase() {\n         let iter: String = c.to_lowercase().collect();\n         let disp: String = c.to_lowercase().to_string();\n         assert_eq!(iter, disp);\n+        let iter_rev: String = c.to_lowercase().rev().collect();\n+        let disp_rev: String = disp.chars().rev().collect();\n+        assert_eq!(iter_rev, disp_rev);\n         iter\n     }\n     assert_eq!(lower('A'), \"a\");\n@@ -130,6 +133,9 @@ fn test_to_uppercase() {\n         let iter: String = c.to_uppercase().collect();\n         let disp: String = c.to_uppercase().to_string();\n         assert_eq!(iter, disp);\n+        let iter_rev: String = c.to_uppercase().rev().collect();\n+        let disp_rev: String = disp.chars().rev().collect();\n+        assert_eq!(iter_rev, disp_rev);\n         iter\n     }\n     assert_eq!(upper('a'), \"A\");"}, {"sha": "94e6070c0f794f70d5b11226c492e6315cbcc37b", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -99,7 +99,7 @@ use crate::cell::UnsafeCell;\n use crate::env;\n use crate::ffi::c_void;\n use crate::fmt;\n-use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+use crate::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n use crate::sync::Once;\n use crate::sys_common::backtrace::{lock, output_filename};\n use crate::vec::Vec;\n@@ -256,7 +256,7 @@ impl Backtrace {\n         // backtrace captures speedy, because otherwise reading environment\n         // variables every time can be somewhat slow.\n         static ENABLED: AtomicUsize = AtomicUsize::new(0);\n-        match ENABLED.load(SeqCst) {\n+        match ENABLED.load(Relaxed) {\n             0 => {}\n             1 => return false,\n             _ => return true,\n@@ -268,7 +268,7 @@ impl Backtrace {\n                 Err(_) => false,\n             },\n         };\n-        ENABLED.store(enabled as usize + 1, SeqCst);\n+        ENABLED.store(enabled as usize + 1, Relaxed);\n         enabled\n     }\n "}, {"sha": "e5cdc4737068a4a06a642657a11ee1b9d11d94ef", "filename": "library/std/src/process/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -420,3 +420,22 @@ fn env_empty() {\n     let p = Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).env_clear().spawn();\n     assert!(p.is_ok());\n }\n+\n+// See issue #91991\n+#[test]\n+#[cfg(windows)]\n+fn run_bat_script() {\n+    let tempdir = crate::sys_common::io::test::tmpdir();\n+    let script_path = tempdir.join(\"hello.cmd\");\n+\n+    crate::fs::write(&script_path, \"@echo Hello, %~1!\").unwrap();\n+    let output = Command::new(&script_path)\n+        .arg(\"fellow Rustaceans\")\n+        .stdout(crate::process::Stdio::piped())\n+        .spawn()\n+        .unwrap()\n+        .wait_with_output()\n+        .unwrap();\n+    assert!(output.status.success());\n+    assert_eq!(String::from_utf8_lossy(&output.stdout).trim(), \"Hello, fellow Rustaceans!\");\n+}"}, {"sha": "8a0eeff0c4d75f3e56d1078fbf9dece5197ee409", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -2,7 +2,7 @@ use super::{abi, error};\n use crate::{\n     ffi::{CStr, CString, OsStr, OsString},\n     fmt,\n-    io::{self, IoSlice, IoSliceMut, SeekFrom},\n+    io::{self, IoSlice, IoSliceMut, ReadBuf, SeekFrom},\n     mem::MaybeUninit,\n     os::raw::{c_int, c_short},\n     os::solid::ffi::OsStrExt,\n@@ -339,6 +339,32 @@ impl File {\n         }\n     }\n \n+    pub fn read_buf(&self, buf: &mut ReadBuf<'_>) -> io::Result<()> {\n+        unsafe {\n+            let len = buf.remaining();\n+            let mut out_num_bytes = MaybeUninit::uninit();\n+            error::SolidError::err_if_negative(abi::SOLID_FS_Read(\n+                self.fd.raw(),\n+                buf.unfilled_mut().as_mut_ptr() as *mut u8,\n+                len,\n+                out_num_bytes.as_mut_ptr(),\n+            ))\n+            .map_err(|e| e.as_io_error())?;\n+\n+            // Safety: `out_num_bytes` is filled by the successful call to\n+            // `SOLID_FS_Read`\n+            let num_bytes_read = out_num_bytes.assume_init();\n+\n+            // Safety: `num_bytes_read` bytes were written to the unfilled\n+            // portion of the buffer\n+            buf.assume_init(num_bytes_read);\n+\n+            buf.add_filled(num_bytes_read);\n+\n+            Ok(())\n+        }\n+    }\n+\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }"}, {"sha": "e84dfbce4a7540b97fc8e6b3d52fe0cc184bbe57", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -704,6 +704,19 @@ fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Resu\n     // Encode the command and arguments in a command line string such\n     // that the spawned process may recover them using CommandLineToArgvW.\n     let mut cmd: Vec<u16> = Vec::new();\n+\n+    // CreateFileW has special handling for .bat and .cmd files, which means we\n+    // need to add an extra pair of quotes surrounding the whole command line\n+    // so they are properly passed on to the script.\n+    // See issue #91991.\n+    let is_batch_file = Path::new(prog)\n+        .extension()\n+        .map(|ext| ext.eq_ignore_ascii_case(\"cmd\") || ext.eq_ignore_ascii_case(\"bat\"))\n+        .unwrap_or(false);\n+    if is_batch_file {\n+        cmd.push(b'\"' as u16);\n+    }\n+\n     // Always quote the program name so CreateProcess doesn't interpret args as\n     // part of the name if the binary wasn't found first time.\n     append_arg(&mut cmd, prog, Quote::Always)?;\n@@ -715,6 +728,9 @@ fn make_command_line(prog: &OsStr, args: &[Arg], force_quotes: bool) -> io::Resu\n         };\n         append_arg(&mut cmd, arg, quote)?;\n     }\n+    if is_batch_file {\n+        cmd.push(b'\"' as u16);\n+    }\n     return Ok(cmd);\n \n     fn append_arg(cmd: &mut Vec<u16>, arg: &OsStr, quote: Quote) -> io::Result<()> {"}, {"sha": "d300afa313237dbd14603f55b57a5252e594cd61", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -272,7 +272,10 @@ crate struct RenderOptions {\n     crate emit: Vec<EmitType>,\n     /// If `true`, HTML source pages will generate links for items to their definition.\n     crate generate_link_to_definition: bool,\n+    /// Set of function-call locations to include as examples\n     crate call_locations: AllCallLocations,\n+    /// If `true`, Context::init will not emit shared files.\n+    crate no_emit_shared: bool,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -732,6 +735,7 @@ impl Options {\n                 emit,\n                 generate_link_to_definition,\n                 call_locations,\n+                no_emit_shared: false,\n             },\n             crate_name,\n             output_format,"}, {"sha": "45a436c44871002268af23b8e7ac9756f5721e7b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -397,6 +397,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             show_type_layout,\n             generate_link_to_definition,\n             call_locations,\n+            no_emit_shared,\n             ..\n         } = options;\n \n@@ -516,13 +517,16 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             sources::render(&mut cx, &krate)?;\n         }\n \n-        // Build our search index\n-        let index = build_index(&krate, &mut Rc::get_mut(&mut cx.shared).unwrap().cache, tcx);\n+        if !no_emit_shared {\n+            // Build our search index\n+            let index = build_index(&krate, &mut Rc::get_mut(&mut cx.shared).unwrap().cache, tcx);\n+\n+            // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n+            Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n+            write_shared(&cx, &krate, index, &md_opts)?;\n+            Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n+        }\n \n-        // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n-        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n-        write_shared(&cx, &krate, index, &md_opts)?;\n-        Rc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(false);\n         Ok((cx, krate))\n     }\n "}, {"sha": "1fd859ad7cf49cd9c5d1c2dbc85da7d3ff97fe7d", "filename": "src/librustdoc/html/static/js/README.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2FREADME.md?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -0,0 +1,15 @@\n+# Rustdoc JS\n+\n+These JavaScript files are incorporated into the rustdoc binary at build time,\n+and are minified and written to the filesystem as part of the doc build process.\n+\n+We use the [Closure Compiler](https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler)\n+dialect of JSDoc to comment our code and annotate params and return types.\n+To run a check:\n+\n+    ./x.py doc library/std\n+    npm i -g google-closure-compiler\n+    google-closure-compiler -W VERBOSE \\\n+      build/<YOUR PLATFORM>/doc/{search-index*.js,crates*.js} \\\n+      src/librustdoc/html/static/js/{search.js,main.js,storage.js} \\\n+      --externs src/librustdoc/html/static/js/externs.js >/dev/null"}, {"sha": "629f90728d2f61cfaa952de308a3c613079a31af", "filename": "src/librustdoc/html/static/js/externs.js", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -0,0 +1,32 @@\n+// This file contains type definitions that are processed by the Closure Compiler but are\n+// not put into the JavaScript we include as part of the documentation. It is used for\n+// type checking. See README.md in this directory for more info.\n+\n+/* eslint-disable */\n+var searchState;\n+function initSearch(searchIndex){}\n+\n+/**\n+ * @typedef {{\n+ *   raw: string,\n+ *   query: string,\n+ *   type: string,\n+ *   id: string,\n+ * }}\n+ */\n+var ParsedQuery;\n+\n+/**\n+ * @typedef {{\n+ *    crate: string,\n+ *    desc: string,\n+ *    id: number,\n+ *    name: string,\n+ *    normalizedName: string,\n+ *    parent: (Object|null|undefined),\n+ *    path: string,\n+ *    ty: (Number|null|number),\n+ *    type: (Array<?>|null)\n+ * }}\n+ */\n+var Row;"}, {"sha": "f81f6d5d61fed658d7d551424b82b95a33a963b2", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -420,6 +420,13 @@ function hideThemeButtonState() {\n         return document.getElementById(\"help\");\n     }\n \n+    /**\n+     * Show the help popup.\n+     *\n+     * @param {boolean} display    - Whether to show or hide the popup\n+     * @param {Event}   ev         - The event that triggered this call\n+     * @param {Element} [help]     - The help element if it already exists\n+     */\n     function displayHelp(display, ev, help) {\n         if (display) {\n             help = help ? help : getHelpElement(true);"}, {"sha": "cf320f7b4958a14a10eaf0d16c48ab3f20e73a77", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 100, "deletions": 30, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -113,7 +113,15 @@ window.initSearch = function(rawSearchIndex) {\n     var INPUTS_DATA = 0;\n     var OUTPUT_DATA = 1;\n     var NO_TYPE_FILTER = -1;\n-    var currentResults, index, searchIndex;\n+    /**\n+     *  @type {Array<Row>}\n+     */\n+    var searchIndex;\n+    /**\n+     *  @type {Array<string>}\n+     */\n+    var searchWords;\n+    var currentResults;\n     var ALIASES = {};\n     var params = searchState.getQueryStringParams();\n \n@@ -126,12 +134,15 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     /**\n-     * Executes the query and builds an index of results\n-     * @param  {[Object]} query      [The user query]\n-     * @param  {[type]} searchWords  [The list of search words to query\n-     *                                against]\n-     * @param  {[type]} filterCrates [Crate to search in if defined]\n-     * @return {[type]}              [A search index of results]\n+     * Executes the query and returns a list of results for each results tab.\n+     * @param  {Object}        query          - The user query\n+     * @param  {Array<string>} searchWords    - The list of search words to query against\n+     * @param  {string}        [filterCrates] - Crate to search in\n+     * @return {{\n+     *   in_args: Array<?>,\n+     *   returned: Array<?>,\n+     *   others: Array<?>\n+     * }}\n      */\n     function execQuery(query, searchWords, filterCrates) {\n         function itemTypeFromName(typename) {\n@@ -847,11 +858,11 @@ window.initSearch = function(rawSearchIndex) {\n      * This could be written functionally, but I wanted to minimise\n      * functions on stack.\n      *\n-     * @param  {[string]} name   [The name of the result]\n-     * @param  {[string]} path   [The path of the result]\n-     * @param  {[string]} keys   [The keys to be used ([\"file\", \"open\"])]\n-     * @param  {[object]} parent [The parent of the result]\n-     * @return {boolean}       [Whether the result is valid or not]\n+     * @param  {string} name   - The name of the result\n+     * @param  {string} path   - The path of the result\n+     * @param  {string} keys   - The keys to be used ([\"file\", \"open\"])\n+     * @param  {Object} parent - The parent of the result\n+     * @return {boolean}       - Whether the result is valid or not\n      */\n     function validateResult(name, path, keys, parent) {\n         for (var i = 0, len = keys.length; i < len; ++i) {\n@@ -872,8 +883,14 @@ window.initSearch = function(rawSearchIndex) {\n         return true;\n     }\n \n+    /**\n+     * Parse a string into a query object.\n+     *\n+     * @param {string} raw - The text that the user typed.\n+     * @returns {ParsedQuery}\n+     */\n     function getQuery(raw) {\n-        var matches, type, query;\n+        var matches, type = \"\", query;\n         query = raw;\n \n         matches = query.match(/^(fn|mod|struct|enum|trait|type|const|macro)\\s*:\\s*/i);\n@@ -974,6 +991,12 @@ window.initSearch = function(rawSearchIndex) {\n         return tmp;\n     }\n \n+    /**\n+     * Render a set of search results for a single tab.\n+     * @param {Array<?>}    array   - The search results for this tab\n+     * @param {ParsedQuery} query\n+     * @param {boolean}     display - True if this is the active tab\n+     */\n     function addTab(array, query, display) {\n         var extraClass = \"\";\n         if (display === true) {\n@@ -1083,7 +1106,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         currentResults = query.id;\n \n-        var ret_others = addTab(results.others, query);\n+        var ret_others = addTab(results.others, query, true);\n         var ret_in_args = addTab(results.in_args, query, false);\n         var ret_returned = addTab(results.returned, query, false);\n \n@@ -1253,6 +1276,12 @@ window.initSearch = function(rawSearchIndex) {\n         return undefined;\n     }\n \n+    /**\n+     * Perform a search based on the current state of the search input element\n+     * and display the results.\n+     * @param {Event}   [e]       - The event that triggered this search, if any\n+     * @param {boolean} [forced]\n+     */\n     function search(e, forced) {\n         var params = searchState.getQueryStringParams();\n         var query = getQuery(searchState.input.value.trim());\n@@ -1287,11 +1316,14 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         var filterCrates = getFilterCrates();\n-        showResults(execSearch(query, index, filterCrates), params.go_to_first);\n+        showResults(execSearch(query, searchWords, filterCrates), params[\"go_to_first\"]);\n     }\n \n     function buildIndex(rawSearchIndex) {\n         searchIndex = [];\n+        /**\n+         * @type {Array<string>}\n+         */\n         var searchWords = [];\n         var i, word;\n         var currentIndex = 0;\n@@ -1304,6 +1336,38 @@ window.initSearch = function(rawSearchIndex) {\n \n             var crateSize = 0;\n \n+            /**\n+             * The raw search data for a given crate. `n`, `t`, `d`, and `q`, `i`, and `f`\n+             * are arrays with the same length. n[i] contains the name of an item.\n+             * t[i] contains the type of that item (as a small integer that represents an\n+             * offset in `itemTypes`). d[i] contains the description of that item.\n+             *\n+             * q[i] contains the full path of the item, or an empty string indicating\n+             * \"same as q[i-1]\".\n+             *\n+             * i[i], f[i] are a mystery.\n+             *\n+             * `a` defines aliases with an Array of pairs: [name, offset], where `offset`\n+             * points into the n/t/d/q/i/f arrays.\n+             *\n+             * `doc` contains the description of the crate.\n+             *\n+             * `p` is a mystery and isn't the same length as n/t/d/q/i/f.\n+             *\n+             * @type {{\n+             *   doc: string,\n+             *   a: Object,\n+             *   n: Array<string>,\n+             *   t: Array<Number>,\n+             *   d: Array<string>,\n+             *   q: Array<string>,\n+             *   i: Array<Number>,\n+             *   f: Array<Array<?>>,\n+             *   p: Array<Object>,\n+             * }}\n+             */\n+            var crateCorpus = rawSearchIndex[crate];\n+\n             searchWords.push(crate);\n             // This object should have exactly the same set of fields as the \"row\"\n             // object defined below. Your JavaScript runtime will thank you.\n@@ -1313,7 +1377,7 @@ window.initSearch = function(rawSearchIndex) {\n                 ty: 1, // == ExternCrate\n                 name: crate,\n                 path: \"\",\n-                desc: rawSearchIndex[crate].doc,\n+                desc: crateCorpus.doc,\n                 parent: undefined,\n                 type: null,\n                 id: id,\n@@ -1324,23 +1388,23 @@ window.initSearch = function(rawSearchIndex) {\n             currentIndex += 1;\n \n             // an array of (Number) item types\n-            var itemTypes = rawSearchIndex[crate].t;\n+            var itemTypes = crateCorpus.t;\n             // an array of (String) item names\n-            var itemNames = rawSearchIndex[crate].n;\n+            var itemNames = crateCorpus.n;\n             // an array of (String) full paths (or empty string for previous path)\n-            var itemPaths = rawSearchIndex[crate].q;\n+            var itemPaths = crateCorpus.q;\n             // an array of (String) descriptions\n-            var itemDescs = rawSearchIndex[crate].d;\n+            var itemDescs = crateCorpus.d;\n             // an array of (Number) the parent path index + 1 to `paths`, or 0 if none\n-            var itemParentIdxs = rawSearchIndex[crate].i;\n+            var itemParentIdxs = crateCorpus.i;\n             // an array of (Object | null) the type of the function, if any\n-            var itemFunctionSearchTypes = rawSearchIndex[crate].f;\n+            var itemFunctionSearchTypes = crateCorpus.f;\n             // an array of [(Number) item type,\n             //              (String) name]\n-            var paths = rawSearchIndex[crate].p;\n+            var paths = crateCorpus.p;\n             // an array of [(String) alias name\n             //             [Number] index to items]\n-            var aliases = rawSearchIndex[crate].a;\n+            var aliases = crateCorpus.a;\n \n             // convert `rawPaths` entries into object form\n             var len = paths.length;\n@@ -1406,6 +1470,16 @@ window.initSearch = function(rawSearchIndex) {\n         return searchWords;\n     }\n \n+    /**\n+     * Callback for when the search form is submitted.\n+     * @param {Event} [e] - The event that triggered this call, if any\n+     */\n+    function onSearchSubmit(e) {\n+        e.preventDefault();\n+        searchState.clearInputTimeout();\n+        search();\n+    }\n+\n     function registerSearchEvents() {\n         var searchAfter500ms = function() {\n             searchState.clearInputTimeout();\n@@ -1421,11 +1495,7 @@ window.initSearch = function(rawSearchIndex) {\n         };\n         searchState.input.onkeyup = searchAfter500ms;\n         searchState.input.oninput = searchAfter500ms;\n-        document.getElementsByClassName(\"search-form\")[0].onsubmit = function(e) {\n-            e.preventDefault();\n-            searchState.clearInputTimeout();\n-            search();\n-        };\n+        document.getElementsByClassName(\"search-form\")[0].onsubmit = onSearchSubmit;\n         searchState.input.onchange = function(e) {\n             if (e.target !== document.activeElement) {\n                 // To prevent doing anything when it's from a blur event.\n@@ -1546,7 +1616,7 @@ window.initSearch = function(rawSearchIndex) {\n         };\n     }\n \n-    index = buildIndex(rawSearchIndex);\n+    searchWords = buildIndex(rawSearchIndex);\n     registerSearchEvents();\n     // If there's a search term in the URL, execute the search now.\n     if (searchState.getQueryStringParams().search) {"}, {"sha": "d8b3ba92dcba2d0f6a5ed89e044a2959a9cfa232", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -55,6 +55,12 @@ function removeClass(elem, className) {\n     elem.classList.remove(className);\n }\n \n+/**\n+ * Run a callback for every element of an Array.\n+ * @param {Array<?>}    arr        - The array to iterate over\n+ * @param {function(?)} func       - The callback\n+ * @param {boolean}     [reversed] - Whether to iterate in reverse\n+ */\n function onEach(arr, func, reversed) {\n     if (arr && arr.length > 0 && func) {\n         var length = arr.length;\n@@ -76,6 +82,16 @@ function onEach(arr, func, reversed) {\n     return false;\n }\n \n+/**\n+ * Turn an HTMLCollection or a NodeList into an Array, then run a callback\n+ * for every element. This is useful because iterating over an HTMLCollection\n+ * or a \"live\" NodeList while modifying it can be very slow.\n+ * https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection\n+ * https://developer.mozilla.org/en-US/docs/Web/API/NodeList\n+ * @param {NodeList<?>|HTMLCollection<?>} lazyArray  - An array to iterate over\n+ * @param {function(?)}                   func       - The callback\n+ * @param {boolean}                       [reversed] - Whether to iterate in reverse\n+ */\n function onEachLazy(lazyArray, func, reversed) {\n     return onEach(\n         Array.prototype.slice.call(lazyArray),"}, {"sha": "6809551fcfd9a2a3ad9bce09140248fdee7f319a", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -223,13 +223,14 @@ where\n \n crate fn run(\n     krate: clean::Crate,\n-    renderopts: config::RenderOptions,\n+    mut renderopts: config::RenderOptions,\n     cache: formats::cache::Cache,\n     tcx: TyCtxt<'_>,\n     options: ScrapeExamplesOptions,\n ) -> interface::Result<()> {\n     let inner = move || -> Result<(), String> {\n         // Generates source files for examples\n+        renderopts.no_emit_shared = true;\n         let (cx, _) = Context::init(krate, renderopts, cache, tcx).map_err(|e| e.to_string())?;\n \n         // Collect CrateIds corresponding to provided target crates"}, {"sha": "df792f118ab7652a135ab2ed8543eb1ae1d25843", "filename": "src/test/ui/derives/issue-91492.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.rs?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -0,0 +1,25 @@\n+// Reproduce the issue with vec\n+pub struct NoDerives;\n+fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n+    foo.extend_from_slice(bar); //~ ERROR\n+}\n+\n+// Reproduce the issue with vec\n+// and demonstrate that other derives are ignored in the suggested output\n+#[derive(Default, PartialEq)]\n+pub struct SomeDerives;\n+fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n+    foo.extend_from_slice(bar); //~ ERROR\n+}\n+\n+// Try and fail to reproduce the issue without vec.\n+// No idea why it doesnt reproduce the issue but its still a useful test case.\n+struct Object<T, A>(T, A);\n+impl<T: Clone, A: Default> Object<T, A> {\n+    fn use_clone(&self) {}\n+}\n+fn fun3(foo: Object<NoDerives, SomeDerives>) {\n+    foo.use_clone(); //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "73c91154a7bda8c84b26427116a184061ddaac1e", "filename": "src/test/ui/derives/issue-91492.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa0239b169e9f45a9b5af1e989821b9b69bc9a2/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91492.stderr?ref=5aa0239b169e9f45a9b5af1e989821b9b69bc9a2", "patch": "@@ -0,0 +1,54 @@\n+error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:4:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Clone`\n+LL | fn fun1(foo: &mut Vec<NoDerives>, bar: &[NoDerives]) {\n+LL |     foo.extend_from_slice(bar);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Clone`\n+help: consider annotating `NoDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<SomeDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:12:9\n+   |\n+LL | pub struct SomeDerives;\n+   | ----------------------- doesn't satisfy `SomeDerives: Clone`\n+LL | fn fun2(foo: &mut Vec<SomeDerives>, bar: &[SomeDerives]) {\n+LL |     foo.extend_from_slice(bar);\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `SomeDerives: Clone`\n+help: consider annotating `SomeDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error[E0599]: the method `use_clone` exists for struct `Object<NoDerives, SomeDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91492.rs:22:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Clone`\n+...\n+LL | struct Object<T, A>(T, A);\n+   | -------------------------- method `use_clone` not found for this\n+...\n+LL |     foo.use_clone();\n+   |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Clone`\n+help: consider annotating `NoDerives` with `#[derive(Clone)]`\n+   |\n+LL | #[derive(Clone)]\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}]}