{"sha": "0dfc1c97c59361be750b0e15a181cd4d06712dd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZmMxYzk3YzU5MzYxYmU3NTBiMGUxNWExODFjZDRkMDY3MTJkZDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T17:35:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T17:36:16Z"}, "message": "test weak_into_raw", "tree": {"sha": "7c506a8d22f5e1df51a7b4ed47b73559304b4c9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c506a8d22f5e1df51a7b4ed47b73559304b4c9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dfc1c97c59361be750b0e15a181cd4d06712dd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dfc1c97c59361be750b0e15a181cd4d06712dd8", "html_url": "https://github.com/rust-lang/rust/commit/0dfc1c97c59361be750b0e15a181cd4d06712dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dfc1c97c59361be750b0e15a181cd4d06712dd8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5224b0dc1614ba1cf00d6ca22cad9fa466783f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5224b0dc1614ba1cf00d6ca22cad9fa466783f1", "html_url": "https://github.com/rust-lang/rust/commit/a5224b0dc1614ba1cf00d6ca22cad9fa466783f1"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "d93fb8b6950eb84eadb1bcc0e2e0e0aa060b03c3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dfc1c97c59361be750b0e15a181cd4d06712dd8/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/0dfc1c97c59361be750b0e15a181cd4d06712dd8/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=0dfc1c97c59361be750b0e15a181cd4d06712dd8", "patch": "@@ -1 +1 @@\n-4b9d80325a65b0375eea526409a0f3aaf1cbc23c\n+81970852e172c04322cbf8ba23effabeb491c83c"}, {"sha": "3e6e96456fca6695e3d026571495c01a2672c95c", "filename": "tests/compile-fail/rc_as_raw.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0dfc1c97c59361be750b0e15a181cd4d06712dd8/tests%2Fcompile-fail%2Frc_as_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfc1c97c59361be750b0e15a181cd4d06712dd8/tests%2Fcompile-fail%2Frc_as_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc_as_raw.rs?ref=0dfc1c97c59361be750b0e15a181cd4d06712dd8", "patch": "@@ -0,0 +1,19 @@\n+#![feature(weak_into_raw)]\n+\n+use std::rc::{Rc, Weak};\n+use std::ptr;\n+\n+/// Taken from the `Weak::as_raw` doctest.\n+fn main() {\n+    let strong = Rc::new(Box::new(42));\n+    let weak = Rc::downgrade(&strong);\n+    // Both point to the same object\n+    assert!(ptr::eq(&*strong, Weak::as_raw(&weak)));\n+    // The strong here keeps it alive, so we can still access the object.\n+    assert_eq!(42, **unsafe { &*Weak::as_raw(&weak) });\n+    \n+    drop(strong);\n+    // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n+    // undefined behaviour.\n+    assert_eq!(42, **unsafe { &*Weak::as_raw(&weak) }); //~ ERROR dangling pointer\n+}"}, {"sha": "9b4d51ed376a6fd4efa1802d8081046dab03d775", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0dfc1c97c59361be750b0e15a181cd4d06712dd8/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfc1c97c59361be750b0e15a181cd4d06712dd8/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=0dfc1c97c59361be750b0e15a181cd4d06712dd8", "patch": "@@ -1,5 +1,7 @@\n+#![feature(weak_into_raw)]\n+\n use std::cell::{Cell, RefCell};\n-use std::rc::Rc;\n+use std::rc::{Rc, Weak};\n use std::sync::Arc;\n use std::fmt::Debug;\n \n@@ -69,12 +71,46 @@ fn rc_fat_ptr_eq() {\n     drop(unsafe { Rc::from_raw(r) });\n }\n \n+/// Taken from the `Weak::into_raw` doctest.\n+fn weak_into_raw() {\n+    let strong = Rc::new(42);\n+    let weak = Rc::downgrade(&strong);\n+    let raw = Weak::into_raw(weak);\n+\n+    assert_eq!(1, Rc::weak_count(&strong));\n+    assert_eq!(42, unsafe { *raw });\n+\n+    drop(unsafe { Weak::from_raw(raw) });\n+    assert_eq!(0, Rc::weak_count(&strong));\n+}\n+\n+/// Taken from the `Weak::from_raw` doctest.\n+fn weak_from_raw() {\n+    let strong = Rc::new(42);\n+\n+    let raw_1 = Weak::into_raw(Rc::downgrade(&strong));\n+    let raw_2 = Weak::into_raw(Rc::downgrade(&strong));\n+\n+    assert_eq!(2, Rc::weak_count(&strong));\n+\n+    assert_eq!(42, *Weak::upgrade(&unsafe { Weak::from_raw(raw_1) }).unwrap());\n+    assert_eq!(1, Rc::weak_count(&strong));\n+\n+    drop(strong);\n+\n+    // Decrement the last weak count.\n+    assert!(Weak::upgrade(&unsafe { Weak::from_raw(raw_2) }).is_none());\n+}\n+\n fn main() {\n     rc_fat_ptr_eq();\n     rc_refcell();\n     rc_refcell2();\n     rc_cell();\n     rc_raw();\n     rc_from();\n+    weak_into_raw();\n+    weak_from_raw();\n+\n     arc();\n }"}]}