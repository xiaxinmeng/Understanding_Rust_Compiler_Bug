{"sha": "15a52f69d9522442866307254cc712a308688516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTUyZjY5ZDk1MjI0NDI4NjYzMDcyNTRjYzcxMmEzMDg2ODg1MTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-20T11:32:53Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-20T11:32:53Z"}, "message": "Show enum variant completions for ref scrutinee", "tree": {"sha": "3838149a6c5680bd6520a3258febb9d75c5c55cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3838149a6c5680bd6520a3258febb9d75c5c55cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a52f69d9522442866307254cc712a308688516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a52f69d9522442866307254cc712a308688516", "html_url": "https://github.com/rust-lang/rust/commit/15a52f69d9522442866307254cc712a308688516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a52f69d9522442866307254cc712a308688516/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943e4faceb4491b83cf05cfceedbdd5f469b9270", "url": "https://api.github.com/repos/rust-lang/rust/commits/943e4faceb4491b83cf05cfceedbdd5f469b9270", "html_url": "https://github.com/rust-lang/rust/commit/943e4faceb4491b83cf05cfceedbdd5f469b9270"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "d09849752064111b56b1fe95d8e63116b06ea756", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/15a52f69d9522442866307254cc712a308688516/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a52f69d9522442866307254cc712a308688516/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=15a52f69d9522442866307254cc712a308688516", "patch": "@@ -1,5 +1,7 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n+use std::iter;\n+\n use either::Either;\n use hir::{Adt, ModPath, ModuleDef, ScopeDef, Type};\n use ide_db::helpers::insert_use::ImportScope;\n@@ -50,7 +52,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n }\n \n fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n-    if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n+    if let Some(Adt::Enum(enum_data)) =\n+        iter::successors(Some(ty.clone()), |ty| ty.remove_ref()).last().and_then(|ty| ty.as_adt())\n+    {\n         let variants = enum_data.variants(ctx.db);\n \n         let module = if let Some(module) = ctx.scope.module() {\n@@ -701,6 +705,7 @@ fn main() { <|> }\n             \"#]],\n         );\n     }\n+\n     #[test]\n     fn completes_enum_variant_matcharm() {\n         check(\n@@ -721,6 +726,26 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn completes_enum_variant_matcharm_ref() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+\n+fn main() {\n+    let foo = Foo::Quux;\n+    match &foo { Qu<|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn completes_enum_variant_iflet() {\n         check("}]}