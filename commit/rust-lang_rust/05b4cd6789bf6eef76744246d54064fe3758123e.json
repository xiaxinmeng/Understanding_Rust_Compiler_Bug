{"sha": "05b4cd6789bf6eef76744246d54064fe3758123e", "node_id": "C_kwDOAAsO6NoAKDA1YjRjZDY3ODliZjZlZWY3Njc0NDI0NmQ1NDA2NGZlMzc1ODEyM2U", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-05T04:12:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T04:12:35Z"}, "message": "Rollup merge of #89413 - matthewjasper:spec-marker-fix, r=nikomatsakis\n\nCorrectly handle supertraits for min_specialization\n\nSupertraits of specialization markers could circumvent checks for\nmin_specialization. Elaborating predicates prevents this.\n\nr? ````@nikomatsakis````", "tree": {"sha": "c95ac966d53347bbaf66e52b27a4c52acedd2cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c95ac966d53347bbaf66e52b27a4c52acedd2cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b4cd6789bf6eef76744246d54064fe3758123e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW9C0CRBK7hj4Ov3rIwAA6BYIAJCfyUvlzNURLTJE84kTaRS1\nxBDKUvtitKL0kLhs4Yo5QJ2d3mx/CuwnORO+Cg4B4qREfPkn3MTTqP5ju2Q1OI/r\nvyVtPsvczFZngIW+ZKLBNLU0hu7hkvJb9CCKvgZOSJ2EZHvfB5eTO+HOJLSz22fQ\nL/v8zj7YMMNkJK12ynUAD8ENsZrUYXsScWzA5sQWgZARjh3+3ECRM+7gulFkr3Zw\nynbiv/BL0gkKt+vUBzKxLbFo6p6MCKEHAOYMbjqa6hKNTREZvsrI2Wzz/UcEFwPB\nrqHl4gLC4t/qFfy2nE/4RJi574EVDXt4us03THtACq9ah0UludBOoSjhBJT75sI=\n=aX/w\n-----END PGP SIGNATURE-----\n", "payload": "tree c95ac966d53347bbaf66e52b27a4c52acedd2cc8\nparent 7aa9ce55b91726d92770107bfaf5961163cd9388\nparent 051d5b0118186433cdb1e12c6198b877bfa0a8fc\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633407155 -0700\ncommitter GitHub <noreply@github.com> 1633407155 -0700\n\nRollup merge of #89413 - matthewjasper:spec-marker-fix, r=nikomatsakis\n\nCorrectly handle supertraits for min_specialization\n\nSupertraits of specialization markers could circumvent checks for\nmin_specialization. Elaborating predicates prevents this.\n\nr? ````@nikomatsakis````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b4cd6789bf6eef76744246d54064fe3758123e", "html_url": "https://github.com/rust-lang/rust/commit/05b4cd6789bf6eef76744246d54064fe3758123e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b4cd6789bf6eef76744246d54064fe3758123e/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa9ce55b91726d92770107bfaf5961163cd9388", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa9ce55b91726d92770107bfaf5961163cd9388", "html_url": "https://github.com/rust-lang/rust/commit/7aa9ce55b91726d92770107bfaf5961163cd9388"}, {"sha": "051d5b0118186433cdb1e12c6198b877bfa0a8fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/051d5b0118186433cdb1e12c6198b877bfa0a8fc", "html_url": "https://github.com/rust-lang/rust/commit/051d5b0118186433cdb1e12c6198b877bfa0a8fc"}], "stats": {"total": 248, "additions": 147, "deletions": 101}, "files": [{"sha": "b31d6d68b0a245b4a8d2215ef88a533bb99973a5", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -64,7 +64,9 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_match::NonStructuralMatchTy;\n-pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n+pub use self::util::{\n+    elaborate_obligations, elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs,\n+};\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{\n     get_vtable_index_of_object_method, impl_item_is_final, predicate_for_trait_def, upcast_choices,"}, {"sha": "f4bb5761c19bdbb944a4e88602786178ce9c49a5", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -74,7 +74,7 @@ use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n-use rustc_middle::ty::{self, InstantiatedPredicates, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::{self, translate_substs, wf};\n \n@@ -294,13 +294,27 @@ fn check_predicates<'tcx>(\n     span: Span,\n ) {\n     let tcx = infcx.tcx;\n-    let impl1_predicates = tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs);\n+    let impl1_predicates: Vec<_> = traits::elaborate_predicates(\n+        tcx,\n+        tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs).predicates.into_iter(),\n+    )\n+    .map(|obligation| obligation.predicate)\n+    .collect();\n+\n     let mut impl2_predicates = if impl2_node.is_from_trait() {\n         // Always applicable traits have to be always applicable without any\n         // assumptions.\n-        InstantiatedPredicates::empty()\n+        Vec::new()\n     } else {\n-        tcx.predicates_of(impl2_node.def_id()).instantiate(tcx, impl2_substs)\n+        traits::elaborate_predicates(\n+            tcx,\n+            tcx.predicates_of(impl2_node.def_id())\n+                .instantiate(tcx, impl2_substs)\n+                .predicates\n+                .into_iter(),\n+        )\n+        .map(|obligation| obligation.predicate)\n+        .collect()\n     };\n     debug!(\n         \"check_always_applicable(\\nimpl1_predicates={:?},\\nimpl2_predicates={:?}\\n)\",\n@@ -322,13 +336,12 @@ fn check_predicates<'tcx>(\n     // which is sound because we forbid impls like the following\n     //\n     // impl<D: Debug> AlwaysApplicable for D { }\n-    let always_applicable_traits =\n-        impl1_predicates.predicates.iter().copied().filter(|&predicate| {\n-            matches!(\n-                trait_predicate_kind(tcx, predicate),\n-                Some(TraitSpecializationKind::AlwaysApplicable)\n-            )\n-        });\n+    let always_applicable_traits = impl1_predicates.iter().copied().filter(|&predicate| {\n+        matches!(\n+            trait_predicate_kind(tcx, predicate),\n+            Some(TraitSpecializationKind::AlwaysApplicable)\n+        )\n+    });\n \n     // Include the well-formed predicates of the type parameters of the impl.\n     for arg in tcx.impl_trait_ref(impl1_def_id).unwrap().substs {\n@@ -340,18 +353,19 @@ fn check_predicates<'tcx>(\n             arg,\n             span,\n         ) {\n-            impl2_predicates\n-                .predicates\n-                .extend(obligations.into_iter().map(|obligation| obligation.predicate))\n+            impl2_predicates.extend(\n+                traits::elaborate_obligations(tcx, obligations)\n+                    .map(|obligation| obligation.predicate),\n+            )\n         }\n     }\n-    impl2_predicates.predicates.extend(\n+    impl2_predicates.extend(\n         traits::elaborate_predicates(tcx, always_applicable_traits)\n             .map(|obligation| obligation.predicate),\n     );\n \n-    for predicate in impl1_predicates.predicates {\n-        if !impl2_predicates.predicates.contains(&predicate) {\n+    for predicate in impl1_predicates {\n+        if !impl2_predicates.contains(&predicate) {\n             check_specialization_on(tcx, predicate, span)\n         }\n     }"}, {"sha": "18e191f2b59a28db44c2a045c1fae9da8d94bf85", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -266,14 +266,21 @@ unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n #[doc(hidden)]\n #[unstable(issue = \"none\", feature = \"std_internals\")]\n+#[rustc_unsafe_specialization_marker]\n+pub trait NonDrop {}\n+\n // T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n // and thus we can't implement drop-handling\n-//\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+impl<T: Copy> NonDrop for T {}\n+\n+#[doc(hidden)]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n // TrustedRandomAccess (without NoCoerce) must not be implemented because\n-// subtypes/supertypes of `T` might not be `Copy`\n+// subtypes/supertypes of `T` might not be `NonDrop`\n unsafe impl<T, A: Allocator> TrustedRandomAccessNoCoerce for IntoIter<T, A>\n where\n-    T: Copy,\n+    T: NonDrop,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "6e78534cf5b10d3a515134d933bdc9508fddab12", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -6,24 +6,14 @@ use super::{AsIntoIter, InPlaceDrop, SpecFromIter, SpecFromIterNested, Vec};\n \n /// Specialization marker for collecting an iterator pipeline into a Vec while reusing the\n /// source allocation, i.e. executing the pipeline in place.\n-///\n-/// The SourceIter parent trait is necessary for the specializing function to access the allocation\n-/// which is to be reused. But it is not sufficient for the specialization to be valid. See\n-/// additional bounds on the impl.\n #[rustc_unsafe_specialization_marker]\n-pub(super) trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n+pub(super) trait InPlaceIterableMarker {}\n \n-// The std-internal SourceIter/InPlaceIterable traits are only implemented by chains of\n-// Adapter<Adapter<Adapter<IntoIter>>> (all owned by core/std). Additional bounds\n-// on the adapter implementations (beyond `impl<I: Trait> Trait for Adapter<I>`) only depend on other\n-// traits already marked as specialization traits (Copy, TrustedRandomAccess, FusedIterator).\n-// I.e. the marker does not depend on lifetimes of user-supplied types. Modulo the Copy hole, which\n-// several other specializations already depend on.\n-impl<T> SourceIterMarker for T where T: SourceIter<Source: AsIntoIter> + InPlaceIterable {}\n+impl<T> InPlaceIterableMarker for T where T: InPlaceIterable {}\n \n impl<T, I> SpecFromIter<T, I> for Vec<T>\n where\n-    I: Iterator<Item = T> + SourceIterMarker,\n+    I: Iterator<Item = T> + SourceIter<Source: AsIntoIter> + InPlaceIterableMarker,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // Additional requirements which cannot expressed via trait bounds. We rely on const eval"}, {"sha": "84e4618844a610ffd503691829a6db12c0c7cabf", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -249,14 +249,14 @@ impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n unsafe impl<I> TrustedLen for Enumerate<I> where I: TrustedLen {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n+unsafe impl<I> SourceIter for Enumerate<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "a0afaa326ad633b9b9dbc01ebf7f35b65e94cd47", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -135,15 +135,14 @@ where\n impl<I: FusedIterator, P> FusedIterator for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P>\n+unsafe impl<P, I> SourceIter for Filter<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "e0d665c9e12ba0e2465197f0f642d01e1ea23710", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -129,15 +129,14 @@ where\n impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F> where F: FnMut(I::Item) -> Option<B> {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F>\n+unsafe impl<I, F> SourceIter for FilterMap<I, F>\n where\n-    F: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "19839fdfe5bc35dd549246f59ce2b650d15c0317", "filename": "library/core/src/iter/adapters/inspect.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -149,15 +149,14 @@ where\n impl<I: FusedIterator, F> FusedIterator for Inspect<I, F> where F: FnMut(&I::Item) {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F>\n+unsafe impl<I, F> SourceIter for Inspect<I, F>\n where\n-    F: FnMut(&I::Item),\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "449650a22f4353b0981e1d82cc9f069db0ed36c4", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -201,15 +201,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n+unsafe impl<I, F> SourceIter for Map<I, F>\n where\n-    F: FnMut(I::Item) -> B,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "1e8d6bf3e00e17acca6fb2209eb56e3c794780ab", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -80,15 +80,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, P> SourceIter for MapWhile<I, P>\n+unsafe impl<I, P> SourceIter for MapWhile<I, P>\n where\n-    P: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "1e1ce866ff3f29083eb7d15fab2e40c94d8ab2ed", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -92,9 +92,10 @@ pub use self::zip::zip;\n /// [`as_inner`]: SourceIter::as_inner\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n+#[rustc_specialization_trait]\n pub unsafe trait SourceIter {\n     /// A source stage in an iterator pipeline.\n-    type Source: Iterator;\n+    type Source;\n \n     /// Retrieve the source of an iterator pipeline.\n     ///\n@@ -200,14 +201,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I, E> SourceIter for ResultShunt<'_, I, E>\n+unsafe impl<I, E> SourceIter for ResultShunt<'_, I, E>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut Self::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "20aca323bab79e9cb5761bd8795f891caaef3fe9", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -321,14 +321,14 @@ impl<I: Iterator> Peekable<I> {\n unsafe impl<I> TrustedLen for Peekable<I> where I: TrustedLen {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n+unsafe impl<I: Iterator> SourceIter for Peekable<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "80bfd2231241b3da7d066d894f1cf67020188bd7", "filename": "library/core/src/iter/adapters/scan.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -90,15 +90,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n+unsafe impl<St, F, I> SourceIter for Scan<I, St, F>\n where\n-    I: SourceIter<Source = S>,\n-    F: FnMut(&mut St, I::Item) -> Option<B>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "565fc224f53ca06bafd5bf2f73790fd794dbc06f", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -222,14 +222,14 @@ where\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n+unsafe impl<I> SourceIter for Skip<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "f29661779c05650e2ae26444d08bfe0b873577dd", "filename": "library/core/src/iter/adapters/skip_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -105,15 +105,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P>\n+unsafe impl<P, I> SourceIter for SkipWhile<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "81f6c294fac13f8f70e8f1528ed32640a7e52ad3", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -130,14 +130,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I>\n+unsafe impl<I> SourceIter for Take<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "ded216da952a3f406c885a3c7660dbcbd8d61a81", "filename": "library/core/src/iter/adapters/take_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -118,15 +118,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P>\n+unsafe impl<P, I> SourceIter for TakeWhile<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "2b7287a413376bf53e2796cc8b25b0dcb1a8722a", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -414,16 +414,14 @@ where\n // Arbitrarily selects the left side of the zip iteration as extractable \"source\"\n // it would require negative trait bounds to be able to try both\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S, A, B> SourceIter for Zip<A, B>\n+unsafe impl<A, B> SourceIter for Zip<A, B>\n where\n-    A: SourceIter<Source = S>,\n-    B: Iterator,\n-    S: Iterator,\n+    A: SourceIter,\n {\n-    type Source = S;\n+    type Source = A::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut A::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.a) }\n     }"}, {"sha": "3bb2480e9e2bef50a4deef89bd73161d1ac0b537", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -0,0 +1,29 @@\n+// Check that supertraits cannot be used to work around min_specialization\n+// limitations.\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+trait HasMethod {\n+    fn method(&self);\n+}\n+\n+#[rustc_unsafe_specialization_marker]\n+trait Marker: HasMethod {}\n+\n+trait Spec {\n+    fn spec_me(&self);\n+}\n+\n+impl<T> Spec for T {\n+    default fn spec_me(&self) {}\n+}\n+\n+impl<T: Marker> Spec for T {\n+    //~^ ERROR cannot specialize on trait `HasMethod`\n+    fn spec_me(&self) {\n+        self.method();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "964109dd10f4741e9b9043cc522f60143c506b06", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05b4cd6789bf6eef76744246d54064fe3758123e/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05b4cd6789bf6eef76744246d54064fe3758123e/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr?ref=05b4cd6789bf6eef76744246d54064fe3758123e", "patch": "@@ -0,0 +1,13 @@\n+error: cannot specialize on trait `HasMethod`\n+  --> $DIR/spec-marker-supertraits.rs:22:1\n+   |\n+LL | / impl<T: Marker> Spec for T {\n+LL | |\n+LL | |     fn spec_me(&self) {\n+LL | |         self.method();\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}