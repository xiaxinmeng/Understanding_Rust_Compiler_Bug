{"sha": "f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZDBjYjY0ZmM4YjMwMTBiZGM0YjE2OGEyZmE2ZDk2YTZjZjkwYjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T18:58:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T18:58:44Z"}, "message": "rename descriptorsdb -> hirdb", "tree": {"sha": "8e0ede40dff7402ebc18328db24fa195c9faf2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0ede40dff7402ebc18328db24fa195c9faf2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "html_url": "https://github.com/rust-lang/rust/commit/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d659b7a2f03788eb0f4f15e3730bbf65a18ed818", "url": "https://api.github.com/repos/rust-lang/rust/commits/d659b7a2f03788eb0f4f15e3730bbf65a18ed818", "html_url": "https://github.com/rust-lang/rust/commit/d659b7a2f03788eb0f4f15e3730bbf65a18ed818"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "b4fbbe7ad7af84ddbc316467402048b460958621", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -122,7 +122,7 @@ salsa::database_storage! {\n             fn file_symbols() for FileSymbolsQuery;\n             fn resolve_syntax_ptr() for ResolveSyntaxPtrQuery;\n         }\n-        impl hir::DescriptorDatabase {\n+        impl hir::HirDatabase {\n             fn module_tree() for hir::ModuleTreeQuery;\n             fn fn_scopes() for hir::FnScopesQuery;\n             fn _file_items() for hir::FileItemsQuery;"}, {"sha": "0d487d0240ca41bf14514d590d42f1718e2fa670", "filename": "crates/ra_analysis/src/hir/function/imp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fimp.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -4,17 +4,17 @@ use ra_syntax::ast::{AstNode, FnDef, FnDefNode};\n \n use crate::hir::{\n     function::{FnId, FnScopes},\n-    DescriptorDatabase,\n+    HirDatabase,\n };\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`\n-pub(crate) fn fn_syntax(db: &impl DescriptorDatabase, fn_id: FnId) -> FnDefNode {\n+pub(crate) fn fn_syntax(db: &impl HirDatabase, fn_id: FnId) -> FnDefNode {\n     let ptr = db.id_maps().fn_ptr(fn_id);\n     let syntax = db.resolve_syntax_ptr(ptr);\n     FnDef::cast(syntax.borrowed()).unwrap().owned()\n }\n \n-pub(crate) fn fn_scopes(db: &impl DescriptorDatabase, fn_id: FnId) -> Arc<FnScopes> {\n+pub(crate) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n     let syntax = db._fn_syntax(fn_id);\n     let res = FnScopes::new(syntax.borrowed());\n     Arc::new(res)"}, {"sha": "232a8558bced6e86d048a9b48a0e7ea2def70c61", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -34,7 +34,7 @@ pub(crate) use self::path::{Path, PathKind};\n pub(crate) use self::module::nameres::FileItemId;\n \n salsa::query_group! {\n-    pub(crate) trait DescriptorDatabase: SyntaxDatabase + IdDatabase {\n+pub(crate) trait HirDatabase: SyntaxDatabase + IdDatabase {\n         fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n             type FnScopesQuery;\n             use fn function::imp::fn_scopes;\n@@ -83,7 +83,7 @@ pub(crate) enum Def {\n }\n \n impl DefId {\n-    pub(crate) fn resolve(self, db: &impl DescriptorDatabase) -> Cancelable<Def> {\n+    pub(crate) fn resolve(self, db: &impl HirDatabase) -> Cancelable<Def> {\n         let loc = db.id_maps().def_loc(self);\n         let res = match loc {\n             DefLoc::Module { id, source_root } => {"}, {"sha": "062457ae09eed03dec7815b8f2edd7605478af5c", "filename": "crates/ra_analysis/src/hir/module/imp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -9,7 +9,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     db,\n-    hir::DescriptorDatabase,\n+    hir::HirDatabase,\n     input::{SourceRoot, SourceRootId},\n     Cancelable, FileId, FileResolverImp,\n };\n@@ -35,7 +35,7 @@ impl Submodule {\n }\n \n pub(crate) fn submodules(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     source: ModuleSource,\n ) -> Cancelable<Arc<Vec<Submodule>>> {\n     db::check_canceled(db)?;\n@@ -82,7 +82,7 @@ pub(crate) fn modules<'a>(\n }\n \n pub(crate) fn module_tree(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     source_root: SourceRootId,\n ) -> Cancelable<Arc<ModuleTree>> {\n     db::check_canceled(db)?;\n@@ -91,7 +91,7 @@ pub(crate) fn module_tree(\n }\n \n fn create_module_tree<'a>(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     source_root: SourceRootId,\n ) -> Cancelable<ModuleTree> {\n     let mut tree = ModuleTree::default();\n@@ -121,7 +121,7 @@ fn create_module_tree<'a>(\n }\n \n fn build_subtree(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     source_root: &SourceRoot,\n     tree: &mut ModuleTree,\n     visited: &mut FxHashSet<ModuleSource>,"}, {"sha": "5bff11c90fdf6c0563f83958266c3a60587359a3", "filename": "crates/ra_analysis/src/hir/module/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -14,7 +14,7 @@ use relative_path::RelativePathBuf;\n \n use crate::{\n     db::SyntaxDatabase, syntax_ptr::SyntaxPtr, FileId, FilePosition, Cancelable,\n-    hir::{Path, PathKind, DescriptorDatabase},\n+    hir::{Path, PathKind, HirDatabase},\n     input::SourceRootId,\n     arena::{Arena, Id},\n     loc2id::{DefLoc, DefId},\n@@ -36,7 +36,7 @@ impl ModuleDescriptor {\n     /// lossy transformation: in general, a single source might correspond to\n     /// several modules.\n     pub fn guess_from_file_id(\n-        db: &impl DescriptorDatabase,\n+        db: &impl HirDatabase,\n         file_id: FileId,\n     ) -> Cancelable<Option<ModuleDescriptor>> {\n         ModuleDescriptor::guess_from_source(db, file_id, ModuleSource::SourceFile(file_id))\n@@ -46,7 +46,7 @@ impl ModuleDescriptor {\n     /// is inherently lossy transformation: in general, a single source might\n     /// correspond to several modules.\n     pub fn guess_from_position(\n-        db: &impl DescriptorDatabase,\n+        db: &impl HirDatabase,\n         position: FilePosition,\n     ) -> Cancelable<Option<ModuleDescriptor>> {\n         let file = db.file_syntax(position.file_id);\n@@ -59,7 +59,7 @@ impl ModuleDescriptor {\n     }\n \n     fn guess_from_source(\n-        db: &impl DescriptorDatabase,\n+        db: &impl HirDatabase,\n         file_id: FileId,\n         module_source: ModuleSource,\n     ) -> Cancelable<Option<ModuleDescriptor>> {\n@@ -78,7 +78,7 @@ impl ModuleDescriptor {\n     }\n \n     pub(super) fn new(\n-        db: &impl DescriptorDatabase,\n+        db: &impl HirDatabase,\n         source_root_id: SourceRootId,\n         module_id: ModuleId,\n     ) -> Cancelable<ModuleDescriptor> {\n@@ -93,10 +93,7 @@ impl ModuleDescriptor {\n \n     /// Returns `mod foo;` or `mod foo {}` node whihc declared this module.\n     /// Returns `None` for the root module\n-    pub fn parent_link_source(\n-        &self,\n-        db: &impl DescriptorDatabase,\n-    ) -> Option<(FileId, ast::ModuleNode)> {\n+    pub fn parent_link_source(&self, db: &impl HirDatabase) -> Option<(FileId, ast::ModuleNode)> {\n         let link = self.module_id.parent_link(&self.tree)?;\n         let file_id = link.owner(&self.tree).source(&self.tree).file_id();\n         let src = link.bind_source(&self.tree, db);\n@@ -132,7 +129,7 @@ impl ModuleDescriptor {\n         Some(link.name(&self.tree))\n     }\n \n-    pub fn def_id(&self, db: &impl DescriptorDatabase) -> DefId {\n+    pub fn def_id(&self, db: &impl HirDatabase) -> DefId {\n         let def_loc = DefLoc::Module {\n             id: self.module_id,\n             source_root: self.source_root_id,\n@@ -150,15 +147,15 @@ impl ModuleDescriptor {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub(crate) fn scope(&self, db: &impl DescriptorDatabase) -> Cancelable<ModuleScope> {\n+    pub(crate) fn scope(&self, db: &impl HirDatabase) -> Cancelable<ModuleScope> {\n         let item_map = db._item_map(self.source_root_id)?;\n         let res = item_map.per_module[&self.module_id].clone();\n         Ok(res)\n     }\n \n     pub(crate) fn resolve_path(\n         &self,\n-        db: &impl DescriptorDatabase,\n+        db: &impl HirDatabase,\n         path: Path,\n     ) -> Cancelable<Option<DefId>> {\n         let mut curr = match path.kind {\n@@ -180,7 +177,7 @@ impl ModuleDescriptor {\n         Ok(Some(curr))\n     }\n \n-    pub fn problems(&self, db: &impl DescriptorDatabase) -> Vec<(SyntaxNode, Problem)> {\n+    pub fn problems(&self, db: &impl HirDatabase) -> Vec<(SyntaxNode, Problem)> {\n         self.module_id.problems(&self.tree, db)\n     }\n }"}, {"sha": "bb5a888c8dfa4b15cd33f10e583710fdfe3cc072", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -33,7 +33,7 @@ use crate::{\n     loc2id::{DefId, DefLoc},\n     hir::{\n         Path, PathKind,\n-        DescriptorDatabase,\n+        HirDatabase,\n         module::{ModuleId, ModuleTree, ModuleSourceNode},\n     },\n     input::SourceRootId,\n@@ -71,7 +71,7 @@ impl Index<FileItemId> for FileItems {\n     }\n }\n \n-pub(crate) fn file_items(db: &impl DescriptorDatabase, file_id: FileId) -> Arc<FileItems> {\n+pub(crate) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<FileItems> {\n     let source_file = db.file_syntax(file_id);\n     let source_file = source_file.borrowed();\n     let mut res = FileItems::default();\n@@ -87,7 +87,7 @@ pub(crate) fn file_items(db: &impl DescriptorDatabase, file_id: FileId) -> Arc<F\n }\n \n pub(crate) fn file_item(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     file_id: FileId,\n     file_item_id: FileItemId,\n ) -> SyntaxNode {\n@@ -154,7 +154,7 @@ pub(crate) struct NamedImport {\n }\n \n impl NamedImport {\n-    pub(crate) fn range(&self, db: &impl DescriptorDatabase, file_id: FileId) -> TextRange {\n+    pub(crate) fn range(&self, db: &impl HirDatabase, file_id: FileId) -> TextRange {\n         let syntax = db._file_item(file_id, self.file_item_id);\n         let offset = syntax.borrowed().range().start();\n         self.relative_range + offset\n@@ -168,7 +168,7 @@ enum ImportKind {\n }\n \n pub(crate) fn input_module_items(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     source_root: SourceRootId,\n     module_id: ModuleId,\n ) -> Cancelable<Arc<InputModuleItems>> {\n@@ -193,7 +193,7 @@ pub(crate) fn input_module_items(\n }\n \n pub(crate) fn item_map(\n-    db: &impl DescriptorDatabase,\n+    db: &impl HirDatabase,\n     source_root: SourceRootId,\n ) -> Cancelable<Arc<ItemMap>> {\n     let start = Instant::now();\n@@ -316,7 +316,7 @@ struct Resolver<'a, DB> {\n \n impl<'a, DB> Resolver<'a, DB>\n where\n-    DB: DescriptorDatabase,\n+    DB: HirDatabase,\n {\n     fn resolve(&mut self) -> Cancelable<()> {\n         for (&module_id, items) in self.input.iter() {\n@@ -447,7 +447,7 @@ mod tests {\n     use crate::{\n         AnalysisChange,\n         mock_analysis::{MockAnalysis, analysis_and_position},\n-        hir::{DescriptorDatabase, module::ModuleDescriptor},\n+        hir::{HirDatabase, module::ModuleDescriptor},\n         input::FilesDatabase,\n };\n     use super::*;"}, {"sha": "6dadc059f4bc7cc481685e3bb59f127cabf8b77f", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=f4d0cb64fc8b3010bdc4b168a2fa6d96a6cf90b1", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     hir::{\n         function::{FnDescriptor, FnId},\n         module::{ModuleDescriptor, Problem},\n-        DeclarationDescriptor, DescriptorDatabase,\n+        DeclarationDescriptor, HirDatabase,\n     },\n     input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n     symbol_index::SymbolIndex,"}]}