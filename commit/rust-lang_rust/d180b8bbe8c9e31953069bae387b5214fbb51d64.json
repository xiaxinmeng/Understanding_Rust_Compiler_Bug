{"sha": "d180b8bbe8c9e31953069bae387b5214fbb51d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODBiOGJiZThjOWUzMTk1MzA2OWJhZTM4N2I1MjE0ZmJiNTFkNjQ=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-10T12:50:27Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-10T12:50:27Z"}, "message": "Revert boxing for large enum variant", "tree": {"sha": "e0ad4602d20fbce320f763f19bf95ab5ec5649a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0ad4602d20fbce320f763f19bf95ab5ec5649a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d180b8bbe8c9e31953069bae387b5214fbb51d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d180b8bbe8c9e31953069bae387b5214fbb51d64", "html_url": "https://github.com/rust-lang/rust/commit/d180b8bbe8c9e31953069bae387b5214fbb51d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d180b8bbe8c9e31953069bae387b5214fbb51d64/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6344a7f362b19eaf71547766135ece160aa3389e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6344a7f362b19eaf71547766135ece160aa3389e", "html_url": "https://github.com/rust-lang/rust/commit/6344a7f362b19eaf71547766135ece160aa3389e"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "ec769459c15671835700ec30461a0737af0e48a1", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d180b8bbe8c9e31953069bae387b5214fbb51d64/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d180b8bbe8c9e31953069bae387b5214fbb51d64/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=d180b8bbe8c9e31953069bae387b5214fbb51d64", "patch": "@@ -106,9 +106,10 @@ struct FlycheckActor {\n     cargo_handle: Option<CargoHandle>,\n }\n \n+#[allow(clippy::large_enum_variant)]\n enum Event {\n     Restart(Restart),\n-    CheckEvent(Option<Box<cargo_metadata::Message>>),\n+    CheckEvent(Option<cargo_metadata::Message>),\n }\n \n impl FlycheckActor {\n@@ -123,7 +124,7 @@ impl FlycheckActor {\n         let check_chan = self.cargo_handle.as_ref().map(|cargo| &cargo.receiver);\n         select! {\n             recv(inbox) -> msg => msg.ok().map(Event::Restart),\n-            recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok().map(Box::new))),\n+            recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok())),\n         }\n     }\n     fn run(mut self, inbox: Receiver<Restart>) {\n@@ -149,7 +150,7 @@ impl FlycheckActor {\n                     let res = cargo_handle.join();\n                     self.send(Message::Progress(Progress::DidFinish(res)));\n                 }\n-                Event::CheckEvent(Some(message)) => match *message {\n+                Event::CheckEvent(Some(message)) => match message {\n                     cargo_metadata::Message::CompilerArtifact(msg) => {\n                         self.send(Message::Progress(Progress::DidCheckCrate(msg.target.name)));\n                     }"}]}