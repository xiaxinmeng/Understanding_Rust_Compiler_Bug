{"sha": "0252c304432ee50e45141c11a2f5f6e6cbbd1b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNTJjMzA0NDMyZWU1MGU0NTE0MWMxMWEyZjVmNmU2Y2JiZDFiM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T19:49:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T19:49:33Z"}, "message": "auto merge of #6658 : sanxiyn/rust/static-string-2, r=thestinger", "tree": {"sha": "64ea438e90555cdb4d867d3e8c008227006db2b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ea438e90555cdb4d867d3e8c008227006db2b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0252c304432ee50e45141c11a2f5f6e6cbbd1b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0252c304432ee50e45141c11a2f5f6e6cbbd1b3a", "html_url": "https://github.com/rust-lang/rust/commit/0252c304432ee50e45141c11a2f5f6e6cbbd1b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0252c304432ee50e45141c11a2f5f6e6cbbd1b3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73597a5bd5f7f3caba46e9e9369bf40881dbb619", "url": "https://api.github.com/repos/rust-lang/rust/commits/73597a5bd5f7f3caba46e9e9369bf40881dbb619", "html_url": "https://github.com/rust-lang/rust/commit/73597a5bd5f7f3caba46e9e9369bf40881dbb619"}, {"sha": "743e4b044c0ed6e6b323eff7e4d07299fa59e1fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/743e4b044c0ed6e6b323eff7e4d07299fa59e1fb", "html_url": "https://github.com/rust-lang/rust/commit/743e4b044c0ed6e6b323eff7e4d07299fa59e1fb"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "b5acdf8599c982259c36cfedadcb506eba36f8e4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0252c304432ee50e45141c11a2f5f6e6cbbd1b3a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0252c304432ee50e45141c11a2f5f6e6cbbd1b3a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0252c304432ee50e45141c11a2f5f6e6cbbd1b3a", "patch": "@@ -472,7 +472,7 @@ pub fn print_item(s: @ps, item: @ast::item) {\n     (s.ann.pre)(ann_node);\n     match item.node {\n       ast::item_const(ty, expr) => {\n-        head(s, visibility_qualified(item.vis, ~\"static\"));\n+        head(s, visibility_qualified(item.vis, \"static\"));\n         print_ident(s, item.ident);\n         word_space(s, \":\");\n         print_type(s, ty);\n@@ -500,15 +500,15 @@ pub fn print_item(s: @ps, item: @ast::item) {\n         print_block_with_attrs(s, body, item.attrs);\n       }\n       ast::item_mod(ref _mod) => {\n-        head(s, visibility_qualified(item.vis, ~\"mod\"));\n+        head(s, visibility_qualified(item.vis, \"mod\"));\n         print_ident(s, item.ident);\n         nbsp(s);\n         bopen(s);\n         print_mod(s, _mod, item.attrs);\n         bclose(s, item.span);\n       }\n       ast::item_foreign_mod(ref nmod) => {\n-        head(s, visibility_qualified(item.vis, ~\"extern\"));\n+        head(s, visibility_qualified(item.vis, \"extern\"));\n         word_nbsp(s, nmod.abis.to_str());\n         match nmod.sort {\n             ast::named => {\n@@ -525,7 +525,7 @@ pub fn print_item(s: @ps, item: @ast::item) {\n       ast::item_ty(ty, ref params) => {\n         ibox(s, indent_unit);\n         ibox(s, 0u);\n-        word_nbsp(s, visibility_qualified(item.vis, ~\"type\"));\n+        word_nbsp(s, visibility_qualified(item.vis, \"type\"));\n         print_ident(s, item.ident);\n         print_generics(s, params);\n         end(s); // end the inner ibox\n@@ -547,12 +547,12 @@ pub fn print_item(s: @ps, item: @ast::item) {\n         );\n       }\n       ast::item_struct(struct_def, ref generics) => {\n-          head(s, visibility_qualified(item.vis, ~\"struct\"));\n+          head(s, visibility_qualified(item.vis, \"struct\"));\n           print_struct(s, struct_def, generics, item.ident, item.span);\n       }\n \n       ast::item_impl(ref generics, opt_trait, ty, ref methods) => {\n-        head(s, visibility_qualified(item.vis, ~\"impl\"));\n+        head(s, visibility_qualified(item.vis, \"impl\"));\n         if generics.is_parameterized() {\n             print_generics(s, generics);\n             space(s.s);\n@@ -581,7 +581,7 @@ pub fn print_item(s: @ps, item: @ast::item) {\n         }\n       }\n       ast::item_trait(ref generics, ref traits, ref methods) => {\n-        head(s, visibility_qualified(item.vis, ~\"trait\"));\n+        head(s, visibility_qualified(item.vis, \"trait\"));\n         print_ident(s, item.ident);\n         print_generics(s, generics);\n         if traits.len() != 0u {\n@@ -624,7 +624,7 @@ fn print_trait_ref(s: @ps, t: &ast::trait_ref) {\n pub fn print_enum_def(s: @ps, enum_definition: &ast::enum_def,\n                       generics: &ast::Generics, ident: ast::ident,\n                       span: codemap::span, visibility: ast::visibility) {\n-    head(s, visibility_qualified(visibility, ~\"enum\"));\n+    head(s, visibility_qualified(visibility, \"enum\"));\n     print_ident(s, ident);\n     print_generics(s, generics);\n     space(s.s);\n@@ -656,10 +656,10 @@ pub fn visibility_to_str(vis: ast::visibility) -> ~str {\n     }\n }\n \n-pub fn visibility_qualified(vis: ast::visibility, s: ~str) -> ~str {\n+pub fn visibility_qualified(vis: ast::visibility, s: &str) -> ~str {\n     match vis {\n         ast::private | ast::public => visibility_to_str(vis) + \" \" + s,\n-        ast::inherited => copy s\n+        ast::inherited => s.to_owned()\n     }\n }\n \n@@ -2169,7 +2169,7 @@ pub fn print_fn_header_info(s: @ps,\n                             onceness: ast::Onceness,\n                             opt_sigil: Option<ast::Sigil>,\n                             vis: ast::visibility) {\n-    word(s.s, visibility_qualified(vis, ~\"\"));\n+    word(s.s, visibility_qualified(vis, \"\"));\n \n     if abis != AbiSet::Rust() {\n         word_nbsp(s, \"extern\");"}]}