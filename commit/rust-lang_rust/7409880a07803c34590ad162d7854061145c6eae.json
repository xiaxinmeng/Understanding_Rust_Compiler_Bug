{"sha": "7409880a07803c34590ad162d7854061145c6eae", "node_id": "C_kwDOAAsO6NoAKDc0MDk4ODBhMDc4MDNjMzQ1OTBhZDE2MmQ3ODU0MDYxMTQ1YzZlYWU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-03T17:59:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-03T17:59:00Z"}, "message": "Merge #11061\n\n11061: Support \"move if to guard\" for if else chains r=weirane a=weirane\n\nThe idea is to first parse the if else chain into a vector of `(Condition, BlockExpr)`s until we reach an iflet branch, an else branch, or the end (the tail). Then add the match arms with guard for the vector, and add the tail with no if guard.\r\n\r\nBecause the whole original match arm is replaced and the generated code doesn't have redundent commas, I removed redundent commas in some test cases.\r\n\r\nCloses #11033.\n\nCo-authored-by: Wang Ruochen <wrc@ruo-chen.wang>", "tree": {"sha": "a1a175253b7281520c5351cf0d73f8b41af4346f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a175253b7281520c5351cf0d73f8b41af4346f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7409880a07803c34590ad162d7854061145c6eae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0zlkCRBK7hj4Ov3rIwAAvV0IAEU2M7Ij9EMp2JEXaArnt807\njKY2WzDif5at6SbRGyf9ENx97WvxM9d0ZKcaWy/LhoSj/G2QApKxGtwDba8uaQ6h\nPP0vgluV8rA47v8maQabUQDrvhcmHbysrGsJtMsBy+KUPsFQnImk8SeCy19wQGBz\nj2dw/1Wacytj1FXKtsphCEFAdN16KGvk7flXBX/GKCmX6SOkOZmuUtELNYtt3xjU\nAjsXE2DHNCTdawsNp9zqg4ZQ72+C0HXECyrGQ+QN/Jm8wN68qSAxHiXWQgAJiUUK\nMd1ZjNpSdRGNQS4bqfIHHZPaldGSsQH/5NEeyNKMZxJVYij7qyH1bDsj3kNdfmk=\n=Ez40\n-----END PGP SIGNATURE-----\n", "payload": "tree a1a175253b7281520c5351cf0d73f8b41af4346f\nparent b14af5cc6fa9bd704b49091fc290892908e773c6\nparent 95145d5ab6c734ea8ca5e66a94ad381b9e897000\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641232740 +0000\ncommitter GitHub <noreply@github.com> 1641232740 +0000\n\nMerge #11061\n\n11061: Support \"move if to guard\" for if else chains r=weirane a=weirane\n\nThe idea is to first parse the if else chain into a vector of `(Condition, BlockExpr)`s until we reach an iflet branch, an else branch, or the end (the tail). Then add the match arms with guard for the vector, and add the tail with no if guard.\r\n\r\nBecause the whole original match arm is replaced and the generated code doesn't have redundent commas, I removed redundent commas in some test cases.\r\n\r\nCloses #11033.\n\nCo-authored-by: Wang Ruochen <wrc@ruo-chen.wang>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7409880a07803c34590ad162d7854061145c6eae", "html_url": "https://github.com/rust-lang/rust/commit/7409880a07803c34590ad162d7854061145c6eae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7409880a07803c34590ad162d7854061145c6eae/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14af5cc6fa9bd704b49091fc290892908e773c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14af5cc6fa9bd704b49091fc290892908e773c6", "html_url": "https://github.com/rust-lang/rust/commit/b14af5cc6fa9bd704b49091fc290892908e773c6"}, {"sha": "95145d5ab6c734ea8ca5e66a94ad381b9e897000", "url": "https://api.github.com/repos/rust-lang/rust/commits/95145d5ab6c734ea8ca5e66a94ad381b9e897000", "html_url": "https://github.com/rust-lang/rust/commit/95145d5ab6c734ea8ca5e66a94ad381b9e897000"}], "stats": {"total": 371, "additions": 317, "deletions": 54}, "files": [{"sha": "366f308f6eff4743fede883d1e2c190e69951f79", "filename": "crates/ide_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 317, "deletions": 54, "changes": 371, "blob_url": "https://github.com/rust-lang/rust/blob/7409880a07803c34590ad162d7854061145c6eae/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7409880a07803c34590ad162d7854061145c6eae/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=7409880a07803c34590ad162d7854061145c6eae", "patch": "@@ -1,7 +1,9 @@\n use syntax::{\n-    ast::{edit::AstNodeEdit, make, AstNode, BlockExpr, ElseBranch, Expr, IfExpr, MatchArm},\n-    NodeOrToken,\n-    SyntaxKind::{COMMA, WHITESPACE},\n+    ast::{\n+        edit::AstNodeEdit, make, AstNode, BlockExpr, Condition, ElseBranch, Expr, IfExpr, MatchArm,\n+        Pat,\n+    },\n+    SyntaxKind::WHITESPACE,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -115,73 +117,107 @@ pub(crate) fn move_arm_cond_to_match_guard(acc: &mut Assists, ctx: &AssistContex\n         }\n     })?;\n     let replace_node = replace_node.unwrap_or_else(|| if_expr.syntax().clone());\n-\n-    let cond = if_expr.condition()?;\n-    let then_block = if_expr.then_branch()?;\n-\n-    // Not support moving if let to arm guard\n-    if cond.is_pattern_cond() {\n-        return None;\n-    }\n-\n-    let buf = format!(\" if {}\", cond.syntax().text());\n+    let needs_dedent = replace_node != *if_expr.syntax();\n+    let (conds_blocks, tail) = parse_if_chain(if_expr)?;\n \n     acc.add(\n         AssistId(\"move_arm_cond_to_match_guard\", AssistKind::RefactorRewrite),\n         \"Move condition to match guard\",\n         replace_node.text_range(),\n         |edit| {\n-            let then_only_expr = then_block.statements().next().is_none();\n-\n-            match &then_block.tail_expr() {\n-                Some(then_expr) if then_only_expr => {\n-                    edit.replace(replace_node.text_range(), then_expr.syntax().text());\n-                    // Insert comma for expression if there isn't one\n-                    match match_arm.syntax().last_child_or_token() {\n-                        Some(NodeOrToken::Token(t)) if t.kind() == COMMA => {}\n-                        _ => {\n-                            cov_mark::hit!(move_guard_if_add_comma);\n-                            edit.insert(match_arm.syntax().text_range().end(), \",\");\n-                        }\n-                    }\n+            edit.delete(match_arm.syntax().text_range());\n+            // Dedent if if_expr is in a BlockExpr\n+            let dedent = if needs_dedent {\n+                cov_mark::hit!(move_guard_ifelse_in_block);\n+                1\n+            } else {\n+                cov_mark::hit!(move_guard_ifelse_else_block);\n+                0\n+            };\n+            let then_arm_end = match_arm.syntax().text_range().end();\n+            let indent_level = match_arm.indent_level();\n+            let spaces = \"    \".repeat(indent_level.0 as _);\n+\n+            let mut first = true;\n+            for (cond, block) in conds_blocks {\n+                if !first {\n+                    edit.insert(then_arm_end, format!(\"\\n{}\", spaces));\n+                } else {\n+                    first = false;\n                 }\n-                _ if replace_node != *if_expr.syntax() => {\n-                    // Dedent because if_expr is in a BlockExpr\n-                    let replace_with = then_block.dedent(1.into()).syntax().text();\n-                    edit.replace(replace_node.text_range(), replace_with)\n+                let guard = format!(\"{} if {} => \", match_pat, cond.syntax().text());\n+                edit.insert(then_arm_end, guard);\n+                let only_expr = block.statements().next().is_none();\n+                match &block.tail_expr() {\n+                    Some(then_expr) if only_expr => {\n+                        edit.insert(then_arm_end, then_expr.syntax().text());\n+                        edit.insert(then_arm_end, \",\");\n+                    }\n+                    _ => {\n+                        let to_insert = block.dedent(dedent.into()).syntax().text();\n+                        edit.insert(then_arm_end, to_insert)\n+                    }\n                 }\n-                _ => edit.replace(replace_node.text_range(), then_block.syntax().text()),\n             }\n-\n-            edit.insert(match_pat.syntax().text_range().end(), buf);\n-\n-            // If with only an else branch\n-            if let Some(ElseBranch::Block(else_block)) = if_expr.else_branch() {\n-                let then_arm_end = match_arm.syntax().text_range().end();\n-                let else_only_expr = else_block.statements().next().is_none();\n-                let indent_level = match_arm.indent_level();\n-                let spaces = \"    \".repeat(indent_level.0 as _);\n-                edit.insert(then_arm_end, format!(\"\\n{}{} => \", spaces, match_pat));\n-                match &else_block.tail_expr() {\n-                    Some(else_expr) if else_only_expr => {\n+            if let Some(e) = tail {\n+                cov_mark::hit!(move_guard_ifelse_else_tail);\n+                let guard = format!(\"\\n{}{} => \", spaces, match_pat);\n+                edit.insert(then_arm_end, guard);\n+                let only_expr = e.statements().next().is_none();\n+                match &e.tail_expr() {\n+                    Some(expr) if only_expr => {\n                         cov_mark::hit!(move_guard_ifelse_expr_only);\n-                        edit.insert(then_arm_end, else_expr.syntax().text());\n+                        edit.insert(then_arm_end, expr.syntax().text());\n                         edit.insert(then_arm_end, \",\");\n                     }\n-                    _ if replace_node != *if_expr.syntax() => {\n-                        cov_mark::hit!(move_guard_ifelse_in_block);\n-                        edit.insert(then_arm_end, else_block.dedent(1.into()).syntax().text());\n-                    }\n                     _ => {\n-                        cov_mark::hit!(move_guard_ifelse_else_block);\n-                        edit.insert(then_arm_end, else_block.syntax().text());\n+                        let to_insert = e.dedent(dedent.into()).syntax().text();\n+                        edit.insert(then_arm_end, to_insert)\n+                    }\n+                }\n+            } else {\n+                // There's no else branch. Add a pattern without guard, unless the following match\n+                // arm is `_ => ...`\n+                cov_mark::hit!(move_guard_ifelse_notail);\n+                match match_arm.syntax().next_sibling().and_then(MatchArm::cast) {\n+                    Some(next_arm)\n+                        if matches!(next_arm.pat(), Some(Pat::WildcardPat(_)))\n+                            && next_arm.guard().is_none() =>\n+                    {\n+                        cov_mark::hit!(move_guard_ifelse_has_wildcard);\n                     }\n+                    _ => edit.insert(then_arm_end, format!(\"\\n{}{} => {{}}\", spaces, match_pat)),\n                 }\n             }\n         },\n     )\n }\n \n+// Parses an if-else-if chain to get the conditons and the then branches until we encounter an else\n+// branch or the end.\n+fn parse_if_chain(if_expr: IfExpr) -> Option<(Vec<(Condition, BlockExpr)>, Option<BlockExpr>)> {\n+    let mut conds_blocks = Vec::new();\n+    let mut curr_if = if_expr;\n+    let tail = loop {\n+        let cond = curr_if.condition()?;\n+        // Not support moving if let to arm guard\n+        if cond.is_pattern_cond() {\n+            return None;\n+        }\n+        conds_blocks.push((cond, curr_if.then_branch()?));\n+        match curr_if.else_branch() {\n+            Some(ElseBranch::IfExpr(e)) => {\n+                curr_if = e;\n+            }\n+            Some(ElseBranch::Block(b)) => {\n+                break Some(b);\n+            }\n+            None => break None,\n+        }\n+    };\n+    Some((conds_blocks, tail))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -294,6 +330,7 @@ fn main() {\n \n     #[test]\n     fn move_arm_cond_in_block_to_match_guard_works() {\n+        cov_mark::check!(move_guard_ifelse_has_wildcard);\n         check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n@@ -319,9 +356,64 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn move_arm_cond_in_block_to_match_guard_no_wildcard_works() {\n+        cov_mark::check_count!(move_guard_ifelse_has_wildcard, 0);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            $0if x > 10 {\n+                false\n+            }\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => {}\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_in_block_to_match_guard_wildcard_guard_works() {\n+        cov_mark::check_count!(move_guard_ifelse_has_wildcard, 0);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x => {\n+            $0if x > 10 {\n+                false\n+            }\n+        }\n+        _ if x > 10 => true,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        x if x > 10 => false,\n+        x => {}\n+        _ if x > 10 => true,\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn move_arm_cond_in_block_to_match_guard_add_comma_works() {\n-        cov_mark::check!(move_guard_if_add_comma);\n         check_assist(\n             move_arm_cond_to_match_guard,\n             r#\"\n@@ -377,7 +469,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        x if x > 10 => {  },\n+        x if x > 10 => {  }\n         _ => true\n     }\n }\n@@ -406,7 +498,7 @@ fn main() {\n         x if x > 10 => {\n             92;\n             false\n-        },\n+        }\n         _ => true\n     }\n }\n@@ -519,7 +611,7 @@ fn main() {\n             r#\"\n fn main() {\n     match 92 {\n-        x if x > 10 => {  },\n+        x if x > 10 => {  }\n         x => { }\n         _ => true\n     }\n@@ -690,6 +782,177 @@ fn main() {\n         }\n     }\n }\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_elseif() {\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x => if x > 10 {$0\n+            false\n+        } else if x > 5 {\n+            true\n+        } else if x > 4 {\n+            false\n+        } else {\n+            true\n+        },\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x if x > 10 => false,\n+        x if x > 5 => true,\n+        x if x > 4 => false,\n+        x => true,\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_elseif_in_block() {\n+        cov_mark::check!(move_guard_ifelse_in_block);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x => {\n+            if x > 10 {$0\n+                false\n+            } else if x > 5 {\n+                true\n+            } else if x > 4 {\n+                false\n+            } else {\n+                true\n+            }\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => true,\n+        x if x > 10 => false,\n+        x if x > 5 => true,\n+        x if x > 4 => false,\n+        x => true,\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_elseif_chain() {\n+        cov_mark::check!(move_guard_ifelse_else_tail);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => 0,\n+        x => if x > 10 {$0\n+            1\n+        } else if x > 5 {\n+            2\n+        } else if x > 3 {\n+            42;\n+            3\n+        } else {\n+            4\n+        },\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => 0,\n+        x if x > 10 => 1,\n+        x if x > 5 => 2,\n+        x if x > 3 => {\n+            42;\n+            3\n+        }\n+        x => 4,\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_elseif_iflet() {\n+        check_assist_not_applicable(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => 0,\n+        x => if x > 10 {$0\n+            1\n+        } else if x > 5 {\n+            2\n+        } else if let 4 = 4 {\n+            42;\n+            3\n+        } else {\n+            4\n+        },\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn move_arm_cond_to_match_guard_elseif_notail() {\n+        cov_mark::check!(move_guard_ifelse_notail);\n+        check_assist(\n+            move_arm_cond_to_match_guard,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => 0,\n+        x => if x > 10 {$0\n+            1\n+        } else if x > 5 {\n+            2\n+        } else if x > 4 {\n+            42;\n+            3\n+        },\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    match 92 {\n+        3 => 0,\n+        x if x > 10 => 1,\n+        x if x > 5 => 2,\n+        x if x > 4 => {\n+            42;\n+            3\n+        }\n+        x => {}\n+    }\n+}\n \"#,\n         )\n     }"}]}