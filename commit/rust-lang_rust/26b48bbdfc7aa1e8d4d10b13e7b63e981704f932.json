{"sha": "26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YjQ4YmJkZmM3YWExZThkNGQxMGIxM2U3YjYzZTk4MTcwNGY5MzI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-05-13T08:44:57Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-05-13T08:44:57Z"}, "message": "Rustup to 2018-05-13", "tree": {"sha": "b9f913f29565916a443c43ebcf91f381e9a46bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9f913f29565916a443c43ebcf91f381e9a46bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa9/sWAAoJELb6Bqbg4mZbPtMP/AwsRqY+W8qUE9ZQmIHA3GAF\nhx6Cu7qUi+8bX2egUs79RtTMg+tdjsnkPUMUccRPdhFf7o1NUj5mavHu95SP2Vq5\nSmF7iV/XSNqiQQW1xk15Mebvy2m4FqEKbowaLkmX+HLLKQ9uHPi3GyC0axuwj+AT\nEHhOwfuBMLhA7Pdi//G0o5rpsGRny7qRyu24+CeYFc8zBHpsnDNh04kqhEagV4AH\nLflWvcvlVoRIxuJtZiB89kzLewf9f62/Dyzo++Ep0trEJwxzpTi1JBoJErsXkg8Q\n02rGVE7sO5ZSvb4O1EX2jnVj85838D5ade9xqEGcF9hRNbT4yGiBeBrNB9hAc2Be\nVGE96dcrmM2WSieerIK/e+rZZsDi6uD4lEp/x7naTYbH/mvLUgBAXlTyQPW22hhY\nM5/Ml9CwE3Y01el5CUGbLn1NkvuPr6A5Z+Z6rL2BSE4xbex62+EoeQfl4V6zmyTF\nz3wnE8fweZrpkXG80b+uMPk4XSRbQPB5pu8dfRmdYYh83Xk38XjVkTQnbitCW04o\nUkZoaLH4lUVECYyxjnF6ffX6i0MHUFxNnBbrWjdycCekWZKB9yabOz+dGN4ZFdNp\njtwsa8UwBoPRV+B36CnfSHQXK6afftl8SYL4GN8lds7Whl8is+049Xjd3FwE+CAX\nYnmbIl4P3Y8viz1lTmDQ\n=tJT0\n-----END PGP SIGNATURE-----", "payload": "tree b9f913f29565916a443c43ebcf91f381e9a46bbb\nparent 18a5b90242218df7abd6473cbee456a9dcfd32a0\nauthor Philipp Hansch <dev@phansch.net> 1526201097 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1526201097 +0200\n\nRustup to 2018-05-13\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "html_url": "https://github.com/rust-lang/rust/commit/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a5b90242218df7abd6473cbee456a9dcfd32a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a5b90242218df7abd6473cbee456a9dcfd32a0", "html_url": "https://github.com/rust-lang/rust/commit/18a5b90242218df7abd6473cbee456a9dcfd32a0"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b51a9209c4cf79da8449aab77a60a6b193b5da59", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             // Array with known size can be checked statically\n             let ty = cx.tables.expr_ty(array);\n             if let ty::TyArray(_, size) = ty.sty {\n-                let size = size.val.to_raw_bits().unwrap();\n+                let size = size.assert_usize(cx.tcx).unwrap().into();\n \n                 // Index is a constant uint\n                 if let Some((Constant::Int(const_index), _)) = constant(cx, index) {"}, {"sha": "a078fde47903744a0610081335668e5bd29089e0", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "patch": "@@ -209,7 +209,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprTup(ref tup) => self.multi(tup).map(Constant::Tuple),\n             ExprRepeat(ref value, _) => {\n                 let n = match self.tables.expr_ty(e).sty {\n-                    ty::TyArray(_, n) => n.val.to_raw_bits().expect(\"array length\"),\n+                    ty::TyArray(_, n) => n.assert_usize(self.tcx).expect(\"array length\"),\n                     _ => span_bug!(e.span, \"typeck error\"),\n                 };\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n as u64))\n@@ -415,17 +415,17 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n }\n \n pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'tcx>) -> Option<Constant> {\n-    use rustc::mir::interpret::{Value, PrimVal};\n+    use rustc::mir::interpret::{PrimVal, ConstValue};\n     match result.val {\n-        ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))) => match result.ty.sty {\n+        ConstVal::Value(ConstValue::ByVal(PrimVal::Bytes(b))) => match result.ty.sty {\n             ty::TyBool => Some(Constant::Bool(b == 1)),\n             ty::TyUint(_) | ty::TyInt(_) => Some(Constant::Int(b)),\n             ty::TyFloat(FloatTy::F32) => Some(Constant::F32(f32::from_bits(b as u32))),\n             ty::TyFloat(FloatTy::F64) => Some(Constant::F64(f64::from_bits(b as u64))),\n             // FIXME: implement other conversion\n             _ => None,\n         },\n-        ConstVal::Value(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::Bytes(n))) => match result.ty.sty {\n+        ConstVal::Value(ConstValue::ByValPair(PrimVal::Ptr(ptr), PrimVal::Bytes(n))) => match result.ty.sty {\n             ty::TyRef(_, tam, _) => match tam.sty {\n                 ty::TyStr => {\n                     let alloc = tcx"}, {"sha": "a7ca0d27e17b5e5b5cebacd0859413f07de64dca", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "patch": "@@ -1223,7 +1223,7 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                     match cx.tables.expr_ty(&args[0]).sty {\n                         // If the length is greater than 32 no traits are implemented for array and\n                         // therefore we cannot use `&`.\n-                        ty::TypeVariants::TyArray(_, size) if size.val.to_raw_bits().expect(\"array size\") > 32 => (),\n+                        ty::TypeVariants::TyArray(_, size) if size.assert_usize(cx.tcx).expect(\"array size\") > 32 => (),\n                         _ => lint_iter_method(cx, args, arg, method_name),\n                     };\n                 } else {\n@@ -1784,7 +1784,7 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n     // no walk_ptrs_ty: calling iter() on a reference can make sense because it\n     // will allow further borrows afterwards\n     let ty = cx.tables.expr_ty(e);\n-    is_iterable_array(ty) ||\n+    is_iterable_array(ty, cx) ||\n     match_type(cx, ty, &paths::VEC) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n     match_type(cx, ty, &paths::HASHMAP) ||\n@@ -1795,10 +1795,10 @@ fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n     match_type(cx, ty, &paths::BTREESET)\n }\n \n-fn is_iterable_array(ty: Ty) -> bool {\n+fn is_iterable_array(ty: Ty, cx: &LateContext) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.sty {\n-        ty::TyArray(_, n) => (0..=32).contains(&n.val.to_raw_bits().expect(\"array length\")),\n+        ty::TyArray(_, n) => (0..=32).contains(&n.assert_usize(cx.tcx).expect(\"array length\")),\n         _ => false,\n     }\n }"}, {"sha": "c7702e6bced2f67ad40e2d05b9709292d4d5b557", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b48bbdfc7aa1e8d4d10b13e7b63e981704f932/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=26b48bbdfc7aa1e8d4d10b13e7b63e981704f932", "patch": "@@ -1299,7 +1299,7 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: Ty) -> Option<sugg::S\n             ty::TySlice(_) => true,\n             ty::TyAdt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::TyAdt(..) => match_type(cx, ty, &paths::VEC),\n-            ty::TyArray(_, size) => size.val.to_raw_bits().expect(\"array length\") < 32,\n+            ty::TyArray(_, size) => size.assert_usize(cx.tcx).expect(\"array length\") < 32,\n             ty::TyRef(_, inner, _) => may_slice(cx, inner),\n             _ => false,\n         }"}]}