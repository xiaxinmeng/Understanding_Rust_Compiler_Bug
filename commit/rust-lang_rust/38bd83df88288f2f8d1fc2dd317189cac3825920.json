{"sha": "38bd83df88288f2f8d1fc2dd317189cac3825920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YmQ4M2RmODgyODhmMmY4ZDFmYzJkZDMxNzE4OWNhYzM4MjU5MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-21T05:56:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-21T05:56:26Z"}, "message": "Auto merge of #71911 - wesleywiser:const_prop_small_cleanups, r=oli-obk\n\n[mir-opt] Small ConstProp cleanup", "tree": {"sha": "1e5a48e5564453fd42a80a5d5976ec7244a0e3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e5a48e5564453fd42a80a5d5976ec7244a0e3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bd83df88288f2f8d1fc2dd317189cac3825920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd83df88288f2f8d1fc2dd317189cac3825920", "html_url": "https://github.com/rust-lang/rust/commit/38bd83df88288f2f8d1fc2dd317189cac3825920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bd83df88288f2f8d1fc2dd317189cac3825920/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "228a0ed7b0cef2fbfeb781acf6c23015ccc40ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/228a0ed7b0cef2fbfeb781acf6c23015ccc40ba2", "html_url": "https://github.com/rust-lang/rust/commit/228a0ed7b0cef2fbfeb781acf6c23015ccc40ba2"}, {"sha": "2f49d554ff1afd1633a01d6b84192ad0147d9097", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f49d554ff1afd1633a01d6b84192ad0147d9097", "html_url": "https://github.com/rust-lang/rust/commit/2f49d554ff1afd1633a01d6b84192ad0147d9097"}], "stats": {"total": 133, "additions": 88, "deletions": 45}, "files": [{"sha": "529e63ab96791f4013cecaeacfc6442d76370778", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -716,8 +716,6 @@ enum ConstPropMode {\n     OnlyInsideOwnBlock,\n     /// The `Local` can be propagated into but reads cannot be propagated.\n     OnlyPropagateInto,\n-    /// No propagation is allowed at all.\n-    NoPropagation,\n }\n \n struct CanConstProp {\n@@ -788,7 +786,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n                                 \"local {:?} can't be propagated because of multiple assignments\",\n                                 local,\n                             );\n-                            *other = ConstPropMode::NoPropagation;\n+                            *other = ConstPropMode::OnlyPropagateInto;\n                         }\n                     }\n                 }\n@@ -815,7 +813,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             | MutatingUse(MutatingUseContext::Borrow)\n             | MutatingUse(MutatingUseContext::AddressOf) => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n-                self.can_const_prop[local] = ConstPropMode::NoPropagation;\n+                self.can_const_prop[local] = ConstPropMode::OnlyPropagateInto;\n             }\n         }\n     }\n@@ -847,31 +845,28 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n                 let can_const_prop = self.can_const_prop[place.local];\n                 if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                    if can_const_prop != ConstPropMode::NoPropagation {\n-                        // This will return None for variables that are from other blocks,\n-                        // so it should be okay to propagate from here on down.\n-                        if let Some(value) = self.get_const(place) {\n-                            if self.should_const_prop(value) {\n-                                trace!(\"replacing {:?} with {:?}\", rval, value);\n-                                self.replace_with_const(rval, value, source_info);\n-                                if can_const_prop == ConstPropMode::FullConstProp\n-                                    || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n-                                {\n-                                    trace!(\"propagated into {:?}\", place);\n-                                }\n-                            }\n-                            if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n-                                trace!(\n-                                    \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n-                                    place.local\n-                                );\n-                                self.locals_of_current_block.insert(place.local);\n+                    // This will return None for variables that are from other blocks,\n+                    // so it should be okay to propagate from here on down.\n+                    if let Some(value) = self.get_const(place) {\n+                        if self.should_const_prop(value) {\n+                            trace!(\"replacing {:?} with {:?}\", rval, value);\n+                            self.replace_with_const(rval, value, source_info);\n+                            if can_const_prop == ConstPropMode::FullConstProp\n+                                || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n+                            {\n+                                trace!(\"propagated into {:?}\", place);\n                             }\n                         }\n                     }\n-                    if can_const_prop == ConstPropMode::OnlyPropagateInto\n-                        || can_const_prop == ConstPropMode::NoPropagation\n-                    {\n+                    if can_const_prop == ConstPropMode::OnlyInsideOwnBlock {\n+                        trace!(\n+                            \"found local restricted to its block. Will remove it from const-prop after block is finished. Local: {:?}\",\n+                            place.local\n+                        );\n+                        self.locals_of_current_block.insert(place.local);\n+                    }\n+\n+                    if can_const_prop == ConstPropMode::OnlyPropagateInto {\n                         trace!(\"can't propagate into {:?}\", place);\n                         if place.local != RETURN_PLACE {\n                             Self::remove_const(&mut self.ecx, place.local);"}, {"sha": "0d703068d41f4069dc8e1dfdc1959b277a5b4882", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref/rustc.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref%2Frustc.main.ConstProp.diff?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -23,13 +23,15 @@\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n+-                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n++                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002b))\n                                            // mir::Constant\n-                                           // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n+-                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:22: 5:24\n++                                          // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:9: 6:10\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:6:13: 6:19"}, {"sha": "94759dca038b1cd2fb5ef9ab309449320daa0bd0", "filename": "src/test/mir-opt/simplify-arm-identity/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -39,14 +39,13 @@\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          _2 = const Dst::Foo(0u8);        // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n-                                           // + ty: u8\n+                                           // + ty: Dst\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }\n   "}, {"sha": "ba21f16b685d402450d04188bdf29b9b91099570", "filename": "src/test/mir-opt/simplify-arm-identity/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -39,14 +39,13 @@\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          _2 = const Dst::Foo(0u8);        // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n-                                           // + ty: u8\n+                                           // + ty: Dst\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:21: 21:32\n+                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }\n   "}, {"sha": "e7373391b79c77f4b8476baaaacd3f48f57b1286", "filename": "src/test/mir-opt/simplify-arm-identity/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity%2Frustc.main.SimplifyArmIdentity.diff?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -33,15 +33,14 @@\n       }\n   \n       bb1: {\n-          ((_2 as Foo).0: u8) = const 0u8; // scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n+          _2 = const Dst::Foo(0u8);        // bb1[0]: scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n                                            // ty::Const\n-                                           // + ty: u8\n+                                           // + ty: Dst\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:20:30: 20:31\n-                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:20:21: 20:32\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n+                                           // + span: $DIR/simplify-arm-identity.rs:20:21: 20:32\n+                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n+          goto -> bb4;                     // bb1[1]: scope 1 at $DIR/simplify-arm-identity.rs:18:18: 21:6\n       }\n   \n       bb2: {"}, {"sha": "7047b542aa6077ec88b7a2b9f5d9f88129df3605", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -9,4 +9,5 @@ fn main() {\n     map(None);\n }\n \n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.map.SimplifyLocals.diff"}, {"sha": "2f78671763d51601ebaf2c7d7f7e7ef19288abee", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "renamed", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -24,7 +24,13 @@\n       }\n   \n       bb2: {\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+          _0 = const std::option::Option::<std::boxed::Box<()>>::None; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+                                           // ty::Const\n+                                           // + ty: std::option::Option<std::boxed::Box<()>>\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+                                           // + literal: Const { ty: std::option::Option<std::boxed::Box<()>>, val: Value(Scalar(0x00000000)) }\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   ", "previous_filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/rustc.map.SimplifyLocals.diff"}, {"sha": "a97fa98a7b09e466caaa10dda0646331fecea640", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38bd83df88288f2f8d1fc2dd317189cac3825920/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=38bd83df88288f2f8d1fc2dd317189cac3825920", "patch": "@@ -0,0 +1,42 @@\n+- // MIR for `map` before SimplifyLocals\n++ // MIR for `map` after SimplifyLocals\n+  \n+  fn map(_1: std::option::Option<std::boxed::Box<()>>) -> std::option::Option<std::boxed::Box<()>> {\n+      debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n+      let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n+      let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n+-     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+      scope 1 {\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+      }\n+  \n+      bb0: {\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+          switchInt(move _2) -> [0isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+      }\n+  \n+      bb1: {\n+          _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:20: 4:27\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+      }\n+  \n+      bb2: {\n+          _0 = const std::option::Option::<std::boxed::Box<()>>::None; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+                                           // ty::Const\n+                                           // + ty: std::option::Option<std::boxed::Box<()>>\n+                                           // + val: Value(Scalar(0x0000000000000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n+                                           // + literal: Const { ty: std::option::Option<std::boxed::Box<()>>, val: Value(Scalar(0x0000000000000000)) }\n+          goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n+      }\n+  \n+      bb3: {\n+-         _5 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+          return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n+      }\n+  }\n+  "}]}