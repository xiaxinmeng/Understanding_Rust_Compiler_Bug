{"sha": "48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "node_id": "C_kwDOAAsO6NoAKDQ4YjAxYTBkMGUwN2FlNmEwZGNiNjhjYTNkMzAxMzBhNDM5OTNmYzI", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-11T10:04:53Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-04-11T13:26:26Z"}, "message": "Add new `MutatatingUseContext`s for deinit and `SetDiscriminant`", "tree": {"sha": "8f637fc2ecc971d83df9a6e49bcacd1973e07ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f637fc2ecc971d83df9a6e49bcacd1973e07ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "html_url": "https://github.com/rust-lang/rust/commit/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7ca97a209411ccd34f8e536b47d1027236121d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ca97a209411ccd34f8e536b47d1027236121d3", "html_url": "https://github.com/rust-lang/rust/commit/f7ca97a209411ccd34f8e536b47d1027236121d3"}], "stats": {"total": 98, "additions": 57, "deletions": 41}, "files": [{"sha": "a5c0d77429de82d7f0812c58efd06ffbd1d75f77", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -72,5 +72,9 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n \n         // Debug info is neither def nor use.\n         PlaceContext::NonUse(NonUseContext::VarDebugInfo) => None,\n+\n+        PlaceContext::MutatingUse(MutatingUseContext::Deinit | MutatingUseContext::SetDiscriminant) => {\n+            bug!(\"These statements are not allowed in this MIR phase\")\n+        }\n     }\n }"}, {"sha": "efb424af3ed952f46bc50c0e7f99229384a0293e", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -211,6 +211,8 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n+                | MutatingUseContext::Deinit\n+                | MutatingUseContext::SetDiscriminant\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::AddressOf"}, {"sha": "45b1ad6df8226f2118742f4c7f6e9264f99b9642", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -395,14 +395,14 @@ macro_rules! make_mir_visitor {\n                     StatementKind::SetDiscriminant { place, .. } => {\n                         self.visit_place(\n                             place,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            PlaceContext::MutatingUse(MutatingUseContext::SetDiscriminant),\n                             location\n                         );\n                     }\n                     StatementKind::Deinit(place) => {\n                         self.visit_place(\n                             place,\n-                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            PlaceContext::MutatingUse(MutatingUseContext::Deinit),\n                             location\n                         )\n                     }\n@@ -1181,6 +1181,10 @@ pub enum NonMutatingUseContext {\n pub enum MutatingUseContext {\n     /// Appears as LHS of an assignment.\n     Store,\n+    /// Appears on `SetDiscriminant`\n+    SetDiscriminant,\n+    /// Appears on `Deinit`\n+    Deinit,\n     /// Output operand of an inline assembly block.\n     AsmOutput,\n     /// Destination of a call."}, {"sha": "584ab9718ed65121cc5aafd62ef3e0aff2e7f79b", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -77,6 +77,10 @@ impl<T> Visitor<'_> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {\n+    // FIXME: Using `visit_local` here is a bug. For example, on `move _5.field` we mark `_5` as\n+    // deinitialized, although clearly it is only partially deinitialized. This analysis is not\n+    // actually used anywhere at the moment, so this is not critical, but this does need to be fixed\n+    // before it starts being used again.\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, NonUseContext};\n         match context {\n@@ -87,6 +91,9 @@ where\n                 | MutatingUseContext::Yield,\n             ) => {}\n \n+            // If it's deinitialized, it's no longer init\n+            PlaceContext::MutatingUse(MutatingUseContext::Deinit) => self.trans.kill(local),\n+\n             // Otherwise, when a place is mutated, we must consider it possibly initialized.\n             PlaceContext::MutatingUse(_) => self.trans.gen(local),\n "}, {"sha": "5a788c153a477efeeae3ab575078e82926584b9b", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -18,30 +18,6 @@ use crate::{AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis\n /// such an assignment is currently marked as a \"use\" of `x` in an attempt to be maximally\n /// conservative.\n ///\n-/// ## Enums and `SetDiscriminant`\n-///\n-/// Assigning a literal value to an `enum` (e.g. `Option<i32>`), does not result in a simple\n-/// assignment of the form `_1 = /*...*/` in the MIR. For example, the following assignment to `x`:\n-///\n-/// ```\n-/// x = Some(4);\n-/// ```\n-///\n-/// compiles to this MIR\n-///\n-/// ```\n-/// ((_1 as Some).0: i32) = const 4_i32;\n-/// discriminant(_1) = 1;\n-/// ```\n-///\n-/// However, `MaybeLiveLocals` **does** mark `x` (`_1`) as \"killed\" after a statement like this.\n-/// That's because it treats the `SetDiscriminant` operation as a definition of `x`, even though\n-/// the writes that actually initialized the locals happened earlier.\n-///\n-/// This makes `MaybeLiveLocals` unsuitable for certain classes of optimization normally associated\n-/// with a live variables analysis, notably dead-store elimination. It's a dirty hack, but it works\n-/// okay for the generator state transform (currently the main consumer of this analysis).\n-///\n /// [`MaybeBorrowedLocals`]: super::MaybeBorrowedLocals\n /// [flow-test]: https://github.com/rust-lang/rust/blob/a08c47310c7d49cbdc5d7afb38408ba519967ecd/src/test/ui/mir-dataflow/liveness-ptr.rs\n /// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis\n@@ -161,7 +137,13 @@ impl DefUse {\n         match context {\n             PlaceContext::NonUse(_) => None,\n \n-            PlaceContext::MutatingUse(MutatingUseContext::Store) => Some(DefUse::Def),\n+            PlaceContext::MutatingUse(MutatingUseContext::Store | MutatingUseContext::Deinit) => {\n+                Some(DefUse::Def)\n+            }\n+\n+            // Setting the discriminant is not a use because it does no reading, but it is also not\n+            // a def because it does not overwrite the whole place\n+            PlaceContext::MutatingUse(MutatingUseContext::SetDiscriminant) => None,\n \n             // `MutatingUseContext::Call` and `MutatingUseContext::Yield` indicate that this is the\n             // destination place for a `Call` return or `Yield` resume respectively. Since this is"}, {"sha": "13b49256d488a8f1b25c0c5168e00f0db8acd72e", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -897,8 +897,10 @@ impl Visitor<'_> for CanConstProp {\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n             | MutatingUse(MutatingUseContext::AsmOutput)\n+            | MutatingUse(MutatingUseContext::Deinit)\n             // Actual store that can possibly even propagate a value\n-            | MutatingUse(MutatingUseContext::Store) => {\n+            | MutatingUse(MutatingUseContext::Store)\n+            | MutatingUse(MutatingUseContext::SetDiscriminant) => {\n                 if !self.found_assignment.insert(local) {\n                     match &mut self.can_const_prop[local] {\n                         // If the local can only get propagated in its own block, then we don't have"}, {"sha": "d6331a88c5b7da31a7d4e3679a3afe37f8c92066", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -778,7 +778,9 @@ impl Visitor<'_> for CanConstProp {\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n             | MutatingUse(MutatingUseContext::AsmOutput)\n+            | MutatingUse(MutatingUseContext::Deinit)\n             // Actual store that can possibly even propagate a value\n+            | MutatingUse(MutatingUseContext::SetDiscriminant)\n             | MutatingUse(MutatingUseContext::Store) => {\n                 if !self.found_assignment.insert(local) {\n                     match &mut self.can_const_prop[local] {"}, {"sha": "9330e68b1aa8912eda06287591ea024c2476c12e", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -17,24 +17,30 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n-          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n-          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n+-         StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+-         StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+-         _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n++         nop;                             // scope 0 at $DIR/union.rs:13:9: 13:11\n++         nop;                             // scope 0 at $DIR/union.rs:13:23: 13:28\n++         (_1.0: u32) = val() -> bb1;      // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           Deinit(_1);                      // scope 0 at $DIR/union.rs:13:14: 13:30\n-          (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n-          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n+-         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n+-         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n++         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n++         nop;                             // scope 0 at $DIR/union.rs:13:29: 13:30\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n           _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n-          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n++         nop;                             // scope 0 at $DIR/union.rs:16:1: 16:2\n           return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n       }\n   }"}, {"sha": "592388e69a913c98cfbe984afccd57085d99522e", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=48b01a0d0e07ae6a0dcb68ca3d30130a43993fc2", "patch": "@@ -65,17 +65,22 @@\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n+-         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-          StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n-          _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n++         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:15: 21:16\n           StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n           _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:18: 21:23\n           Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n-          (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-          StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n+-         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n           _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n -         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb11]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n +         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n@@ -100,8 +105,9 @@\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:21: 26:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:26:27: 26:28\n -         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   \n@@ -293,8 +299,9 @@\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n           discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n -         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n+-         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n-          StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n++         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:1: 28:2\n           return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:28:2: 28:2\n       }\n   "}]}