{"sha": "09420fc2060e08e332efd00098cda6447285290d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NDIwZmMyMDYwZTA4ZTMzMmVmZDAwMDk4Y2RhNjQ0NzI4NTI5MGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-06T16:49:33Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-06T16:49:33Z"}, "message": "Fix union unused fields check", "tree": {"sha": "d159f32adabd2b247caa75f2173faee6c1a8bd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d159f32adabd2b247caa75f2173faee6c1a8bd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09420fc2060e08e332efd00098cda6447285290d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09420fc2060e08e332efd00098cda6447285290d", "html_url": "https://github.com/rust-lang/rust/commit/09420fc2060e08e332efd00098cda6447285290d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09420fc2060e08e332efd00098cda6447285290d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f54d00d313178a6246566a5f09cd6af1f7a099", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f54d00d313178a6246566a5f09cd6af1f7a099", "html_url": "https://github.com/rust-lang/rust/commit/90f54d00d313178a6246566a5f09cd6af1f7a099"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "6532cde9715b0fdffbc7d182e3597914422a8989", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/09420fc2060e08e332efd00098cda6447285290d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09420fc2060e08e332efd00098cda6447285290d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=09420fc2060e08e332efd00098cda6447285290d", "patch": "@@ -190,20 +190,18 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n \n-    fn mark_as_used_if_union(&mut self, did: DefId) {\n+    fn mark_as_used_if_union(&mut self, did: DefId, fields: &hir::HirVec<hir::Field>) {\n         if let Some(node_id) = self.tcx.hir.as_local_node_id(did) {\n-            match self.tcx.hir.find(node_id) {\n-                Some(hir_map::NodeItem(item)) => match item.node {\n-                    Item_::ItemUnion(ref variant, _) => {\n-                        if variant.fields().len() > 1 {\n-                            for field in variant.fields() {\n+            if let Some(hir_map::NodeItem(item)) = self.tcx.hir.find(node_id) {\n+                if let Item_::ItemUnion(ref variant, _) = item.node {\n+                    if variant.fields().len() > 1 {\n+                        for field in variant.fields() {\n+                            if fields.iter().find(|x| x.name.node == field.name).is_some() {\n                                 self.live_symbols.insert(field.id);\n                             }\n                         }\n                     }\n-                    _ => {}\n-                },\n-                _ => {}\n+                }\n             }\n         }\n     }\n@@ -239,11 +237,6 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             hir::ExprPath(ref qpath @ hir::QPath::TypeRelative(..)) => {\n                 let def = self.tables.qpath_def(qpath, expr.id);\n                 self.handle_definition(def);\n-                self.mark_as_used_if_union(def.def_id());\n-            }\n-            hir::ExprPath(ref qpath @ hir::QPath::Resolved(..)) => {\n-                let def = self.tables.qpath_def(qpath, expr.id);\n-                self.mark_as_used_if_union(def.def_id());\n             }\n             hir::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id);\n@@ -254,6 +247,10 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             hir::ExprTupField(ref lhs, idx) => {\n                 self.handle_tup_field_access(&lhs, idx.node);\n             }\n+            hir::ExprStruct(ref qpath, ref fields, _) => {\n+                let def = self.tables.qpath_def(qpath, expr.id);\n+                self.mark_as_used_if_union(def.def_id(), fields);\n+            }\n             _ => ()\n         }\n "}, {"sha": "5c47ba388a45289e029040dc64489dd307d004b4", "filename": "src/test/ui/union-fields.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/09420fc2060e08e332efd00098cda6447285290d/src%2Ftest%2Fui%2Funion-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09420fc2060e08e332efd00098cda6447285290d/src%2Ftest%2Fui%2Funion-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-fields.stderr?ref=09420fc2060e08e332efd00098cda6447285290d", "patch": "@@ -1,14 +1,26 @@\n-error: field is never used: `y`\n-  --> $DIR/union-fields.rs:20:5\n+error: field is never used: `c`\n+  --> $DIR/union-fields.rs:16:5\n    |\n-20 |     y: u32,\n-   |     ^^^^^^\n+16 |     c: u8, // should be reported\n+   |     ^^^^^\n    |\n note: lint level defined here\n   --> $DIR/union-fields.rs:11:9\n    |\n 11 | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: field is never used: `a`\n+  --> $DIR/union-fields.rs:19:5\n+   |\n+19 |     a: u8, // should be reported\n+   |     ^^^^^\n+\n+error: field is never used: `a`\n+  --> $DIR/union-fields.rs:23:20\n+   |\n+23 | union NoDropLike { a: u8 } // should be reported as unused\n+   |                    ^^^^^\n+\n+error: aborting due to 3 previous errors\n "}]}