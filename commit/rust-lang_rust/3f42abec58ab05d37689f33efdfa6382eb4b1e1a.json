{"sha": "3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNDJhYmVjNThhYjA1ZDM3Njg5ZjMzZWZkZmE2MzgyZWI0YjFlMWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-21T21:09:15Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-21T21:59:07Z"}, "message": "Lower closure prototype after its body.", "tree": {"sha": "3bac82b63750b87f086e0a8aa6c92bc4c0cf6b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bac82b63750b87f086e0a8aa6c92bc4c0cf6b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "html_url": "https://github.com/rust-lang/rust/commit/3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a96fb7973649807a7943e7395456db158dcab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a96fb7973649807a7943e7395456db158dcab6", "html_url": "https://github.com/rust-lang/rust/commit/c5a96fb7973649807a7943e7395456db158dcab6"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "2470a8791e16e7f0814509ab77a2863237acd08e", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "patch": "@@ -770,10 +770,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n-        // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n-\n-        self.with_new_scopes(move |this| {\n+        let (body_id, generator_option) = self.with_new_scopes(move |this| {\n             let prev = this.current_item;\n             this.current_item = Some(fn_decl_span);\n             let mut generator_kind = None;\n@@ -785,8 +782,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let generator_option =\n                 this.generator_movability_for_fn(&decl, fn_decl_span, generator_kind, movability);\n             this.current_item = prev;\n-            hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, generator_option)\n-        })\n+            (body_id, generator_option)\n+        });\n+\n+        // Lower outside new scope to preserve `is_in_loop_condition`.\n+        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n+\n+        hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, generator_option)\n     }\n \n     fn generator_movability_for_fn(\n@@ -832,12 +834,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let outer_decl =\n             FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n-        // We need to lower the declaration outside the new scope, because we\n-        // have to conserve the state of being inside a loop condition for the\n-        // closure argument types.\n-        let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n \n-        self.with_new_scopes(move |this| {\n+        let body_id = self.with_new_scopes(|this| {\n             // FIXME(cramertj): allow `async` non-`move` closures with arguments.\n             if capture_clause == CaptureBy::Ref && !decl.inputs.is_empty() {\n                 struct_span_err!(\n@@ -868,8 +866,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 );\n                 this.expr(fn_decl_span, async_body, ThinVec::new())\n             });\n-            hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, None)\n-        })\n+            body_id\n+        });\n+\n+        // We need to lower the declaration outside the new scope, because we\n+        // have to conserve the state of being inside a loop condition for the\n+        // closure argument types.\n+        let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n+\n+        hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, None)\n     }\n \n     /// Destructure the LHS of complex assignments."}, {"sha": "006e6f490f06b14bb3b5c1a271754fcc8bb77595", "filename": "src/test/ui/closures/local-type-mix.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.rs?ref=3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "patch": "@@ -0,0 +1,17 @@\n+// Check that using the parameter name in its type does not ICE.\n+// edition:2018\n+\n+#![feature(async_closure)]\n+\n+fn main() {\n+    let _ = |x: x| x; //~ ERROR expected type\n+    let _ = |x: bool| -> x { x }; //~ ERROR expected type\n+    let _ = async move |x: x| x; //~ ERROR expected type\n+    let _ = async move |x: bool| -> x { x }; //~ ERROR expected type\n+}\n+\n+fn foo(x: x) {} //~ ERROR expected type\n+fn foo_ret(x: bool) -> x {} //~ ERROR expected type\n+\n+async fn async_foo(x: x) {} //~ ERROR expected type\n+async fn async_foo_ret(x: bool) -> x {} //~ ERROR expected type"}, {"sha": "68c320a065d57919c10c1bb5a8c434ea8c9cfb64", "filename": "src/test/ui/closures/local-type-mix.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f42abec58ab05d37689f33efdfa6382eb4b1e1a/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Flocal-type-mix.stderr?ref=3f42abec58ab05d37689f33efdfa6382eb4b1e1a", "patch": "@@ -0,0 +1,51 @@\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:7:17\n+   |\n+LL |     let _ = |x: x| x;\n+   |                 ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:8:26\n+   |\n+LL |     let _ = |x: bool| -> x { x };\n+   |                          ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:9:28\n+   |\n+LL |     let _ = async move |x: x| x;\n+   |                            ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:10:37\n+   |\n+LL |     let _ = async move |x: bool| -> x { x };\n+   |                                     ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:13:11\n+   |\n+LL | fn foo(x: x) {}\n+   |           ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:14:24\n+   |\n+LL | fn foo_ret(x: bool) -> x {}\n+   |                        ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:16:23\n+   |\n+LL | async fn async_foo(x: x) {}\n+   |                       ^ not a type\n+\n+error[E0573]: expected type, found local variable `x`\n+  --> $DIR/local-type-mix.rs:17:36\n+   |\n+LL | async fn async_foo_ret(x: bool) -> x {}\n+   |                                    ^ not a type\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0573`."}]}