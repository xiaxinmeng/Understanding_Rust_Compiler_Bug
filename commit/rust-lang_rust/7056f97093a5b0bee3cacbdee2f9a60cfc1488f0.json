{"sha": "7056f97093a5b0bee3cacbdee2f9a60cfc1488f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTZmOTcwOTNhNWIwYmVlM2NhY2JkZWUyZjlhNjBjZmMxNDg4ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T05:06:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T05:06:50Z"}, "message": "auto merge of #12964 : gereeter/rust/extended-atomics, r=alexcrichton\n\nFixes #12949.", "tree": {"sha": "0714e57cfe45e487630f65c33d34deb764d99bcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0714e57cfe45e487630f65c33d34deb764d99bcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7056f97093a5b0bee3cacbdee2f9a60cfc1488f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7056f97093a5b0bee3cacbdee2f9a60cfc1488f0", "html_url": "https://github.com/rust-lang/rust/commit/7056f97093a5b0bee3cacbdee2f9a60cfc1488f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7056f97093a5b0bee3cacbdee2f9a60cfc1488f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2d0dce87d8d2d77a1266a3b255b04651f36fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2d0dce87d8d2d77a1266a3b255b04651f36fe2", "html_url": "https://github.com/rust-lang/rust/commit/2a2d0dce87d8d2d77a1266a3b255b04651f36fe2"}, {"sha": "9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "html_url": "https://github.com/rust-lang/rust/commit/9380304169f3993f0c35d4aaaf72fd577a0ce3a6"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "71e67971b458df5ccce9642b0a3a240e18d5b515", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/7056f97093a5b0bee3cacbdee2f9a60cfc1488f0/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7056f97093a5b0bee3cacbdee2f9a60cfc1488f0/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=7056f97093a5b0bee3cacbdee2f9a60cfc1488f0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -462,6 +462,51 @@ impl AtomicInt {\n     pub fn fetch_sub(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n+\n+    /// Bitwise and with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_and(0b110011, SeqCst));\n+    /// assert_eq!(0b100001, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_and(&self, val: int, order: Ordering) -> int {\n+        unsafe { atomic_and(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise or with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_or(0b110011, SeqCst));\n+    /// assert_eq!(0b111111, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_or(&self, val: int, order: Ordering) -> int {\n+        unsafe { atomic_or(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise xor with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_xor(0b110011, SeqCst));\n+    /// assert_eq!(0b011110, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_xor(&self, val: int, order: Ordering) -> int {\n+        unsafe { atomic_xor(self.v.get(), val, order) }\n+    }\n }\n \n impl AtomicUint {\n@@ -529,6 +574,51 @@ impl AtomicUint {\n     pub fn fetch_sub(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n+\n+    /// Bitwise and with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_and(0b110011, SeqCst));\n+    /// assert_eq!(0b100001, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_and(&self, val: uint, order: Ordering) -> uint {\n+        unsafe { atomic_and(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise or with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_or(0b110011, SeqCst));\n+    /// assert_eq!(0b111111, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_or(&self, val: uint, order: Ordering) -> uint {\n+        unsafe { atomic_or(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise xor with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_xor(0b110011, SeqCst));\n+    /// assert_eq!(0b011110, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_xor(&self, val: uint, order: Ordering) -> uint {\n+        unsafe { atomic_xor(self.v.get(), val, order) }\n+    }\n }\n \n impl<T> AtomicPtr<T> {\n@@ -843,6 +933,48 @@ mod test {\n         assert_eq!(a.load(SeqCst),false);\n     }\n \n+    #[test]\n+    fn uint_and() {\n+        let x = AtomicUint::new(0xf731);\n+        assert_eq!(x.fetch_and(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 & 0x137f);\n+    }\n+\n+    #[test]\n+    fn uint_or() {\n+        let x = AtomicUint::new(0xf731);\n+        assert_eq!(x.fetch_or(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 | 0x137f);\n+    }\n+\n+    #[test]\n+    fn uint_xor() {\n+        let x = AtomicUint::new(0xf731);\n+        assert_eq!(x.fetch_xor(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 ^ 0x137f);\n+    }\n+\n+    #[test]\n+    fn int_and() {\n+        let x = AtomicInt::new(0xf731);\n+        assert_eq!(x.fetch_and(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 & 0x137f);\n+    }\n+\n+    #[test]\n+    fn int_or() {\n+        let x = AtomicInt::new(0xf731);\n+        assert_eq!(x.fetch_or(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 | 0x137f);\n+    }\n+\n+    #[test]\n+    fn int_xor() {\n+        let x = AtomicInt::new(0xf731);\n+        assert_eq!(x.fetch_xor(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 ^ 0x137f);\n+    }\n+\n     static mut S_BOOL : AtomicBool = INIT_ATOMIC_BOOL;\n     static mut S_INT  : AtomicInt  = INIT_ATOMIC_INT;\n     static mut S_UINT : AtomicUint = INIT_ATOMIC_UINT;"}]}